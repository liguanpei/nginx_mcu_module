cscope 15 /home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record -q 0000010430 0003752507
	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/Makefile

2 : 
buûd


4 
˛ón
:

5 
rm
 -
rf
 
Makefûe
 
objs


7 
buûd
:

8 
$
(
MAKE
Ë-
f
 
objs
/
Makefûe


9 
$
(
MAKE
Ë-
f
 
objs
/
Makefûe
 
m™∑ge


11 
ö°Æl
:

12 
$
(
MAKE
Ë-
f
 
objs
/
Makefûe
 
ö°Æl


14 
upgøde
:

15 /
v¨
/
www
/
dªam
/
ngöx
-
puŒ
-
ªc‹d


17 
kûl
 -
USR2
 `
ˇt
 /
v¨
/
www
/
dªam
/
ngöx
-
puŒ
-
ªc‹d


18 
¶ìp
 1

19 
ã°
 -
f
 /
v¨
/
www
/
dªam
/
ngöx
-
puŒ
-
ªc‹d


21 
kûl
 -
QUIT
 `
ˇt
 /
v¨
/
www
/
dªam
/
ngöx
-
puŒ
-
ªc‹d


	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/auto/lib/zlib/patch.zlib.h

1 --- 
	gzlib
.
h
 
Thu
 
	gJul
 9 20:06:56 1998

2 +++ 
zlib
-1.1.3/zlib.
h
 
Tue
 
M¨
 22 13:41:04 2005

4 (0 
ö
 
of
 
	gîr‹
).

7 -
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/Makefile

2 
	gCC
 = 
cc


3 
CFLAGS
 = -
pùe
 -
O
 -
W
 -
WÆl
 -
Wpoöãr
-
¨ôh
 -
Wno
-
unu£d
-
∑ømëî
 -
Wîr‹
 -
g
 -g -
O0
 -
I
./
§c
/
ngöx
-
πmp
-
moduÀ


4 
CPP
 = 
cc
 -
E


5 
LINK
 = 
	$$
(
CC
)

8 
ALL_INCS
 = -
I
 
§c
/
c‹e
 \

9 -
I
 
§c
/
evít
 \

10 -
I
 
§c
/
evít
/
moduÀs
 \

11 -
I
 
§c
/
os
/
unix
 \

12 -
I
 
objs
 \

13 -
I
 
§c
/
hâp
 \

14 -
I
 
§c
/
hâp
/
moduÀs
 \

15 -
I
 
§c
/
maû


18 
CORE_DEPS
 = 
§c
/
c‹e
/
ngöx
.
h
 \

19 
§c
/
c‹e
/
ngx_c⁄fig
.
h
 \

20 
§c
/
c‹e
/
ngx_c‹e
.
h
 \

21 
§c
/
c‹e
/
ngx_log
.
h
 \

22 
§c
/
c‹e
/
ngx_∑Œoc
.
h
 \

23 
§c
/
c‹e
/
ngx_¨øy
.
h
 \

24 
§c
/
c‹e
/
ngx_li°
.
h
 \

25 
§c
/
c‹e
/
ngx_hash
.
h
 \

26 
§c
/
c‹e
/
ngx_buf
.
h
 \

27 
§c
/
c‹e
/
ngx_queue
.
h
 \

28 
§c
/
c‹e
/
ngx_°rög
.
h
 \

29 
§c
/
c‹e
/
ngx_∑r£
.
h
 \

30 
§c
/
c‹e
/
ngx_öë
.
h
 \

31 
§c
/
c‹e
/
ngx_fûe
.
h
 \

32 
§c
/
c‹e
/
ngx_¸c
.
h
 \

33 
§c
/
c‹e
/
ngx_¸c32
.
h
 \

34 
§c
/
c‹e
/
ngx_murmurhash
.
h
 \

35 
§c
/
c‹e
/
ngx_md5
.
h
 \

36 
§c
/
c‹e
/
ngx_sha1
.
h
 \

37 
§c
/
c‹e
/
ngx_rbåì
.
h
 \

38 
§c
/
c‹e
/
ngx_ødix_åì
.
h
 \

39 
§c
/
c‹e
/
ngx_¶ab
.
h
 \

40 
§c
/
c‹e
/
ngx_times
.
h
 \

41 
§c
/
c‹e
/
ngx_shmtx
.
h
 \

42 
§c
/
c‹e
/
ngx_c⁄√˘i⁄
.
h
 \

43 
§c
/
c‹e
/
ngx_cy˛e
.
h
 \

44 
§c
/
c‹e
/
ngx_c⁄f_fûe
.
h
 \

45 
§c
/
c‹e
/
ngx_ªsﬁvî
.
h
 \

46 
§c
/
c‹e
/
ngx_›í_fûe_ˇche
.
h
 \

47 
§c
/
c‹e
/
ngx_¸y±
.
h
 \

48 
§c
/
c‹e
/
ngx_¥oxy_¥Ÿocﬁ
.
h
 \

49 
§c
/
evít
/
ngx_evít
.
h
 \

50 
§c
/
evít
/
ngx_evít_timî
.
h
 \

51 
§c
/
evít
/
ngx_evít_po°ed
.
h
 \

52 
§c
/
evít
/
ngx_evít_busy_lock
.
h
 \

53 
§c
/
evít
/
ngx_evít_c⁄√˘
.
h
 \

54 
§c
/
evít
/
ngx_evít_pùe
.
h
 \

55 
§c
/
os
/
unix
/
ngx_time
.
h
 \

56 
§c
/
os
/
unix
/
ngx_î∫o
.
h
 \

57 
§c
/
os
/
unix
/
ngx_Æloc
.
h
 \

58 
§c
/
os
/
unix
/
ngx_fûes
.
h
 \

59 
§c
/
os
/
unix
/
ngx_ch™√l
.
h
 \

60 
§c
/
os
/
unix
/
ngx_shmem
.
h
 \

61 
§c
/
os
/
unix
/
ngx_¥o˚ss
.
h
 \

62 
§c
/
os
/
unix
/
ngx_£èfföôy
.
h
 \

63 
§c
/
os
/
unix
/
ngx_£çro˘ôÀ
.
h
 \

64 
§c
/
os
/
unix
/
ngx_©omic
.
h
 \

65 
§c
/
os
/
unix
/
ngx_gcc_©omic_x86
.
h
 \

66 
§c
/
os
/
unix
/
ngx_thªad
.
h
 \

67 
§c
/
os
/
unix
/
ngx_sockë
.
h
 \

68 
§c
/
os
/
unix
/
ngx_os
.
h
 \

69 
§c
/
os
/
unix
/
ngx_u£r
.
h
 \

70 
§c
/
os
/
unix
/
ngx_¥o˚ss_cy˛e
.
h
 \

71 
§c
/
os
/
unix
/
ngx_löux_c⁄fig
.
h
 \

72 
§c
/
os
/
unix
/
ngx_löux
.
h
 \

73 
§c
/
evít
/
ngx_evít_›ís¶
.
h
 \

74 
§c
/
c‹e
/
ngx_ªgex
.
h
 \

75 
objs
/
ngx_auto_c⁄fig
.
h


78 
CORE_INCS
 = -
I
 
§c
/
c‹e
 \

79 -
I
 
§c
/
evít
 \

80 -
I
 
§c
/
evít
/
moduÀs
 \

81 -
I
 
§c
/
os
/
unix
 \

82 -
I
 
objs


85 
HTTP_DEPS
 = 
§c
/
hâp
/
ngx_hâp
.
h
 \

86 
§c
/
hâp
/
ngx_hâp_ªque°
.
h
 \

87 
§c
/
hâp
/
ngx_hâp_c⁄fig
.
h
 \

88 
§c
/
hâp
/
ngx_hâp_c‹e_moduÀ
.
h
 \

89 
§c
/
hâp
/
ngx_hâp_ˇche
.
h
 \

90 
§c
/
hâp
/
ngx_hâp_v¨übÀs
.
h
 \

91 
§c
/
hâp
/
ngx_hâp_s¸ùt
.
h
 \

92 
§c
/
hâp
/
ngx_hâp_up°ªam
.
h
 \

93 
§c
/
hâp
/
ngx_hâp_up°ªam_round_robö
.
h
 \

94 
§c
/
hâp
/
ngx_hâp_busy_lock
.
h
 \

95 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ssi_fûãr_moduÀ
.
h


98 
HTTP_INCS
 = -
I
 
§c
/
hâp
 \

99 -
I
 
§c
/
hâp
/
moduÀs


102 
ADDON_DEPS
 = 
	`$
(
CORE_DEPS
Ë./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_amf
.
h
 ./§c/ngöx-πmp-moduÀ/
ngx_πmp_b™dwidth
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_cmd_moduÀ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_codec_moduÀ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_evÆ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_vîsi⁄
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_live_moduÀ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_√tˇŒ_moduÀ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_∂ay_moduÀ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_ªc‹d_moduÀ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_ªœy_moduÀ
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_°ªams
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_bô›
.h ./§c/ngöx-πmp-moduÀ/
ngx_πmp_¥oxy_¥Ÿocﬁ
.h ./§c/ngöx-πmp-moduÀ/
hls
/
ngx_πmp_m≥gts
.h ./§c/ngöx-πmp-moduÀ/
dash
/
ngx_πmp_mp4
.h 
	$$
(
HTTP_DEPS
)

105 
objs
/
ngöx
: objs/
§c
/
c‹e
/ngöx.
o
 \

106 
objs
/
§c
/
c‹e
/
ngx_log
.
o
 \

107 
objs
/
§c
/
c‹e
/
ngx_∑Œoc
.
o
 \

108 
objs
/
§c
/
c‹e
/
ngx_¨øy
.
o
 \

109 
objs
/
§c
/
c‹e
/
ngx_li°
.
o
 \

110 
objs
/
§c
/
c‹e
/
ngx_hash
.
o
 \

111 
objs
/
§c
/
c‹e
/
ngx_buf
.
o
 \

112 
objs
/
§c
/
c‹e
/
ngx_queue
.
o
 \

113 
objs
/
§c
/
c‹e
/
ngx_ouçut_chaö
.
o
 \

114 
objs
/
§c
/
c‹e
/
ngx_°rög
.
o
 \

115 
objs
/
§c
/
c‹e
/
ngx_∑r£
.
o
 \

116 
objs
/
§c
/
c‹e
/
ngx_öë
.
o
 \

117 
objs
/
§c
/
c‹e
/
ngx_fûe
.
o
 \

118 
objs
/
§c
/
c‹e
/
ngx_¸c32
.
o
 \

119 
objs
/
§c
/
c‹e
/
ngx_murmurhash
.
o
 \

120 
objs
/
§c
/
c‹e
/
ngx_md5
.
o
 \

121 
objs
/
§c
/
c‹e
/
ngx_rbåì
.
o
 \

122 
objs
/
§c
/
c‹e
/
ngx_ødix_åì
.
o
 \

123 
objs
/
§c
/
c‹e
/
ngx_¶ab
.
o
 \

124 
objs
/
§c
/
c‹e
/
ngx_times
.
o
 \

125 
objs
/
§c
/
c‹e
/
ngx_shmtx
.
o
 \

126 
objs
/
§c
/
c‹e
/
ngx_c⁄√˘i⁄
.
o
 \

127 
objs
/
§c
/
c‹e
/
ngx_cy˛e
.
o
 \

128 
objs
/
§c
/
c‹e
/
ngx_•ölock
.
o
 \

129 
objs
/
§c
/
c‹e
/
ngx_˝uöfo
.
o
 \

130 
objs
/
§c
/
c‹e
/
ngx_c⁄f_fûe
.
o
 \

131 
objs
/
§c
/
c‹e
/
ngx_ªsﬁvî
.
o
 \

132 
objs
/
§c
/
c‹e
/
ngx_›í_fûe_ˇche
.
o
 \

133 
objs
/
§c
/
c‹e
/
ngx_¸y±
.
o
 \

134 
objs
/
§c
/
c‹e
/
ngx_¥oxy_¥Ÿocﬁ
.
o
 \

135 
objs
/
§c
/
evít
/
ngx_evít
.
o
 \

136 
objs
/
§c
/
evít
/
ngx_evít_timî
.
o
 \

137 
objs
/
§c
/
evít
/
ngx_evít_po°ed
.
o
 \

138 
objs
/
§c
/
evít
/
ngx_evít_busy_lock
.
o
 \

139 
objs
/
§c
/
evít
/
ngx_evít_ac˚±
.
o
 \

140 
objs
/
§c
/
evít
/
ngx_evít_c⁄√˘
.
o
 \

141 
objs
/
§c
/
evít
/
ngx_evít_pùe
.
o
 \

142 
objs
/
§c
/
os
/
unix
/
ngx_time
.
o
 \

143 
objs
/
§c
/
os
/
unix
/
ngx_î∫o
.
o
 \

144 
objs
/
§c
/
os
/
unix
/
ngx_Æloc
.
o
 \

145 
objs
/
§c
/
os
/
unix
/
ngx_fûes
.
o
 \

146 
objs
/
§c
/
os
/
unix
/
ngx_sockë
.
o
 \

147 
objs
/
§c
/
os
/
unix
/
ngx_ªcv
.
o
 \

148 
objs
/
§c
/
os
/
unix
/
ngx_ªadv_chaö
.
o
 \

149 
objs
/
§c
/
os
/
unix
/
ngx_udp_ªcv
.
o
 \

150 
objs
/
§c
/
os
/
unix
/
ngx_£nd
.
o
 \

151 
objs
/
§c
/
os
/
unix
/
ngx_wrôev_chaö
.
o
 \

152 
objs
/
§c
/
os
/
unix
/
ngx_ch™√l
.
o
 \

153 
objs
/
§c
/
os
/
unix
/
ngx_shmem
.
o
 \

154 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss
.
o
 \

155 
objs
/
§c
/
os
/
unix
/
ngx_d´m⁄
.
o
 \

156 
objs
/
§c
/
os
/
unix
/
ngx_£èfföôy
.
o
 \

157 
objs
/
§c
/
os
/
unix
/
ngx_£çro˘ôÀ
.
o
 \

158 
objs
/
§c
/
os
/
unix
/
ngx_posix_öô
.
o
 \

159 
objs
/
§c
/
os
/
unix
/
ngx_u£r
.
o
 \

160 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss_cy˛e
.
o
 \

161 
objs
/
§c
/
os
/
unix
/
ngx_löux_öô
.
o
 \

162 
objs
/
§c
/
evít
/
moduÀs
/
ngx_ïﬁl_moduÀ
.
o
 \

163 
objs
/
§c
/
os
/
unix
/
ngx_löux_£ndfûe_chaö
.
o
 \

164 
objs
/
§c
/
evít
/
ngx_evít_›ís¶
.
o
 \

165 
objs
/
§c
/
evít
/
ngx_evít_›ís¶_°≠lög
.
o
 \

166 
objs
/
§c
/
c‹e
/
ngx_ªgex
.
o
 \

167 
objs
/
§c
/
hâp
/
ngx_hâp
.
o
 \

168 
objs
/
§c
/
hâp
/
ngx_hâp_c‹e_moduÀ
.
o
 \

169 
objs
/
§c
/
hâp
/
ngx_hâp_•ecül_ª•⁄£
.
o
 \

170 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°
.
o
 \

171 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£
.
o
 \

172 
objs
/
§c
/
hâp
/
ngx_hâp_hódî_fûãr_moduÀ
.
o
 \

173 
objs
/
§c
/
hâp
/
ngx_hâp_wrôe_fûãr_moduÀ
.
o
 \

174 
objs
/
§c
/
hâp
/
ngx_hâp_c›y_fûãr_moduÀ
.
o
 \

175 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_log_moduÀ
.
o
 \

176 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°_body
.
o
 \

177 
objs
/
§c
/
hâp
/
ngx_hâp_v¨übÀs
.
o
 \

178 
objs
/
§c
/
hâp
/
ngx_hâp_s¸ùt
.
o
 \

179 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam
.
o
 \

180 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam_round_robö
.
o
 \

181 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£_time
.
o
 \

182 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_°©ic_moduÀ
.
o
 \

183 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ödex_moduÀ
.
o
 \

184 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_chunked_fûãr_moduÀ
.
o
 \

185 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ønge_fûãr_moduÀ
.
o
 \

186 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_hódîs_fûãr_moduÀ
.
o
 \

187 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
.
o
 \

188 
objs
/
§c
/
hâp
/
ngx_hâp_busy_lock
.
o
 \

189 
objs
/
§c
/
hâp
/
ngx_hâp_fûe_ˇche
.
o
 \

190 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_gzù_fûãr_moduÀ
.
o
 \

191 
objs
/
§c
/
hâp
/
ngx_hâp_po°p⁄e_fûãr_moduÀ
.
o
 \

192 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ssi_fûãr_moduÀ
.
o
 \

193 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ch¨£t_fûãr_moduÀ
.
o
 \

194 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_u£rid_fûãr_moduÀ
.
o
 \

195 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_autoödex_moduÀ
.
o
 \

196 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_auth_basic_moduÀ
.
o
 \

197 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ac˚ss_moduÀ
.
o
 \

198 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_c⁄n_moduÀ
.
o
 \

199 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_ªq_moduÀ
.
o
 \

200 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_geo_moduÀ
.
o
 \

201 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_m≠_moduÀ
.
o
 \

202 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_•lô_˛õ¡s_moduÀ
.
o
 \

203 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ª„ªr_moduÀ
.
o
 \

204 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ªwrôe_moduÀ
.
o
 \

205 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_¥oxy_moduÀ
.
o
 \

206 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_Á°cgi_moduÀ
.
o
 \

207 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_uwsgi_moduÀ
.
o
 \

208 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_scgi_moduÀ
.
o
 \

209 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_memˇched_moduÀ
.
o
 \

210 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_em±y_gif_moduÀ
.
o
 \

211 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_brow£r_moduÀ
.
o
 \

212 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_ù_hash_moduÀ
.
o
 \

213 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
.
o
 \

214 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_kì∑live_moduÀ
.
o
 \

215 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp
.
o
 \

216 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_öô
.
o
 \

217 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dshake
.
o
 \

218 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dÀr
.
o
 \

219 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_amf
.
o
 \

220 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_£nd
.
o
 \

221 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_sh¨ed
.
o
 \

222 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_evÆ
.
o
 \

223 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ª˚ive
.
o
 \

224 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c‹e_moduÀ
.
o
 \

225 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_cmd_moduÀ
.
o
 \

226 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_codec_moduÀ
.
o
 \

227 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ac˚ss_moduÀ
.
o
 \

228 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªc‹d_moduÀ
.
o
 \

229 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_live_moduÀ
.
o
 \

230 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_∂ay_moduÀ
.
o
 \

231 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_Êv_moduÀ
.
o
 \

232 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_mp4_moduÀ
.
o
 \

233 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_√tˇŒ_moduÀ
.
o
 \

234 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_°©_moduÀ
.
o
 \

235 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c⁄åﬁ_moduÀ
.
o
 \

236 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªœy_moduÀ
.
o
 \

237 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_b™dwidth
.
o
 \

238 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_exec_moduÀ
.
o
 \

239 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_auto_push_moduÀ
.
o
 \

240 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_nŸify_moduÀ
.
o
 \

241 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_log_moduÀ
.
o
 \

242 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_limô_moduÀ
.
o
 \

243 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_bô›
.
o
 \

244 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_¥oxy_¥Ÿocﬁ
.
o
 \

245 
objs
/
add⁄
/
hls
/
ngx_πmp_hls_moduÀ
.
o
 \

246 
objs
/
add⁄
/
dash
/
ngx_πmp_dash_moduÀ
.
o
 \

247 
objs
/
add⁄
/
hls
/
ngx_πmp_m≥gts
.
o
 \

248 
objs
/
add⁄
/
dash
/
ngx_πmp_mp4
.
o
 \

249 
objs
/
ngx_moduÀs
.
o


251 
	`$
(
LINK
Ë-
o
 
objs
/
ngöx
 \

252 
objs
/
§c
/
c‹e
/
ngöx
.
o
 \

253 
objs
/
§c
/
c‹e
/
ngx_log
.
o
 \

254 
objs
/
§c
/
c‹e
/
ngx_∑Œoc
.
o
 \

255 
objs
/
§c
/
c‹e
/
ngx_¨øy
.
o
 \

256 
objs
/
§c
/
c‹e
/
ngx_li°
.
o
 \

257 
objs
/
§c
/
c‹e
/
ngx_hash
.
o
 \

258 
objs
/
§c
/
c‹e
/
ngx_buf
.
o
 \

259 
objs
/
§c
/
c‹e
/
ngx_queue
.
o
 \

260 
objs
/
§c
/
c‹e
/
ngx_ouçut_chaö
.
o
 \

261 
objs
/
§c
/
c‹e
/
ngx_°rög
.
o
 \

262 
objs
/
§c
/
c‹e
/
ngx_∑r£
.
o
 \

263 
objs
/
§c
/
c‹e
/
ngx_öë
.
o
 \

264 
objs
/
§c
/
c‹e
/
ngx_fûe
.
o
 \

265 
objs
/
§c
/
c‹e
/
ngx_¸c32
.
o
 \

266 
objs
/
§c
/
c‹e
/
ngx_murmurhash
.
o
 \

267 
objs
/
§c
/
c‹e
/
ngx_md5
.
o
 \

268 
objs
/
§c
/
c‹e
/
ngx_rbåì
.
o
 \

269 
objs
/
§c
/
c‹e
/
ngx_ødix_åì
.
o
 \

270 
objs
/
§c
/
c‹e
/
ngx_¶ab
.
o
 \

271 
objs
/
§c
/
c‹e
/
ngx_times
.
o
 \

272 
objs
/
§c
/
c‹e
/
ngx_shmtx
.
o
 \

273 
objs
/
§c
/
c‹e
/
ngx_c⁄√˘i⁄
.
o
 \

274 
objs
/
§c
/
c‹e
/
ngx_cy˛e
.
o
 \

275 
objs
/
§c
/
c‹e
/
ngx_•ölock
.
o
 \

276 
objs
/
§c
/
c‹e
/
ngx_˝uöfo
.
o
 \

277 
objs
/
§c
/
c‹e
/
ngx_c⁄f_fûe
.
o
 \

278 
objs
/
§c
/
c‹e
/
ngx_ªsﬁvî
.
o
 \

279 
objs
/
§c
/
c‹e
/
ngx_›í_fûe_ˇche
.
o
 \

280 
objs
/
§c
/
c‹e
/
ngx_¸y±
.
o
 \

281 
objs
/
§c
/
c‹e
/
ngx_¥oxy_¥Ÿocﬁ
.
o
 \

282 
objs
/
§c
/
evít
/
ngx_evít
.
o
 \

283 
objs
/
§c
/
evít
/
ngx_evít_timî
.
o
 \

284 
objs
/
§c
/
evít
/
ngx_evít_po°ed
.
o
 \

285 
objs
/
§c
/
evít
/
ngx_evít_busy_lock
.
o
 \

286 
objs
/
§c
/
evít
/
ngx_evít_ac˚±
.
o
 \

287 
objs
/
§c
/
evít
/
ngx_evít_c⁄√˘
.
o
 \

288 
objs
/
§c
/
evít
/
ngx_evít_pùe
.
o
 \

289 
objs
/
§c
/
os
/
unix
/
ngx_time
.
o
 \

290 
objs
/
§c
/
os
/
unix
/
ngx_î∫o
.
o
 \

291 
objs
/
§c
/
os
/
unix
/
ngx_Æloc
.
o
 \

292 
objs
/
§c
/
os
/
unix
/
ngx_fûes
.
o
 \

293 
objs
/
§c
/
os
/
unix
/
ngx_sockë
.
o
 \

294 
objs
/
§c
/
os
/
unix
/
ngx_ªcv
.
o
 \

295 
objs
/
§c
/
os
/
unix
/
ngx_ªadv_chaö
.
o
 \

296 
objs
/
§c
/
os
/
unix
/
ngx_udp_ªcv
.
o
 \

297 
objs
/
§c
/
os
/
unix
/
ngx_£nd
.
o
 \

298 
objs
/
§c
/
os
/
unix
/
ngx_wrôev_chaö
.
o
 \

299 
objs
/
§c
/
os
/
unix
/
ngx_ch™√l
.
o
 \

300 
objs
/
§c
/
os
/
unix
/
ngx_shmem
.
o
 \

301 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss
.
o
 \

302 
objs
/
§c
/
os
/
unix
/
ngx_d´m⁄
.
o
 \

303 
objs
/
§c
/
os
/
unix
/
ngx_£èfföôy
.
o
 \

304 
objs
/
§c
/
os
/
unix
/
ngx_£çro˘ôÀ
.
o
 \

305 
objs
/
§c
/
os
/
unix
/
ngx_posix_öô
.
o
 \

306 
objs
/
§c
/
os
/
unix
/
ngx_u£r
.
o
 \

307 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss_cy˛e
.
o
 \

308 
objs
/
§c
/
os
/
unix
/
ngx_löux_öô
.
o
 \

309 
objs
/
§c
/
evít
/
moduÀs
/
ngx_ïﬁl_moduÀ
.
o
 \

310 
objs
/
§c
/
os
/
unix
/
ngx_löux_£ndfûe_chaö
.
o
 \

311 
objs
/
§c
/
evít
/
ngx_evít_›ís¶
.
o
 \

312 
objs
/
§c
/
evít
/
ngx_evít_›ís¶_°≠lög
.
o
 \

313 
objs
/
§c
/
c‹e
/
ngx_ªgex
.
o
 \

314 
objs
/
§c
/
hâp
/
ngx_hâp
.
o
 \

315 
objs
/
§c
/
hâp
/
ngx_hâp_c‹e_moduÀ
.
o
 \

316 
objs
/
§c
/
hâp
/
ngx_hâp_•ecül_ª•⁄£
.
o
 \

317 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°
.
o
 \

318 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£
.
o
 \

319 
objs
/
§c
/
hâp
/
ngx_hâp_hódî_fûãr_moduÀ
.
o
 \

320 
objs
/
§c
/
hâp
/
ngx_hâp_wrôe_fûãr_moduÀ
.
o
 \

321 
objs
/
§c
/
hâp
/
ngx_hâp_c›y_fûãr_moduÀ
.
o
 \

322 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_log_moduÀ
.
o
 \

323 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°_body
.
o
 \

324 
objs
/
§c
/
hâp
/
ngx_hâp_v¨übÀs
.
o
 \

325 
objs
/
§c
/
hâp
/
ngx_hâp_s¸ùt
.
o
 \

326 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam
.
o
 \

327 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam_round_robö
.
o
 \

328 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£_time
.
o
 \

329 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_°©ic_moduÀ
.
o
 \

330 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ödex_moduÀ
.
o
 \

331 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_chunked_fûãr_moduÀ
.
o
 \

332 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ønge_fûãr_moduÀ
.
o
 \

333 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_hódîs_fûãr_moduÀ
.
o
 \

334 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
.
o
 \

335 
objs
/
§c
/
hâp
/
ngx_hâp_busy_lock
.
o
 \

336 
objs
/
§c
/
hâp
/
ngx_hâp_fûe_ˇche
.
o
 \

337 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_gzù_fûãr_moduÀ
.
o
 \

338 
objs
/
§c
/
hâp
/
ngx_hâp_po°p⁄e_fûãr_moduÀ
.
o
 \

339 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ssi_fûãr_moduÀ
.
o
 \

340 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ch¨£t_fûãr_moduÀ
.
o
 \

341 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_u£rid_fûãr_moduÀ
.
o
 \

342 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_autoödex_moduÀ
.
o
 \

343 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_auth_basic_moduÀ
.
o
 \

344 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ac˚ss_moduÀ
.
o
 \

345 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_c⁄n_moduÀ
.
o
 \

346 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_ªq_moduÀ
.
o
 \

347 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_geo_moduÀ
.
o
 \

348 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_m≠_moduÀ
.
o
 \

349 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_•lô_˛õ¡s_moduÀ
.
o
 \

350 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ª„ªr_moduÀ
.
o
 \

351 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ªwrôe_moduÀ
.
o
 \

352 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_¥oxy_moduÀ
.
o
 \

353 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_Á°cgi_moduÀ
.
o
 \

354 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_uwsgi_moduÀ
.
o
 \

355 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_scgi_moduÀ
.
o
 \

356 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_memˇched_moduÀ
.
o
 \

357 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_em±y_gif_moduÀ
.
o
 \

358 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_brow£r_moduÀ
.
o
 \

359 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_ù_hash_moduÀ
.
o
 \

360 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
.
o
 \

361 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_kì∑live_moduÀ
.
o
 \

362 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp
.
o
 \

363 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_öô
.
o
 \

364 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dshake
.
o
 \

365 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dÀr
.
o
 \

366 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_amf
.
o
 \

367 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_£nd
.
o
 \

368 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_sh¨ed
.
o
 \

369 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_evÆ
.
o
 \

370 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ª˚ive
.
o
 \

371 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c‹e_moduÀ
.
o
 \

372 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_cmd_moduÀ
.
o
 \

373 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_codec_moduÀ
.
o
 \

374 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ac˚ss_moduÀ
.
o
 \

375 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªc‹d_moduÀ
.
o
 \

376 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_live_moduÀ
.
o
 \

377 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_∂ay_moduÀ
.
o
 \

378 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_Êv_moduÀ
.
o
 \

379 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_mp4_moduÀ
.
o
 \

380 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_√tˇŒ_moduÀ
.
o
 \

381 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_°©_moduÀ
.
o
 \

382 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c⁄åﬁ_moduÀ
.
o
 \

383 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªœy_moduÀ
.
o
 \

384 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_b™dwidth
.
o
 \

385 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_exec_moduÀ
.
o
 \

386 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_auto_push_moduÀ
.
o
 \

387 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_nŸify_moduÀ
.
o
 \

388 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_log_moduÀ
.
o
 \

389 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_limô_moduÀ
.
o
 \

390 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_bô›
.
o
 \

391 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_¥oxy_¥Ÿocﬁ
.
o
 \

392 
objs
/
add⁄
/
hls
/
ngx_πmp_hls_moduÀ
.
o
 \

393 
objs
/
add⁄
/
dash
/
ngx_πmp_dash_moduÀ
.
o
 \

394 
objs
/
add⁄
/
hls
/
ngx_πmp_m≥gts
.
o
 \

395 
objs
/
add⁄
/
dash
/
ngx_πmp_mp4
.
o
 \

396 
objs
/
ngx_moduÀs
.
o
 \

397 -
Õthªad
 -
l¸y±
 -
Õ¸e
 -
ls¶
 -
l¸y±o
 -
ldl
 -
lz


401 
objs
/
ngx_moduÀs
.
o
: 
	`$
(
CORE_DEPS
) \

402 
objs
/
ngx_moduÀs
.
c


403 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

404 -
o
 
objs
/
ngx_moduÀs
.o \

405 
objs
/
ngx_moduÀs
.
c


408 
objs
/
§c
/
c‹e
/
ngöx
.
o
: 
	`$
(
CORE_DEPS
) \

409 
§c
/
c‹e
/
ngöx
.
c


410 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

411 -
o
 
objs
/
§c
/
c‹e
/
ngöx
.o \

412 
§c
/
c‹e
/
ngöx
.
c


415 
objs
/
§c
/
c‹e
/
ngx_log
.
o
: 
	`$
(
CORE_DEPS
) \

416 
§c
/
c‹e
/
ngx_log
.
c


417 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

418 -
o
 
objs
/
§c
/
c‹e
/
ngx_log
.o \

419 
§c
/
c‹e
/
ngx_log
.
c


422 
objs
/
§c
/
c‹e
/
ngx_∑Œoc
.
o
: 
	`$
(
CORE_DEPS
) \

423 
§c
/
c‹e
/
ngx_∑Œoc
.
c


424 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

425 -
o
 
objs
/
§c
/
c‹e
/
ngx_∑Œoc
.o \

426 
§c
/
c‹e
/
ngx_∑Œoc
.
c


429 
objs
/
§c
/
c‹e
/
ngx_¨øy
.
o
: 
	`$
(
CORE_DEPS
) \

430 
§c
/
c‹e
/
ngx_¨øy
.
c


431 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

432 -
o
 
objs
/
§c
/
c‹e
/
ngx_¨øy
.o \

433 
§c
/
c‹e
/
ngx_¨øy
.
c


436 
objs
/
§c
/
c‹e
/
ngx_li°
.
o
: 
	`$
(
CORE_DEPS
) \

437 
§c
/
c‹e
/
ngx_li°
.
c


438 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

439 -
o
 
objs
/
§c
/
c‹e
/
ngx_li°
.o \

440 
§c
/
c‹e
/
ngx_li°
.
c


443 
objs
/
§c
/
c‹e
/
ngx_hash
.
o
: 
	`$
(
CORE_DEPS
) \

444 
§c
/
c‹e
/
ngx_hash
.
c


445 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

446 -
o
 
objs
/
§c
/
c‹e
/
ngx_hash
.o \

447 
§c
/
c‹e
/
ngx_hash
.
c


450 
objs
/
§c
/
c‹e
/
ngx_buf
.
o
: 
	`$
(
CORE_DEPS
) \

451 
§c
/
c‹e
/
ngx_buf
.
c


452 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

453 -
o
 
objs
/
§c
/
c‹e
/
ngx_buf
.o \

454 
§c
/
c‹e
/
ngx_buf
.
c


457 
objs
/
§c
/
c‹e
/
ngx_queue
.
o
: 
	`$
(
CORE_DEPS
) \

458 
§c
/
c‹e
/
ngx_queue
.
c


459 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

460 -
o
 
objs
/
§c
/
c‹e
/
ngx_queue
.o \

461 
§c
/
c‹e
/
ngx_queue
.
c


464 
objs
/
§c
/
c‹e
/
ngx_ouçut_chaö
.
o
: 
	`$
(
CORE_DEPS
) \

465 
§c
/
c‹e
/
ngx_ouçut_chaö
.
c


466 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

467 -
o
 
objs
/
§c
/
c‹e
/
ngx_ouçut_chaö
.o \

468 
§c
/
c‹e
/
ngx_ouçut_chaö
.
c


471 
objs
/
§c
/
c‹e
/
ngx_°rög
.
o
: 
	`$
(
CORE_DEPS
) \

472 
§c
/
c‹e
/
ngx_°rög
.
c


473 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

474 -
o
 
objs
/
§c
/
c‹e
/
ngx_°rög
.o \

475 
§c
/
c‹e
/
ngx_°rög
.
c


478 
objs
/
§c
/
c‹e
/
ngx_∑r£
.
o
: 
	`$
(
CORE_DEPS
) \

479 
§c
/
c‹e
/
ngx_∑r£
.
c


480 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

481 -
o
 
objs
/
§c
/
c‹e
/
ngx_∑r£
.o \

482 
§c
/
c‹e
/
ngx_∑r£
.
c


485 
objs
/
§c
/
c‹e
/
ngx_öë
.
o
: 
	`$
(
CORE_DEPS
) \

486 
§c
/
c‹e
/
ngx_öë
.
c


487 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

488 -
o
 
objs
/
§c
/
c‹e
/
ngx_öë
.o \

489 
§c
/
c‹e
/
ngx_öë
.
c


492 
objs
/
§c
/
c‹e
/
ngx_fûe
.
o
: 
	`$
(
CORE_DEPS
) \

493 
§c
/
c‹e
/
ngx_fûe
.
c


494 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

495 -
o
 
objs
/
§c
/
c‹e
/
ngx_fûe
.o \

496 
§c
/
c‹e
/
ngx_fûe
.
c


499 
objs
/
§c
/
c‹e
/
ngx_¸c32
.
o
: 
	`$
(
CORE_DEPS
) \

500 
§c
/
c‹e
/
ngx_¸c32
.
c


501 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

502 -
o
 
objs
/
§c
/
c‹e
/
ngx_¸c32
.o \

503 
§c
/
c‹e
/
ngx_¸c32
.
c


506 
objs
/
§c
/
c‹e
/
ngx_murmurhash
.
o
: 
	`$
(
CORE_DEPS
) \

507 
§c
/
c‹e
/
ngx_murmurhash
.
c


508 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

509 -
o
 
objs
/
§c
/
c‹e
/
ngx_murmurhash
.o \

510 
§c
/
c‹e
/
ngx_murmurhash
.
c


513 
objs
/
§c
/
c‹e
/
ngx_md5
.
o
: 
	`$
(
CORE_DEPS
) \

514 
§c
/
c‹e
/
ngx_md5
.
c


515 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

516 -
o
 
objs
/
§c
/
c‹e
/
ngx_md5
.o \

517 
§c
/
c‹e
/
ngx_md5
.
c


520 
objs
/
§c
/
c‹e
/
ngx_rbåì
.
o
: 
	`$
(
CORE_DEPS
) \

521 
§c
/
c‹e
/
ngx_rbåì
.
c


522 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

523 -
o
 
objs
/
§c
/
c‹e
/
ngx_rbåì
.o \

524 
§c
/
c‹e
/
ngx_rbåì
.
c


527 
objs
/
§c
/
c‹e
/
ngx_ødix_åì
.
o
: 
	`$
(
CORE_DEPS
) \

528 
§c
/
c‹e
/
ngx_ødix_åì
.
c


529 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

530 -
o
 
objs
/
§c
/
c‹e
/
ngx_ødix_åì
.o \

531 
§c
/
c‹e
/
ngx_ødix_åì
.
c


534 
objs
/
§c
/
c‹e
/
ngx_¶ab
.
o
: 
	`$
(
CORE_DEPS
) \

535 
§c
/
c‹e
/
ngx_¶ab
.
c


536 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

537 -
o
 
objs
/
§c
/
c‹e
/
ngx_¶ab
.o \

538 
§c
/
c‹e
/
ngx_¶ab
.
c


541 
objs
/
§c
/
c‹e
/
ngx_times
.
o
: 
	`$
(
CORE_DEPS
) \

542 
§c
/
c‹e
/
ngx_times
.
c


543 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

544 -
o
 
objs
/
§c
/
c‹e
/
ngx_times
.o \

545 
§c
/
c‹e
/
ngx_times
.
c


548 
objs
/
§c
/
c‹e
/
ngx_shmtx
.
o
: 
	`$
(
CORE_DEPS
) \

549 
§c
/
c‹e
/
ngx_shmtx
.
c


550 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

551 -
o
 
objs
/
§c
/
c‹e
/
ngx_shmtx
.o \

552 
§c
/
c‹e
/
ngx_shmtx
.
c


555 
objs
/
§c
/
c‹e
/
ngx_c⁄√˘i⁄
.
o
: 
	`$
(
CORE_DEPS
) \

556 
§c
/
c‹e
/
ngx_c⁄√˘i⁄
.
c


557 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

558 -
o
 
objs
/
§c
/
c‹e
/
ngx_c⁄√˘i⁄
.o \

559 
§c
/
c‹e
/
ngx_c⁄√˘i⁄
.
c


562 
objs
/
§c
/
c‹e
/
ngx_cy˛e
.
o
: 
	`$
(
CORE_DEPS
) \

563 
§c
/
c‹e
/
ngx_cy˛e
.
c


564 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

565 -
o
 
objs
/
§c
/
c‹e
/
ngx_cy˛e
.o \

566 
§c
/
c‹e
/
ngx_cy˛e
.
c


569 
objs
/
§c
/
c‹e
/
ngx_•ölock
.
o
: 
	`$
(
CORE_DEPS
) \

570 
§c
/
c‹e
/
ngx_•ölock
.
c


571 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

572 -
o
 
objs
/
§c
/
c‹e
/
ngx_•ölock
.o \

573 
§c
/
c‹e
/
ngx_•ölock
.
c


576 
objs
/
§c
/
c‹e
/
ngx_˝uöfo
.
o
: 
	`$
(
CORE_DEPS
) \

577 
§c
/
c‹e
/
ngx_˝uöfo
.
c


578 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

579 -
o
 
objs
/
§c
/
c‹e
/
ngx_˝uöfo
.o \

580 
§c
/
c‹e
/
ngx_˝uöfo
.
c


583 
objs
/
§c
/
c‹e
/
ngx_c⁄f_fûe
.
o
: 
	`$
(
CORE_DEPS
) \

584 
§c
/
c‹e
/
ngx_c⁄f_fûe
.
c


585 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

586 -
o
 
objs
/
§c
/
c‹e
/
ngx_c⁄f_fûe
.o \

587 
§c
/
c‹e
/
ngx_c⁄f_fûe
.
c


590 
objs
/
§c
/
c‹e
/
ngx_ªsﬁvî
.
o
: 
	`$
(
CORE_DEPS
) \

591 
§c
/
c‹e
/
ngx_ªsﬁvî
.
c


592 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

593 -
o
 
objs
/
§c
/
c‹e
/
ngx_ªsﬁvî
.o \

594 
§c
/
c‹e
/
ngx_ªsﬁvî
.
c


597 
objs
/
§c
/
c‹e
/
ngx_›í_fûe_ˇche
.
o
: 
	`$
(
CORE_DEPS
) \

598 
§c
/
c‹e
/
ngx_›í_fûe_ˇche
.
c


599 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

600 -
o
 
objs
/
§c
/
c‹e
/
ngx_›í_fûe_ˇche
.o \

601 
§c
/
c‹e
/
ngx_›í_fûe_ˇche
.
c


604 
objs
/
§c
/
c‹e
/
ngx_¸y±
.
o
: 
	`$
(
CORE_DEPS
) \

605 
§c
/
c‹e
/
ngx_¸y±
.
c


606 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

607 -
o
 
objs
/
§c
/
c‹e
/
ngx_¸y±
.o \

608 
§c
/
c‹e
/
ngx_¸y±
.
c


611 
objs
/
§c
/
c‹e
/
ngx_¥oxy_¥Ÿocﬁ
.
o
: 
	`$
(
CORE_DEPS
) \

612 
§c
/
c‹e
/
ngx_¥oxy_¥Ÿocﬁ
.
c


613 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

614 -
o
 
objs
/
§c
/
c‹e
/
ngx_¥oxy_¥Ÿocﬁ
.o \

615 
§c
/
c‹e
/
ngx_¥oxy_¥Ÿocﬁ
.
c


618 
objs
/
§c
/
evít
/
ngx_evít
.
o
: 
	`$
(
CORE_DEPS
) \

619 
§c
/
evít
/
ngx_evít
.
c


620 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

621 -
o
 
objs
/
§c
/
evít
/
ngx_evít
.o \

622 
§c
/
evít
/
ngx_evít
.
c


625 
objs
/
§c
/
evít
/
ngx_evít_timî
.
o
: 
	`$
(
CORE_DEPS
) \

626 
§c
/
evít
/
ngx_evít_timî
.
c


627 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

628 -
o
 
objs
/
§c
/
evít
/
ngx_evít_timî
.o \

629 
§c
/
evít
/
ngx_evít_timî
.
c


632 
objs
/
§c
/
evít
/
ngx_evít_po°ed
.
o
: 
	`$
(
CORE_DEPS
) \

633 
§c
/
evít
/
ngx_evít_po°ed
.
c


634 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

635 -
o
 
objs
/
§c
/
evít
/
ngx_evít_po°ed
.o \

636 
§c
/
evít
/
ngx_evít_po°ed
.
c


639 
objs
/
§c
/
evít
/
ngx_evít_busy_lock
.
o
: 
	`$
(
CORE_DEPS
) \

640 
§c
/
evít
/
ngx_evít_busy_lock
.
c


641 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

642 -
o
 
objs
/
§c
/
evít
/
ngx_evít_busy_lock
.o \

643 
§c
/
evít
/
ngx_evít_busy_lock
.
c


646 
objs
/
§c
/
evít
/
ngx_evít_ac˚±
.
o
: 
	`$
(
CORE_DEPS
) \

647 
§c
/
evít
/
ngx_evít_ac˚±
.
c


648 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

649 -
o
 
objs
/
§c
/
evít
/
ngx_evít_ac˚±
.o \

650 
§c
/
evít
/
ngx_evít_ac˚±
.
c


653 
objs
/
§c
/
evít
/
ngx_evít_c⁄√˘
.
o
: 
	`$
(
CORE_DEPS
) \

654 
§c
/
evít
/
ngx_evít_c⁄√˘
.
c


655 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

656 -
o
 
objs
/
§c
/
evít
/
ngx_evít_c⁄√˘
.o \

657 
§c
/
evít
/
ngx_evít_c⁄√˘
.
c


660 
objs
/
§c
/
evít
/
ngx_evít_pùe
.
o
: 
	`$
(
CORE_DEPS
) \

661 
§c
/
evít
/
ngx_evít_pùe
.
c


662 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

663 -
o
 
objs
/
§c
/
evít
/
ngx_evít_pùe
.o \

664 
§c
/
evít
/
ngx_evít_pùe
.
c


667 
objs
/
§c
/
os
/
unix
/
ngx_time
.
o
: 
	`$
(
CORE_DEPS
) \

668 
§c
/
os
/
unix
/
ngx_time
.
c


669 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

670 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_time
.o \

671 
§c
/
os
/
unix
/
ngx_time
.
c


674 
objs
/
§c
/
os
/
unix
/
ngx_î∫o
.
o
: 
	`$
(
CORE_DEPS
) \

675 
§c
/
os
/
unix
/
ngx_î∫o
.
c


676 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

677 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_î∫o
.o \

678 
§c
/
os
/
unix
/
ngx_î∫o
.
c


681 
objs
/
§c
/
os
/
unix
/
ngx_Æloc
.
o
: 
	`$
(
CORE_DEPS
) \

682 
§c
/
os
/
unix
/
ngx_Æloc
.
c


683 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

684 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_Æloc
.o \

685 
§c
/
os
/
unix
/
ngx_Æloc
.
c


688 
objs
/
§c
/
os
/
unix
/
ngx_fûes
.
o
: 
	`$
(
CORE_DEPS
) \

689 
§c
/
os
/
unix
/
ngx_fûes
.
c


690 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

691 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_fûes
.o \

692 
§c
/
os
/
unix
/
ngx_fûes
.
c


695 
objs
/
§c
/
os
/
unix
/
ngx_sockë
.
o
: 
	`$
(
CORE_DEPS
) \

696 
§c
/
os
/
unix
/
ngx_sockë
.
c


697 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

698 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_sockë
.o \

699 
§c
/
os
/
unix
/
ngx_sockë
.
c


702 
objs
/
§c
/
os
/
unix
/
ngx_ªcv
.
o
: 
	`$
(
CORE_DEPS
) \

703 
§c
/
os
/
unix
/
ngx_ªcv
.
c


704 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

705 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_ªcv
.o \

706 
§c
/
os
/
unix
/
ngx_ªcv
.
c


709 
objs
/
§c
/
os
/
unix
/
ngx_ªadv_chaö
.
o
: 
	`$
(
CORE_DEPS
) \

710 
§c
/
os
/
unix
/
ngx_ªadv_chaö
.
c


711 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

712 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_ªadv_chaö
.o \

713 
§c
/
os
/
unix
/
ngx_ªadv_chaö
.
c


716 
objs
/
§c
/
os
/
unix
/
ngx_udp_ªcv
.
o
: 
	`$
(
CORE_DEPS
) \

717 
§c
/
os
/
unix
/
ngx_udp_ªcv
.
c


718 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

719 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_udp_ªcv
.o \

720 
§c
/
os
/
unix
/
ngx_udp_ªcv
.
c


723 
objs
/
§c
/
os
/
unix
/
ngx_£nd
.
o
: 
	`$
(
CORE_DEPS
) \

724 
§c
/
os
/
unix
/
ngx_£nd
.
c


725 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

726 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_£nd
.o \

727 
§c
/
os
/
unix
/
ngx_£nd
.
c


730 
objs
/
§c
/
os
/
unix
/
ngx_wrôev_chaö
.
o
: 
	`$
(
CORE_DEPS
) \

731 
§c
/
os
/
unix
/
ngx_wrôev_chaö
.
c


732 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

733 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_wrôev_chaö
.o \

734 
§c
/
os
/
unix
/
ngx_wrôev_chaö
.
c


737 
objs
/
§c
/
os
/
unix
/
ngx_ch™√l
.
o
: 
	`$
(
CORE_DEPS
) \

738 
§c
/
os
/
unix
/
ngx_ch™√l
.
c


739 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

740 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_ch™√l
.o \

741 
§c
/
os
/
unix
/
ngx_ch™√l
.
c


744 
objs
/
§c
/
os
/
unix
/
ngx_shmem
.
o
: 
	`$
(
CORE_DEPS
) \

745 
§c
/
os
/
unix
/
ngx_shmem
.
c


746 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

747 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_shmem
.o \

748 
§c
/
os
/
unix
/
ngx_shmem
.
c


751 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss
.
o
: 
	`$
(
CORE_DEPS
) \

752 
§c
/
os
/
unix
/
ngx_¥o˚ss
.
c


753 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

754 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss
.o \

755 
§c
/
os
/
unix
/
ngx_¥o˚ss
.
c


758 
objs
/
§c
/
os
/
unix
/
ngx_d´m⁄
.
o
: 
	`$
(
CORE_DEPS
) \

759 
§c
/
os
/
unix
/
ngx_d´m⁄
.
c


760 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

761 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_d´m⁄
.o \

762 
§c
/
os
/
unix
/
ngx_d´m⁄
.
c


765 
objs
/
§c
/
os
/
unix
/
ngx_£èfföôy
.
o
: 
	`$
(
CORE_DEPS
) \

766 
§c
/
os
/
unix
/
ngx_£èfföôy
.
c


767 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

768 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_£èfföôy
.o \

769 
§c
/
os
/
unix
/
ngx_£èfföôy
.
c


772 
objs
/
§c
/
os
/
unix
/
ngx_£çro˘ôÀ
.
o
: 
	`$
(
CORE_DEPS
) \

773 
§c
/
os
/
unix
/
ngx_£çro˘ôÀ
.
c


774 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

775 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_£çro˘ôÀ
.o \

776 
§c
/
os
/
unix
/
ngx_£çro˘ôÀ
.
c


779 
objs
/
§c
/
os
/
unix
/
ngx_posix_öô
.
o
: 
	`$
(
CORE_DEPS
) \

780 
§c
/
os
/
unix
/
ngx_posix_öô
.
c


781 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

782 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_posix_öô
.o \

783 
§c
/
os
/
unix
/
ngx_posix_öô
.
c


786 
objs
/
§c
/
os
/
unix
/
ngx_u£r
.
o
: 
	`$
(
CORE_DEPS
) \

787 
§c
/
os
/
unix
/
ngx_u£r
.
c


788 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

789 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_u£r
.o \

790 
§c
/
os
/
unix
/
ngx_u£r
.
c


793 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss_cy˛e
.
o
: 
	`$
(
CORE_DEPS
) \

794 
§c
/
os
/
unix
/
ngx_¥o˚ss_cy˛e
.
c


795 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

796 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_¥o˚ss_cy˛e
.o \

797 
§c
/
os
/
unix
/
ngx_¥o˚ss_cy˛e
.
c


800 
objs
/
§c
/
os
/
unix
/
ngx_löux_öô
.
o
: 
	`$
(
CORE_DEPS
) \

801 
§c
/
os
/
unix
/
ngx_löux_öô
.
c


802 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

803 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_löux_öô
.o \

804 
§c
/
os
/
unix
/
ngx_löux_öô
.
c


807 
objs
/
§c
/
evít
/
moduÀs
/
ngx_ïﬁl_moduÀ
.
o
: 
	`$
(
CORE_DEPS
) \

808 
§c
/
evít
/
moduÀs
/
ngx_ïﬁl_moduÀ
.
c


809 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

810 -
o
 
objs
/
§c
/
evít
/
moduÀs
/
ngx_ïﬁl_moduÀ
.o \

811 
§c
/
evít
/
moduÀs
/
ngx_ïﬁl_moduÀ
.
c


814 
objs
/
§c
/
os
/
unix
/
ngx_löux_£ndfûe_chaö
.
o
: 
	`$
(
CORE_DEPS
) \

815 
§c
/
os
/
unix
/
ngx_löux_£ndfûe_chaö
.
c


816 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

817 -
o
 
objs
/
§c
/
os
/
unix
/
ngx_löux_£ndfûe_chaö
.o \

818 
§c
/
os
/
unix
/
ngx_löux_£ndfûe_chaö
.
c


821 
objs
/
§c
/
evít
/
ngx_evít_›ís¶
.
o
: 
	`$
(
CORE_DEPS
) \

822 
§c
/
evít
/
ngx_evít_›ís¶
.
c


823 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

824 -
o
 
objs
/
§c
/
evít
/
ngx_evít_›ís¶
.o \

825 
§c
/
evít
/
ngx_evít_›ís¶
.
c


828 
objs
/
§c
/
evít
/
ngx_evít_›ís¶_°≠lög
.
o
: 
	`$
(
CORE_DEPS
) \

829 
§c
/
evít
/
ngx_evít_›ís¶_°≠lög
.
c


830 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

831 -
o
 
objs
/
§c
/
evít
/
ngx_evít_›ís¶_°≠lög
.o \

832 
§c
/
evít
/
ngx_evít_›ís¶_°≠lög
.
c


835 
objs
/
§c
/
c‹e
/
ngx_ªgex
.
o
: 
	`$
(
CORE_DEPS
) \

836 
§c
/
c‹e
/
ngx_ªgex
.
c


837 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
) \

838 -
o
 
objs
/
§c
/
c‹e
/
ngx_ªgex
.o \

839 
§c
/
c‹e
/
ngx_ªgex
.
c


842 
objs
/
§c
/
hâp
/
ngx_hâp
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

843 
§c
/
hâp
/
ngx_hâp
.
c


844 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

845 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp
.o \

846 
§c
/
hâp
/
ngx_hâp
.
c


849 
objs
/
§c
/
hâp
/
ngx_hâp_c‹e_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

850 
§c
/
hâp
/
ngx_hâp_c‹e_moduÀ
.
c


851 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

852 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_c‹e_moduÀ
.o \

853 
§c
/
hâp
/
ngx_hâp_c‹e_moduÀ
.
c


856 
objs
/
§c
/
hâp
/
ngx_hâp_•ecül_ª•⁄£
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

857 
§c
/
hâp
/
ngx_hâp_•ecül_ª•⁄£
.
c


858 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

859 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_•ecül_ª•⁄£
.o \

860 
§c
/
hâp
/
ngx_hâp_•ecül_ª•⁄£
.
c


863 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

864 
§c
/
hâp
/
ngx_hâp_ªque°
.
c


865 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

866 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°
.o \

867 
§c
/
hâp
/
ngx_hâp_ªque°
.
c


870 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

871 
§c
/
hâp
/
ngx_hâp_∑r£
.
c


872 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

873 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£
.o \

874 
§c
/
hâp
/
ngx_hâp_∑r£
.
c


877 
objs
/
§c
/
hâp
/
ngx_hâp_hódî_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

878 
§c
/
hâp
/
ngx_hâp_hódî_fûãr_moduÀ
.
c


879 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

880 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_hódî_fûãr_moduÀ
.o \

881 
§c
/
hâp
/
ngx_hâp_hódî_fûãr_moduÀ
.
c


884 
objs
/
§c
/
hâp
/
ngx_hâp_wrôe_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

885 
§c
/
hâp
/
ngx_hâp_wrôe_fûãr_moduÀ
.
c


886 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

887 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_wrôe_fûãr_moduÀ
.o \

888 
§c
/
hâp
/
ngx_hâp_wrôe_fûãr_moduÀ
.
c


891 
objs
/
§c
/
hâp
/
ngx_hâp_c›y_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

892 
§c
/
hâp
/
ngx_hâp_c›y_fûãr_moduÀ
.
c


893 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

894 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_c›y_fûãr_moduÀ
.o \

895 
§c
/
hâp
/
ngx_hâp_c›y_fûãr_moduÀ
.
c


898 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_log_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

899 
§c
/
hâp
/
moduÀs
/
ngx_hâp_log_moduÀ
.
c


900 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

901 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_log_moduÀ
.o \

902 
§c
/
hâp
/
moduÀs
/
ngx_hâp_log_moduÀ
.
c


905 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°_body
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

906 
§c
/
hâp
/
ngx_hâp_ªque°_body
.
c


907 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

908 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_ªque°_body
.o \

909 
§c
/
hâp
/
ngx_hâp_ªque°_body
.
c


912 
objs
/
§c
/
hâp
/
ngx_hâp_v¨übÀs
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

913 
§c
/
hâp
/
ngx_hâp_v¨übÀs
.
c


914 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

915 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_v¨übÀs
.o \

916 
§c
/
hâp
/
ngx_hâp_v¨übÀs
.
c


919 
objs
/
§c
/
hâp
/
ngx_hâp_s¸ùt
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

920 
§c
/
hâp
/
ngx_hâp_s¸ùt
.
c


921 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

922 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_s¸ùt
.o \

923 
§c
/
hâp
/
ngx_hâp_s¸ùt
.
c


926 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

927 
§c
/
hâp
/
ngx_hâp_up°ªam
.
c


928 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

929 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam
.o \

930 
§c
/
hâp
/
ngx_hâp_up°ªam
.
c


933 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam_round_robö
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

934 
§c
/
hâp
/
ngx_hâp_up°ªam_round_robö
.
c


935 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

936 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_up°ªam_round_robö
.o \

937 
§c
/
hâp
/
ngx_hâp_up°ªam_round_robö
.
c


940 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£_time
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

941 
§c
/
hâp
/
ngx_hâp_∑r£_time
.
c


942 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

943 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_∑r£_time
.o \

944 
§c
/
hâp
/
ngx_hâp_∑r£_time
.
c


947 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_°©ic_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

948 
§c
/
hâp
/
moduÀs
/
ngx_hâp_°©ic_moduÀ
.
c


949 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

950 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_°©ic_moduÀ
.o \

951 
§c
/
hâp
/
moduÀs
/
ngx_hâp_°©ic_moduÀ
.
c


954 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ödex_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

955 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ödex_moduÀ
.
c


956 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

957 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ödex_moduÀ
.o \

958 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ödex_moduÀ
.
c


961 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_chunked_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

962 
§c
/
hâp
/
moduÀs
/
ngx_hâp_chunked_fûãr_moduÀ
.
c


963 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

964 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_chunked_fûãr_moduÀ
.o \

965 
§c
/
hâp
/
moduÀs
/
ngx_hâp_chunked_fûãr_moduÀ
.
c


968 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ønge_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

969 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ønge_fûãr_moduÀ
.
c


970 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

971 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ønge_fûãr_moduÀ
.o \

972 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ønge_fûãr_moduÀ
.
c


975 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_hódîs_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

976 
§c
/
hâp
/
moduÀs
/
ngx_hâp_hódîs_fûãr_moduÀ
.
c


977 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

978 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_hódîs_fûãr_moduÀ
.o \

979 
§c
/
hâp
/
moduÀs
/
ngx_hâp_hódîs_fûãr_moduÀ
.
c


982 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

983 
§c
/
hâp
/
moduÀs
/
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
.
c


984 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

985 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
.o \

986 
§c
/
hâp
/
moduÀs
/
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
.
c


989 
objs
/
§c
/
hâp
/
ngx_hâp_busy_lock
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

990 
§c
/
hâp
/
ngx_hâp_busy_lock
.
c


991 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

992 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_busy_lock
.o \

993 
§c
/
hâp
/
ngx_hâp_busy_lock
.
c


996 
objs
/
§c
/
hâp
/
ngx_hâp_fûe_ˇche
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

997 
§c
/
hâp
/
ngx_hâp_fûe_ˇche
.
c


998 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

999 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_fûe_ˇche
.o \

1000 
§c
/
hâp
/
ngx_hâp_fûe_ˇche
.
c


1003 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_gzù_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1004 
§c
/
hâp
/
moduÀs
/
ngx_hâp_gzù_fûãr_moduÀ
.
c


1005 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1006 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_gzù_fûãr_moduÀ
.o \

1007 
§c
/
hâp
/
moduÀs
/
ngx_hâp_gzù_fûãr_moduÀ
.
c


1010 
objs
/
§c
/
hâp
/
ngx_hâp_po°p⁄e_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1011 
§c
/
hâp
/
ngx_hâp_po°p⁄e_fûãr_moduÀ
.
c


1012 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1013 -
o
 
objs
/
§c
/
hâp
/
ngx_hâp_po°p⁄e_fûãr_moduÀ
.o \

1014 
§c
/
hâp
/
ngx_hâp_po°p⁄e_fûãr_moduÀ
.
c


1017 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ssi_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1018 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ssi_fûãr_moduÀ
.
c


1019 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1020 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ssi_fûãr_moduÀ
.o \

1021 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ssi_fûãr_moduÀ
.
c


1024 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ch¨£t_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1025 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ch¨£t_fûãr_moduÀ
.
c


1026 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1027 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ch¨£t_fûãr_moduÀ
.o \

1028 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ch¨£t_fûãr_moduÀ
.
c


1031 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_u£rid_fûãr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1032 
§c
/
hâp
/
moduÀs
/
ngx_hâp_u£rid_fûãr_moduÀ
.
c


1033 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1034 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_u£rid_fûãr_moduÀ
.o \

1035 
§c
/
hâp
/
moduÀs
/
ngx_hâp_u£rid_fûãr_moduÀ
.
c


1038 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_autoödex_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1039 
§c
/
hâp
/
moduÀs
/
ngx_hâp_autoödex_moduÀ
.
c


1040 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1041 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_autoödex_moduÀ
.o \

1042 
§c
/
hâp
/
moduÀs
/
ngx_hâp_autoödex_moduÀ
.
c


1045 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_auth_basic_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1046 
§c
/
hâp
/
moduÀs
/
ngx_hâp_auth_basic_moduÀ
.
c


1047 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1048 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_auth_basic_moduÀ
.o \

1049 
§c
/
hâp
/
moduÀs
/
ngx_hâp_auth_basic_moduÀ
.
c


1052 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ac˚ss_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1053 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ac˚ss_moduÀ
.
c


1054 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1055 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ac˚ss_moduÀ
.o \

1056 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ac˚ss_moduÀ
.
c


1059 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_c⁄n_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1060 
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_c⁄n_moduÀ
.
c


1061 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1062 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_c⁄n_moduÀ
.o \

1063 
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_c⁄n_moduÀ
.
c


1066 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_ªq_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1067 
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_ªq_moduÀ
.
c


1068 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1069 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_ªq_moduÀ
.o \

1070 
§c
/
hâp
/
moduÀs
/
ngx_hâp_limô_ªq_moduÀ
.
c


1073 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_geo_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1074 
§c
/
hâp
/
moduÀs
/
ngx_hâp_geo_moduÀ
.
c


1075 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1076 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_geo_moduÀ
.o \

1077 
§c
/
hâp
/
moduÀs
/
ngx_hâp_geo_moduÀ
.
c


1080 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_m≠_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1081 
§c
/
hâp
/
moduÀs
/
ngx_hâp_m≠_moduÀ
.
c


1082 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1083 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_m≠_moduÀ
.o \

1084 
§c
/
hâp
/
moduÀs
/
ngx_hâp_m≠_moduÀ
.
c


1087 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_•lô_˛õ¡s_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1088 
§c
/
hâp
/
moduÀs
/
ngx_hâp_•lô_˛õ¡s_moduÀ
.
c


1089 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1090 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_•lô_˛õ¡s_moduÀ
.o \

1091 
§c
/
hâp
/
moduÀs
/
ngx_hâp_•lô_˛õ¡s_moduÀ
.
c


1094 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ª„ªr_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1095 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ª„ªr_moduÀ
.
c


1096 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1097 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ª„ªr_moduÀ
.o \

1098 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ª„ªr_moduÀ
.
c


1101 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ªwrôe_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1102 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ªwrôe_moduÀ
.
c


1103 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1104 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_ªwrôe_moduÀ
.o \

1105 
§c
/
hâp
/
moduÀs
/
ngx_hâp_ªwrôe_moduÀ
.
c


1108 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_¥oxy_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1109 
§c
/
hâp
/
moduÀs
/
ngx_hâp_¥oxy_moduÀ
.
c


1110 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1111 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_¥oxy_moduÀ
.o \

1112 
§c
/
hâp
/
moduÀs
/
ngx_hâp_¥oxy_moduÀ
.
c


1115 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_Á°cgi_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1116 
§c
/
hâp
/
moduÀs
/
ngx_hâp_Á°cgi_moduÀ
.
c


1117 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1118 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_Á°cgi_moduÀ
.o \

1119 
§c
/
hâp
/
moduÀs
/
ngx_hâp_Á°cgi_moduÀ
.
c


1122 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_uwsgi_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1123 
§c
/
hâp
/
moduÀs
/
ngx_hâp_uwsgi_moduÀ
.
c


1124 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1125 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_uwsgi_moduÀ
.o \

1126 
§c
/
hâp
/
moduÀs
/
ngx_hâp_uwsgi_moduÀ
.
c


1129 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_scgi_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1130 
§c
/
hâp
/
moduÀs
/
ngx_hâp_scgi_moduÀ
.
c


1131 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1132 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_scgi_moduÀ
.o \

1133 
§c
/
hâp
/
moduÀs
/
ngx_hâp_scgi_moduÀ
.
c


1136 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_memˇched_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1137 
§c
/
hâp
/
moduÀs
/
ngx_hâp_memˇched_moduÀ
.
c


1138 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1139 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_memˇched_moduÀ
.o \

1140 
§c
/
hâp
/
moduÀs
/
ngx_hâp_memˇched_moduÀ
.
c


1143 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_em±y_gif_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1144 
§c
/
hâp
/
moduÀs
/
ngx_hâp_em±y_gif_moduÀ
.
c


1145 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1146 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_em±y_gif_moduÀ
.o \

1147 
§c
/
hâp
/
moduÀs
/
ngx_hâp_em±y_gif_moduÀ
.
c


1150 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_brow£r_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1151 
§c
/
hâp
/
moduÀs
/
ngx_hâp_brow£r_moduÀ
.
c


1152 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1153 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_brow£r_moduÀ
.o \

1154 
§c
/
hâp
/
moduÀs
/
ngx_hâp_brow£r_moduÀ
.
c


1157 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_ù_hash_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1158 
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_ù_hash_moduÀ
.
c


1159 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1160 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_ù_hash_moduÀ
.o \

1161 
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_ù_hash_moduÀ
.
c


1164 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1165 
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
.
c


1166 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1167 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
.o \

1168 
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
.
c


1171 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_kì∑live_moduÀ
.
o
: 
	`$
(
CORE_DEPS
Ë$(
HTTP_DEPS
) \

1172 
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_kì∑live_moduÀ
.
c


1173 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
CORE_INCS
Ë$(
HTTP_INCS
) \

1174 -
o
 
objs
/
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_kì∑live_moduÀ
.o \

1175 
§c
/
hâp
/
moduÀs
/
ngx_hâp_up°ªam_kì∑live_moduÀ
.
c


1178 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp
.
o
: 
	`$
(
ADDON_DEPS
) \

1179 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp
.
c


1180 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1181 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp
.o \

1182 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp
.
c


1185 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_öô
.
o
: 
	`$
(
ADDON_DEPS
) \

1186 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_öô
.
c


1187 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1188 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_öô
.o \

1189 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_öô
.
c


1192 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dshake
.
o
: 
	`$
(
ADDON_DEPS
) \

1193 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dshake
.
c


1194 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1195 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dshake
.o \

1196 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dshake
.
c


1199 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dÀr
.
o
: 
	`$
(
ADDON_DEPS
) \

1200 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dÀr
.
c


1201 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1202 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dÀr
.o \

1203 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_h™dÀr
.
c


1206 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_amf
.
o
: 
	`$
(
ADDON_DEPS
) \

1207 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_amf
.
c


1208 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1209 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_amf
.o \

1210 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_amf
.
c


1213 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_£nd
.
o
: 
	`$
(
ADDON_DEPS
) \

1214 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_£nd
.
c


1215 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1216 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_£nd
.o \

1217 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_£nd
.
c


1220 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_sh¨ed
.
o
: 
	`$
(
ADDON_DEPS
) \

1221 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_sh¨ed
.
c


1222 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1223 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_sh¨ed
.o \

1224 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_sh¨ed
.
c


1227 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_evÆ
.
o
: 
	`$
(
ADDON_DEPS
) \

1228 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_evÆ
.
c


1229 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1230 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_evÆ
.o \

1231 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_evÆ
.
c


1234 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ª˚ive
.
o
: 
	`$
(
ADDON_DEPS
) \

1235 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ª˚ive
.
c


1236 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1237 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ª˚ive
.o \

1238 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ª˚ive
.
c


1241 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c‹e_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1242 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c‹e_moduÀ
.
c


1243 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1244 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c‹e_moduÀ
.o \

1245 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c‹e_moduÀ
.
c


1248 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_cmd_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1249 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_cmd_moduÀ
.
c


1250 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1251 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_cmd_moduÀ
.o \

1252 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_cmd_moduÀ
.
c


1255 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_codec_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1256 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_codec_moduÀ
.
c


1257 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1258 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_codec_moduÀ
.o \

1259 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_codec_moduÀ
.
c


1262 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ac˚ss_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1263 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ac˚ss_moduÀ
.
c


1264 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1265 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ac˚ss_moduÀ
.o \

1266 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ac˚ss_moduÀ
.
c


1269 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªc‹d_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1270 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªc‹d_moduÀ
.
c


1271 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1272 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªc‹d_moduÀ
.o \

1273 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªc‹d_moduÀ
.
c


1276 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_live_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1277 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_live_moduÀ
.
c


1278 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1279 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_live_moduÀ
.o \

1280 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_live_moduÀ
.
c


1283 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_∂ay_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1284 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_∂ay_moduÀ
.
c


1285 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1286 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_∂ay_moduÀ
.o \

1287 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_∂ay_moduÀ
.
c


1290 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_Êv_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1291 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_Êv_moduÀ
.
c


1292 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1293 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_Êv_moduÀ
.o \

1294 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_Êv_moduÀ
.
c


1297 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_mp4_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1298 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_mp4_moduÀ
.
c


1299 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1300 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_mp4_moduÀ
.o \

1301 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_mp4_moduÀ
.
c


1304 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_√tˇŒ_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1305 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_√tˇŒ_moduÀ
.
c


1306 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1307 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_√tˇŒ_moduÀ
.o \

1308 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_√tˇŒ_moduÀ
.
c


1311 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_°©_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1312 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_°©_moduÀ
.
c


1313 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1314 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_°©_moduÀ
.o \

1315 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_°©_moduÀ
.
c


1318 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c⁄åﬁ_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1319 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c⁄åﬁ_moduÀ
.
c


1320 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1321 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c⁄åﬁ_moduÀ
.o \

1322 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_c⁄åﬁ_moduÀ
.
c


1325 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªœy_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1326 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªœy_moduÀ
.
c


1327 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1328 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªœy_moduÀ
.o \

1329 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_ªœy_moduÀ
.
c


1332 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_b™dwidth
.
o
: 
	`$
(
ADDON_DEPS
) \

1333 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_b™dwidth
.
c


1334 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1335 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_b™dwidth
.o \

1336 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_b™dwidth
.
c


1339 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_exec_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1340 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_exec_moduÀ
.
c


1341 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1342 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_exec_moduÀ
.o \

1343 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_exec_moduÀ
.
c


1346 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_auto_push_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1347 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_auto_push_moduÀ
.
c


1348 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1349 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_auto_push_moduÀ
.o \

1350 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_auto_push_moduÀ
.
c


1353 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_nŸify_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1354 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_nŸify_moduÀ
.
c


1355 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1356 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_nŸify_moduÀ
.o \

1357 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_nŸify_moduÀ
.
c


1360 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_log_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1361 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_log_moduÀ
.
c


1362 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1363 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_log_moduÀ
.o \

1364 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_log_moduÀ
.
c


1367 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_limô_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1368 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_limô_moduÀ
.
c


1369 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1370 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_limô_moduÀ
.o \

1371 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_limô_moduÀ
.
c


1374 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_bô›
.
o
: 
	`$
(
ADDON_DEPS
) \

1375 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_bô›
.
c


1376 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1377 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_bô›
.o \

1378 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_bô›
.
c


1381 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_¥oxy_¥Ÿocﬁ
.
o
: 
	`$
(
ADDON_DEPS
) \

1382 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_¥oxy_¥Ÿocﬁ
.
c


1383 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1384 -
o
 
objs
/
add⁄
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_¥oxy_¥Ÿocﬁ
.o \

1385 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
ngx_πmp_¥oxy_¥Ÿocﬁ
.
c


1388 
objs
/
add⁄
/
hls
/
ngx_πmp_hls_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1389 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
hls
/
ngx_πmp_hls_moduÀ
.
c


1390 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1391 -
o
 
objs
/
add⁄
/
hls
/
ngx_πmp_hls_moduÀ
.o \

1392 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
hls
/
ngx_πmp_hls_moduÀ
.
c


1395 
objs
/
add⁄
/
dash
/
ngx_πmp_dash_moduÀ
.
o
: 
	`$
(
ADDON_DEPS
) \

1396 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
dash
/
ngx_πmp_dash_moduÀ
.
c


1397 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1398 -
o
 
objs
/
add⁄
/
dash
/
ngx_πmp_dash_moduÀ
.o \

1399 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
dash
/
ngx_πmp_dash_moduÀ
.
c


1402 
objs
/
add⁄
/
hls
/
ngx_πmp_m≥gts
.
o
: 
	`$
(
ADDON_DEPS
) \

1403 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
hls
/
ngx_πmp_m≥gts
.
c


1404 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1405 -
o
 
objs
/
add⁄
/
hls
/
ngx_πmp_m≥gts
.o \

1406 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
hls
/
ngx_πmp_m≥gts
.
c


1409 
objs
/
add⁄
/
dash
/
ngx_πmp_mp4
.
o
: 
	`$
(
ADDON_DEPS
) \

1410 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
dash
/
ngx_πmp_mp4
.
c


1411 
	`$
(
CC
Ë-
c
 -
g
 $(
CFLAGS
Ë$(
ALL_INCS
) \

1412 -
o
 
objs
/
add⁄
/
dash
/
ngx_πmp_mp4
.o \

1413 ./
§c
/
ngöx
-
πmp
-
moduÀ
/
dash
/
ngx_πmp_mp4
.
c


1416 
m™∑ge
: 
objs
/
ngöx
.8

1418 
objs
/
ngöx
.8: 
m™
/ngöx.8 objs/
ngx_auto_c⁄fig
.
h


1419 
£d
 -
e
 "s|%%PREFIX%%|/var/www/dream/nginx-pull-record/|" \

1420 -
e
 "s|%%PID_PATH%%|/var/www/dream/nginx-pull-record//logs/nginx.pid|" \

1421 -
e
 "s|%%CONF_PATH%%|/var/www/dream/nginx-pull-record//conf/nginx.conf|" \

1422 -
e
 "s|%%ERROR_LOG_PATH%%|/var/www/dream/nginx-pull-record//logs/error.log|" \

1423 < 
m™
/
ngöx
.8 > 
$
@

1425 
ö°Æl
: 
objs
/
ngöx


1426 
ã°
 -
d
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d/' || 
mkdú
 -
p
 '$(DESTDIR)/var/www/dream/nginx-pull-record/'

1428 
ã°
 -
d
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//sbö' || 
mkdú
 -
p
 '$(DESTDIR)/var/www/dream/nginx-pull-record//sbin'

1429 
ã°
 ! -
f
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//sbö/ngöx' || 
mv
 '$(DESTDIR)/var/www/dream/nginx-pull-record//sbin/nginx' '$(DESTDIR)/var/www/dream/nginx-pull-record//sbin/nginx.old'

1430 
˝
 
objs
/
ngöx
 '$(DESTDIR)/var/www/dream/nginx-pull-record//sbin/nginx'

1432 
ã°
 -
d
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//c⁄f' || 
mkdú
 -
p
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1434 
˝
 
c⁄f
/
koi
-
wö
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1435 
˝
 
c⁄f
/
koi
-
utf
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1436 
˝
 
c⁄f
/
wö
-
utf
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1438 
ã°
 -
f
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//c⁄f/mime.ty≥s' || 
˝
 
c⁄f
/
mime
.
ty≥s
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1439 
˝
 
c⁄f
/
mime
.
ty≥s
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf/mime.types.default'

1441 
ã°
 -
f
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//c⁄f/Á°cgi_∑øms' || 
˝
 
c⁄f
/
Á°cgi_∑øms
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1442 
˝
 
c⁄f
/
Á°cgi_∑øms
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf/fastcgi_params.default'

1444 
ã°
 -
f
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//c⁄f/Á°cgi.c⁄f' || 
˝
 
c⁄f
/
Á°cgi
.conf '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1445 
˝
 
c⁄f
/
Á°cgi
.conf '$(DESTDIR)/var/www/dream/nginx-pull-record//conf/fastcgi.conf.default'

1447 
ã°
 -
f
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//c⁄f/uwsgi_∑øms' || 
˝
 
c⁄f
/
uwsgi_∑øms
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1448 
˝
 
c⁄f
/
uwsgi_∑øms
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf/uwsgi_params.default'

1450 
ã°
 -
f
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//c⁄f/scgi_∑øms' || 
˝
 
c⁄f
/
scgi_∑øms
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf'

1451 
˝
 
c⁄f
/
scgi_∑øms
 '$(DESTDIR)/var/www/dream/nginx-pull-record//conf/scgi_params.default'

1453 
ã°
 -
f
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//c⁄f/ngöx.c⁄f' || 
˝
 
c⁄f
/
ngöx
.conf '$(DESTDIR)/var/www/dream/nginx-pull-record//conf/nginx.conf'

1454 
˝
 
c⁄f
/
ngöx
.conf '$(DESTDIR)/var/www/dream/nginx-pull-record//conf/nginx.conf.default'

1456 
ã°
 -
d
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//logs' || 
mkdú
 -
p
 '$(DESTDIR)/var/www/dream/nginx-pull-record//logs'

1458 
ã°
 -
d
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//logs' || 
mkdú
 -
p
 '$(DESTDIR)/var/www/dream/nginx-pull-record//logs'

1460 
ã°
 -
d
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//html' || 
˝
 -
R
 
html
 '$(DESTDIR)/var/www/dream/nginx-pull-record/'

1462 
ã°
 -
d
 '$(DESTDIR)/v¨/www/dªam/ngöx-puŒ-ªc‹d//logs' || 
mkdú
 -
p
 '$(DESTDIR)/var/www/dream/nginx-pull-record//logs'

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/ngx_auto_config.h

1 
	#NGX_CONFIGURE
 " --¥efix=/v¨/www/dªam/ngöx-puŒ-ªc‹d/ --add-moduÀ=./§c/ngöx-πmp-moduÀ --wôh-debug --wôh-cc-›t='-g -O0'"

	)

3 #i‚de‡
NGX_DEBUG


4 
	#NGX_DEBUG
 1

	)

8 #i‚de‡
NGX_COMPILER


9 
	#NGX_COMPILER
 "gc¯4.6.3 (Ubu¡u/Lö¨ÿ4.6.3-1ubu¡u5Ë"

	)

13 #i‚de‡
NGX_HAVE_GCC_ATOMIC


14 
	#NGX_HAVE_GCC_ATOMIC
 1

	)

18 #i‚de‡
NGX_HAVE_C99_VARIADIC_MACROS


19 
	#NGX_HAVE_C99_VARIADIC_MACROS
 1

	)

23 #i‚de‡
NGX_HAVE_GCC_VARIADIC_MACROS


24 
	#NGX_HAVE_GCC_VARIADIC_MACROS
 1

	)

28 #i‚de‡
NGX_HAVE_EPOLL


29 
	#NGX_HAVE_EPOLL
 1

	)

33 #i‚de‡
NGX_HAVE_CLEAR_EVENT


34 
	#NGX_HAVE_CLEAR_EVENT
 1

	)

38 #i‚de‡
NGX_HAVE_EPOLLRDHUP


39 
	#NGX_HAVE_EPOLLRDHUP
 1

	)

43 #i‚de‡
NGX_HAVE_O_PATH


44 
	#NGX_HAVE_O_PATH
 1

	)

48 #i‚de‡
NGX_HAVE_SENDFILE


49 
	#NGX_HAVE_SENDFILE
 1

	)

53 #i‚de‡
NGX_HAVE_SENDFILE64


54 
	#NGX_HAVE_SENDFILE64
 1

	)

58 #i‚de‡
NGX_HAVE_PR_SET_DUMPABLE


59 
	#NGX_HAVE_PR_SET_DUMPABLE
 1

	)

63 #i‚de‡
NGX_HAVE_SCHED_SETAFFINITY


64 
	#NGX_HAVE_SCHED_SETAFFINITY
 1

	)

68 #i‚de‡
NGX_HAVE_GNU_CRYPT_R


69 
	#NGX_HAVE_GNU_CRYPT_R
 1

	)

73 #i‚de‡
NGX_HAVE_NONALIGNED


74 
	#NGX_HAVE_NONALIGNED
 1

	)

78 #i‚de‡
NGX_CPU_CACHE_LINE


79 
	#NGX_CPU_CACHE_LINE
 32

	)

83 
	#NGX_KQUEUE_UDATA_T
 (*)

	)

86 #i‚de‡
NGX_HAVE_POSIX_FADVISE


87 
	#NGX_HAVE_POSIX_FADVISE
 1

	)

91 #i‚de‡
NGX_HAVE_O_DIRECT


92 
	#NGX_HAVE_O_DIRECT
 1

	)

96 #i‚de‡
NGX_HAVE_ALIGNED_DIRECTIO


97 
	#NGX_HAVE_ALIGNED_DIRECTIO
 1

	)

101 #i‚de‡
NGX_HAVE_STATFS


102 
	#NGX_HAVE_STATFS
 1

	)

106 #i‚de‡
NGX_HAVE_STATVFS


107 
	#NGX_HAVE_STATVFS
 1

	)

111 #i‚de‡
NGX_HAVE_SCHED_YIELD


112 
	#NGX_HAVE_SCHED_YIELD
 1

	)

116 #i‚de‡
NGX_HAVE_DEFERRED_ACCEPT


117 
	#NGX_HAVE_DEFERRED_ACCEPT
 1

	)

121 #i‚de‡
NGX_HAVE_KEEPALIVE_TUNABLE


122 
	#NGX_HAVE_KEEPALIVE_TUNABLE
 1

	)

126 #i‚de‡
NGX_HAVE_TCP_INFO


127 
	#NGX_HAVE_TCP_INFO
 1

	)

131 #i‚de‡
NGX_HAVE_ACCEPT4


132 
	#NGX_HAVE_ACCEPT4
 1

	)

136 #i‚de‡
NGX_HAVE_UNIX_DOMAIN


137 
	#NGX_HAVE_UNIX_DOMAIN
 1

	)

141 #i‚de‡
NGX_PTR_SIZE


142 
	#NGX_PTR_SIZE
 4

	)

146 #i‚de‡
NGX_SIG_ATOMIC_T_SIZE


147 
	#NGX_SIG_ATOMIC_T_SIZE
 4

	)

151 #i‚de‡
NGX_HAVE_LITTLE_ENDIAN


152 
	#NGX_HAVE_LITTLE_ENDIAN
 1

	)

156 #i‚de‡
NGX_MAX_SIZE_T_VALUE


157 
	#NGX_MAX_SIZE_T_VALUE
 2147483647L

	)

161 #i‚de‡
NGX_SIZE_T_LEN


162 
	#NGX_SIZE_T_LEN
 (("-2147483648"Ë- 1)

	)

166 #i‚de‡
NGX_MAX_OFF_T_VALUE


167 
	#NGX_MAX_OFF_T_VALUE
 9223372036854775807LL

	)

171 #i‚de‡
NGX_OFF_T_LEN


172 
	#NGX_OFF_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

176 #i‚de‡
NGX_TIME_T_SIZE


177 
	#NGX_TIME_T_SIZE
 4

	)

181 #i‚de‡
NGX_TIME_T_LEN


182 
	#NGX_TIME_T_LEN
 (("-2147483648"Ë- 1)

	)

186 #i‚de‡
NGX_HAVE_PREAD


187 
	#NGX_HAVE_PREAD
 1

	)

191 #i‚de‡
NGX_HAVE_PWRITE


192 
	#NGX_HAVE_PWRITE
 1

	)

196 #i‚de‡
NGX_SYS_NERR


197 
	#NGX_SYS_NERR
 135

	)

201 #i‚de‡
NGX_HAVE_LOCALTIME_R


202 
	#NGX_HAVE_LOCALTIME_R
 1

	)

206 #i‚de‡
NGX_HAVE_POSIX_MEMALIGN


207 
	#NGX_HAVE_POSIX_MEMALIGN
 1

	)

211 #i‚de‡
NGX_HAVE_MEMALIGN


212 
	#NGX_HAVE_MEMALIGN
 1

	)

216 #i‚de‡
NGX_HAVE_MAP_ANON


217 
	#NGX_HAVE_MAP_ANON
 1

	)

221 #i‚de‡
NGX_HAVE_MAP_DEVZERO


222 
	#NGX_HAVE_MAP_DEVZERO
 1

	)

226 #i‚de‡
NGX_HAVE_SYSVSHM


227 
	#NGX_HAVE_SYSVSHM
 1

	)

231 #i‚de‡
NGX_HAVE_POSIX_SEM


232 
	#NGX_HAVE_POSIX_SEM
 1

	)

236 #i‚de‡
NGX_HAVE_MSGHDR_MSG_CONTROL


237 
	#NGX_HAVE_MSGHDR_MSG_CONTROL
 1

	)

241 #i‚de‡
NGX_HAVE_FIONBIO


242 
	#NGX_HAVE_FIONBIO
 1

	)

246 #i‚de‡
NGX_HAVE_GMTOFF


247 
	#NGX_HAVE_GMTOFF
 1

	)

251 #i‚de‡
NGX_HAVE_D_TYPE


252 
	#NGX_HAVE_D_TYPE
 1

	)

256 #i‚de‡
NGX_HAVE_SC_NPROCESSORS_ONLN


257 
	#NGX_HAVE_SC_NPROCESSORS_ONLN
 1

	)

261 #i‚de‡
NGX_HAVE_OPENAT


262 
	#NGX_HAVE_OPENAT
 1

	)

266 #i‚de‡
NGX_HAVE_GETADDRINFO


267 
	#NGX_HAVE_GETADDRINFO
 1

	)

271 #i‚de‡
NGX_HTTP_CACHE


272 
	#NGX_HTTP_CACHE
 1

	)

276 #i‚de‡
NGX_HTTP_GZIP


277 
	#NGX_HTTP_GZIP
 1

	)

281 #i‚de‡
NGX_HTTP_SSI


282 
	#NGX_HTTP_SSI
 1

	)

286 #i‚de‡
NGX_CRYPT


287 
	#NGX_CRYPT
 1

	)

291 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


292 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

296 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


297 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

301 #i‚de‡
NGX_PCRE


302 
	#NGX_PCRE
 1

	)

306 #i‚de‡
NGX_OPENSSL


307 
	#NGX_OPENSSL
 1

	)

311 #i‚de‡
NGX_SSL


312 
	#NGX_SSL
 1

	)

316 #i‚de‡
NGX_HAVE_OPENSSL_MD5_H


317 
	#NGX_HAVE_OPENSSL_MD5_H
 1

	)

321 #i‚de‡
NGX_OPENSSL_MD5


322 
	#NGX_OPENSSL_MD5
 1

	)

326 #i‚de‡
NGX_HAVE_MD5


327 
	#NGX_HAVE_MD5
 1

	)

331 #i‚de‡
NGX_HAVE_OPENSSL_SHA1_H


332 
	#NGX_HAVE_OPENSSL_SHA1_H
 1

	)

336 #i‚de‡
NGX_HAVE_SHA1


337 
	#NGX_HAVE_SHA1
 1

	)

341 #i‚de‡
NGX_ZLIB


342 
	#NGX_ZLIB
 1

	)

346 #i‚de‡
NGX_PREFIX


347 
	#NGX_PREFIX
 "/v¨/www/dªam/ngöx-puŒ-ªc‹d//"

	)

351 #i‚de‡
NGX_CONF_PREFIX


352 
	#NGX_CONF_PREFIX
 "c⁄f/"

	)

356 #i‚de‡
NGX_SBIN_PATH


357 
	#NGX_SBIN_PATH
 ""

	)

361 #i‚de‡
NGX_CONF_PATH


362 
	#NGX_CONF_PATH
 "c⁄f/ngöx.c⁄f"

	)

366 #i‚de‡
NGX_PID_PATH


367 
	#NGX_PID_PATH
 "logs/ngöx.pid"

	)

371 #i‚de‡
NGX_LOCK_PATH


372 
	#NGX_LOCK_PATH
 "logs/ngöx.lock"

	)

376 #i‚de‡
NGX_ERROR_LOG_PATH


377 
	#NGX_ERROR_LOG_PATH
 "logs/îr‹.log"

	)

381 #i‚de‡
NGX_HTTP_LOG_PATH


382 
	#NGX_HTTP_LOG_PATH
 "logs/ac˚ss.log"

	)

386 #i‚de‡
NGX_HTTP_CLIENT_TEMP_PATH


387 
	#NGX_HTTP_CLIENT_TEMP_PATH
 "˛õ¡_body_ãmp"

	)

391 #i‚de‡
NGX_HTTP_PROXY_TEMP_PATH


392 
	#NGX_HTTP_PROXY_TEMP_PATH
 "¥oxy_ãmp"

	)

396 #i‚de‡
NGX_HTTP_FASTCGI_TEMP_PATH


397 
	#NGX_HTTP_FASTCGI_TEMP_PATH
 "Á°cgi_ãmp"

	)

401 #i‚de‡
NGX_HTTP_UWSGI_TEMP_PATH


402 
	#NGX_HTTP_UWSGI_TEMP_PATH
 "uwsgi_ãmp"

	)

406 #i‚de‡
NGX_HTTP_SCGI_TEMP_PATH


407 
	#NGX_HTTP_SCGI_TEMP_PATH
 "scgi_ãmp"

	)

411 #i‚de‡
NGX_SUPPRESS_WARN


412 
	#NGX_SUPPRESS_WARN
 1

	)

416 #i‚de‡
NGX_SMP


417 
	#NGX_SMP
 1

	)

421 #i‚de‡
NGX_USER


422 
	#NGX_USER
 "nobody"

	)

426 #i‚de‡
NGX_GROUP


427 
	#NGX_GROUP
 "nogroup"

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/ngx_auto_headers.h

3 #i‚de‡
NGX_HAVE_UNISTD_H


4 
	#NGX_HAVE_UNISTD_H
 1

	)

8 #i‚de‡
NGX_HAVE_INTTYPES_H


9 
	#NGX_HAVE_INTTYPES_H
 1

	)

13 #i‚de‡
NGX_HAVE_LIMITS_H


14 
	#NGX_HAVE_LIMITS_H
 1

	)

18 #i‚de‡
NGX_HAVE_SYS_PARAM_H


19 
	#NGX_HAVE_SYS_PARAM_H
 1

	)

23 #i‚de‡
NGX_HAVE_SYS_MOUNT_H


24 
	#NGX_HAVE_SYS_MOUNT_H
 1

	)

28 #i‚de‡
NGX_HAVE_SYS_STATVFS_H


29 
	#NGX_HAVE_SYS_STATVFS_H
 1

	)

33 #i‚de‡
NGX_HAVE_CRYPT_H


34 
	#NGX_HAVE_CRYPT_H
 1

	)

38 #i‚de‡
NGX_LINUX


39 
	#NGX_LINUX
 1

	)

43 #i‚de‡
NGX_HAVE_SYS_PRCTL_H


44 
	#NGX_HAVE_SYS_PRCTL_H
 1

	)

48 #i‚de‡
NGX_HAVE_SYS_VFS_H


49 
	#NGX_HAVE_SYS_VFS_H
 1

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/ngx_modules.c

2 
	~<ngx_c⁄fig.h
>

3 
	~<ngx_c‹e.h
>

7 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

8 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

9 
ngx_moduÀ_t
 
ngx_c⁄f_moduÀ
;

10 
ngx_moduÀ_t
 
ngx_πmp_moduÀ
;

11 
ngx_moduÀ_t
 
ngx_πmp_c‹e_moduÀ
;

12 
ngx_moduÀ_t
 
ngx_πmp_cmd_moduÀ
;

13 
ngx_moduÀ_t
 
ngx_πmp_codec_moduÀ
;

14 
ngx_moduÀ_t
 
ngx_πmp_ac˚ss_moduÀ
;

15 
ngx_moduÀ_t
 
ngx_πmp_ªc‹d_moduÀ
;

16 
ngx_moduÀ_t
 
ngx_πmp_live_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_πmp_∂ay_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_πmp_Êv_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_πmp_mp4_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_πmp_√tˇŒ_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_πmp_ªœy_moduÀ
;

22 
ngx_moduÀ_t
 
ngx_πmp_exec_moduÀ
;

23 
ngx_moduÀ_t
 
ngx_πmp_auto_push_moduÀ
;

24 
ngx_moduÀ_t
 
ngx_πmp_nŸify_moduÀ
;

25 
ngx_moduÀ_t
 
ngx_πmp_log_moduÀ
;

26 
ngx_moduÀ_t
 
ngx_πmp_limô_moduÀ
;

27 
ngx_moduÀ_t
 
ngx_πmp_hls_moduÀ
;

28 
ngx_moduÀ_t
 
ngx_πmp_dash_moduÀ
;

29 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

30 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

31 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

32 
ngx_moduÀ_t
 
ngx_›ís¶_moduÀ
;

33 
ngx_moduÀ_t
 
ngx_ªgex_moduÀ
;

34 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

35 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

36 
ngx_moduÀ_t
 
ngx_hâp_log_moduÀ
;

37 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

38 
ngx_moduÀ_t
 
ngx_hâp_°©ic_moduÀ
;

39 
ngx_moduÀ_t
 
ngx_hâp_autoödex_moduÀ
;

40 
ngx_moduÀ_t
 
ngx_hâp_ödex_moduÀ
;

41 
ngx_moduÀ_t
 
ngx_hâp_auth_basic_moduÀ
;

42 
ngx_moduÀ_t
 
ngx_hâp_ac˚ss_moduÀ
;

43 
ngx_moduÀ_t
 
ngx_hâp_limô_c⁄n_moduÀ
;

44 
ngx_moduÀ_t
 
ngx_hâp_limô_ªq_moduÀ
;

45 
ngx_moduÀ_t
 
ngx_hâp_geo_moduÀ
;

46 
ngx_moduÀ_t
 
ngx_hâp_m≠_moduÀ
;

47 
ngx_moduÀ_t
 
ngx_hâp_•lô_˛õ¡s_moduÀ
;

48 
ngx_moduÀ_t
 
ngx_hâp_ª„ªr_moduÀ
;

49 
ngx_moduÀ_t
 
ngx_hâp_ªwrôe_moduÀ
;

50 
ngx_moduÀ_t
 
ngx_hâp_¥oxy_moduÀ
;

51 
ngx_moduÀ_t
 
ngx_hâp_Á°cgi_moduÀ
;

52 
ngx_moduÀ_t
 
ngx_hâp_uwsgi_moduÀ
;

53 
ngx_moduÀ_t
 
ngx_hâp_scgi_moduÀ
;

54 
ngx_moduÀ_t
 
ngx_hâp_memˇched_moduÀ
;

55 
ngx_moduÀ_t
 
ngx_hâp_em±y_gif_moduÀ
;

56 
ngx_moduÀ_t
 
ngx_hâp_brow£r_moduÀ
;

57 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_ù_hash_moduÀ
;

58 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
;

59 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_kì∑live_moduÀ
;

60 
ngx_moduÀ_t
 
ngx_πmp_°©_moduÀ
;

61 
ngx_moduÀ_t
 
ngx_πmp_c⁄åﬁ_moduÀ
;

62 
ngx_moduÀ_t
 
ngx_hâp_wrôe_fûãr_moduÀ
;

63 
ngx_moduÀ_t
 
ngx_hâp_hódî_fûãr_moduÀ
;

64 
ngx_moduÀ_t
 
ngx_hâp_chunked_fûãr_moduÀ
;

65 
ngx_moduÀ_t
 
ngx_hâp_ønge_hódî_fûãr_moduÀ
;

66 
ngx_moduÀ_t
 
ngx_hâp_gzù_fûãr_moduÀ
;

67 
ngx_moduÀ_t
 
ngx_hâp_po°p⁄e_fûãr_moduÀ
;

68 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

69 
ngx_moduÀ_t
 
ngx_hâp_ch¨£t_fûãr_moduÀ
;

70 
ngx_moduÀ_t
 
ngx_hâp_u£rid_fûãr_moduÀ
;

71 
ngx_moduÀ_t
 
ngx_hâp_hódîs_fûãr_moduÀ
;

72 
ngx_moduÀ_t
 
ngx_hâp_c›y_fûãr_moduÀ
;

73 
ngx_moduÀ_t
 
ngx_hâp_ønge_body_fûãr_moduÀ
;

74 
ngx_moduÀ_t
 
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
;

76 
ngx_moduÀ_t
 *
	gngx_moduÀs
[] = {

77 &
ngx_c‹e_moduÀ
,

78 &
ngx_îæog_moduÀ
,

79 &
ngx_c⁄f_moduÀ
,

80 &
ngx_πmp_moduÀ
,

81 &
ngx_πmp_c‹e_moduÀ
,

82 &
ngx_πmp_cmd_moduÀ
,

83 &
ngx_πmp_codec_moduÀ
,

84 &
ngx_πmp_ac˚ss_moduÀ
,

85 &
ngx_πmp_ªc‹d_moduÀ
,

86 &
ngx_πmp_live_moduÀ
,

87 &
ngx_πmp_∂ay_moduÀ
,

88 &
ngx_πmp_Êv_moduÀ
,

89 &
ngx_πmp_mp4_moduÀ
,

90 &
ngx_πmp_√tˇŒ_moduÀ
,

91 &
ngx_πmp_ªœy_moduÀ
,

92 &
ngx_πmp_exec_moduÀ
,

93 &
ngx_πmp_auto_push_moduÀ
,

94 &
ngx_πmp_nŸify_moduÀ
,

95 &
ngx_πmp_log_moduÀ
,

96 &
ngx_πmp_limô_moduÀ
,

97 &
ngx_πmp_hls_moduÀ
,

98 &
ngx_πmp_dash_moduÀ
,

99 &
ngx_evíts_moduÀ
,

100 &
ngx_evít_c‹e_moduÀ
,

101 &
ngx_ïﬁl_moduÀ
,

102 &
ngx_›ís¶_moduÀ
,

103 &
ngx_ªgex_moduÀ
,

104 &
ngx_hâp_moduÀ
,

105 &
ngx_hâp_c‹e_moduÀ
,

106 &
ngx_hâp_log_moduÀ
,

107 &
ngx_hâp_up°ªam_moduÀ
,

108 &
ngx_hâp_°©ic_moduÀ
,

109 &
ngx_hâp_autoödex_moduÀ
,

110 &
ngx_hâp_ödex_moduÀ
,

111 &
ngx_hâp_auth_basic_moduÀ
,

112 &
ngx_hâp_ac˚ss_moduÀ
,

113 &
ngx_hâp_limô_c⁄n_moduÀ
,

114 &
ngx_hâp_limô_ªq_moduÀ
,

115 &
ngx_hâp_geo_moduÀ
,

116 &
ngx_hâp_m≠_moduÀ
,

117 &
ngx_hâp_•lô_˛õ¡s_moduÀ
,

118 &
ngx_hâp_ª„ªr_moduÀ
,

119 &
ngx_hâp_ªwrôe_moduÀ
,

120 &
ngx_hâp_¥oxy_moduÀ
,

121 &
ngx_hâp_Á°cgi_moduÀ
,

122 &
ngx_hâp_uwsgi_moduÀ
,

123 &
ngx_hâp_scgi_moduÀ
,

124 &
ngx_hâp_memˇched_moduÀ
,

125 &
ngx_hâp_em±y_gif_moduÀ
,

126 &
ngx_hâp_brow£r_moduÀ
,

127 &
ngx_hâp_up°ªam_ù_hash_moduÀ
,

128 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
,

129 &
ngx_hâp_up°ªam_kì∑live_moduÀ
,

130 &
ngx_πmp_°©_moduÀ
,

131 &
ngx_πmp_c⁄åﬁ_moduÀ
,

132 &
ngx_hâp_wrôe_fûãr_moduÀ
,

133 &
ngx_hâp_hódî_fûãr_moduÀ
,

134 &
ngx_hâp_chunked_fûãr_moduÀ
,

135 &
ngx_hâp_ønge_hódî_fûãr_moduÀ
,

136 &
ngx_hâp_gzù_fûãr_moduÀ
,

137 &
ngx_hâp_po°p⁄e_fûãr_moduÀ
,

138 &
ngx_hâp_ssi_fûãr_moduÀ
,

139 &
ngx_hâp_ch¨£t_fûãr_moduÀ
,

140 &
ngx_hâp_u£rid_fûãr_moduÀ
,

141 &
ngx_hâp_hódîs_fûãr_moduÀ
,

142 &
ngx_hâp_c›y_fûãr_moduÀ
,

143 &
ngx_hâp_ønge_body_fûãr_moduÀ
,

144 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
,

145 
NULL


	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/nginx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
);

15 
ngx_öt_t
 
ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

16 
ngx_öt_t
 
ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
);

17 *
ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

18 *
ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

19 *
ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

20 *
ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

21 *
ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

22 *
ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_debug_poöts
[] = {

29 { 
ngx_°rög
("°›"), 
NGX_DEBUG_POINTS_STOP
 },

30 { 
ngx_°rög
("ab‹t"), 
NGX_DEBUG_POINTS_ABORT
 },

31 { 
ngx_nuŒ_°rög
, 0 }

35 
ngx_comm™d_t
 
	gngx_c‹e_comm™ds
[] = {

37 { 
ngx_°rög
("daemon"),

38 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

39 
ngx_c⁄f_£t_Êag_¶Ÿ
,

41 
off£tof
(
ngx_c‹e_c⁄f_t
, 
d´m⁄
),

42 
NULL
 },

44 { 
ngx_°rög
("master_process"),

45 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

46 
ngx_c⁄f_£t_Êag_¶Ÿ
,

48 
off£tof
(
ngx_c‹e_c⁄f_t
, 
ma°î
),

49 
NULL
 },

51 { 
ngx_°rög
("timer_resolution"),

52 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

53 
ngx_c⁄f_£t_m£c_¶Ÿ
,

55 
off£tof
(
ngx_c‹e_c⁄f_t
, 
timî_ªsﬁuti⁄
),

56 
NULL
 },

58 { 
ngx_°rög
("pid"),

59 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_°r_¶Ÿ
,

62 
off£tof
(
ngx_c‹e_c⁄f_t
, 
pid
),

63 
NULL
 },

65 { 
ngx_°rög
("lock_file"),

66 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_°r_¶Ÿ
,

69 
off£tof
(
ngx_c‹e_c⁄f_t
, 
lock_fûe
),

70 
NULL
 },

72 { 
ngx_°rög
("worker_processes"),

73 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_£t_w‹kî_¥o˚s£s
,

77 
NULL
 },

79 { 
ngx_°rög
("debug_points"),

80 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_íum_¶Ÿ
,

83 
off£tof
(
ngx_c‹e_c⁄f_t
, 
debug_poöts
),

84 &
ngx_debug_poöts
 },

86 { 
ngx_°rög
("user"),

87 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE12
,

88 
ngx_£t_u£r
,

91 
NULL
 },

93 { 
ngx_°rög
("worker_priority"),

94 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_£t_¥i‹ôy
,

98 
NULL
 },

100 { 
ngx_°rög
("worker_cpu_affinity"),

101 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_1MORE
,

102 
ngx_£t_˝u_afföôy
,

105 
NULL
 },

107 { 
ngx_°rög
("worker_rlimit_nofile"),

108 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_num_¶Ÿ
,

111 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_nofûe
),

112 
NULL
 },

114 { 
ngx_°rög
("worker_rlimit_core"),

115 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_c⁄f_£t_off_¶Ÿ
,

118 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_c‹e
),

119 
NULL
 },

121 { 
ngx_°rög
("worker_rlimit_sigpending"),

122 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

123 
ngx_c⁄f_£t_num_¶Ÿ
,

125 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_sig≥ndög
),

126 
NULL
 },

128 { 
ngx_°rög
("working_directory"),

129 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

130 
ngx_c⁄f_£t_°r_¶Ÿ
,

132 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kög_dúe˘‹y
),

133 
NULL
 },

135 { 
ngx_°rög
("env"),

136 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_£t_ív
,

140 
NULL
 },

142 #i‡(
NGX_THREADS
)

144 { 
ngx_°rög
("worker_threads"),

145 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_num_¶Ÿ
,

148 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kî_thªads
),

149 
NULL
 },

151 { 
ngx_°rög
("thread_stack_size"),

152 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_size_¶Ÿ
,

155 
off£tof
(
ngx_c‹e_c⁄f_t
, 
thªad_°ack_size
),

156 
NULL
 },

160 
ngx_nuŒ_comm™d


164 
ngx_c‹e_moduÀ_t
 
	gngx_c‹e_moduÀ_˘x
 = {

165 
ngx_°rög
("core"),

166 
ngx_c‹e_moduÀ_¸óã_c⁄f
,

167 
ngx_c‹e_moduÀ_öô_c⁄f


171 
ngx_moduÀ_t
 
	gngx_c‹e_moduÀ
 = {

172 
NGX_MODULE_V1
,

173 &
ngx_c‹e_moduÀ_˘x
,

174 
ngx_c‹e_comm™ds
,

175 
NGX_CORE_MODULE
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NGX_MODULE_V1_PADDING


187 
ngx_uöt_t
 
	gngx_max_moduÀ
;

189 
ngx_uöt_t
 
	gngx_show_hñp
;

190 
ngx_uöt_t
 
	gngx_show_vîsi⁄
;

191 
ngx_uöt_t
 
	gngx_show_c⁄figuª
;

192 
u_ch¨
 *
	gngx_¥efix
;

193 
u_ch¨
 *
	gngx_c⁄f_fûe
;

194 
u_ch¨
 *
	gngx_c⁄f_∑øms
;

195 *
	gngx_sig«l
;

198 **
	gngx_os_ívú⁄
;

201 
ngx_cde˛


202 
	$maö
(
¨gc
, *c⁄° *
¨gv
)

204 
ngx_öt_t
 
i
;

205 
ngx_log_t
 *
log
;

206 
ngx_cy˛e_t
 *
cy˛e
, 
öô_cy˛e
;

207 
ngx_c‹e_c⁄f_t
 *
ccf
;

209 
	`ngx_debug_öô
();

211 i‡(
	`ngx_°ªº‹_öô
(Ë!
NGX_OK
) {

215 i‡(
	`ngx_gë_›ti⁄s
(
¨gc
, 
¨gv
Ë!
NGX_OK
) {

219 i‡(
ngx_show_vîsi⁄
) {

220 
	`ngx_wrôe_°dîr
("ngöx vîsi⁄: " 
NGINX_VER
 
NGX_LINEFEED
);

222 i‡(
ngx_show_hñp
) {

223 
	`ngx_wrôe_°dîr
(

225 "[-∞¥efix] [-g dúe˘ives]" 
NGX_LINEFEED


226 
NGX_LINEFEED


227 "O±i⁄s:" 
NGX_LINEFEED


228 " -?,-h :Åhi†hñp" 
NGX_LINEFEED


229 " -v : show vîsi⁄ándÉxô" 
NGX_LINEFEED


231 
NGX_LINEFEED


232 " -à :Åe° c⁄figuøti⁄ándÉxô" 
NGX_LINEFEED


234 "durög c⁄figuøti⁄Åe°ög" 
NGX_LINEFEED


236 "°›, quô,Ñe›í,Ññﬂd" 
NGX_LINEFEED


237 #ifde‡
NGX_PREFIX


239 
NGX_PREFIX
 ")" 
NGX_LINEFEED


241 " -∞¥efix : sëÖªfixÖ©h (deÁu…: NONE)" 
NGX_LINEFEED


244 
NGX_CONF_PATH
 ")" 
NGX_LINEFEED


246 "fûe" 
NGX_LINEFEED
 NGX_LINEFEED

250 i‡(
ngx_show_c⁄figuª
) {

251 
	`ngx_wrôe_°dîr
(

252 #ifde‡
NGX_COMPILER


253 "buûàby " 
NGX_COMPILER
 
NGX_LINEFEED


255 #i‡(
NGX_SSL
)

256 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


257 "TLS SNI suµ‹àíabÀd" 
NGX_LINEFEED


259 "TLS SNI suµ‹àdißbÀd" 
NGX_LINEFEED


262 "c⁄figuªárgumíts:" 
NGX_CONFIGURE
 
NGX_LINEFEED
);

265 i‡(!
ngx_ã°_c⁄fig
) {

270  
ngx_max_sockës
 = -1;

272 
	`ngx_time_öô
();

274 #i‡(
NGX_PCRE
)

275 
	`ngx_ªgex_öô
();

278 
ngx_pid
 = 
	`ngx_gëpid
();

280 
log
 = 
	`ngx_log_öô
(
ngx_¥efix
);

281 i‡(
log
 =
NULL
) {

286 #i‡(
NGX_OPENSSL
)

287 
	`ngx_s¶_öô
(
log
);

295 
	`ngx_memzîo
(&
öô_cy˛e
, (
ngx_cy˛e_t
));

296 
öô_cy˛e
.
log
 =Üog;

297 
ngx_cy˛e
 = &
öô_cy˛e
;

299 
öô_cy˛e
.
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, 
log
);

300 i‡(
öô_cy˛e
.
poﬁ
 =
NULL
) {

304 i‡(
	`ngx_ßve_¨gv
(&
öô_cy˛e
, 
¨gc
, 
¨gv
Ë!
NGX_OK
) {

308 i‡(
	`ngx_¥o˚ss_›ti⁄s
(&
öô_cy˛e
Ë!
NGX_OK
) {

312 i‡(
	`ngx_os_öô
(
log
Ë!
NGX_OK
) {

320 i‡(
	`ngx_¸c32_èbÀ_öô
(Ë!
NGX_OK
) {

324 i‡(
	`ngx_add_öhîôed_sockës
(&
öô_cy˛e
Ë!
NGX_OK
) {

328 
ngx_max_moduÀ
 = 0;

329 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

330 
ngx_moduÀs
[
i
]->
ödex
 = 
ngx_max_moduÀ
++;

333 
cy˛e
 = 
	`ngx_öô_cy˛e
(&
öô_cy˛e
);

334 i‡(
cy˛e
 =
NULL
) {

335 i‡(
ngx_ã°_c⁄fig
) {

336 
	`ngx_log_°dîr
(0, "configuration file %sÅest failed",

337 
öô_cy˛e
.
c⁄f_fûe
.
d©a
);

343 i‡(
ngx_ã°_c⁄fig
) {

344 i‡(!
ngx_quõt_mode
) {

345 
	`ngx_log_°dîr
(0, "configuration file %sÅest is successful",

346 
cy˛e
->
c⁄f_fûe
.
d©a
);

352 i‡(
ngx_sig«l
) {

353  
	`ngx_sig«l_¥o˚ss
(
cy˛e
, 
ngx_sig«l
);

356 
	`ngx_os_°©us
(
cy˛e
->
log
);

358 
ngx_cy˛e
 = 
cy˛e
;

360 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

362 i‡(
ccf
->
ma°î
 && 
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

363 
ngx_¥o˚ss
 = 
NGX_PROCESS_MASTER
;

366 #i‡!(
NGX_WIN32
)

368 i‡(
	`ngx_öô_sig«ls
(
cy˛e
->
log
Ë!
NGX_OK
) {

372 i‡(!
ngx_öhîôed
 && 
ccf
->
d´m⁄
) {

373 i‡(
	`ngx_d´m⁄
(
cy˛e
->
log
Ë!
NGX_OK
) {

377 
ngx_d´m⁄ized
 = 1;

380 i‡(
ngx_öhîôed
) {

381 
ngx_d´m⁄ized
 = 1;

386 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
cy˛e
->
log
Ë!
NGX_OK
) {

390 i‡(
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
Ë!
NGX_OK
) {

394 i‡(
log
->
fûe
->
fd
 !
ngx_°dîr
) {

395 i‡(
	`ngx_˛o£_fûe
(
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

396 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

397 
ngx_˛o£_fûe_n
 " built-inÜog failed");

401 
ngx_u£_°dîr
 = 0;

403 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

404 
	`ngx_sögÀ_¥o˚ss_cy˛e
(
cy˛e
);

407 
	`ngx_ma°î_¥o˚ss_cy˛e
(
cy˛e
);

411 
	}
}

414 
ngx_öt_t


415 
	$ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

417 
u_ch¨
 *
p
, *
v
, *
öhîôed
;

418 
ngx_öt_t
 
s
;

419 
ngx_li°íög_t
 *
ls
;

421 
öhîôed
 = (
u_ch¨
 *Ë
	`gëív
(
NGINX_VAR
);

423 i‡(
öhîôed
 =
NULL
) {

424  
NGX_OK
;

427 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

428 "usög inhîôed sockë†‰om \"%s\"", 
öhîôed
);

430 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
li°íög
, cy˛e->
poﬁ
, 10,

431 (
ngx_li°íög_t
))

432 !
NGX_OK
)

434  
NGX_ERROR
;

437 
p
 = 
öhîôed
, 
v
 =Ö; *p;Ö++) {

438 i‡(*
p
 == ':' || *p == ';') {

439 
s
 = 
	`ngx_©oi
(
v
, 
p
 - v);

440 i‡(
s
 =
NGX_ERROR
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

442 "övÆid sockëÇumbî \"%s\" i¿" 
NGINX_VAR


444 " o‡thêv¨übÀ", 
v
);

448 
v
 = 
p
 + 1;

450 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

451 i‡(
ls
 =
NULL
) {

452  
NGX_ERROR
;

455 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

457 
ls
->
fd
 = (
ngx_sockë_t
Ë
s
;

461 
ngx_öhîôed
 = 1;

463  
	`ngx_£t_öhîôed_sockës
(
cy˛e
);

464 
	}
}

468 
	$ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
)

470 **
p
, **
ív
;

471 
ngx_°r_t
 *
v¨
;

472 
ngx_uöt_t
 
i
, 
n
;

473 
ngx_c‹e_c⁄f_t
 *
ccf
;

475 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

477 i‡(
œ°
 =
NULL
 && 
ccf
->
ívú⁄mít
) {

478  
ccf
->
ívú⁄mít
;

481 
v¨
 = 
ccf
->
ív
.
ñts
;

483 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

484 i‡(
	`ngx_°rcmp
(
v¨
[
i
].
d©a
, "TZ") == 0

485 || 
	`ngx_°∫cmp
(
v¨
[
i
].
d©a
, "TZ=", 3) == 0)

487 
tz_found
;

491 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

492 i‡(
v¨
 =
NULL
) {

493  
NULL
;

496 
v¨
->
Àn
 = 2;

497 
v¨
->
d©a
 = (
u_ch¨
 *) "TZ";

499 
v¨
 = 
ccf
->
ív
.
ñts
;

501 
tz_found
:

503 
n
 = 0;

505 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

507 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

508 
n
++;

512 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

514 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

515 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

517 
n
++;

523 i‡(
œ°
) {

524 
ív
 = 
	`ngx_Æloc
((*
œ°
 + 
n
 + 1Ë* (*), 
cy˛e
->
log
);

525 *
œ°
 = 
n
;

528 
ív
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
n
 + 1) * (*));

531 i‡(
ív
 =
NULL
) {

532  
NULL
;

535 
n
 = 0;

537 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

539 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

540 
ív
[
n
++] = (*Ë
v¨
[
i
].
d©a
;

544 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

546 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

547 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

549 
ív
[
n
++] = *
p
;

555 
ív
[
n
] = 
NULL
;

557 i‡(
œ°
 =
NULL
) {

558 
ccf
->
ívú⁄mít
 = 
ív
;

559 
ívú⁄
 = 
ív
;

562  
ív
;

563 
	}
}

566 
ngx_pid_t


567 
	$ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
)

569 **
ív
, *
v¨
;

570 
u_ch¨
 *
p
;

571 
ngx_uöt_t
 
i
, 
n
;

572 
ngx_pid_t
 
pid
;

573 
ngx_exec_˘x_t
 
˘x
;

574 
ngx_c‹e_c⁄f_t
 *
ccf
;

575 
ngx_li°íög_t
 *
ls
;

577 
	`ngx_memzîo
(&
˘x
, (
ngx_exec_˘x_t
));

579 
˘x
.
∑th
 = 
¨gv
[0];

580 
˘x
.
«me
 = "new binaryÖrocess";

581 
˘x
.
¨gv
 =árgv;

583 
n
 = 2;

584 
ív
 = 
	`ngx_£t_ívú⁄mít
(
cy˛e
, &
n
);

585 i‡(
ív
 =
NULL
) {

586  
NGX_INVALID_PID
;

589 
v¨
 = 
	`ngx_Æloc
((
NGINX_VAR
)

590 + 
cy˛e
->
li°íög
.
√…s
 * (
NGX_INT32_LEN
 + 1) + 2,

591 
cy˛e
->
log
);

592 i‡(
v¨
 =
NULL
) {

593 
	`ngx_‰ì
(
ív
);

594  
NGX_INVALID_PID
;

597 
p
 = 
	`ngx_˝ymem
(
v¨
, 
NGINX_VAR
 "=", (NGINX_VAR));

599 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

600 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

601 
p
 = 
	`ngx_•rötf
’, "%ud;", 
ls
[
i
].
fd
);

604 *
p
 = '\0';

606 
ív
[
n
++] = 
v¨
;

608 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

612 
ív
[
n
++] = "SPARE=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

620 
ív
[
n
] = 
NULL
;

622 #i‡(
NGX_DEBUG
)

624 **
e
;

625 
e
 = 
ív
; *e;É++) {

626 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "ív: %s", *
e
);

631 
˘x
.
ívp
 = (*c⁄° *Ë
ív
;

633 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

635 i‡(
	`ngx_ª«me_fûe
(
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©aË=
NGX_FILE_ERROR
) {

636 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

637 
ngx_ª«me_fûe_n
 " %sÅo %s failed "

639 
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©a, 
¨gv
[0]);

641 
	`ngx_‰ì
(
ív
);

642 
	`ngx_‰ì
(
v¨
);

644  
NGX_INVALID_PID
;

647 
pid
 = 
	`ngx_execuã
(
cy˛e
, &
˘x
);

649 i‡(
pid
 =
NGX_INVALID_PID
) {

650 i‡(
	`ngx_ª«me_fûe
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.data)

651 =
NGX_FILE_ERROR
)

653 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

654 
ngx_ª«me_fûe_n
 " %s backÅo %s failedáfter "

656 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
¨gv
[0]);

660 
	`ngx_‰ì
(
ív
);

661 
	`ngx_‰ì
(
v¨
);

663  
pid
;

664 
	}
}

667 
ngx_öt_t


668 
	$ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
)

670 
u_ch¨
 *
p
;

671 
ngx_öt_t
 
i
;

673 
i
 = 1; i < 
¨gc
; i++) {

675 
p
 = (
u_ch¨
 *Ë
¨gv
[
i
];

677 i‡(*
p
++ != '-') {

678 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%s\"", 
¨gv
[
i
]);

679  
NGX_ERROR
;

682 *
p
) {

684 *
p
++) {

688 
ngx_show_vîsi⁄
 = 1;

689 
ngx_show_hñp
 = 1;

693 
ngx_show_vîsi⁄
 = 1;

697 
ngx_show_vîsi⁄
 = 1;

698 
ngx_show_c⁄figuª
 = 1;

702 
ngx_ã°_c⁄fig
 = 1;

706 
ngx_quõt_mode
 = 1;

710 i‡(*
p
) {

711 
ngx_¥efix
 = 
p
;

712 
√xt
;

715 i‡(
¨gv
[++
i
]) {

716 
ngx_¥efix
 = (
u_ch¨
 *Ë
¨gv
[
i
];

717 
√xt
;

720 
	`ngx_log_°dîr
(0, "option \"-p\"Ñequires directoryÇame");

721  
NGX_ERROR
;

724 i‡(*
p
) {

725 
ngx_c⁄f_fûe
 = 
p
;

726 
√xt
;

729 i‡(
¨gv
[++
i
]) {

730 
ngx_c⁄f_fûe
 = (
u_ch¨
 *Ë
¨gv
[
i
];

731 
√xt
;

734 
	`ngx_log_°dîr
(0, "option \"-c\"Ñequires fileÇame");

735  
NGX_ERROR
;

738 i‡(*
p
) {

739 
ngx_c⁄f_∑øms
 = 
p
;

740 
√xt
;

743 i‡(
¨gv
[++
i
]) {

744 
ngx_c⁄f_∑øms
 = (
u_ch¨
 *Ë
¨gv
[
i
];

745 
√xt
;

748 
	`ngx_log_°dîr
(0, "option \"-g\"ÑequiresÖarameter");

749  
NGX_ERROR
;

752 i‡(*
p
) {

753 
ngx_sig«l
 = (*Ë
p
;

755 } i‡(
¨gv
[++
i
]) {

756 
ngx_sig«l
 = 
¨gv
[
i
];

759 
	`ngx_log_°dîr
(0, "option \"-s\"ÑequiresÖarameter");

760  
NGX_ERROR
;

763 i‡(
	`ngx_°rcmp
(
ngx_sig«l
, "stop") == 0

764 || 
	`ngx_°rcmp
(
ngx_sig«l
, "quit") == 0

765 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reopen") == 0

766 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reload") == 0)

768 
ngx_¥o˚ss
 = 
NGX_PROCESS_SIGNALLER
;

769 
√xt
;

772 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"-†%s\"", 
ngx_sig«l
);

773  
NGX_ERROR
;

776 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%c\"", *(
p
 - 1));

777  
NGX_ERROR
;

781 
√xt
:

786  
NGX_OK
;

787 
	}
}

790 
ngx_öt_t


791 
	$ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
)

793 #i‡(
NGX_FREEBSD
)

795 
ngx_os_¨gv
 = (**Ë
¨gv
;

796 
ngx_¨gc
 = 
¨gc
;

797 
ngx_¨gv
 = (**Ë
¨gv
;

800 
size_t
 
Àn
;

801 
ngx_öt_t
 
i
;

803 
ngx_os_¨gv
 = (**Ë
¨gv
;

804 
ngx_¨gc
 = 
¨gc
;

806 
ngx_¨gv
 = 
	`ngx_Æloc
((
¨gc
 + 1Ë* (*), 
cy˛e
->
log
);

807 i‡(
ngx_¨gv
 =
NULL
) {

808  
NGX_ERROR
;

811 
i
 = 0; i < 
¨gc
; i++) {

812 
Àn
 = 
	`ngx_°æí
(
¨gv
[
i
]) + 1;

814 
ngx_¨gv
[
i
] = 
	`ngx_Æloc
(
Àn
, 
cy˛e
->
log
);

815 i‡(
ngx_¨gv
[
i
] =
NULL
) {

816  
NGX_ERROR
;

819 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_¨gv
[
i
], (u_ch¨ *Ë
¨gv
[i], 
Àn
);

822 
ngx_¨gv
[
i
] = 
NULL
;

826 
ngx_os_ívú⁄
 = 
ívú⁄
;

828  
NGX_OK
;

829 
	}
}

832 
ngx_öt_t


833 
	$ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

835 
u_ch¨
 *
p
;

836 
size_t
 
Àn
;

838 i‡(
ngx_¥efix
) {

839 
Àn
 = 
	`ngx_°æí
(
ngx_¥efix
);

840 
p
 = 
ngx_¥efix
;

842 i‡(
Àn
 && !
	`ngx_∑th_£∑øt‹
(
p
[len - 1])) {

843 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 1);

844 i‡(
p
 =
NULL
) {

845  
NGX_ERROR
;

848 
	`ngx_mem˝y
(
p
, 
ngx_¥efix
, 
Àn
);

849 
p
[
Àn
++] = '/';

852 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

853 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

854 
cy˛e
->
¥efix
.
Àn
 =Üen;

855 
cy˛e
->
¥efix
.
d©a
 = 
p
;

859 #i‚de‡
NGX_PREFIX


861 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
NGX_MAX_PATH
);

862 i‡(
p
 =
NULL
) {

863  
NGX_ERROR
;

866 i‡(
	`ngx_gëcwd
(
p
, 
NGX_MAX_PATH
) == 0) {

867 
	`ngx_log_°dîr
(
ngx_î∫o
, "[emîg]: " 
ngx_gëcwd_n
 " failed");

868  
NGX_ERROR
;

871 
Àn
 = 
	`ngx_°æí
(
p
);

873 
p
[
Àn
++] = '/';

875 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

876 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

877 
cy˛e
->
¥efix
.
Àn
 =Üen;

878 
cy˛e
->
¥efix
.
d©a
 = 
p
;

882 #ifde‡
NGX_CONF_PREFIX


883 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_CONF_PREFIX
);

885 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_PREFIX
);

887 
	`ngx_°r_£t
(&
cy˛e
->
¥efix
, 
NGX_PREFIX
);

892 i‡(
ngx_c⁄f_fûe
) {

893 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_fûe
);

894 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
ngx_c⁄f_fûe
;

897 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_fûe
, 
NGX_CONF_PATH
);

900 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &cy˛e->
c⁄f_fûe
, 0Ë!
NGX_OK
) {

901  
NGX_ERROR
;

904 
p
 = 
cy˛e
->
c⁄f_fûe
.
d©a
 + cy˛e->c⁄f_fûe.
Àn
 - 1;

905 
p
 > 
cy˛e
->
c⁄f_fûe
.
d©a
;

906 
p
--)

908 i‡(
	`ngx_∑th_£∑øt‹
(*
p
)) {

909 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
p
 - 
ngx_cy˛e
->
c⁄f_fûe
.
d©a
 + 1;

910 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
ngx_cy˛e
->
c⁄f_fûe
.data;

915 i‡(
ngx_c⁄f_∑øms
) {

916 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_∑øms
);

917 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
ngx_c⁄f_∑øms
;

920 i‡(
ngx_ã°_c⁄fig
) {

921 
cy˛e
->
log
->
log_Àvñ
 = 
NGX_LOG_INFO
;

924  
NGX_OK
;

925 
	}
}

929 
	$ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

931 
ngx_c‹e_c⁄f_t
 *
ccf
;

933 
ccf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_c‹e_c⁄f_t
));

934 i‡(
ccf
 =
NULL
) {

935  
NULL
;

948 
ccf
->
d´m⁄
 = 
NGX_CONF_UNSET
;

949 
ccf
->
ma°î
 = 
NGX_CONF_UNSET
;

950 
ccf
->
timî_ªsﬁuti⁄
 = 
NGX_CONF_UNSET_MSEC
;

952 
ccf
->
w‹kî_¥o˚s£s
 = 
NGX_CONF_UNSET
;

953 
ccf
->
debug_poöts
 = 
NGX_CONF_UNSET
;

955 
ccf
->
æimô_nofûe
 = 
NGX_CONF_UNSET
;

956 
ccf
->
æimô_c‹e
 = 
NGX_CONF_UNSET
;

957 
ccf
->
æimô_sig≥ndög
 = 
NGX_CONF_UNSET
;

959 
ccf
->
u£r
 = (
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
;

960 
ccf
->
group
 = (
ngx_gid_t
Ë
NGX_CONF_UNSET_UINT
;

962 #i‡(
NGX_THREADS
)

963 
ccf
->
w‹kî_thªads
 = 
NGX_CONF_UNSET
;

964 
ccf
->
thªad_°ack_size
 = 
NGX_CONF_UNSET_SIZE
;

967 i‡(
	`ngx_¨øy_öô
(&
ccf
->
ív
, 
cy˛e
->
poﬁ
, 1, (
ngx_°r_t
))

968 !
NGX_OK
)

970  
NULL
;

973  
ccf
;

974 
	}
}

978 
	$ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

980 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

982 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
d´m⁄
, 1);

983 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
ma°î
, 1);

984 
	`ngx_c⁄f_öô_m£c_vÆue
(
ccf
->
timî_ªsﬁuti⁄
, 0);

986 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_¥o˚s£s
, 1);

987 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
debug_poöts
, 0);

989 #i‡(
NGX_HAVE_CPU_AFFINITY
)

991 i‡(
ccf
->
˝u_afföôy_n


992 && 
ccf
->
˝u_afföôy_n
 != 1

993 && 
ccf
->
˝u_afföôy_n
 !(
ngx_uöt_t
Ëccf->
w‹kî_¥o˚s£s
)

995 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

1003 #i‡(
NGX_THREADS
)

1005 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_thªads
, 0);

1006 
ngx_thªads_n
 = 
ccf
->
w‹kî_thªads
;

1007 
	`ngx_c⁄f_öô_size_vÆue
(
ccf
->
thªad_°ack_size
, 2 * 1024 * 1024);

1012 i‡(
ccf
->
pid
.
Àn
 == 0) {

1013 
	`ngx_°r_£t
(&
ccf
->
pid
, 
NGX_PID_PATH
);

1016 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
pid
, 0Ë!
NGX_OK
) {

1017  
NGX_CONF_ERROR
;

1020 
ccf
->
ﬁdpid
.
Àn
 = ccf->
pid
.À¿+ (
NGX_OLDPID_EXT
);

1022 
ccf
->
ﬁdpid
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, ccf->ﬁdpid.
Àn
);

1023 i‡(
ccf
->
ﬁdpid
.
d©a
 =
NULL
) {

1024  
NGX_CONF_ERROR
;

1027 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, ccf->pid.
Àn
),

1028 
NGX_OLDPID_EXT
, (NGX_OLDPID_EXT));

1031 #i‡!(
NGX_WIN32
)

1033 i‡(
ccf
->
u£r
 =(
uid_t
Ë
NGX_CONF_UNSET_UINT
 && 
	`gëeuid
() == 0) {

1034 
group
 *
gΩ
;

1035 
∑sswd
 *
pwd
;

1037 
	`ngx_£t_î∫o
(0);

1038 
pwd
 = 
	`gëpw«m
(
NGX_USER
);

1039 i‡(
pwd
 =
NULL
) {

1040 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1041 "gëpw«m(\"" 
NGX_USER
 "\") failed");

1042  
NGX_CONF_ERROR
;

1045 
ccf
->
u£∫ame
 = 
NGX_USER
;

1046 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1048 
	`ngx_£t_î∫o
(0);

1049 
gΩ
 = 
	`gëg∫am
(
NGX_GROUP
);

1050 i‡(
gΩ
 =
NULL
) {

1051 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1052 "gëg∫am(\"" 
NGX_GROUP
 "\") failed");

1053  
NGX_CONF_ERROR
;

1056 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1060 i‡(
ccf
->
lock_fûe
.
Àn
 == 0) {

1061 
	`ngx_°r_£t
(&
ccf
->
lock_fûe
, 
NGX_LOCK_PATH
);

1064 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
lock_fûe
, 0Ë!
NGX_OK
) {

1065  
NGX_CONF_ERROR
;

1069 
ngx_°r_t
 
lock_fûe
;

1071 
lock_fûe
 = 
cy˛e
->
ﬁd_cy˛e
->lock_file;

1073 i‡(
lock_fûe
.
Àn
) {

1074 
lock_fûe
.
Àn
--;

1076 i‡(
ccf
->
lock_fûe
.
Àn
 !=Üock_file.len

1077 || 
	`ngx_°∫cmp
(
ccf
->
lock_fûe
.
d©a
,Üock_fûe.d©a,Üock_fûe.
Àn
)

1080 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1084 
cy˛e
->
lock_fûe
.
Àn
 =Üock_file.len + 1;

1085 
lock_fûe
.
Àn
 += (".accept");

1087 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_p°rdup
(cy˛e->
poﬁ
, &lock_file);

1088 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1089  
NGX_CONF_ERROR
;

1093 
cy˛e
->
lock_fûe
.
Àn
 = 
ccf
->lock_file.len + 1;

1094 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_≤Æloc
(cy˛e->
poﬁ
,

1095 
ccf
->
lock_fûe
.
Àn
 + (".accept"));

1096 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1097  
NGX_CONF_ERROR
;

1100 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
cy˛e
->
lock_fûe
.
d©a
, 
ccf
->lock_file.data,

1101 
ccf
->
lock_fûe
.
Àn
),

1108  
NGX_CONF_OK
;

1109 
	}
}

1113 
	$ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1115 #i‡(
NGX_WIN32
)

1117 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1120  
NGX_CONF_OK
;

1124 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1126 *
group
;

1127 
∑sswd
 *
pwd
;

1128 
group
 *
gΩ
;

1129 
ngx_°r_t
 *
vÆue
;

1131 i‡(
ccf
->
u£r
 !(
uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1135 i‡(
	`gëeuid
() != 0) {

1136 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1140  
NGX_CONF_OK
;

1143 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1145 
ccf
->
u£∫ame
 = (*Ë
vÆue
[1].
d©a
;

1147 
	`ngx_£t_î∫o
(0);

1148 
pwd
 = 
	`gëpw«m
((c⁄° *Ë
vÆue
[1].
d©a
);

1149 i‡(
pwd
 =
NULL
) {

1150 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1151 "gëpw«m(\"%s\"ËÁûed", 
vÆue
[1].
d©a
);

1152  
NGX_CONF_ERROR
;

1155 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1157 
group
 = (*Ë((
cf
->
¨gs
->
√…s
 =2Ë? 
vÆue
[1].
d©a
 : value[2].data);

1159 
	`ngx_£t_î∫o
(0);

1160 
gΩ
 = 
	`gëg∫am
(
group
);

1161 i‡(
gΩ
 =
NULL
) {

1162 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1163 "gëg∫am(\"%s\"ËÁûed", 
group
);

1164  
NGX_CONF_ERROR
;

1167 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1169  
NGX_CONF_OK
;

1172 
	}
}

1176 
	$ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1178 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1180 
ngx_°r_t
 *
vÆue
, *
v¨
;

1181 
ngx_uöt_t
 
i
;

1183 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

1184 i‡(
v¨
 =
NULL
) {

1185  
NGX_CONF_ERROR
;

1188 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1189 *
v¨
 = 
vÆue
[1];

1191 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

1193 i‡(
vÆue
[1].
d©a
[
i
] == '=') {

1195 
v¨
->
Àn
 = 
i
;

1197  
NGX_CONF_OK
;

1201  
NGX_CONF_OK
;

1202 
	}
}

1206 
	$ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1208 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1210 
ngx_°r_t
 *
vÆue
;

1211 
ngx_uöt_t
 
n
, 
möus
;

1213 i‡(
ccf
->
¥i‹ôy
 != 0) {

1217 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1219 i‡(
vÆue
[1].
d©a
[0] == '-') {

1220 
n
 = 1;

1221 
möus
 = 1;

1223 } i‡(
vÆue
[1].
d©a
[0] == '+') {

1224 
n
 = 1;

1225 
möus
 = 0;

1228 
n
 = 0;

1229 
möus
 = 0;

1232 
ccf
->
¥i‹ôy
 = 
	`ngx_©oi
(&
vÆue
[1].
d©a
[
n
], vÆue[1].
Àn
 -Ç);

1233 i‡(
ccf
->
¥i‹ôy
 =
NGX_ERROR
) {

1237 i‡(
möus
) {

1238 
ccf
->
¥i‹ôy
 = -ccf->priority;

1241  
NGX_CONF_OK
;

1242 
	}
}

1246 
	$ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1248 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1249 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1251 
u_ch¨
 
ch
;

1252 
uöt64_t
 *
mask
;

1253 
ngx_°r_t
 *
vÆue
;

1254 
ngx_uöt_t
 
i
, 
n
;

1256 i‡(
ccf
->
˝u_afföôy
) {

1260 
mask
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (cf->
¨gs
->
√…s
 - 1Ë* (
uöt64_t
));

1261 i‡(
mask
 =
NULL
) {

1262  
NGX_CONF_ERROR
;

1265 
ccf
->
˝u_afföôy_n
 = 
cf
->
¨gs
->
√…s
 - 1;

1266 
ccf
->
˝u_afföôy
 = 
mask
;

1268 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1270 
n
 = 1;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

1272 i‡(
vÆue
[
n
].
Àn
 > 64) {

1273 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1275  
NGX_CONF_ERROR
;

1278 
mask
[
n
 - 1] = 0;

1280 
i
 = 0; i < 
vÆue
[
n
].
Àn
; i++) {

1282 
ch
 = 
vÆue
[
n
].
d©a
[
i
];

1284 i‡(
ch
 == ' ') {

1288 
mask
[
n
 - 1] <<= 1;

1290 i‡(
ch
 == '0') {

1294 i‡(
ch
 == '1') {

1295 
mask
[
n
 - 1] |= 1;

1299 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1301 
ch
);

1302  
NGX_CONF_ERROR
;

1308 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1313  
NGX_CONF_OK
;

1314 
	}
}

1317 
uöt64_t


1318 
	$ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
)

1320 
ngx_c‹e_c⁄f_t
 *
ccf
;

1322 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

1323 
ngx_c‹e_moduÀ
);

1325 i‡(
ccf
->
˝u_afföôy
 =
NULL
) {

1329 i‡(
ccf
->
˝u_afföôy_n
 > 
n
) {

1330  
ccf
->
˝u_afföôy
[
n
];

1333  
ccf
->
˝u_afföôy
[ccf->
˝u_afföôy_n
 - 1];

1334 
	}
}

1338 
	$ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1340 
ngx_°r_t
 *
vÆue
;

1341 
ngx_c‹e_c⁄f_t
 *
ccf
;

1343 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
c⁄f
;

1345 i‡(
ccf
->
w‹kî_¥o˚s£s
 !
NGX_CONF_UNSET
) {

1349 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1351 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "auto") == 0) {

1352 
ccf
->
w‹kî_¥o˚s£s
 = 
ngx_n˝u
;

1353  
NGX_CONF_OK
;

1356 
ccf
->
w‹kî_¥o˚s£s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1358 i‡(
ccf
->
w‹kî_¥o˚s£s
 =
NGX_ERROR
) {

1362  
NGX_CONF_OK
;

1363 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/nginx.h

8 #i‚de‡
_NGINX_H_INCLUDED_


9 
	#_NGINX_H_INCLUDED_


	)

12 
	#ngöx_vîsi⁄
 1006002

	)

13 
	#NGINX_VERSION
 "1.6.2"

	)

14 
	#NGINX_VER
 "ngöx/" 
NGINX_VERSION


	)

16 
	#NGINX_VAR
 "NGINX"

	)

17 
	#NGX_OLDPID_EXT
 ".ﬁdbö"

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_array.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_¨øy_t
 *

13 
	$ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_¨øy_t
 *
a
;

17 
a
 = 
	`ngx_∑Œoc
(
p
, (
ngx_¨øy_t
));

18 i‡(
a
 =
NULL
) {

19  
NULL
;

22 i‡(
	`ngx_¨øy_öô
(
a
, 
p
, 
n
, 
size
Ë!
NGX_OK
) {

23  
NULL
;

26  
a
;

27 
	}
}

31 
	$ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
)

33 
ngx_poﬁ_t
 *
p
;

35 
p
 = 
a
->
poﬁ
;

37 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°
) {

38 
p
->
d
.
œ°
 -
a
->
size
 *á->
«Œoc
;

41 i‡((
u_ch¨
 *Ë
a
 + (
ngx_¨øy_t
Ë=
p
->
d
.
œ°
) {

42 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë
a
;

44 
	}
}

48 
	$ngx_¨øy_push
(
ngx_¨øy_t
 *
a
)

50 *
ñt
, *
√w
;

51 
size_t
 
size
;

52 
ngx_poﬁ_t
 *
p
;

54 i‡(
a
->
√…s
 =a->
«Œoc
) {

58 
size
 = 
a
->sizê*á->
«Œoc
;

60 
p
 = 
a
->
poﬁ
;

62 i‡((
u_ch¨
 *Ë
a
->
ñts
 + 
size
 =
p
->
d
.
œ°


63 && 
p
->
d
.
œ°
 + 
a
->
size
 <p->d.
íd
)

70 
p
->
d
.
œ°
 +
a
->
size
;

71 
a
->
«Œoc
++;

76 
√w
 = 
	`ngx_∑Œoc
(
p
, 2 * 
size
);

77 i‡(
√w
 =
NULL
) {

78  
NULL
;

81 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
, 
size
);

82 
a
->
ñts
 = 
√w
;

83 
a
->
«Œoc
 *= 2;

87 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

88 
a
->
√…s
++;

90  
ñt
;

91 
	}
}

95 
	$ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
)

97 *
ñt
, *
√w
;

98 
size_t
 
size
;

99 
ngx_uöt_t
 
«Œoc
;

100 
ngx_poﬁ_t
 *
p
;

102 
size
 = 
n
 * 
a
->size;

104 i‡(
a
->
√…s
 + 
n
 >á->
«Œoc
) {

108 
p
 = 
a
->
poﬁ
;

110 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°


111 && 
p
->
d
.
œ°
 + 
size
 <p->d.
íd
)

118 
p
->
d
.
œ°
 +
size
;

119 
a
->
«Œoc
 +
n
;

124 
«Œoc
 = 2 * ((
n
 >
a
->nalloc) ?Ç :á->nalloc);

126 
√w
 = 
	`ngx_∑Œoc
(
p
, 
«Œoc
 * 
a
->
size
);

127 i‡(
√w
 =
NULL
) {

128  
NULL
;

131 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
,á->
√…s
 *á->
size
);

132 
a
->
ñts
 = 
√w
;

133 
a
->
«Œoc
 =Çalloc;

137 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

138 
a
->
√…s
 +
n
;

140  
ñt
;

141 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_array.h

8 #i‚de‡
_NGX_ARRAY_H_INCLUDED_


9 
	#_NGX_ARRAY_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mñts
;

18 
ngx_uöt_t
 
	m√…s
;

19 
size_t
 
	msize
;

20 
ngx_uöt_t
 
	m«Œoc
;

21 
ngx_poﬁ_t
 *
	mpoﬁ
;

22 } 
	tngx_¨øy_t
;

25 
ngx_¨øy_t
 *
ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

26 
ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
);

27 *
ngx_¨øy_push
(
ngx_¨øy_t
 *
a
);

28 *
ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
);

31 
ngx_ölöe
 
ngx_öt_t


32 
	$ngx_¨øy_öô
(
ngx_¨øy_t
 *
¨øy
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
¨øy
->
√…s
 = 0;

40 
¨øy
->
size
 = size;

41 
¨øy
->
«Œoc
 = 
n
;

42 
¨øy
->
poﬁ
 =Öool;

44 
¨øy
->
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

45 i‡(
¨øy
->
ñts
 =
NULL
) {

46  
NGX_ERROR
;

49  
NGX_OK
;

50 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_buf.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_buf_t
 *

13 
	$ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

15 
ngx_buf_t
 *
b
;

17 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

18 i‡(
b
 =
NULL
) {

19  
NULL
;

22 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

23 i‡(
b
->
°¨t
 =
NULL
) {

24  
NULL
;

38 
b
->
pos
 = b->
°¨t
;

39 
b
->
œ°
 = b->
°¨t
;

40 
b
->
íd
 = b->
œ°
 + 
size
;

41 
b
->
ãmp‹¨y
 = 1;

43  
b
;

44 
	}
}

47 
ngx_chaö_t
 *

48 
	$ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
)

50 
ngx_chaö_t
 *
˛
;

52 
˛
 = 
poﬁ
->
chaö
;

54 i‡(
˛
) {

55 
poﬁ
->
chaö
 = 
˛
->
√xt
;

56  
˛
;

59 
˛
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_chaö_t
));

60 i‡(
˛
 =
NULL
) {

61  
NULL
;

64  
˛
;

65 
	}
}

68 
ngx_chaö_t
 *

69 
	$ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
)

71 
u_ch¨
 *
p
;

72 
ngx_öt_t
 
i
;

73 
ngx_buf_t
 *
b
;

74 
ngx_chaö_t
 *
chaö
, *
˛
, **
Œ
;

76 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
bufs
->
num
 * bufs->
size
);

77 i‡(
p
 =
NULL
) {

78  
NULL
;

81 
Œ
 = &
chaö
;

83 
i
 = 0; i < 
bufs
->
num
; i++) {

85 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

86 i‡(
b
 =
NULL
) {

87  
NULL
;

102 
b
->
pos
 = 
p
;

103 
b
->
œ°
 = 
p
;

104 
b
->
ãmp‹¨y
 = 1;

106 
b
->
°¨t
 = 
p
;

107 
p
 +
bufs
->
size
;

108 
b
->
íd
 = 
p
;

110 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

111 i‡(
˛
 =
NULL
) {

112  
NULL
;

115 
˛
->
buf
 = 
b
;

116 *
Œ
 = 
˛
;

117 
Œ
 = &
˛
->
√xt
;

120 *
Œ
 = 
NULL
;

122  
chaö
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
)

129 
ngx_chaö_t
 *
˛
, **
Œ
;

131 
Œ
 = 
chaö
;

133 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

134 
Œ
 = &
˛
->
√xt
;

137 
ö
) {

138 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

139 i‡(
˛
 =
NULL
) {

140  
NGX_ERROR
;

143 
˛
->
buf
 = 
ö
->buf;

144 *
Œ
 = 
˛
;

145 
Œ
 = &
˛
->
√xt
;

146 
ö
 = in->
√xt
;

149 *
Œ
 = 
NULL
;

151  
NGX_OK
;

152 
	}
}

155 
ngx_chaö_t
 *

156 
	$ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
)

158 
ngx_chaö_t
 *
˛
;

160 i‡(*
‰ì
) {

161 
˛
 = *
‰ì
;

162 *
‰ì
 = 
˛
->
√xt
;

163 
˛
->
√xt
 = 
NULL
;

164  
˛
;

167 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
);

168 i‡(
˛
 =
NULL
) {

169  
NULL
;

172 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
p
);

173 i‡(
˛
->
buf
 =
NULL
) {

174  
NULL
;

177 
˛
->
√xt
 = 
NULL
;

179  
˛
;

180 
	}
}

184 
	$ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,Çgx_chaö_à**
busy
,

185 
ngx_chaö_t
 **
out
, 
ngx_buf_èg_t
 
èg
)

187 
ngx_chaö_t
 *
˛
;

189 i‡(*
busy
 =
NULL
) {

190 *
busy
 = *
out
;

193 
˛
 = *
busy
; cl->
√xt
; cl = cl->next) { }

195 
˛
->
√xt
 = *
out
;

198 *
out
 = 
NULL
;

200 *
busy
) {

201 
˛
 = *
busy
;

203 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

207 i‡(
˛
->
buf
->
èg
 !=Åag) {

208 *
busy
 = 
˛
->
√xt
;

209 
	`ngx_‰ì_chaö
(
p
, 
˛
);

213 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

214 
˛
->
buf
->
œ°
 = cl->buf->
°¨t
;

216 *
busy
 = 
˛
->
√xt
;

217 
˛
->
√xt
 = *
‰ì
;

218 *
‰ì
 = 
˛
;

220 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_buf.h

8 #i‚de‡
_NGX_BUF_H_INCLUDED_


9 
	#_NGX_BUF_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 * 
	tngx_buf_èg_t
;

18 
ngx_buf_s
 
	tngx_buf_t
;

20 
	sngx_buf_s
 {

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	mœ°
;

23 
off_t
 
	mfûe_pos
;

24 
off_t
 
	mfûe_œ°
;

26 
u_ch¨
 *
	m°¨t
;

27 
u_ch¨
 *
	míd
;

28 
ngx_buf_èg_t
 
	mèg
;

29 
ngx_fûe_t
 *
	mfûe
;

30 
ngx_buf_t
 *
	mshadow
;

34 
	mãmp‹¨y
:1;

40 
	mmem‹y
:1;

43 
	mmm≠
:1;

45 
	mªcy˛ed
:1;

46 
	mö_fûe
:1;

47 
	mÊush
:1;

48 
	msync
:1;

49 
	mœ°_buf
:1;

50 
	mœ°_ö_chaö
:1;

52 
	mœ°_shadow
:1;

53 
	mãmp_fûe
:1;

55  
	mnum
;

59 
	sngx_chaö_s
 {

60 
ngx_buf_t
 *
	mbuf
;

61 
ngx_chaö_t
 *
	m√xt
;

66 
ngx_öt_t
 
	mnum
;

67 
size_t
 
	msize
;

68 } 
	tngx_bufs_t
;

71 
ngx_ouçut_chaö_˘x_s
 
	tngx_ouçut_chaö_˘x_t
;

73 
	$ngx_öt_t
 (*
	tngx_ouçut_chaö_fûãr_±
)(*
	t˘x
, 
	tngx_chaö_t
 *
	tö
);

75 #i‡(
NGX_HAVE_FILE_AIO
)

76 (*
	tngx_ouçut_chaö_aio_±
)(
	tngx_ouçut_chaö_˘x_t
 *
	t˘x
,

77 
	tngx_fûe_t
 *
	tfûe
);

80 
	sngx_ouçut_chaö_˘x_s
 {

81 
ngx_buf_t
 *
buf
;

82 
ngx_chaö_t
 *
ö
;

83 
ngx_chaö_t
 *
‰ì
;

84 
ngx_chaö_t
 *
busy
;

86 
£ndfûe
:1;

87 
dúe˘io
:1;

88 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

89 
u«lig√d
:1;

91 
√ed_ö_mem‹y
:1;

92 
√ed_ö_ãmp
:1;

93 #i‡(
NGX_HAVE_FILE_AIO
)

94 
aio
:1;

96 
ngx_ouçut_chaö_aio_±
 
aio_h™dÀr
;

99 
off_t
 
Æignmít
;

101 
ngx_poﬁ_t
 *
poﬁ
;

102 
ngx_öt_t
 
Æloˇãd
;

103 
ngx_bufs_t
 
bufs
;

104 
ngx_buf_èg_t
 
èg
;

106 
ngx_ouçut_chaö_fûãr_±
 
ouçut_fûãr
;

107 *
fûãr_˘x
;

112 
ngx_chaö_t
 *
out
;

113 
ngx_chaö_t
 **
œ°
;

114 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

115 
ngx_poﬁ_t
 *
poﬁ
;

116 
off_t
 
limô
;

117 } 
	tngx_chaö_wrôî_˘x_t
;

120 
	#NGX_CHAIN_ERROR
 (
ngx_chaö_t
 *Ë
NGX_ERROR


	)

123 
	#ngx_buf_ö_mem‹y
(
b
Ë(b->
ãmp‹¨y
 || b->
mem‹y
 || b->
mm≠
)

	)

124 
	#ngx_buf_ö_mem‹y_⁄ly
(
b
Ë(
	`ngx_buf_ö_mem‹y
(bË&& !b->
ö_fûe
)

	)

126 
	#ngx_buf_•ecül
(
b
) \

127 ((
b
->
Êush
 || b->
œ°_buf
 || b->
sync
) \

128 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
)

	)

130 
	#ngx_buf_sync_⁄ly
(
b
) \

131 (
b
->
sync
 \

132 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
 && !b->
Êush
 && !b->
œ°_buf
)

	)

134 
	#ngx_buf_size
(
b
) \

135 (
	`ngx_buf_ö_mem‹y
(
b
Ë? (
off_t
Ë(b->
œ°
 - b->
pos
): \

136 (
b
->
fûe_œ°
 - b->
fûe_pos
))

	)

138 
ngx_buf_t
 *
	`ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

139 
ngx_chaö_t
 *
	`ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
);

142 
	#ngx_Æloc_buf
(
poﬁ
Ë
	`ngx_∑Œoc
’oﬁ, (
ngx_buf_t
))

	)

143 
	#ngx_ˇŒoc_buf
(
poﬁ
Ë
	`ngx_pˇŒoc
’oﬁ, (
ngx_buf_t
))

	)

145 
ngx_chaö_t
 *
	`ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
);

146 
	#ngx_‰ì_chaö
(
poﬁ
, 
˛
) \

147 
˛
->
√xt
 = 
poﬁ
->
chaö
; \

148 
poﬁ
->
chaö
 = 
˛


	)

152 
ngx_öt_t
 
	`ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

153 
ngx_öt_t
 
	`ngx_chaö_wrôî
(*
˘x
, 
ngx_chaö_t
 *
ö
);

155 
ngx_öt_t
 
	`ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

156 
ngx_chaö_t
 *
ö
);

157 
ngx_chaö_t
 *
	`ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
,Çgx_chaö_à**
‰ì
);

158 
	`ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,

159 
ngx_chaö_t
 **
busy
,Çgx_chaö_à**
out
, 
ngx_buf_èg_t
 
èg
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_conf_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

11 
	#NGX_CONF_BUFFER
 4096

	)

13 
ngx_öt_t
 
ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
,Çgx_öt_à
œ°
);

14 
ngx_öt_t
 
ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_comm™d_t
 
	gngx_c⁄f_comm™ds
[] = {

20 { 
ngx_°rög
("include"),

21 
NGX_ANY_CONF
|
NGX_CONF_TAKE1
,

22 
ngx_c⁄f_ö˛ude
,

25 
NULL
 },

27 
ngx_nuŒ_comm™d


31 
ngx_moduÀ_t
 
	gngx_c⁄f_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 
NULL
,

34 
ngx_c⁄f_comm™ds
,

35 
NGX_CONF_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
ngx_c⁄f_Êush_fûes
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


49 
ngx_uöt_t
 
	g¨gumít_numbî
[] = {

50 
NGX_CONF_NOARGS
,

51 
NGX_CONF_TAKE1
,

52 
NGX_CONF_TAKE2
,

53 
NGX_CONF_TAKE3
,

54 
NGX_CONF_TAKE4
,

55 
NGX_CONF_TAKE5
,

56 
NGX_CONF_TAKE6
,

57 
NGX_CONF_TAKE7


62 
	$ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
)

64 *
rv
;

65 
ngx_°r_t
 *
∑øm
;

66 
ngx_buf_t
 
b
;

67 
ngx_c⁄f_fûe_t
 
c⁄f_fûe
;

69 
∑øm
 = &
cf
->
cy˛e
->
c⁄f_∑øm
;

71 i‡(
∑øm
->
Àn
 == 0) {

72  
NGX_CONF_OK
;

75 
	`ngx_memzîo
(&
c⁄f_fûe
, (
ngx_c⁄f_fûe_t
));

77 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

79 
b
.
°¨t
 = 
∑øm
->
d©a
;

80 
b
.
pos
 = 
∑øm
->
d©a
;

81 
b
.
œ°
 = 
∑øm
->
d©a
 +Ö¨am->
Àn
;

82 
b
.
íd
 = b.
œ°
;

83 
b
.
ãmp‹¨y
 = 1;

85 
c⁄f_fûe
.
fûe
.
fd
 = 
NGX_INVALID_FILE
;

86 
c⁄f_fûe
.
fûe
.
«me
.
d©a
 = 
NULL
;

87 
c⁄f_fûe
.
löe
 = 0;

89 
cf
->
c⁄f_fûe
 = &conf_file;

90 
cf
->
c⁄f_fûe
->
buf„r
 = &
b
;

92 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

94 
cf
->
c⁄f_fûe
 = 
NULL
;

96  
rv
;

97 
	}
}

101 
	$ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
)

103 *
rv
;

104 
ngx_fd_t
 
fd
;

105 
ngx_öt_t
 
rc
;

106 
ngx_buf_t
 
buf
;

107 
ngx_c⁄f_fûe_t
 *
¥ev
, 
c⁄f_fûe
;

109 
∑r£_fûe
 = 0,

110 
∑r£_block
,

111 
∑r£_∑øm


112 } 
ty≥
;

114 #i‡(
NGX_SUPPRESS_WARN
)

115 
fd
 = 
NGX_INVALID_FILE
;

116 
¥ev
 = 
NULL
;

119 i‡(
fûíame
) {

123 
fd
 = 
	`ngx_›í_fûe
(
fûíame
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

124 i‡(
fd
 =
NGX_INVALID_FILE
) {

125 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

126 
ngx_›í_fûe_n
 " \"%s\" failed",

127 
fûíame
->
d©a
);

128  
NGX_CONF_ERROR
;

131 
¥ev
 = 
cf
->
c⁄f_fûe
;

133 
cf
->
c⁄f_fûe
 = &conf_file;

135 i‡(
	`ngx_fd_öfo
(
fd
, &
cf
->
c⁄f_fûe
->
fûe
.
öfo
Ë=
NGX_FILE_ERROR
) {

136 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 
ngx_î∫o
,

137 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûíame
->
d©a
);

140 
cf
->
c⁄f_fûe
->
buf„r
 = &
buf
;

142 
buf
.
°¨t
 = 
	`ngx_Æloc
(
NGX_CONF_BUFFER
, 
cf
->
log
);

143 i‡(
buf
.
°¨t
 =
NULL
) {

144 
Áûed
;

147 
buf
.
pos
 = buf.
°¨t
;

148 
buf
.
œ°
 = buf.
°¨t
;

149 
buf
.
íd
 = buf.
œ°
 + 
NGX_CONF_BUFFER
;

150 
buf
.
ãmp‹¨y
 = 1;

152 
cf
->
c⁄f_fûe
->
fûe
.
fd
 = fd;

153 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn
 = 
fûíame
->len;

154 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
 = 
fûíame
->data;

155 
cf
->
c⁄f_fûe
->
fûe
.
off£t
 = 0;

156 
cf
->
c⁄f_fûe
->
fûe
.
log
 = cf->log;

157 
cf
->
c⁄f_fûe
->
löe
 = 1;

159 
ty≥
 = 
∑r£_fûe
;

161 } i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

163 
ty≥
 = 
∑r£_block
;

166 
ty≥
 = 
∑r£_∑øm
;

171 
rc
 = 
	`ngx_c⁄f_ªad_tokí
(
cf
);

183 i‡(
rc
 =
NGX_ERROR
) {

184 
d⁄e
;

187 i‡(
rc
 =
NGX_CONF_BLOCK_DONE
) {

189 i‡(
ty≥
 !
∑r£_block
) {

190 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"}\"");

191 
Áûed
;

194 
d⁄e
;

197 i‡(
rc
 =
NGX_CONF_FILE_DONE
) {

199 i‡(
ty≥
 =
∑r£_block
) {

200 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

202 
Áûed
;

205 
d⁄e
;

208 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

210 i‡(
ty≥
 =
∑r£_∑øm
) {

211 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

214 
Áûed
;

220 i‡(
cf
->
h™dÀr
) {

227 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

228 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"{\"");

229 
Áûed
;

232 
rv
 = (*
cf
->
h™dÀr
)(cf, 
NULL
, cf->
h™dÀr_c⁄f
);

233 i‡(
rv
 =
NGX_CONF_OK
) {

237 i‡(
rv
 =
NGX_CONF_ERROR
) {

238 
Áûed
;

241 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, 
rv
);

243 
Áûed
;

247 
rc
 = 
	`ngx_c⁄f_h™dÀr
(
cf
,Ñc);

249 i‡(
rc
 =
NGX_ERROR
) {

250 
Áûed
;

254 
Áûed
:

256 
rc
 = 
NGX_ERROR
;

258 
d⁄e
:

260 i‡(
fûíame
) {

261 i‡(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
) {

262 
	`ngx_‰ì
(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
);

265 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

266 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

267 
ngx_˛o£_fûe_n
 " %s failed",

268 
fûíame
->
d©a
);

269  
NGX_CONF_ERROR
;

272 
cf
->
c⁄f_fûe
 = 
¥ev
;

275 i‡(
rc
 =
NGX_ERROR
) {

276  
NGX_CONF_ERROR
;

279  
NGX_CONF_OK
;

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
, 
ngx_öt_t
 
œ°
)

286 *
rv
;

287 *
c⁄f
, **
c⁄Â
;

288 
ngx_uöt_t
 
i
, 
found
;

289 
ngx_°r_t
 *
«me
;

290 
ngx_comm™d_t
 *
cmd
;

292 
«me
 = 
cf
->
¨gs
->
ñts
;

294 
found
 = 0;

296 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

298 
cmd
 = 
ngx_moduÀs
[
i
]->
comm™ds
;

299 i‡(
cmd
 =
NULL
) {

303  ; 
cmd
->
«me
.
Àn
; cmd++) {

305 i‡(
«me
->
Àn
 !
cmd
->name.len) {

309 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, 
cmd
->name.data) != 0) {

313 
found
 = 1;

315 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CONF_MODULE


316 && 
ngx_moduÀs
[
i
]->
ty≥
 !
cf
->
moduÀ_ty≥
)

323 i‡(!(
cmd
->
ty≥
 & 
cf
->
cmd_ty≥
)) {

327 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_OK
) {

328 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

330 
«me
->
d©a
);

331  
NGX_ERROR
;

334 i‡((
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_CONF_BLOCK_START
) {

335 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

337 
«me
->
d©a
);

338  
NGX_ERROR
;

343 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_ANY
)) {

345 i‡(
cmd
->
ty≥
 & 
NGX_CONF_FLAG
) {

347 i‡(
cf
->
¨gs
->
√…s
 != 2) {

348 
övÆid
;

351 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_1MORE
) {

353 i‡(
cf
->
¨gs
->
√…s
 < 2) {

354 
övÆid
;

357 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_2MORE
) {

359 i‡(
cf
->
¨gs
->
√…s
 < 3) {

360 
övÆid
;

363 } i‡(
cf
->
¨gs
->
√…s
 > 
NGX_CONF_MAX_ARGS
) {

365 
övÆid
;

367 } i‡(!(
cmd
->
ty≥
 & 
¨gumít_numbî
[
cf
->
¨gs
->
√…s
 - 1]))

369 
övÆid
;

375 
c⁄f
 = 
NULL
;

377 i‡(
cmd
->
ty≥
 & 
NGX_DIRECT_CONF
) {

378 
c⁄f
 = ((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
];

380 } i‡(
cmd
->
ty≥
 & 
NGX_MAIN_CONF
) {

381 
c⁄f
 = &(((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
]);

383 } i‡(
cf
->
˘x
) {

384 
c⁄Â
 = *(**Ë((*Ë
cf
->
˘x
 + 
cmd
->
c⁄f
);

386 i‡(
c⁄Â
) {

387 
c⁄f
 = 
c⁄Â
[
ngx_moduÀs
[
i
]->
˘x_ödex
];

391 
rv
 = 
cmd
->
	`£t
(
cf
, cmd, 
c⁄f
);

393 i‡(
rv
 =
NGX_CONF_OK
) {

394  
NGX_OK
;

397 i‡(
rv
 =
NGX_CONF_ERROR
) {

398  
NGX_ERROR
;

401 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

402 "\"%s\" dúe˘ivê%s", 
«me
->
d©a
, 
rv
);

404  
NGX_ERROR
;

408 i‡(
found
) {

409 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

410 "\"%s\" dúe˘ivêi†nŸáŒowed hîe", 
«me
->
d©a
);

412  
NGX_ERROR
;

415 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

416 "unknow¿dúe˘ivê\"%s\"", 
«me
->
d©a
);

418  
NGX_ERROR
;

420 
övÆid
:

422 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

424 
«me
->
d©a
);

426  
NGX_ERROR
;

427 
	}
}

430 
ngx_öt_t


431 
	$ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
)

433 
u_ch¨
 *
°¨t
, 
ch
, *
§c
, *
d°
;

434 
off_t
 
fûe_size
;

435 
size_t
 
Àn
;

436 
ssize_t
 
n
, 
size
;

437 
ngx_uöt_t
 
found
, 
√ed_•a˚
, 
œ°_•a˚
, 
sh¨p_commít
, 
v¨übÀ
;

438 
ngx_uöt_t
 
quŸed
, 
s_quŸed
, 
d_quŸed
, 
°¨t_löe
;

439 
ngx_°r_t
 *
w‹d
;

440 
ngx_buf_t
 *
b
;

442 
found
 = 0;

443 
√ed_•a˚
 = 0;

444 
œ°_•a˚
 = 1;

445 
sh¨p_commít
 = 0;

446 
v¨übÀ
 = 0;

447 
quŸed
 = 0;

448 
s_quŸed
 = 0;

449 
d_quŸed
 = 0;

451 
cf
->
¨gs
->
√…s
 = 0;

452 
b
 = 
cf
->
c⁄f_fûe
->
buf„r
;

453 
°¨t
 = 
b
->
pos
;

454 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

456 
fûe_size
 = 
	`ngx_fûe_size
(&
cf
->
c⁄f_fûe
->
fûe
.
öfo
);

460 i‡(
b
->
pos
 >b->
œ°
) {

462 i‡(
cf
->
c⁄f_fûe
->
fûe
.
off£t
 >
fûe_size
) {

464 i‡(
cf
->
¨gs
->
√…s
 > 0 || !
œ°_•a˚
) {

466 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

467 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

470  
NGX_ERROR
;

473 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

476  
NGX_ERROR
;

479  
NGX_CONF_FILE_DONE
;

482 
Àn
 = 
b
->
pos
 - 
°¨t
;

484 i‡(
Àn
 =
NGX_CONF_BUFFER
) {

485 
cf
->
c⁄f_fûe
->
löe
 = 
°¨t_löe
;

487 i‡(
d_quŸed
) {

488 
ch
 = '"';

490 } i‡(
s_quŸed
) {

491 
ch
 = '\'';

494 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

496 10, 
°¨t
);

497  
NGX_ERROR
;

500 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

502 "missögÅîmö©ög \"%c\" ch¨a˘î", 
ch
);

503  
NGX_ERROR
;

506 i‡(
Àn
) {

507 
	`ngx_memmove
(
b
->
°¨t
, sèπ, 
Àn
);

510 
size
 = (
ssize_t
Ë(
fûe_size
 - 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

512 i‡(
size
 > 
b
->
íd
 - (b->
°¨t
 + 
Àn
)) {

513 
size
 = 
b
->
íd
 - (b->
°¨t
 + 
Àn
);

516 
n
 = 
	`ngx_ªad_fûe
(&
cf
->
c⁄f_fûe
->
fûe
, 
b
->
°¨t
 + 
Àn
, 
size
,

517 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

519 i‡(
n
 =
NGX_ERROR
) {

520  
NGX_ERROR
;

523 i‡(
n
 !
size
) {

524 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

525 
ngx_ªad_fûe_n
 "Ñeturned "

527 
n
, 
size
);

528  
NGX_ERROR
;

531 
b
->
pos
 = b->
°¨t
 + 
Àn
;

532 
b
->
œ°
 = b->
pos
 + 
n
;

533 
°¨t
 = 
b
->start;

536 
ch
 = *
b
->
pos
++;

538 i‡(
ch
 =
LF
) {

539 
cf
->
c⁄f_fûe
->
löe
++;

541 i‡(
sh¨p_commít
) {

542 
sh¨p_commít
 = 0;

546 i‡(
sh¨p_commít
) {

550 i‡(
quŸed
) {

551 
quŸed
 = 0;

555 i‡(
√ed_•a˚
) {

556 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

557 
œ°_•a˚
 = 1;

558 
√ed_•a˚
 = 0;

562 i‡(
ch
 == ';') {

563  
NGX_OK
;

566 i‡(
ch
 == '{') {

567  
NGX_CONF_BLOCK_START
;

570 i‡(
ch
 == ')') {

571 
œ°_•a˚
 = 1;

572 
√ed_•a˚
 = 0;

575 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

576 "u√x≥˘ed \"%c\"", 
ch
);

577  
NGX_ERROR
;

581 i‡(
œ°_•a˚
) {

582 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

586 
°¨t
 = 
b
->
pos
 - 1;

587 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

589 
ch
) {

593 i‡(
cf
->
¨gs
->
√…s
 == 0) {

594 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

595 "u√x≥˘ed \"%c\"", 
ch
);

596  
NGX_ERROR
;

599 i‡(
ch
 == '{') {

600  
NGX_CONF_BLOCK_START
;

603  
NGX_OK
;

606 i‡(
cf
->
¨gs
->
√…s
 != 0) {

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

609  
NGX_ERROR
;

612  
NGX_CONF_BLOCK_DONE
;

615 
sh¨p_commít
 = 1;

619 
quŸed
 = 1;

620 
œ°_•a˚
 = 0;

624 
°¨t
++;

625 
d_quŸed
 = 1;

626 
œ°_•a˚
 = 0;

630 
°¨t
++;

631 
s_quŸed
 = 1;

632 
œ°_•a˚
 = 0;

636 
œ°_•a˚
 = 0;

640 i‡(
ch
 ='{' && 
v¨übÀ
) {

644 
v¨übÀ
 = 0;

646 i‡(
ch
 == '\\') {

647 
quŸed
 = 1;

651 i‡(
ch
 == '$') {

652 
v¨übÀ
 = 1;

656 i‡(
d_quŸed
) {

657 i‡(
ch
 == '"') {

658 
d_quŸed
 = 0;

659 
√ed_•a˚
 = 1;

660 
found
 = 1;

663 } i‡(
s_quŸed
) {

664 i‡(
ch
 == '\'') {

665 
s_quŸed
 = 0;

666 
√ed_•a˚
 = 1;

667 
found
 = 1;

670 } i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF


671 || 
ch
 == ';' || ch == '{')

673 
œ°_•a˚
 = 1;

674 
found
 = 1;

677 i‡(
found
) {

678 
w‹d
 = 
	`ngx_¨øy_push
(
cf
->
¨gs
);

679 i‡(
w‹d
 =
NULL
) {

680  
NGX_ERROR
;

683 
w‹d
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
b
->
pos
 - 
°¨t
 + 1);

684 i‡(
w‹d
->
d©a
 =
NULL
) {

685  
NGX_ERROR
;

688 
d°
 = 
w‹d
->
d©a
, 
§c
 = 
°¨t
, 
Àn
 = 0;

689 
§c
 < 
b
->
pos
 - 1;

690 
Àn
++)

692 i‡(*
§c
 == '\\') {

693 
§c
[1]) {

697 
§c
++;

701 *
d°
++ = '\t';

702 
§c
 += 2;

706 *
d°
++ = '\r';

707 
§c
 += 2;

711 *
d°
++ = '\n';

712 
§c
 += 2;

717 *
d°
++ = *
§c
++;

719 *
d°
 = '\0';

720 
w‹d
->
Àn
 =Üen;

722 i‡(
ch
 == ';') {

723  
NGX_OK
;

726 i‡(
ch
 == '{') {

727  
NGX_CONF_BLOCK_START
;

730 
found
 = 0;

734 
	}
}

738 
	$ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

740 *
rv
;

741 
ngx_öt_t
 
n
;

742 
ngx_°r_t
 *
vÆue
, 
fûe
, 
«me
;

743 
ngx_glob_t
 
gl
;

745 
vÆue
 = 
cf
->
¨gs
->
ñts
;

746 
fûe
 = 
vÆue
[1];

748 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

750 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

751  
NGX_CONF_ERROR
;

754 i‡(
	`°Ωbrk
((*Ë
fûe
.
d©a
, "*?["Ë=
NULL
) {

756 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

758  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

761 
	`ngx_memzîo
(&
gl
, (
ngx_glob_t
));

763 
gl
.
∑âîn
 = 
fûe
.
d©a
;

764 
gl
.
log
 = 
cf
->log;

765 
gl
.
ã°
 = 1;

767 i‡(
	`ngx_›í_glob
(&
gl
Ë!
NGX_OK
) {

768 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

769 
ngx_›í_glob_n
 " \"%s\" faûed", 
fûe
.
d©a
);

770  
NGX_CONF_ERROR
;

773 
rv
 = 
NGX_CONF_OK
;

776 
n
 = 
	`ngx_ªad_glob
(&
gl
, &
«me
);

778 i‡(
n
 !
NGX_OK
) {

782 
fûe
.
Àn
 = 
«me
.len++;

783 
fûe
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

785 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

787 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

789 i‡(
rv
 !
NGX_CONF_OK
) {

794 
	`ngx_˛o£_glob
(&
gl
);

796  
rv
;

797 
	}
}

800 
ngx_öt_t


801 
	$ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
c⁄f_¥efix
)

803 
ngx_°r_t
 *
¥efix
;

805 
¥efix
 = 
c⁄f_¥efix
 ? &
cy˛e
->conf_prefix : &cycle->prefix;

807  
	`ngx_gë_fuŒ_«me
(
cy˛e
->
poﬁ
, 
¥efix
, 
«me
);

808 
	}
}

811 
ngx_›í_fûe_t
 *

812 
	$ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

814 
ngx_°r_t
 
fuŒ
;

815 
ngx_uöt_t
 
i
;

816 
ngx_li°_∑π_t
 *
∑π
;

817 
ngx_›í_fûe_t
 *
fûe
;

819 #i‡(
NGX_SUPPRESS_WARN
)

820 
	`ngx_°r_nuŒ
(&
fuŒ
);

823 i‡(
«me
->
Àn
) {

824 
fuŒ
 = *
«me
;

826 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
fuŒ
, 0Ë!
NGX_OK
) {

827  
NULL
;

830 
∑π
 = &
cy˛e
->
›í_fûes
.part;

831 
fûe
 = 
∑π
->
ñts
;

833 
i
 = 0; ; i++) {

835 i‡(
i
 >
∑π
->
√…s
) {

836 i‡(
∑π
->
√xt
 =
NULL
) {

839 
∑π
 =Ö¨t->
√xt
;

840 
fûe
 = 
∑π
->
ñts
;

841 
i
 = 0;

844 i‡(
fuŒ
.
Àn
 !
fûe
[
i
].
«me
.len) {

848 i‡(
	`ngx_°rcmp
(
fuŒ
.
d©a
, 
fûe
[
i
].
«me
.data) == 0) {

849  &
fûe
[
i
];

854 
fûe
 = 
	`ngx_li°_push
(&
cy˛e
->
›í_fûes
);

855 i‡(
fûe
 =
NULL
) {

856  
NULL
;

859 i‡(
«me
->
Àn
) {

860 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

861 
fûe
->
«me
 = 
fuŒ
;

864 
fûe
->
fd
 = 
ngx_°dîr
;

865 
fûe
->
«me
 = *name;

868 
fûe
->
Êush
 = 
NULL
;

869 
fûe
->
d©a
 = 
NULL
;

871  
fûe
;

872 
	}
}

876 
	$ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
)

878 
ngx_uöt_t
 
i
;

879 
ngx_li°_∑π_t
 *
∑π
;

880 
ngx_›í_fûe_t
 *
fûe
;

882 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "flush files");

884 
∑π
 = &
cy˛e
->
›í_fûes
.part;

885 
fûe
 = 
∑π
->
ñts
;

887 
i
 = 0; ; i++) {

889 i‡(
i
 >
∑π
->
√…s
) {

890 i‡(
∑π
->
√xt
 =
NULL
) {

893 
∑π
 =Ö¨t->
√xt
;

894 
fûe
 = 
∑π
->
ñts
;

895 
i
 = 0;

898 i‡(
fûe
[
i
].
Êush
) {

899 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

902 
	}
}

905 
ngx_cde˛


906 
	$ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
, 
ngx_îr_t
 
îr
,

907 c⁄° *
fmt
, ...)

909 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
], *
p
, *
œ°
;

910 
va_li°
 
¨gs
;

912 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

914 
	`va_°¨t
(
¨gs
, 
fmt
);

915 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
, 
fmt
, 
¨gs
);

916 
	`va_íd
(
¨gs
);

918 i‡(
îr
) {

919 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

922 i‡(
cf
->
c⁄f_fûe
 =
NULL
) {

923 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s", 
p
 - 
îr°r
,Érrstr);

927 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

928 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in commandÜine",

929 
p
 - 
îr°r
,Érrstr);

933 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in %s:%ui",

934 
p
 - 
îr°r
,Érrstr,

935 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
, cf->c⁄f_fûe->
löe
);

936 
	}
}

940 
	$ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

942 *
p
 = 
c⁄f
;

944 
ngx_°r_t
 *
vÆue
;

945 
ngx_Êag_t
 *
Â
;

946 
ngx_c⁄f_po°_t
 *
po°
;

948 
Â
 = (
ngx_Êag_t
 *Ë(
p
 + 
cmd
->
off£t
);

950 i‡(*
Â
 !
NGX_CONF_UNSET
) {

954 
vÆue
 = 
cf
->
¨gs
->
ñts
;

956 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "on") == 0) {

957 *
Â
 = 1;

959 } i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "off") == 0) {

960 *
Â
 = 0;

963 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

966 
vÆue
[1].
d©a
, 
cmd
->
«me
.data);

967  
NGX_CONF_ERROR
;

970 i‡(
cmd
->
po°
) {

971 
po°
 = 
cmd
->post;

972  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
Â
);

975  
NGX_CONF_OK
;

976 
	}
}

980 
	$ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

982 *
p
 = 
c⁄f
;

984 
ngx_°r_t
 *
fõld
, *
vÆue
;

985 
ngx_c⁄f_po°_t
 *
po°
;

987 
fõld
 = (
ngx_°r_t
 *Ë(
p
 + 
cmd
->
off£t
);

989 i‡(
fõld
->
d©a
) {

993 
vÆue
 = 
cf
->
¨gs
->
ñts
;

995 *
fõld
 = 
vÆue
[1];

997 i‡(
cmd
->
po°
) {

998 
po°
 = 
cmd
->post;

999  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
fõld
);

1002  
NGX_CONF_OK
;

1003 
	}
}

1007 
	$ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1009 *
p
 = 
c⁄f
;

1011 
ngx_°r_t
 *
vÆue
, *
s
;

1012 
ngx_¨øy_t
 **
a
;

1013 
ngx_c⁄f_po°_t
 *
po°
;

1015 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1017 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1018 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_°r_t
));

1019 i‡(*
a
 =
NULL
) {

1020  
NGX_CONF_ERROR
;

1024 
s
 = 
	`ngx_¨øy_push
(*
a
);

1025 i‡(
s
 =
NULL
) {

1026  
NGX_CONF_ERROR
;

1029 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1031 *
s
 = 
vÆue
[1];

1033 i‡(
cmd
->
po°
) {

1034 
po°
 = 
cmd
->post;

1035  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
s
);

1038  
NGX_CONF_OK
;

1039 
	}
}

1043 
	$ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1045 *
p
 = 
c⁄f
;

1047 
ngx_°r_t
 *
vÆue
;

1048 
ngx_¨øy_t
 **
a
;

1049 
ngx_keyvÆ_t
 *
kv
;

1050 
ngx_c⁄f_po°_t
 *
po°
;

1052 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1054 i‡(*
a
 =
NULL
) {

1055 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_keyvÆ_t
));

1056 i‡(*
a
 =
NULL
) {

1057  
NGX_CONF_ERROR
;

1061 
kv
 = 
	`ngx_¨øy_push
(*
a
);

1062 i‡(
kv
 =
NULL
) {

1063  
NGX_CONF_ERROR
;

1066 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1068 
kv
->
key
 = 
vÆue
[1];

1069 
kv
->
vÆue
 = value[2];

1071 i‡(
cmd
->
po°
) {

1072 
po°
 = 
cmd
->post;

1073  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
kv
);

1076  
NGX_CONF_OK
;

1077 
	}
}

1081 
	$ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1083 *
p
 = 
c⁄f
;

1085 
ngx_öt_t
 *
≈
;

1086 
ngx_°r_t
 *
vÆue
;

1087 
ngx_c⁄f_po°_t
 *
po°
;

1090 
≈
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1092 i‡(*
≈
 !
NGX_CONF_UNSET
) {

1096 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1097 *
≈
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1098 i‡(*
≈
 =
NGX_ERROR
) {

1102 i‡(
cmd
->
po°
) {

1103 
po°
 = 
cmd
->post;

1104  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
≈
);

1107  
NGX_CONF_OK
;

1108 
	}
}

1112 
	$ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1114 *
p
 = 
c⁄f
;

1116 
size_t
 *
•
;

1117 
ngx_°r_t
 *
vÆue
;

1118 
ngx_c⁄f_po°_t
 *
po°
;

1121 
•
 = (
size_t
 *Ë(
p
 + 
cmd
->
off£t
);

1122 i‡(*
•
 !
NGX_CONF_UNSET_SIZE
) {

1126 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1128 *
•
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

1129 i‡(*
•
 =(
size_t
Ë
NGX_ERROR
) {

1133 i‡(
cmd
->
po°
) {

1134 
po°
 = 
cmd
->post;

1135  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1138  
NGX_CONF_OK
;

1139 
	}
}

1143 
	$ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1145 *
p
 = 
c⁄f
;

1147 
off_t
 *
›
;

1148 
ngx_°r_t
 *
vÆue
;

1149 
ngx_c⁄f_po°_t
 *
po°
;

1152 
›
 = (
off_t
 *Ë(
p
 + 
cmd
->
off£t
);

1153 i‡(*
›
 !
NGX_CONF_UNSET
) {

1157 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1159 *
›
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

1160 i‡(*
›
 =(
off_t
Ë
NGX_ERROR
) {

1164 i‡(
cmd
->
po°
) {

1165 
po°
 = 
cmd
->post;

1166  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
›
);

1169  
NGX_CONF_OK
;

1170 
	}
}

1174 
	$ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1176 *
p
 = 
c⁄f
;

1178 
ngx_m£c_t
 *
m•
;

1179 
ngx_°r_t
 *
vÆue
;

1180 
ngx_c⁄f_po°_t
 *
po°
;

1183 
m•
 = (
ngx_m£c_t
 *Ë(
p
 + 
cmd
->
off£t
);

1184 i‡(*
m•
 !
NGX_CONF_UNSET_MSEC
) {

1188 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1190 *
m•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

1191 i‡(*
m•
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1195 i‡(
cmd
->
po°
) {

1196 
po°
 = 
cmd
->post;

1197  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
m•
);

1200  
NGX_CONF_OK
;

1201 
	}
}

1205 
	$ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1207 *
p
 = 
c⁄f
;

1209 
time_t
 *
•
;

1210 
ngx_°r_t
 *
vÆue
;

1211 
ngx_c⁄f_po°_t
 *
po°
;

1214 
•
 = (
time_t
 *Ë(
p
 + 
cmd
->
off£t
);

1215 i‡(*
•
 !
NGX_CONF_UNSET
) {

1219 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1221 *
•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

1222 i‡(*
•
 =(
time_t
Ë
NGX_ERROR
) {

1226 i‡(
cmd
->
po°
) {

1227 
po°
 = 
cmd
->post;

1228  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1231  
NGX_CONF_OK
;

1232 
	}
}

1236 
	$ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1238 *
p
 = 
c⁄f
;

1240 
ngx_°r_t
 *
vÆue
;

1241 
ngx_bufs_t
 *
bufs
;

1244 
bufs
 = (
ngx_bufs_t
 *Ë(
p
 + 
cmd
->
off£t
);

1245 i‡(
bufs
->
num
) {

1249 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1251 
bufs
->
num
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1252 i‡(
bufs
->
num
 =
NGX_ERROR
 || bufs->num == 0) {

1256 
bufs
->
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

1257 i‡(
bufs
->
size
 =(
size_t
Ë
NGX_ERROR
 || bufs->size == 0) {

1261  
NGX_CONF_OK
;

1262 
	}
}

1266 
	$ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1268 *
p
 = 
c⁄f
;

1270 
ngx_uöt_t
 *
≈
, 
i
;

1271 
ngx_°r_t
 *
vÆue
;

1272 
ngx_c⁄f_íum_t
 *
e
;

1274 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1276 i‡(*
≈
 !
NGX_CONF_UNSET_UINT
) {

1280 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1281 
e
 = 
cmd
->
po°
;

1283 
i
 = 0; 
e
[i].
«me
.
Àn
 != 0; i++) {

1284 i‡(
e
[
i
].
«me
.
Àn
 !
vÆue
[1].len

1285 || 
	`ngx_°rˇ£cmp
(
e
[
i
].
«me
.
d©a
, 
vÆue
[1].data) != 0)

1290 *
≈
 = 
e
[
i
].
vÆue
;

1292  
NGX_CONF_OK
;

1295 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1296 "övÆid vÆuê\"%s\"", 
vÆue
[1].
d©a
);

1298  
NGX_CONF_ERROR
;

1299 
	}
}

1303 
	$ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1305 *
p
 = 
c⁄f
;

1307 
ngx_uöt_t
 *
≈
, 
i
, 
m
;

1308 
ngx_°r_t
 *
vÆue
;

1309 
ngx_c⁄f_bômask_t
 *
mask
;

1312 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1313 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1314 
mask
 = 
cmd
->
po°
;

1316 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1317 
m
 = 0; 
mask
[m].
«me
.
Àn
 != 0; m++) {

1319 i‡(
mask
[
m
].
«me
.
Àn
 !
vÆue
[
i
].len

1320 || 
	`ngx_°rˇ£cmp
(
mask
[
m
].
«me
.
d©a
, 
vÆue
[
i
].data) != 0)

1325 i‡(*
≈
 & 
mask
[
m
].mask) {

1326 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1327 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1330 *
≈
 |
mask
[
m
].mask;

1336 i‡(
mask
[
m
].
«me
.
Àn
 == 0) {

1337 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1338 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1340  
NGX_CONF_ERROR
;

1344  
NGX_CONF_OK
;

1345 
	}
}

1351 
	$ngx_c⁄f_unsuµ‹ãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1354 
	}
}

1360 
	$ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1362 
ngx_c⁄f_dïªˇãd_t
 *
d
 = 
po°
;

1364 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1367 
d
->
ﬁd_«me
, d->
√w_«me
);

1369  
NGX_CONF_OK
;

1370 
	}
}

1374 
	$ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1376 
ngx_c⁄f_num_bounds_t
 *
bounds
 = 
po°
;

1377 
ngx_öt_t
 *
≈
 = 
d©a
;

1379 i‡(
bounds
->
high
 == -1) {

1380 i‡(*
≈
 >
bounds
->
low
) {

1381  
NGX_CONF_OK
;

1384 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1386 
bounds
->
low
);

1388  
NGX_CONF_ERROR
;

1391 i‡(*
≈
 >
bounds
->
low
 && *≈ <bounds->
high
) {

1392  
NGX_CONF_OK
;

1395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1397 
bounds
->
low
, bounds->
high
);

1399  
NGX_CONF_ERROR
;

1400 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_conf_file.h

8 #i‚de‡
_NGX_CONF_FILE_H_INCLUDED_


9 
	#_NGX_CONF_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

22 
	#NGX_CONF_NOARGS
 0x00000001

	)

23 
	#NGX_CONF_TAKE1
 0x00000002

	)

24 
	#NGX_CONF_TAKE2
 0x00000004

	)

25 
	#NGX_CONF_TAKE3
 0x00000008

	)

26 
	#NGX_CONF_TAKE4
 0x00000010

	)

27 
	#NGX_CONF_TAKE5
 0x00000020

	)

28 
	#NGX_CONF_TAKE6
 0x00000040

	)

29 
	#NGX_CONF_TAKE7
 0x00000080

	)

31 
	#NGX_CONF_MAX_ARGS
 8

	)

33 
	#NGX_CONF_TAKE12
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
)

	)

34 
	#NGX_CONF_TAKE13
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE3
)

	)

36 
	#NGX_CONF_TAKE23
 (
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

38 
	#NGX_CONF_TAKE123
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

39 
	#NGX_CONF_TAKE1234
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
 \

40 |
NGX_CONF_TAKE4
)

	)

42 
	#NGX_CONF_ARGS_NUMBER
 0x000000ff

	)

43 
	#NGX_CONF_BLOCK
 0x00000100

	)

44 
	#NGX_CONF_FLAG
 0x00000200

	)

45 
	#NGX_CONF_ANY
 0x00000400

	)

46 
	#NGX_CONF_1MORE
 0x00000800

	)

47 
	#NGX_CONF_2MORE
 0x00001000

	)

48 
	#NGX_CONF_MULTI
 0x00000000

	)

50 
	#NGX_DIRECT_CONF
 0x00010000

	)

52 
	#NGX_MAIN_CONF
 0x01000000

	)

53 
	#NGX_ANY_CONF
 0x0F000000

	)

57 
	#NGX_CONF_UNSET
 -1

	)

58 
	#NGX_CONF_UNSET_UINT
 (
ngx_uöt_t
Ë-1

	)

59 
	#NGX_CONF_UNSET_PTR
 (*Ë-1

	)

60 
	#NGX_CONF_UNSET_SIZE
 (
size_t
Ë-1

	)

61 
	#NGX_CONF_UNSET_MSEC
 (
ngx_m£c_t
Ë-1

	)

64 
	#NGX_CONF_OK
 
NULL


	)

65 
	#NGX_CONF_ERROR
 (*Ë-1

	)

67 
	#NGX_CONF_BLOCK_START
 1

	)

68 
	#NGX_CONF_BLOCK_DONE
 2

	)

69 
	#NGX_CONF_FILE_DONE
 3

	)

71 
	#NGX_CORE_MODULE
 0x45524F43

	)

72 
	#NGX_CONF_MODULE
 0x464E4F43

	)

75 
	#NGX_MAX_CONF_ERRSTR
 1024

	)

78 
	sngx_comm™d_s
 {

79 
ngx_°r_t
 
	m«me
;

80 
ngx_uöt_t
 
	mty≥
;

81 *(*
	m£t
)(
ngx_c⁄f_t
 *
	mcf
, 
ngx_comm™d_t
 *
	mcmd
, *
	mc⁄f
);

82 
ngx_uöt_t
 
	mc⁄f
;

83 
ngx_uöt_t
 
	moff£t
;

84 *
	mpo°
;

87 
	#ngx_nuŒ_comm™d
 { 
ngx_nuŒ_°rög
, 0, 
NULL
, 0, 0, NULL }

	)

90 
	sngx_›í_fûe_s
 {

91 
ngx_fd_t
 
	mfd
;

92 
ngx_°r_t
 
	m«me
;

94 (*
	mÊush
)(
ngx_›í_fûe_t
 *
	mfûe
, 
ngx_log_t
 *
	mlog
);

95 *
	md©a
;

99 
	#NGX_MODULE_V1
 0, 0, 0, 0, 0, 0, 1

	)

100 
	#NGX_MODULE_V1_PADDING
 0, 0, 0, 0, 0, 0, 0, 0

	)

102 
	sngx_moduÀ_s
 {

103 
ngx_uöt_t
 
	m˘x_ödex
;

104 
ngx_uöt_t
 
	mödex
;

106 
ngx_uöt_t
 
	m•¨e0
;

107 
ngx_uöt_t
 
	m•¨e1
;

108 
ngx_uöt_t
 
	m•¨e2
;

109 
ngx_uöt_t
 
	m•¨e3
;

111 
ngx_uöt_t
 
	mvîsi⁄
;

113 *
	m˘x
;

114 
ngx_comm™d_t
 *
	mcomm™ds
;

115 
ngx_uöt_t
 
	mty≥
;

117 
ngx_öt_t
 (*
öô_ma°î
)(
ngx_log_t
 *
	mlog
);

119 
ngx_öt_t
 (*
öô_moduÀ
)(
ngx_cy˛e_t
 *
	mcy˛e
);

121 
ngx_öt_t
 (*
öô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

122 
ngx_öt_t
 (*
öô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

123 (*
	mexô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

124 (*
	mexô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

126 (*
	mexô_ma°î
)(
ngx_cy˛e_t
 *
	mcy˛e
);

128 
uöçå_t
 
	m•¨e_hook0
;

129 
uöçå_t
 
	m•¨e_hook1
;

130 
uöçå_t
 
	m•¨e_hook2
;

131 
uöçå_t
 
	m•¨e_hook3
;

132 
uöçå_t
 
	m•¨e_hook4
;

133 
uöçå_t
 
	m•¨e_hook5
;

134 
uöçå_t
 
	m•¨e_hook6
;

135 
uöçå_t
 
	m•¨e_hook7
;

140 
ngx_°r_t
 
	m«me
;

141 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

142 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

143 } 
	tngx_c‹e_moduÀ_t
;

147 
ngx_fûe_t
 
	mfûe
;

148 
ngx_buf_t
 *
	mbuf„r
;

149 
ngx_uöt_t
 
	mlöe
;

150 } 
	tngx_c⁄f_fûe_t
;

153 *(*
	tngx_c⁄f_h™dÀr_±
)(
	tngx_c⁄f_t
 *
	tcf
,

154 
	tngx_comm™d_t
 *
	tdummy
, *
	tc⁄f
);

157 
	sngx_c⁄f_s
 {

158 *
	m«me
;

159 
ngx_¨øy_t
 *
	m¨gs
;

161 
ngx_cy˛e_t
 *
	mcy˛e
;

162 
ngx_poﬁ_t
 *
	mpoﬁ
;

163 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

164 
ngx_c⁄f_fûe_t
 *
	mc⁄f_fûe
;

165 
ngx_log_t
 *
	mlog
;

167 *
	m˘x
;

168 
ngx_uöt_t
 
	mmoduÀ_ty≥
;

169 
ngx_uöt_t
 
	mcmd_ty≥
;

171 
ngx_c⁄f_h™dÀr_±
 
	mh™dÀr
;

172 *
	mh™dÀr_c⁄f
;

176 *(*
	tngx_c⁄f_po°_h™dÀr_±
Ë(
	tngx_c⁄f_t
 *
	tcf
,

177 *
	td©a
, *
	tc⁄f
);

180 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

181 } 
	tngx_c⁄f_po°_t
;

185 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

186 *
	mﬁd_«me
;

187 *
	m√w_«me
;

188 } 
	tngx_c⁄f_dïªˇãd_t
;

192 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

193 
ngx_öt_t
 
	mlow
;

194 
ngx_öt_t
 
	mhigh
;

195 } 
	tngx_c⁄f_num_bounds_t
;

199 
ngx_°r_t
 
	m«me
;

200 
ngx_uöt_t
 
	mvÆue
;

201 } 
	tngx_c⁄f_íum_t
;

204 
	#NGX_CONF_BITMASK_SET
 1

	)

207 
ngx_°r_t
 
	m«me
;

208 
ngx_uöt_t
 
	mmask
;

209 } 
	tngx_c⁄f_bômask_t
;

213 * 
ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

214 *
ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

217 
	#ngx_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
Ëc⁄f_˘x[moduÀ.
ödex
]

	)

221 
	#ngx_c⁄f_öô_vÆue
(
c⁄f
, ) \

222 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

223 
c⁄f
 = ; \

224 }

	)

226 
	#ngx_c⁄f_öô_±r_vÆue
(
c⁄f
, ) \

227 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

228 
c⁄f
 = ; \

229 }

	)

231 
	#ngx_c⁄f_öô_uöt_vÆue
(
c⁄f
, ) \

232 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

233 
c⁄f
 = ; \

234 }

	)

236 
	#ngx_c⁄f_öô_size_vÆue
(
c⁄f
, ) \

237 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

238 
c⁄f
 = ; \

239 }

	)

241 
	#ngx_c⁄f_öô_m£c_vÆue
(
c⁄f
, ) \

242 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

243 
c⁄f
 = ; \

244 }

	)

246 
	#ngx_c⁄f_mîge_vÆue
(
c⁄f
, 
¥ev
, ) \

247 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

248 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

249 }

	)

251 
	#ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
, 
¥ev
, ) \

252 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

253 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_PTR
) ?  :Örev; \

254 }

	)

256 
	#ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
, 
¥ev
, ) \

257 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

258 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_UINT
) ?  :Örev; \

259 }

	)

261 
	#ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
, 
¥ev
, ) \

262 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

263 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_MSEC
) ?  :Örev; \

264 }

	)

266 
	#ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
, 
¥ev
, ) \

267 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

268 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

269 }

	)

271 
	#ngx_c⁄f_mîge_size_vÆue
(
c⁄f
, 
¥ev
, ) \

272 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

273 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_SIZE
) ?  :Örev; \

274 }

	)

276 
	#ngx_c⁄f_mîge_off_vÆue
(
c⁄f
, 
¥ev
, ) \

277 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

278 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

279 }

	)

281 
	#ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
, 
¥ev
, ) \

282 i‡(
c⁄f
.
d©a
 =
NULL
) { \

283 i‡(
¥ev
.
d©a
) { \

284 
c⁄f
.
Àn
 = 
¥ev
.len; \

285 
c⁄f
.
d©a
 = 
¥ev
.data; \

287 
c⁄f
.
Àn
 = () - 1; \

288 
c⁄f
.
d©a
 = (
u_ch¨
 *) ; \

290 }

	)

292 
	#ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
, 
¥ev
, 
deÁu…_num
, 
deÁu…_size
) \

293 i‡(
c⁄f
.
num
 == 0) { \

294 i‡(
¥ev
.
num
) { \

295 
c⁄f
.
num
 = 
¥ev
.num; \

296 
c⁄f
.
size
 = 
¥ev
.size; \

298 
c⁄f
.
num
 = 
deÁu…_num
; \

299 
c⁄f
.
size
 = 
deÁu…_size
; \

301 }

	)

303 
	#ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
, 
¥ev
, ) \

304 i‡(
c⁄f
 == 0) { \

305 
c⁄f
 = (
¥ev
 == 0) ?  :Örev; \

306 }

	)

309 *
ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
);

310 *
ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

311 *
ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

314 
ngx_öt_t
 
ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
,

315 
ngx_uöt_t
 
c⁄f_¥efix
);

316 
ngx_›í_fûe_t
 *
ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

317 
ngx_cde˛
 
ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
,

318 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

321 *
ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

322 *
ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

323 *
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

324 *
c⁄f
);

325 *
ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

326 *
ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

327 *
ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

328 *
ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

329 *
ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

330 *
ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

331 *
ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

332 *
ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

333 *
ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

336 
ngx_uöt_t
 
ngx_max_moduÀ
;

337 
ngx_moduÀ_t
 *
ngx_moduÀs
[];

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_config.h

8 #i‚de‡
_NGX_CONFIG_H_INCLUDED_


9 
	#_NGX_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_auto_hódîs.h
>

15 #i‡
deföed
 
__Døg⁄Fly__
 && !deföed 
__FªeBSD__


16 
	#__FªeBSD__
 4

	)

17 
	#__FªeBSD_vîsi⁄
 480101

	)

21 #i‡(
NGX_FREEBSD
)

22 
	~<ngx_‰ìbsd_c⁄fig.h
>

25 #ñi‡(
NGX_LINUX
)

26 
	~<ngx_löux_c⁄fig.h
>

29 #ñi‡(
NGX_SOLARIS
)

30 
	~<ngx_sﬁ¨is_c⁄fig.h
>

33 #ñi‡(
NGX_DARWIN
)

34 
	~<ngx_d¨wö_c⁄fig.h
>

37 #ñi‡(
NGX_WIN32
)

38 
	~<ngx_wö32_c⁄fig.h
>

42 
	~<ngx_posix_c⁄fig.h
>

47 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


48 
	#NGX_HAVE_SO_SNDLOWAT
 1

	)

52 #i‡!(
NGX_WIN32
)

54 
	#ngx_sig«l_hñ≥r
(
n
Ë
SIG
##
	)
n

55 
	#ngx_sig«l_vÆue
(
n
Ë
	`ngx_sig«l_hñ≥r
“)

	)

57 
	#ngx_øndom
 
øndom


	)

60 
	#NGX_SHUTDOWN_SIGNAL
 
QUIT


	)

61 
	#NGX_TERMINATE_SIGNAL
 
TERM


	)

62 
	#NGX_NOACCEPT_SIGNAL
 
WINCH


	)

63 
	#NGX_RECONFIGURE_SIGNAL
 
HUP


	)

65 #i‡(
NGX_LINUXTHREADS
)

66 
	#NGX_REOPEN_SIGNAL
 
INFO


	)

67 
	#NGX_CHANGEBIN_SIGNAL
 
XCPU


	)

69 
	#NGX_REOPEN_SIGNAL
 
USR1


	)

70 
	#NGX_CHANGEBIN_SIGNAL
 
USR2


	)

73 
	#ngx_cde˛


	)

74 
	#ngx_libc_cde˛


	)

78 
öçå_t
 
	tngx_öt_t
;

79 
uöçå_t
 
	tngx_uöt_t
;

80 
öçå_t
 
	tngx_Êag_t
;

83 
	#NGX_INT32_LEN
 (("-2147483648"Ë- 1)

	)

84 
	#NGX_INT64_LEN
 (("-9223372036854775808"Ë- 1)

	)

86 #i‡(
NGX_PTR_SIZE
 == 4)

87 
	#NGX_INT_T_LEN
 
NGX_INT32_LEN


	)

89 
	#NGX_INT_T_LEN
 
NGX_INT64_LEN


	)

93 #i‚de‡
NGX_ALIGNMENT


94 
	#NGX_ALIGNMENT
 (Ë

	)

97 
	#ngx_Æign
(
d
, 
a
Ë(((dË+ (®- 1)Ë& ~◊ - 1))

	)

98 
	#ngx_Æign_±r
(
p
, 
a
) \

99 (
u_ch¨
 *Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
a
 - 1)Ë& ~((uöçå_tË®- 1))

	)

102 
	#ngx_ab‹t
 
ab‹t


	)

106 
	#NGX_INVALID_ARRAY_INDEX
 0x80000000

	)

110 #i‚de‡
ngx_ölöe


111 
	#ngx_ölöe
 
ölöe


	)

114 #i‚de‡
INADDR_NONE


115 
	#INADDR_NONE
 ((Ë-1)

	)

118 #ifde‡
MAXHOSTNAMELEN


119 
	#NGX_MAXHOSTNAMELEN
 
MAXHOSTNAMELEN


	)

121 
	#NGX_MAXHOSTNAMELEN
 256

	)

125 #i‡((
__GNU__
 =2Ë&& (
__GNUC_MINOR__
 < 8))

126 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffffLL

	)

128 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffff

	)

131 
	#NGX_MAX_INT32_VALUE
 (
uöt32_t
Ë0x7fffffff

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_connection.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_os_io_t
 
	gngx_io
;

16 
ngx_døö_c⁄√˘i⁄s
();

19 
ngx_li°íög_t
 *

20 
	$ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
, 
sockÀn_t
 
sockÀn
)

22 
size_t
 
Àn
;

23 
ngx_li°íög_t
 *
ls
;

24 
sockaddr
 *
ß
;

25 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

27 
ls
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
li°íög
);

28 i‡(
ls
 =
NULL
) {

29  
NULL
;

32 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

34 
ß
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
sockÀn
);

35 i‡(
ß
 =
NULL
) {

36  
NULL
;

39 
	`ngx_mem˝y
(
ß
, 
sockaddr
, 
sockÀn
);

41 
ls
->
sockaddr
 = 
ß
;

42 
ls
->
sockÀn
 = socklen;

44 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
sockÀn
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

45 
ls
->
addr_ãxt
.
Àn
 =Üen;

47 
ls
->
sockaddr
->
ß_Ámûy
) {

48 #i‡(
NGX_HAVE_INET6
)

49 
AF_INET6
:

50 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

53 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

54 
AF_UNIX
:

55 
ls
->
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

56 
Àn
++;

59 
AF_INET
:

60 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

63 
ls
->
addr_ãxt_max_Àn
 = 
NGX_SOCKADDR_STRLEN
;

67 
ls
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

68 i‡(
ls
->
addr_ãxt
.
d©a
 =
NULL
) {

69  
NULL
;

72 
	`ngx_mem˝y
(
ls
->
addr_ãxt
.
d©a
, 
ãxt
, 
Àn
);

74 
ls
->
fd
 = (
ngx_sockë_t
) -1;

75 
ls
->
ty≥
 = 
SOCK_STREAM
;

77 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

78 
ls
->
rcvbuf
 = -1;

79 
ls
->
¢dbuf
 = -1;

81 #i‡(
NGX_HAVE_SETFIB
)

82 
ls
->
£tfib
 = -1;

85 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

86 
ls
->
Á°›í
 = -1;

89  
ls
;

90 
	}
}

93 
ngx_öt_t


94 
	$ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

96 
size_t
 
Àn
;

97 
ngx_uöt_t
 
i
;

98 
ngx_li°íög_t
 *
ls
;

99 
sockÀn_t
 
ﬁí
;

100 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 || 
NGX_HAVE_TCP_FASTOPEN
)

101 
ngx_îr_t
 
îr
;

103 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

104 
ac˚±_fûãr_¨g
 
af
;

106 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

107 
timeout
;

110 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

111 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

113 
ls
[
i
].
sockaddr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 
NGX_SOCKADDRLEN
);

114 i‡(
ls
[
i
].
sockaddr
 =
NULL
) {

115  
NGX_ERROR
;

118 
ls
[
i
].
sockÀn
 = 
NGX_SOCKADDRLEN
;

119 i‡(
	`gësock«me
(
ls
[
i
].
fd
,Üs[i].
sockaddr
, &ls[i].
sockÀn
) == -1) {

120 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

122 "sockë #%d faûed", 
ls
[
i
].
fd
);

123 
ls
[
i
].
ign‹e
 = 1;

127 
ls
[
i
].
sockaddr
->
ß_Ámûy
) {

129 #i‡(
NGX_HAVE_INET6
)

130 
AF_INET6
:

131 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

132 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + ("[]:65535") - 1;

136 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

137 
AF_UNIX
:

138 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

139 
Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

143 
AF_INET
:

144 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

145 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

149 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

151 "™ unsuµ‹ãdÖrŸocﬁ famûy", 
ls
[
i
].
fd
);

152 
ls
[
i
].
ign‹e
 = 1;

156 
ls
[
i
].
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
);

157 i‡(
ls
[
i
].
addr_ãxt
.
d©a
 =
NULL
) {

158  
NGX_ERROR
;

161 
Àn
 = 
	`ngx_sock_¡›
(
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
,

162 
ls
[
i
].
addr_ãxt
.
d©a
, 
Àn
, 1);

163 i‡(
Àn
 == 0) {

164  
NGX_ERROR
;

167 
ls
[
i
].
addr_ãxt
.
Àn
 =Üen;

169 
ls
[
i
].
backlog
 = 
NGX_LISTEN_BACKLOG
;

171 
ﬁí
 = ();

173 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&ls[i].
rcvbuf
,

174 &
ﬁí
)

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

179 &
ls
[
i
].
addr_ãxt
);

181 
ls
[
i
].
rcvbuf
 = -1;

184 
ﬁí
 = ();

186 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&ls[i].
¢dbuf
,

187 &
ﬁí
)

190 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

192 &
ls
[
i
].
addr_ãxt
);

194 
ls
[
i
].
¢dbuf
 = -1;

200 #i‡(
NGX_HAVE_SETFIB
)

202 
ﬁí
 = ();

204 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

205 (*Ë&
ls
[
i
].
£tfib
, &
ﬁí
)

208 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

210 &
ls
[
i
].
addr_ãxt
);

212 
ls
[
i
].
£tfib
 = -1;

218 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

220 
ﬁí
 = ();

222 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_FASTOPEN
,

223 (*Ë&
ls
[
i
].
Á°›í
, &
ﬁí
)

226 
îr
 = 
ngx_sockë_î∫o
;

228 i‡(
îr
 !
NGX_EOPNOTSUPP
 &&Éº !
NGX_ENOPROTOOPT
) {

229 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

231 &
ls
[
i
].
addr_ãxt
);

234 
ls
[
i
].
Á°›í
 = -1;

239 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

241 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

242 
ﬁí
 = (
ac˚±_fûãr_¨g
);

244 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
af
, &
ﬁí
)

247 
îr
 = 
ngx_sockë_î∫o
;

249 i‡(
îr
 =
NGX_EINVAL
) {

253 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

255 &
ls
[
i
].
addr_ãxt
);

259 i‡(
ﬁí
 < (
ac˚±_fûãr_¨g
Ë|| 
af
.
af_«me
[0] == '\0') {

263 
ls
[
i
].
ac˚±_fûãr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 16);

264 i‡(
ls
[
i
].
ac˚±_fûãr
 =
NULL
) {

265  
NGX_ERROR
;

268 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
,

269 (
u_ch¨
 *Ë
af
.
af_«me
, 16);

272 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

274 
timeout
 = 0;

275 
ﬁí
 = ();

277 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
, &
timeout
, &
ﬁí
)

280 
îr
 = 
ngx_sockë_î∫o
;

282 i‡(
îr
 =
NGX_EOPNOTSUPP
) {

286 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

288 &
ls
[
i
].
addr_ãxt
);

292 i‡(
ﬁí
 < (Ë|| 
timeout
 == 0) {

296 
ls
[
i
].
de„ºed_ac˚±
 = 1;

300  
NGX_OK
;

301 
	}
}

304 
ngx_öt_t


305 
	$ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

307 
ªu£addr
;

308 
ngx_uöt_t
 
i
, 
åõs
, 
Áûed
;

309 
ngx_îr_t
 
îr
;

310 
ngx_log_t
 *
log
;

311 
ngx_sockë_t
 
s
;

312 
ngx_li°íög_t
 *
ls
;

314 
ªu£addr
 = 1;

315 #i‡(
NGX_SUPPRESS_WARN
)

316 
Áûed
 = 0;

319 
log
 = 
cy˛e
->log;

323 
åõs
 = 5;Åries;Åries--) {

324 
Áûed
 = 0;

328 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

329 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

331 i‡(
ls
[
i
].
ign‹e
) {

335 i‡(
ls
[
i
].
fd
 !(
ngx_sockë_t
) -1) {

339 i‡(
ls
[
i
].
öhîôed
) {

348 
s
 = 
	`ngx_sockë
(
ls
[
i
].
sockaddr
->
ß_Ámûy
,Üs[i].
ty≥
, 0);

350 i‡(
s
 =(
ngx_sockë_t
) -1) {

351 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

352 
ngx_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

353  
NGX_ERROR
;

356 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

357 (c⁄° *Ë&
ªu£addr
, ())

360 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

362 &
ls
[
i
].
addr_ãxt
);

364 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

365 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

366 
ngx_˛o£_sockë_n
 " %V failed",

367 &
ls
[
i
].
addr_ãxt
);

370  
NGX_ERROR
;

373 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

375 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

376 
ùv6⁄ly
;

378 
ùv6⁄ly
 = 
ls
[
i
].ipv6only;

380 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

381 (c⁄° *Ë&
ùv6⁄ly
, ())

384 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

386 &
ls
[
i
].
addr_ãxt
);

392 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
)) {

393 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

394 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

395 
ngx_n⁄blockög_n
 " %V failed",

396 &
ls
[
i
].
addr_ãxt
);

398 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

399 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

400 
ngx_˛o£_sockë_n
 " %V failed",

401 &
ls
[
i
].
addr_ãxt
);

404  
NGX_ERROR
;

408 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

409 "böd(Ë%V #%d ", &
ls
[
i
].
addr_ãxt
, 
s
);

411 i‡(
	`böd
(
s
, 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
) == -1) {

412 
îr
 = 
ngx_sockë_î∫o
;

414 i‡(
îr
 =
NGX_EADDRINUSE
 && 
ngx_ã°_c⁄fig
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

419 "böd(Ëtÿ%V faûed", &
ls
[
i
].
addr_ãxt
);

421 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

422 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

423 
ngx_˛o£_sockë_n
 " %V failed",

424 &
ls
[
i
].
addr_ãxt
);

427 i‡(
îr
 !
NGX_EADDRINUSE
) {

428  
NGX_ERROR
;

431 
Áûed
 = 1;

436 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

438 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

439 
mode_t
 
mode
;

440 
u_ch¨
 *
«me
;

442 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

443 
mode
 = (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
);

445 i‡(
	`chmod
((*Ë
«me
, 
mode
) == -1) {

446 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

447 "chmod(Ë\"%s\" faûed", 
«me
);

450 i‡(
ngx_ã°_c⁄fig
) {

451 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

452 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

453 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

459 i‡(
	`li°í
(
s
, 
ls
[
i
].
backlog
) == -1) {

460 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

462 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

464 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

465 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

466 
ngx_˛o£_sockë_n
 " %V failed",

467 &
ls
[
i
].
addr_ãxt
);

470  
NGX_ERROR
;

473 
ls
[
i
].
li°í
 = 1;

475 
ls
[
i
].
fd
 = 
s
;

478 i‡(!
Áûed
) {

484 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

487 
	`ngx_m¶ìp
(500);

490 i‡(
Áûed
) {

491 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0, "still couldÇot bind()");

492  
NGX_ERROR
;

495  
NGX_OK
;

496 
	}
}

500 
	$ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

502 
vÆue
;

503 
ngx_uöt_t
 
i
;

504 
ngx_li°íög_t
 *
ls
;

506 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

507 
ac˚±_fûãr_¨g
 
af
;

510 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

511 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

513 
ls
[
i
].
log
 = *ls[i].
logp
;

515 i‡(
ls
[
i
].
rcvbuf
 != -1) {

516 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

517 (c⁄° *Ë&
ls
[
i
].
rcvbuf
, ())

520 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

522 
ls
[
i
].
rcvbuf
, &ls[i].
addr_ãxt
);

526 i‡(
ls
[
i
].
¢dbuf
 != -1) {

527 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

528 (c⁄° *Ë&
ls
[
i
].
¢dbuf
, ())

531 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

533 
ls
[
i
].
¢dbuf
, &ls[i].
addr_ãxt
);

537 i‡(
ls
[
i
].
kì∑live
) {

538 
vÆue
 = (
ls
[
i
].
kì∑live
 == 1) ? 1 : 0;

540 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

541 (c⁄° *Ë&
vÆue
, ())

544 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

546 
vÆue
, &
ls
[
i
].
addr_ãxt
);

550 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

552 i‡(
ls
[
i
].
kìpidÀ
) {

553 
vÆue
 = 
ls
[
i
].
kìpidÀ
;

555 #i‡(
NGX_KEEPALIVE_FACTOR
)

556 
vÆue
 *
NGX_KEEPALIVE_FACTOR
;

559 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
,

560 (c⁄° *Ë&
vÆue
, ())

563 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

565 
vÆue
, &
ls
[
i
].
addr_ãxt
);

569 i‡(
ls
[
i
].
kìpötvl
) {

570 
vÆue
 = 
ls
[
i
].
kìpötvl
;

572 #i‡(
NGX_KEEPALIVE_FACTOR
)

573 
vÆue
 *
NGX_KEEPALIVE_FACTOR
;

576 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPINTVL
,

577 (c⁄° *Ë&
vÆue
, ())

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

582 
vÆue
, &
ls
[
i
].
addr_ãxt
);

586 i‡(
ls
[
i
].
kìp˙t
) {

587 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPCNT
,

588 (c⁄° *Ë&
ls
[
i
].
kìp˙t
, ())

591 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

593 
ls
[
i
].
kìp˙t
, &ls[i].
addr_ãxt
);

599 #i‡(
NGX_HAVE_SETFIB
)

600 i‡(
ls
[
i
].
£tfib
 != -1) {

601 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

602 (c⁄° *Ë&
ls
[
i
].
£tfib
, ())

605 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

607 
ls
[
i
].
£tfib
, &ls[i].
addr_ãxt
);

612 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

613 i‡(
ls
[
i
].
Á°›í
 != -1) {

614 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_FASTOPEN
,

615 (c⁄° *Ë&
ls
[
i
].
Á°›í
, ())

618 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

620 
ls
[
i
].
Á°›í
, &ls[i].
addr_ãxt
);

627 
t˝_nodñay
 = 1;

629 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

630 (c⁄° *Ë&
t˝_nodñay
, ())

633 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

635 &
ls
[
i
].
addr_ãxt
);

640 i‡(
ls
[
i
].
li°í
) {

644 i‡(
	`li°í
(
ls
[
i
].
fd
,Üs[i].
backlog
) == -1) {

645 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

647 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

656 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

658 #ifde‡
SO_ACCEPTFILTER


660 i‡(
ls
[
i
].
dñëe_de„ºed
) {

661 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, 
NULL
, 0)

664 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

667 &
ls
[
i
].
addr_ãxt
);

669 i‡(
ls
[
i
].
ac˚±_fûãr
) {

670 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

673 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

679 
ls
[
i
].
de„ºed_ac˚±
 = 0;

682 i‡(
ls
[
i
].
add_de„ºed
) {

683 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

684 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
af
.
af_«me
,

685 (
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
, 16);

687 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

688 &
af
, (
ac˚±_fûãr_¨g
))

691 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

694 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

698 
ls
[
i
].
de„ºed_ac˚±
 = 1;

703 #ifde‡
TCP_DEFER_ACCEPT


705 i‡(
ls
[
i
].
add_de„ºed
 ||Üs[i].
dñëe_de„ºed
) {

707 i‡(
ls
[
i
].
add_de„ºed
) {

714 
vÆue
 = 1;

717 
vÆue
 = 0;

720 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
,

721 &
vÆue
, ())

724 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

727 
vÆue
, &
ls
[
i
].
addr_ãxt
);

733 i‡(
ls
[
i
].
add_de„ºed
) {

734 
ls
[
i
].
de„ºed_ac˚±
 = 1;

743 
	}
}

747 
	$ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

749 
ngx_uöt_t
 
i
;

750 
ngx_li°íög_t
 *
ls
;

751 
ngx_c⁄√˘i⁄_t
 *
c
;

753 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

757 
ngx_ac˚±_muãx_hñd
 = 0;

758 
ngx_u£_ac˚±_muãx
 = 0;

760 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

761 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

763 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

765 i‡(
c
) {

766 i‡(
c
->
ªad
->
a˘ive
) {

767 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

768 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

770 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

778 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0);

781 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

785 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

787 
c
->
fd
 = (
ngx_sockë_t
) -1;

790 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

791 "˛o£Üi°íög %V #%d ", &
ls
[
i
].
addr_ãxt
,Üs[i].
fd
);

793 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

794 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

795 
ngx_˛o£_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

798 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

800 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX


801 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER


802 && 
ngx_√w_bö¨y
 == 0)

804 
u_ch¨
 *
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

806 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

807 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

808 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

814 
ls
[
i
].
fd
 = (
ngx_sockë_t
) -1;

817 
cy˛e
->
li°íög
.
√…s
 = 0;

818 
	}
}

821 
ngx_c⁄√˘i⁄_t
 *

822 
	$ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
)

824 
ngx_uöt_t
 
ö°™˚
;

825 
ngx_evít_t
 *
ªv
, *
wev
;

826 
ngx_c⁄√˘i⁄_t
 *
c
;

830 i‡(
ngx_cy˛e
->
fûes
 && (
ngx_uöt_t
Ë
s
 >ngx_cy˛e->
fûes_n
) {

831 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

834 
s
, 
ngx_cy˛e
->
fûes_n
);

835  
NULL
;

840 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

842 i‡(
c
 =
NULL
) {

843 
	`ngx_døö_c⁄√˘i⁄s
();

844 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

847 i‡(
c
 =
NULL
) {

848 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

850 
ngx_cy˛e
->
c⁄√˘i⁄_n
);

854  
NULL
;

857 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
->
d©a
;

858 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
--;

862 i‡(
ngx_cy˛e
->
fûes
) {

863 
ngx_cy˛e
->
fûes
[
s
] = 
c
;

866 
ªv
 = 
c
->
ªad
;

867 
wev
 = 
c
->
wrôe
;

869 
	`ngx_memzîo
(
c
, (
ngx_c⁄√˘i⁄_t
));

871 
c
->
ªad
 = 
ªv
;

872 
c
->
wrôe
 = 
wev
;

873 
c
->
fd
 = 
s
;

874 
c
->
log
 =Üog;

876 
ö°™˚
 = 
ªv
->instance;

878 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

879 
	`ngx_memzîo
(
wev
, (
ngx_evít_t
));

881 
ªv
->
ö°™˚
 = !instance;

882 
wev
->
ö°™˚
 = !instance;

884 
ªv
->
ödex
 = 
NGX_INVALID_INDEX
;

885 
wev
->
ödex
 = 
NGX_INVALID_INDEX
;

887 
ªv
->
d©a
 = 
c
;

888 
wev
->
d©a
 = 
c
;

890 
wev
->
wrôe
 = 1;

892  
c
;

893 
	}
}

897 
	$ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

901 
c
->
d©a
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

902 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
;

903 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
++;

907 i‡(
ngx_cy˛e
->
fûes
) {

908 
ngx_cy˛e
->
fûes
[
c
->
fd
] = 
NULL
;

910 
	}
}

914 
	$ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

916 
ngx_îr_t
 
îr
;

917 
ngx_uöt_t
 
log_îr‹
, 
Àvñ
;

918 
ngx_sockë_t
 
fd
;

920 i‡(
c
->
fd
 =(
ngx_sockë_t
) -1) {

921 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "connectionálready closed");

925 i‡(
c
->
ªad
->
timî_£t
) {

926 
	`ngx_dñ_timî
(
c
->
ªad
);

929 i‡(
c
->
wrôe
->
timî_£t
) {

930 
	`ngx_dñ_timî
(
c
->
wrôe
);

933 i‡(
ngx_dñ_c⁄n
) {

934 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

937 i‡(
c
->
ªad
->
a˘ive
 || c->ªad->
dißbÀd
) {

938 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

941 i‡(
c
->
wrôe
->
a˘ive
 || c->wrôe->
dißbÀd
) {

942 
	`ngx_dñ_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLOSE_EVENT
);

946 #i‡(
NGX_THREADS
)

954 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

956 i‡(
c
->
ªad
->
¥ev
) {

957 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

960 i‡(
c
->
wrôe
->
¥ev
) {

961 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

964 
c
->
ªad
->
˛o£d
 = 1;

965 
c
->
wrôe
->
˛o£d
 = 1;

967 
	`ngx_u∆ock
(&
c
->
lock
);

968 
c
->
ªad
->
locked
 = 0;

969 
c
->
wrôe
->
locked
 = 0;

971 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

975 i‡(
c
->
ªad
->
¥ev
) {

976 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

979 i‡(
c
->
wrôe
->
¥ev
) {

980 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

983 
c
->
ªad
->
˛o£d
 = 1;

984 
c
->
wrôe
->
˛o£d
 = 1;

988 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

990 
log_îr‹
 = 
c
->log_error;

992 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

994 
fd
 = 
c
->fd;

995 
c
->
fd
 = (
ngx_sockë_t
) -1;

997 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

999 
îr
 = 
ngx_sockë_î∫o
;

1001 i‡(
îr
 =
NGX_ECONNRESET
 ||Éº =
NGX_ENOTCONN
) {

1003 
log_îr‹
) {

1005 
NGX_ERROR_INFO
:

1006 
Àvñ
 = 
NGX_LOG_INFO
;

1009 
NGX_ERROR_ERR
:

1010 
Àvñ
 = 
NGX_LOG_ERR
;

1014 
Àvñ
 = 
NGX_LOG_CRIT
;

1018 
Àvñ
 = 
NGX_LOG_CRIT
;

1023 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 
îr
,

1024 
ngx_˛o£_sockë_n
 " %d faûed", 
fd
);

1026 
	}
}

1030 
	$ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
)

1032 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

1033 "ªußbÀ c⁄√˘i⁄: %ui", 
ªußbÀ
);

1035 i‡(
c
->
ªußbÀ
) {

1036 
	`ngx_queue_ªmove
(&
c
->
queue
);

1038 #i‡(
NGX_STAT_STUB
)

1039 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, -1);

1043 
c
->
ªußbÀ
 =Ñeusable;

1045 i‡(
ªußbÀ
) {

1048 
	`ngx_queue_ö£π_hód
(

1049 (
ngx_queue_t
 *Ë&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
, &
c
->
queue
);

1051 #i‡(
NGX_STAT_STUB
)

1052 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, 1);

1055 
	}
}

1059 
	$ngx_døö_c⁄√˘i⁄s
()

1061 
ngx_öt_t
 
i
;

1062 
ngx_queue_t
 *
q
;

1063 
ngx_c⁄√˘i⁄_t
 *
c
;

1065 
i
 = 0; i < 32; i++) {

1066 i‡(
	`ngx_queue_em±y
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
)) {

1070 
q
 = 
	`ngx_queue_œ°
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

1071 
c
 = 
	`ngx_queue_d©a
(
q
, 
ngx_c⁄√˘i⁄_t
, 
queue
);

1073 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

1076 
c
->
˛o£
 = 1;

1077 
c
->
ªad
->
	`h™dÀr
(c->read);

1079 
	}
}

1082 
ngx_öt_t


1083 
	$ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

1084 
ngx_uöt_t
 
p‹t
)

1086 
sockÀn_t
 
Àn
;

1087 
ngx_uöt_t
 
addr
;

1088 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

1089 
sockaddr_ö
 *
sö
;

1090 #i‡(
NGX_HAVE_INET6
)

1091 
ngx_uöt_t
 
i
;

1092 
sockaddr_ö6
 *
sö6
;

1095 i‡(
c
->
loˇl_sockÀn
 == 0) {

1096  
NGX_ERROR
;

1099 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

1101 #i‡(
NGX_HAVE_INET6
)

1102 
AF_INET6
:

1103 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

1105 
addr
 = 0, 
i
 = 0;áddr == 0 && i < 16; i++) {

1106 
addr
 |
sö6
->
sö6_addr
.
s6_addr
[
i
];

1112 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1113 
AF_UNIX
:

1114 
addr
 = 1;

1119 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

1120 
addr
 = 
sö
->
sö_addr
.
s_addr
;

1124 i‡(
addr
 == 0) {

1126 
Àn
 = 
NGX_SOCKADDRLEN
;

1128 i‡(
	`gësock«me
(
c
->
fd
, (
sockaddr
 *Ë&
ß
, &
Àn
) == -1) {

1129 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, "getsockname() failed");

1130  
NGX_ERROR
;

1133 
c
->
loˇl_sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
Àn
);

1134 i‡(
c
->
loˇl_sockaddr
 =
NULL
) {

1135  
NGX_ERROR
;

1138 
	`ngx_mem˝y
(
c
->
loˇl_sockaddr
, &
ß
, 
Àn
);

1140 
c
->
loˇl_sockÀn
 = 
Àn
;

1143 i‡(
s
 =
NULL
) {

1144  
NGX_OK
;

1147 
s
->
Àn
 = 
	`ngx_sock_¡›
(
c
->
loˇl_sockaddr
, c->
loˇl_sockÀn
,

1148 
s
->
d©a
, s->
Àn
, 
p‹t
);

1150  
NGX_OK
;

1151 
	}
}

1154 
ngx_öt_t


1155 
	$ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
)

1157 
ngx_uöt_t
 
Àvñ
;

1161 i‡((
îr
 =
NGX_ECONNRESET


1162 #i‡(
NGX_WIN32
)

1163 || 
îr
 =
NGX_ECONNABORTED


1165 Ë&& 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_ECONNRESET
)

1170 #i‡(
NGX_SOLARIS
)

1171 i‡(
îr
 =
NGX_EINVAL
 && 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_EINVAL
) {

1176 i‡(
îr
 == 0

1177 || 
îr
 =
NGX_ECONNRESET


1178 #i‡(
NGX_WIN32
)

1179 || 
îr
 =
NGX_ECONNABORTED


1181 || 
îr
 =
NGX_EPIPE


1183 || 
îr
 =
NGX_ENOTCONN


1184 || 
îr
 =
NGX_ETIMEDOUT


1185 || 
îr
 =
NGX_ECONNREFUSED


1186 || 
îr
 =
NGX_ENETDOWN


1187 || 
îr
 =
NGX_ENETUNREACH


1188 || 
îr
 =
NGX_EHOSTDOWN


1189 || 
îr
 =
NGX_EHOSTUNREACH
)

1191 
c
->
log_îr‹
) {

1193 
NGX_ERROR_IGNORE_EINVAL
:

1194 
NGX_ERROR_IGNORE_ECONNRESET
:

1195 
NGX_ERROR_INFO
:

1196 
Àvñ
 = 
NGX_LOG_INFO
;

1200 
Àvñ
 = 
NGX_LOG_ERR
;

1204 
Àvñ
 = 
NGX_LOG_ALERT
;

1207 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1209  
NGX_ERROR
;

1210 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_connection.h

8 #i‚de‡
_NGX_CONNECTION_H_INCLUDED_


9 
	#_NGX_CONNECTION_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°íög_s
 
	tngx_li°íög_t
;

18 
	sngx_li°íög_s
 {

19 
ngx_sockë_t
 
	mfd
;

21 
sockaddr
 *
	msockaddr
;

22 
sockÀn_t
 
	msockÀn
;

23 
size_t
 
	maddr_ãxt_max_Àn
;

24 
ngx_°r_t
 
	maddr_ãxt
;

26 
	mty≥
;

28 
	mbacklog
;

29 
	mrcvbuf
;

30 
	m¢dbuf
;

31 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

32 
	mkìpidÀ
;

33 
	mkìpötvl
;

34 
	mkìp˙t
;

38 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

40 *
	m£rvîs
;

42 
ngx_log_t
 
	mlog
;

43 
ngx_log_t
 *
	mlogp
;

45 
size_t
 
	mpoﬁ_size
;

47 
size_t
 
	mpo°_ac˚±_buf„r_size
;

49 
ngx_m£c_t
 
	mpo°_ac˚±_timeout
;

51 
ngx_li°íög_t
 *
	m¥evious
;

52 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

54 
	m›í
:1;

55 
	mªmaö
:1;

56 
	mign‹e
:1;

58 
	mbound
:1;

59 
	möhîôed
:1;

60 
	mn⁄blockög_ac˚±
:1;

61 
	mli°í
:1;

62 
	mn⁄blockög
:1;

63 
	msh¨ed
:1;

64 
	maddr_¡›
:1;

66 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

67 
	mùv6⁄ly
:1;

69 
	mkì∑live
:2;

71 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

72 
	mde„ºed_ac˚±
:1;

73 
	mdñëe_de„ºed
:1;

74 
	madd_de„ºed
:1;

75 #ifde‡
SO_ACCEPTFILTER


76 *
	mac˚±_fûãr
;

79 #i‡(
NGX_HAVE_SETFIB
)

80 
	m£tfib
;

83 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

84 
	mÁ°›í
;

91 
	mNGX_ERROR_ALERT
 = 0,

92 
	mNGX_ERROR_ERR
,

93 
	mNGX_ERROR_INFO
,

94 
	mNGX_ERROR_IGNORE_ECONNRESET
,

95 
	mNGX_ERROR_IGNORE_EINVAL


96 } 
	tngx_c⁄√˘i⁄_log_îr‹_e
;

100 
	mNGX_TCP_NODELAY_UNSET
 = 0,

101 
	mNGX_TCP_NODELAY_SET
,

102 
	mNGX_TCP_NODELAY_DISABLED


103 } 
	tngx_c⁄√˘i⁄_t˝_nodñay_e
;

107 
	mNGX_TCP_NOPUSH_UNSET
 = 0,

108 
	mNGX_TCP_NOPUSH_SET
,

109 
	mNGX_TCP_NOPUSH_DISABLED


110 } 
	tngx_c⁄√˘i⁄_t˝_n›ush_e
;

113 
	#NGX_LOWLEVEL_BUFFERED
 0x0f

	)

114 
	#NGX_SSL_BUFFERED
 0x01

	)

115 
	#NGX_SPDY_BUFFERED
 0x02

	)

118 
	sngx_c⁄√˘i⁄_s
 {

119 *
	md©a
;

120 
ngx_evít_t
 *
	mªad
;

121 
ngx_evít_t
 *
	mwrôe
;

123 
ngx_sockë_t
 
	mfd
;

125 
ngx_ªcv_±
 
	mªcv
;

126 
ngx_£nd_±
 
	m£nd
;

127 
ngx_ªcv_chaö_±
 
	mªcv_chaö
;

128 
ngx_£nd_chaö_±
 
	m£nd_chaö
;

130 
ngx_li°íög_t
 *
	mli°íög
;

132 
off_t
 
	m£¡
;

134 
ngx_log_t
 *
	mlog
;

136 
ngx_poﬁ_t
 *
	mpoﬁ
;

138 
sockaddr
 *
	msockaddr
;

139 
sockÀn_t
 
	msockÀn
;

140 
ngx_°r_t
 
	maddr_ãxt
;

142 
ngx_°r_t
 
	m¥oxy_¥Ÿocﬁ_addr
;

144 #i‡(
NGX_SSL
)

145 
ngx_s¶_c⁄√˘i⁄_t
 *
	ms¶
;

148 
sockaddr
 *
	mloˇl_sockaddr
;

149 
sockÀn_t
 
	mloˇl_sockÀn
;

151 
ngx_buf_t
 *
	mbuf„r
;

153 
ngx_queue_t
 
	mqueue
;

155 
ngx_©omic_uöt_t
 
	mnumbî
;

157 
ngx_uöt_t
 
	mªque°s
;

159 
	mbuf„ªd
:8;

161 
	mlog_îr‹
:3;

163 
	mu√x≥˘ed_eof
:1;

164 
	mtimedout
:1;

165 
	mîr‹
:1;

166 
	mde°royed
:1;

168 
	midÀ
:1;

169 
	mªußbÀ
:1;

170 
	m˛o£
:1;

172 
	m£ndfûe
:1;

173 
	m¢dlow©
:1;

174 
	mt˝_nodñay
:2;

175 
	mt˝_n›ush
:2;

177 
	m√ed_œ°_buf
:1;

179 #i‡(
NGX_HAVE_IOCP
)

180 
	mac˚±_c⁄ãxt_upd©ed
:1;

183 #i‡(
NGX_HAVE_AIO_SENDFILE
)

184 
	maio_£ndfûe
:1;

185 
	mbusy_cou¡
:2;

186 
ngx_buf_t
 *
	mbusy_£ndfûe
;

189 #i‡(
NGX_THREADS
)

190 
ngx_©omic_t
 
	mlock
;

195 
ngx_li°íög_t
 *
ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
,

196 
sockÀn_t
 
sockÀn
);

197 
ngx_öt_t
 
ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

198 
ngx_öt_t
 
ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

199 
ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

200 
ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

201 
ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

202 
ngx_öt_t
 
ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

203 
ngx_uöt_t
 
p‹t
);

204 
ngx_öt_t
 
ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
);

206 
ngx_c⁄√˘i⁄_t
 *
ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
);

207 
ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

209 
ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_core.h

8 #i‚de‡
_NGX_CORE_H_INCLUDED_


9 
	#_NGX_CORE_H_INCLUDED_


	)

12 
ngx_moduÀ_s
 
	tngx_moduÀ_t
;

13 
ngx_c⁄f_s
 
	tngx_c⁄f_t
;

14 
ngx_cy˛e_s
 
	tngx_cy˛e_t
;

15 
ngx_poﬁ_s
 
	tngx_poﬁ_t
;

16 
ngx_chaö_s
 
	tngx_chaö_t
;

17 
ngx_log_s
 
	tngx_log_t
;

18 
ngx_›í_fûe_s
 
	tngx_›í_fûe_t
;

19 
ngx_comm™d_s
 
	tngx_comm™d_t
;

20 
ngx_fûe_s
 
	tngx_fûe_t
;

21 
ngx_evít_s
 
	tngx_evít_t
;

22 
ngx_evít_aio_s
 
	tngx_evít_aio_t
;

23 
ngx_c⁄√˘i⁄_s
 
	tngx_c⁄√˘i⁄_t
;

25 (*
	tngx_evít_h™dÀr_±
)(
	tngx_evít_t
 *
	tev
);

26 (*
	tngx_c⁄√˘i⁄_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
);

29 
	#NGX_OK
 0

	)

30 
	#NGX_ERROR
 -1

	)

31 
	#NGX_AGAIN
 -2

	)

32 
	#NGX_BUSY
 -3

	)

33 
	#NGX_DONE
 -4

	)

34 
	#NGX_DECLINED
 -5

	)

35 
	#NGX_ABORT
 -6

	)

38 
	~<ngx_î∫o.h
>

39 
	~<ngx_©omic.h
>

40 
	~<ngx_thªad.h
>

41 
	~<ngx_rbåì.h
>

42 
	~<ngx_time.h
>

43 
	~<ngx_sockë.h
>

44 
	~<ngx_°rög.h
>

45 
	~<ngx_fûes.h
>

46 
	~<ngx_shmem.h
>

47 
	~<ngx_¥o˚ss.h
>

48 
	~<ngx_u£r.h
>

49 
	~<ngx_∑r£.h
>

50 
	~<ngx_log.h
>

51 
	~<ngx_Æloc.h
>

52 
	~<ngx_∑Œoc.h
>

53 
	~<ngx_buf.h
>

54 
	~<ngx_queue.h
>

55 
	~<ngx_¨øy.h
>

56 
	~<ngx_li°.h
>

57 
	~<ngx_hash.h
>

58 
	~<ngx_fûe.h
>

59 
	~<ngx_¸c.h
>

60 
	~<ngx_¸c32.h
>

61 
	~<ngx_murmurhash.h
>

62 #i‡(
NGX_PCRE
)

63 
	~<ngx_ªgex.h
>

65 
	~<ngx_ødix_åì.h
>

66 
	~<ngx_times.h
>

67 
	~<ngx_shmtx.h
>

68 
	~<ngx_¶ab.h
>

69 
	~<ngx_öë.h
>

70 
	~<ngx_cy˛e.h
>

71 
	~<ngx_ªsﬁvî.h
>

72 #i‡(
NGX_OPENSSL
)

73 
	~<ngx_evít_›ís¶.h
>

75 
	~<ngx_¥o˚ss_cy˛e.h
>

76 
	~<ngx_c⁄f_fûe.h
>

77 
	~<ngx_›í_fûe_ˇche.h
>

78 
	~<ngx_os.h
>

79 
	~<ngx_c⁄√˘i⁄.h
>

80 
	~<ngx_¥oxy_¥Ÿocﬁ.h
>

83 
	#LF
 (
u_ch¨
Ë10

	)

84 
	#CR
 (
u_ch¨
Ë13

	)

85 
	#CRLF
 "\x0d\x0a"

	)

88 
	#ngx_abs
(
vÆue
Ë(((vÆueË>0Ë? (vÆueË: - (vÆue))

	)

89 
	#ngx_max
(
vÆ1
, 
vÆ2
Ë((vÆ1 < vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

90 
	#ngx_mö
(
vÆ1
, 
vÆ2
Ë((vÆ1 > vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

92 
	`ngx_˝uöfo
();

94 #i‡(
NGX_HAVE_OPENAT
)

95 
	#NGX_DISABLE_SYMLINKS_OFF
 0

	)

96 
	#NGX_DISABLE_SYMLINKS_ON
 1

	)

97 
	#NGX_DISABLE_SYMLINKS_NOTOWNER
 2

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_cpuinfo.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(–
__i386__
 || 
__amd64__
 ) && ( 
__GNUC__
 || 
__INTEL_COMPILER
 ))

15 
ngx_ölöe
 
ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
);

18 #i‡–
__i386__
 )

20 
ngx_ölöe
 

21 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

30 
	`__asm__
 (

42 : : "a" (
i
), "D" (
buf
) : "ecx", "edx", "esi", "memory" );

43 
	}
}

49 
ngx_ölöe
 

50 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

52 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

54 
	`__asm__
 (

58 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
Ë: "a" (
i
) );

60 
buf
[0] = 
óx
;

61 
buf
[1] = 
ebx
;

62 
buf
[2] = 
edx
;

63 
buf
[3] = 
ecx
;

64 
	}
}

73 
	$ngx_˝uöfo
()

75 
u_ch¨
 *
víd‹
;

76 
uöt32_t
 
vbuf
[5], 
˝u
[4], 
modñ
;

78 
vbuf
[0] = 0;

79 
vbuf
[1] = 0;

80 
vbuf
[2] = 0;

81 
vbuf
[3] = 0;

82 
vbuf
[4] = 0;

84 
	`ngx_˝uid
(0, 
vbuf
);

86 
víd‹
 = (
u_ch¨
 *Ë&
vbuf
[1];

88 i‡(
vbuf
[0] == 0) {

92 
	`ngx_˝uid
(1, 
˝u
);

94 i‡(
	`ngx_°rcmp
(
víd‹
, "GenuineIntel") == 0) {

96 (
˝u
[0] & 0xf00) >> 8) {

100 
ngx_ˇchñöe_size
 = 32;

105 
ngx_ˇchñöe_size
 = 32;

107 
modñ
 = ((
˝u
[0] & 0xf0000) >> 8) | (cpu[0] & 0xf0);

109 i‡(
modñ
 >= 0xd0) {

111 
ngx_ˇchñöe_size
 = 64;

121 
ngx_ˇchñöe_size
 = 128;

125 } i‡(
	`ngx_°rcmp
(
víd‹
, "AuthenticAMD") == 0) {

126 
ngx_ˇchñöe_size
 = 64;

128 
	}
}

134 
	$ngx_˝uöfo
()

136 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crc.h

8 #i‚de‡
_NGX_CRC_H_INCLUDED_


9 
	#_NGX_CRC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
uöt32_t


19 
	$ngx_¸c
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

21 
uöt32_t
 
sum
;

23 
sum
 = 0; 
Àn
;Üen--) {

30 
sum
 = sum >> 1 | sum << 31;

32 
sum
 +*
d©a
++;

35  
sum
;

36 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crc32.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

26 
uöt32_t
 
	gngx_¸c32_èbÀ16
[] = {

34 
uöt32_t
 
	gngx_¸c32_èbÀ256
[] = {

102 
uöt32_t
 *
	gngx_¸c32_èbÀ_sh‹t
 = 
ngx_¸c32_èbÀ16
;

105 
ngx_öt_t


106 
	$ngx_¸c32_èbÀ_öô
()

108 *
p
;

110 i‡(((
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t


111 & ~((
uöçå_t
Ë
ngx_ˇchñöe_size
 - 1))

112 =(
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t
)

114  
NGX_OK
;

117 
p
 = 
	`ngx_Æloc
(16 * (
uöt32_t
Ë+ 
ngx_ˇchñöe_size
, 
ngx_cy˛e
->
log
);

118 i‡(
p
 =
NULL
) {

119  
NGX_ERROR
;

122 
p
 = 
	`ngx_Æign_±r
’, 
ngx_ˇchñöe_size
);

124 
	`ngx_mem˝y
(
p
, 
ngx_¸c32_èbÀ16
, 16 * (
uöt32_t
));

126 
ngx_¸c32_èbÀ_sh‹t
 = 
p
;

128  
NGX_OK
;

129 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crc32.h

8 #i‚de‡
_NGX_CRC32_H_INCLUDED_


9 
	#_NGX_CRC32_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 *
ngx_¸c32_èbÀ_sh‹t
;

17 
uöt32_t
 
ngx_¸c32_èbÀ256
[];

20 
ngx_ölöe
 
uöt32_t


21 
	$ngx_¸c32_sh‹t
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

23 
u_ch¨
 
c
;

24 
uöt32_t
 
¸c
;

26 
¸c
 = 0xffffffff;

28 
Àn
--) {

29 
c
 = *
p
++;

30 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 & 0xf)) & 0xf] ^ (crc >> 4);

31 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 >> 4)) & 0xf] ^ (crc >> 4);

34  
¸c
 ^ 0xffffffff;

35 
	}
}

38 
ngx_ölöe
 
uöt32_t


39 
	$ngx_¸c32_l⁄g
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

41 
uöt32_t
 
¸c
;

43 
¸c
 = 0xffffffff;

45 
Àn
--) {

46 
¸c
 = 
ngx_¸c32_èbÀ256
[(¸¯^ *
p
++) & 0xff] ^ (crc >> 8);

49  
¸c
 ^ 0xffffffff;

50 
	}
}

53 
	#ngx_¸c32_öô
(
¸c
) \

54 
¸c
 = 0xffffffff

	)

57 
ngx_ölöe
 

58 
	$ngx_¸c32_upd©e
(
uöt32_t
 *
¸c
, 
u_ch¨
 *
p
, 
size_t
 
Àn
)

60 
uöt32_t
 
c
;

62 
c
 = *
¸c
;

64 
Àn
--) {

65 
c
 = 
ngx_¸c32_èbÀ256
[(¯^ *
p
++) & 0xff] ^ (c >> 8);

68 *
¸c
 = 
c
;

69 
	}
}

72 
	#ngx_¸c32_föÆ
(
¸c
) \

73 
¸c
 ^0xffffffff

	)

76 
ngx_öt_t
 
ngx_¸c32_èbÀ_öô
();

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crypt.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_¸y±.h
>

10 
	~<ngx_md5.h
>

11 #i‡(
NGX_HAVE_SHA1
)

12 
	~<ngx_sha1.h
>

16 #i‡(
NGX_CRYPT
)

18 
ngx_öt_t
 
ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

19 
u_ch¨
 **
í¸y±ed
);

20 
ngx_öt_t
 
ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

23 #i‡(
NGX_HAVE_SHA1
)

25 
ngx_öt_t
 
ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

26 
u_ch¨
 **
í¸y±ed
);

27 
ngx_öt_t
 
ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

28 
u_ch¨
 **
í¸y±ed
);

33 
u_ch¨
 *
ngx_¸y±_to64
(u_ch¨ *
p
, 
uöt32_t
 
v
, 
size_t
 
n
);

36 
ngx_öt_t


37 
	$ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

39 i‡(
	`ngx_°∫cmp
(
ß…
, "$apr1$", ("$apr1$") - 1) == 0) {

40  
	`ngx_¸y±_≠r1
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

42 } i‡(
	`ngx_°∫cmp
(
ß…
, "{PLAIN}", ("{PLAIN}") - 1) == 0) {

43  
	`ngx_¸y±_∂aö
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

45 #i‡(
NGX_HAVE_SHA1
)

46 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SSHA}", ("{SSHA}") - 1) == 0) {

47  
	`ngx_¸y±_ssha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

49 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SHA}", ("{SHA}") - 1) == 0) {

50  
	`ngx_¸y±_sha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

56  
	`ngx_libc_¸y±
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

57 
	}
}

60 
ngx_öt_t


61 
	$ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

63 
ngx_öt_t
 
n
;

64 
ngx_uöt_t
 
i
;

65 
u_ch¨
 *
p
, *
œ°
, 
föÆ
[16];

66 
size_t
 
ß…Àn
, 
keyÀn
;

67 
ngx_md5_t
 
md5
, 
˘x1
;

71 
keyÀn
 = 
	`ngx_°æí
(
key
);

75 
ß…
 += ("$apr1$") - 1;

76 
œ°
 = 
ß…
 + 8;

77 
p
 = 
ß…
; *∞&& *∞!'$' &&Ö < 
œ°
;Ö++) { }

78 
ß…Àn
 = 
p
 - 
ß…
;

82 
	`ngx_md5_öô
(&
md5
);

83 
	`ngx_md5_upd©e
(&
md5
, 
key
, 
keyÀn
);

84 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) "$apr1$", ("$apr1$") - 1);

85 
	`ngx_md5_upd©e
(&
md5
, 
ß…
, 
ß…Àn
);

87 
	`ngx_md5_öô
(&
˘x1
);

88 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

89 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

90 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

91 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

93 
n
 = 
keyÀn
;Ç > 0;Ç -= 16) {

94 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 
n
 > 16 ? 16 :Ç);

97 
	`ngx_memzîo
(
föÆ
, (final));

99 
i
 = 
keyÀn
; i; i >>= 1) {

100 i‡(
i
 & 1) {

101 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 1);

104 
	`ngx_md5_upd©e
(&
md5
, 
key
, 1);

108 
	`ngx_md5_föÆ
(
föÆ
, &
md5
);

110 
i
 = 0; i < 1000; i++) {

111 
	`ngx_md5_öô
(&
˘x1
);

113 i‡(
i
 & 1) {

114 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

117 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

120 i‡(
i
 % 3) {

121 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

124 i‡(
i
 % 7) {

125 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

128 i‡(
i
 & 1) {

129 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

132 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

135 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

140 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("$≠r1$"Ë- 1 + 
ß…Àn
 + 1 + 22 + 1);

141 i‡(*
í¸y±ed
 =
NULL
) {

142  
NGX_ERROR
;

145 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "$apr1$", ("$apr1$") - 1);

146 
p
 = 
	`ngx_c›y
’, 
ß…
, 
ß…Àn
);

147 *
p
++ = '$';

149 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 0]<<16) | (final[ 6]<<8) | final[12], 4);

150 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 1]<<16) | (final[ 7]<<8) | final[13], 4);

151 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 2]<<16) | (final[ 8]<<8) | final[14], 4);

152 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 3]<<16) | (final[ 9]<<8) | final[15], 4);

153 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 4]<<16) | (final[10]<<8) | final[ 5], 4);

154 
p
 = 
	`ngx_¸y±_to64
’, 
föÆ
[11], 2);

155 *
p
 = '\0';

157  
NGX_OK
;

158 
	}
}

161 
u_ch¨
 *

162 
	$ngx_¸y±_to64
(
u_ch¨
 *
p
, 
uöt32_t
 
v
, 
size_t
 
n
)

164 
u_ch¨
 
ôﬂ64
[] =

167 
n
--) {

168 *
p
++ = 
ôﬂ64
[
v
 & 0x3f];

169 
v
 >>= 6;

172  
p
;

173 
	}
}

176 
ngx_öt_t


177 
	$ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

179 
size_t
 
Àn
;

180 
u_ch¨
 *
p
;

182 
Àn
 = 
	`ngx_°æí
(
key
);

184 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("{PLAIN}"Ë- 1 + 
Àn
 + 1);

185 i‡(*
í¸y±ed
 =
NULL
) {

186  
NGX_ERROR
;

189 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{PLAIN}", ("{PLAIN}") - 1);

190 
	`ngx_mem˝y
(
p
, 
key
, 
Àn
 + 1);

192  
NGX_OK
;

193 
	}
}

196 #i‡(
NGX_HAVE_SHA1
)

198 
ngx_öt_t


199 
	$ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

201 
size_t
 
Àn
;

202 
ngx_öt_t
 
rc
;

203 
ngx_°r_t
 
ícoded
, 
decoded
;

204 
ngx_sha1_t
 
sha1
;

210 
ícoded
.
d©a
 = 
ß…
 + ("{SSHA}") - 1;

211 
ícoded
.
Àn
 = 
	`ngx_°æí
”ncoded.
d©a
);

213 
Àn
 = 
	`ngx_max
(
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len), 20);

215 
decoded
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

216 i‡(
decoded
.
d©a
 =
NULL
) {

217  
NGX_ERROR
;

220 
rc
 = 
	`ngx_decode_ba£64
(&
decoded
, &
ícoded
);

222 i‡(
rc
 !
NGX_OK
 || 
decoded
.
Àn
 < 20) {

223 
decoded
.
Àn
 = 20;

228 
	`ngx_sha1_öô
(&
sha1
);

229 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

230 
	`ngx_sha1_upd©e
(&
sha1
, 
decoded
.
d©a
 + 20, decoded.
Àn
 - 20);

231 
	`ngx_sha1_föÆ
(
decoded
.
d©a
, &
sha1
);

235 
Àn
 = ("{SSHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

237 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

238 i‡(*
í¸y±ed
 =
NULL
) {

239  
NGX_ERROR
;

242 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SSHA}", ("{SSHA}") - 1);

243 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

244 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

246  
NGX_OK
;

247 
	}
}

250 
ngx_öt_t


251 
	$ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

253 
size_t
 
Àn
;

254 
ngx_°r_t
 
ícoded
, 
decoded
;

255 
ngx_sha1_t
 
sha1
;

256 
u_ch¨
 
dige°
[20];

260 
decoded
.
Àn
 = (
dige°
);

261 
decoded
.
d©a
 = 
dige°
;

263 
	`ngx_sha1_öô
(&
sha1
);

264 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

265 
	`ngx_sha1_föÆ
(
dige°
, &
sha1
);

267 
Àn
 = ("{SHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

269 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

270 i‡(*
í¸y±ed
 =
NULL
) {

271  
NGX_ERROR
;

274 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SHA}", ("{SHA}") - 1);

275 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

276 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

278  
NGX_OK
;

279 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crypt.h

8 #i‚de‡
_NGX_CRYPT_H_INCLUDED_


9 
	#_NGX_CRYPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_öt_t
 
ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
);

14 
ngx_öt_t
 
ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
,

15 
ngx_shm_z⁄e_t
 *
shm_z⁄e
);

16 
ngx_öt_t
 
ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
);

17 
ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
);

20 vﬁ©ûê
ngx_cy˛e_t
 *
	gngx_cy˛e
;

21 
ngx_¨øy_t
 
	gngx_ﬁd_cy˛es
;

23 
ngx_poﬁ_t
 *
	gngx_ãmp_poﬁ
;

24 
ngx_evít_t
 
	gngx_˛ó√r_evít
;

26 
ngx_uöt_t
 
	gngx_ã°_c⁄fig
;

27 
ngx_uöt_t
 
	gngx_quõt_mode
;

29 #i‡(
NGX_THREADS
)

30 
ngx_és_key_t
 
	gngx_c‹e_és_key
;

35 
ngx_c⁄√˘i⁄_t
 
	gdumb
;

39 
ngx_cy˛e_t
 *

40 
	$ngx_öô_cy˛e
(
ngx_cy˛e_t
 *
ﬁd_cy˛e
)

42 *
rv
;

43 **
£nv
, **
ív
;

44 
ngx_uöt_t
 
i
, 
n
;

45 
ngx_log_t
 *
log
;

46 
ngx_time_t
 *
ç
;

47 
ngx_c⁄f_t
 
c⁄f
;

48 
ngx_poﬁ_t
 *
poﬁ
;

49 
ngx_cy˛e_t
 *
cy˛e
, **
ﬁd
;

50 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
oshm_z⁄e
;

51 
ngx_li°_∑π_t
 *
∑π
, *
›¨t
;

52 
ngx_›í_fûe_t
 *
fûe
;

53 
ngx_li°íög_t
 *
ls
, *
∆s
;

54 
ngx_c‹e_c⁄f_t
 *
ccf
, *
ﬁd_ccf
;

55 
ngx_c‹e_moduÀ_t
 *
moduÀ
;

56 
ho°«me
[
NGX_MAXHOSTNAMELEN
];

58 
	`ngx_timez⁄e_upd©e
();

62 
ç
 = 
	`ngx_timeofday
();

63 
ç
->
£c
 = 0;

65 
	`ngx_time_upd©e
();

68 
log
 = 
ﬁd_cy˛e
->log;

70 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

71 i‡(
poﬁ
 =
NULL
) {

72  
NULL
;

74 
poﬁ
->
log
 =Üog;

76 
cy˛e
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_cy˛e_t
));

77 i‡(
cy˛e
 =
NULL
) {

78 
	`ngx_de°roy_poﬁ
(
poﬁ
);

79  
NULL
;

82 
cy˛e
->
poﬁ
 =Öool;

83 
cy˛e
->
log
 =Üog;

84 
cy˛e
->
ﬁd_cy˛e
 = old_cycle;

86 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
ﬁd_cy˛e
->conf_prefix.len;

87 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_prefix);

88 i‡(
cy˛e
->
c⁄f_¥efix
.
d©a
 =
NULL
) {

89 
	`ngx_de°roy_poﬁ
(
poﬁ
);

90  
NULL
;

93 
cy˛e
->
¥efix
.
Àn
 = 
ﬁd_cy˛e
->prefix.len;

94 
cy˛e
->
¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->prefix);

95 i‡(
cy˛e
->
¥efix
.
d©a
 =
NULL
) {

96 
	`ngx_de°roy_poﬁ
(
poﬁ
);

97  
NULL
;

100 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
ﬁd_cy˛e
->conf_file.len;

101 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ﬁd_cy˛e
->c⁄f_fûe.
Àn
 + 1);

102 i‡(
cy˛e
->
c⁄f_fûe
.
d©a
 =
NULL
) {

103 
	`ngx_de°roy_poﬁ
(
poﬁ
);

104  
NULL
;

106 
	`ngx_˝y°∫
(
cy˛e
->
c⁄f_fûe
.
d©a
, 
ﬁd_cy˛e
->conf_file.data,

107 
ﬁd_cy˛e
->
c⁄f_fûe
.
Àn
 + 1);

109 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
ﬁd_cy˛e
->conf_param.len;

110 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_param);

111 i‡(
cy˛e
->
c⁄f_∑øm
.
d©a
 =
NULL
) {

112 
	`ngx_de°roy_poﬁ
(
poﬁ
);

113  
NULL
;

117 
n
 = 
ﬁd_cy˛e
->
∑ths
.
√…s
 ? old_cycle->paths.nelts : 10;

119 
cy˛e
->
∑ths
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_∑th_t
 *));

120 i‡(
cy˛e
->
∑ths
.
ñts
 =
NULL
) {

121 
	`ngx_de°roy_poﬁ
(
poﬁ
);

122  
NULL
;

125 
cy˛e
->
∑ths
.
√…s
 = 0;

126 
cy˛e
->
∑ths
.
size
 = (
ngx_∑th_t
 *);

127 
cy˛e
->
∑ths
.
«Œoc
 = 
n
;

128 
cy˛e
->
∑ths
.
poﬁ
 =Öool;

131 i‡(
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
) {

132 
n
 = 
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
;

133 
∑π
 = 
ﬁd_cy˛e
->
›í_fûes
.∑π.
√xt
;Öart;Öart =Öart->next) {

134 
n
 +
∑π
->
√…s
;

138 
n
 = 20;

141 i‡(
	`ngx_li°_öô
(&
cy˛e
->
›í_fûes
, 
poﬁ
, 
n
, (
ngx_›í_fûe_t
))

142 !
NGX_OK
)

144 
	`ngx_de°roy_poﬁ
(
poﬁ
);

145  
NULL
;

149 i‡(
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
) {

150 
n
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
;

151 
∑π
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.∑π.
√xt
;Öart;Öart =Öart->next)

153 
n
 +
∑π
->
√…s
;

157 
n
 = 1;

160 i‡(
	`ngx_li°_öô
(&
cy˛e
->
sh¨ed_mem‹y
, 
poﬁ
, 
n
, (
ngx_shm_z⁄e_t
))

161 !
NGX_OK
)

163 
	`ngx_de°roy_poﬁ
(
poﬁ
);

164  
NULL
;

167 
n
 = 
ﬁd_cy˛e
->
li°íög
.
√…s
 ? old_cycle->listening.nelts : 10;

169 
cy˛e
->
li°íög
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_li°íög_t
));

170 i‡(
cy˛e
->
li°íög
.
ñts
 =
NULL
) {

171 
	`ngx_de°roy_poﬁ
(
poﬁ
);

172  
NULL
;

175 
cy˛e
->
li°íög
.
√…s
 = 0;

176 
cy˛e
->
li°íög
.
size
 = (
ngx_li°íög_t
);

177 
cy˛e
->
li°íög
.
«Œoc
 = 
n
;

178 
cy˛e
->
li°íög
.
poﬁ
 =Öool;

181 
	`ngx_queue_öô
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

184 
cy˛e
->
c⁄f_˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
ngx_max_moduÀ
 * (*));

185 i‡(
cy˛e
->
c⁄f_˘x
 =
NULL
) {

186 
	`ngx_de°roy_poﬁ
(
poﬁ
);

187  
NULL
;

191 i‡(
	`gëho°«me
(
ho°«me
, 
NGX_MAXHOSTNAMELEN
) == -1) {

192 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "gethostname() failed");

193 
	`ngx_de°roy_poﬁ
(
poﬁ
);

194  
NULL
;

199 
ho°«me
[
NGX_MAXHOSTNAMELEN
 - 1] = '\0';

200 
cy˛e
->
ho°«me
.
Àn
 = 
	`ngx_°æí
(hostname);

202 
cy˛e
->
ho°«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, cy˛e->ho°«me.
Àn
);

203 i‡(
cy˛e
->
ho°«me
.
d©a
 =
NULL
) {

204 
	`ngx_de°roy_poﬁ
(
poﬁ
);

205  
NULL
;

208 
	`ngx_°æow
(
cy˛e
->
ho°«me
.
d©a
, (
u_ch¨
 *Ëho°«me, cy˛e->ho°«me.
Àn
);

211 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

212 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

216 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

218 i‡(
moduÀ
->
¸óã_c⁄f
) {

219 
rv
 = 
moduÀ
->
	`¸óã_c⁄f
(
cy˛e
);

220 i‡(
rv
 =
NULL
) {

221 
	`ngx_de°roy_poﬁ
(
poﬁ
);

222  
NULL
;

224 
cy˛e
->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
] = 
rv
;

229 
£nv
 = 
ívú⁄
;

232 
	`ngx_memzîo
(&
c⁄f
, (
ngx_c⁄f_t
));

234 
c⁄f
.
¨gs
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 10, (
ngx_°r_t
));

235 i‡(
c⁄f
.
¨gs
 =
NULL
) {

236 
	`ngx_de°roy_poﬁ
(
poﬁ
);

237  
NULL
;

240 
c⁄f
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

241 i‡(
c⁄f
.
ãmp_poﬁ
 =
NULL
) {

242 
	`ngx_de°roy_poﬁ
(
poﬁ
);

243  
NULL
;

247 
c⁄f
.
˘x
 = 
cy˛e
->
c⁄f_˘x
;

248 
c⁄f
.
cy˛e
 = cycle;

249 
c⁄f
.
poﬁ
 =Öool;

250 
c⁄f
.
log
 =Üog;

251 
c⁄f
.
moduÀ_ty≥
 = 
NGX_CORE_MODULE
;

252 
c⁄f
.
cmd_ty≥
 = 
NGX_MAIN_CONF
;

255 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

258 i‡(
	`ngx_c⁄f_∑øm
(&
c⁄f
Ë!
NGX_CONF_OK
) {

259 
ívú⁄
 = 
£nv
;

260 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

261  
NULL
;

264 i‡(
	`ngx_c⁄f_∑r£
(&
c⁄f
, &
cy˛e
->
c⁄f_fûe
Ë!
NGX_CONF_OK
) {

265 
ívú⁄
 = 
£nv
;

266 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

267  
NULL
;

270 i‡(
ngx_ã°_c⁄fig
 && !
ngx_quõt_mode
) {

271 
	`ngx_log_°dîr
(0, "the configuration file %s syntax is ok",

272 
cy˛e
->
c⁄f_fûe
.
d©a
);

275 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

276 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

280 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

282 i‡(
moduÀ
->
öô_c⁄f
) {

283 i‡(
moduÀ
->
	`öô_c⁄f
(
cy˛e
, cy˛e->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
])

284 =
NGX_CONF_ERROR
)

286 
ívú⁄
 = 
£nv
;

287 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

288  
NULL
;

293 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SIGNALLER
) {

294  
cy˛e
;

297 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

299 i‡(
ngx_ã°_c⁄fig
) {

301 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

302 
Áûed
;

305 } i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

312 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

313 
ngx_c‹e_moduÀ
);

314 i‡(
ccf
->
pid
.
Àn
 !
ﬁd_ccf
->pid.len

315 || 
	`ngx_°rcmp
(
ccf
->
pid
.
d©a
, 
ﬁd_ccf
->pid.data) != 0)

319 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

320 
Áûed
;

323 
	`ngx_dñëe_pidfûe
(
ﬁd_cy˛e
);

328 i‡(
	`ngx_ã°_lockfûe
(
cy˛e
->
lock_fûe
.
d©a
, 
log
Ë!
NGX_OK
) {

329 
Áûed
;

333 i‡(
	`ngx_¸óã_∑ths
(
cy˛e
, 
ccf
->
u£r
Ë!
NGX_OK
) {

334 
Áûed
;

338 i‡(
	`ngx_log_›í_deÁu…
(
cy˛e
Ë!
NGX_OK
) {

339 
Áûed
;

344 
∑π
 = &
cy˛e
->
›í_fûes
.part;

345 
fûe
 = 
∑π
->
ñts
;

347 
i
 = 0; ; i++) {

349 i‡(
i
 >
∑π
->
√…s
) {

350 i‡(
∑π
->
√xt
 =
NULL
) {

353 
∑π
 =Ö¨t->
√xt
;

354 
fûe
 = 
∑π
->
ñts
;

355 
i
 = 0;

358 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

362 
fûe
[
i
].
fd
 = 
	`ngx_›í_fûe
(fûe[i].
«me
.
d©a
,

363 
NGX_FILE_APPEND
,

364 
NGX_FILE_CREATE_OR_OPEN
,

365 
NGX_FILE_DEFAULT_ACCESS
);

367 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

369 &
fûe
[
i
], fûe[i].
fd
, fûe[i].
«me
.
d©a
);

371 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

373 
ngx_›í_fûe_n
 " \"%s\" failed",

374 
fûe
[
i
].
«me
.
d©a
);

375 
Áûed
;

378 #i‡!(
NGX_WIN32
)

379 i‡(
	`f˙é
(
fûe
[
i
].
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

380 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

382 
fûe
[
i
].
«me
.
d©a
);

383 
Áûed
;

388 
cy˛e
->
log
 = &cy˛e->
√w_log
;

389 
poﬁ
->
log
 = &
cy˛e
->
√w_log
;

394 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

395 
shm_z⁄e
 = 
∑π
->
ñts
;

397 
i
 = 0; ; i++) {

399 i‡(
i
 >
∑π
->
√…s
) {

400 i‡(
∑π
->
√xt
 =
NULL
) {

403 
∑π
 =Ö¨t->
√xt
;

404 
shm_z⁄e
 = 
∑π
->
ñts
;

405 
i
 = 0;

408 i‡(
shm_z⁄e
[
i
].
shm
.
size
 == 0) {

409 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

411 &
shm_z⁄e
[
i
].
shm
.
«me
);

412 
Áûed
;

415 
shm_z⁄e
[
i
].
shm
.
log
 = 
cy˛e
->log;

417 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

418 
oshm_z⁄e
 = 
›¨t
->
ñts
;

420 
n
 = 0; ;Ç++) {

422 i‡(
n
 >
›¨t
->
√…s
) {

423 i‡(
›¨t
->
√xt
 =
NULL
) {

426 
›¨t
 = o∑π->
√xt
;

427 
oshm_z⁄e
 = 
›¨t
->
ñts
;

428 
n
 = 0;

431 i‡(
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
 !
oshm_z⁄e
[
n
].shm.name.len) {

435 i‡(
	`ngx_°∫cmp
(
shm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

436 
oshm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

437 
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

443 i‡(
shm_z⁄e
[
i
].
èg
 =
oshm_z⁄e
[
n
].tag

444 && 
shm_z⁄e
[
i
].
shm
.
size
 =
oshm_z⁄e
[
n
].shm.size)

446 
shm_z⁄e
[
i
].
shm
.
addr
 = 
oshm_z⁄e
[
n
].shm.addr;

448 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
oshm_z⁄e
[
n
].
d©a
)

449 !
NGX_OK
)

451 
Áûed
;

454 
shm_z⁄e_found
;

457 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
n
].
shm
);

462 i‡(
	`ngx_shm_Æloc
(&
shm_z⁄e
[
i
].
shm
Ë!
NGX_OK
) {

463 
Áûed
;

466 i‡(
	`ngx_öô_z⁄e_poﬁ
(
cy˛e
, &
shm_z⁄e
[
i
]Ë!
NGX_OK
) {

467 
Áûed
;

470 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
NULL
Ë!
NGX_OK
) {

471 
Áûed
;

474 
shm_z⁄e_found
:

482 i‡(
ﬁd_cy˛e
->
li°íög
.
√…s
) {

483 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

484 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

485 
ls
[
i
].
ªmaö
 = 0;

488 
∆s
 = 
cy˛e
->
li°íög
.
ñts
;

489 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

491 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

492 i‡(
ls
[
i
].
ign‹e
) {

496 i‡(
	`ngx_cmp_sockaddr
(
∆s
[
n
].
sockaddr
,Çls[n].
sockÀn
,

497 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
, 1)

498 =
NGX_OK
)

500 
∆s
[
n
].
fd
 = 
ls
[
i
].fd;

501 
∆s
[
n
].
¥evious
 = &
ls
[
i
];

502 
ls
[
i
].
ªmaö
 = 1;

504 i‡(
ls
[
i
].
backlog
 !
∆s
[
n
].backlog) {

505 
∆s
[
n
].
li°í
 = 1;

508 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

514 
∆s
[
n
].
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

516 i‡(
ls
[
i
].
ac˚±_fûãr
 && 
∆s
[
n
].accept_filter) {

517 i‡(
	`ngx_°rcmp
(
ls
[
i
].
ac˚±_fûãr
,

518 
∆s
[
n
].
ac˚±_fûãr
)

521 
∆s
[
n
].
dñëe_de„ºed
 = 1;

522 
∆s
[
n
].
add_de„ºed
 = 1;

525 } i‡(
ls
[
i
].
ac˚±_fûãr
) {

526 
∆s
[
n
].
dñëe_de„ºed
 = 1;

528 } i‡(
∆s
[
n
].
ac˚±_fûãr
) {

529 
∆s
[
n
].
add_de„ºed
 = 1;

533 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

535 i‡(
ls
[
i
].
de„ºed_ac˚±
 && !
∆s
[
n
].deferred_accept) {

536 
∆s
[
n
].
dñëe_de„ºed
 = 1;

538 } i‡(
ls
[
i
].
de„ºed_ac˚±
 !
∆s
[
n
].deferred_accept)

540 
∆s
[
n
].
add_de„ºed
 = 1;

547 i‡(
∆s
[
n
].
fd
 =(
ngx_sockë_t
) -1) {

548 
∆s
[
n
].
›í
 = 1;

549 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

550 i‡(
∆s
[
n
].
ac˚±_fûãr
) {

551 
∆s
[
n
].
add_de„ºed
 = 1;

554 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

555 i‡(
∆s
[
n
].
de„ºed_ac˚±
) {

556 
∆s
[
n
].
add_de„ºed
 = 1;

563 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

564 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

565 
ls
[
i
].
›í
 = 1;

566 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

567 i‡(
ls
[
i
].
ac˚±_fûãr
) {

568 
ls
[
i
].
add_de„ºed
 = 1;

571 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

572 i‡(
ls
[
i
].
de„ºed_ac˚±
) {

573 
ls
[
i
].
add_de„ºed
 = 1;

579 i‡(
	`ngx_›í_li°íög_sockës
(
cy˛e
Ë!
NGX_OK
) {

580 
Áûed
;

583 i‡(!
ngx_ã°_c⁄fig
) {

584 
	`ngx_c⁄figuª_li°íög_sockës
(
cy˛e
);

590 i‡(!
ngx_u£_°dîr
) {

591 (Ë
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
);

594 
poﬁ
->
log
 = 
cy˛e
->log;

596 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

597 i‡(
ngx_moduÀs
[
i
]->
öô_moduÀ
) {

598 i‡(
ngx_moduÀs
[
i
]->
	`öô_moduÀ
(
cy˛e
Ë!
NGX_OK
) {

600 
	`exô
(1);

610 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

611 
oshm_z⁄e
 = 
›¨t
->
ñts
;

613 
i
 = 0; ; i++) {

615 i‡(
i
 >
›¨t
->
√…s
) {

616 i‡(
›¨t
->
√xt
 =
NULL
) {

617 
ﬁd_shm_z⁄e_d⁄e
;

619 
›¨t
 = o∑π->
√xt
;

620 
oshm_z⁄e
 = 
›¨t
->
ñts
;

621 
i
 = 0;

624 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

625 
shm_z⁄e
 = 
∑π
->
ñts
;

627 
n
 = 0; ;Ç++) {

629 i‡(
n
 >
∑π
->
√…s
) {

630 i‡(
∑π
->
√xt
 =
NULL
) {

633 
∑π
 =Ö¨t->
√xt
;

634 
shm_z⁄e
 = 
∑π
->
ñts
;

635 
n
 = 0;

638 i‡(
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
 =
shm_z⁄e
[
n
].shm.name.len

639 && 
	`ngx_°∫cmp
(
oshm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

640 
shm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

641 
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

644 
live_shm_z⁄e
;

648 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
i
].
shm
);

650 
live_shm_z⁄e
:

655 
ﬁd_shm_z⁄e_d⁄e
:

660 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

661 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

663 i‡(
ls
[
i
].
ªmaö
 ||Üs[i].
fd
 =(
ngx_sockë_t
) -1) {

667 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

668 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

669 
ngx_˛o£_sockë_n
 "Üistening socket on %V failed",

670 &
ls
[
i
].
addr_ãxt
);

673 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

675 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

676 
u_ch¨
 *
«me
;

678 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

680 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

681 "dñëög sockë %s", 
«me
);

683 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

684 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

685 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

695 
∑π
 = &
ﬁd_cy˛e
->
›í_fûes
.part;

696 
fûe
 = 
∑π
->
ñts
;

698 
i
 = 0; ; i++) {

700 i‡(
i
 >
∑π
->
√…s
) {

701 i‡(
∑π
->
√xt
 =
NULL
) {

704 
∑π
 =Ö¨t->
√xt
;

705 
fûe
 = 
∑π
->
ñts
;

706 
i
 = 0;

709 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

713 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

714 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

715 
ngx_˛o£_fûe_n
 " \"%s\" failed",

716 
fûe
[
i
].
«me
.
d©a
);

720 
	`ngx_de°roy_poﬁ
(
c⁄f
.
ãmp_poﬁ
);

722 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_MASTER
 || 
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

730 
ív
 = 
ívú⁄
;

731 
ívú⁄
 = 
£nv
;

733 
	`ngx_de°roy_poﬁ
(
ﬁd_cy˛e
->
poﬁ
);

734 
cy˛e
->
ﬁd_cy˛e
 = 
NULL
;

736 
ívú⁄
 = 
ív
;

738  
cy˛e
;

742 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

743 
ngx_ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
cy˛e
->
log
);

744 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

745 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

747 
	`exô
(1);

750 
n
 = 10;

751 
ngx_ﬁd_cy˛es
.
ñts
 = 
	`ngx_pˇŒoc
(
ngx_ãmp_poﬁ
,

752 
n
 * (
ngx_cy˛e_t
 *));

753 i‡(
ngx_ﬁd_cy˛es
.
ñts
 =
NULL
) {

754 
	`exô
(1);

756 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

757 
ngx_ﬁd_cy˛es
.
size
 = (
ngx_cy˛e_t
 *);

758 
ngx_ﬁd_cy˛es
.
«Œoc
 = 
n
;

759 
ngx_ﬁd_cy˛es
.
poﬁ
 = 
ngx_ãmp_poﬁ
;

761 
ngx_˛ó√r_evít
.
h™dÀr
 = 
ngx_˛ón_ﬁd_cy˛es
;

762 
ngx_˛ó√r_evít
.
log
 = 
cy˛e
->log;

763 
ngx_˛ó√r_evít
.
d©a
 = &
dumb
;

764 
dumb
.
fd
 = (
ngx_sockë_t
) -1;

767 
ngx_ãmp_poﬁ
->
log
 = 
cy˛e
->log;

769 
ﬁd
 = 
	`ngx_¨øy_push
(&
ngx_ﬁd_cy˛es
);

770 i‡(
ﬁd
 =
NULL
) {

771 
	`exô
(1);

773 *
ﬁd
 = 
ﬁd_cy˛e
;

775 i‡(!
ngx_˛ó√r_evít
.
timî_£t
) {

776 
	`ngx_add_timî
(&
ngx_˛ó√r_evít
, 30000);

777 
ngx_˛ó√r_evít
.
timî_£t
 = 1;

780  
cy˛e
;

783 
Áûed
:

785 i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

786 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

787 
ngx_c‹e_moduÀ
);

788 i‡(
ﬁd_ccf
->
ívú⁄mít
) {

789 
ívú⁄
 = 
ﬁd_ccf
->
ívú⁄mít
;

795 
∑π
 = &
cy˛e
->
›í_fûes
.part;

796 
fûe
 = 
∑π
->
ñts
;

798 
i
 = 0; ; i++) {

800 i‡(
i
 >
∑π
->
√…s
) {

801 i‡(
∑π
->
√xt
 =
NULL
) {

804 
∑π
 =Ö¨t->
√xt
;

805 
fûe
 = 
∑π
->
ñts
;

806 
i
 = 0;

809 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

813 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

814 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

815 
ngx_˛o£_fûe_n
 " \"%s\" failed",

816 
fûe
[
i
].
«me
.
d©a
);

820 i‡(
ngx_ã°_c⁄fig
) {

821 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

822  
NULL
;

825 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

826 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

827 i‡(
ls
[
i
].
fd
 =(
ngx_sockë_t
Ë-1 || !ls[i].
›í
) {

831 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

832 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

833 
ngx_˛o£_sockë_n
 " %V failed",

834 &
ls
[
i
].
addr_ãxt
);

838 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

840  
NULL
;

841 
	}
}

845 
	$ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
)

847 
	`ngx_de°roy_poﬁ
(
c⁄f
->
ãmp_poﬁ
);

848 
	`ngx_de°roy_poﬁ
(
c⁄f
->
poﬁ
);

849 
	}
}

852 
ngx_öt_t


853 
	$ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_shm_z⁄e_t
 *
zn
)

855 
u_ch¨
 *
fûe
;

856 
ngx_¶ab_poﬁ_t
 *
•
;

858 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
zn
->
shm
.
addr
;

860 i‡(
zn
->
shm
.
exi°s
) {

862 i‡(
•
 =•->
addr
) {

863  
NGX_OK
;

866 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

868 &
zn
->
shm
.
«me
, 
•
->
addr
, sp);

869  
NGX_ERROR
;

872 
•
->
íd
 = 
zn
->
shm
.
addr
 + zn->shm.
size
;

873 
•
->
mö_shi·
 = 3;

874 
•
->
addr
 = 
zn
->
shm
.addr;

876 #i‡(
NGX_HAVE_ATOMIC_OPS
)

878 
fûe
 = 
NULL
;

882 
fûe
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, cy˛e->
lock_fûe
.
Àn
 + 
zn
->
shm
.
«me
.len);

883 i‡(
fûe
 =
NULL
) {

884  
NGX_ERROR
;

887 (Ë
	`ngx_•rötf
(
fûe
, "%V%V%Z", &
cy˛e
->
lock_fûe
, &
zn
->
shm
.
«me
);

891 i‡(
	`ngx_shmtx_¸óã
(&
•
->
muãx
, &•->
lock
, 
fûe
Ë!
NGX_OK
) {

892  
NGX_ERROR
;

895 
	`ngx_¶ab_öô
(
•
);

897  
NGX_OK
;

898 
	}
}

901 
ngx_öt_t


902 
	$ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
)

904 
size_t
 
Àn
;

905 
ngx_uöt_t
 
¸óã
;

906 
ngx_fûe_t
 
fûe
;

907 
u_ch¨
 
pid
[
NGX_INT64_LEN
 + 2];

909 i‡(
ngx_¥o˚ss
 > 
NGX_PROCESS_MASTER
) {

910  
NGX_OK
;

913 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

915 
fûe
.
«me
 = *name;

916 
fûe
.
log
 =Üog;

918 
¸óã
 = 
ngx_ã°_c⁄fig
 ? 
NGX_FILE_CREATE_OR_OPEN
 : 
NGX_FILE_TRUNCATE
;

920 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
,

921 
¸óã
, 
NGX_FILE_DEFAULT_ACCESS
);

923 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

925 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

926  
NGX_ERROR
;

929 i‡(!
ngx_ã°_c⁄fig
) {

930 
Àn
 = 
	`ngx_¢¥ötf
(
pid
, 
NGX_INT64_LEN
 + 2, "%P%N", 
ngx_pid
) -Öid;

932 i‡(
	`ngx_wrôe_fûe
(&
fûe
, 
pid
, 
Àn
, 0Ë=
NGX_ERROR
) {

933  
NGX_ERROR
;

937 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

938 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

939 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

942  
NGX_OK
;

943 
	}
}

947 
	$ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
)

949 
u_ch¨
 *
«me
;

950 
ngx_c‹e_c⁄f_t
 *
ccf
;

952 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

954 
«me
 = 
ngx_√w_bö¨y
 ? 
ccf
->
ﬁdpid
.
d©a
 : ccf->
pid
.data;

956 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

957 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

958 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

960 
	}
}

963 
ngx_öt_t


964 
	$ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
)

966 
ssize_t
 
n
;

967 
ngx_öt_t
 
pid
;

968 
ngx_fûe_t
 
fûe
;

969 
ngx_c‹e_c⁄f_t
 *
ccf
;

970 
u_ch¨
 
buf
[
NGX_INT64_LEN
 + 2];

972 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "signalÖrocess started");

974 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

976 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

978 
fûe
.
«me
 = 
ccf
->
pid
;

979 
fûe
.
log
 = 
cy˛e
->log;

981 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
,

982 
NGX_FILE_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

984 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

985 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 
ngx_î∫o
,

986 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

990 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 
NGX_INT64_LEN
 + 2, 0);

992 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

993 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

994 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

997 i‡(
n
 =
NGX_ERROR
) {

1001 
n
-- && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

1003 
pid
 = 
	`ngx_©oi
(
buf
, ++
n
);

1005 i‡(
pid
 =
NGX_ERROR
) {

1006 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 0,

1008 
n
, 
buf
, 
fûe
.
«me
.
d©a
);

1012  
	`ngx_os_sig«l_¥o˚ss
(
cy˛e
, 
sig
, 
pid
);

1014 
	}
}

1017 
ngx_öt_t


1018 
	$ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
)

1020 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

1021 
ngx_fd_t
 
fd
;

1023 
fd
 = 
	`ngx_›í_fûe
(
fûe
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

1024 
NGX_FILE_DEFAULT_ACCESS
);

1026 i‡(
fd
 =
NGX_INVALID_FILE
) {

1027 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

1028 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
);

1029  
NGX_ERROR
;

1032 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1033 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1034 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
);

1037 i‡(
	`ngx_dñëe_fûe
(
fûe
Ë=
NGX_FILE_ERROR
) {

1038 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1039 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
fûe
);

1044  
NGX_OK
;

1045 
	}
}

1049 
	$ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

1051 
ngx_fd_t
 
fd
;

1052 
ngx_uöt_t
 
i
;

1053 
ngx_li°_∑π_t
 *
∑π
;

1054 
ngx_›í_fûe_t
 *
fûe
;

1056 
∑π
 = &
cy˛e
->
›í_fûes
.part;

1057 
fûe
 = 
∑π
->
ñts
;

1059 
i
 = 0; ; i++) {

1061 i‡(
i
 >
∑π
->
√…s
) {

1062 i‡(
∑π
->
√xt
 =
NULL
) {

1065 
∑π
 =Ö¨t->
√xt
;

1066 
fûe
 = 
∑π
->
ñts
;

1067 
i
 = 0;

1070 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

1074 i‡(
fûe
[
i
].
Êush
) {

1075 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

1078 
fd
 = 
	`ngx_›í_fûe
(
fûe
[
i
].
«me
.
d©a
, 
NGX_FILE_APPEND
,

1079 
NGX_FILE_CREATE_OR_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1081 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

1083 
fûe
[
i
].
«me
.
d©a
, fûe[i].
fd
, fd);

1085 i‡(
fd
 =
NGX_INVALID_FILE
) {

1086 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1087 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1091 #i‡!(
NGX_WIN32
)

1092 i‡(
u£r
 !(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1093 
ngx_fûe_öfo_t
 
fi
;

1095 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, &
fi
)

1096 =
NGX_FILE_ERROR
)

1098 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1099 
ngx_fûe_öfo_n
 " \"%s\" failed",

1100 
fûe
[
i
].
«me
.
d©a
);

1102 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1103 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1104 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1105 
fûe
[
i
].
«me
.
d©a
);

1109 i‡(
fi
.
°_uid
 !
u£r
) {

1110 i‡(
	`chown
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
u£r
, -1) == -1) {

1111 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1113 
fûe
[
i
].
«me
.
d©a
, 
u£r
);

1115 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1116 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1117 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1118 
fûe
[
i
].
«me
.
d©a
);

1123 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
)) != (S_IRUSR|S_IWUSR)) {

1125 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
);

1127 i‡(
	`chmod
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

1128 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1129 "chmod(Ë\"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1131 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1132 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1133 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1134 
fûe
[
i
].
«me
.
d©a
);

1140 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

1141 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1143 
fûe
[
i
].
«me
.
d©a
);

1145 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1146 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1147 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1148 
fûe
[
i
].
«me
.
d©a
);

1155 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

1156 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1157 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1158 
fûe
[
i
].
«me
.
d©a
);

1161 
fûe
[
i
].
fd
 = fd;

1164 (Ë
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
);

1165 
	}
}

1168 
ngx_shm_z⁄e_t
 *

1169 
	$ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
size_t
 
size
, *
èg
)

1171 
ngx_uöt_t
 
i
;

1172 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1173 
ngx_li°_∑π_t
 *
∑π
;

1175 
∑π
 = &
cf
->
cy˛e
->
sh¨ed_mem‹y
.part;

1176 
shm_z⁄e
 = 
∑π
->
ñts
;

1178 
i
 = 0; ; i++) {

1180 i‡(
i
 >
∑π
->
√…s
) {

1181 i‡(
∑π
->
√xt
 =
NULL
) {

1184 
∑π
 =Ö¨t->
√xt
;

1185 
shm_z⁄e
 = 
∑π
->
ñts
;

1186 
i
 = 0;

1189 i‡(
«me
->
Àn
 !
shm_z⁄e
[
i
].
shm
.name.len) {

1193 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
shm_z⁄e
[
i
].
shm
.«me.d©a,Çame->
Àn
)

1199 i‡(
èg
 !
shm_z⁄e
[
i
].tag) {

1200 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1203 &
shm_z⁄e
[
i
].
shm
.
«me
);

1204  
NULL
;

1207 i‡(
size
 && sizê!
shm_z⁄e
[
i
].
shm
.size) {

1208 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1211 
size
, &
shm_z⁄e
[
i
].
shm
.
«me
, shm_zone[i].shm.size);

1212  
NULL
;

1215  &
shm_z⁄e
[
i
];

1218 
shm_z⁄e
 = 
	`ngx_li°_push
(&
cf
->
cy˛e
->
sh¨ed_mem‹y
);

1220 i‡(
shm_z⁄e
 =
NULL
) {

1221  
NULL
;

1224 
shm_z⁄e
->
d©a
 = 
NULL
;

1225 
shm_z⁄e
->
shm
.
log
 = 
cf
->
cy˛e
->log;

1226 
shm_z⁄e
->
shm
.
size
 = size;

1227 
shm_z⁄e
->
shm
.
«me
 = *name;

1228 
shm_z⁄e
->
shm
.
exi°s
 = 0;

1229 
shm_z⁄e
->
öô
 = 
NULL
;

1230 
shm_z⁄e
->
èg
 =Åag;

1232  
shm_z⁄e
;

1233 
	}
}

1237 
	$ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
)

1239 
ngx_uöt_t
 
i
, 
n
, 
found
, 
live
;

1240 
ngx_log_t
 *
log
;

1241 
ngx_cy˛e_t
 **
cy˛e
;

1243 
log
 = 
ngx_cy˛e
->log;

1244 
ngx_ãmp_poﬁ
->
log
 =Üog;

1246 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "clean old cycles");

1248 
live
 = 0;

1250 
cy˛e
 = 
ngx_ﬁd_cy˛es
.
ñts
;

1251 
i
 = 0; i < 
ngx_ﬁd_cy˛es
.
√…s
; i++) {

1253 i‡(
cy˛e
[
i
] =
NULL
) {

1257 
found
 = 0;

1259 
n
 = 0;Ç < 
cy˛e
[
i
]->
c⁄√˘i⁄_n
;Ç++) {

1260 i‡(
cy˛e
[
i
]->
c⁄√˘i⁄s
[
n
].
fd
 !(
ngx_sockë_t
) -1) {

1261 
found
 = 1;

1263 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "livêfd:%d", 
n
);

1269 i‡(
found
) {

1270 
live
 = 1;

1274 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "˛ó¿ﬁd cy˛e: %d", 
i
);

1276 
	`ngx_de°roy_poﬁ
(
cy˛e
[
i
]->
poﬁ
);

1277 
cy˛e
[
i
] = 
NULL
;

1280 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "ﬁd cy˛e†°©us: %d", 
live
);

1282 i‡(
live
) {

1283 
	`ngx_add_timî
(
ev
, 30000);

1286 
	`ngx_de°roy_poﬁ
(
ngx_ãmp_poﬁ
);

1287 
ngx_ãmp_poﬁ
 = 
NULL
;

1288 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

1290 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_cycle.h

8 #i‚de‡
_NGX_CYCLE_H_INCLUDED_


9 
	#_NGX_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‚de‡
NGX_CYCLE_POOL_SIZE


17 
	#NGX_CYCLE_POOL_SIZE
 
NGX_DEFAULT_POOL_SIZE


	)

21 
	#NGX_DEBUG_POINTS_STOP
 1

	)

22 
	#NGX_DEBUG_POINTS_ABORT
 2

	)

25 
ngx_shm_z⁄e_s
 
	tngx_shm_z⁄e_t
;

27 
	$ngx_öt_t
 (*
	tngx_shm_z⁄e_öô_±
Ë(
	tngx_shm_z⁄e_t
 *
	tz⁄e
, *
	td©a
);

29 
	sngx_shm_z⁄e_s
 {

30 *
d©a
;

31 
ngx_shm_t
 
shm
;

32 
ngx_shm_z⁄e_öô_±
 
öô
;

33 *
èg
;

37 
	sngx_cy˛e_s
 {

38 ****
c⁄f_˘x
;

39 
ngx_poﬁ_t
 *
poﬁ
;

41 
ngx_log_t
 *
log
;

42 
ngx_log_t
 
√w_log
;

44 
ngx_uöt_t
 
log_u£_°dîr
;

46 
ngx_c⁄√˘i⁄_t
 **
fûes
;

47 
ngx_c⁄√˘i⁄_t
 *
‰ì_c⁄√˘i⁄s
;

48 
ngx_uöt_t
 
‰ì_c⁄√˘i⁄_n
;

50 
ngx_queue_t
 
ªußbÀ_c⁄√˘i⁄s_queue
;

52 
ngx_¨øy_t
 
li°íög
;

53 
ngx_¨øy_t
 
∑ths
;

54 
ngx_li°_t
 
›í_fûes
;

55 
ngx_li°_t
 
sh¨ed_mem‹y
;

57 
ngx_uöt_t
 
c⁄√˘i⁄_n
;

58 
ngx_uöt_t
 
fûes_n
;

60 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄s
;

61 
ngx_evít_t
 *
ªad_evíts
;

62 
ngx_evít_t
 *
wrôe_evíts
;

64 
ngx_cy˛e_t
 *
ﬁd_cy˛e
;

66 
ngx_°r_t
 
c⁄f_fûe
;

67 
ngx_°r_t
 
c⁄f_∑øm
;

68 
ngx_°r_t
 
c⁄f_¥efix
;

69 
ngx_°r_t
 
¥efix
;

70 
ngx_°r_t
 
lock_fûe
;

71 
ngx_°r_t
 
ho°«me
;

76 
ngx_Êag_t
 
d´m⁄
;

77 
ngx_Êag_t
 
ma°î
;

79 
ngx_m£c_t
 
timî_ªsﬁuti⁄
;

81 
ngx_öt_t
 
w‹kî_¥o˚s£s
;

82 
ngx_öt_t
 
debug_poöts
;

84 
ngx_öt_t
 
æimô_nofûe
;

85 
ngx_öt_t
 
æimô_sig≥ndög
;

86 
off_t
 
æimô_c‹e
;

88 
¥i‹ôy
;

90 
ngx_uöt_t
 
˝u_afföôy_n
;

91 
uöt64_t
 *
˝u_afföôy
;

93 *
u£∫ame
;

94 
ngx_uid_t
 
u£r
;

95 
ngx_gid_t
 
group
;

97 
ngx_°r_t
 
w‹kög_dúe˘‹y
;

98 
ngx_°r_t
 
lock_fûe
;

100 
ngx_°r_t
 
pid
;

101 
ngx_°r_t
 
ﬁdpid
;

103 
ngx_¨øy_t
 
ív
;

104 **
ívú⁄mít
;

106 #i‡(
NGX_THREADS
)

107 
ngx_öt_t
 
w‹kî_thªads
;

108 
size_t
 
thªad_°ack_size
;

111 } 
	tngx_c‹e_c⁄f_t
;

115 
ngx_poﬁ_t
 *
poﬁ
;

116 } 
	tngx_c‹e_és_t
;

119 
	#ngx_is_öô_cy˛e
(
cy˛e
Ë(cy˛e->
c⁄f_˘x
 =
NULL
)

	)

122 
ngx_cy˛e_t
 *
	`ngx_öô_cy˛e
“gx_cy˛e_à*
ﬁd_cy˛e
);

123 
ngx_öt_t
 
	`ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
);

124 
	`ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
);

125 
ngx_öt_t
 
	`ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
);

126 
	`ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

127 **
	`ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
);

128 
ngx_pid_t
 
	`ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
);

129 
uöt64_t
 
	`ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
);

130 
ngx_shm_z⁄e_t
 *
	`ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

131 
size_t
 
size
, *
èg
);

134 vﬁ©ûê
ngx_cy˛e_t
 *
ngx_cy˛e
;

135 
ngx_¨øy_t
 
ngx_ﬁd_cy˛es
;

136 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

137 
ngx_uöt_t
 
ngx_ã°_c⁄fig
;

138 
ngx_uöt_t
 
ngx_quõt_mode
;

139 #i‡(
NGX_THREADS
)

140 
ngx_és_key_t
 
ngx_c‹e_és_key
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
);

15 
ngx_©omic_t
 
	gãmp_numbî
 = 0;

16 
ngx_©omic_t
 *
	gngx_ãmp_numbî
 = &
ãmp_numbî
;

17 
ngx_©omic_öt_t
 
	gngx_øndom_numbî
 = 123456;

20 
ngx_öt_t


21 
	$ngx_gë_fuŒ_«me
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
¥efix
,Çgx_°r_à*
«me
)

23 
size_t
 
Àn
;

24 
u_ch¨
 *
p
, *
n
;

25 
ngx_öt_t
 
rc
;

27 
rc
 = 
	`ngx_ã°_fuŒ_«me
(
«me
);

29 i‡(
rc
 =
NGX_OK
) {

30  
rc
;

33 
Àn
 = 
¥efix
->len;

35 #i‡(
NGX_WIN32
)

37 i‡(
rc
 == 2) {

38 
Àn
 = 
rc
;

43 
n
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 
«me
->len + 1);

44 i‡(
n
 =
NULL
) {

45  
NGX_ERROR
;

48 
p
 = 
	`ngx_˝ymem
(
n
, 
¥efix
->
d©a
, 
Àn
);

49 
	`ngx_˝y°∫
(
p
, 
«me
->
d©a
,Çame->
Àn
 + 1);

51 
«me
->
Àn
 +=Üen;

52 
«me
->
d©a
 = 
n
;

54  
NGX_OK
;

55 
	}
}

58 
ngx_öt_t


59 
	$ngx_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
)

61 #i‡(
NGX_WIN32
)

62 
u_ch¨
 
c0
, 
c1
;

64 
c0
 = 
«me
->
d©a
[0];

66 i‡(
«me
->
Àn
 < 2) {

67 i‡(
c0
 == '/') {

71  
NGX_DECLINED
;

74 
c1
 = 
«me
->
d©a
[1];

76 i‡(
c1
 == ':') {

77 
c0
 |= 0x20;

79 i‡((
c0
 >= 'a' && c0 <= 'z')) {

80  
NGX_OK
;

83  
NGX_DECLINED
;

86 i‡(
c1
 == '/') {

87  
NGX_OK
;

90 i‡(
c0
 == '/') {

94  
NGX_DECLINED
;

98 i‡(
«me
->
d©a
[0] == '/') {

99  
NGX_OK
;

102  
NGX_DECLINED
;

105 
	}
}

108 
ssize_t


109 
	$ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
)

111 
ngx_öt_t
 
rc
;

113 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

114 
rc
 = 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

115 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
);

117 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_AGAIN
) {

118  
rc
;

121 i‡(
tf
->
log_Àvñ
) {

122 
	`ngx_log_îr‹
(
tf
->
log_Àvñ
,Åf->
fûe
.
log
, 0, "%s %V",

123 
tf
->
w¨n
, &tf->
fûe
.
«me
);

127  
	`ngx_wrôe_chaö_to_fûe
(&
tf
->
fûe
, 
chaö
,Åf->
off£t
,Åf->
poﬁ
);

128 
	}
}

131 
ngx_öt_t


132 
	$ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
, 
ngx_poﬁ_t
 *
poﬁ
,

133 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,Çgx_uöt_à
ac˚ss
)

135 
uöt32_t
 
n
;

136 
ngx_îr_t
 
îr
;

137 
ngx_poﬁ_˛ónup_t
 *
˛n
;

138 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

140 
fûe
->
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len + 10;

142 
fûe
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, fûe->«me.
Àn
 + 1);

143 i‡(
fûe
->
«me
.
d©a
 =
NULL
) {

144  
NGX_ERROR
;

148 
i
 = 0; i < 
fûe
->
«me
.
Àn
; i++) {

149 
fûe
->
«me
.
d©a
[
i
] = 'X';

153 
	`ngx_mem˝y
(
fûe
->
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

155 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0);

157 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

158 i‡(
˛n
 =
NULL
) {

159  
NGX_ERROR
;

163 (Ë
	`ngx_•rötf
(
fûe
->
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len,

164 "%010uD%Z", 
n
);

166 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
fûe
->
«me
.
d©a
, fûe->«me.
Àn
);

168 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

169 "hashedÖ©h: %s", 
fûe
->
«me
.
d©a
);

171 
fûe
->
fd
 = 
	`ngx_›í_ãmpfûe
(fûe->
«me
.
d©a
, 
≥rsi°ít
, 
ac˚ss
);

173 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

174 "ãm∞fd:%d", 
fûe
->
fd
);

176 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

178 
˛n
->
h™dÀr
 = 
˛ón
 ? 
ngx_poﬁ_dñëe_fûe
 : 
ngx_poﬁ_˛ónup_fûe
;

179 
˛nf
 = 
˛n
->
d©a
;

181 
˛nf
->
fd
 = 
fûe
->fd;

182 
˛nf
->
«me
 = 
fûe
->«me.
d©a
;

183 
˛nf
->
log
 = 
poﬁ
->log;

185  
NGX_OK
;

188 
îr
 = 
ngx_î∫o
;

190 i‡(
îr
 =
NGX_EEXIST
) {

191 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(1);

195 i‡((
∑th
->
Àvñ
[0] =0Ë|| (
îr
 !
NGX_ENOPATH
)) {

196 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

197 
ngx_›í_ãmpfûe_n
 " \"%s\" failed",

198 
fûe
->
«me
.
d©a
);

199  
NGX_ERROR
;

202 i‡(
	`ngx_¸óã_∑th
(
fûe
, 
∑th
Ë=
NGX_ERROR
) {

203  
NGX_ERROR
;

206 
	}
}

210 
	$ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
)

212 
size_t
 
i
, 
Àvñ
;

213 
ngx_uöt_t
 
n
;

215 
i
 = 
∑th
->
«me
.
Àn
 + 1;

217 
fûe
[
∑th
->
«me
.
Àn
 +Öath->len] = '/';

219 
n
 = 0;Ç < 3;Ç++) {

220 
Àvñ
 = 
∑th
->Àvñ[
n
];

222 i‡(
Àvñ
 == 0) {

226 
Àn
 -
Àvñ
;

227 
fûe
[
i
 - 1] = '/';

228 
	`ngx_mem˝y
(&
fûe
[
i
], &fûe[
Àn
], 
Àvñ
);

229 
i
 +
Àvñ
 + 1;

231 
	}
}

234 
ngx_öt_t


235 
	$ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
)

237 
size_t
 
pos
;

238 
ngx_îr_t
 
îr
;

239 
ngx_uöt_t
 
i
;

241 
pos
 = 
∑th
->
«me
.
Àn
;

243 
i
 = 0; i < 3; i++) {

244 i‡(
∑th
->
Àvñ
[
i
] == 0) {

248 
pos
 +
∑th
->
Àvñ
[
i
] + 1;

250 
fûe
->
«me
.
d©a
[
pos
] = '\0';

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

253 "ãm∞fûe: \"%s\"", 
fûe
->
«me
.
d©a
);

255 i‡(
	`ngx_¸óã_dú
(
fûe
->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

256 
îr
 = 
ngx_î∫o
;

257 i‡(
îr
 !
NGX_EEXIST
) {

258 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

259 
ngx_¸óã_dú_n
 " \"%s\" failed",

260 
fûe
->
«me
.
d©a
);

261  
NGX_ERROR
;

265 
fûe
->
«me
.
d©a
[
pos
] = '/';

268  
NGX_OK
;

269 
	}
}

272 
ngx_îr_t


273 
	$ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
)

275 
u_ch¨
 *
p
, 
ch
;

276 
ngx_îr_t
 
îr
;

278 
îr
 = 0;

280 #i‡(
NGX_WIN32
)

281 
p
 = 
dú
 + 3;

283 
p
 = 
dú
 + 1;

286  ; *
p
;Ö++) {

287 
ch
 = *
p
;

289 i‡(
ch
 != '/') {

293 *
p
 = '\0';

295 i‡(
	`ngx_¸óã_dú
(
dú
, 
ac˚ss
Ë=
NGX_FILE_ERROR
) {

296 
îr
 = 
ngx_î∫o
;

298 
îr
) {

299 
NGX_EEXIST
:

300 
îr
 = 0;

301 
NGX_EACCES
:

305  
îr
;

309 *
p
 = '/';

312  
îr
;

313 
	}
}

316 
ngx_©omic_uöt_t


317 
	$ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
)

319 
ngx_©omic_uöt_t
 
n
, 
add
;

321 
add
 = 
cﬁlisi⁄
 ? 
ngx_øndom_numbî
 : 1;

323 
n
 = 
	`ngx_©omic_„tch_add
(
ngx_ãmp_numbî
, 
add
);

325  
n
 + 
add
;

326 
	}
}

330 
	$ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

332 *
p
 = 
c⁄f
;

334 
ssize_t
 
Àvñ
;

335 
ngx_°r_t
 *
vÆue
;

336 
ngx_uöt_t
 
i
, 
n
;

337 
ngx_∑th_t
 *
∑th
, **
¶Ÿ
;

339 
¶Ÿ
 = (
ngx_∑th_t
 **Ë(
p
 + 
cmd
->
off£t
);

341 i‡(*
¶Ÿ
) {

345 
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

346 i‡(
∑th
 =
NULL
) {

347  
NGX_CONF_ERROR
;

350 
vÆue
 = 
cf
->
¨gs
->
ñts
;

352 
∑th
->
«me
 = 
vÆue
[1];

354 i‡(
∑th
->
«me
.
d©a
[∑th->«me.
Àn
 - 1] == '/') {

355 
∑th
->
«me
.
Àn
--;

358 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
->
«me
, 0Ë!
NGX_OK
) {

359  
NULL
;

362 
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

363 
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

365 
i
 = 0, 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
; i++,Ç++) {

366 
Àvñ
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
, vÆue[n].
Àn
);

367 i‡(
Àvñ
 =
NGX_ERROR
 ||Üevel == 0) {

371 
∑th
->
Àvñ
[
i
] =Üevel;

372 
∑th
->
Àn
 +
Àvñ
 + 1;

375 
i
 < 3) {

376 
∑th
->
Àvñ
[
i
++] = 0;

379 *
¶Ÿ
 = 
∑th
;

381 i‡(
	`ngx_add_∑th
(
cf
, 
¶Ÿ
Ë=
NGX_ERROR
) {

382  
NGX_CONF_ERROR
;

385  
NGX_CONF_OK
;

386 
	}
}

390 
	$ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,Çgx_∑th_à*
¥ev
,

391 
ngx_∑th_öô_t
 *
öô
)

393 i‡(*
∑th
) {

394  
NGX_CONF_OK
;

397 i‡(
¥ev
) {

398 *
∑th
 = 
¥ev
;

399  
NGX_CONF_OK
;

402 *
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

403 i‡(*
∑th
 =
NULL
) {

404  
NGX_CONF_ERROR
;

407 (*
∑th
)->
«me
 = 
öô
->name;

409 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &(*
∑th
)->
«me
, 0Ë!
NGX_OK
) {

410  
NGX_CONF_ERROR
;

413 (*
∑th
)->
Àvñ
[0] = 
öô
->level[0];

414 (*
∑th
)->
Àvñ
[1] = 
öô
->level[1];

415 (*
∑th
)->
Àvñ
[2] = 
öô
->level[2];

417 (*
∑th
)->
Àn
 = 
öô
->
Àvñ
[0] + (init->level[0] ? 1 : 0)

418 + 
öô
->
Àvñ
[1] + (init->level[1] ? 1 : 0)

419 + 
öô
->
Àvñ
[2] + (init->level[2] ? 1 : 0);

421 i‡(
	`ngx_add_∑th
(
cf
, 
∑th
Ë!
NGX_OK
) {

422  
NGX_CONF_ERROR
;

425  
NGX_CONF_OK
;

426 
	}
}

430 
	$ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

432 *
c⁄Â
 = 
c⁄f
;

434 
u_ch¨
 *
p
;

435 
ngx_°r_t
 *
vÆue
;

436 
ngx_uöt_t
 
i
, 
right
, 
shi·
, *
ac˚ss
;

438 
ac˚ss
 = (
ngx_uöt_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

440 i‡(*
ac˚ss
 !
NGX_CONF_UNSET_UINT
) {

444 
vÆue
 = 
cf
->
¨gs
->
ñts
;

446 *
ac˚ss
 = 0600;

448 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

450 
p
 = 
vÆue
[
i
].
d©a
;

452 i‡(
	`ngx_°∫cmp
(
p
, "user:", ("user:") - 1) == 0) {

453 
shi·
 = 6;

454 
p
 += ("user:") - 1;

456 } i‡(
	`ngx_°∫cmp
(
p
, "group:", ("group:") - 1) == 0) {

457 
shi·
 = 3;

458 
p
 += ("group:") - 1;

460 } i‡(
	`ngx_°∫cmp
(
p
, "all:", ("all:") - 1) == 0) {

461 
shi·
 = 0;

462 
p
 += ("all:") - 1;

465 
övÆid
;

468 i‡(
	`ngx_°rcmp
(
p
, "rw") == 0) {

469 
right
 = 6;

471 } i‡(
	`ngx_°rcmp
(
p
, "r") == 0) {

472 
right
 = 4;

475 
övÆid
;

478 *
ac˚ss
 |
right
 << 
shi·
;

481  
NGX_CONF_OK
;

483 
övÆid
:

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

487  
NGX_CONF_ERROR
;

488 
	}
}

491 
ngx_öt_t


492 
	$ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
)

494 
ngx_uöt_t
 
i
, 
n
;

495 
ngx_∑th_t
 *
∑th
, **
p
;

497 
∑th
 = *
¶Ÿ
;

499 
p
 = 
cf
->
cy˛e
->
∑ths
.
ñts
;

500 
i
 = 0; i < 
cf
->
cy˛e
->
∑ths
.
√…s
; i++) {

501 i‡(
p
[
i
]->
«me
.
Àn
 =
∑th
->name.len

502 && 
	`ngx_°rcmp
(
p
[
i
]->
«me
.
d©a
, 
∑th
->name.data) == 0)

504 i‡(
p
[
i
]->
d©a
 !
∑th
->data) {

505 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

508 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

509  
NGX_ERROR
;

512 
n
 = 0;Ç < 3;Ç++) {

513 i‡(
p
[
i
]->
Àvñ
[
n
] !
∑th
->level[n]) {

514 i‡(
∑th
->
c⁄f_fûe
 =
NULL
) {

515 i‡(
p
[
i
]->
c⁄f_fûe
 =
NULL
) {

516 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

521 &
p
[
i
]->
«me
);

522  
NGX_ERROR
;

525 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

530 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

531  
NGX_ERROR
;

534 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

537 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

538  
NGX_ERROR
;

541 i‡(
p
[
i
]->
Àvñ
[
n
] == 0) {

546 *
¶Ÿ
 = 
p
[
i
];

548  
NGX_OK
;

552 
p
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
∑ths
);

553 i‡(
p
 =
NULL
) {

554  
NGX_ERROR
;

557 *
p
 = 
∑th
;

559  
NGX_OK
;

560 
	}
}

563 
ngx_öt_t


564 
	$ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

566 
ngx_îr_t
 
îr
;

567 
ngx_uöt_t
 
i
;

568 
ngx_∑th_t
 **
∑th
;

570 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

571 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

573 i‡(
	`ngx_¸óã_dú
(
∑th
[
i
]->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

574 
îr
 = 
ngx_î∫o
;

575 i‡(
îr
 !
NGX_EEXIST
) {

576 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
îr
,

577 
ngx_¸óã_dú_n
 " \"%s\" failed",

578 
∑th
[
i
]->
«me
.
d©a
);

579  
NGX_ERROR
;

583 i‡(
u£r
 =(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

587 #i‡!(
NGX_WIN32
)

589 
ngx_fûe_öfo_t
 
fi
;

591 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, &
fi
)

592 =
NGX_FILE_ERROR
)

594 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

595 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

596  
NGX_ERROR
;

599 i‡(
fi
.
°_uid
 !
u£r
) {

600 i‡(
	`chown
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
u£r
, -1) == -1) {

601 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

603 
∑th
[
i
]->
«me
.
d©a
, 
u£r
);

604  
NGX_ERROR
;

608 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

609 !(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

611 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
);

613 i‡(
	`chmod
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

614 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

615 "chmod(Ë\"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

616  
NGX_ERROR
;

623  
NGX_OK
;

624 
	}
}

627 
ngx_öt_t


628 
	$ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
, 
ngx_ext_ª«me_fûe_t
 *
ext
)

630 
u_ch¨
 *
«me
;

631 
ngx_îr_t
 
îr
;

632 
ngx_c›y_fûe_t
 
cf
;

634 #i‡!(
NGX_WIN32
)

636 i‡(
ext
->
ac˚ss
) {

637 i‡(
	`ngx_ch™ge_fûe_ac˚ss
(
§c
->
d©a
, 
ext
->
ac˚ss
Ë=
NGX_FILE_ERROR
) {

638 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

639 
ngx_ch™ge_fûe_ac˚ss_n
 " \"%s\" faûed", 
§c
->
d©a
);

640 
îr
 = 0;

641 
Áûed
;

647 i‡(
ext
->
time
 != -1) {

648 i‡(
	`ngx_£t_fûe_time
(
§c
->
d©a
, 
ext
->
fd
,Éxt->
time
Ë!
NGX_OK
) {

649 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

650 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
§c
->
d©a
);

651 
îr
 = 0;

652 
Áûed
;

656 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

657  
NGX_OK
;

660 
îr
 = 
ngx_î∫o
;

662 i‡(
îr
 =
NGX_ENOPATH
) {

664 i‡(!
ext
->
¸óã_∑th
) {

665 
Áûed
;

668 
îr
 = 
	`ngx_¸óã_fuŒ_∑th
(
to
->
d©a
, 
	`ngx_dú_ac˚ss
(
ext
->
∑th_ac˚ss
));

670 i‡(
îr
) {

671 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

672 
ngx_¸óã_dú_n
 " \"%s\" faûed", 
to
->
d©a
);

673 
îr
 = 0;

674 
Áûed
;

677 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

678  
NGX_OK
;

681 
îr
 = 
ngx_î∫o
;

684 #i‡(
NGX_WIN32
)

686 i‡(
îr
 =
NGX_EEXIST
) {

687 
îr
 = 
	`ngx_wö32_ª«me_fûe
(
§c
, 
to
, 
ext
->
log
);

689 i‡(
îr
 == 0) {

690  
NGX_OK
;

696 i‡(
îr
 =
NGX_EXDEV
) {

698 
cf
.
size
 = -1;

699 
cf
.
buf_size
 = 0;

700 
cf
.
ac˚ss
 = 
ext
->access;

701 
cf
.
time
 = 
ext
->time;

702 
cf
.
log
 = 
ext
->log;

704 
«me
 = 
	`ngx_Æloc
(
to
->
Àn
 + 1 + 10 + 1, 
ext
->
log
);

705 i‡(
«me
 =
NULL
) {

706  
NGX_ERROR
;

709 (Ë
	`ngx_•rötf
(
«me
, "%*s.%010uD%Z", 
to
->
Àn
,Åo->
d©a
,

710 (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0));

712 i‡(
	`ngx_c›y_fûe
(
§c
->
d©a
, 
«me
, &
cf
Ë=
NGX_OK
) {

714 i‡(
	`ngx_ª«me_fûe
(
«me
, 
to
->
d©a
Ë!
NGX_FILE_ERROR
) {

715 
	`ngx_‰ì
(
«me
);

717 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

718 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

719 
ngx_dñëe_fûe_n
 " \"%s\" failed",

720 
§c
->
d©a
);

721  
NGX_ERROR
;

724  
NGX_OK
;

727 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

728 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

729 
«me
, 
to
->
d©a
);

731 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

732 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

733 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

738 
	`ngx_‰ì
(
«me
);

740 
îr
 = 0;

743 
Áûed
:

745 i‡(
ext
->
dñëe_fûe
) {

746 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

747 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

748 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
§c
->
d©a
);

752 i‡(
îr
) {

753 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

754 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

755 
§c
->
d©a
, 
to
->data);

758  
NGX_ERROR
;

759 
	}
}

762 
ngx_öt_t


763 
	$ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
)

765 *
buf
;

766 
off_t
 
size
;

767 
size_t
 
Àn
;

768 
ssize_t
 
n
;

769 
ngx_fd_t
 
fd
, 
nfd
;

770 
ngx_öt_t
 
rc
;

771 
ngx_fûe_öfo_t
 
fi
;

773 
rc
 = 
NGX_ERROR
;

774 
buf
 = 
NULL
;

775 
nfd
 = 
NGX_INVALID_FILE
;

777 
fd
 = 
	`ngx_›í_fûe
(
‰om
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

779 i‡(
fd
 =
NGX_INVALID_FILE
) {

780 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

781 
ngx_›í_fûe_n
 " \"%s\" faûed", 
‰om
);

782 
Áûed
;

785 i‡(
cf
->
size
 != -1) {

786 
size
 = 
cf
->size;

789 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

790 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

791 
ngx_fd_öfo_n
 " \"%s\" faûed", 
‰om
);

793 
Áûed
;

796 
size
 = 
	`ngx_fûe_size
(&
fi
);

799 
Àn
 = 
cf
->
buf_size
 ? cf->buf_size : 65536;

801 i‡((
off_t
Ë
Àn
 > 
size
) {

802 
Àn
 = (
size_t
Ë
size
;

805 
buf
 = 
	`ngx_Æloc
(
Àn
, 
cf
->
log
);

806 i‡(
buf
 =
NULL
) {

807 
Áûed
;

810 
nfd
 = 
	`ngx_›í_fûe
(
to
, 
NGX_FILE_WRONLY
, 
NGX_FILE_CREATE_OR_OPEN
,

811 
cf
->
ac˚ss
);

813 i‡(
nfd
 =
NGX_INVALID_FILE
) {

814 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

815 
ngx_›í_fûe_n
 " \"%s\" faûed", 
to
);

816 
Áûed
;

819 
size
 > 0) {

821 i‡((
off_t
Ë
Àn
 > 
size
) {

822 
Àn
 = (
size_t
Ë
size
;

825 
n
 = 
	`ngx_ªad_fd
(
fd
, 
buf
, 
Àn
);

827 i‡(
n
 == -1) {

828 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

829 
ngx_ªad_fd_n
 " \"%s\" faûed", 
‰om
);

830 
Áûed
;

833 i‡((
size_t
Ë
n
 !
Àn
) {

834 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

835 
ngx_ªad_fd_n
 " hasÑead only %z of %uz from %s",

836 
n
, 
size
, 
‰om
);

837 
Áûed
;

840 
n
 = 
	`ngx_wrôe_fd
(
nfd
, 
buf
, 
Àn
);

842 i‡(
n
 == -1) {

843 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

844 
ngx_wrôe_fd_n
 " \"%s\" faûed", 
to
);

845 
Áûed
;

848 i‡((
size_t
Ë
n
 !
Àn
) {

849 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

850 
ngx_wrôe_fd_n
 " has written only %z of %uzÅo %s",

851 
n
, 
size
, 
to
);

852 
Áûed
;

855 
size
 -
n
;

858 i‡(
cf
->
time
 != -1) {

859 i‡(
	`ngx_£t_fûe_time
(
to
, 
nfd
, 
cf
->
time
Ë!
NGX_OK
) {

860 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

861 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
to
);

862 
Áûed
;

866 
rc
 = 
NGX_OK
;

868 
Áûed
:

870 i‡(
nfd
 !
NGX_INVALID_FILE
) {

871 i‡(
	`ngx_˛o£_fûe
(
nfd
Ë=
NGX_FILE_ERROR
) {

872 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

873 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
to
);

877 i‡(
fd
 !
NGX_INVALID_FILE
) {

878 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

879 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

880 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
‰om
);

884 i‡(
buf
) {

885 
	`ngx_‰ì
(
buf
);

888  
rc
;

889 
	}
}

910 
ngx_öt_t


911 
	$ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
)

913 *
d©a
, *
¥ev
;

914 
u_ch¨
 *
p
, *
«me
;

915 
size_t
 
Àn
;

916 
ngx_öt_t
 
rc
;

917 
ngx_îr_t
 
îr
;

918 
ngx_°r_t
 
fûe
, 
buf
;

919 
ngx_dú_t
 
dú
;

921 
	`ngx_°r_nuŒ
(&
buf
);

923 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

924 "wÆkÅªê\"%V\"", 
åì
);

926 i‡(
	`ngx_›í_dú
(
åì
, &
dú
Ë=
NGX_ERROR
) {

927 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

928 
ngx_›í_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

929  
NGX_ERROR
;

932 
¥ev
 = 
˘x
->
d©a
;

934 i‡(
˘x
->
Æloc
) {

935 
d©a
 = 
	`ngx_Æloc
(
˘x
->
Æloc
, ctx->
log
);

936 i‡(
d©a
 =
NULL
) {

937 
Áûed
;

940 i‡(
˘x
->
	`öô_h™dÀr
(
d©a
, 
¥ev
Ë=
NGX_ABORT
) {

941 
Áûed
;

944 
˘x
->
d©a
 = data;

947 
d©a
 = 
NULL
;

952 
	`ngx_£t_î∫o
(0);

954 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

955 
îr
 = 
ngx_î∫o
;

957 i‡(
îr
 =
NGX_ENOMOREFILES
) {

958 
rc
 = 
NGX_OK
;

961 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
îr
,

962 
ngx_ªad_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

963 
rc
 = 
NGX_ERROR
;

966 
d⁄e
;

969 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

970 
«me
 = 
	`ngx_de_«me
(&
dú
);

972 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

973 "åìÇamê%uz:\"%s\"", 
Àn
, 
«me
);

975 i‡(
Àn
 =1 && 
«me
[0] == '.') {

979 i‡(
Àn
 =2 && 
«me
[0] == '.' &&Çame[1] == '.') {

983 
fûe
.
Àn
 = 
åì
->len + 1 +Üen;

985 i‡(
fûe
.
Àn
 + 
NGX_DIR_MASK_LEN
 > 
buf
.len) {

987 i‡(
buf
.
Àn
) {

988 
	`ngx_‰ì
(
buf
.
d©a
);

991 
buf
.
Àn
 = 
åì
->À¿+ 1 +Üí + 
NGX_DIR_MASK_LEN
;

993 
buf
.
d©a
 = 
	`ngx_Æloc
(buf.
Àn
 + 1, 
˘x
->
log
);

994 i‡(
buf
.
d©a
 =
NULL
) {

995 
Áûed
;

999 
p
 = 
	`ngx_˝ymem
(
buf
.
d©a
, 
åì
->d©a,Åªe->
Àn
);

1000 *
p
++ = '/';

1001 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 + 1);

1003 
fûe
.
d©a
 = 
buf
.data;

1005 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1006 "åìÖ©h \"%s\"", 
fûe
.
d©a
);

1008 i‡(!
dú
.
vÆid_öfo
) {

1009 i‡(
	`ngx_de_öfo
(
fûe
.
d©a
, &
dú
Ë=
NGX_FILE_ERROR
) {

1010 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1011 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûe
.
d©a
);

1016 i‡(
	`ngx_de_is_fûe
(&
dú
)) {

1018 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1019 "åì fûê\"%s\"", 
fûe
.
d©a
);

1021 
˘x
->
size
 = 
	`ngx_de_size
(&
dú
);

1022 
˘x
->
fs_size
 = 
	`ngx_de_fs_size
(&
dú
);

1023 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1024 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1026 i‡(
˘x
->
	`fûe_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1027 
Áûed
;

1030 } i‡(
	`ngx_de_is_dú
(&
dú
)) {

1032 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1033 "åìÉ¡î dú \"%s\"", 
fûe
.
d©a
);

1035 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1036 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1038 i‡(
˘x
->
	`¥e_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1039 
Áûed
;

1042 i‡(
	`ngx_wÆk_åì
(
˘x
, &
fûe
Ë=
NGX_ABORT
) {

1043 
Áûed
;

1046 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1047 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1049 i‡(
˘x
->
	`po°_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1050 
Áûed
;

1055 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1056 "åì s≥cü»\"%s\"", 
fûe
.
d©a
);

1058 i‡(
˘x
->
	`•ec_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1059 
Áûed
;

1064 
Áûed
:

1066 
rc
 = 
NGX_ABORT
;

1068 
d⁄e
:

1070 i‡(
buf
.
Àn
) {

1071 
	`ngx_‰ì
(
buf
.
d©a
);

1074 i‡(
d©a
) {

1075 
	`ngx_‰ì
(
d©a
);

1076 
˘x
->
d©a
 = 
¥ev
;

1079 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

1080 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1081 
ngx_˛o£_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

1084  
rc
;

1085 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_file.h

8 #i‚de‡
_NGX_FILE_H_INCLUDED_


9 
	#_NGX_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_fûe_s
 {

17 
ngx_fd_t
 
	mfd
;

18 
ngx_°r_t
 
	m«me
;

19 
ngx_fûe_öfo_t
 
	möfo
;

21 
off_t
 
	moff£t
;

22 
off_t
 
	msys_off£t
;

24 
ngx_log_t
 *
	mlog
;

26 #i‡(
NGX_HAVE_FILE_AIO
)

27 
ngx_evít_aio_t
 *
	maio
;

30 
	mvÆid_öfo
:1;

31 
	mdúe˘io
:1;

35 
	#NGX_MAX_PATH_LEVEL
 3

	)

38 
	$time_t
 (*
	tngx_∑th_m™agî_±
Ë(*
	td©a
);

39 (*
	tngx_∑th_lﬂdî_±
Ë(*
	td©a
);

43 
ngx_°r_t
 
«me
;

44 
size_t
 
Àn
;

45 
size_t
 
Àvñ
[3];

47 
ngx_∑th_m™agî_±
 
m™agî
;

48 
ngx_∑th_lﬂdî_±
 
lﬂdî
;

49 *
d©a
;

51 
u_ch¨
 *
c⁄f_fûe
;

52 
ngx_uöt_t
 
löe
;

53 } 
	tngx_∑th_t
;

57 
ngx_°r_t
 
«me
;

58 
size_t
 
Àvñ
[3];

59 } 
	tngx_∑th_öô_t
;

63 
ngx_fûe_t
 
fûe
;

64 
off_t
 
off£t
;

65 
ngx_∑th_t
 *
∑th
;

66 
ngx_poﬁ_t
 *
poﬁ
;

67 *
w¨n
;

69 
ngx_uöt_t
 
ac˚ss
;

71 
log_Àvñ
:8;

72 
≥rsi°ít
:1;

73 
˛ón
:1;

74 } 
	tngx_ãmp_fûe_t
;

78 
ngx_uöt_t
 
ac˚ss
;

79 
ngx_uöt_t
 
∑th_ac˚ss
;

80 
time_t
 
time
;

81 
ngx_fd_t
 
fd
;

83 
¸óã_∑th
:1;

84 
dñëe_fûe
:1;

86 
ngx_log_t
 *
log
;

87 } 
	tngx_ext_ª«me_fûe_t
;

91 
off_t
 
size
;

92 
size_t
 
buf_size
;

94 
ngx_uöt_t
 
ac˚ss
;

95 
time_t
 
time
;

97 
ngx_log_t
 *
log
;

98 } 
	tngx_c›y_fûe_t
;

101 
ngx_åì_˘x_s
 
	tngx_åì_˘x_t
;

103 
	$ngx_öt_t
 (*
	tngx_åì_öô_h™dÀr_±
Ë(*
	t˘x
, *
	t¥ev
);

104 
	$ngx_öt_t
 (*
	tngx_åì_h™dÀr_±
Ë(
	tngx_åì_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 *
	t«me
);

106 
	sngx_åì_˘x_s
 {

107 
off_t
 
size
;

108 
off_t
 
fs_size
;

109 
ngx_uöt_t
 
ac˚ss
;

110 
time_t
 
mtime
;

112 
ngx_åì_öô_h™dÀr_±
 
öô_h™dÀr
;

113 
ngx_åì_h™dÀr_±
 
fûe_h™dÀr
;

114 
ngx_åì_h™dÀr_±
 
¥e_åì_h™dÀr
;

115 
ngx_åì_h™dÀr_±
 
po°_åì_h™dÀr
;

116 
ngx_åì_h™dÀr_±
 
•ec_h™dÀr
;

118 *
d©a
;

119 
size_t
 
Æloc
;

121 
ngx_log_t
 *
log
;

125 
ngx_öt_t
 
	`ngx_gë_fuŒ_«me
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
¥efix
,

126 
ngx_°r_t
 *
«me
);

128 
ssize_t
 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
);

129 
ngx_öt_t
 
	`ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
,

130 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,

131 
ngx_uöt_t
 
ac˚ss
);

132 
	`ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
);

133 
ngx_öt_t
 
	`ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
);

134 
ngx_îr_t
 
	`ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
);

135 
ngx_öt_t
 
	`ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
);

136 
ngx_öt_t
 
	`ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

137 
ngx_öt_t
 
	`ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
,

138 
ngx_ext_ª«me_fûe_t
 *
ext
);

139 
ngx_öt_t
 
	`ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
);

140 
ngx_öt_t
 
	`ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
);

142 
ngx_©omic_uöt_t
 
	`ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
);

144 *
	`ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

145 *
	`ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,

146 
ngx_∑th_t
 *
¥ev
, 
ngx_∑th_öô_t
 *
öô
);

147 *
	`ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

150 
ngx_©omic_t
 *
ngx_ãmp_numbî
;

151 
ngx_©omic_öt_t
 
ngx_øndom_numbî
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_hash.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

15 
ngx_uöt_t
 
i
;

16 
ngx_hash_ñt_t
 *
ñt
;

19 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "hf:\"%*s\"", 
Àn
, 
«me
);

22 
ñt
 = 
hash
->
buckës
[
key
 % hash->
size
];

24 i‡(
ñt
 =
NULL
) {

25  
NULL
;

28 
ñt
->
vÆue
) {

29 i‡(
Àn
 !(
size_t
Ë
ñt
->len) {

30 
√xt
;

33 
i
 = 0; i < 
Àn
; i++) {

34 i‡(
«me
[
i
] !
ñt
->name[i]) {

35 
√xt
;

39  
ñt
->
vÆue
;

41 
√xt
:

43 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

48  
NULL
;

49 
	}
}

53 
	$ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

55 *
vÆue
;

56 
ngx_uöt_t
 
i
, 
n
, 
key
;

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "wch:\"%*s\"", 
Àn
, 
«me
);

62 
n
 = 
Àn
;

64 
n
) {

65 i‡(
«me
[
n
 - 1] == '.') {

69 
n
--;

72 
key
 = 0;

74 
i
 = 
n
; i < 
Àn
; i++) {

75 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

79 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

82 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, &
«me
[
n
], 
Àn
 -Ç);

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

88 i‡(
vÆue
) {

101 i‡((
uöçå_t
Ë
vÆue
 & 2) {

103 i‡(
n
 == 0) {

107 i‡((
uöçå_t
Ë
vÆue
 & 1) {

108  
NULL
;

111 
hwc
 = (
ngx_hash_wûdˇrd_t
 *)

112 ((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

113  
hwc
->
vÆue
;

116 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

118 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hwc
, 
«me
, 
n
 - 1);

120 i‡(
vÆue
) {

121  
vÆue
;

124  
hwc
->
vÆue
;

127 i‡((
uöçå_t
Ë
vÆue
 & 1) {

129 i‡(
n
 == 0) {

133  
NULL
;

136  (*Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

139  
vÆue
;

142  
hwc
->
vÆue
;

143 
	}
}

147 
	$ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

149 *
vÆue
;

150 
ngx_uöt_t
 
i
, 
key
;

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "w˘:\"%*s\"", 
Àn
, 
«me
);

156 
key
 = 0;

158 
i
 = 0; i < 
Àn
; i++) {

159 i‡(
«me
[
i
] == '.') {

163 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

166 i‡(
i
 =
Àn
) {

167  
NULL
;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

174 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, 
«me
, 
i
);

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

180 i‡(
vÆue
) {

188 i‡((
uöçå_t
Ë
vÆue
 & 2) {

190 
i
++;

192 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

194 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hwc
, &
«me
[
i
], 
Àn
 - i);

196 i‡(
vÆue
) {

197  
vÆue
;

200  
hwc
->
vÆue
;

203  
vÆue
;

206  
hwc
->
vÆue
;

207 
	}
}

211 
	$ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
,

212 
size_t
 
Àn
)

214 *
vÆue
;

216 i‡(
hash
->hash.
buckës
) {

217 
vÆue
 = 
	`ngx_hash_föd
(&
hash
->hash, 
key
, 
«me
, 
Àn
);

219 i‡(
vÆue
) {

220  
vÆue
;

224 i‡(
Àn
 == 0) {

225  
NULL
;

228 i‡(
hash
->
wc_hód
 && hash->wc_hód->hash.
buckës
) {

229 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hash
->
wc_hód
, 
«me
, 
Àn
);

231 i‡(
vÆue
) {

232  
vÆue
;

236 i‡(
hash
->
wc_èû
 && hash->wc_èû->hash.
buckës
) {

237 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hash
->
wc_èû
, 
«me
, 
Àn
);

239 i‡(
vÆue
) {

240  
vÆue
;

244  
NULL
;

245 
	}
}

248 
	#NGX_HASH_ELT_SIZE
(
«me
) \

249 ((*Ë+ 
	`ngx_Æign
((
«me
)->
key
.
Àn
 + 2, (*)))

	)

251 
ngx_öt_t


252 
	$ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
, 
ngx_uöt_t
 
√…s
)

254 
u_ch¨
 *
ñts
;

255 
size_t
 
Àn
;

256 
u_sh‹t
 *
ã°
;

257 
ngx_uöt_t
 
i
, 
n
, 
key
, 
size
, 
°¨t
, 
buckë_size
;

258 
ngx_hash_ñt_t
 *
ñt
, **
buckës
;

260 
n
 = 0;Ç < 
√…s
;Ç++) {

261 i‡(
höô
->
buckë_size
 < 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]) + (*))

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

266 
höô
->
«me
, höô->«me, höô->
buckë_size
);

267  
NGX_ERROR
;

271 
ã°
 = 
	`ngx_Æloc
(
höô
->
max_size
 * (
u_sh‹t
), höô->
poﬁ
->
log
);

272 i‡(
ã°
 =
NULL
) {

273  
NGX_ERROR
;

276 
buckë_size
 = 
höô
->bucket_size - (*);

278 
°¨t
 = 
√…s
 / (
buckë_size
 / (2 * (*)));

279 
°¨t
 = start ? start : 1;

281 i‡(
höô
->
max_size
 > 10000 && 
√…s
 && hinit->max_size /Çelts < 100) {

282 
°¨t
 = 
höô
->
max_size
 - 1000;

285 
size
 = 
°¨t
; sizê<
höô
->
max_size
; size++) {

287 
	`ngx_memzîo
(
ã°
, 
size
 * (
u_sh‹t
));

289 
n
 = 0;Ç < 
√…s
;Ç++) {

290 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

294 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

295 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

298 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

300 
size
, 
key
, 
ã°
[key], &
«mes
[
n
].key);

303 i‡(
ã°
[
key
] > (
u_sh‹t
Ë
buckë_size
) {

304 
√xt
;

308 
found
;

310 
√xt
:

315 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
höô
->
poﬁ
->
log
, 0,

319 
höô
->
«me
, höô->«me, höô->
max_size
,

320 
höô
->
«me
, höô->
buckë_size
, hinit->name);

322 
found
:

324 
i
 = 0; i < 
size
; i++) {

325 
ã°
[
i
] = (*);

328 
n
 = 0;Ç < 
√…s
;Ç++) {

329 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

333 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

334 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

337 
Àn
 = 0;

339 
i
 = 0; i < 
size
; i++) {

340 i‡(
ã°
[
i
] == (*)) {

344 
ã°
[
i
] = (
u_sh‹t
Ë(
	`ngx_Æign
—e°[i], 
ngx_ˇchñöe_size
));

346 
Àn
 +
ã°
[
i
];

349 i‡(
höô
->
hash
 =
NULL
) {

350 
höô
->
hash
 = 
	`ngx_pˇŒoc
(höô->
poﬁ
, (
ngx_hash_wûdˇrd_t
)

351 + 
size
 * (
ngx_hash_ñt_t
 *));

352 i‡(
höô
->
hash
 =
NULL
) {

353 
	`ngx_‰ì
(
ã°
);

354  
NGX_ERROR
;

357 
buckës
 = (
ngx_hash_ñt_t
 **)

358 ((
u_ch¨
 *Ë
höô
->
hash
 + (
ngx_hash_wûdˇrd_t
));

361 
buckës
 = 
	`ngx_pˇŒoc
(
höô
->
poﬁ
, 
size
 * (
ngx_hash_ñt_t
 *));

362 i‡(
buckës
 =
NULL
) {

363 
	`ngx_‰ì
(
ã°
);

364  
NGX_ERROR
;

368 
ñts
 = 
	`ngx_∑Œoc
(
höô
->
poﬁ
, 
Àn
 + 
ngx_ˇchñöe_size
);

369 i‡(
ñts
 =
NULL
) {

370 
	`ngx_‰ì
(
ã°
);

371  
NGX_ERROR
;

374 
ñts
 = 
	`ngx_Æign_±r
”…s, 
ngx_ˇchñöe_size
);

376 
i
 = 0; i < 
size
; i++) {

377 i‡(
ã°
[
i
] == (*)) {

381 
buckës
[
i
] = (
ngx_hash_ñt_t
 *Ë
ñts
;

382 
ñts
 +
ã°
[
i
];

386 
i
 = 0; i < 
size
; i++) {

387 
ã°
[
i
] = 0;

390 
n
 = 0;Ç < 
√…s
;Ç++) {

391 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

395 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

396 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
key
] + 
ã°
[key]);

398 
ñt
->
vÆue
 = 
«mes
[
n
].value;

399 
ñt
->
Àn
 = (
u_sh‹t
Ë
«mes
[
n
].
key
.len;

401 
	`ngx_°æow
(
ñt
->
«me
, 
«mes
[
n
].
key
.
d©a
,Çames[n].key.
Àn
);

403 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

406 
i
 = 0; i < 
size
; i++) {

407 i‡(
buckës
[
i
] =
NULL
) {

411 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
i
] + 
ã°
[i]);

413 
ñt
->
vÆue
 = 
NULL
;

416 
	`ngx_‰ì
(
ã°
);

418 
höô
->
hash
->
buckës
 = buckets;

419 
höô
->
hash
->
size
 = size;

423 
i
 = 0; i < 
size
; i++) {

424 
ngx_°r_t
 
vÆ
;

425 
ngx_uöt_t
 
key
;

427 
ñt
 = 
buckës
[
i
];

429 i‡(
ñt
 =
NULL
) {

430 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

431 "%ui: NULL", 
i
);

435 
ñt
->
vÆue
) {

436 
vÆ
.
Àn
 = 
ñt
->len;

437 
vÆ
.
d©a
 = &
ñt
->
«me
[0];

439 
key
 = 
höô
->
	`key
(
vÆ
.
d©a
, vÆ.
Àn
);

441 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

442 "%ui: %∞\"%V\" %ui", 
i
, 
ñt
, &
vÆ
, 
key
);

444 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

457 
ngx_uöt_t
 
√…s
)

459 
size_t
 
Àn
, 
dŸ_Àn
;

460 
ngx_uöt_t
 
i
, 
n
, 
dŸ
;

461 
ngx_¨øy_t
 
cuº_«mes
, 
√xt_«mes
;

462 
ngx_hash_key_t
 *
«me
, *
√xt_«me
;

463 
ngx_hash_öô_t
 
h
;

464 
ngx_hash_wûdˇrd_t
 *
wdc
;

466 i‡(
	`ngx_¨øy_öô
(&
cuº_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

467 (
ngx_hash_key_t
))

468 !
NGX_OK
)

470  
NGX_ERROR
;

473 i‡(
	`ngx_¨øy_öô
(&
√xt_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

474 (
ngx_hash_key_t
))

475 !
NGX_OK
)

477  
NGX_ERROR
;

480 
n
 = 0;Ç < 
√…s
;Ç = 
i
) {

483 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

484 "wc0: \"%V\"", &
«mes
[
n
].
key
);

487 
dŸ
 = 0;

489 
Àn
 = 0;Üí < 
«mes
[
n
].
key
.len;Üen++) {

490 i‡(
«mes
[
n
].
key
.
d©a
[
Àn
] == '.') {

491 
dŸ
 = 1;

496 
«me
 = 
	`ngx_¨øy_push
(&
cuº_«mes
);

497 i‡(
«me
 =
NULL
) {

498  
NGX_ERROR
;

501 
«me
->
key
.
Àn
 =Üen;

502 
«me
->
key
.
d©a
 = 
«mes
[
n
].key.data;

503 
«me
->
key_hash
 = 
höô
->
	`key
“ame->
key
.
d©a
,Çame->key.
Àn
);

504 
«me
->
vÆue
 = 
«mes
[
n
].value;

507 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

508 "wc1: \"%V\" %ui", &
«me
->
key
, 
dŸ
);

511 
dŸ_Àn
 = 
Àn
 + 1;

513 i‡(
dŸ
) {

514 
Àn
++;

517 
√xt_«mes
.
√…s
 = 0;

519 i‡(
«mes
[
n
].
key
.
Àn
 !=Üen) {

520 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

521 i‡(
√xt_«me
 =
NULL
) {

522  
NGX_ERROR
;

525 
√xt_«me
->
key
.
Àn
 = 
«mes
[
n
].key.len -Üen;

526 
√xt_«me
->
key
.
d©a
 = 
«mes
[
n
].key.d©®+ 
Àn
;

527 
√xt_«me
->
key_hash
 = 0;

528 
√xt_«me
->
vÆue
 = 
«mes
[
n
].value;

531 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

532 "wc2: \"%V\"", &
√xt_«me
->
key
);

536 
i
 = 
n
 + 1; i < 
√…s
; i++) {

537 i‡(
	`ngx_°∫cmp
(
«mes
[
n
].
key
.
d©a
,Çames[
i
].key.d©a, 
Àn
) != 0) {

541 i‡(!
dŸ


542 && 
«mes
[
i
].
key
.
Àn
 >Üen

543 && 
«mes
[
i
].
key
.
d©a
[
Àn
] != '.')

548 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

549 i‡(
√xt_«me
 =
NULL
) {

550  
NGX_ERROR
;

553 
√xt_«me
->
key
.
Àn
 = 
«mes
[
i
].key.À¿- 
dŸ_Àn
;

554 
√xt_«me
->
key
.
d©a
 = 
«mes
[
i
].key.d©®+ 
dŸ_Àn
;

555 
√xt_«me
->
key_hash
 = 0;

556 
√xt_«me
->
vÆue
 = 
«mes
[
i
].value;

559 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

560 "wc3: \"%V\"", &
√xt_«me
->
key
);

564 i‡(
√xt_«mes
.
√…s
) {

566 
h
 = *
höô
;

567 
h
.
hash
 = 
NULL
;

569 i‡(
	`ngx_hash_wûdˇrd_öô
(&
h
, (
ngx_hash_key_t
 *Ë
√xt_«mes
.
ñts
,

570 
√xt_«mes
.
√…s
)

571 !
NGX_OK
)

573  
NGX_ERROR
;

576 
wdc
 = (
ngx_hash_wûdˇrd_t
 *Ë
h
.
hash
;

578 i‡(
«mes
[
n
].
key
.
Àn
 ==Üen) {

579 
wdc
->
vÆue
 = 
«mes
[
n
].value;

582 
«me
->
vÆue
 = (*Ë((
uöçå_t
Ë
wdc
 | (
dŸ
 ? 3 : 2));

584 } i‡(
dŸ
) {

585 
«me
->
vÆue
 = (*Ë((
uöçå_t
)Çame->value | 1);

589 i‡(
	`ngx_hash_öô
(
höô
, (
ngx_hash_key_t
 *Ë
cuº_«mes
.
ñts
,

590 
cuº_«mes
.
√…s
)

591 !
NGX_OK
)

593  
NGX_ERROR
;

596  
NGX_OK
;

597 
	}
}

600 
ngx_uöt_t


601 
	$ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

603 
ngx_uöt_t
 
i
, 
key
;

605 
key
 = 0;

607 
i
 = 0; i < 
Àn
; i++) {

608 
key
 = 
	`ngx_hash
(key, 
d©a
[
i
]);

611  
key
;

612 
	}
}

615 
ngx_uöt_t


616 
	$ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

618 
ngx_uöt_t
 
i
, 
key
;

620 
key
 = 0;

622 
i
 = 0; i < 
Àn
; i++) {

623 
key
 = 
	`ngx_hash
(key, 
	`ngx_tﬁowî
(
d©a
[
i
]));

626  
key
;

627 
	}
}

630 
ngx_uöt_t


631 
	$ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

633 
ngx_uöt_t
 
key
;

635 
key
 = 0;

637 
n
--) {

638 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

639 
key
 = 
	`ngx_hash
(key, *
d°
);

640 
d°
++;

641 
§c
++;

644  
key
;

645 
	}
}

648 
ngx_öt_t


649 
	$ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
)

651 
ngx_uöt_t
 
asize
;

653 i‡(
ty≥
 =
NGX_HASH_SMALL
) {

654 
asize
 = 4;

655 
ha
->
hsize
 = 107;

658 
asize
 = 
NGX_HASH_LARGE_ASIZE
;

659 
ha
->
hsize
 = 
NGX_HASH_LARGE_HSIZE
;

662 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys
, ha->
ãmp_poﬁ
, 
asize
, (
ngx_hash_key_t
))

663 !
NGX_OK
)

665  
NGX_ERROR
;

668 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_hód
, ha->
ãmp_poﬁ
, 
asize
,

669 (
ngx_hash_key_t
))

670 !
NGX_OK
)

672  
NGX_ERROR
;

675 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_èû
, ha->
ãmp_poﬁ
, 
asize
,

676 (
ngx_hash_key_t
))

677 !
NGX_OK
)

679  
NGX_ERROR
;

682 
ha
->
keys_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
, (
ngx_¨øy_t
Ë* ha->
hsize
);

683 i‡(
ha
->
keys_hash
 =
NULL
) {

684  
NGX_ERROR
;

687 
ha
->
dns_wc_hód_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

688 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

689 i‡(
ha
->
dns_wc_hód_hash
 =
NULL
) {

690  
NGX_ERROR
;

693 
ha
->
dns_wc_èû_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

694 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

695 i‡(
ha
->
dns_wc_èû_hash
 =
NULL
) {

696  
NGX_ERROR
;

699  
NGX_OK
;

700 
	}
}

703 
ngx_öt_t


704 
	$ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
, *
vÆue
,

705 
ngx_uöt_t
 
Êags
)

707 
size_t
 
Àn
;

708 
u_ch¨
 *
p
;

709 
ngx_°r_t
 *
«me
;

710 
ngx_uöt_t
 
i
, 
k
, 
n
, 
skù
, 
œ°
;

711 
ngx_¨øy_t
 *
keys
, *
hwc
;

712 
ngx_hash_key_t
 *
hk
;

714 
œ°
 = 
key
->
Àn
;

716 i‡(
Êags
 & 
NGX_HASH_WILDCARD_KEY
) {

723 
n
 = 0;

725 
i
 = 0; i < 
key
->
Àn
; i++) {

727 i‡(
key
->
d©a
[
i
] == '*') {

728 i‡(++
n
 > 1) {

729  
NGX_DECLINED
;

733 i‡(
key
->
d©a
[
i
] == '.' && key->data[i + 1] == '.') {

734  
NGX_DECLINED
;

738 i‡(
key
->
Àn
 > 1 && key->
d©a
[0] == '.') {

739 
skù
 = 1;

740 
wûdˇrd
;

743 i‡(
key
->
Àn
 > 2) {

745 i‡(
key
->
d©a
[0] == '*' && key->data[1] == '.') {

746 
skù
 = 2;

747 
wûdˇrd
;

750 i‡(
key
->
d©a
[
i
 - 2] == '.' && key->data[i - 1] == '*') {

751 
skù
 = 0;

752 
œ°
 -= 2;

753 
wûdˇrd
;

757 i‡(
n
) {

758  
NGX_DECLINED
;

764 
k
 = 0;

766 
i
 = 0; i < 
œ°
; i++) {

767 i‡(!(
Êags
 & 
NGX_HASH_READONLY_KEY
)) {

768 
key
->
d©a
[
i
] = 
	`ngx_tﬁowî
(key->data[i]);

770 
k
 = 
	`ngx_hash
(k, 
key
->
d©a
[
i
]);

773 
k
 %
ha
->
hsize
;

777 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

779 i‡(
«me
) {

780 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

781 i‡(
œ°
 !
«me
[
i
].
Àn
) {

785 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, 
«me
[
i
].d©a, 
œ°
) == 0) {

786  
NGX_BUSY
;

791 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

792 (
ngx_°r_t
))

793 !
NGX_OK
)

795  
NGX_ERROR
;

799 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

800 i‡(
«me
 =
NULL
) {

801  
NGX_ERROR
;

804 *
«me
 = *
key
;

806 
hk
 = 
	`ngx_¨øy_push
(&
ha
->
keys
);

807 i‡(
hk
 =
NULL
) {

808  
NGX_ERROR
;

811 
hk
->
key
 = *key;

812 
hk
->
key_hash
 = 
	`ngx_hash_key
(
key
->
d©a
, 
œ°
);

813 
hk
->
vÆue
 = value;

815  
NGX_OK
;

818 
wûdˇrd
:

822 
k
 = 
	`ngx_hash_°æow
(&
key
->
d©a
[
skù
], &key->d©a[skù], 
œ°
 - skip);

824 
k
 %
ha
->
hsize
;

826 i‡(
skù
 == 1) {

830 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

832 i‡(
«me
) {

833 
Àn
 = 
œ°
 - 
skù
;

835 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

836 i‡(
Àn
 !
«me
[
i
].len) {

840 i‡(
	`ngx_°∫cmp
(&
key
->
d©a
[1], 
«me
[
i
].d©a, 
Àn
) == 0) {

841  
NGX_BUSY
;

846 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

847 (
ngx_°r_t
))

848 !
NGX_OK
)

850  
NGX_ERROR
;

854 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

855 i‡(
«me
 =
NULL
) {

856  
NGX_ERROR
;

859 
«me
->
Àn
 = 
œ°
 - 1;

860 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

861 i‡(
«me
->
d©a
 =
NULL
) {

862  
NGX_ERROR
;

865 
	`ngx_mem˝y
(
«me
->
d©a
, &
key
->d©a[1],Çame->
Àn
);

869 i‡(
skù
) {

876 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

877 i‡(
p
 =
NULL
) {

878  
NGX_ERROR
;

881 
Àn
 = 0;

882 
n
 = 0;

884 
i
 = 
œ°
 - 1; i; i--) {

885 i‡(
key
->
d©a
[
i
] == '.') {

886 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[
i
 + 1], 
Àn
);

887 
n
 +
Àn
;

888 
p
[
n
++] = '.';

889 
Àn
 = 0;

893 
Àn
++;

896 i‡(
Àn
) {

897 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[1], 
Àn
);

898 
n
 +
Àn
;

901 
p
[
n
] = '\0';

903 
hwc
 = &
ha
->
dns_wc_hód
;

904 
keys
 = &
ha
->
dns_wc_hód_hash
[
k
];

910 
œ°
++;

912 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

913 i‡(
p
 =
NULL
) {

914  
NGX_ERROR
;

917 
	`ngx_˝y°∫
(
p
, 
key
->
d©a
, 
œ°
);

919 
hwc
 = &
ha
->
dns_wc_èû
;

920 
keys
 = &
ha
->
dns_wc_èû_hash
[
k
];

926 
«me
 = 
keys
->
ñts
;

928 i‡(
«me
) {

929 
Àn
 = 
œ°
 - 
skù
;

931 
i
 = 0; i < 
keys
->
√…s
; i++) {

932 i‡(
Àn
 !
«me
[
i
].len) {

936 i‡(
	`ngx_°∫cmp
(
key
->
d©a
 + 
skù
, 
«me
[
i
].d©a, 
Àn
) == 0) {

937  
NGX_BUSY
;

942 i‡(
	`ngx_¨øy_öô
(
keys
, 
ha
->
ãmp_poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
)

944  
NGX_ERROR
;

948 
«me
 = 
	`ngx_¨øy_push
(
keys
);

949 i‡(
«me
 =
NULL
) {

950  
NGX_ERROR
;

953 
«me
->
Àn
 = 
œ°
 - 
skù
;

954 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

955 i‡(
«me
->
d©a
 =
NULL
) {

956  
NGX_ERROR
;

959 
	`ngx_mem˝y
(
«me
->
d©a
, 
key
->d©®+ 
skù
,Çame->
Àn
);

964 
hk
 = 
	`ngx_¨øy_push
(
hwc
);

965 i‡(
hk
 =
NULL
) {

966  
NGX_ERROR
;

969 
hk
->
key
.
Àn
 = 
œ°
 - 1;

970 
hk
->
key
.
d©a
 = 
p
;

971 
hk
->
key_hash
 = 0;

972 
hk
->
vÆue
 = value;

974  
NGX_OK
;

975 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_hash.h

8 #i‚de‡
_NGX_HASH_H_INCLUDED_


9 
	#_NGX_HASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mvÆue
;

18 
u_sh‹t
 
	mÀn
;

19 
u_ch¨
 
	m«me
[1];

20 } 
	tngx_hash_ñt_t
;

24 
ngx_hash_ñt_t
 **
	mbuckës
;

25 
ngx_uöt_t
 
	msize
;

26 } 
	tngx_hash_t
;

30 
ngx_hash_t
 
	mhash
;

31 *
	mvÆue
;

32 } 
	tngx_hash_wûdˇrd_t
;

36 
ngx_°r_t
 
	mkey
;

37 
ngx_uöt_t
 
	mkey_hash
;

38 *
	mvÆue
;

39 } 
	tngx_hash_key_t
;

42 
	$ngx_uöt_t
 (*
	tngx_hash_key_±
Ë(
	tu_ch¨
 *
	td©a
, 
	tsize_t
 
	tÀn
);

46 
ngx_hash_t
 
hash
;

47 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

48 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

49 } 
	tngx_hash_comböed_t
;

53 
ngx_hash_t
 *
hash
;

54 
ngx_hash_key_±
 
key
;

56 
ngx_uöt_t
 
max_size
;

57 
ngx_uöt_t
 
buckë_size
;

59 *
«me
;

60 
ngx_poﬁ_t
 *
poﬁ
;

61 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

62 } 
	tngx_hash_öô_t
;

65 
	#NGX_HASH_SMALL
 1

	)

66 
	#NGX_HASH_LARGE
 2

	)

68 
	#NGX_HASH_LARGE_ASIZE
 16384

	)

69 
	#NGX_HASH_LARGE_HSIZE
 10007

	)

71 
	#NGX_HASH_WILDCARD_KEY
 1

	)

72 
	#NGX_HASH_READONLY_KEY
 2

	)

76 
ngx_uöt_t
 
hsize
;

78 
ngx_poﬁ_t
 *
poﬁ
;

79 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

81 
ngx_¨øy_t
 
keys
;

82 
ngx_¨øy_t
 *
keys_hash
;

84 
ngx_¨øy_t
 
dns_wc_hód
;

85 
ngx_¨øy_t
 *
dns_wc_hód_hash
;

87 
ngx_¨øy_t
 
dns_wc_èû
;

88 
ngx_¨øy_t
 *
dns_wc_èû_hash
;

89 } 
	tngx_hash_keys_¨øys_t
;

93 
ngx_uöt_t
 
hash
;

94 
ngx_°r_t
 
key
;

95 
ngx_°r_t
 
vÆue
;

96 
u_ch¨
 *
lowˇ£_key
;

97 } 
	tngx_èbÀ_ñt_t
;

100 *
	`ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

101 *
	`ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

102 *
	`ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

103 *
	`ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
,

104 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

106 
ngx_öt_t
 
	`ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

107 
ngx_uöt_t
 
√…s
);

108 
ngx_öt_t
 
	`ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

109 
ngx_uöt_t
 
√…s
);

111 
	#ngx_hash
(
key
, 
c
Ë((
ngx_uöt_t
Ëkey * 31 + c)

	)

112 
ngx_uöt_t
 
	`ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

113 
ngx_uöt_t
 
	`ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

114 
ngx_uöt_t
 
	`ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

117 
ngx_öt_t
 
	`ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
);

118 
ngx_öt_t
 
	`ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
,

119 *
vÆue
, 
ngx_uöt_t
 
Êags
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_inet.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

13 
ngx_öt_t
 
ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

14 
ngx_öt_t
 
ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

17 
ö_addr_t


18 
	$ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

20 
u_ch¨
 *
p
, 
c
;

21 
ö_addr_t
 
addr
;

22 
ngx_uöt_t
 
o˘ë
, 
n
;

24 
addr
 = 0;

25 
o˘ë
 = 0;

26 
n
 = 0;

28 
p
 = 
ãxt
;Ö <Åexà+ 
Àn
;Ö++) {

30 
c
 = *
p
;

32 i‡(
c
 >= '0' && c <= '9') {

33 
o˘ë
 = o˘ë * 10 + (
c
 - '0');

37 i‡(
c
 ='.' && 
o˘ë
 < 256) {

38 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

39 
o˘ë
 = 0;

40 
n
++;

44  
INADDR_NONE
;

47 i‡(
n
 =3 && 
o˘ë
 < 256) {

48 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

49  
	`ht⁄l
(
addr
);

52  
INADDR_NONE
;

53 
	}
}

56 #i‡(
NGX_HAVE_INET6
)

58 
ngx_öt_t


59 
	$ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
)

61 
u_ch¨
 
c
, *
zîo
, *
digô
, *
s
, *
d
;

62 
size_t
 
Àn4
;

63 
ngx_uöt_t
 
n
, 
nibbÀs
, 
w‹d
;

65 i‡(
Àn
 == 0) {

66  
NGX_ERROR
;

69 
zîo
 = 
NULL
;

70 
digô
 = 
NULL
;

71 
Àn4
 = 0;

72 
nibbÀs
 = 0;

73 
w‹d
 = 0;

74 
n
 = 8;

76 i‡(
p
[0] == ':') {

77 
p
++;

78 
Àn
--;

81  ; 
Àn
;Üen--) {

82 
c
 = *
p
++;

84 i‡(
c
 == ':') {

85 i‡(
nibbÀs
) {

86 
digô
 = 
p
;

87 
Àn4
 = 
Àn
;

88 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

89 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

91 i‡(--
n
) {

92 
nibbÀs
 = 0;

93 
w‹d
 = 0;

98 i‡(
zîo
 =
NULL
) {

99 
digô
 = 
p
;

100 
Àn4
 = 
Àn
;

101 
zîo
 = 
addr
;

106  
NGX_ERROR
;

109 i‡(
c
 ='.' && 
nibbÀs
) {

110 i‡(
n
 < 2 || 
digô
 =
NULL
) {

111  
NGX_ERROR
;

114 
w‹d
 = 
	`ngx_öë_addr
(
digô
, 
Àn4
 - 1);

115 i‡(
w‹d
 =
INADDR_NONE
) {

116  
NGX_ERROR
;

119 
w‹d
 = 
	`¡ohl
(word);

120 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 24) & 0xff);

121 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 16) & 0xff);

122 
n
--;

126 i‡(++
nibbÀs
 > 4) {

127  
NGX_ERROR
;

130 i‡(
c
 >= '0' && c <= '9') {

131 
w‹d
 = w‹d * 16 + (
c
 - '0');

135 
c
 |= 0x20;

137 i‡(
c
 >= 'a' && c <= 'f') {

138 
w‹d
 = w‹d * 16 + (
c
 - 'a') + 10;

142  
NGX_ERROR
;

145 i‡(
nibbÀs
 =0 && 
zîo
 =
NULL
) {

146  
NGX_ERROR
;

149 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

150 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

152 i‡(--
n
) {

153 i‡(
zîo
) {

154 
n
 *= 2;

155 
s
 = 
addr
 - 1;

156 
d
 = 
s
 + 
n
;

157 
s
 >
zîo
) {

158 *
d
-- = *
s
--;

160 
	`ngx_memzîo
(
zîo
, 
n
);

161  
NGX_OK
;

165 i‡(
zîo
 =
NULL
) {

166  
NGX_OK
;

170  
NGX_ERROR
;

171 
	}
}

176 
size_t


177 
	$ngx_sock_¡›
(
sockaddr
 *
ß
, 
sockÀn_t
 
sockÀn
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
,

178 
ngx_uöt_t
 
p‹t
)

180 
u_ch¨
 *
p
;

181 
sockaddr_ö
 *
sö
;

182 #i‡(
NGX_HAVE_INET6
)

183 
size_t
 
n
;

184 
sockaddr_ö6
 *
sö6
;

186 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

187 
sockaddr_un
 *
ßun
;

190 
ß
->
ß_Ámûy
) {

192 
AF_INET
:

194 
sö
 = (
sockaddr_ö
 *Ë
ß
;

195 
p
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

197 i‡(
p‹t
) {

198 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud:%d",

199 
p
[0],Ö[1],Ö[2],Ö[3], 
	`¡ohs
(
sö
->
sö_p‹t
));

201 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

202 
p
[0],Ö[1],Ö[2],Ö[3]);

205  (
p
 - 
ãxt
);

207 #i‡(
NGX_HAVE_INET6
)

209 
AF_INET6
:

211 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

213 
n
 = 0;

215 i‡(
p‹t
) {

216 
ãxt
[
n
++] = '[';

219 
n
 = 
	`ngx_öë6_¡›
(
sö6
->
sö6_addr
.
s6_addr
, &
ãxt
[n], 
Àn
);

221 i‡(
p‹t
) {

222 
n
 = 
	`ngx_•rötf
(&
ãxt
[1 +Ç], "]:%d",

223 
	`¡ohs
(
sö6
->
sö6_p‹t
)Ë- 
ãxt
;

226  
n
;

229 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

231 
AF_UNIX
:

232 
ßun
 = (
sockaddr_un
 *Ë
ß
;

236 i‡(
sockÀn
 <(
sockÀn_t
Ë
	`off£tof
(
sockaddr_un
, 
sun_∑th
)) {

237 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%Z");

240 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%s%Z", 
ßun
->
sun_∑th
);

245  (
p
 - 
ãxt
 - 1);

252 
	}
}

255 
size_t


256 
	$ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

258 
u_ch¨
 *
p
;

260 
Ámûy
) {

262 
AF_INET
:

264 
p
 = 
addr
;

266  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

267 
p
[0],Ö[1],Ö[2],Ö[3])

268 - 
ãxt
;

270 #i‡(
NGX_HAVE_INET6
)

272 
AF_INET6
:

273  
	`ngx_öë6_¡›
(
addr
, 
ãxt
, 
Àn
);

280 
	}
}

283 #i‡(
NGX_HAVE_INET6
)

285 
size_t


286 
	$ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, 
size_t
 
Àn
)

288 
u_ch¨
 *
d°
;

289 
size_t
 
max
, 
n
;

290 
ngx_uöt_t
 
i
, 
zîo
, 
œ°
;

292 i‡(
Àn
 < 
NGX_INET6_ADDRSTRLEN
) {

296 
zîo
 = (
ngx_uöt_t
) -1;

297 
œ°
 = (
ngx_uöt_t
) -1;

298 
max
 = 1;

299 
n
 = 0;

301 
i
 = 0; i < 16; i += 2) {

303 i‡(
p
[
i
] ||Ö[i + 1]) {

305 i‡(
max
 < 
n
) {

306 
zîo
 = 
œ°
;

307 
max
 = 
n
;

310 
n
 = 0;

314 i‡(
n
++ == 0) {

315 
œ°
 = 
i
;

319 i‡(
max
 < 
n
) {

320 
zîo
 = 
œ°
;

321 
max
 = 
n
;

324 
d°
 = 
ãxt
;

325 
n
 = 16;

327 i‡(
zîo
 == 0) {

329 i‡((
max
 =5 && 
p
[10] == 0xff &&Ö[11] == 0xff)

330 || (
max
 == 6)

331 || (
max
 =7 && 
p
[14] != 0 &&Ö[15] != 1))

333 
n
 = 12;

336 *
d°
++ = ':';

339 
i
 = 0; i < 
n
; i += 2) {

341 i‡(
i
 =
zîo
) {

342 *
d°
++ = ':';

343 
i
 +(
max
 - 1) * 2;

347 
d°
 = 
	`ngx_•rötf
(d°, "%uxi", 
p
[
i
] * 256 +Ö[i + 1]);

349 i‡(
i
 < 14) {

350 *
d°
++ = ':';

354 i‡(
n
 == 12) {

355 
d°
 = 
	`ngx_•rötf
(d°, "%ud.%ud.%ud.%ud", 
p
[12],Ö[13],Ö[14],Ö[15]);

358  
d°
 - 
ãxt
;

359 
	}
}

364 
ngx_öt_t


365 
	$ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
)

367 
u_ch¨
 *
addr
, *
mask
, *
œ°
;

368 
size_t
 
Àn
;

369 
ngx_öt_t
 
shi·
;

370 #i‡(
NGX_HAVE_INET6
)

371 
ngx_öt_t
 
rc
;

372 
ngx_uöt_t
 
s
, 
i
;

375 
addr
 = 
ãxt
->
d©a
;

376 
œ°
 = 
addr
 + 
ãxt
->
Àn
;

378 
mask
 = 
	`ngx_°æchr
(
addr
, 
œ°
, '/');

379 
Àn
 = (
mask
 ? mask : 
œ°
Ë- 
addr
;

381 
cidr
->
u
.
ö
.
addr
 = 
	`ngx_öë_addr
◊ddr, 
Àn
);

383 i‡(
cidr
->
u
.
ö
.
addr
 !
INADDR_NONE
) {

384 
cidr
->
Ámûy
 = 
AF_INET
;

386 i‡(
mask
 =
NULL
) {

387 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

388  
NGX_OK
;

391 #i‡(
NGX_HAVE_INET6
)

392 } i‡(
	`ngx_öë6_addr
(
addr
, 
Àn
, 
cidr
->
u
.
ö6
.addr.
s6_addr
Ë=
NGX_OK
) {

393 
cidr
->
Ámûy
 = 
AF_INET6
;

395 i‡(
mask
 =
NULL
) {

396 
	`ngx_mem£t
(
cidr
->
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

397  
NGX_OK
;

402  
NGX_ERROR
;

405 
mask
++;

407 
shi·
 = 
	`ngx_©oi
(
mask
, 
œ°
 - mask);

408 i‡(
shi·
 =
NGX_ERROR
) {

409  
NGX_ERROR
;

412 
cidr
->
Ámûy
) {

414 #i‡(
NGX_HAVE_INET6
)

415 
AF_INET6
:

416 i‡(
shi·
 > 128) {

417  
NGX_ERROR
;

420 
addr
 = 
cidr
->
u
.
ö6
.addr.
s6_addr
;

421 
mask
 = 
cidr
->
u
.
ö6
.mask.
s6_addr
;

422 
rc
 = 
NGX_OK
;

424 
i
 = 0; i < 16; i++) {

426 
s
 = (
shi·
 > 8) ? 8 : shift;

427 
shi·
 -
s
;

429 
mask
[
i
] = (
u_ch¨
Ë(0xffu << (8 - 
s
));

431 i‡(
addr
[
i
] !◊ddr[i] & 
mask
[i])) {

432 
rc
 = 
NGX_DONE
;

433 
addr
[
i
] &
mask
[i];

437  
rc
;

441 i‡(
shi·
 > 32) {

442  
NGX_ERROR
;

445 i‡(
shi·
) {

446 
cidr
->
u
.
ö
.
mask
 = 
	`ht⁄l
((
uöt32_t
Ë(0xffffffffu << (32 - 
shi·
)));

450 
cidr
->
u
.
ö
.
mask
 = 0;

453 i‡(
cidr
->
u
.
ö
.
addr
 =(cidr->u.ö.add∏& cidr->u.ö.
mask
)) {

454  
NGX_OK
;

457 
cidr
->
u
.
ö
.
addr
 &cidr->u.ö.
mask
;

459  
NGX_DONE
;

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

467 
ö_addr_t
 
öaddr
;

468 
ngx_uöt_t
 
Ámûy
;

469 
sockaddr_ö
 *
sö
;

470 #i‡(
NGX_HAVE_INET6
)

471 
ö6_addr
 
öaddr6
;

472 
sockaddr_ö6
 *
sö6
;

478 
	`ngx_memzîo
(&
öaddr6
, (
ö6_addr
));

481 
öaddr
 = 
	`ngx_öë_addr
(
ãxt
, 
Àn
);

483 i‡(
öaddr
 !
INADDR_NONE
) {

484 
Ámûy
 = 
AF_INET
;

485 
Àn
 = (
sockaddr_ö
);

487 #i‡(
NGX_HAVE_INET6
)

488 } i‡(
	`ngx_öë6_addr
(
ãxt
, 
Àn
, 
öaddr6
.
s6_addr
Ë=
NGX_OK
) {

489 
Ámûy
 = 
AF_INET6
;

490 
Àn
 = (
sockaddr_ö6
);

494  
NGX_DECLINED
;

497 
addr
->
sockaddr
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Àn
);

498 i‡(
addr
->
sockaddr
 =
NULL
) {

499  
NGX_ERROR
;

502 
addr
->
sockaddr
->
ß_Ámûy
 = (
u_ch¨
Ë
Ámûy
;

503 
addr
->
sockÀn
 = 
Àn
;

505 
Ámûy
) {

507 #i‡(
NGX_HAVE_INET6
)

508 
AF_INET6
:

509 
sö6
 = (
sockaddr_ö6
 *Ë
addr
->
sockaddr
;

510 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
öaddr6
.s6_addr, 16);

515 
sö
 = (
sockaddr_ö
 *Ë
addr
->
sockaddr
;

516 
sö
->
sö_addr
.
s_addr
 = 
öaddr
;

520  
NGX_OK
;

521 
	}
}

524 
ngx_öt_t


525 
	$ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

527 
u_ch¨
 *
p
;

529 
p
 = 
u
->
uæ
.
d©a
;

531 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "unix:", 5) == 0) {

532  
	`ngx_∑r£_unix_domaö_uæ
(
poﬁ
, 
u
);

535 i‡(
p
[0] == '[') {

536  
	`ngx_∑r£_öë6_uæ
(
poﬁ
, 
u
);

539  
	`ngx_∑r£_öë_uæ
(
poﬁ
, 
u
);

540 
	}
}

543 
ngx_öt_t


544 
	$ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

546 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

547 
u_ch¨
 *
∑th
, *
uri
, *
œ°
;

548 
size_t
 
Àn
;

549 
sockaddr_un
 *
ßun
;

551 
Àn
 = 
u
->
uæ
.len;

552 
∑th
 = 
u
->
uæ
.
d©a
;

554 
∑th
 += 5;

555 
Àn
 -= 5;

557 i‡(
u
->
uri_∑π
) {

559 
œ°
 = 
∑th
 + 
Àn
;

560 
uri
 = 
	`ngx_°æchr
(
∑th
, 
œ°
, ':');

562 i‡(
uri
) {

563 
Àn
 = 
uri
 - 
∑th
;

564 
uri
++;

565 
u
->
uri
.
Àn
 = 
œ°
 - uri;

566 
u
->
uri
.
d©a
 = uri;

570 i‡(
Àn
 == 0) {

571 
u
->
îr
 = "noÖath inÅhe unix domain socket";

572  
NGX_ERROR
;

575 
u
->
ho°
.
Àn
 =Üen++;

576 
u
->
ho°
.
d©a
 = 
∑th
;

578 i‡(
Àn
 > (
ßun
->
sun_∑th
)) {

579 
u
->
îr
 = "tooÜongÖath inÅhe unix domain socket";

580  
NGX_ERROR
;

583 
u
->
sockÀn
 = (
sockaddr_un
);

584 
ßun
 = (
sockaddr_un
 *Ë&
u
->
sockaddr
;

585 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

586 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

588 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

589 i‡(
u
->
addrs
 =
NULL
) {

590  
NGX_ERROR
;

593 
ßun
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_un
));

594 i‡(
ßun
 =
NULL
) {

595  
NGX_ERROR
;

598 
u
->
Ámûy
 = 
AF_UNIX
;

599 
u
->
«ddrs
 = 1;

601 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

602 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

604 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
ßun
;

605 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_un
);

606 
u
->
addrs
[0].
«me
.
Àn
 =Üen + 4;

607 
u
->
addrs
[0].
«me
.
d©a
 = u->
uæ
.data;

609  
NGX_OK
;

613 
u
->
îr
 = "the unix domain socketsáreÇot supported onÅhisÖlatform";

615  
NGX_ERROR
;

618 
	}
}

621 
ngx_öt_t


622 
	$ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

624 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
, *
¨gs
;

625 
size_t
 
Àn
;

626 
ngx_öt_t
 
n
;

627 
sockaddr_ö
 *
sö
;

628 #i‡(
NGX_HAVE_INET6
)

629 
sockaddr_ö6
 *
sö6
;

632 
u
->
sockÀn
 = (
sockaddr_ö
);

633 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

634 
sö
->
sö_Ámûy
 = 
AF_INET
;

636 
u
->
Ámûy
 = 
AF_INET
;

638 
ho°
 = 
u
->
uæ
.
d©a
;

640 
œ°
 = 
ho°
 + 
u
->
uæ
.
Àn
;

642 
p‹t
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ':');

644 
uri
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '/');

646 
¨gs
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '?');

648 i‡(
¨gs
) {

649 i‡(
uri
 =
NULL
 || 
¨gs
 < uri) {

650 
uri
 = 
¨gs
;

654 i‡(
uri
) {

655 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

656 
u
->
îr
 = "invalid host";

657  
NGX_ERROR
;

660 
u
->
uri
.
Àn
 = 
œ°
 - uri;

661 
u
->
uri
.
d©a
 = uri;

663 
œ°
 = 
uri
;

665 i‡(
uri
 < 
p‹t
) {

666 
p‹t
 = 
NULL
;

670 i‡(
p‹t
) {

671 
p‹t
++;

673 
Àn
 = 
œ°
 - 
p‹t
;

675 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

677 i‡(
n
 < 1 ||Ç > 65535) {

678 
u
->
îr
 = "invalidÖort";

679  
NGX_ERROR
;

682 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

683 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

685 
u
->
p‹t_ãxt
.
Àn
 =Üen;

686 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

688 
œ°
 = 
p‹t
 - 1;

691 i‡(
uri
 =
NULL
) {

693 i‡(
u
->
li°í
) {

697 
n
 = 
	`ngx_©oi
(
ho°
, 
œ°
 - host);

699 i‡(
n
 !
NGX_ERROR
) {

701 i‡(
n
 < 1 ||Ç > 65535) {

702 
u
->
îr
 = "invalidÖort";

703  
NGX_ERROR
;

706 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

707 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

709 
u
->
p‹t_ãxt
.
Àn
 = 
œ°
 - 
ho°
;

710 
u
->
p‹t_ãxt
.
d©a
 = 
ho°
;

712 
u
->
wûdˇrd
 = 1;

714  
NGX_OK
;

719 
u
->
no_p‹t
 = 1;

720 
u
->
p‹t
 = u->
deÁu…_p‹t
;

721 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

724 
Àn
 = 
œ°
 - 
ho°
;

726 i‡(
Àn
 == 0) {

727 
u
->
îr
 = "no host";

728  
NGX_ERROR
;

731 
u
->
ho°
.
Àn
 =Üen;

732 
u
->
ho°
.
d©a
 = host;

734 i‡(
u
->
li°í
 && 
Àn
 =1 && *
ho°
 == '*') {

735 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

736 
u
->
wûdˇrd
 = 1;

737  
NGX_OK
;

740 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
ho°
, 
Àn
);

742 i‡(
sö
->
sö_addr
.
s_addr
 !
INADDR_NONE
) {

744 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

745 
u
->
wûdˇrd
 = 1;

748 
u
->
«ddrs
 = 1;

750 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

751 i‡(
u
->
addrs
 =
NULL
) {

752  
NGX_ERROR
;

755 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

756 i‡(
sö
 =
NULL
) {

757  
NGX_ERROR
;

760 
	`ngx_mem˝y
(
sö
, 
u
->
sockaddr
, (
sockaddr_ö
));

762 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

763 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

765 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

766 i‡(
p
 =
NULL
) {

767  
NGX_ERROR
;

770 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

771 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

772 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

774  
NGX_OK
;

777 i‡(
u
->
no_ªsﬁve
) {

778  
NGX_OK
;

781 i‡(
	`ngx_öë_ªsﬁve_ho°
(
poﬁ
, 
u
Ë!
NGX_OK
) {

782  
NGX_ERROR
;

785 
u
->
Ámûy
 = u->
addrs
[0].
sockaddr
->
ß_Ámûy
;

786 
u
->
sockÀn
 = u->
addrs
[0].socklen;

787 
	`ngx_mem˝y
(
u
->
sockaddr
, u->
addrs
[0].sockaddr, u->addrs[0].
sockÀn
);

789 
u
->
Ámûy
) {

791 #i‡(
NGX_HAVE_INET6
)

792 
AF_INET6
:

793 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

795 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

796 
u
->
wûdˇrd
 = 1;

803 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

805 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

806 
u
->
wûdˇrd
 = 1;

812  
NGX_OK
;

813 
	}
}

816 
ngx_öt_t


817 
	$ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

819 #i‡(
NGX_HAVE_INET6
)

820 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
;

821 
size_t
 
Àn
;

822 
ngx_öt_t
 
n
;

823 
sockaddr_ö6
 *
sö6
;

825 
u
->
sockÀn
 = (
sockaddr_ö6
);

826 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

827 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

829 
ho°
 = 
u
->
uæ
.
d©a
 + 1;

831 
œ°
 = 
u
->
uæ
.
d©a
 + u->uæ.
Àn
;

833 
p
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ']');

835 i‡(
p
 =
NULL
) {

836 
u
->
îr
 = "invalid host";

837  
NGX_ERROR
;

840 i‡(
œ°
 - 
p
) {

842 
p‹t
 = 
p
 + 1;

844 
uri
 = 
	`ngx_°æchr
(
p‹t
, 
œ°
, '/');

846 i‡(
uri
) {

847 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

848 
u
->
îr
 = "invalid host";

849  
NGX_ERROR
;

852 
u
->
uri
.
Àn
 = 
œ°
 - uri;

853 
u
->
uri
.
d©a
 = uri;

855 
œ°
 = 
uri
;

858 i‡(*
p‹t
 == ':') {

859 
p‹t
++;

861 
Àn
 = 
œ°
 - 
p‹t
;

863 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

865 i‡(
n
 < 1 ||Ç > 65535) {

866 
u
->
îr
 = "invalidÖort";

867  
NGX_ERROR
;

870 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

871 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

873 
u
->
p‹t_ãxt
.
Àn
 =Üen;

874 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

877 
u
->
no_p‹t
 = 1;

878 
u
->
p‹t
 = u->
deÁu…_p‹t
;

879 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

883 
Àn
 = 
p
 - 
ho°
;

885 i‡(
Àn
 == 0) {

886 
u
->
îr
 = "no host";

887  
NGX_ERROR
;

890 
u
->
ho°
.
Àn
 =Üen + 2;

891 
u
->
ho°
.
d©a
 = host - 1;

893 i‡(
	`ngx_öë6_addr
(
ho°
, 
Àn
, 
sö6
->
sö6_addr
.
s6_addr
Ë!
NGX_OK
) {

894 
u
->
îr
 = "invalid IPv6áddress";

895  
NGX_ERROR
;

898 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

899 
u
->
wûdˇrd
 = 1;

902 
u
->
Ámûy
 = 
AF_INET6
;

903 
u
->
«ddrs
 = 1;

905 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

906 i‡(
u
->
addrs
 =
NULL
) {

907  
NGX_ERROR
;

910 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö6
));

911 i‡(
sö6
 =
NULL
) {

912  
NGX_ERROR
;

915 
	`ngx_mem˝y
(
sö6
, 
u
->
sockaddr
, (
sockaddr_ö6
));

917 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö6
;

918 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö6
);

920 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

921 i‡(
p
 =
NULL
) {

922  
NGX_ERROR
;

925 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

926 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

927 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

929  
NGX_OK
;

933 
u
->
îr
 = "the INET6 socketsáreÇot supported onÅhisÖlatform";

935  
NGX_ERROR
;

938 
	}
}

941 #i‡(
NGX_HAVE_GETADDRINFO
 && 
NGX_HAVE_INET6
)

943 
ngx_öt_t


944 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

946 
u_ch¨
 *
p
, *
ho°
;

947 
size_t
 
Àn
;

948 
ö_p‹t_t
 
p‹t
;

949 
ngx_uöt_t
 
i
;

950 
addröfo
 
höts
, *
ªs
, *
Ω
;

951 
sockaddr_ö
 *
sö
;

952 
sockaddr_ö6
 *
sö6
;

954 
p‹t
 = 
	`ht⁄s
(
u
->port);

956 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

957 i‡(
ho°
 =
NULL
) {

958  
NGX_ERROR
;

961 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

963 
	`ngx_memzîo
(&
höts
, (
addröfo
));

964 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

965 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

966 #ifde‡
AI_ADDRCONFIG


967 
höts
.
ai_Êags
 = 
AI_ADDRCONFIG
;

970 i‡(
	`gëaddröfo
((*Ë
ho°
, 
NULL
, &
höts
, &
ªs
) != 0) {

971 
u
->
îr
 = "hostÇot found";

972 
	`ngx_‰ì
(
ho°
);

973  
NGX_ERROR
;

976 
	`ngx_‰ì
(
ho°
);

978 
i
 = 0, 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

980 
Ω
->
ai_Ámûy
) {

982 
AF_INET
:

983 
AF_INET6
:

990 
i
++;

993 i‡(
i
 == 0) {

994 
u
->
îr
 = "hostÇot found";

995 
Áûed
;

1000 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1001 i‡(
u
->
addrs
 =
NULL
) {

1002 
Áûed
;

1005 
u
->
«ddrs
 = 
i
;

1007 
i
 = 0;

1011 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1013 i‡(
Ω
->
ai_Ámûy
 !
AF_INET
) {

1017 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1018 i‡(
sö
 =
NULL
) {

1019 
Áûed
;

1022 
	`ngx_mem˝y
(
sö
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1024 
sö
->
sö_p‹t
 = 
p‹t
;

1026 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1027 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1029 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1031 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1032 i‡(
p
 =
NULL
) {

1033 
Áûed
;

1036 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
Ω
->
ai_addæí
, 
p
,Üen, 1);

1038 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1039 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1041 
i
++;

1044 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1046 i‡(
Ω
->
ai_Ámûy
 !
AF_INET6
) {

1050 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1051 i‡(
sö6
 =
NULL
) {

1052 
Áûed
;

1055 
	`ngx_mem˝y
(
sö6
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1057 
sö6
->
sö6_p‹t
 = 
p‹t
;

1059 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö6
;

1060 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1062 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + ("[]:65535") - 1;

1064 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1065 i‡(
p
 =
NULL
) {

1066 
Áûed
;

1069 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö6
, 
Ω
->
ai_addæí
, 
p
,

1070 
Àn
, 1);

1072 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1073 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1075 
i
++;

1078 
	`‰ìaddröfo
(
ªs
);

1079  
NGX_OK
;

1081 
Áûed
:

1083 
	`‰ìaddröfo
(
ªs
);

1084  
NGX_ERROR
;

1085 
	}
}

1089 
ngx_öt_t


1090 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

1092 
u_ch¨
 *
p
, *
ho°
;

1093 
size_t
 
Àn
;

1094 
ö_p‹t_t
 
p‹t
;

1095 
ö_addr_t
 
ö_addr
;

1096 
ngx_uöt_t
 
i
;

1097 
ho°ít
 *
h
;

1098 
sockaddr_ö
 *
sö
;

1102 
p‹t
 = 
	`ht⁄s
(
u
->port);

1104 
ö_addr
 = 
	`ngx_öë_addr
(
u
->
ho°
.
d©a
, u->ho°.
Àn
);

1106 i‡(
ö_addr
 =
INADDR_NONE
) {

1107 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

1108 i‡(
ho°
 =
NULL
) {

1109  
NGX_ERROR
;

1112 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

1114 
h
 = 
	`gëho°by«me
((*Ë
ho°
);

1116 
	`ngx_‰ì
(
ho°
);

1118 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

1119 
u
->
îr
 = "hostÇot found";

1120  
NGX_ERROR
;

1123 
i
 = 0; 
h
->
h_addr_li°
[i] !
NULL
; i++) { }

1127 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1128 i‡(
u
->
addrs
 =
NULL
) {

1129  
NGX_ERROR
;

1132 
u
->
«ddrs
 = 
i
;

1134 
i
 = 0; i < 
u
->
«ddrs
; i++) {

1136 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1137 i‡(
sö
 =
NULL
) {

1138  
NGX_ERROR
;

1141 
sö
->
sö_Ámûy
 = 
AF_INET
;

1142 
sö
->
sö_p‹t
 = 
p‹t
;

1143 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[
i
]);

1145 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1146 
u
->
addrs
[
i
].
sockÀn
 = (
sockaddr_ö
);

1148 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1150 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1151 i‡(
p
 =
NULL
) {

1152  
NGX_ERROR
;

1155 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
,

1156 (
sockaddr_ö
), 
p
, 
Àn
, 1);

1158 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1159 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1166 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

1167 i‡(
u
->
addrs
 =
NULL
) {

1168  
NGX_ERROR
;

1171 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1172 i‡(
sö
 =
NULL
) {

1173  
NGX_ERROR
;

1176 
u
->
«ddrs
 = 1;

1178 
sö
->
sö_Ámûy
 = 
AF_INET
;

1179 
sö
->
sö_p‹t
 = 
p‹t
;

1180 
sö
->
sö_addr
.
s_addr
 = 
ö_addr
;

1182 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

1183 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

1185 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

1186 i‡(
p
 =
NULL
) {

1187  
NGX_ERROR
;

1190 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

1191 &
u
->
ho°
, 
	`¡ohs
(
p‹t
)Ë- 
p
;

1192 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1195  
NGX_OK
;

1196 
	}
}

1201 
ngx_öt_t


1202 
	$ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, 
sockÀn_t
 
¶í1
,

1203 
sockaddr
 *
ß2
, 
sockÀn_t
 
¶í2
, 
ngx_uöt_t
 
cmp_p‹t
)

1205 
sockaddr_ö
 *
sö1
, *
sö2
;

1206 #i‡(
NGX_HAVE_INET6
)

1207 
sockaddr_ö6
 *
sö61
, *
sö62
;

1209 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1210 
sockaddr_un
 *
ßun1
, *
ßun2
;

1213 i‡(
ß1
->
ß_Ámûy
 !
ß2
->sa_family) {

1214  
NGX_DECLINED
;

1217 
ß1
->
ß_Ámûy
) {

1219 #i‡(
NGX_HAVE_INET6
)

1220 
AF_INET6
:

1222 
sö61
 = (
sockaddr_ö6
 *Ë
ß1
;

1223 
sö62
 = (
sockaddr_ö6
 *Ë
ß2
;

1225 i‡(
cmp_p‹t
 && 
sö61
->
sö6_p‹t
 !
sö62
->sin6_port) {

1226  
NGX_DECLINED
;

1229 i‡(
	`ngx_memcmp
(&
sö61
->
sö6_addr
, &
sö62
->sin6_addr, 16) != 0) {

1230  
NGX_DECLINED
;

1236 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1237 
AF_UNIX
:

1241 
ßun1
 = (
sockaddr_un
 *Ë
ß1
;

1242 
ßun2
 = (
sockaddr_un
 *Ë
ß2
;

1244 i‡(
	`ngx_memcmp
(&
ßun1
->
sun_∑th
, &
ßun2
->sun_path,

1245 (
ßun1
->
sun_∑th
))

1248  
NGX_DECLINED
;

1256 
sö1
 = (
sockaddr_ö
 *Ë
ß1
;

1257 
sö2
 = (
sockaddr_ö
 *Ë
ß2
;

1259 i‡(
cmp_p‹t
 && 
sö1
->
sö_p‹t
 !
sö2
->sin_port) {

1260  
NGX_DECLINED
;

1263 i‡(
sö1
->
sö_addr
.
s_addr
 !
sö2
->sin_addr.s_addr) {

1264  
NGX_DECLINED
;

1270  
NGX_OK
;

1271 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_inet.h

8 #i‚de‡
_NGX_INET_H_INCLUDED_


9 
	#_NGX_INET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

24 
	#NGX_INET_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

25 
	#NGX_INET6_ADDRSTRLEN
 \

26 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

27 
	#NGX_UNIX_ADDRSTRLEN
 \

28 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

30 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

31 
	#NGX_SOCKADDR_STRLEN
 (("unix:"Ë- 1 + 
NGX_UNIX_ADDRSTRLEN
)

	)

33 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET6_ADDRSTRLEN
 + ("[]:65535"Ë- 1)

	)

36 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

37 
	#NGX_SOCKADDRLEN
 (
sockaddr_un
)

	)

39 
	#NGX_SOCKADDRLEN
 512

	)

44 
ö_addr_t
 
	maddr
;

45 
ö_addr_t
 
	mmask
;

46 } 
	tngx_ö_cidr_t
;

49 #i‡(
NGX_HAVE_INET6
)

52 
ö6_addr
 
	maddr
;

53 
ö6_addr
 
	mmask
;

54 } 
	tngx_ö6_cidr_t
;

60 
ngx_uöt_t
 
	mÁmûy
;

62 
ngx_ö_cidr_t
 
	mö
;

63 #i‡(
NGX_HAVE_INET6
)

64 
ngx_ö6_cidr_t
 
	mö6
;

66 } 
	mu
;

67 } 
	tngx_cidr_t
;

71 
sockaddr
 *
	msockaddr
;

72 
sockÀn_t
 
	msockÀn
;

73 
ngx_°r_t
 
	m«me
;

74 } 
	tngx_addr_t
;

78 
ngx_°r_t
 
	muæ
;

79 
ngx_°r_t
 
	mho°
;

80 
ngx_°r_t
 
	mp‹t_ãxt
;

81 
ngx_°r_t
 
	muri
;

83 
ö_p‹t_t
 
	mp‹t
;

84 
ö_p‹t_t
 
	mdeÁu…_p‹t
;

85 
	mÁmûy
;

87 
	mli°í
:1;

88 
	muri_∑π
:1;

89 
	mno_ªsﬁve
:1;

90 
	m⁄e_addr
:1;

92 
	mno_p‹t
:1;

93 
	mwûdˇrd
:1;

95 
sockÀn_t
 
	msockÀn
;

96 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

98 
ngx_addr_t
 *
	maddrs
;

99 
ngx_uöt_t
 
	m«ddrs
;

101 *
	mîr
;

102 } 
	tngx_uæ_t
;

105 
ö_addr_t
 
ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

106 #i‡(
NGX_HAVE_INET6
)

107 
ngx_öt_t
 
ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
);

108 
size_t
 
ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, size_à
Àn
);

110 
size_t
 
ngx_sock_¡›
(
sockaddr
 *
ß
, 
sockÀn_t
 
sockÀn
, 
u_ch¨
 *
ãxt
,

111 
size_t
 
Àn
, 
ngx_uöt_t
 
p‹t
);

112 
size_t
 
ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, size_à
Àn
);

113 
ngx_öt_t
 
ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
);

114 
ngx_öt_t
 
ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

115 
size_t
 
Àn
);

116 
ngx_öt_t
 
ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

117 
ngx_öt_t
 
ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

118 
ngx_öt_t
 
ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, 
sockÀn_t
 
¶í1
,

119 
sockaddr
 *
ß2
, 
sockÀn_t
 
¶í2
, 
ngx_uöt_t
 
cmp_p‹t
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_list.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_li°_t
 *

13 
	$ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_li°_t
 *
li°
;

17 
li°
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_li°_t
));

18 i‡(
li°
 =
NULL
) {

19  
NULL
;

22 i‡(
	`ngx_li°_öô
(
li°
, 
poﬁ
, 
n
, 
size
Ë!
NGX_OK
) {

23  
NULL
;

26  
li°
;

27 
	}
}

31 
	$ngx_li°_push
(
ngx_li°_t
 *
l
)

33 *
ñt
;

34 
ngx_li°_∑π_t
 *
œ°
;

36 
œ°
 = 
l
->last;

38 i‡(
œ°
->
√…s
 =
l
->
«Œoc
) {

42 
œ°
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
, (
ngx_li°_∑π_t
));

43 i‡(
œ°
 =
NULL
) {

44  
NULL
;

47 
œ°
->
ñts
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
,Ü->
«Œoc
 *Ü->
size
);

48 i‡(
œ°
->
ñts
 =
NULL
) {

49  
NULL
;

52 
œ°
->
√…s
 = 0;

53 
œ°
->
√xt
 = 
NULL
;

55 
l
->
œ°
->
√xt
 =Üast;

56 
l
->
œ°
 =Üast;

59 
ñt
 = (*Ë
œ°
->
ñts
 + 
l
->
size
 *Üa°->
√…s
;

60 
œ°
->
√…s
++;

62  
ñt
;

63 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_list.h

8 #i‚de‡
_NGX_LIST_H_INCLUDED_


9 
	#_NGX_LIST_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°_∑π_s
 
	tngx_li°_∑π_t
;

18 
	sngx_li°_∑π_s
 {

19 *
	mñts
;

20 
ngx_uöt_t
 
	m√…s
;

21 
ngx_li°_∑π_t
 *
	m√xt
;

26 
ngx_li°_∑π_t
 *
	mœ°
;

27 
ngx_li°_∑π_t
 
	m∑π
;

28 
size_t
 
	msize
;

29 
ngx_uöt_t
 
	m«Œoc
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 } 
	tngx_li°_t
;

34 
ngx_li°_t
 *
ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

36 
ngx_ölöe
 
ngx_öt_t


37 
	$ngx_li°_öô
(
ngx_li°_t
 *
li°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

40 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

41  
NGX_ERROR
;

44 
li°
->
∑π
.
√…s
 = 0;

45 
li°
->
∑π
.
√xt
 = 
NULL
;

46 
li°
->
œ°
 = &li°->
∑π
;

47 
li°
->
size
 = size;

48 
li°
->
«Œoc
 = 
n
;

49 
li°
->
poﬁ
 =Öool;

51  
NGX_OK
;

52 
	}
}

80 *
ngx_li°_push
(
ngx_li°_t
 *
li°
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_log.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

13 *
ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
);

14 
ngx_log_ö£π
(
ngx_log_t
 *
log
,Çgx_log_à*
√w_log
);

17 
ngx_comm™d_t
 
	gngx_îæog_comm™ds
[] = {

19 {
ngx_°rög
("error_log"),

20 
NGX_MAIN_CONF
|
NGX_CONF_1MORE
,

21 
ngx_îr‹_log
,

24 
NULL
},

26 
ngx_nuŒ_comm™d


30 
ngx_c‹e_moduÀ_t
 
	gngx_îæog_moduÀ_˘x
 = {

31 
ngx_°rög
("errlog"),

32 
NULL
,

33 
NULL


37 
ngx_moduÀ_t
 
	gngx_îæog_moduÀ
 = {

38 
NGX_MODULE_V1
,

39 &
ngx_îæog_moduÀ_˘x
,

40 
ngx_îæog_comm™ds
,

41 
NGX_CORE_MODULE
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NULL
,

49 
NGX_MODULE_V1_PADDING


53 
ngx_log_t
 
	gngx_log
;

54 
ngx_›í_fûe_t
 
	gngx_log_fûe
;

55 
ngx_uöt_t
 
	gngx_u£_°dîr
 = 1;

58 
ngx_°r_t
 
	gîr_Àvñs
[] = {

59 
ngx_nuŒ_°rög
,

60 
ngx_°rög
("emerg"),

61 
ngx_°rög
("alert"),

62 
ngx_°rög
("crit"),

63 
ngx_°rög
("error"),

64 
ngx_°rög
("warn"),

65 
ngx_°rög
("notice"),

66 
ngx_°rög
("info"),

67 
ngx_°rög
("debug")

70 c⁄° *
	gdebug_Àvñs
[] = {

76 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

79 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

80 c⁄° *
fmt
, ...)

85 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

86 c⁄° *
fmt
, 
va_li°
 
¨gs
)

90 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

91 
va_li°
 
¨gs
;

93 
u_ch¨
 *
p
, *
œ°
, *
msg
;

94 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

95 
ngx_uöt_t
 
wrŸe_°dîr
, 
debug_c⁄√˘i⁄
;

97 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

99 
	`ngx_mem˝y
(
îr°r
, 
ngx_ˇched_îr_log_time
.
d©a
,

100 
ngx_ˇched_îr_log_time
.
Àn
);

102 
p
 = 
îr°r
 + 
ngx_ˇched_îr_log_time
.
Àn
;

104 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, " [%V] ", &
îr_Àvñs
[
Àvñ
]);

107 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%P#" 
NGX_TID_T_FMT
 ": ",

108 
ngx_log_pid
, 
ngx_log_tid
);

110 i‡(
log
->
c⁄√˘i⁄
) {

111 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "*%uA ", 
log
->
c⁄√˘i⁄
);

114 
msg
 = 
p
;

116 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

118 
	`va_°¨t
(
¨gs
, 
fmt
);

119 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

120 
	`va_íd
(
¨gs
);

124 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

128 i‡(
îr
) {

129 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

132 i‡(
Àvñ
 !
NGX_LOG_DEBUG
 && 
log
->
h™dÀr
) {

133 
p
 = 
log
->
	`h™dÀr
÷og,Ö, 
œ°
 -Ö);

136 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

137 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

140 
	`ngx_löe„ed
(
p
);

142 
wrŸe_°dîr
 = 0;

143 
debug_c⁄√˘i⁄
 = (
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
) != 0;

145 
log
) {

147 i‡(
log
->
log_Àvñ
 < 
Àvñ
 && !
debug_c⁄√˘i⁄
) {

151 (Ë
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
îr°r
, 
p
 -Érrstr);

153 i‡(
log
->
fûe
->
fd
 =
ngx_°dîr
) {

154 
wrŸe_°dîr
 = 1;

157 
log
 =Üog->
√xt
;

160 i‡(!
ngx_u£_°dîr


161 || 
Àvñ
 > 
NGX_LOG_WARN


162 || 
wrŸe_°dîr
)

167 
msg
 -(7 + 
îr_Àvñs
[
Àvñ
].
Àn
 + 3);

169 (Ë
	`ngx_•rötf
(
msg
, "ngöx: [%V] ", &
îr_Àvñs
[
Àvñ
]);

171 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
msg
, 
p
 - msg);

172 
	}
}

175 #i‡!(
NGX_HAVE_VARIADIC_MACROS
)

177 
ngx_cde˛


178 
	$ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

179 c⁄° *
fmt
, ...)

181 
va_li°
 
¨gs
;

183 i‡(
log
->
log_Àvñ
 >
Àvñ
) {

184 
	`va_°¨t
(
¨gs
, 
fmt
);

185 
	`ngx_log_îr‹_c‹e
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨gs
);

186 
	`va_íd
(
¨gs
);

188 
	}
}

191 
ngx_cde˛


192 
	$ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

194 
va_li°
 
¨gs
;

196 
	`va_°¨t
(
¨gs
, 
fmt
);

197 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
îr
, 
fmt
, 
¨gs
);

198 
	`va_íd
(
¨gs
);

199 
	}
}

204 
ngx_cde˛


205 
	$ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

207 
u_ch¨
 *
p
;

208 
va_li°
 
¨gs
;

209 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

211 
	`va_°¨t
(
¨gs
, 
fmt
);

212 
p
 = 
	`ngx_v¢¥ötf
(
îr°r
, ”º°rË- 1, 
fmt
, 
¨gs
);

213 
	`va_íd
(
¨gs
);

215 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

216 "%*s", 
p
 - 
îr°r
,Érrstr);

217 
	}
}

220 
ngx_cde˛


221 
	$ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

223 
u_ch¨
 *
p
, *
œ°
;

224 
va_li°
 
¨gs
;

225 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

227 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

228 
p
 = 
îr°r
 + 7;

230 
	`ngx_mem˝y
(
îr°r
, "nginx: ", 7);

232 
	`va_°¨t
(
¨gs
, 
fmt
);

233 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

234 
	`va_íd
(
¨gs
);

236 i‡(
îr
) {

237 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

240 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

241 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

244 
	`ngx_löe„ed
(
p
);

246 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
îr°r
, 
p
 -Érrstr);

247 
	}
}

250 
u_ch¨
 *

251 
	$ngx_log_î∫o
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
)

253 i‡(
buf
 > 
œ°
 - 50) {

257 
buf
 = 
œ°
 - 50;

258 *
buf
++ = '.';

259 *
buf
++ = '.';

260 *
buf
++ = '.';

263 #i‡(
NGX_WIN32
)

264 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, ((Ë
îr
 < 0x80000000)

265 ? " (%d: " : " (%Xd: ", 
îr
);

267 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, " (%d: ", 
îr
);

270 
buf
 = 
	`ngx_°ªº‹
(
îr
, buf, 
œ°
 - buf);

272 i‡(
buf
 < 
œ°
) {

273 *
buf
++ = ')';

276  
buf
;

277 
	}
}

280 
ngx_log_t
 *

281 
	$ngx_log_öô
(
u_ch¨
 *
¥efix
)

283 
u_ch¨
 *
p
, *
«me
;

284 
size_t
 
∆í
, 
∂í
;

286 
ngx_log
.
fûe
 = &
ngx_log_fûe
;

287 
ngx_log
.
log_Àvñ
 = 
NGX_LOG_NOTICE
;

289 
«me
 = (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
;

296 
∆í
 = 
	`ngx_°æí
(
«me
);

298 i‡(
∆í
 == 0) {

299 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

300  &
ngx_log
;

303 
p
 = 
NULL
;

305 #i‡(
NGX_WIN32
)

306 i‡(
«me
[1] != ':') {

308 i‡(
«me
[0] != '/') {

311 i‡(
¥efix
) {

312 
∂í
 = 
	`ngx_°æí
(
¥efix
);

315 #ifde‡
NGX_PREFIX


316 
¥efix
 = (
u_ch¨
 *Ë
NGX_PREFIX
;

317 
∂í
 = 
	`ngx_°æí
(
¥efix
);

319 
∂í
 = 0;

323 i‡(
∂í
) {

324 
«me
 = 
	`mÆloc
(
∂í
 + 
∆í
 + 2);

325 i‡(
«me
 =
NULL
) {

326  
NULL
;

329 
p
 = 
	`ngx_˝ymem
(
«me
, 
¥efix
, 
∂í
);

331 i‡(!
	`ngx_∑th_£∑øt‹
(*(
p
 - 1))) {

332 *
p
++ = '/';

335 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
, 
∆í
 + 1);

337 
p
 = 
«me
;

341 
ngx_log_fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_APPEND
,

342 
NGX_FILE_CREATE_OR_OPEN
,

343 
NGX_FILE_DEFAULT_ACCESS
);

345 i‡(
ngx_log_fûe
.
fd
 =
NGX_INVALID_FILE
) {

346 
	`ngx_log_°dîr
(
ngx_î∫o
,

348 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

349 #i‡(
NGX_WIN32
)

350 
	`ngx_evít_log
(
ngx_î∫o
,

352 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

355 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

358 i‡(
p
) {

359 
	`ngx_‰ì
(
p
);

362  &
ngx_log
;

363 
	}
}

366 
ngx_öt_t


367 
	$ngx_log_›í_deÁu…
(
ngx_cy˛e_t
 *
cy˛e
)

369 
ngx_°r_t
 
îr‹_log
 = 
	`ngx_°rög
(
NGX_ERROR_LOG_PATH
);

371 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

372 
cy˛e
->
√w_log
.
fûe
 = 
	`ngx_c⁄f_›í_fûe
(cy˛e, &
îr‹_log
);

373 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

374  
NGX_ERROR
;

377 
cy˛e
->
√w_log
.
log_Àvñ
 = 
NGX_LOG_ERR
;

380  
NGX_OK
;

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_log_ªdúe˘_°dîr
(
ngx_cy˛e_t
 *
cy˛e
)

387 
ngx_fd_t
 
fd
;

389 i‡(
cy˛e
->
log_u£_°dîr
) {

390  
NGX_OK
;

393 
fd
 = 
cy˛e
->
log
->
fûe
->fd;

395 i‡(
fd
 !
ngx_°dîr
) {

396 i‡(
	`ngx_£t_°dîr
(
fd
Ë=
NGX_FILE_ERROR
) {

397 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

398 
ngx_£t_°dîr_n
 " failed");

400  
NGX_ERROR
;

404  
NGX_OK
;

405 
	}
}

409 
	$ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
)

411 
ngx_uöt_t
 
i
, 
n
, 
d
, 
found
;

412 
ngx_°r_t
 *
vÆue
;

414 i‡(
cf
->
¨gs
->
√…s
 == 2) {

415 
log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

416  
NGX_CONF_OK
;

419 
vÆue
 = 
cf
->
¨gs
->
ñts
;

421 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

422 
found
 = 0;

424 
n
 = 1;Ç <
NGX_LOG_DEBUG
;Ç++) {

425 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
îr_Àvñs
[
n
].data) == 0) {

427 i‡(
log
->
log_Àvñ
 != 0) {

428 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

430 &
vÆue
[
i
]);

431  
NGX_CONF_ERROR
;

434 
log
->
log_Àvñ
 = 
n
;

435 
found
 = 1;

440 
n
 = 0, 
d
 = 
NGX_LOG_DEBUG_FIRST
; d <
NGX_LOG_DEBUG_LAST
; d <<= 1) {

441 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
debug_Àvñs
[
n
++]) == 0) {

442 i‡(
log
->
log_Àvñ
 & ~
NGX_LOG_DEBUG_ALL
) {

443 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

445 &
vÆue
[
i
]);

446  
NGX_CONF_ERROR
;

449 
log
->
log_Àvñ
 |
d
;

450 
found
 = 1;

456 i‡(!
found
) {

457 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

458 "övÆidÜogÜevñ \"%V\"", &
vÆue
[
i
]);

459  
NGX_CONF_ERROR
;

463 i‡(
log
->
log_Àvñ
 =
NGX_LOG_DEBUG
) {

464 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

467  
NGX_CONF_OK
;

468 
	}
}

472 
	$ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

474 
ngx_log_t
 *
dummy
;

476 
dummy
 = &
cf
->
cy˛e
->
√w_log
;

478  
	`ngx_log_£t_log
(
cf
, &
dummy
);

479 
	}
}

483 
	$ngx_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 **
hód
)

485 
ngx_log_t
 *
√w_log
;

486 
ngx_°r_t
 *
vÆue
, 
«me
;

488 i‡(*
hód
 !
NULL
 && (*hód)->
log_Àvñ
 == 0) {

489 
√w_log
 = *
hód
;

493 
√w_log
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_log_t
));

494 i‡(
√w_log
 =
NULL
) {

495  
NGX_CONF_ERROR
;

498 i‡(*
hód
 =
NULL
) {

499 *
hód
 = 
√w_log
;

503 
vÆue
 = 
cf
->
¨gs
->
ñts
;

505 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

506 
	`ngx_°r_nuŒ
(&
«me
);

507 
cf
->
cy˛e
->
log_u£_°dîr
 = 1;

510 
«me
 = 
vÆue
[1];

513 
√w_log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
«me
);

514 i‡(
√w_log
->
fûe
 =
NULL
) {

515  
NGX_CONF_ERROR
;

518 i‡(
	`ngx_log_£t_Àvñs
(
cf
, 
√w_log
Ë!
NGX_CONF_OK
) {

519  
NGX_CONF_ERROR
;

522 i‡(*
hód
 !
√w_log
) {

523 
	`ngx_log_ö£π
(*
hód
, 
√w_log
);

526  
NGX_CONF_OK
;

527 
	}
}

531 
	$ngx_log_ö£π
(
ngx_log_t
 *
log
,Çgx_log_à*
√w_log
)

533 
ngx_log_t
 
tmp
;

535 i‡(
√w_log
->
log_Àvñ
 > 
log
->log_level) {

542 
tmp
 = *
log
;

543 *
log
 = *
√w_log
;

544 *
√w_log
 = 
tmp
;

546 
log
->
√xt
 = 
√w_log
;

550 
log
->
√xt
) {

551 i‡(
√w_log
->
log_Àvñ
 > 
log
->
√xt
->log_level) {

552 
√w_log
->
√xt
 = 
log
->next;

553 
log
->
√xt
 = 
√w_log
;

557 
log
 =Üog->
√xt
;

560 
log
->
√xt
 = 
√w_log
;

561 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_log.h

8 #i‚de‡
_NGX_LOG_H_INCLUDED_


9 
	#_NGX_LOG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_LOG_STDERR
 0

	)

17 
	#NGX_LOG_EMERG
 1

	)

18 
	#NGX_LOG_ALERT
 2

	)

19 
	#NGX_LOG_CRIT
 3

	)

20 
	#NGX_LOG_ERR
 4

	)

21 
	#NGX_LOG_WARN
 5

	)

22 
	#NGX_LOG_NOTICE
 6

	)

23 
	#NGX_LOG_INFO
 7

	)

24 
	#NGX_LOG_DEBUG
 8

	)

26 
	#NGX_LOG_DEBUG_CORE
 0x010

	)

27 
	#NGX_LOG_DEBUG_ALLOC
 0x020

	)

28 
	#NGX_LOG_DEBUG_MUTEX
 0x040

	)

29 
	#NGX_LOG_DEBUG_EVENT
 0x080

	)

30 
	#NGX_LOG_DEBUG_HTTP
 0x100

	)

31 
	#NGX_LOG_DEBUG_MAIL
 0x200

	)

32 
	#NGX_LOG_DEBUG_MYSQL
 0x400

	)

39 
	#NGX_LOG_DEBUG_FIRST
 
NGX_LOG_DEBUG_CORE


	)

40 
	#NGX_LOG_DEBUG_LAST
 
NGX_LOG_DEBUG_MYSQL


	)

41 
	#NGX_LOG_DEBUG_CONNECTION
 0x80000000

	)

42 
	#NGX_LOG_DEBUG_ALL
 0x7ffffff0

	)

45 
	gu_ch¨
 *(*
	tngx_log_h™dÀr_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

48 
	sngx_log_s
 {

49 
ngx_uöt_t
 
	mlog_Àvñ
;

50 
ngx_›í_fûe_t
 *
	mfûe
;

52 
ngx_©omic_uöt_t
 
	mc⁄√˘i⁄
;

54 
ngx_log_h™dÀr_±
 
	mh™dÀr
;

55 *
	md©a
;

63 *
	ma˘i⁄
;

65 
ngx_log_t
 *
	m√xt
;

69 
	#NGX_MAX_ERROR_STR
 2048

	)

74 #i‡(
NGX_HAVE_C99_VARIADIC_MACROS
)

76 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

78 
	#ngx_log_îr‹
(
Àvñ
, 
log
, ...) \

79 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
__VA_ARGS__
)

	)

81 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

82 c⁄° *
fmt
, ...);

84 
	#ngx_log_debug
(
Àvñ
, 
log
, ...) \

85 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

86 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
__VA_ARGS__
)

	)

90 #ñi‡(
NGX_HAVE_GCC_VARIADIC_MACROS
)

92 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

94 
	#ngx_log_îr‹
(
Àvñ
, 
log
, 
¨gs
...) \

95 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
¨gs
)

	)

97 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

98 c⁄° *
fmt
, ...);

100 
	#ngx_log_debug
(
Àvñ
, 
log
, 
¨gs
...) \

101 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

102 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
¨gs
)

	)

108 
	#NGX_HAVE_VARIADIC_MACROS
 0

	)

110 
ngx_cde˛
 
ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

111 c⁄° *
fmt
, ...);

112 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

113 c⁄° *
fmt
, 
va_li°
 
¨gs
);

114 
ngx_cde˛
 
ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

115 c⁄° *
fmt
, ...);

123 #i‡(
NGX_DEBUG
)

125 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

127 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

128 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

130 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

131 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

133 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

134 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

136 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

137 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

139 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

140 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

142 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

143 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

145 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

146 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

147 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

148 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

150 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

151 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

152 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

153 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

155 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

156 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

157 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

158 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

163 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

164 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

165 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
)

	)

167 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

168 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

169 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
)

	)

171 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

172 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

173 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

175 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

176 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

177 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

179 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

180 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

181 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

183 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

184 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

185 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

187 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

188 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

189 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

190 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

192 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

193 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

194 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

195 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

196 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

198 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

199 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

200 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

201 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

202 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

208 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

209 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

210 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

211 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

212 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

213 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

214 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

215 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

216 
¨g6
, 
¨g7
)

	)

217 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

218 
¨g6
, 
¨g7
, 
¨g8
)

	)

224 
ngx_log_t
 *
ngx_log_öô
(
u_ch¨
 *
¥efix
);

225 
ngx_cde˛
 
ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

226 
ngx_cde˛
 
ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

227 
u_ch¨
 *
ngx_log_î∫o
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
);

228 
ngx_öt_t
 
ngx_log_›í_deÁu…
(
ngx_cy˛e_t
 *
cy˛e
);

229 
ngx_öt_t
 
ngx_log_ªdúe˘_°dîr
(
ngx_cy˛e_t
 *
cy˛e
);

230 *
ngx_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 **
hód
);

242 
ngx_ölöe
 

243 
	$ngx_wrôe_°dîr
(*
ãxt
)

245 (Ë
	`ngx_wrôe_fd
(
ngx_°dîr
, 
ãxt
, 
	`°æí
(text));

246 
	}
}

249 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

250 
ngx_uöt_t
 
ngx_u£_°dîr
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_md5.c

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_md5.h
>

16 #i‡!(
NGX_HAVE_MD5
)

18 c⁄° 
u_ch¨
 *
ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° u_ch¨ *
d©a
,

19 
size_t
 
size
);

23 
	$ngx_md5_öô
(
ngx_md5_t
 *
˘x
)

25 
˘x
->
a
 = 0x67452301;

26 
˘x
->
b
 = 0xefcdab89;

27 
˘x
->
c
 = 0x98badcfe;

28 
˘x
->
d
 = 0x10325476;

30 
˘x
->
byãs
 = 0;

31 
	}
}

35 
	$ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
)

37 
size_t
 
u£d
, 
‰ì
;

39 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

40 
˘x
->
byãs
 +
size
;

42 i‡(
u£d
) {

43 
‰ì
 = 64 - 
u£d
;

45 i‡(
size
 < 
‰ì
) {

46 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

50 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

51 
d©a
 = (
u_ch¨
 *Ëd©®+ 
‰ì
;

52 
size
 -
‰ì
;

53 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

56 i‡(
size
 >= 64) {

57 
d©a
 = 
	`ngx_md5_body
(
˘x
, d©a, 
size
 & ~(
size_t
) 0x3f);

58 
size
 &= 0x3f;

61 
	`ngx_mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

62 
	}
}

66 
	$ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
)

68 
size_t
 
u£d
, 
‰ì
;

70 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

72 
˘x
->
buf„r
[
u£d
++] = 0x80;

74 
‰ì
 = 64 - 
u£d
;

76 i‡(
‰ì
 < 8) {

77 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
);

78 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

79 
u£d
 = 0;

80 
‰ì
 = 64;

83 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
 - 8);

85 
˘x
->
byãs
 <<= 3;

86 
˘x
->
buf„r
[56] = (
u_ch¨
Ë˘x->
byãs
;

87 
˘x
->
buf„r
[57] = (
u_ch¨
Ë(˘x->
byãs
 >> 8);

88 
˘x
->
buf„r
[58] = (
u_ch¨
Ë(˘x->
byãs
 >> 16);

89 
˘x
->
buf„r
[59] = (
u_ch¨
Ë(˘x->
byãs
 >> 24);

90 
˘x
->
buf„r
[60] = (
u_ch¨
Ë(˘x->
byãs
 >> 32);

91 
˘x
->
buf„r
[61] = (
u_ch¨
Ë(˘x->
byãs
 >> 40);

92 
˘x
->
buf„r
[62] = (
u_ch¨
Ë(˘x->
byãs
 >> 48);

93 
˘x
->
buf„r
[63] = (
u_ch¨
Ë(˘x->
byãs
 >> 56);

95 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

97 
ªsu…
[0] = (
u_ch¨
Ë
˘x
->
a
;

98 
ªsu…
[1] = (
u_ch¨
Ë(
˘x
->
a
 >> 8);

99 
ªsu…
[2] = (
u_ch¨
Ë(
˘x
->
a
 >> 16);

100 
ªsu…
[3] = (
u_ch¨
Ë(
˘x
->
a
 >> 24);

101 
ªsu…
[4] = (
u_ch¨
Ë
˘x
->
b
;

102 
ªsu…
[5] = (
u_ch¨
Ë(
˘x
->
b
 >> 8);

103 
ªsu…
[6] = (
u_ch¨
Ë(
˘x
->
b
 >> 16);

104 
ªsu…
[7] = (
u_ch¨
Ë(
˘x
->
b
 >> 24);

105 
ªsu…
[8] = (
u_ch¨
Ë
˘x
->
c
;

106 
ªsu…
[9] = (
u_ch¨
Ë(
˘x
->
c
 >> 8);

107 
ªsu…
[10] = (
u_ch¨
Ë(
˘x
->
c
 >> 16);

108 
ªsu…
[11] = (
u_ch¨
Ë(
˘x
->
c
 >> 24);

109 
ªsu…
[12] = (
u_ch¨
Ë
˘x
->
d
;

110 
ªsu…
[13] = (
u_ch¨
Ë(
˘x
->
d
 >> 8);

111 
ªsu…
[14] = (
u_ch¨
Ë(
˘x
->
d
 >> 16);

112 
ªsu…
[15] = (
u_ch¨
Ë(
˘x
->
d
 >> 24);

114 
	`ngx_memzîo
(
˘x
, (*ctx));

115 
	}
}

126 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

127 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

128 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

129 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

135 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

136 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

137 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

138 (
a
Ë+(
b
)

	)

149 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

151 
	#SET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

152 
	#GET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

156 
	#SET
(
n
) \

157 (
block
[
n
] = \

158 (
uöt32_t
Ë
p
[
n
 * 4] | \

159 ((
uöt32_t
Ë
p
[
n
 * 4 + 1] << 8) | \

160 ((
uöt32_t
Ë
p
[
n
 * 4 + 2] << 16) | \

161 ((
uöt32_t
Ë
p
[
n
 * 4 + 3] << 24))

	)

163 
	#GET
(
n
Ë
block
[n]

	)

173 c⁄° 
u_ch¨
 *

174 
	$ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° 
u_ch¨
 *
d©a
, 
size_t
 
size
)

176 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

177 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

178 c⁄° 
u_ch¨
 *
p
;

179 #i‡!(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

180 
uöt32_t
 
block
[16];

183 
p
 = 
d©a
;

185 
a
 = 
˘x
->a;

186 
b
 = 
˘x
->b;

187 
c
 = 
˘x
->c;

188 
d
 = 
˘x
->d;

191 
ßved_a
 = 
a
;

192 
ßved_b
 = 
b
;

193 
ßved_c
 = 
c
;

194 
ßved_d
 = 
d
;

198 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7);

199 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12);

200 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17);

201 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22);

202 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7);

203 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12);

204 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17);

205 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22);

206 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7);

207 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12);

208 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17);

209 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22);

210 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7);

211 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12);

212 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17);

213 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22);

217 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5);

218 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9);

219 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14);

220 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20);

221 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5);

222 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9);

223 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14);

224 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20);

225 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5);

226 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9);

227 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14);

228 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20);

229 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5);

230 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9);

231 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14);

232 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20);

236 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4);

237 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11);

238 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16);

239 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23);

240 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4);

241 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11);

242 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16);

243 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23);

244 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4);

245 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11);

246 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16);

247 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23);

248 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4);

249 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11);

250 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16);

251 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23);

255 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6);

256 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10);

257 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15);

258 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21);

259 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6);

260 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10);

261 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15);

262 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21);

263 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6);

264 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10);

265 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15);

266 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21);

267 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6);

268 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10);

269 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15);

270 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21);

272 
a
 +
ßved_a
;

273 
b
 +
ßved_b
;

274 
c
 +
ßved_c
;

275 
d
 +
ßved_d
;

277 
p
 += 64;

279 } 
size
 -= 64);

281 
˘x
->
a
 =á;

282 
˘x
->
b
 = b;

283 
˘x
->
c
 = c;

284 
˘x
->
d
 = d;

286  
p
;

287 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_md5.h

8 #i‚de‡
_NGX_MD5_H_INCLUDED_


9 
	#_NGX_MD5_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_MD5
)

18 #i‡(
NGX_HAVE_OPENSSL_MD5_H
)

19 
	~<›ís¶/md5.h
>

21 
	~<md5.h
>

25 
MD5_CTX
 
	tngx_md5_t
;

28 #i‡(
NGX_OPENSSL_MD5
)

30 
	#ngx_md5_öô
 
MD5_Inô


	)

31 
	#ngx_md5_upd©e
 
MD5_Upd©e


	)

32 
	#ngx_md5_föÆ
 
MD5_FöÆ


	)

36 
	#ngx_md5_öô
 
MD5Inô


	)

37 
	#ngx_md5_upd©e
 
MD5Upd©e


	)

38 
	#ngx_md5_föÆ
 
MD5FöÆ


	)

47 
uöt64_t
 
	mbyãs
;

48 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

49 
u_ch¨
 
	mbuf„r
[64];

50 } 
	tngx_md5_t
;

53 
ngx_md5_öô
(
ngx_md5_t
 *
˘x
);

54 
ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

55 
ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_murmurhash.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
uöt32_t


12 
	$ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

14 
uöt32_t
 
h
, 
k
;

16 
h
 = 0 ^ 
Àn
;

18 
Àn
 >= 4) {

19 
k
 = 
d©a
[0];

20 
k
 |
d©a
[1] << 8;

21 
k
 |
d©a
[2] << 16;

22 
k
 |
d©a
[3] << 24;

24 
k
 *= 0x5bd1e995;

25 
k
 ^= k >> 24;

26 
k
 *= 0x5bd1e995;

28 
h
 *= 0x5bd1e995;

29 
h
 ^
k
;

31 
d©a
 += 4;

32 
Àn
 -= 4;

35 
Àn
) {

37 
h
 ^
d©a
[2] << 16;

39 
h
 ^
d©a
[1] << 8;

41 
h
 ^
d©a
[0];

42 
h
 *= 0x5bd1e995;

45 
h
 ^= h >> 13;

46 
h
 *= 0x5bd1e995;

47 
h
 ^= h >> 15;

49  
h
;

50 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_murmurhash.h

8 #i‚de‡
_NGX_MURMURHASH_H_INCLUDED_


9 
	#_NGX_MURMURHASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 
ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_open_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

21 
	#NGX_MIN_READ_AHEAD
 (128 * 1024)

	)

24 
ngx_›í_fûe_ˇche_˛ónup
(*
d©a
);

25 #i‡(
NGX_HAVE_OPENAT
)

26 
ngx_fd_t
 
ngx_›í©_fûe_ow√r
“gx_fd_à
©_fd
, c⁄° 
u_ch¨
 *
«me
,

27 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
);

28 #i‡(
NGX_HAVE_O_PATH
)

29 
ngx_öt_t
 
ngx_fûe_o_∑th_öfo
(
ngx_fd_t
 
fd
, 
ngx_fûe_öfo_t
 *
fi
,

30 
ngx_log_t
 *
log
);

33 
ngx_fd_t
 
ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
,

34 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,

35 
ngx_öt_t
 
ac˚ss
, 
ngx_log_t
 *
log
);

36 
ngx_öt_t
 
ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
,

37 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
);

38 
ngx_öt_t
 
ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
,

39 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

40 
ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

41 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

42 
ngx_›í_fûe_˛ónup
(*
d©a
);

43 
ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

44 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
);

45 
ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
);

46 
ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

47 
ngx_uöt_t
 
n
, 
ngx_log_t
 *
log
);

48 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

49 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

50 
ngx_ˇched_›í_fûe_t
 *

51 
ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

52 
uöt32_t
 
hash
);

53 
ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
);

56 
ngx_›í_fûe_ˇche_t
 *

57 
	$ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
)

59 
ngx_poﬁ_˛ónup_t
 *
˛n
;

60 
ngx_›í_fûe_ˇche_t
 *
ˇche
;

62 
ˇche
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_›í_fûe_ˇche_t
));

63 i‡(
ˇche
 =
NULL
) {

64  
NULL
;

67 
	`ngx_rbåì_öô
(&
ˇche
->
rbåì
, &ˇche->
£¡öñ
,

68 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
);

70 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

72 
ˇche
->
cuºít
 = 0;

73 
ˇche
->
max
 = max;

74 
ˇche
->
öa˘ive
 = inactive;

76 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, 0);

77 i‡(
˛n
 =
NULL
) {

78  
NULL
;

81 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_˛ónup
;

82 
˛n
->
d©a
 = 
ˇche
;

84  
ˇche
;

85 
	}
}

89 
	$ngx_›í_fûe_ˇche_˛ónup
(*
d©a
)

91 
ngx_›í_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

93 
ngx_queue_t
 *
q
;

94 
ngx_ˇched_›í_fûe_t
 *
fûe
;

96 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

101 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

105 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

107 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

109 
	`ngx_queue_ªmove
(
q
);

111 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

113 
ˇche
->
cuºít
--;

115 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

116 "dñëêˇched o≥¿fûe: %s", 
fûe
->
«me
);

118 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

119 
fûe
->
˛o£
 = 1;

120 
fûe
->
cou¡
 = 0;

121 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
ngx_cy˛e
->
log
);

124 
	`ngx_‰ì
(
fûe
->
«me
);

125 
	`ngx_‰ì
(
fûe
);

129 i‡(
ˇche
->
cuºít
) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

132 
ˇche
->
cuºít
);

135 i‡(
ˇche
->
rbåì
.
roŸ
 !ˇche->rbåì.
£¡öñ
) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

140 
	}
}

143 
ngx_öt_t


144 
	$ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

145 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
)

147 
time_t
 
now
;

148 
uöt32_t
 
hash
;

149 
ngx_öt_t
 
rc
;

150 
ngx_fûe_öfo_t
 
fi
;

151 
ngx_poﬁ_˛ónup_t
 *
˛n
;

152 
ngx_ˇched_›í_fûe_t
 *
fûe
;

153 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

154 
ngx_›í_fûe_ˇche_˛ónup_t
 *
of˛n
;

156 
of
->
fd
 = 
NGX_INVALID_FILE
;

157 
of
->
îr
 = 0;

159 i‡(
ˇche
 =
NULL
) {

161 i‡(
of
->
ã°_⁄ly
) {

163 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
poﬁ
->
log
)

164 =
NGX_FILE_ERROR
)

166  
NGX_ERROR
;

169 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

170 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

171 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

172 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

173 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

174 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

175 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

176 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

178  
NGX_OK
;

181 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

182 i‡(
˛n
 =
NULL
) {

183  
NGX_ERROR
;

186 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

188 i‡(
rc
 =
NGX_OK
 && !
of
->
is_dú
) {

189 
˛n
->
h™dÀr
 = 
ngx_poﬁ_˛ónup_fûe
;

190 
˛nf
 = 
˛n
->
d©a
;

192 
˛nf
->
fd
 = 
of
->fd;

193 
˛nf
->
«me
 =Çame->
d©a
;

194 
˛nf
->
log
 = 
poﬁ
->log;

197  
rc
;

200 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_›í_fûe_ˇche_˛ónup_t
));

201 i‡(
˛n
 =
NULL
) {

202  
NGX_ERROR
;

205 
now
 = 
	`ngx_time
();

207 
hash
 = 
	`ngx_¸c32_l⁄g
(
«me
->
d©a
,Çame->
Àn
);

209 
fûe
 = 
	`ngx_›í_fûe_lookup
(
ˇche
, 
«me
, 
hash
);

211 i‡(
fûe
) {

213 
fûe
->
u£s
++;

215 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

217 i‡(
fûe
->
fd
 =
NGX_INVALID_FILE
 && fûe->
îr
 =0 && !fûe->
is_dú
) {

221 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

223 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

224 
Áûed
;

227 
add_evít
;

230 i‡(
fûe
->
u£_evít


231 || (
fûe
->
evít
 =
NULL


232 && (
of
->
uniq
 =0 || of->uniq =
fûe
->uniq)

233 && 
now
 - 
fûe
->
¸óãd
 < 
of
->
vÆid


234 #i‡(
NGX_HAVE_OPENAT
)

235 && 
of
->
dißbÀ_symlöks
 =
fûe
->disable_symlinks

236 && 
of
->
dißbÀ_symlöks_‰om
 =
fûe
->disable_symlinks_from

240 i‡(
fûe
->
îr
 == 0) {

242 
of
->
fd
 = 
fûe
->fd;

243 
of
->
uniq
 = 
fûe
->uniq;

244 
of
->
mtime
 = 
fûe
->mtime;

245 
of
->
size
 = 
fûe
->size;

247 
of
->
is_dú
 = 
fûe
->is_dir;

248 
of
->
is_fûe
 = 
fûe
->is_file;

249 
of
->
is_lök
 = 
fûe
->is_link;

250 
of
->
is_exec
 = 
fûe
->is_exec;

251 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

253 i‡(!
fûe
->
is_dú
) {

254 
fûe
->
cou¡
++;

255 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

259 
of
->
îr
 = 
fûe
->err;

260 #i‡(
NGX_HAVE_OPENAT
)

261 
of
->
Áûed
 = 
fûe
->
dißbÀ_symlöks
 ? 
ngx_›í©_fûe_n


262 : 
ngx_›í_fûe_n
;

264 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

268 
found
;

271 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

273 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
);

275 i‡(
fûe
->
is_dú
) {

283 
of
->
ã°_dú
 = 1;

286 
of
->
fd
 = 
fûe
->fd;

287 
of
->
uniq
 = 
fûe
->uniq;

289 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

291 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

292 
Áûed
;

295 i‡(
of
->
is_dú
) {

297 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

298 
upd©e
;

303 } i‡(
of
->
îr
 == 0) {

305 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

306 
add_evít
;

309 i‡(
of
->
uniq
 =
fûe
->uniq) {

311 i‡(
fûe
->
evít
) {

312 
fûe
->
u£_evít
 = 1;

315 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

317 
upd©e
;

324 i‡(
fûe
->
îr
 || fûe->
is_dú
) {

325 
upd©e
;

331 i‡(
fûe
->
cou¡
 == 0) {

333 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

335 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

336 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

337 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

340 
add_evít
;

343 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

345 
ˇche
->
cuºít
--;

347 
fûe
->
˛o£
 = 1;

349 
¸óã
;

354 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

356 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

357 
Áûed
;

360 
¸óã
:

362 i‡(
ˇche
->
cuºít
 >ˇche->
max
) {

363 
	`ngx_expúe_ﬁd_ˇched_fûes
(
ˇche
, 0, 
poﬁ
->
log
);

366 
fûe
 = 
	`ngx_Æloc
((
ngx_ˇched_›í_fûe_t
), 
poﬁ
->
log
);

368 i‡(
fûe
 =
NULL
) {

369 
Áûed
;

372 
fûe
->
«me
 = 
	`ngx_Æloc
“ame->
Àn
 + 1, 
poﬁ
->
log
);

374 i‡(
fûe
->
«me
 =
NULL
) {

375 
	`ngx_‰ì
(
fûe
);

376 
fûe
 = 
NULL
;

377 
Áûed
;

380 
	`ngx_˝y°∫
(
fûe
->
«me
,Çame->
d©a
,Çame->
Àn
 + 1);

382 
fûe
->
node
.
key
 = 
hash
;

384 
	`ngx_rbåì_ö£π
(&
ˇche
->
rbåì
, &
fûe
->
node
);

386 
ˇche
->
cuºít
++;

388 
fûe
->
u£s
 = 1;

389 
fûe
->
cou¡
 = 0;

390 
fûe
->
u£_evít
 = 0;

391 
fûe
->
evít
 = 
NULL
;

393 
add_evít
:

395 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

397 
upd©e
:

399 
fûe
->
fd
 = 
of
->fd;

400 
fûe
->
îr
 = 
of
->err;

401 #i‡(
NGX_HAVE_OPENAT
)

402 
fûe
->
dißbÀ_symlöks
 = 
of
->disable_symlinks;

403 
fûe
->
dißbÀ_symlöks_‰om
 = 
of
->disable_symlinks_from;

406 i‡(
of
->
îr
 == 0) {

407 
fûe
->
uniq
 = 
of
->uniq;

408 
fûe
->
mtime
 = 
of
->mtime;

409 
fûe
->
size
 = 
of
->size;

411 
fûe
->
˛o£
 = 0;

413 
fûe
->
is_dú
 = 
of
->is_dir;

414 
fûe
->
is_fûe
 = 
of
->is_file;

415 
fûe
->
is_lök
 = 
of
->is_link;

416 
fûe
->
is_exec
 = 
of
->is_exec;

417 
fûe
->
is_dúe˘io
 = 
of
->is_directio;

419 i‡(!
of
->
is_dú
) {

420 
fûe
->
cou¡
++;

424 
fûe
->
¸óãd
 = 
now
;

426 
found
:

428 
fûe
->
ac˚s£d
 = 
now
;

430 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

432 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

434 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
, fûe->
u£s
);

436 i‡(
of
->
îr
 == 0) {

438 i‡(!
of
->
is_dú
) {

439 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_˛ónup
;

440 
of˛n
 = 
˛n
->
d©a
;

442 
of˛n
->
ˇche
 = cache;

443 
of˛n
->
fûe
 = file;

444 
of˛n
->
mö_u£s
 = 
of
->min_uses;

445 
of˛n
->
log
 = 
poﬁ
->log;

448  
NGX_OK
;

451  
NGX_ERROR
;

453 
Áûed
:

455 i‡(
fûe
) {

456 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

458 
ˇche
->
cuºít
--;

460 i‡(
fûe
->
cou¡
 == 0) {

462 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

463 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

464 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

465 
ngx_˛o£_fûe_n
 " \"%s\" failed",

466 
fûe
->
«me
);

470 
	`ngx_‰ì
(
fûe
->
«me
);

471 
	`ngx_‰ì
(
fûe
);

474 
fûe
->
˛o£
 = 1;

478 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

479 i‡(
	`ngx_˛o£_fûe
(
of
->
fd
Ë=
NGX_FILE_ERROR
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

481 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

485  
NGX_ERROR
;

486 
	}
}

489 #i‡(
NGX_HAVE_OPENAT
)

491 
ngx_fd_t


492 
	$ngx_›í©_fûe_ow√r
(
ngx_fd_t
 
©_fd
, c⁄° 
u_ch¨
 *
«me
,

493 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

495 
ngx_fd_t
 
fd
;

496 
ngx_îr_t
 
îr
;

497 
ngx_fûe_öfo_t
 
fi
, 
©fi
;

511 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
);

513 i‡(
fd
 =
NGX_INVALID_FILE
) {

514  
NGX_INVALID_FILE
;

517 i‡(
	`ngx_fûe_©_öfo
(
©_fd
, 
«me
, &
©fi
, 
AT_SYMLINK_NOFOLLOW
)

518 =
NGX_FILE_ERROR
)

520 
îr
 = 
ngx_î∫o
;

521 
Áûed
;

524 #i‡(
NGX_HAVE_O_PATH
)

525 i‡(
	`ngx_fûe_o_∑th_öfo
(
fd
, &
fi
, 
log
Ë=
NGX_ERROR
) {

526 
îr
 = 
ngx_î∫o
;

527 
Áûed
;

530 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

531 
îr
 = 
ngx_î∫o
;

532 
Áûed
;

536 i‡(
fi
.
°_uid
 !
©fi
.st_uid) {

537 
îr
 = 
NGX_ELOOP
;

538 
Áûed
;

541  
fd
;

543 
Áûed
:

545 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

546 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

547 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

550 
	`ngx_£t_î∫o
(
îr
);

552  
NGX_INVALID_FILE
;

553 
	}
}

556 #i‡(
NGX_HAVE_O_PATH
)

558 
ngx_öt_t


559 
	$ngx_fûe_o_∑th_öfo
(
ngx_fd_t
 
fd
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

561 
ngx_uöt_t
 
u£_f°©
 = 1;

585 i‡(
u£_f°©
) {

586 i‡(
	`ngx_fd_öfo
(
fd
, 
fi
Ë!
NGX_FILE_ERROR
) {

587  
NGX_OK
;

590 i‡(
ngx_î∫o
 !
NGX_EBADF
) {

591  
NGX_ERROR
;

594 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

598 
u£_f°©
 = 0;

601 i‡(
	`ngx_fûe_©_öfo
(
fd
, "", 
fi
, 
AT_EMPTY_PATH
Ë!
NGX_FILE_ERROR
) {

602  
NGX_OK
;

605  
NGX_ERROR
;

606 
	}
}

613 
ngx_fd_t


614 
	$ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

615 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

617 
ngx_fd_t
 
fd
;

619 #i‡!(
NGX_HAVE_OPENAT
)

621 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

623 i‡(
fd
 =
NGX_INVALID_FILE
) {

624 
of
->
îr
 = 
ngx_î∫o
;

625 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

626  
NGX_INVALID_FILE
;

629  
fd
;

633 
u_ch¨
 *
p
, *
˝
, *
íd
;

634 
ngx_fd_t
 
©_fd
;

635 
ngx_°r_t
 
©_«me
;

637 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

638 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

640 i‡(
fd
 =
NGX_INVALID_FILE
) {

641 
of
->
îr
 = 
ngx_î∫o
;

642 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

643  
NGX_INVALID_FILE
;

646  
fd
;

649 
p
 = 
«me
->
d©a
;

650 
íd
 = 
p
 + 
«me
->
Àn
;

652 
©_«me
 = *
«me
;

654 i‡(
of
->
dißbÀ_symlöks_‰om
) {

656 
˝
 = 
p
 + 
of
->
dißbÀ_symlöks_‰om
;

658 *
˝
 = '\0';

660 
©_fd
 = 
	`ngx_›í_fûe
(
p
, 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

661 
NGX_FILE_OPEN
, 0);

663 *
˝
 = '/';

665 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

666 
of
->
îr
 = 
ngx_î∫o
;

667 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

668  
NGX_INVALID_FILE
;

671 
©_«me
.
Àn
 = 
of
->
dißbÀ_symlöks_‰om
;

672 
p
 = 
˝
 + 1;

674 } i‡(*
p
 == '/') {

676 
©_fd
 = 
	`ngx_›í_fûe
("/",

677 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

678 
NGX_FILE_OPEN
, 0);

680 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

681 
of
->
îr
 = 
ngx_î∫o
;

682 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

683  
NGX_INVALID_FILE
;

686 
©_«me
.
Àn
 = 1;

687 
p
++;

690 
©_fd
 = 
NGX_AT_FDCWD
;

694 
˝
 = 
	`ngx_°æchr
(
p
, 
íd
, '/');

695 i‡(
˝
 =
NULL
) {

699 i‡(
˝
 =
p
) {

700 
p
++;

704 *
˝
 = '\0';

706 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER
) {

707 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
,

708 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

709 
NGX_FILE_OPEN
, 0, 
log
);

712 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
,

713 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
|
NGX_FILE_NOFOLLOW
,

714 
NGX_FILE_OPEN
, 0);

717 *
˝
 = '/';

719 i‡(
fd
 =
NGX_INVALID_FILE
) {

720 
of
->
îr
 = 
ngx_î∫o
;

721 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

722 
Áûed
;

725 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

726 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

727 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

730 
p
 = 
˝
 + 1;

731 
©_fd
 = 
fd
;

732 
©_«me
.
Àn
 = 
˝
 -át_«me.
d©a
;

735 i‡(
p
 =
íd
) {

748 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, ".", 
mode
, 
¸óã
, 
ac˚ss
);

749 
d⁄e
;

752 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER


753 && !(
¸óã
 & (
NGX_FILE_CREATE_OR_OPEN
|
NGX_FILE_TRUNCATE
)))

755 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
, 
mode
, 
¸óã
, 
ac˚ss
, 
log
);

758 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
, 
mode
|
NGX_FILE_NOFOLLOW
, 
¸óã
, 
ac˚ss
);

761 
d⁄e
:

763 i‡(
fd
 =
NGX_INVALID_FILE
) {

764 
of
->
îr
 = 
ngx_î∫o
;

765 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

768 
Áûed
:

770 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

771 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

772 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

775  
fd
;

777 
	}
}

780 
ngx_öt_t


781 
	$ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

782 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

784 
ngx_öt_t
 
rc
;

786 #i‡!(
NGX_HAVE_OPENAT
)

788 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

790 i‡(
rc
 =
NGX_FILE_ERROR
) {

791 
of
->
îr
 = 
ngx_î∫o
;

792 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

793  
NGX_FILE_ERROR
;

796  
rc
;

800 
ngx_fd_t
 
fd
;

802 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

804 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

806 i‡(
rc
 =
NGX_FILE_ERROR
) {

807 
of
->
îr
 = 
ngx_î∫o
;

808 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

809  
NGX_FILE_ERROR
;

812  
rc
;

815 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

816 
NGX_FILE_OPEN
, 0, 
log
);

818 i‡(
fd
 =
NGX_INVALID_FILE
) {

819  
NGX_FILE_ERROR
;

822 
rc
 = 
	`ngx_fd_öfo
(
fd
, 
fi
);

824 i‡(
rc
 =
NGX_FILE_ERROR
) {

825 
of
->
îr
 = 
ngx_î∫o
;

826 
of
->
Áûed
 = 
ngx_fd_öfo_n
;

829 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

830 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

831 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

834  
rc
;

836 
	}
}

839 
ngx_öt_t


840 
	$ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

841 
ngx_log_t
 *
log
)

843 
ngx_fd_t
 
fd
;

844 
ngx_fûe_öfo_t
 
fi
;

846 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

848 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

849 
of
->
fd
 = 
NGX_INVALID_FILE
;

850  
NGX_ERROR
;

853 i‡(
of
->
uniq
 =
	`ngx_fûe_uniq
(&
fi
)) {

854 
d⁄e
;

857 } i‡(
of
->
ã°_dú
) {

859 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

860 
of
->
fd
 = 
NGX_INVALID_FILE
;

861  
NGX_ERROR
;

864 i‡(
	`ngx_is_dú
(&
fi
)) {

865 
d⁄e
;

869 i‡(!
of
->
log
) {

876 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

877 
NGX_FILE_OPEN
, 0, 
log
);

880 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_APPEND
,

881 
NGX_FILE_CREATE_OR_OPEN
,

882 
NGX_FILE_DEFAULT_ACCESS
, 
log
);

885 i‡(
fd
 =
NGX_INVALID_FILE
) {

886 
of
->
fd
 = 
NGX_INVALID_FILE
;

887  
NGX_ERROR
;

890 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

891 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 
ngx_î∫o
,

892 
ngx_fd_öfo_n
 " \"%V\" faûed", 
«me
);

894 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

895 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

896 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

899 
of
->
fd
 = 
NGX_INVALID_FILE
;

901  
NGX_ERROR
;

904 i‡(
	`ngx_is_dú
(&
fi
)) {

905 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

906 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

907 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

910 
of
->
fd
 = 
NGX_INVALID_FILE
;

913 
of
->
fd
 = fd;

915 i‡(
of
->
ªad_ahód
 && 
	`ngx_fûe_size
(&
fi
Ë> 
NGX_MIN_READ_AHEAD
) {

916 i‡(
	`ngx_ªad_ahód
(
fd
, 
of
->
ªad_ahód
Ë=
NGX_ERROR
) {

917 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

918 
ngx_ªad_ahód_n
 " \"%V\" faûed", 
«me
);

922 i‡(
of
->
dúe˘io
 <
	`ngx_fûe_size
(&
fi
)) {

923 i‡(
	`ngx_dúe˘io_⁄
(
fd
Ë=
NGX_FILE_ERROR
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

925 
ngx_dúe˘io_⁄_n
 " \"%V\" faûed", 
«me
);

928 
of
->
is_dúe˘io
 = 1;

933 
d⁄e
:

935 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

936 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

937 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

938 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

939 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

940 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

941 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

942 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

944  
NGX_OK
;

945 
	}
}

954 
	$ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

955 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
)

957 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

959 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_VNODE_EVENT
)

960 || !
of
->
evíts


961 || 
fûe
->
evít


962 || 
of
->
fd
 =
NGX_INVALID_FILE


963 || 
fûe
->
u£s
 < 
of
->
mö_u£s
)

968 
fûe
->
u£_evít
 = 0;

970 
fûe
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
log
);

971 i‡(
fûe
->
evít
=
NULL
) {

975 
„v
 = 
	`ngx_Æloc
((
ngx_›í_fûe_ˇche_evít_t
), 
log
);

976 i‡(
„v
 =
NULL
) {

977 
	`ngx_‰ì
(
fûe
->
evít
);

978 
fûe
->
evít
 = 
NULL
;

982 
„v
->
fd
 = 
of
->fd;

983 
„v
->
fûe
 = file;

984 
„v
->
ˇche
 = cache;

986 
fûe
->
evít
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_ªmove
;

987 
fûe
->
evít
->
d©a
 = 
„v
;

995 
fûe
->
evít
->
log
 = 
ngx_cy˛e
->log;

997 i‡(
	`ngx_add_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
, 
NGX_ONESHOT_EVENT
)

998 !
NGX_OK
)

1000 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1001 
	`ngx_‰ì
(
fûe
->
evít
);

1002 
fûe
->
evít
 = 
NULL
;

1014 
	}
}

1018 
	$ngx_›í_fûe_˛ónup
(*
d©a
)

1020 
ngx_›í_fûe_ˇche_˛ónup_t
 *
c
 = 
d©a
;

1022 
c
->
fûe
->
cou¡
--;

1024 
	`ngx_˛o£_ˇched_fûe
(
c
->
ˇche
, c->
fûe
, c->
mö_u£s
, c->
log
);

1027 
	`ngx_expúe_ﬁd_ˇched_fûes
(
c
->
ˇche
, 1, c->
log
);

1028 
	}
}

1032 
	$ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

1033 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
)

1035 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1037 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
u£s
, fûe->
˛o£
);

1039 i‡(!
fûe
->
˛o£
) {

1041 
fûe
->
ac˚s£d
 = 
	`ngx_time
();

1043 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1045 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

1047 i‡(
fûe
->
u£s
 >
mö_u£s
 || fûe->
cou¡
) {

1052 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

1054 i‡(
fûe
->
cou¡
) {

1058 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

1060 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

1061 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1062 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
);

1065 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

1068 i‡(!
fûe
->
˛o£
) {

1072 
	`ngx_‰ì
(
fûe
->
«me
);

1073 
	`ngx_‰ì
(
fûe
);

1074 
	}
}

1078 
	$ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
)

1080 i‡(
fûe
->
evít
 =
NULL
) {

1084 (Ë
	`ngx_dñ_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
,

1085 
fûe
->
cou¡
 ? 
NGX_FLUSH_EVENT
 : 
NGX_CLOSE_EVENT
);

1087 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1088 
	`ngx_‰ì
(
fûe
->
evít
);

1089 
fûe
->
evít
 = 
NULL
;

1090 
fûe
->
u£_evít
 = 0;

1091 
	}
}

1095 
	$ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_uöt_t
 
n
,

1096 
ngx_log_t
 *
log
)

1098 
time_t
 
now
;

1099 
ngx_queue_t
 *
q
;

1100 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1102 
now
 = 
	`ngx_time
();

1110 
n
 < 3) {

1112 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

1116 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

1118 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

1120 i‡(
n
++ !0 && 
now
 - 
fûe
->
ac˚s£d
 <
ˇche
->
öa˘ive
) {

1124 
	`ngx_queue_ªmove
(
q
);

1126 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

1128 
ˇche
->
cuºít
--;

1130 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1131 "expúêˇched o≥¿fûe: %s", 
fûe
->
«me
);

1133 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

1134 
fûe
->
˛o£
 = 1;

1135 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
log
);

1138 
	`ngx_‰ì
(
fûe
->
«me
);

1139 
	`ngx_‰ì
(
fûe
);

1142 
	}
}

1146 
	$ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1147 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1149 
ngx_rbåì_node_t
 **
p
;

1150 
ngx_ˇched_›í_fûe_t
 *
fûe
, *
fûe_ãmp
;

1154 i‡(
node
->
key
 < 
ãmp
->key) {

1156 
p
 = &
ãmp
->
À·
;

1158 } i‡(
node
->
key
 > 
ãmp
->key) {

1160 
p
 = &
ãmp
->
right
;

1164 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1165 
fûe_ãmp
 = (
ngx_ˇched_›í_fûe_t
 *Ë
ãmp
;

1167 
p
 = (
	`ngx_°rcmp
(
fûe
->
«me
, 
fûe_ãmp
->name) < 0)

1168 ? &
ãmp
->
À·
 : &ãmp->
right
;

1171 i‡(*
p
 =
£¡öñ
) {

1175 
ãmp
 = *
p
;

1178 *
p
 = 
node
;

1179 
node
->
∑ª¡
 = 
ãmp
;

1180 
node
->
À·
 = 
£¡öñ
;

1181 
node
->
right
 = 
£¡öñ
;

1182 
	`ngx_rbt_ªd
(
node
);

1183 
	}
}

1186 
ngx_ˇched_›í_fûe_t
 *

1187 
	$ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

1188 
uöt32_t
 
hash
)

1190 
ngx_öt_t
 
rc
;

1191 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1192 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1194 
node
 = 
ˇche
->
rbåì
.
roŸ
;

1195 
£¡öñ
 = 
ˇche
->
rbåì
.sentinel;

1197 
node
 !
£¡öñ
) {

1199 i‡(
hash
 < 
node
->
key
) {

1200 
node
 =Çode->
À·
;

1204 i‡(
hash
 > 
node
->
key
) {

1205 
node
 =Çode->
right
;

1211 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1213 
rc
 = 
	`ngx_°rcmp
(
«me
->
d©a
, 
fûe
->name);

1215 i‡(
rc
 == 0) {

1216  
fûe
;

1219 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1222  
NULL
;

1223 
	}
}

1227 
	$ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
)

1229 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1230 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

1232 
„v
 = 
ev
->
d©a
;

1233 
fûe
 = 
„v
->file;

1235 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1237 
	`ngx_rbåì_dñëe
(&
„v
->
ˇche
->
rbåì
, &
fûe
->
node
);

1239 
„v
->
ˇche
->
cuºít
--;

1242 
fûe
->
evít
 = 
NULL
;

1243 
fûe
->
u£_evít
 = 0;

1245 
fûe
->
˛o£
 = 1;

1247 
	`ngx_˛o£_ˇched_fûe
(
„v
->
ˇche
, 
fûe
, 0, 
ev
->
log
);

1251 
	`ngx_‰ì
(
ev
->
d©a
);

1252 
	`ngx_‰ì
(
ev
);

1253 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_open_file_cache.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_OPEN_FILE_CACHE_H_INCLUDED_


13 
	#_NGX_OPEN_FILE_CACHE_H_INCLUDED_


	)

16 
	#NGX_OPEN_FILE_DIRECTIO_OFF
 
NGX_MAX_OFF_T_VALUE


	)

20 
ngx_fd_t
 
	mfd
;

21 
ngx_fûe_uniq_t
 
	muniq
;

22 
time_t
 
	mmtime
;

23 
off_t
 
	msize
;

24 
off_t
 
	mfs_size
;

25 
off_t
 
	mdúe˘io
;

26 
size_t
 
	mªad_ahód
;

28 
ngx_îr_t
 
	mîr
;

29 *
	mÁûed
;

31 
time_t
 
	mvÆid
;

33 
ngx_uöt_t
 
	mmö_u£s
;

35 #i‡(
NGX_HAVE_OPENAT
)

36 
size_t
 
	mdißbÀ_symlöks_‰om
;

37 
	mdißbÀ_symlöks
:2;

40 
	mã°_dú
:1;

41 
	mã°_⁄ly
:1;

42 
	mlog
:1;

43 
	mîr‹s
:1;

44 
	mevíts
:1;

46 
	mis_dú
:1;

47 
	mis_fûe
:1;

48 
	mis_lök
:1;

49 
	mis_exec
:1;

50 
	mis_dúe˘io
:1;

51 } 
	tngx_›í_fûe_öfo_t
;

54 
ngx_ˇched_›í_fûe_s
 
	tngx_ˇched_›í_fûe_t
;

56 
	sngx_ˇched_›í_fûe_s
 {

57 
ngx_rbåì_node_t
 
	mnode
;

58 
ngx_queue_t
 
	mqueue
;

60 
u_ch¨
 *
	m«me
;

61 
time_t
 
	m¸óãd
;

62 
time_t
 
	mac˚s£d
;

64 
ngx_fd_t
 
	mfd
;

65 
ngx_fûe_uniq_t
 
	muniq
;

66 
time_t
 
	mmtime
;

67 
off_t
 
	msize
;

68 
ngx_îr_t
 
	mîr
;

70 
uöt32_t
 
	mu£s
;

72 #i‡(
NGX_HAVE_OPENAT
)

73 
size_t
 
	mdißbÀ_symlöks_‰om
;

74 
	mdißbÀ_symlöks
:2;

77 
	mcou¡
:24;

78 
	m˛o£
:1;

79 
	mu£_evít
:1;

81 
	mis_dú
:1;

82 
	mis_fûe
:1;

83 
	mis_lök
:1;

84 
	mis_exec
:1;

85 
	mis_dúe˘io
:1;

87 
ngx_evít_t
 *
	mevít
;

92 
ngx_rbåì_t
 
	mrbåì
;

93 
ngx_rbåì_node_t
 
	m£¡öñ
;

94 
ngx_queue_t
 
	mexpúe_queue
;

96 
ngx_uöt_t
 
	mcuºít
;

97 
ngx_uöt_t
 
	mmax
;

98 
time_t
 
	möa˘ive
;

99 } 
	tngx_›í_fûe_ˇche_t
;

103 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

104 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

105 
ngx_uöt_t
 
	mmö_u£s
;

106 
ngx_log_t
 *
	mlog
;

107 } 
	tngx_›í_fûe_ˇche_˛ónup_t
;

113 *
	md©a
;

114 
ngx_evít_t
 *
	mªad
;

115 
ngx_evít_t
 *
	mwrôe
;

116 
ngx_fd_t
 
	mfd
;

118 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

119 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

120 } 
	tngx_›í_fûe_ˇche_evít_t
;

123 
ngx_›í_fûe_ˇche_t
 *
ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
,

124 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
);

125 
ngx_öt_t
 
ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

126 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_output_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
	#NGX_SENDFILE_LIMIT
 4096

	)

27 
	#NGX_NONE
 1

	)

30 
ngx_ölöe
 
ngx_öt_t


31 
ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
);

32 
ngx_öt_t
 
ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
,

33 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
);

34 
ngx_öt_t
 
ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

35 
off_t
 
bsize
);

36 
ngx_öt_t
 
ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

37 
off_t
 
bsize
);

38 
ngx_öt_t
 
ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
);

41 
ngx_öt_t


42 
	$ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

44 
off_t
 
bsize
;

45 
ngx_öt_t
 
rc
, 
œ°
;

46 
ngx_chaö_t
 *
˛
, *
out
, **
œ°_out
;

48 i‡(
˘x
->
ö
 =
NULL
 && ctx->
busy
 == NULL) {

56 i‡(
ö
 =
NULL
) {

57  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

60 i‡(
ö
->
√xt
 =
NULL


61 #i‡(
NGX_SENDFILE_LIMIT
)

62 && !(
ö
->
buf
->
ö_fûe
 && in->buf->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

64 && 
	`ngx_ouçut_chaö_as_is
(
˘x
, 
ö
->
buf
))

66  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

72 i‡(
ö
) {

73 i‡(
	`ngx_ouçut_chaö_add_c›y
(
˘x
->
poﬁ
, &˘x->
ö
, inË=
NGX_ERROR
) {

74  
NGX_ERROR
;

78 
out
 = 
NULL
;

79 
œ°_out
 = &
out
;

80 
œ°
 = 
NGX_NONE
;

84 #i‡(
NGX_HAVE_FILE_AIO
)

85 i‡(
˘x
->
aio
) {

86  
NGX_AGAIN
;

90 
˘x
->
ö
) {

97 
bsize
 = 
	`ngx_buf_size
(
˘x
->
ö
->
buf
);

99 i‡(
bsize
 =0 && !
	`ngx_buf_•ecül
(
˘x
->
ö
->
buf
)) {

101 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

104 
˘x
->
ö
->
buf
->
ãmp‹¨y
,

105 
˘x
->
ö
->
buf
->
ªcy˛ed
,

106 
˘x
->
ö
->
buf
->
ö_fûe
,

107 
˘x
->
ö
->
buf
->
°¨t
,

108 
˘x
->
ö
->
buf
->
pos
,

109 
˘x
->
ö
->
buf
->
œ°
,

110 
˘x
->
ö
->
buf
->
fûe
,

111 
˘x
->
ö
->
buf
->
fûe_pos
,

112 
˘x
->
ö
->
buf
->
fûe_œ°
);

114 
	`ngx_debug_poöt
();

116 
˘x
->
ö
 = ctx->ö->
√xt
;

121 i‡(
	`ngx_ouçut_chaö_as_is
(
˘x
, ctx->
ö
->
buf
)) {

125 
˛
 = 
˘x
->
ö
;

126 
˘x
->
ö
 = 
˛
->
√xt
;

128 *
œ°_out
 = 
˛
;

129 
œ°_out
 = &
˛
->
√xt
;

130 
˛
->
√xt
 = 
NULL
;

135 i‡(
˘x
->
buf
 =
NULL
) {

137 
rc
 = 
	`ngx_ouçut_chaö_Æign_fûe_buf
(
˘x
, 
bsize
);

139 i‡(
rc
 =
NGX_ERROR
) {

140  
NGX_ERROR
;

143 i‡(
rc
 !
NGX_OK
) {

145 i‡(
˘x
->
‰ì
) {

149 
˛
 = 
˘x
->
‰ì
;

150 
˘x
->
buf
 = 
˛
->buf;

151 
˘x
->
‰ì
 = 
˛
->
√xt
;

153 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
˛
);

155 } i‡(
out
 || 
˘x
->
Æloˇãd
 =˘x->
bufs
.
num
) {

159 } i‡(
	`ngx_ouçut_chaö_gë_buf
(
˘x
, 
bsize
Ë!
NGX_OK
) {

160  
NGX_ERROR
;

165 
rc
 = 
	`ngx_ouçut_chaö_c›y_buf
(
˘x
);

167 i‡(
rc
 =
NGX_ERROR
) {

168  
rc
;

171 i‡(
rc
 =
NGX_AGAIN
) {

172 i‡(
out
) {

176  
rc
;

181 i‡(
	`ngx_buf_size
(
˘x
->
ö
->
buf
) == 0) {

182 
˘x
->
ö
 = ctx->ö->
√xt
;

185 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

186 i‡(
˛
 =
NULL
) {

187  
NGX_ERROR
;

190 
˛
->
buf
 = 
˘x
->buf;

191 
˛
->
√xt
 = 
NULL
;

192 *
œ°_out
 = 
˛
;

193 
œ°_out
 = &
˛
->
√xt
;

194 
˘x
->
buf
 = 
NULL
;

197 i‡(
out
 =
NULL
 && 
œ°
 !
NGX_NONE
) {

199 i‡(
˘x
->
ö
) {

200  
NGX_AGAIN
;

203  
œ°
;

206 
œ°
 = 
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
out
);

208 i‡(
œ°
 =
NGX_ERROR
 ||Üa° =
NGX_DONE
) {

209  
œ°
;

212 
	`ngx_chaö_upd©e_chaös
(
˘x
->
poﬁ
, &˘x->
‰ì
, &˘x->
busy
, &
out
,

213 
˘x
->
èg
);

214 
œ°_out
 = &
out
;

216 
	}
}

219 
ngx_ölöe
 
ngx_öt_t


220 
	$ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
)

222 
ngx_uöt_t
 
£ndfûe
;

224 i‡(
	`ngx_buf_•ecül
(
buf
)) {

228 i‡(
buf
->
ö_fûe
 && buf->
fûe
->
dúe˘io
) {

232 
£ndfûe
 = 
˘x
->sendfile;

234 #i‡(
NGX_SENDFILE_LIMIT
)

236 i‡(
buf
->
ö_fûe
 && buf->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

237 
£ndfûe
 = 0;

242 i‡(!
£ndfûe
) {

244 i‡(!
	`ngx_buf_ö_mem‹y
(
buf
)) {

248 
buf
->
ö_fûe
 = 0;

251 i‡(
˘x
->
√ed_ö_mem‹y
 && !
	`ngx_buf_ö_mem‹y
(
buf
)) {

255 i‡(
˘x
->
√ed_ö_ãmp
 && (
buf
->
mem‹y
 || buf->
mm≠
)) {

260 
	}
}

263 
ngx_öt_t


264 
	$ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

265 
ngx_chaö_t
 *
ö
)

267 
ngx_chaö_t
 *
˛
, **
Œ
;

268 #i‡(
NGX_SENDFILE_LIMIT
)

269 
ngx_buf_t
 *
b
, *
buf
;

272 
Œ
 = 
chaö
;

274 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

275 
Œ
 = &
˛
->
√xt
;

278 
ö
) {

280 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

281 i‡(
˛
 =
NULL
) {

282  
NGX_ERROR
;

285 #i‡(
NGX_SENDFILE_LIMIT
)

287 
buf
 = 
ö
->buf;

289 i‡(
buf
->
ö_fûe


290 && 
buf
->
fûe_pos
 < 
NGX_SENDFILE_LIMIT


291 && 
buf
->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

295 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

296 i‡(
b
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

302 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

303 
buf
->
pos
 +(
ssize_t
Ë(
NGX_SENDFILE_LIMIT
 - buf->
fûe_pos
);

304 
b
->
œ°
 = 
buf
->
pos
;

307 
buf
->
fûe_pos
 = 
NGX_SENDFILE_LIMIT
;

308 
b
->
fûe_œ°
 = 
NGX_SENDFILE_LIMIT
;

310 
˛
->
buf
 = 
b
;

313 
˛
->
buf
 = buf;

314 
ö
 = in->
√xt
;

318 
˛
->
buf
 = 
ö
->buf;

319 
ö
 = in->
√xt
;

323 
˛
->
√xt
 = 
NULL
;

324 *
Œ
 = 
˛
;

325 
Œ
 = &
˛
->
√xt
;

328  
NGX_OK
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

335 
size_t
 
size
;

336 
ngx_buf_t
 *
ö
;

338 
ö
 = 
˘x
->ö->
buf
;

340 i‡(
ö
->
fûe
 =
NULL
 || !ö->fûe->
dúe˘io
) {

341  
NGX_DECLINED
;

344 
˘x
->
dúe˘io
 = 1;

346 
size
 = (
size_t
Ë(
ö
->
fûe_pos
 - (ö->fûe_po†& ~(
˘x
->
Æignmít
 - 1)));

348 i‡(
size
 == 0) {

350 i‡(
bsize
 >(
off_t
Ë
˘x
->
bufs
.
size
) {

351  
NGX_DECLINED
;

354 
size
 = (
size_t
Ë
bsize
;

357 
size
 = (
size_t
Ë
˘x
->
Æignmít
 - size;

359 i‡((
off_t
Ë
size
 > 
bsize
) {

360 
size
 = (
size_t
Ë
bsize
;

364 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 
size
);

365 i‡(
˘x
->
buf
 =
NULL
) {

366  
NGX_ERROR
;

374 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

375 
˘x
->
u«lig√d
 = 1;

378  
NGX_OK
;

379 
	}
}

382 
ngx_öt_t


383 
	$ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

385 
size_t
 
size
;

386 
ngx_buf_t
 *
b
, *
ö
;

387 
ngx_uöt_t
 
ªcy˛ed
;

389 
ö
 = 
˘x
->ö->
buf
;

390 
size
 = 
˘x
->
bufs
.size;

391 
ªcy˛ed
 = 1;

393 i‡(
ö
->
œ°_ö_chaö
) {

395 i‡(
bsize
 < (
off_t
Ë
size
) {

402 
size
 = (
size_t
Ë
bsize
;

403 
ªcy˛ed
 = 0;

405 } i‡(!
˘x
->
dúe˘io


406 && 
˘x
->
bufs
.
num
 == 1

407 && (
bsize
 < (
off_t
Ë(
size
 + size / 4)))

415 
size
 = (
size_t
Ë
bsize
;

416 
ªcy˛ed
 = 0;

420 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
poﬁ
);

421 i‡(
b
 =
NULL
) {

422  
NGX_ERROR
;

425 i‡(
˘x
->
dúe˘io
) {

432 
b
->
°¨t
 = 
	`ngx_pmemÆign
(
˘x
->
poﬁ
, 
size
, (
size_t
Ë˘x->
Æignmít
);

433 i‡(
b
->
°¨t
 =
NULL
) {

434  
NGX_ERROR
;

438 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

439 i‡(
b
->
°¨t
 =
NULL
) {

440  
NGX_ERROR
;

444 
b
->
pos
 = b->
°¨t
;

445 
b
->
œ°
 = b->
°¨t
;

446 
b
->
íd
 = b->
œ°
 + 
size
;

447 
b
->
ãmp‹¨y
 = 1;

448 
b
->
èg
 = 
˘x
->tag;

449 
b
->
ªcy˛ed
 =Ñecycled;

451 
˘x
->
buf
 = 
b
;

452 
˘x
->
Æloˇãd
++;

454  
NGX_OK
;

455 
	}
}

458 
ngx_öt_t


459 
	$ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
)

461 
off_t
 
size
;

462 
ssize_t
 
n
;

463 
ngx_buf_t
 *
§c
, *
d°
;

464 
ngx_uöt_t
 
£ndfûe
;

466 
§c
 = 
˘x
->
ö
->
buf
;

467 
d°
 = 
˘x
->
buf
;

469 
size
 = 
	`ngx_buf_size
(
§c
);

470 
size
 = 
	`ngx_mö
(size, 
d°
->
íd
 - d°->
pos
);

472 
£ndfûe
 = 
˘x
->£ndfûê& !˘x->
dúe˘io
;

474 #i‡(
NGX_SENDFILE_LIMIT
)

476 i‡(
§c
->
ö_fûe
 && src->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

477 
£ndfûe
 = 0;

482 i‡(
	`ngx_buf_ö_mem‹y
(
§c
)) {

483 
	`ngx_mem˝y
(
d°
->
pos
, 
§c
->pos, (
size_t
Ë
size
);

484 
§c
->
pos
 +(
size_t
Ë
size
;

485 
d°
->
œ°
 +(
size_t
Ë
size
;

487 i‡(
§c
->
ö_fûe
) {

489 i‡(
£ndfûe
) {

490 
d°
->
ö_fûe
 = 1;

491 
d°
->
fûe
 = 
§c
->file;

492 
d°
->
fûe_pos
 = 
§c
->file_pos;

493 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
size
;

496 
d°
->
ö_fûe
 = 0;

499 
§c
->
fûe_pos
 +
size
;

502 
d°
->
ö_fûe
 = 0;

505 i‡(
§c
->
pos
 =§c->
œ°
) {

506 
d°
->
Êush
 = 
§c
->flush;

507 
d°
->
œ°_buf
 = 
§c
->last_buf;

508 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

513 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

515 i‡(
˘x
->
u«lig√d
) {

516 i‡(
	`ngx_dúe˘io_off
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

518 
ngx_dúe˘io_off_n
 " \"%s\" failed",

519 
§c
->
fûe
->
«me
.
d©a
);

525 #i‡(
NGX_HAVE_FILE_AIO
)

527 i‡(
˘x
->
aio_h™dÀr
) {

528 
n
 = 
	`ngx_fûe_aio_ªad
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

529 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

530 i‡(
n
 =
NGX_AGAIN
) {

531 
˘x
->
	`aio_h™dÀr
(˘x, 
§c
->
fûe
);

532  
NGX_AGAIN
;

536 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

537 
§c
->
fûe_pos
);

541 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
, src->
fûe_pos
);

545 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

547 i‡(
˘x
->
u«lig√d
) {

548 
ngx_îr_t
 
îr
;

550 
îr
 = 
ngx_î∫o
;

552 i‡(
	`ngx_dúe˘io_⁄
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

553 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

554 
ngx_dúe˘io_⁄_n
 " \"%s\" failed",

555 
§c
->
fûe
->
«me
.
d©a
);

558 
	`ngx_£t_î∫o
(
îr
);

560 
˘x
->
u«lig√d
 = 0;

565 i‡(
n
 =
NGX_ERROR
) {

566  (
ngx_öt_t
Ë
n
;

569 i‡(
n
 !
size
) {

570 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

571 
ngx_ªad_fûe_n
 "Ñead only %z of %O from \"%s\"",

572 
n
, 
size
, 
§c
->
fûe
->
«me
.
d©a
);

573  
NGX_ERROR
;

576 
d°
->
œ°
 +
n
;

578 i‡(
£ndfûe
) {

579 
d°
->
ö_fûe
 = 1;

580 
d°
->
fûe
 = 
§c
->file;

581 
d°
->
fûe_pos
 = 
§c
->file_pos;

582 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
n
;

585 
d°
->
ö_fûe
 = 0;

588 
§c
->
fûe_pos
 +
n
;

590 i‡(
§c
->
fûe_pos
 =§c->
fûe_œ°
) {

591 
d°
->
Êush
 = 
§c
->flush;

592 
d°
->
œ°_buf
 = 
§c
->last_buf;

593 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

597  
NGX_OK
;

598 
	}
}

601 
ngx_öt_t


602 
	$ngx_chaö_wrôî
(*
d©a
, 
ngx_chaö_t
 *
ö
)

604 
ngx_chaö_wrôî_˘x_t
 *
˘x
 = 
d©a
;

606 
off_t
 
size
;

607 
ngx_chaö_t
 *
˛
;

608 
ngx_c⁄√˘i⁄_t
 *
c
;

610 
c
 = 
˘x
->
c⁄√˘i⁄
;

612 
size
 = 0; 
ö
; i¿ö->
√xt
) {

615 i‡(
	`ngx_buf_size
(
ö
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(in->buf)) {

616 
	`ngx_debug_poöt
();

620 
size
 +
	`ngx_buf_size
(
ö
->
buf
);

622 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

624 
ö
->
buf
->
Êush
, 
	`ngx_buf_size
(in->buf));

626 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

627 i‡(
˛
 =
NULL
) {

628  
NGX_ERROR
;

631 
˛
->
buf
 = 
ö
->buf;

632 
˛
->
√xt
 = 
NULL
;

633 *
˘x
->
œ°
 = 
˛
;

634 
˘x
->
œ°
 = &
˛
->
√xt
;

637 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

638 "chaö wrôî in: %p", 
˘x
->
out
);

640 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

643 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

644 
	`ngx_debug_poöt
();

649 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

652 i‡(
size
 =0 && !
c
->
buf„ªd
) {

653  
NGX_OK
;

656 
˘x
->
out
 = 
c
->
	`£nd_chaö
(c, ctx->out, ctx->
limô
);

658 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

659 "chaö wrôî out: %p", 
˘x
->
out
);

661 i‡(
˘x
->
out
 =
NGX_CHAIN_ERROR
) {

662  
NGX_ERROR
;

665 i‡(
˘x
->
out
 =
NULL
) {

666 
˘x
->
œ°
 = &˘x->
out
;

668 i‡(!
c
->
buf„ªd
) {

669  
NGX_OK
;

673  
NGX_AGAIN
;

674 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_palloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

13 *
ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

16 
ngx_poﬁ_t
 *

17 
	$ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
)

19 
ngx_poﬁ_t
 *
p
;

21 
p
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
size
, 
log
);

22 i‡(
p
 =
NULL
) {

23  
NULL
;

26 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

27 
p
->
d
.
íd
 = (
u_ch¨
 *Ë∞+ 
size
;

28 
p
->
d
.
√xt
 = 
NULL
;

29 
p
->
d
.
Áûed
 = 0;

31 
size
 = sizê- (
ngx_poﬁ_t
);

32 
p
->
max
 = (
size
 < 
NGX_MAX_ALLOC_FROM_POOL
) ? size : NGX_MAX_ALLOC_FROM_POOL;

34 
p
->
cuºít
 =Ö;

35 
p
->
chaö
 = 
NULL
;

36 
p
->
œrge
 = 
NULL
;

37 
p
->
˛ónup
 = 
NULL
;

38 
p
->
log
 =Üog;

40  
p
;

41 
	}
}

45 
	$ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

47 
ngx_poﬁ_t
 *
p
, *
n
;

48 
ngx_poﬁ_œrge_t
 *
l
;

49 
ngx_poﬁ_˛ónup_t
 *
c
;

51 
c
 = 
poﬁ
->
˛ónup
; c; c = c->
√xt
) {

52 i‡(
c
->
h™dÀr
) {

53 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

54 "ru¿˛ónup: %p", 
c
);

55 
c
->
	`h™dÀr
(c->
d©a
);

59 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

61 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0, "‰ì: %p", 
l
->
Æloc
);

63 i‡(
l
->
Æloc
) {

64 
	`ngx_‰ì
(
l
->
Æloc
);

68 #i‡(
NGX_DEBUG
)

75 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

76 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

77 "‰ì: %p, unu£d: %uz", 
p
,Ö->
d
.
íd
 -Ö->d.
œ°
);

79 i‡(
n
 =
NULL
) {

86 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

87 
	`ngx_‰ì
(
p
);

89 i‡(
n
 =
NULL
) {

93 
	}
}

97 
	$ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

99 
ngx_poﬁ_t
 *
p
;

100 
ngx_poﬁ_œrge_t
 *
l
;

102 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

103 i‡(
l
->
Æloc
) {

104 
	`ngx_‰ì
(
l
->
Æloc
);

108 
p
 = 
poﬁ
;Ö;Ö =Ö->
d
.
√xt
) {

109 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

110 
p
->
d
.
Áûed
 = 0;

113 
poﬁ
->
cuºít
 =Öool;

114 
poﬁ
->
chaö
 = 
NULL
;

115 
poﬁ
->
œrge
 = 
NULL
;

116 
	}
}

120 
	$ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

122 
u_ch¨
 *
m
;

123 
ngx_poﬁ_t
 *
p
;

125 i‡(
size
 <
poﬁ
->
max
) {

127 
p
 = 
poﬁ
->
cuºít
;

130 
m
 = 
	`ngx_Æign_±r
(
p
->
d
.
œ°
, 
NGX_ALIGNMENT
);

132 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

133 
p
->
d
.
œ°
 = 
m
 + 
size
;

135  
m
;

138 
p
 =Ö->
d
.
√xt
;

140 } 
p
);

142  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

145  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

146 
	}
}

150 
	$ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

152 
u_ch¨
 *
m
;

153 
ngx_poﬁ_t
 *
p
;

155 i‡(
size
 <
poﬁ
->
max
) {

157 
p
 = 
poﬁ
->
cuºít
;

160 
m
 = 
p
->
d
.
œ°
;

162 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

163 
p
->
d
.
œ°
 = 
m
 + 
size
;

165  
m
;

168 
p
 =Ö->
d
.
√xt
;

170 } 
p
);

172  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

175  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

176 
	}
}

180 
	$ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

182 
u_ch¨
 *
m
;

183 
size_t
 
psize
;

184 
ngx_poﬁ_t
 *
p
, *
√w
, *
cuºít
;

186 
psize
 = (
size_t
Ë(
poﬁ
->
d
.
íd
 - (
u_ch¨
 *)Öool);

188 
m
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
psize
, 
poﬁ
->
log
);

189 i‡(
m
 =
NULL
) {

190  
NULL
;

193 
√w
 = (
ngx_poﬁ_t
 *Ë
m
;

195 
√w
->
d
.
íd
 = 
m
 + 
psize
;

196 
√w
->
d
.
√xt
 = 
NULL
;

197 
√w
->
d
.
Áûed
 = 0;

199 
m
 +(
ngx_poﬁ_d©a_t
);

200 
m
 = 
	`ngx_Æign_±r
(m, 
NGX_ALIGNMENT
);

201 
√w
->
d
.
œ°
 = 
m
 + 
size
;

203 
cuºít
 = 
poﬁ
->current;

205 
p
 = 
cuºít
;Ö->
d
.
√xt
;Ö =Ö->d.next) {

206 i‡(
p
->
d
.
Áûed
++ > 4) {

207 
cuºít
 = 
p
->
d
.
√xt
;

211 
p
->
d
.
√xt
 = 
√w
;

213 
poﬁ
->
cuºít
 = cuºíà? cuºíà: 
√w
;

215  
m
;

216 
	}
}

220 
	$ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

222 *
p
;

223 
ngx_uöt_t
 
n
;

224 
ngx_poﬁ_œrge_t
 *
œrge
;

226 
p
 = 
	`ngx_Æloc
(
size
, 
poﬁ
->
log
);

227 i‡(
p
 =
NULL
) {

228  
NULL
;

231 
n
 = 0;

233 
œrge
 = 
poﬁ
->œrge;Ü¨ge;Ü¨gêœrge->
√xt
) {

234 i‡(
œrge
->
Æloc
 =
NULL
) {

235 
œrge
->
Æloc
 = 
p
;

236  
p
;

239 i‡(
n
++ > 3) {

244 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

245 i‡(
œrge
 =
NULL
) {

246 
	`ngx_‰ì
(
p
);

247  
NULL
;

250 
œrge
->
Æloc
 = 
p
;

251 
œrge
->
√xt
 = 
poﬁ
->large;

252 
poﬁ
->
œrge
 =Üarge;

254  
p
;

255 
	}
}

259 
	$ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
)

261 *
p
;

262 
ngx_poﬁ_œrge_t
 *
œrge
;

264 
p
 = 
	`ngx_memÆign
(
Æignmít
, 
size
, 
poﬁ
->
log
);

265 i‡(
p
 =
NULL
) {

266  
NULL
;

269 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

270 i‡(
œrge
 =
NULL
) {

271 
	`ngx_‰ì
(
p
);

272  
NULL
;

275 
œrge
->
Æloc
 = 
p
;

276 
œrge
->
√xt
 = 
poﬁ
->large;

277 
poﬁ
->
œrge
 =Üarge;

279  
p
;

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
)

286 
ngx_poﬁ_œrge_t
 *
l
;

288 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

289 i‡(
p
 =
l
->
Æloc
) {

290 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

291 "‰ì: %p", 
l
->
Æloc
);

292 
	`ngx_‰ì
(
l
->
Æloc
);

293 
l
->
Æloc
 = 
NULL
;

295  
NGX_OK
;

299  
NGX_DECLINED
;

300 
	}
}

304 
	$ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

306 *
p
;

308 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

309 i‡(
p
) {

310 
	`ngx_memzîo
(
p
, 
size
);

313  
p
;

314 
	}
}

317 
ngx_poﬁ_˛ónup_t
 *

318 
	$ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
)

320 
ngx_poﬁ_˛ónup_t
 *
c
;

322 
c
 = 
	`ngx_∑Œoc
(
p
, (
ngx_poﬁ_˛ónup_t
));

323 i‡(
c
 =
NULL
) {

324  
NULL
;

327 i‡(
size
) {

328 
c
->
d©a
 = 
	`ngx_∑Œoc
(
p
, 
size
);

329 i‡(
c
->
d©a
 =
NULL
) {

330  
NULL
;

334 
c
->
d©a
 = 
NULL
;

337 
c
->
h™dÀr
 = 
NULL
;

338 
c
->
√xt
 = 
p
->
˛ónup
;

340 
p
->
˛ónup
 = 
c
;

342 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
p
->
log
, 0, "add cÀ™up: %p", 
c
);

344  
c
;

345 
	}
}

349 
	$ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
)

351 
ngx_poﬁ_˛ónup_t
 *
c
;

352 
ngx_poﬁ_˛ónup_fûe_t
 *
cf
;

354 
c
 = 
p
->
˛ónup
; c; c = c->
√xt
) {

355 i‡(
c
->
h™dÀr
 =
ngx_poﬁ_˛ónup_fûe
) {

357 
cf
 = 
c
->
d©a
;

359 i‡(
cf
->
fd
 == fd) {

360 
c
->
	`h™dÀr
(
cf
);

361 
c
->
h™dÀr
 = 
NULL
;

366 
	}
}

370 
	$ngx_poﬁ_˛ónup_fûe
(*
d©a
)

372 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

374 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d",

375 
c
->
fd
);

377 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

378 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

379 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

381 
	}
}

385 
	$ngx_poﬁ_dñëe_fûe
(*
d©a
)

387 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

389 
ngx_îr_t
 
îr
;

391 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d %s",

392 
c
->
fd
, c->
«me
);

394 i‡(
	`ngx_dñëe_fûe
(
c
->
«me
Ë=
NGX_FILE_ERROR
) {

395 
îr
 = 
ngx_î∫o
;

397 i‡(
îr
 !
NGX_ENOENT
) {

398 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
îr
,

399 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

403 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

404 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

405 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

407 
	}
}

413 
	$ngx_gë_ˇched_block
(
size_t
 
size
)

415 *
p
;

416 
ngx_ˇched_block_¶Ÿ_t
 *
¶Ÿ
;

418 i‡(
ngx_cy˛e
->
ˇche
 =
NULL
) {

419  
NULL
;

422 
¶Ÿ
 = &
ngx_cy˛e
->
ˇche
[(
size
 + 
ngx_∑gesize
 - 1) /Çgx_pagesize];

424 
¶Ÿ
->
åõs
++;

426 i‡(
¶Ÿ
->
numbî
) {

427 
p
 = 
¶Ÿ
->
block
;

428 
¶Ÿ
->
block
 = slŸ->block->
√xt
;

429 
¶Ÿ
->
numbî
--;

430  
p
;

433  
NULL
;

434 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_palloc.h

8 #i‚de‡
_NGX_PALLOC_H_INCLUDED_


9 
	#_NGX_PALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

20 
	#NGX_MAX_ALLOC_FROM_POOL
 (
ngx_∑gesize
 - 1)

	)

22 
	#NGX_DEFAULT_POOL_SIZE
 (16 * 1024)

	)

24 
	#NGX_POOL_ALIGNMENT
 16

	)

25 
	#NGX_MIN_POOL_SIZE
 \

26 
	`ngx_Æign
(((
ngx_poﬁ_t
Ë+ 2 * (
ngx_poﬁ_œrge_t
)), \

27 
NGX_POOL_ALIGNMENT
)

	)

30 (*
	tngx_poﬁ_˛ónup_±
)(*
	td©a
);

32 
ngx_poﬁ_˛ónup_s
 
	tngx_poﬁ_˛ónup_t
;

34 
	sngx_poﬁ_˛ónup_s
 {

35 
ngx_poﬁ_˛ónup_±
 
h™dÀr
;

36 *
d©a
;

37 
ngx_poﬁ_˛ónup_t
 *
√xt
;

41 
ngx_poﬁ_œrge_s
 
	tngx_poﬁ_œrge_t
;

43 
	sngx_poﬁ_œrge_s
 {

44 
ngx_poﬁ_œrge_t
 *
√xt
;

45 *
Æloc
;

50 
u_ch¨
 *
œ°
;

51 
u_ch¨
 *
íd
;

52 
ngx_poﬁ_t
 *
√xt
;

53 
ngx_uöt_t
 
Áûed
;

54 } 
	tngx_poﬁ_d©a_t
;

57 
	sngx_poﬁ_s
 {

58 
ngx_poﬁ_d©a_t
 
d
;

59 
size_t
 
max
;

60 
ngx_poﬁ_t
 *
cuºít
;

61 
ngx_chaö_t
 *
chaö
;

62 
ngx_poﬁ_œrge_t
 *
œrge
;

63 
ngx_poﬁ_˛ónup_t
 *
˛ónup
;

64 
ngx_log_t
 *
log
;

69 
ngx_fd_t
 
fd
;

70 
u_ch¨
 *
«me
;

71 
ngx_log_t
 *
log
;

72 } 
	tngx_poﬁ_˛ónup_fûe_t
;

75 *
	`ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

76 *
	`ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

78 
ngx_poﬁ_t
 *
	`ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
);

79 
	`ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

80 
	`ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

82 *
	`ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

83 *
	`ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

84 *
	`ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

85 *
	`ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
);

86 
ngx_öt_t
 
	`ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
);

89 
ngx_poﬁ_˛ónup_t
 *
	`ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
);

90 
	`ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
);

91 
	`ngx_poﬁ_˛ónup_fûe
(*
d©a
);

92 
	`ngx_poﬁ_dñëe_fûe
(*
d©a
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ssize_t


13 
	$ngx_∑r£_size
(
ngx_°r_t
 *
löe
)

15 
u_ch¨
 
unô
;

16 
size_t
 
Àn
;

17 
ssize_t
 
size
;

18 
ngx_öt_t
 
sˇÀ
;

20 
Àn
 = 
löe
->len;

21 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

23 
unô
) {

26 
Àn
--;

27 
sˇÀ
 = 1024;

32 
Àn
--;

33 
sˇÀ
 = 1024 * 1024;

37 
sˇÀ
 = 1;

40 
size
 = 
	`ngx_©osz
(
löe
->
d©a
, 
Àn
);

41 i‡(
size
 =
NGX_ERROR
) {

42  
NGX_ERROR
;

45 
size
 *
sˇÀ
;

47  
size
;

48 
	}
}

51 
off_t


52 
	$ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
)

54 
u_ch¨
 
unô
;

55 
off_t
 
off£t
;

56 
size_t
 
Àn
;

57 
ngx_öt_t
 
sˇÀ
;

59 
Àn
 = 
löe
->len;

60 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

62 
unô
) {

65 
Àn
--;

66 
sˇÀ
 = 1024;

71 
Àn
--;

72 
sˇÀ
 = 1024 * 1024;

77 
Àn
--;

78 
sˇÀ
 = 1024 * 1024 * 1024;

82 
sˇÀ
 = 1;

85 
off£t
 = 
	`ngx_©oof
(
löe
->
d©a
, 
Àn
);

86 i‡(
off£t
 =
NGX_ERROR
) {

87  
NGX_ERROR
;

90 
off£t
 *
sˇÀ
;

92  
off£t
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
)

99 
u_ch¨
 *
p
, *
œ°
;

100 
ngx_öt_t
 
vÆue
, 
tŸÆ
, 
sˇÀ
;

101 
ngx_uöt_t
 
max
, 
vÆid
;

103 
°_°¨t
 = 0,

104 
°_yór
,

105 
°_m⁄th
,

106 
°_wìk
,

107 
°_day
,

108 
°_hour
,

109 
°_mö
,

110 
°_£c
,

111 
°_m£c
,

112 
°_œ°


113 } 
°ï
;

115 
vÆid
 = 0;

116 
vÆue
 = 0;

117 
tŸÆ
 = 0;

118 
°ï
 = 
is_£c
 ? 
°_°¨t
 : 
°_m⁄th
;

119 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

121 
p
 = 
löe
->
d©a
;

122 
œ°
 = 
p
 + 
löe
->
Àn
;

124 
p
 < 
œ°
) {

126 i‡(*
p
 >= '0' && *p <= '9') {

127 
vÆue
 = vÆuê* 10 + (*
p
++ - '0');

128 
vÆid
 = 1;

132 *
p
++) {

135 i‡(
°ï
 > 
°_°¨t
) {

136  
NGX_ERROR
;

138 
°ï
 = 
°_yór
;

139 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 365);

140 
sˇÀ
 = 60 * 60 * 24 * 365;

144 i‡(
°ï
 >
°_m⁄th
) {

145  
NGX_ERROR
;

147 
°ï
 = 
°_m⁄th
;

148 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 30);

149 
sˇÀ
 = 60 * 60 * 24 * 30;

153 i‡(
°ï
 >
°_wìk
) {

154  
NGX_ERROR
;

156 
°ï
 = 
°_wìk
;

157 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 7);

158 
sˇÀ
 = 60 * 60 * 24 * 7;

162 i‡(
°ï
 >
°_day
) {

163  
NGX_ERROR
;

165 
°ï
 = 
°_day
;

166 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24);

167 
sˇÀ
 = 60 * 60 * 24;

171 i‡(
°ï
 >
°_hour
) {

172  
NGX_ERROR
;

174 
°ï
 = 
°_hour
;

175 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60);

176 
sˇÀ
 = 60 * 60;

180 i‡(*
p
 == 's') {

181 i‡(
is_£c
 || 
°ï
 >
°_m£c
) {

182  
NGX_ERROR
;

184 
p
++;

185 
°ï
 = 
°_m£c
;

186 
max
 = 
NGX_MAX_INT32_VALUE
;

187 
sˇÀ
 = 1;

191 i‡(
°ï
 >
°_mö
) {

192  
NGX_ERROR
;

194 
°ï
 = 
°_mö
;

195 
max
 = 
NGX_MAX_INT32_VALUE
 / 60;

196 
sˇÀ
 = 60;

200 i‡(
°ï
 >
°_£c
) {

201  
NGX_ERROR
;

203 
°ï
 = 
°_£c
;

204 
max
 = 
NGX_MAX_INT32_VALUE
;

205 
sˇÀ
 = 1;

209 i‡(
°ï
 >
°_£c
) {

210  
NGX_ERROR
;

212 
°ï
 = 
°_œ°
;

213 
max
 = 
NGX_MAX_INT32_VALUE
;

214 
sˇÀ
 = 1;

218  
NGX_ERROR
;

221 i‡(
°ï
 !
°_m£c
 && !
is_£c
) {

222 
sˇÀ
 *= 1000;

223 
max
 /= 1000;

226 i‡((
ngx_uöt_t
Ë
vÆue
 > 
max
) {

227  
NGX_ERROR
;

230 
tŸÆ
 +
vÆue
 * 
sˇÀ
;

232 i‡((
ngx_uöt_t
Ë
tŸÆ
 > 
NGX_MAX_INT32_VALUE
) {

233  
NGX_ERROR
;

236 
vÆue
 = 0;

237 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

239 
p
 < 
œ°
 && *p == ' ') {

240 
p
++;

244 i‡(
vÆid
) {

245  
tŸÆ
 + 
vÆue
 * 
sˇÀ
;

248  
NGX_ERROR
;

249 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_parse.h

8 #i‚de‡
_NGX_PARSE_H_INCLUDED_


9 
	#_NGX_PARSE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ssize_t
 
ngx_∑r£_size
(
ngx_°r_t
 *
löe
);

17 
off_t
 
ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
);

18 
ngx_öt_t
 
ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_proxy_protocol.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *

13 
	$ngx_¥oxy_¥Ÿocﬁ_∑r£
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, u_ch¨ *
œ°
)

15 
size_t
 
Àn
;

16 
u_ch¨
 
ch
, *
p
, *
addr
;

18 
p
 = 
buf
;

19 
Àn
 = 
œ°
 - 
buf
;

21 i‡(
Àn
 < 8 || 
	`ngx_°∫cmp
(
p
, "PROXY ", 6) != 0) {

22 
övÆid
;

25 
p
 += 6;

26 
Àn
 -= 6;

28 i‡(
Àn
 >7 && 
	`ngx_°∫cmp
(
p
, "UNKNOWN", 7) == 0) {

29 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

31 
p
 += 7;

32 
skù
;

35 i‡(
Àn
 < 5 || 
	`ngx_°∫cmp
(
p
, "TCP", 3) != 0

36 || (
p
[3] != '4' &&Ö[3] != '6') ||Ö[4] != ' ')

38 
övÆid
;

41 
p
 += 5;

42 
addr
 = 
p
;

45 i‡(
p
 =
œ°
) {

46 
övÆid
;

49 
ch
 = *
p
++;

51 i‡(
ch
 == ' ') {

55 i‡(
ch
 != ':' && ch != '.'

56 && (
ch
 < 'a' || ch > 'f')

57 && (
ch
 < 'A' || ch > 'F')

58 && (
ch
 < '0' || ch > '9'))

60 
övÆid
;

64 
Àn
 = 
p
 - 
addr
 - 1;

65 
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
Àn
);

67 i‡(
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 =
NULL
) {

68  
NULL
;

71 
	`ngx_mem˝y
(
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
, 
addr
, 
Àn
);

72 
c
->
¥oxy_¥Ÿocﬁ_addr
.
Àn
 =Üen;

74 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

75 "PROXYÖrŸocﬁáddªss: \"%V\"", &
c
->
¥oxy_¥Ÿocﬁ_addr
);

77 
skù
:

79  ; 
p
 < 
œ°
 - 1;Ö++) {

80 i‡(
p
[0] =
CR
 &&Ö[1] =
LF
) {

81  
p
 + 2;

85 
övÆid
:

87 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

88 "brokí hódî: \"%*s\"", (
size_t
Ë(
œ°
 - 
buf
), buf);

90  
NULL
;

91 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_proxy_protocol.h

8 #i‚de‡
_NGX_PROXY_PROTOCOL_H_INCLUDED_


9 
	#_NGX_PROXY_PROTOCOL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_PROXY_PROTOCOL_MAX_HEADER
 107

	)

19 
u_ch¨
 *
ngx_¥oxy_¥Ÿocﬁ_∑r£
(
ngx_c⁄√˘i⁄_t
 *
c
, u_ch¨ *
buf
,

20 
u_ch¨
 *
œ°
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_queue.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

17 
ngx_queue_t
 *

18 
	$ngx_queue_middÀ
(
ngx_queue_t
 *
queue
)

20 
ngx_queue_t
 *
middÀ
, *
√xt
;

22 
middÀ
 = 
	`ngx_queue_hód
(
queue
);

24 i‡(
middÀ
 =
	`ngx_queue_œ°
(
queue
)) {

25  
middÀ
;

28 
√xt
 = 
	`ngx_queue_hód
(
queue
);

31 
middÀ
 = 
	`ngx_queue_√xt
(middle);

33 
√xt
 = 
	`ngx_queue_√xt
(next);

35 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

36  
middÀ
;

39 
√xt
 = 
	`ngx_queue_√xt
(next);

41 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

42  
middÀ
;

45 
	}
}

51 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

52 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *))

54 
ngx_queue_t
 *
q
, *
¥ev
, *
√xt
;

56 
q
 = 
	`ngx_queue_hód
(
queue
);

58 i‡(
q
 =
	`ngx_queue_œ°
(
queue
)) {

62 
q
 = 
	`ngx_queue_√xt
(q); q !
	`ngx_queue_£¡öñ
(
queue
); q = 
√xt
) {

64 
¥ev
 = 
	`ngx_queue_¥ev
(
q
);

65 
√xt
 = 
	`ngx_queue_√xt
(
q
);

67 
	`ngx_queue_ªmove
(
q
);

70 i‡(
	`cmp
(
¥ev
, 
q
) <= 0) {

74 
¥ev
 = 
	`ngx_queue_¥ev
(prev);

76 } 
¥ev
 !
	`ngx_queue_£¡öñ
(
queue
));

78 
	`ngx_queue_ö£π_a·î
(
¥ev
, 
q
);

80 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_queue.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_QUEUE_H_INCLUDED_


13 
	#_NGX_QUEUE_H_INCLUDED_


	)

16 
ngx_queue_s
 
	tngx_queue_t
;

18 
	sngx_queue_s
 {

19 
ngx_queue_t
 *
	m¥ev
;

20 
ngx_queue_t
 *
	m√xt
;

24 
	#ngx_queue_öô
(
q
) \

25 (
q
)->
¥ev
 = q; \

26 (
q
)->
√xt
 = 
	)
q

29 
	#ngx_queue_em±y
(
h
) \

30 (
h
 =(h)->
¥ev
)

	)

33 
	#ngx_queue_ö£π_hód
(
h
, 
x
) \

34 (
x
)->
√xt
 = (
h
)->next; \

35 (
x
)->
√xt
->
¥ev
 = x; \

36 (
x
)->
¥ev
 = 
h
; \

37 (
h
)->
√xt
 = 
x


	)

40 
	#ngx_queue_ö£π_a·î
 
ngx_queue_ö£π_hód


	)

43 
	#ngx_queue_ö£π_èû
(
h
, 
x
) \

44 (
x
)->
¥ev
 = (
h
)->prev; \

45 (
x
)->
¥ev
->
√xt
 = x; \

46 (
x
)->
√xt
 = 
h
; \

47 (
h
)->
¥ev
 = 
x


	)

50 
	#ngx_queue_hód
(
h
) \

51 (
h
)->
√xt


	)

54 
	#ngx_queue_œ°
(
h
) \

55 (
h
)->
¥ev


	)

58 
	#ngx_queue_£¡öñ
(
h
) \

59 (
h
)

	)

62 
	#ngx_queue_√xt
(
q
) \

63 (
q
)->
√xt


	)

66 
	#ngx_queue_¥ev
(
q
) \

67 (
q
)->
¥ev


	)

70 #i‡(
NGX_DEBUG
)

72 
	#ngx_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->next; \

75 (
x
)->
¥ev
 = 
NULL
; \

76 (
x
)->
√xt
 = 
NULL


	)

80 
	#ngx_queue_ªmove
(
x
) \

81 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

82 (
x
)->
¥ev
->
√xt
 = (x)->
	)
√xt

87 
	#ngx_queue_•lô
(
h
, 
q
, 
n
) \

88 (
n
)->
¥ev
 = (
h
)->prev; \

89 (
n
)->
¥ev
->
√xt
 =Ç; \

90 (
n
)->
√xt
 = 
q
; \

91 (
h
)->
¥ev
 = (
q
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h; \

93 (
q
)->
¥ev
 = 
n
;

	)

96 
	#ngx_queue_add
(
h
, 
n
) \

97 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

98 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

99 (
h
)->
¥ev
 = (
n
)->prev; \

100 (
h
)->
¥ev
->
√xt
 = h;

	)

103 
	#ngx_queue_d©a
(
q
, 
ty≥
, 
lök
) \

104 (
ty≥
 *Ë((
u_ch¨
 *Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

107 
ngx_queue_t
 *
ngx_queue_middÀ
“gx_queue_à*
queue
);

108 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

109 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *));

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_radix_tree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_ødix_node_t
 *
ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
);

15 
ngx_ødix_åì_t
 *

16 
	$ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_öt_t
 
¥óŒoˇã
)

18 
uöt32_t
 
key
, 
mask
, 
öc
;

19 
ngx_ødix_åì_t
 *
åì
;

21 
åì
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_ødix_åì_t
));

22 i‡(
åì
 =
NULL
) {

23  
NULL
;

26 
åì
->
poﬁ
 =Öool;

27 
åì
->
‰ì
 = 
NULL
;

28 
åì
->
°¨t
 = 
NULL
;

29 
åì
->
size
 = 0;

31 
åì
->
roŸ
 = 
	`ngx_ødix_Æloc
(tree);

32 i‡(
åì
->
roŸ
 =
NULL
) {

33  
NULL
;

36 
åì
->
roŸ
->
right
 = 
NULL
;

37 
åì
->
roŸ
->
À·
 = 
NULL
;

38 
åì
->
roŸ
->
∑ª¡
 = 
NULL
;

39 
åì
->
roŸ
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

41 i‡(
¥óŒoˇã
 == 0) {

42  
åì
;

62 i‡(
¥óŒoˇã
 == -1) {

63 
ngx_∑gesize
 / (
ngx_ødix_node_t
)) {

67 
¥óŒoˇã
 = 6;

72 
¥óŒoˇã
 = 7;

77 
¥óŒoˇã
 = 8;

81 
mask
 = 0;

82 
öc
 = 0x80000000;

84 
¥óŒoˇã
--) {

86 
key
 = 0;

87 
mask
 >>= 1;

88 
mask
 |= 0x80000000;

91 i‡(
	`ngx_ødix32åì_ö£π
(
åì
, 
key
, 
mask
, 
NGX_RADIX_NO_VALUE
)

92 !
NGX_OK
)

94  
NULL
;

97 
key
 +
öc
;

99 } 
key
);

101 
öc
 >>= 1;

104  
åì
;

105 
	}
}

108 
ngx_öt_t


109 
	$ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
,

110 
uöçå_t
 
vÆue
)

112 
uöt32_t
 
bô
;

113 
ngx_ødix_node_t
 *
node
, *
√xt
;

115 
bô
 = 0x80000000;

117 
node
 = 
åì
->
roŸ
;

118 
√xt
 = 
åì
->
roŸ
;

120 
bô
 & 
mask
) {

121 i‡(
key
 & 
bô
) {

122 
√xt
 = 
node
->
right
;

125 
√xt
 = 
node
->
À·
;

128 i‡(
√xt
 =
NULL
) {

132 
bô
 >>= 1;

133 
node
 = 
√xt
;

136 i‡(
√xt
) {

137 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

138  
NGX_BUSY
;

141 
node
->
vÆue
 = value;

142  
NGX_OK
;

145 
bô
 & 
mask
) {

146 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

147 i‡(
√xt
 =
NULL
) {

148  
NGX_ERROR
;

151 
√xt
->
right
 = 
NULL
;

152 
√xt
->
À·
 = 
NULL
;

153 
√xt
->
∑ª¡
 = 
node
;

154 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

156 i‡(
key
 & 
bô
) {

157 
node
->
right
 = 
√xt
;

160 
node
->
À·
 = 
√xt
;

163 
bô
 >>= 1;

164 
node
 = 
√xt
;

167 
node
->
vÆue
 = value;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
)

176 
uöt32_t
 
bô
;

177 
ngx_ødix_node_t
 *
node
;

179 
bô
 = 0x80000000;

180 
node
 = 
åì
->
roŸ
;

182 
node
 && (
bô
 & 
mask
)) {

183 i‡(
key
 & 
bô
) {

184 
node
 =Çode->
right
;

187 
node
 =Çode->
À·
;

190 
bô
 >>= 1;

193 i‡(
node
 =
NULL
) {

194  
NGX_ERROR
;

197 i‡(
node
->
right
 ||Çode->
À·
) {

198 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

199 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

200  
NGX_OK
;

203  
NGX_ERROR
;

207 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

208 
node
->
∑ª¡
->
right
 = 
NULL
;

211 
node
->
∑ª¡
->
À·
 = 
NULL
;

214 
node
->
right
 = 
åì
->
‰ì
;

215 
åì
->
‰ì
 = 
node
;

217 
node
 =Çode->
∑ª¡
;

219 i‡(
node
->
right
 ||Çode->
À·
) {

223 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

227 i‡(
node
->
∑ª¡
 =
NULL
) {

232  
NGX_OK
;

233 
	}
}

236 
uöçå_t


237 
	$ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
)

239 
uöt32_t
 
bô
;

240 
uöçå_t
 
vÆue
;

241 
ngx_ødix_node_t
 *
node
;

243 
bô
 = 0x80000000;

244 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

245 
node
 = 
åì
->
roŸ
;

247 
node
) {

248 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

249 
vÆue
 = 
node
->value;

252 i‡(
key
 & 
bô
) {

253 
node
 =Çode->
right
;

256 
node
 =Çode->
À·
;

259 
bô
 >>= 1;

262  
vÆue
;

263 
	}
}

266 #i‡(
NGX_HAVE_INET6
)

268 
ngx_öt_t


269 
	$ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
,

270 
uöçå_t
 
vÆue
)

272 
u_ch¨
 
bô
;

273 
ngx_uöt_t
 
i
;

274 
ngx_ødix_node_t
 *
node
, *
√xt
;

276 
i
 = 0;

277 
bô
 = 0x80;

279 
node
 = 
åì
->
roŸ
;

280 
√xt
 = 
åì
->
roŸ
;

282 
bô
 & 
mask
[
i
]) {

283 i‡(
key
[
i
] & 
bô
) {

284 
√xt
 = 
node
->
right
;

287 
√xt
 = 
node
->
À·
;

290 i‡(
√xt
 =
NULL
) {

294 
bô
 >>= 1;

295 
node
 = 
√xt
;

297 i‡(
bô
 == 0) {

298 i‡(++
i
 == 16) {

302 
bô
 = 0x80;

306 i‡(
√xt
) {

307 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

308  
NGX_BUSY
;

311 
node
->
vÆue
 = value;

312  
NGX_OK
;

315 
bô
 & 
mask
[
i
]) {

316 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

317 i‡(
√xt
 =
NULL
) {

318  
NGX_ERROR
;

321 
√xt
->
right
 = 
NULL
;

322 
√xt
->
À·
 = 
NULL
;

323 
√xt
->
∑ª¡
 = 
node
;

324 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

326 i‡(
key
[
i
] & 
bô
) {

327 
node
->
right
 = 
√xt
;

330 
node
->
À·
 = 
√xt
;

333 
bô
 >>= 1;

334 
node
 = 
√xt
;

336 i‡(
bô
 == 0) {

337 i‡(++
i
 == 16) {

341 
bô
 = 0x80;

345 
node
->
vÆue
 = value;

347  
NGX_OK
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
)

354 
u_ch¨
 
bô
;

355 
ngx_uöt_t
 
i
;

356 
ngx_ødix_node_t
 *
node
;

358 
i
 = 0;

359 
bô
 = 0x80;

360 
node
 = 
åì
->
roŸ
;

362 
node
 && (
bô
 & 
mask
[
i
])) {

363 i‡(
key
[
i
] & 
bô
) {

364 
node
 =Çode->
right
;

367 
node
 =Çode->
À·
;

370 
bô
 >>= 1;

372 i‡(
bô
 == 0) {

373 i‡(++
i
 == 16) {

377 
bô
 = 0x80;

381 i‡(
node
 =
NULL
) {

382  
NGX_ERROR
;

385 i‡(
node
->
right
 ||Çode->
À·
) {

386 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

387 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

388  
NGX_OK
;

391  
NGX_ERROR
;

395 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

396 
node
->
∑ª¡
->
right
 = 
NULL
;

399 
node
->
∑ª¡
->
À·
 = 
NULL
;

402 
node
->
right
 = 
åì
->
‰ì
;

403 
åì
->
‰ì
 = 
node
;

405 
node
 =Çode->
∑ª¡
;

407 i‡(
node
->
right
 ||Çode->
À·
) {

411 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

415 i‡(
node
->
∑ª¡
 =
NULL
) {

420  
NGX_OK
;

421 
	}
}

424 
uöçå_t


425 
	$ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
)

427 
u_ch¨
 
bô
;

428 
uöçå_t
 
vÆue
;

429 
ngx_uöt_t
 
i
;

430 
ngx_ødix_node_t
 *
node
;

432 
i
 = 0;

433 
bô
 = 0x80;

434 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

435 
node
 = 
åì
->
roŸ
;

437 
node
) {

438 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

439 
vÆue
 = 
node
->value;

442 i‡(
key
[
i
] & 
bô
) {

443 
node
 =Çode->
right
;

446 
node
 =Çode->
À·
;

449 
bô
 >>= 1;

451 i‡(
bô
 == 0) {

452 
i
++;

453 
bô
 = 0x80;

457  
vÆue
;

458 
	}
}

463 
ngx_ødix_node_t
 *

464 
	$ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
)

466 
ngx_ødix_node_t
 *
p
;

468 i‡(
åì
->
‰ì
) {

469 
p
 = 
åì
->
‰ì
;

470 
åì
->
‰ì
 =Åªe->‰ì->
right
;

471  
p
;

474 i‡(
åì
->
size
 < (
ngx_ødix_node_t
)) {

475 
åì
->
°¨t
 = 
	`ngx_pmemÆign
—ªe->
poﬁ
, 
ngx_∑gesize
,Çgx_pagesize);

476 i‡(
åì
->
°¨t
 =
NULL
) {

477  
NULL
;

480 
åì
->
size
 = 
ngx_∑gesize
;

483 
p
 = (
ngx_ødix_node_t
 *Ë
åì
->
°¨t
;

484 
åì
->
°¨t
 +(
ngx_ødix_node_t
);

485 
åì
->
size
 -(
ngx_ødix_node_t
);

487  
p
;

488 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_radix_tree.h

8 #i‚de‡
_NGX_RADIX_TREE_H_INCLUDED_


9 
	#_NGX_RADIX_TREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_RADIX_NO_VALUE
 (
uöçå_t
Ë-1

	)

18 
ngx_ødix_node_s
 
	tngx_ødix_node_t
;

20 
	sngx_ødix_node_s
 {

21 
ngx_ødix_node_t
 *
	mright
;

22 
ngx_ødix_node_t
 *
	mÀ·
;

23 
ngx_ødix_node_t
 *
	m∑ª¡
;

24 
uöçå_t
 
	mvÆue
;

29 
ngx_ødix_node_t
 *
	mroŸ
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 
ngx_ødix_node_t
 *
	m‰ì
;

32 *
	m°¨t
;

33 
size_t
 
	msize
;

34 } 
	tngx_ødix_åì_t
;

37 
ngx_ødix_åì_t
 *
ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
,

38 
ngx_öt_t
 
¥óŒoˇã
);

40 
ngx_öt_t
 
ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

41 
uöt32_t
 
key
, uöt32_à
mask
, 
uöçå_t
 
vÆue
);

42 
ngx_öt_t
 
ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

43 
uöt32_t
 
key
, uöt32_à
mask
);

44 
uöçå_t
 
ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
);

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_öt_t
 
ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

48 
u_ch¨
 *
key
, u_ch¨ *
mask
, 
uöçå_t
 
vÆue
);

49 
ngx_öt_t
 
ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

50 
u_ch¨
 *
key
, u_ch¨ *
mask
);

51 
uöçå_t
 
ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_rbtree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

19 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

20 
ngx_ölöe
 
ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

21 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

25 
	$ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

26 
ngx_rbåì_node_t
 *
node
)

28 
ngx_rbåì_node_t
 **
roŸ
, *
ãmp
, *
£¡öñ
;

32 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

33 
£¡öñ
 = 
åì
->sentinel;

35 i‡(*
roŸ
 =
£¡öñ
) {

36 
node
->
∑ª¡
 = 
NULL
;

37 
node
->
À·
 = 
£¡öñ
;

38 
node
->
right
 = 
£¡öñ
;

39 
	`ngx_rbt_bœck
(
node
);

40 *
roŸ
 = 
node
;

45 
åì
->
	`ö£π
(*
roŸ
, 
node
, 
£¡öñ
);

49 
node
 !*
roŸ
 && 
	`ngx_rbt_is_ªd
“ode->
∑ª¡
)) {

51 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

52 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

54 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

55 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

56 
	`ngx_rbt_bœck
(
ãmp
);

57 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

58 
node
 =Çode->
∑ª¡
->parent;

61 i‡(
node
 =node->
∑ª¡
->
right
) {

62 
node
 =Çode->
∑ª¡
;

63 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

66 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

67 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

68 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

72 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

74 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

75 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

76 
	`ngx_rbt_bœck
(
ãmp
);

77 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

78 
node
 =Çode->
∑ª¡
->parent;

81 i‡(
node
 =node->
∑ª¡
->
À·
) {

82 
node
 =Çode->
∑ª¡
;

83 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

86 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

87 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

88 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

93 
	`ngx_rbt_bœck
(*
roŸ
);

94 
	}
}

98 
	$ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

99 
ngx_rbåì_node_t
 *
£¡öñ
)

101 
ngx_rbåì_node_t
 **
p
;

105 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

107 i‡(*
p
 =
£¡öñ
) {

111 
ãmp
 = *
p
;

114 *
p
 = 
node
;

115 
node
->
∑ª¡
 = 
ãmp
;

116 
node
->
À·
 = 
£¡öñ
;

117 
node
->
right
 = 
£¡öñ
;

118 
	`ngx_rbt_ªd
(
node
);

119 
	}
}

123 
	$ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

124 
ngx_rbåì_node_t
 *
£¡öñ
)

126 
ngx_rbåì_node_t
 **
p
;

139 
p
 = ((
ngx_rbåì_key_öt_t
Ë(
node
->
key
 - 
ãmp
->key) < 0)

140 ? &
ãmp
->
À·
 : &ãmp->
right
;

142 i‡(*
p
 =
£¡öñ
) {

146 
ãmp
 = *
p
;

149 *
p
 = 
node
;

150 
node
->
∑ª¡
 = 
ãmp
;

151 
node
->
À·
 = 
£¡öñ
;

152 
node
->
right
 = 
£¡öñ
;

153 
	`ngx_rbt_ªd
(
node
);

154 
	}
}

158 
	$ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

159 
ngx_rbåì_node_t
 *
node
)

161 
ngx_uöt_t
 
ªd
;

162 
ngx_rbåì_node_t
 **
roŸ
, *
£¡öñ
, *
sub°
, *
ãmp
, *
w
;

166 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

167 
£¡öñ
 = 
åì
->sentinel;

169 i‡(
node
->
À·
 =
£¡öñ
) {

170 
ãmp
 = 
node
->
right
;

171 
sub°
 = 
node
;

173 } i‡(
node
->
right
 =
£¡öñ
) {

174 
ãmp
 = 
node
->
À·
;

175 
sub°
 = 
node
;

178 
sub°
 = 
	`ngx_rbåì_mö
(
node
->
right
, 
£¡öñ
);

180 i‡(
sub°
->
À·
 !
£¡öñ
) {

181 
ãmp
 = 
sub°
->
À·
;

183 
ãmp
 = 
sub°
->
right
;

187 i‡(
sub°
 =*
roŸ
) {

188 *
roŸ
 = 
ãmp
;

189 
	`ngx_rbt_bœck
(
ãmp
);

192 
node
->
À·
 = 
NULL
;

193 
node
->
right
 = 
NULL
;

194 
node
->
∑ª¡
 = 
NULL
;

195 
node
->
key
 = 0;

200 
ªd
 = 
	`ngx_rbt_is_ªd
(
sub°
);

202 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

203 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

206 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

209 i‡(
sub°
 =
node
) {

211 
ãmp
->
∑ª¡
 = 
sub°
->parent;

215 i‡(
sub°
->
∑ª¡
 =
node
) {

216 
ãmp
->
∑ª¡
 = 
sub°
;

219 
ãmp
->
∑ª¡
 = 
sub°
->parent;

222 
sub°
->
À·
 = 
node
->left;

223 
sub°
->
right
 = 
node
->right;

224 
sub°
->
∑ª¡
 = 
node
->parent;

225 
	`ngx_rbt_c›y_cﬁ‹
(
sub°
, 
node
);

227 i‡(
node
 =*
roŸ
) {

228 *
roŸ
 = 
sub°
;

231 i‡(
node
 =node->
∑ª¡
->
À·
) {

232 
node
->
∑ª¡
->
À·
 = 
sub°
;

234 
node
->
∑ª¡
->
right
 = 
sub°
;

238 i‡(
sub°
->
À·
 !
£¡öñ
) {

239 
sub°
->
À·
->
∑ª¡
 = subst;

242 i‡(
sub°
->
right
 !
£¡öñ
) {

243 
sub°
->
right
->
∑ª¡
 = subst;

248 
node
->
À·
 = 
NULL
;

249 
node
->
right
 = 
NULL
;

250 
node
->
∑ª¡
 = 
NULL
;

251 
node
->
key
 = 0;

253 i‡(
ªd
) {

259 
ãmp
 !*
roŸ
 && 
	`ngx_rbt_is_bœck
(temp)) {

261 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

262 
w
 = 
ãmp
->
∑ª¡
->
right
;

264 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

265 
	`ngx_rbt_bœck
(
w
);

266 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

267 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

268 
w
 = 
ãmp
->
∑ª¡
->
right
;

271 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

272 
	`ngx_rbt_ªd
(
w
);

273 
ãmp
 =Åemp->
∑ª¡
;

276 i‡(
	`ngx_rbt_is_bœck
(
w
->
right
)) {

277 
	`ngx_rbt_bœck
(
w
->
À·
);

278 
	`ngx_rbt_ªd
(
w
);

279 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

280 
w
 = 
ãmp
->
∑ª¡
->
right
;

283 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

284 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

285 
	`ngx_rbt_bœck
(
w
->
right
);

286 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

287 
ãmp
 = *
roŸ
;

291 
w
 = 
ãmp
->
∑ª¡
->
À·
;

293 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

294 
	`ngx_rbt_bœck
(
w
);

295 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

296 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

297 
w
 = 
ãmp
->
∑ª¡
->
À·
;

300 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

301 
	`ngx_rbt_ªd
(
w
);

302 
ãmp
 =Åemp->
∑ª¡
;

305 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
)) {

306 
	`ngx_rbt_bœck
(
w
->
right
);

307 
	`ngx_rbt_ªd
(
w
);

308 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

309 
w
 = 
ãmp
->
∑ª¡
->
À·
;

312 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

313 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

314 
	`ngx_rbt_bœck
(
w
->
À·
);

315 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

316 
ãmp
 = *
roŸ
;

321 
	`ngx_rbt_bœck
(
ãmp
);

322 
	}
}

325 
ngx_ölöe
 

326 
	$ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

327 
ngx_rbåì_node_t
 *
node
)

329 
ngx_rbåì_node_t
 *
ãmp
;

331 
ãmp
 = 
node
->
right
;

332 
node
->
right
 = 
ãmp
->
À·
;

334 i‡(
ãmp
->
À·
 !
£¡öñ
) {

335 
ãmp
->
À·
->
∑ª¡
 = 
node
;

338 
ãmp
->
∑ª¡
 = 
node
->parent;

340 i‡(
node
 =*
roŸ
) {

341 *
roŸ
 = 
ãmp
;

343 } i‡(
node
 =node->
∑ª¡
->
À·
) {

344 
node
->
∑ª¡
->
À·
 = 
ãmp
;

347 
node
->
∑ª¡
->
right
 = 
ãmp
;

350 
ãmp
->
À·
 = 
node
;

351 
node
->
∑ª¡
 = 
ãmp
;

352 
	}
}

355 
ngx_ölöe
 

356 
	$ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

357 
ngx_rbåì_node_t
 *
node
)

359 
ngx_rbåì_node_t
 *
ãmp
;

361 
ãmp
 = 
node
->
À·
;

362 
node
->
À·
 = 
ãmp
->
right
;

364 i‡(
ãmp
->
right
 !
£¡öñ
) {

365 
ãmp
->
right
->
∑ª¡
 = 
node
;

368 
ãmp
->
∑ª¡
 = 
node
->parent;

370 i‡(
node
 =*
roŸ
) {

371 *
roŸ
 = 
ãmp
;

373 } i‡(
node
 =node->
∑ª¡
->
right
) {

374 
node
->
∑ª¡
->
right
 = 
ãmp
;

377 
node
->
∑ª¡
->
À·
 = 
ãmp
;

380 
ãmp
->
right
 = 
node
;

381 
node
->
∑ª¡
 = 
ãmp
;

382 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_rbtree.h

8 #i‚de‡
_NGX_RBTREE_H_INCLUDED_


9 
	#_NGX_RBTREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_uöt_t
 
	tngx_rbåì_key_t
;

17 
ngx_öt_t
 
	tngx_rbåì_key_öt_t
;

20 
ngx_rbåì_node_s
 
	tngx_rbåì_node_t
;

22 
	sngx_rbåì_node_s
 {

23 
ngx_rbåì_key_t
 
	mkey
;

24 
ngx_rbåì_node_t
 *
	mÀ·
;

25 
ngx_rbåì_node_t
 *
	mright
;

26 
ngx_rbåì_node_t
 *
	m∑ª¡
;

27 
u_ch¨
 
	mcﬁ‹
;

28 
u_ch¨
 
	md©a
;

32 
ngx_rbåì_s
 
	tngx_rbåì_t
;

34 (*
	tngx_rbåì_ö£π_±
Ë(
	tngx_rbåì_node_t
 *
	troŸ
,

35 
	tngx_rbåì_node_t
 *
	tnode
,Çgx_rbåì_node_à*
	t£¡öñ
);

37 
	sngx_rbåì_s
 {

38 
ngx_rbåì_node_t
 *
roŸ
;

39 
ngx_rbåì_node_t
 *
£¡öñ
;

40 
ngx_rbåì_ö£π_±
 
ö£π
;

44 
	#ngx_rbåì_öô
(
åì
, 
s
, 
i
) \

45 
	`ngx_rbåì_£¡öñ_öô
(
s
); \

46 (
åì
)->
roŸ
 = 
s
; \

47 (
åì
)->
£¡öñ
 = 
s
; \

48 (
åì
)->
ö£π
 = 
i


	)

51 
	`ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

52 
ngx_rbåì_node_t
 *
node
);

53 
	`ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

54 
ngx_rbåì_node_t
 *
node
);

55 
	`ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,Çgx_rbåì_node_à*
node
,

56 
ngx_rbåì_node_t
 *
£¡öñ
);

57 
	`ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,

58 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

61 
	#ngx_rbt_ªd
(
node
Ë(“ode)->
cﬁ‹
 = 1)

	)

62 
	#ngx_rbt_bœck
(
node
Ë(“ode)->
cﬁ‹
 = 0)

	)

63 
	#ngx_rbt_is_ªd
(
node
Ë(“ode)->
cﬁ‹
)

	)

64 
	#ngx_rbt_is_bœck
(
node
Ë(!
	`ngx_rbt_is_ªd
“ode))

	)

65 
	#ngx_rbt_c›y_cﬁ‹
(
n1
, 
n2
Ë“1->
cﬁ‹
 =Ç2->cﬁ‹)

	)

70 
	#ngx_rbåì_£¡öñ_öô
(
node
Ë
	`ngx_rbt_bœck
“ode)

	)

73 
ngx_ölöe
 
ngx_rbåì_node_t
 *

74 
	$ngx_rbåì_mö
(
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

76 
node
->
À·
 !
£¡öñ
) {

77 
node
 =Çode->
À·
;

80  
node
;

81 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_regex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
ngx_Êag_t
 
	mp¸e_jô
;

14 } 
	tngx_ªgex_c⁄f_t
;

17 * 
ngx_libc_cde˛
 
ngx_ªgex_mÆloc
(
size_t
 
size
);

18 
ngx_libc_cde˛
 
ngx_ªgex_‰ì
(*
p
);

19 #i‡(
NGX_HAVE_PCRE_JIT
)

20 
ngx_p¸e_‰ì_°udõs
(*
d©a
);

23 
ngx_öt_t
 
ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

25 *
ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

26 *
ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

28 *
ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

29 
ngx_c⁄f_po°_t
 
	gngx_ªgex_p¸e_jô_po°
 = { 
ngx_ªgex_p¸e_jô
 };

32 
ngx_comm™d_t
 
	gngx_ªgex_comm™ds
[] = {

34 { 
ngx_°rög
("pcre_jit"),

35 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

36 
ngx_c⁄f_£t_Êag_¶Ÿ
,

38 
off£tof
(
ngx_ªgex_c⁄f_t
, 
p¸e_jô
),

39 &
ngx_ªgex_p¸e_jô_po°
 },

41 
ngx_nuŒ_comm™d


45 
ngx_c‹e_moduÀ_t
 
	gngx_ªgex_moduÀ_˘x
 = {

46 
ngx_°rög
("regex"),

47 
ngx_ªgex_¸óã_c⁄f
,

48 
ngx_ªgex_öô_c⁄f


52 
ngx_moduÀ_t
 
	gngx_ªgex_moduÀ
 = {

53 
NGX_MODULE_V1
,

54 &
ngx_ªgex_moduÀ_˘x
,

55 
ngx_ªgex_comm™ds
,

56 
NGX_CORE_MODULE
,

57 
NULL
,

58 
ngx_ªgex_moduÀ_öô
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NGX_MODULE_V1_PADDING


68 
ngx_poﬁ_t
 *
	gngx_p¸e_poﬁ
;

69 
ngx_li°_t
 *
	gngx_p¸e_°udõs
;

73 
	$ngx_ªgex_öô
()

75 
p¸e_mÆloc
 = 
ngx_ªgex_mÆloc
;

76 
p¸e_‰ì
 = 
ngx_ªgex_‰ì
;

77 
	}
}

80 
ngx_ölöe
 

81 
	$ngx_ªgex_mÆloc_öô
(
ngx_poﬁ_t
 *
poﬁ
)

83 #i‡(
NGX_THREADS
)

84 
ngx_c‹e_és_t
 *
és
;

86 i‡(
ngx_thªaded
) {

87 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

88 
és
->
poﬁ
 =Öool;

94 
ngx_p¸e_poﬁ
 = 
poﬁ
;

95 
	}
}

98 
ngx_ölöe
 

99 
	$ngx_ªgex_mÆloc_d⁄e
()

101 #i‡(
NGX_THREADS
)

102 
ngx_c‹e_és_t
 *
és
;

104 i‡(
ngx_thªaded
) {

105 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

106 
és
->
poﬁ
 = 
NULL
;

112 
ngx_p¸e_poﬁ
 = 
NULL
;

113 
	}
}

116 
ngx_öt_t


117 
	$ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
)

119 
n
, 
îroff
;

120 *
p
;

121 
p¸e
 *
ª
;

122 c⁄° *
îr°r
;

123 
ngx_ªgex_ñt_t
 *
ñt
;

125 
	`ngx_ªgex_mÆloc_öô
(
rc
->
poﬁ
);

127 
ª
 = 
	`p¸e_compûe
((c⁄° *Ë
rc
->
∑âîn
.
d©a
, (Ërc->
›ti⁄s
,

128 &
îr°r
, &
îroff
, 
NULL
);

131 
	`ngx_ªgex_mÆloc_d⁄e
();

133 i‡(
ª
 =
NULL
) {

134 i‡((
size_t
Ë
îroff
 =
rc
->
∑âîn
.
Àn
) {

135 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

137 
îr°r
, &
rc
->
∑âîn
)

138 - 
rc
->
îr
.
d©a
;

141 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

143 
îr°r
, &
rc
->
∑âîn
,Ñc->∑âîn.
d©a
 + 
îroff
)

144 - 
rc
->
îr
.
d©a
;

147  
NGX_ERROR
;

150 
rc
->
ªgex
 = 
	`ngx_pˇŒoc
‘c->
poﬁ
, (
ngx_ªgex_t
));

151 i‡(
rc
->
ªgex
 =
NULL
) {

152  
NGX_ERROR
;

155 
rc
->
ªgex
->
code
 = 
ª
;

159 i‡(
ngx_p¸e_°udõs
 !
NULL
) {

160 
ñt
 = 
	`ngx_li°_push
(
ngx_p¸e_°udõs
);

161 i‡(
ñt
 =
NULL
) {

162  
NGX_ERROR
;

165 
ñt
->
ªgex
 = 
rc
->regex;

166 
ñt
->
«me
 = 
rc
->
∑âîn
.
d©a
;

169 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_CAPTURECOUNT
, &
rc
->
ˇ±uªs
);

170 i‡(
n
 < 0) {

171 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_CAPTURECOUNT) failed: %d";

172 
Áûed
;

175 i‡(
rc
->
ˇ±uªs
 == 0) {

176  
NGX_OK
;

179 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMECOUNT
, &
rc
->
«med_ˇ±uªs
);

180 i‡(
n
 < 0) {

181 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMECOUNT) failed: %d";

182 
Áûed
;

185 i‡(
rc
->
«med_ˇ±uªs
 == 0) {

186  
NGX_OK
;

189 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMEENTRYSIZE
, &
rc
->
«me_size
);

190 i‡(
n
 < 0) {

191 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMEENTRYSIZE) failed: %d";

192 
Áûed
;

195 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMETABLE
, &
rc
->
«mes
);

196 i‡(
n
 < 0) {

197 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMETABLE) failed: %d";

198 
Áûed
;

201  
NGX_OK
;

203 
Áûed
:

205 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->îr.Àn, 
p
, &rc->
∑âîn
, 
n
)

206 - 
rc
->
îr
.
d©a
;

207  
NGX_OK
;

208 
	}
}

211 
ngx_öt_t


212 
	$ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
)

214 
ngx_öt_t
 
n
;

215 
ngx_uöt_t
 
i
;

216 
ngx_ªgex_ñt_t
 *
ª
;

218 
ª
 = 
a
->
ñts
;

220 
i
 = 0; i < 
a
->
√…s
; i++) {

222 
n
 = 
	`ngx_ªgex_exec
(
ª
[
i
].
ªgex
, 
s
, 
NULL
, 0);

224 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

228 i‡(
n
 < 0) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

230 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%s\"",

231 
n
, 
s
, 
ª
[
i
].
«me
);

232  
NGX_ERROR
;

237  
NGX_OK
;

240  
NGX_DECLINED
;

241 
	}
}

244 * 
ngx_libc_cde˛


245 
	$ngx_ªgex_mÆloc
(
size_t
 
size
)

247 
ngx_poﬁ_t
 *
poﬁ
;

248 #i‡(
NGX_THREADS
)

249 
ngx_c‹e_és_t
 *
és
;

251 i‡(
ngx_thªaded
) {

252 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

253 
poﬁ
 = 
és
->pool;

256 
poﬁ
 = 
ngx_p¸e_poﬁ
;

261 
poﬁ
 = 
ngx_p¸e_poﬁ
;

265 i‡(
poﬁ
) {

266  
	`ngx_∑Œoc
(
poﬁ
, 
size
);

269  
NULL
;

270 
	}
}

273 
ngx_libc_cde˛


274 
	$ngx_ªgex_‰ì
(*
p
)

277 
	}
}

280 #i‡(
NGX_HAVE_PCRE_JIT
)

283 
	$ngx_p¸e_‰ì_°udõs
(*
d©a
)

285 
ngx_li°_t
 *
°udõs
 = 
d©a
;

287 
ngx_uöt_t
 
i
;

288 
ngx_li°_∑π_t
 *
∑π
;

289 
ngx_ªgex_ñt_t
 *
ñts
;

291 
∑π
 = &
°udõs
->part;

292 
ñts
 = 
∑π
->elts;

294 
i
 = 0 ; ; i++) {

296 i‡(
i
 >
∑π
->
√…s
) {

297 i‡(
∑π
->
√xt
 =
NULL
) {

301 
∑π
 =Ö¨t->
√xt
;

302 
ñts
 = 
∑π
->elts;

303 
i
 = 0;

306 i‡(
ñts
[
i
].
ªgex
->
exåa
 !
NULL
) {

307 
	`p¸e_‰ì_°udy
(
ñts
[
i
].
ªgex
->
exåa
);

310 
	}
}

315 
ngx_öt_t


316 
	$ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

318 
›t
;

319 c⁄° *
îr°r
;

320 
ngx_uöt_t
 
i
;

321 
ngx_li°_∑π_t
 *
∑π
;

322 
ngx_ªgex_ñt_t
 *
ñts
;

324 
›t
 = 0;

326 #i‡(
NGX_HAVE_PCRE_JIT
)

328 
ngx_ªgex_c⁄f_t
 *
rcf
;

329 
ngx_poﬁ_˛ónup_t
 *
˛n
;

331 
rcf
 = (
ngx_ªgex_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ªgex_moduÀ
);

333 i‡(
rcf
->
p¸e_jô
) {

334 
›t
 = 
PCRE_STUDY_JIT_COMPILE
;

342 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cy˛e
->
poﬁ
, 0);

343 i‡(
˛n
 =
NULL
) {

344  
NGX_ERROR
;

347 
˛n
->
h™dÀr
 = 
ngx_p¸e_‰ì_°udõs
;

348 
˛n
->
d©a
 = 
ngx_p¸e_°udõs
;

353 
	`ngx_ªgex_mÆloc_öô
(
cy˛e
->
poﬁ
);

355 
∑π
 = &
ngx_p¸e_°udõs
->part;

356 
ñts
 = 
∑π
->elts;

358 
i
 = 0 ; ; i++) {

360 i‡(
i
 >
∑π
->
√…s
) {

361 i‡(
∑π
->
√xt
 =
NULL
) {

365 
∑π
 =Ö¨t->
√xt
;

366 
ñts
 = 
∑π
->elts;

367 
i
 = 0;

370 
ñts
[
i
].
ªgex
->
exåa
 = 
	`p¸e_°udy
”…s[i].ªgex->
code
, 
›t
, &
îr°r
);

372 i‡(
îr°r
 !
NULL
) {

373 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

375 
îr°r
, 
ñts
[
i
].
«me
);

378 #i‡(
NGX_HAVE_PCRE_JIT
)

379 i‡(
›t
 & 
PCRE_STUDY_JIT_COMPILE
) {

380 
jô
, 
n
;

382 
jô
 = 0;

383 
n
 = 
	`p¸e_fuŒöfo
(
ñts
[
i
].
ªgex
->
code
,É…s[i].ªgex->
exåa
,

384 
PCRE_INFO_JIT
, &
jô
);

386 i‡(
n
 !0 || 
jô
 != 1) {

387 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
cy˛e
->
log
, 0,

389 
ñts
[
i
].
«me
);

395 
	`ngx_ªgex_mÆloc_d⁄e
();

397 
ngx_p¸e_°udõs
 = 
NULL
;

399  
NGX_OK
;

400 
	}
}

404 
	$ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

406 
ngx_ªgex_c⁄f_t
 *
rcf
;

408 
rcf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_ªgex_c⁄f_t
));

409 i‡(
rcf
 =
NULL
) {

410  
NULL
;

413 
rcf
->
p¸e_jô
 = 
NGX_CONF_UNSET
;

415 
ngx_p¸e_°udõs
 = 
	`ngx_li°_¸óã
(
cy˛e
->
poﬁ
, 8, (
ngx_ªgex_ñt_t
));

416 i‡(
ngx_p¸e_°udõs
 =
NULL
) {

417  
NULL
;

420  
rcf
;

421 
	}
}

425 
	$ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

427 
ngx_ªgex_c⁄f_t
 *
rcf
 = 
c⁄f
;

429 
	`ngx_c⁄f_öô_vÆue
(
rcf
->
p¸e_jô
, 0);

431  
NGX_CONF_OK
;

432 
	}
}

436 
	$ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

438 
ngx_Êag_t
 *
Â
 = 
d©a
;

440 i‡(*
Â
 == 0) {

441  
NGX_CONF_OK
;

444 #i‡(
NGX_HAVE_PCRE_JIT
)

446 
jô
, 
r
;

448 
jô
 = 0;

449 
r
 = 
	`p¸e_c⁄fig
(
PCRE_CONFIG_JIT
, &
jô
);

451 i‡(
r
 !0 || 
jô
 != 1) {

452 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

454 *
Â
 = 0;

458 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

460 *
Â
 = 0;

463  
NGX_CONF_OK
;

464 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_regex.h

8 #i‚de‡
_NGX_REGEX_H_INCLUDED_


9 
	#_NGX_REGEX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<p¸e.h
>

18 
	#NGX_REGEX_NO_MATCHED
 
PCRE_ERROR_NOMATCH


	)

20 
	#NGX_REGEX_CASELESS
 
PCRE_CASELESS


	)

24 
p¸e
 *
	mcode
;

25 
p¸e_exåa
 *
	mexåa
;

26 } 
	tngx_ªgex_t
;

30 
ngx_°r_t
 
	m∑âîn
;

31 
ngx_poﬁ_t
 *
	mpoﬁ
;

32 
ngx_öt_t
 
	m›ti⁄s
;

34 
ngx_ªgex_t
 *
	mªgex
;

35 
	mˇ±uªs
;

36 
	m«med_ˇ±uªs
;

37 
	m«me_size
;

38 
u_ch¨
 *
	m«mes
;

39 
ngx_°r_t
 
	mîr
;

40 } 
	tngx_ªgex_compûe_t
;

44 
ngx_ªgex_t
 *
	mªgex
;

45 
u_ch¨
 *
	m«me
;

46 } 
	tngx_ªgex_ñt_t
;

49 
ngx_ªgex_öô
();

50 
ngx_öt_t
 
ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
);

52 
	#ngx_ªgex_exec
(
ª
, 
s
, 
ˇ±uªs
, 
size
) \

53 
	`p¸e_exec
(
ª
->
code
,Ñe->
exåa
, (c⁄° *Ë(
s
)->
d©a
, (s)->
Àn
, 0, 0, \

54 
ˇ±uªs
, 
size
)

	)

55 
	#ngx_ªgex_exec_n
 "p¸e_exec()"

	)

57 
ngx_öt_t
 
ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_resolver.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_RESOLVER_UDP_SIZE
 4096

	)

17 
u_ch¨
 
	midít_hi
;

18 
u_ch¨
 
	midít_lo
;

19 
u_ch¨
 
	mÊags_hi
;

20 
u_ch¨
 
	mÊags_lo
;

21 
u_ch¨
 
	mnqs_hi
;

22 
u_ch¨
 
	mnqs_lo
;

23 
u_ch¨
 
	m«n_hi
;

24 
u_ch¨
 
	m«n_lo
;

25 
u_ch¨
 
	m¬s_hi
;

26 
u_ch¨
 
	m¬s_lo
;

27 
u_ch¨
 
	m«r_hi
;

28 
u_ch¨
 
	m«r_lo
;

29 } 
	tngx_ªsﬁvî_hdr_t
;

33 
u_ch¨
 
	mty≥_hi
;

34 
u_ch¨
 
	mty≥_lo
;

35 
u_ch¨
 
	m˛ass_hi
;

36 
u_ch¨
 
	m˛ass_lo
;

37 } 
	tngx_ªsﬁvî_qs_t
;

41 
u_ch¨
 
	mty≥_hi
;

42 
u_ch¨
 
	mty≥_lo
;

43 
u_ch¨
 
	m˛ass_hi
;

44 
u_ch¨
 
	m˛ass_lo
;

45 
u_ch¨
 
	mâl
[4];

46 
u_ch¨
 
	mÀn_hi
;

47 
u_ch¨
 
	mÀn_lo
;

48 } 
	tngx_ªsﬁvî_™_t
;

51 
ngx_öt_t
 
ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
);

54 
ngx_ªsﬁvî_˛ónup
(*
d©a
);

55 
ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
);

56 
ngx_öt_t
 
ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
,

57 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

58 
ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

59 
ngx_queue_t
 *
queue
);

60 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
,

61 
ngx_ªsﬁvî_node_t
 *
∫
);

62 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

63 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

64 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

65 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

66 
ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
);

67 
time_t
 
ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

68 
ngx_queue_t
 *
queue
);

69 
ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
);

70 
ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
,

71 
size_t
 
n
);

72 
ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

73 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
qty≥
,

74 
ngx_uöt_t
 
«n
,Çgx_uöt_à
™s
);

75 
ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

76 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
);

77 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
,

78 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
);

79 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
,

80 
ö_addr_t
 
addr
);

81 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

82 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

83 
ngx_öt_t
 
ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
,

84 
u_ch¨
 *
buf
, u_ch¨ *
§c
, u_ch¨ *
œ°
);

85 
ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
);

86 
ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
);

87 *
ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

88 *
ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

89 
ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

90 
ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

91 *
ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
);

92 
ngx_addr_t
 *
ngx_ªsﬁvî_exp‹t
(
ngx_ªsﬁvî_t
 *
r
,

93 
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_uöt_t
 
rŸ©e
);

94 
u_ch¨
 *
ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

96 #i‡(
NGX_HAVE_INET6
)

97 
ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

98 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

99 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr6
(
ngx_ªsﬁvî_t
 *
r
,

100 
ö6_addr
 *
addr
, 
uöt32_t
 
hash
);

104 
ngx_ªsﬁvî_t
 *

105 
	$ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
, 
ngx_uöt_t
 
n
)

107 
ngx_°r_t
 
s
;

108 
ngx_uæ_t
 
u
;

109 
ngx_uöt_t
 
i
, 
j
;

110 
ngx_ªsﬁvî_t
 *
r
;

111 
ngx_poﬁ_˛ónup_t
 *
˛n
;

112 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

114 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

115 i‡(
˛n
 =
NULL
) {

116  
NULL
;

119 
˛n
->
h™dÀr
 = 
ngx_ªsﬁvî_˛ónup
;

121 
r
 = 
	`ngx_ˇŒoc
((
ngx_ªsﬁvî_t
), 
cf
->
log
);

122 i‡(
r
 =
NULL
) {

123  
NULL
;

126 
˛n
->
d©a
 = 
r
;

128 
r
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
cf
->
log
);

129 i‡(
r
->
evít
 =
NULL
) {

130  
NULL
;

133 
	`ngx_rbåì_öô
(&
r
->
«me_rbåì
, &r->
«me_£¡öñ
,

134 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
);

136 
	`ngx_rbåì_öô
(&
r
->
addr_rbåì
, &r->
addr_£¡öñ
,

137 
ngx_rbåì_ö£π_vÆue
);

139 
	`ngx_queue_öô
(&
r
->
«me_ª£nd_queue
);

140 
	`ngx_queue_öô
(&
r
->
addr_ª£nd_queue
);

142 
	`ngx_queue_öô
(&
r
->
«me_expúe_queue
);

143 
	`ngx_queue_öô
(&
r
->
addr_expúe_queue
);

145 #i‡(
NGX_HAVE_INET6
)

146 
r
->
ùv6
 = 1;

148 
	`ngx_rbåì_öô
(&
r
->
addr6_rbåì
, &r->
addr6_£¡öñ
,

149 
ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
);

151 
	`ngx_queue_öô
(&
r
->
addr6_ª£nd_queue
);

153 
	`ngx_queue_öô
(&
r
->
addr6_expúe_queue
);

156 
r
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_ª£nd_h™dÀr
;

157 
r
->
evít
->
d©a
 =Ñ;

158 
r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

159 
r
->
idít
 = -1;

161 
r
->
ª£nd_timeout
 = 5;

162 
r
->
expúe
 = 30;

163 
r
->
vÆid
 = 0;

165 
r
->
log
 = &
cf
->
cy˛e
->
√w_log
;

166 
r
->
log_Àvñ
 = 
NGX_LOG_ERR
;

168 i‡(
n
) {

169 i‡(
	`ngx_¨øy_öô
(&
r
->
udp_c⁄√˘i⁄s
, 
cf
->
poﬁ
, 
n
,

170 (
ngx_udp_c⁄√˘i⁄_t
))

171 !
NGX_OK
)

173  
NULL
;

177 
i
 = 0; i < 
n
; i++) {

178 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "valid=", 6) == 0) {

179 
s
.
Àn
 = 
«mes
[
i
].len - 6;

180 
s
.
d©a
 = 
«mes
[
i
].data + 6;

182 
r
->
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

184 i‡(
r
->
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

185 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

186 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

187  
NULL
;

193 #i‡(
NGX_HAVE_INET6
)

194 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "ipv6=", 5) == 0) {

196 i‡(
	`ngx_°rcmp
(&
«mes
[
i
].
d©a
[5], "on") == 0) {

197 
r
->
ùv6
 = 1;

199 } i‡(
	`ngx_°rcmp
(&
«mes
[
i
].
d©a
[5], "off") == 0) {

200 
r
->
ùv6
 = 0;

203 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

204 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

205  
NULL
;

212 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

214 
u
.
uæ
 = 
«mes
[
i
];

215 
u
.
deÁu…_p‹t
 = 53;

217 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

218 i‡(
u
.
îr
) {

219 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 
u
.
îr
, &u.
uæ
);

224  
NULL
;

227 
uc
 = 
	`ngx_¨øy_push_n
(&
r
->
udp_c⁄√˘i⁄s
, 
u
.
«ddrs
);

228 i‡(
uc
 =
NULL
) {

229  
NULL
;

232 
	`ngx_memzîo
(
uc
, 
u
.
«ddrs
 * (
ngx_udp_c⁄√˘i⁄_t
));

234 
j
 = 0; j < 
u
.
«ddrs
; j++) {

235 
uc
[
j
].
sockaddr
 = 
u
.
addrs
[j].sockaddr;

236 
uc
[
j
].
sockÀn
 = 
u
.
addrs
[j].socklen;

237 
uc
[
j
].
£rvî
 = 
u
.
addrs
[j].
«me
;

241  
r
;

242 
	}
}

246 
	$ngx_ªsﬁvî_˛ónup
(*
d©a
)

248 
ngx_ªsﬁvî_t
 *
r
 = 
d©a
;

250 
ngx_uöt_t
 
i
;

251 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

253 i‡(
r
) {

254 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

257 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
«me_rbåì
);

259 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr_rbåì
);

261 #i‡(
NGX_HAVE_INET6
)

262 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr6_rbåì
);

265 i‡(
r
->
evít
) {

266 
	`ngx_‰ì
(
r
->
evít
);

270 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

272 
i
 = 0; i < 
r
->
udp_c⁄√˘i⁄s
.
√…s
; i++) {

273 i‡(
uc
[
i
].
c⁄√˘i⁄
) {

274 
	`ngx_˛o£_c⁄√˘i⁄
(
uc
[
i
].
c⁄√˘i⁄
);

278 
	`ngx_‰ì
(
r
);

280 
	}
}

284 
	$ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
)

286 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

287 
ngx_ªsﬁvî_node_t
 *
∫
;

289 
åì
->
roŸ
 !åì->
£¡öñ
) {

291 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
	`ngx_rbåì_mö
(
åì
->
roŸ
,Åªe->
£¡öñ
);

293 
	`ngx_queue_ªmove
(&
∫
->
queue
);

295 
˘x
 = 
∫
->
waôög
; ctx; ctx = 
√xt
) {

296 
√xt
 = 
˘x
->next;

298 i‡(
˘x
->
evít
) {

299 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

302 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

305 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

307 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

309 
	}
}

312 
ngx_ªsﬁvî_˘x_t
 *

313 
	$ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
ãmp
)

315 
ö_addr_t
 
addr
;

316 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

318 i‡(
ãmp
) {

319 
addr
 = 
	`ngx_öë_addr
(
ãmp
->
«me
.
d©a
,Åemp->«me.
Àn
);

321 i‡(
addr
 !
INADDR_NONE
) {

322 
ãmp
->
ªsﬁvî
 = 
r
;

323 
ãmp
->
°©e
 = 
NGX_OK
;

324 
ãmp
->
«ddrs
 = 1;

325 
ãmp
->
addrs
 = &ãmp->
addr
;

326 
ãmp
->
addr
.
sockaddr
 = (sockadd∏*Ë&ãmp->
sö
;

327 
ãmp
->
addr
.
sockÀn
 = (
sockaddr_ö
);

328 
	`ngx_memzîo
(&
ãmp
->
sö
, (
sockaddr_ö
));

329 
ãmp
->
sö
.
sö_Ámûy
 = 
AF_INET
;

330 
ãmp
->
sö
.
sö_addr
.
s_addr
 = 
addr
;

331 
ãmp
->
quick
 = 1;

333  
ãmp
;

337 i‡(
r
->
udp_c⁄√˘i⁄s
.
√…s
 == 0) {

338  
NGX_NO_RESOLVER
;

341 
˘x
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_ªsﬁvî_˘x_t
));

343 i‡(
˘x
) {

344 
˘x
->
ªsﬁvî
 = 
r
;

347  
˘x
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

354 
ngx_öt_t
 
rc
;

355 
ngx_ªsﬁvî_t
 *
r
;

357 
r
 = 
˘x
->
ªsﬁvî
;

359 i‡(
˘x
->
«me
.
Àn
 > 0 && ctx->«me.
d©a
[ctx->name.len - 1] == '.') {

360 
˘x
->
«me
.
Àn
--;

363 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

364 "ªsﬁve: \"%V\"", &
˘x
->
«me
);

366 i‡(
˘x
->
quick
) {

367 
˘x
->
	`h™dÀr
(ctx);

368  
NGX_OK
;

373 
rc
 = 
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

375 i‡(
rc
 =
NGX_OK
) {

376  
NGX_OK
;

381 i‡(
rc
 =
NGX_AGAIN
) {

382  
NGX_OK
;

387 i‡(
˘x
->
evít
) {

388 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

391 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

393  
NGX_ERROR
;

394 
	}
}

398 
	$ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

400 
uöt32_t
 
hash
;

401 
ngx_ªsﬁvî_t
 *
r
;

402 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

403 
ngx_ªsﬁvî_node_t
 *
∫
;

405 
r
 = 
˘x
->
ªsﬁvî
;

407 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

408 "ªsﬁvê«mêd⁄e: %i", 
˘x
->
°©e
);

410 i‡(
˘x
->
quick
) {

414 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

415 
	`ngx_dñ_timî
(
˘x
->
evít
);

420 i‡(
˘x
->
°©e
 =
NGX_AGAIN
) {

422 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

424 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

426 i‡(
∫
) {

427 
p
 = &
∫
->
waôög
;

428 
w
 = 
∫
->
waôög
;

430 
w
) {

431 i‡(
w
 =
˘x
) {

432 *
p
 = 
w
->
√xt
;

434 
d⁄e
;

437 
p
 = &
w
->
√xt
;

438 
w
 = w->
√xt
;

442 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

443 "couldÇŸ c™˚»%VÑesﬁvög", &
˘x
->
«me
);

446 
d⁄e
:

448 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
«me_rbåì
, &r->
«me_expúe_queue
);

454 i‡(
˘x
->
evít
) {

455 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

458 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

467 
uöt32_t
 
hash
;

468 
ngx_öt_t
 
rc
;

469 
ngx_uöt_t
 
«ddrs
;

470 
ngx_addr_t
 *
addrs
;

471 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

472 
ngx_ªsﬁvî_node_t
 *
∫
;

474 
	`ngx_°æow
(
˘x
->
«me
.
d©a
, ctx->«me.d©a, ctx->«me.
Àn
);

476 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

478 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

480 i‡(
∫
) {

482 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

484 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

486 
	`ngx_queue_ªmove
(&
∫
->
queue
);

488 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

490 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

492 
«ddrs
 = (
∫
->«ddr†=(
u_sh‹t
) -1) ? 0 :Ñn->naddrs;

493 #i‡(
NGX_HAVE_INET6
)

494 
«ddrs
 +(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) ? 0 :Ñn->naddrs6;

497 i‡(
«ddrs
) {

499 i‡(
«ddrs
 =1 && 
∫
->naddrs == 1) {

500 
addrs
 = 
NULL
;

503 
addrs
 = 
	`ngx_ªsﬁvî_exp‹t
(
r
, 
∫
, 1);

504 i‡(
addrs
 =
NULL
) {

505  
NGX_ERROR
;

509 
˘x
->
√xt
 = 
∫
->
waôög
;

510 
∫
->
waôög
 = 
NULL
;

515 
˘x
->
°©e
 = 
NGX_OK
;

516 
˘x
->
«ddrs
 =Çaddrs;

518 i‡(
addrs
 =
NULL
) {

519 
˘x
->
addrs
 = &˘x->
addr
;

520 
˘x
->
addr
.
sockaddr
 = (sockadd∏*Ë&˘x->
sö
;

521 
˘x
->
addr
.
sockÀn
 = (
sockaddr_ö
);

522 
	`ngx_memzîo
(&
˘x
->
sö
, (
sockaddr_ö
));

523 
˘x
->
sö
.
sö_Ámûy
 = 
AF_INET
;

524 
˘x
->
sö
.
sö_addr
.
s_addr
 = 
∫
->
u
.
addr
;

527 
˘x
->
addrs
 =áddrs;

530 
√xt
 = 
˘x
->next;

532 
˘x
->
	`h™dÀr
(ctx);

534 
˘x
 = 
√xt
;

535 } 
˘x
);

537 i‡(
addrs
 !
NULL
) {

538 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
->
sockaddr
);

539 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

542  
NGX_OK
;

547 i‡(
˘x
->
ªcursi⁄
++ < 
NGX_RESOLVER_MAX_RECURSION
) {

549 
˘x
->
«me
.
Àn
 = 
∫
->
˙Àn
;

550 
˘x
->
«me
.
d©a
 = 
∫
->
u
.
˙ame
;

552  
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

555 
˘x
->
√xt
 = 
∫
->
waôög
;

556 
∫
->
waôög
 = 
NULL
;

561 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

562 
√xt
 = 
˘x
->next;

564 
˘x
->
	`h™dÀr
(ctx);

566 
˘x
 = 
√xt
;

567 } 
˘x
);

569  
NGX_OK
;

572 i‡(
∫
->
waôög
) {

574 
˘x
->
√xt
 = 
∫
->
waôög
;

575 
∫
->
waôög
 = 
˘x
;

576 
˘x
->
°©e
 = 
NGX_AGAIN
;

578  
NGX_AGAIN
;

581 
	`ngx_queue_ªmove
(&
∫
->
queue
);

585 i‡(
∫
->
quîy
) {

586 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

587 
∫
->
quîy
 = 
NULL
;

588 #i‡(
NGX_HAVE_INET6
)

589 
∫
->
quîy6
 = 
NULL
;

593 i‡(
∫
->
˙Àn
) {

594 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

597 i‡(
∫
->
«ddrs
 > 1 &&Ñn->«ddr†!(
u_sh‹t
) -1) {

598 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

601 #i‡(
NGX_HAVE_INET6
)

602 i‡(
∫
->
«ddrs6
 > 1 &&Ñn->«ddrs6 !(
u_sh‹t
) -1) {

603 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u6
.
addrs6
);

611 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

612 i‡(
∫
 =
NULL
) {

613  
NGX_ERROR
;

616 
∫
->
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
˘x
->«me.
d©a
, ctx->«me.
Àn
);

617 i‡(
∫
->
«me
 =
NULL
) {

618 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

619  
NGX_ERROR
;

622 
∫
->
node
.
key
 = 
hash
;

623 
∫
->
∆í
 = (
u_sh‹t
Ë
˘x
->
«me
.
Àn
;

624 
∫
->
quîy
 = 
NULL
;

625 #i‡(
NGX_HAVE_INET6
)

626 
∫
->
quîy6
 = 
NULL
;

629 
	`ngx_rbåì_ö£π
(&
r
->
«me_rbåì
, &
∫
->
node
);

632 
rc
 = 
	`ngx_ªsﬁvî_¸óã_«me_quîy
(
∫
, 
˘x
);

634 i‡(
rc
 =
NGX_ERROR
) {

635 
Áûed
;

638 i‡(
rc
 =
NGX_DECLINED
) {

639 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

641 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

642 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

643 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

645 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

646 
˘x
->
	`h™dÀr
(ctx);

648  
NGX_OK
;

651 
∫
->
«ddrs
 = (
u_sh‹t
) -1;

652 #i‡(
NGX_HAVE_INET6
)

653 
∫
->
«ddrs6
 = 
r
->
ùv6
 ? (
u_sh‹t
) -1 : 0;

656 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

657 
Áûed
;

660 i‡(
˘x
->
evít
 =
NULL
) {

661 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

662 i‡(
˘x
->
evít
 =
NULL
) {

663 
Áûed
;

666 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

667 
˘x
->
evít
->
d©a
 = 
∫
;

668 
˘x
->
evít
->
log
 = 
r
->log;

669 
˘x
->
idít
 = -1;

671 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

674 i‡(
	`ngx_queue_em±y
(&
r
->
«me_ª£nd_queue
)) {

675 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

678 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

680 
	`ngx_queue_ö£π_hód
(&
r
->
«me_ª£nd_queue
, &
∫
->
queue
);

682 
∫
->
code
 = 0;

683 
∫
->
˙Àn
 = 0;

684 
∫
->
vÆid
 = 0;

685 
∫
->
âl
 = 
NGX_MAX_UINT32_VALUE
;

686 
∫
->
waôög
 = 
˘x
;

688 
˘x
->
°©e
 = 
NGX_AGAIN
;

690  
NGX_AGAIN
;

692 
Áûed
:

694 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

696 i‡(
∫
->
quîy
) {

697 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

700 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

702 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

704  
NGX_ERROR
;

705 
	}
}

708 
ngx_öt_t


709 
	$ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

711 
u_ch¨
 *
«me
;

712 
ö_addr_t
 
addr
;

713 
ngx_queue_t
 *
ª£nd_queue
, *
expúe_queue
;

714 
ngx_rbåì_t
 *
åì
;

715 
ngx_ªsﬁvî_t
 *
r
;

716 
sockaddr_ö
 *
sö
;

717 
ngx_ªsﬁvî_node_t
 *
∫
;

718 #i‡(
NGX_HAVE_INET6
)

719 
uöt32_t
 
hash
;

720 
sockaddr_ö6
 *
sö6
;

723 #i‡(
NGX_SUPPRESS_WARN
)

724 
addr
 = 0;

725 #i‡(
NGX_HAVE_INET6
)

726 
hash
 = 0;

727 
sö6
 = 
NULL
;

731 
r
 = 
˘x
->
ªsﬁvî
;

733 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

735 #i‡(
NGX_HAVE_INET6
)

736 
AF_INET6
:

737 
sö6
 = (
sockaddr_ö6
 *Ë
˘x
->
addr
.
sockaddr
;

738 
hash
 = 
	`ngx_¸c32_sh‹t
(
sö6
->
sö6_addr
.
s6_addr
, 16);

742 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
sö6
->
sö6_addr
, 
hash
);

744 
åì
 = &
r
->
addr6_rbåì
;

745 
ª£nd_queue
 = &
r
->
addr6_ª£nd_queue
;

746 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

752 
sö
 = (
sockaddr_ö
 *Ë
˘x
->
addr
.
sockaddr
;

753 
addr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

757 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

759 
åì
 = &
r
->
addr_rbåì
;

760 
ª£nd_queue
 = &
r
->
addr_ª£nd_queue
;

761 
expúe_queue
 = &
r
->
addr_expúe_queue
;

764 i‡(
∫
) {

766 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

768 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

770 
	`ngx_queue_ªmove
(&
∫
->
queue
);

772 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

774 
	`ngx_queue_ö£π_hód
(
expúe_queue
, &
∫
->
queue
);

776 
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Ñn->
∆í
);

777 i‡(
«me
 =
NULL
) {

778 
Áûed
;

781 
˘x
->
«me
.
Àn
 = 
∫
->
∆í
;

782 
˘x
->
«me
.
d©a
 =Çame;

786 
˘x
->
°©e
 = 
NGX_OK
;

788 
˘x
->
	`h™dÀr
(ctx);

790 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
);

792  
NGX_OK
;

795 i‡(
∫
->
waôög
) {

797 
˘x
->
√xt
 = 
∫
->
waôög
;

798 
∫
->
waôög
 = 
˘x
;

799 
˘x
->
°©e
 = 
NGX_AGAIN
;

803  
NGX_OK
;

806 
	`ngx_queue_ªmove
(&
∫
->
queue
);

808 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

809 
∫
->
quîy
 = 
NULL
;

810 #i‡(
NGX_HAVE_INET6
)

811 
∫
->
quîy6
 = 
NULL
;

815 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

816 i‡(
∫
 =
NULL
) {

817 
Áûed
;

820 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

822 #i‡(
NGX_HAVE_INET6
)

823 
AF_INET6
:

824 
∫
->
addr6
 = 
sö6
->
sö6_addr
;

825 
∫
->
node
.
key
 = 
hash
;

830 
∫
->
node
.
key
 = 
addr
;

833 
∫
->
quîy
 = 
NULL
;

834 #i‡(
NGX_HAVE_INET6
)

835 
∫
->
quîy6
 = 
NULL
;

838 
	`ngx_rbåì_ö£π
(
åì
, &
∫
->
node
);

841 i‡(
	`ngx_ªsﬁvî_¸óã_addr_quîy
(
∫
, 
˘x
Ë!
NGX_OK
) {

842 
Áûed
;

845 
∫
->
«ddrs
 = (
u_sh‹t
) -1;

846 #i‡(
NGX_HAVE_INET6
)

847 
∫
->
«ddrs6
 = (
u_sh‹t
) -1;

850 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

851 
Áûed
;

854 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

855 i‡(
˘x
->
evít
 =
NULL
) {

856 
Áûed
;

859 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

860 
˘x
->
evít
->
d©a
 = 
∫
;

861 
˘x
->
evít
->
log
 = 
r
->log;

862 
˘x
->
idít
 = -1;

864 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

866 i‡(
	`ngx_queue_em±y
(
ª£nd_queue
)) {

867 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

870 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

872 
	`ngx_queue_ö£π_hód
(
ª£nd_queue
, &
∫
->
queue
);

874 
∫
->
code
 = 0;

875 
∫
->
˙Àn
 = 0;

876 
∫
->
«me
 = 
NULL
;

877 
∫
->
∆í
 = 0;

878 
∫
->
vÆid
 = 0;

879 
∫
->
âl
 = 
NGX_MAX_UINT32_VALUE
;

880 
∫
->
waôög
 = 
˘x
;

884 
˘x
->
°©e
 = 
NGX_AGAIN
;

886  
NGX_OK
;

888 
Áûed
:

890 i‡(
∫
) {

891 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

893 i‡(
∫
->
quîy
) {

894 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

897 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

902 i‡(
˘x
->
evít
) {

903 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

906 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

908  
NGX_ERROR
;

909 
	}
}

913 
	$ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

915 
ö_addr_t
 
addr
;

916 
ngx_queue_t
 *
expúe_queue
;

917 
ngx_rbåì_t
 *
åì
;

918 
ngx_ªsﬁvî_t
 *
r
;

919 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

920 
sockaddr_ö
 *
sö
;

921 
ngx_ªsﬁvî_node_t
 *
∫
;

922 #i‡(
NGX_HAVE_INET6
)

923 
uöt32_t
 
hash
;

924 
sockaddr_ö6
 *
sö6
;

927 
r
 = 
˘x
->
ªsﬁvî
;

929 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

931 #i‡(
NGX_HAVE_INET6
)

932 
AF_INET6
:

933 
åì
 = &
r
->
addr6_rbåì
;

934 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

939 
åì
 = &
r
->
addr_rbåì
;

940 
expúe_queue
 = &
r
->
addr_expúe_queue
;

943 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

944 "ªsﬁvêadd∏d⁄e: %i", 
˘x
->
°©e
);

946 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

947 
	`ngx_dñ_timî
(
˘x
->
evít
);

952 i‡(
˘x
->
°©e
 =
NGX_AGAIN
) {

954 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

956 #i‡(
NGX_HAVE_INET6
)

957 
AF_INET6
:

958 
sö6
 = (
sockaddr_ö6
 *Ë
˘x
->
addr
.
sockaddr
;

959 
hash
 = 
	`ngx_¸c32_sh‹t
(
sö6
->
sö6_addr
.
s6_addr
, 16);

960 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
sö6
->
sö6_addr
, 
hash
);

965 
sö
 = (
sockaddr_ö
 *Ë
˘x
->
addr
.
sockaddr
;

966 
addr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

967 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

970 i‡(
∫
) {

971 
p
 = &
∫
->
waôög
;

972 
w
 = 
∫
->
waôög
;

974 
w
) {

975 i‡(
w
 =
˘x
) {

976 *
p
 = 
w
->
√xt
;

978 
d⁄e
;

981 
p
 = &
w
->
√xt
;

982 
w
 = w->
√xt
;

987 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

988 
ngx_°r_t
 
addπext
;

990 
addπext
.
d©a
 = 
ãxt
;

991 
addπext
.
Àn
 = 
	`ngx_sock_¡›
(
˘x
->
addr
.
sockaddr
, ctx->addr.
sockÀn
,

992 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

994 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

995 "couldÇŸ c™˚»%VÑesﬁvög", &
addπext
);

999 
d⁄e
:

1001 
	`ngx_ªsﬁvî_expúe
(
r
, 
åì
, 
expúe_queue
);

1007 i‡(
˘x
->
evít
) {

1008 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

1011 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

1014 
	}
}

1018 
	$ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

1020 
time_t
 
now
;

1021 
ngx_uöt_t
 
i
;

1022 
ngx_queue_t
 *
q
;

1023 
ngx_ªsﬁvî_node_t
 *
∫
;

1025 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolverÉxpire");

1027 
now
 = 
	`ngx_time
();

1029 
i
 = 0; i < 2; i++) {

1030 i‡(
	`ngx_queue_em±y
(
queue
)) {

1034 
q
 = 
	`ngx_queue_œ°
(
queue
);

1036 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1038 i‡(
now
 <
∫
->
expúe
) {

1042 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1043 "ªsﬁvîÉxpúê\"%*s\"", (
size_t
Ë
∫
->
∆í
,Ñn->
«me
);

1045 
	`ngx_queue_ªmove
(
q
);

1047 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

1049 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1051 
	}
}

1054 
ngx_öt_t


1055 
	$ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

1057 
ssize_t
 
n
;

1058 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

1060 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

1062 
uc
 = &uc[
r
->
œ°_c⁄√˘i⁄
++];

1063 i‡(
r
->
œ°_c⁄√˘i⁄
 =r->
udp_c⁄√˘i⁄s
.
√…s
) {

1064 
r
->
œ°_c⁄√˘i⁄
 = 0;

1067 i‡(
uc
->
c⁄√˘i⁄
 =
NULL
) {

1069 
uc
->
log
 = *
r
->log;

1070 
uc
->
log
.
h™dÀr
 = 
ngx_ªsﬁvî_log_îr‹
;

1071 
uc
->
log
.
d©a
 = uc;

1072 
uc
->
log
.
a˘i⁄
 = "resolving";

1074 i‡(
	`ngx_udp_c⁄√˘
(
uc
Ë!
NGX_OK
) {

1075  
NGX_ERROR
;

1078 
uc
->
c⁄√˘i⁄
->
d©a
 = 
r
;

1079 
uc
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_ªsﬁvî_ªad_ª•⁄£
;

1080 
uc
->
c⁄√˘i⁄
->
ªad
->
ªsﬁvî
 = 1;

1083 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1084 
n
 = 
	`ngx_£nd
(
uc
->
c⁄√˘i⁄
, 
∫
->
quîy
,Ñn->
qÀn
);

1086 i‡(
n
 == -1) {

1087  
NGX_ERROR
;

1090 i‡((
size_t
Ë
n
 !(size_tË
∫
->
qÀn
) {

1091 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 0, "send() incomplete");

1092  
NGX_ERROR
;

1096 #i‡(
NGX_HAVE_INET6
)

1097 i‡(
∫
->
quîy6
 &&Ñn->
«ddrs6
 =(
u_sh‹t
) -1) {

1098 
n
 = 
	`ngx_£nd
(
uc
->
c⁄√˘i⁄
, 
∫
->
quîy6
,Ñn->
qÀn
);

1100 i‡(
n
 == -1) {

1101  
NGX_ERROR
;

1104 i‡((
size_t
Ë
n
 !(size_tË
∫
->
qÀn
) {

1105 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 0, "send() incomplete");

1106  
NGX_ERROR
;

1111  
NGX_OK
;

1112 
	}
}

1116 
	$ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
)

1118 
time_t
 
timî
, 
©imî
, 
¡imî
;

1119 #i‡(
NGX_HAVE_INET6
)

1120 
time_t
 
a6timî
;

1122 
ngx_ªsﬁvî_t
 *
r
;

1124 
r
 = 
ev
->
d©a
;

1126 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1131 
¡imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
«me_rbåì
, &r->
«me_ª£nd_queue
);

1137 
©imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr_rbåì
, &r->
addr_ª£nd_queue
);

1141 #i‡(
NGX_HAVE_INET6
)

1145 
a6timî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr6_rbåì
, &r->
addr6_ª£nd_queue
);

1151 
timî
 = 
¡imî
;

1153 i‡(
timî
 == 0) {

1154 
timî
 = 
©imî
;

1156 } i‡(
©imî
) {

1157 
timî
 = 
	`ngx_mö
—imî, 
©imî
);

1160 #i‡(
NGX_HAVE_INET6
)

1162 i‡(
timî
 == 0) {

1163 
timî
 = 
a6timî
;

1165 } i‡(
a6timî
) {

1166 
timî
 = 
	`ngx_mö
—imî, 
a6timî
);

1171 i‡(
timî
) {

1172 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë(
timî
 * 1000));

1174 
	}
}

1177 
time_t


1178 
	$ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

1180 
time_t
 
now
;

1181 
ngx_queue_t
 *
q
;

1182 
ngx_ªsﬁvî_node_t
 *
∫
;

1184 
now
 = 
	`ngx_time
();

1187 i‡(
	`ngx_queue_em±y
(
queue
)) {

1191 
q
 = 
	`ngx_queue_œ°
(
queue
);

1193 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1195 i‡(
now
 < 
∫
->
expúe
) {

1196  
∫
->
expúe
 - 
now
;

1199 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1201 (
size_t
Ë
∫
->
∆í
,Ñn->
«me
,Ñn->
waôög
);

1203 
	`ngx_queue_ªmove
(
q
);

1205 i‡(
∫
->
waôög
) {

1207 (Ë
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
);

1209 
∫
->
expúe
 = 
now
 + 
r
->
ª£nd_timeout
;

1211 
	`ngx_queue_ö£π_hód
(
queue
, 
q
);

1216 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

1218 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1220 
	}
}

1224 
	$ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
)

1226 
ssize_t
 
n
;

1227 
ngx_c⁄√˘i⁄_t
 *
c
;

1228 
u_ch¨
 
buf
[
NGX_RESOLVER_UDP_SIZE
];

1230 
c
 = 
ªv
->
d©a
;

1233 
n
 = 
	`ngx_udp_ªcv
(
c
, 
buf
, 
NGX_RESOLVER_UDP_SIZE
);

1235 i‡(
n
 < 0) {

1239 
	`ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
c
->
d©a
, 
buf
, 
n
);

1241 } 
ªv
->
ªady
);

1242 
	}
}

1246 
	$ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
)

1248 *
îr
;

1249 
ngx_uöt_t
 
i
, 
times
, 
idít
, 
qidít
, 
Êags
, 
code
, 
nqs
, 
«n
,

1250 
qty≥
, 
q˛ass
;

1251 #i‡(
NGX_HAVE_INET6
)

1252 
ngx_uöt_t
 
qidít6
;

1254 
ngx_queue_t
 *
q
;

1255 
ngx_ªsﬁvî_qs_t
 *
qs
;

1256 
ngx_ªsﬁvî_hdr_t
 *
ª•⁄£
;

1257 
ngx_ªsﬁvî_node_t
 *
∫
;

1259 i‡(
n
 < (
ngx_ªsﬁvî_hdr_t
)) {

1260 
sh‹t_ª•⁄£
;

1263 
ª•⁄£
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
buf
;

1265 
idít
 = (
ª•⁄£
->
idít_hi
 << 8Ë+Ñe•⁄£->
idít_lo
;

1266 
Êags
 = (
ª•⁄£
->
Êags_hi
 << 8Ë+Ñe•⁄£->
Êags_lo
;

1267 
nqs
 = (
ª•⁄£
->
nqs_hi
 << 8Ë+Ñe•⁄£->
nqs_lo
;

1268 
«n
 = (
ª•⁄£
->
«n_hi
 << 8Ë+Ñe•⁄£->
«n_lo
;

1270 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1272 
idít
, 
Êags
, 
nqs
, 
«n
,

1273 (
ª•⁄£
->
¬s_hi
 << 8Ë+Ñe•⁄£->
¬s_lo
,

1274 (
ª•⁄£
->
«r_hi
 << 8Ë+Ñe•⁄£->
«r_lo
);

1277 i‡((
Êags
 & 0xf870) != 0x8000) {

1278 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1279 "övÆid DNSÑe•⁄£ %uòÊ:%04Xui", 
idít
, 
Êags
);

1283 
code
 = 
Êags
 & 0xf;

1285 i‡(
code
 =
NGX_RESOLVE_FORMERR
) {

1287 
times
 = 0;

1289 
q
 = 
	`ngx_queue_hód
(&
r
->
«me_ª£nd_queue
);

1290 
q
 !
	`ngx_queue_£¡öñ
(&
r
->
«me_ª£nd_queue
Ë|| 
times
++ < 100;

1291 
q
 = 
	`ngx_queue_√xt
(q))

1293 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1294 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1296 i‡(
qidít
 =
idít
) {

1297 
dns_îr‹_«me
;

1300 #i‡(
NGX_HAVE_INET6
)

1301 i‡(
∫
->
quîy6
) {

1302 
qidít6
 = (
∫
->
quîy6
[0] << 8) +Ñn->query6[1];

1304 i‡(
qidít6
 =
idít
) {

1305 
dns_îr‹_«me
;

1311 
dns_îr‹
;

1314 i‡(
code
 > 
NGX_RESOLVE_REFUSED
) {

1315 
dns_îr‹
;

1318 i‡(
nqs
 != 1) {

1319 
îr
 = "invalidÇumber of questions in DNSÑesponse";

1320 
d⁄e
;

1323 
i
 = (
ngx_ªsﬁvî_hdr_t
);

1325 
i
 < (
ngx_uöt_t
Ë
n
) {

1326 i‡(
buf
[
i
] == '\0') {

1327 
found
;

1330 
i
 +1 + 
buf
[i];

1333 
sh‹t_ª•⁄£
;

1335 
found
:

1337 i‡(
i
++ =(
ngx_ªsﬁvî_hdr_t
)) {

1338 
îr
 = "zero-length domainÇame in DNSÑesponse";

1339 
d⁄e
;

1342 i‡(
i
 + (
ngx_ªsﬁvî_qs_t
Ë+ 
«n
 * (2 + (
ngx_ªsﬁvî_™_t
))

1343 > (
ngx_uöt_t
Ë
n
)

1345 
sh‹t_ª•⁄£
;

1348 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë&
buf
[
i
];

1350 
qty≥
 = (
qs
->
ty≥_hi
 << 8Ë+ qs->
ty≥_lo
;

1351 
q˛ass
 = (
qs
->
˛ass_hi
 << 8Ë+ qs->
˛ass_lo
;

1353 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1354 "ªsﬁvî DNSÑe•⁄£ qt:%uò˛:%ui", 
qty≥
, 
q˛ass
);

1356 i‡(
q˛ass
 != 1) {

1357 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1358 "unknow¿quîy cœs†%uòö DNSÑe•⁄£", 
q˛ass
);

1362 
qty≥
) {

1364 
NGX_RESOLVE_A
:

1365 #i‡(
NGX_HAVE_INET6
)

1366 
NGX_RESOLVE_AAAA
:

1369 
	`ngx_ªsﬁvî_¥o˚ss_a
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
qty≥
, 
«n
,

1370 
i
 + (
ngx_ªsﬁvî_qs_t
));

1374 
NGX_RESOLVE_PTR
:

1376 
	`ngx_ªsﬁvî_¥o˚ss_±r
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
);

1381 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1382 "unknow¿quîyÅy≥ %uòö DNSÑe•⁄£", 
qty≥
);

1388 
sh‹t_ª•⁄£
:

1390 
îr
 = "short DNSÑesponse";

1392 
d⁄e
:

1394 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1398 
dns_îr‹_«me
:

1400 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1402 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
,

1403 
∫
->
∆í
,Ñn->
«me
);

1406 
dns_îr‹
:

1408 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1410 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
);

1412 
	}
}

1416 
	$ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
œ°
,

1417 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
qty≥
,

1418 
ngx_uöt_t
 
«n
,Çgx_uöt_à
™s
)

1420 *
îr
;

1421 
u_ch¨
 *
˙ame
;

1422 
size_t
 
Àn
;

1423 
öt32_t
 
âl
;

1424 
uöt32_t
 
hash
;

1425 
ö_addr_t
 *
addr
;

1426 
ngx_°r_t
 
«me
;

1427 
ngx_addr_t
 *
addrs
;

1428 
ngx_uöt_t
 
ty≥
, 
˛ass
, 
qidít
, 
«ddrs
, 
a
, 
i
, 
n
, 
°¨t
;

1429 #i‡(
NGX_HAVE_INET6
)

1430 
ö6_addr
 *
addr6
;

1432 
ngx_ªsﬁvî_™_t
 *
™
;

1433 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1434 
ngx_ªsﬁvî_node_t
 *
∫
;

1436 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
,

1437 
buf
 + (
ngx_ªsﬁvî_hdr_t
), bu‡+ 
œ°
)

1438 !
NGX_OK
)

1443 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

1445 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
.
d©a
,Çame.
Àn
);

1449 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
«me
, 
hash
);

1451 i‡(
∫
 =
NULL
) {

1452 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1453 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1454 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1455 
Áûed
;

1458 
qty≥
) {

1460 #i‡(
NGX_HAVE_INET6
)

1461 
NGX_RESOLVE_AAAA
:

1463 i‡(
∫
->
quîy6
 =
NULL
 ||Ñn->
«ddrs6
 !(
u_sh‹t
) -1) {

1464 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1465 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1466 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1467 
Áûed
;

1470 
qidít
 = (
∫
->
quîy6
[0] << 8) +Ñn->query6[1];

1477 i‡(
∫
->
quîy
 =
NULL
 ||Ñn->
«ddrs
 !(
u_sh‹t
) -1) {

1478 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1479 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1480 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1481 
Áûed
;

1484 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1487 i‡(
idít
 !
qidít
) {

1488 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1490 
idít
, &
«me
, 
qidít
);

1491 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1492 
Áûed
;

1495 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1497 i‡(
code
 =0 && 
∫
->code) {

1498 
code
 = 
∫
->code;

1501 i‡(
code
 =0 && 
«n
 == 0) {

1503 #i‡(
NGX_HAVE_INET6
)

1504 
qty≥
) {

1506 
NGX_RESOLVE_AAAA
:

1508 
∫
->
«ddrs6
 = 0;

1510 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1511 
√xt
;

1514 i‡(
∫
->
«ddrs
) {

1515 
exp‹t
;

1522 
∫
->
«ddrs
 = 0;

1524 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1525 
√xt
;

1528 i‡(
∫
->
«ddrs6
) {

1529 
exp‹t
;

1534 
code
 = 
NGX_RESOLVE_NXDOMAIN
;

1537 i‡(
code
) {

1539 #i‡(
NGX_HAVE_INET6
)

1540 
qty≥
) {

1542 
NGX_RESOLVE_AAAA
:

1544 
∫
->
«ddrs6
 = 0;

1546 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1547 
∫
->
code
 = (
u_ch¨
) code;

1548 
√xt
;

1555 
∫
->
«ddrs
 = 0;

1557 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1558 
∫
->
code
 = (
u_ch¨
) code;

1559 
√xt
;

1564 
√xt
 = 
∫
->
waôög
;

1565 
∫
->
waôög
 = 
NULL
;

1567 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1569 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

1571 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1575 
√xt
) {

1576 
˘x
 = 
√xt
;

1577 
˘x
->
°©e
 = 
code
;

1578 
√xt
 = 
˘x
->next;

1580 
˘x
->
	`h™dÀr
(ctx);

1586 
i
 = 
™s
;

1587 
«ddrs
 = 0;

1588 
˙ame
 = 
NULL
;

1590 
a
 = 0;á < 
«n
;á++) {

1592 
°¨t
 = 
i
;

1594 
i
 < 
œ°
) {

1596 i‡(
buf
[
i
] & 0xc0) {

1597 
i
 += 2;

1598 
found
;

1601 i‡(
buf
[
i
] == 0) {

1602 
i
++;

1603 
ã°_Àngth
;

1606 
i
 +1 + 
buf
[i];

1609 
sh‹t_ª•⁄£
;

1611 
ã°_Àngth
:

1613 i‡(
i
 - 
°¨t
 < 2) {

1614 
îr
 = "invalidÇame in DNSÑesponse";

1615 
övÆid
;

1618 
found
:

1620 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
œ°
) {

1621 
sh‹t_ª•⁄£
;

1624 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1626 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1627 
˛ass
 = (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
;

1628 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1629 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

1630 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

1632 i‡(
˛ass
 != 1) {

1633 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1634 "u√x≥˘ed RR cœs†%ui", 
˛ass
);

1635 
Áûed
;

1638 i‡(
âl
 < 0) {

1639 
âl
 = 0;

1642 
∫
->
âl
 = 
	`ngx_mö
‘n->âl, (
uöt32_t
)Åtl);

1644 
i
 +(
ngx_ªsﬁvî_™_t
);

1646 
ty≥
) {

1648 
NGX_RESOLVE_A
:

1650 i‡(
qty≥
 !
NGX_RESOLVE_A
) {

1651 
îr
 = "unexpected AÑecord in DNSÑesponse";

1652 
övÆid
;

1655 i‡(
Àn
 != 4) {

1656 
îr
 = "invalid AÑecord in DNSÑesponse";

1657 
övÆid
;

1660 i‡(
i
 + 4 > 
œ°
) {

1661 
sh‹t_ª•⁄£
;

1664 
«ddrs
++;

1668 #i‡(
NGX_HAVE_INET6
)

1669 
NGX_RESOLVE_AAAA
:

1671 i‡(
qty≥
 !
NGX_RESOLVE_AAAA
) {

1672 
îr
 = "unexpected AAAAÑecord in DNSÑesponse";

1673 
övÆid
;

1676 i‡(
Àn
 != 16) {

1677 
îr
 = "invalid AAAAÑecord in DNSÑesponse";

1678 
övÆid
;

1681 i‡(
i
 + 16 > 
œ°
) {

1682 
sh‹t_ª•⁄£
;

1685 
«ddrs
++;

1690 
NGX_RESOLVE_CNAME
:

1692 
˙ame
 = &
buf
[
i
];

1696 
NGX_RESOLVE_DNAME
:

1702 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1703 "u√x≥˘ed RRÅy≥ %ui", 
ty≥
);

1706 
i
 +
Àn
;

1709 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1711 
«ddrs
, 
˙ame
, 
∫
->
âl
);

1713 i‡(
«ddrs
) {

1715 
qty≥
) {

1717 #i‡(
NGX_HAVE_INET6
)

1718 
NGX_RESOLVE_AAAA
:

1720 i‡(
«ddrs
 == 1) {

1721 
addr6
 = &
∫
->
u6
.addr6;

1722 
∫
->
«ddrs6
 = 1;

1725 
addr6
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö6_addr
));

1726 i‡(
addr6
 =
NULL
) {

1727 
Áûed
;

1730 
∫
->
u6
.
addrs6
 = 
addr6
;

1731 
∫
->
«ddrs6
 = (
u_sh‹t
Ë
«ddrs
;

1734 #i‡(
NGX_SUPPRESS_WARN
)

1735 
addr
 = 
NULL
;

1743 i‡(
«ddrs
 == 1) {

1744 
addr
 = &
∫
->
u
.addr;

1745 
∫
->
«ddrs
 = 1;

1748 
addr
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö_addr_t
));

1749 i‡(
addr
 =
NULL
) {

1750 
Áûed
;

1753 
∫
->
u
.
addrs
 = 
addr
;

1754 
∫
->
«ddrs
 = (
u_sh‹t
)Çaddrs;

1757 #i‡(
NGX_HAVE_INET6
 && 
NGX_SUPPRESS_WARN
)

1758 
addr6
 = 
NULL
;

1762 
n
 = 0;

1763 
i
 = 
™s
;

1765 
a
 = 0;á < 
«n
;á++) {

1769 i‡(
buf
[
i
] & 0xc0) {

1770 
i
 += 2;

1774 i‡(
buf
[
i
] == 0) {

1775 
i
++;

1779 
i
 +1 + 
buf
[i];

1782 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1784 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1785 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1787 
i
 +(
ngx_ªsﬁvî_™_t
);

1789 i‡(
ty≥
 =
NGX_RESOLVE_A
) {

1791 
addr
[
n
] = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1792 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1794 i‡(++
n
 =
«ddrs
) {

1796 #i‡(
NGX_HAVE_INET6
)

1797 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1798 
√xt
;

1806 #i‡(
NGX_HAVE_INET6
)

1807 i‡(
ty≥
 =
NGX_RESOLVE_AAAA
) {

1809 
	`ngx_mem˝y
(
addr6
[
n
].
s6_addr
, &
buf
[
i
], 16);

1811 i‡(++
n
 =
«ddrs
) {

1813 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1814 
√xt
;

1822 
i
 +
Àn
;

1826 
qty≥
) {

1828 #i‡(
NGX_HAVE_INET6
)

1829 
NGX_RESOLVE_AAAA
:

1831 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1832 
∫
->
«ddrs6
 = 0;

1840 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1841 
∫
->
«ddrs
 = 0;

1845 i‡(
∫
->
«ddrs
 !(
u_sh‹t
) -1

1846 #i‡(
NGX_HAVE_INET6
)

1847 && 
∫
->
«ddrs6
 !(
u_sh‹t
) -1

1849 && 
∫
->
«ddrs


1850 #i‡(
NGX_HAVE_INET6
)

1851 + 
∫
->
«ddrs6


1856 #i‡(
NGX_HAVE_INET6
)

1857 
exp‹t
:

1860 
«ddrs
 = 
∫
->naddrs;

1861 #i‡(
NGX_HAVE_INET6
)

1862 
«ddrs
 +
∫
->
«ddrs6
;

1865 i‡(
«ddrs
 =1 && 
∫
->naddrs == 1) {

1866 
addrs
 = 
NULL
;

1869 
addrs
 = 
	`ngx_ªsﬁvî_exp‹t
(
r
, 
∫
, 0);

1870 i‡(
addrs
 =
NULL
) {

1871 
Áûed
;

1875 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1877 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

1878 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1880 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1882 
√xt
 = 
∫
->
waôög
;

1883 
∫
->
waôög
 = 
NULL
;

1887 
√xt
) {

1888 
˘x
 = 
√xt
;

1889 
˘x
->
°©e
 = 
NGX_OK
;

1890 
˘x
->
«ddrs
 =Çaddrs;

1892 i‡(
addrs
 =
NULL
) {

1893 
˘x
->
addrs
 = &˘x->
addr
;

1894 
˘x
->
addr
.
sockaddr
 = (sockadd∏*Ë&˘x->
sö
;

1895 
˘x
->
addr
.
sockÀn
 = (
sockaddr_ö
);

1896 
	`ngx_memzîo
(&
˘x
->
sö
, (
sockaddr_ö
));

1897 
˘x
->
sö
.
sö_Ámûy
 = 
AF_INET
;

1898 
˘x
->
sö
.
sö_addr
.
s_addr
 = 
∫
->
u
.
addr
;

1901 
˘x
->
addrs
 =áddrs;

1904 
√xt
 = 
˘x
->next;

1906 
˘x
->
	`h™dÀr
(ctx);

1909 i‡(
addrs
 !
NULL
) {

1910 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
->
sockaddr
);

1911 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

1914 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1915 
∫
->
quîy
 = 
NULL
;

1916 #i‡(
NGX_HAVE_INET6
)

1917 
∫
->
quîy6
 = 
NULL
;

1923 i‡(
˙ame
) {

1927 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1

1928 #i‡(
NGX_HAVE_INET6
)

1929 || 
∫
->
«ddrs6
 =(
u_sh‹t
) -1

1933 
√xt
;

1936 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, 
˙ame
, bu‡+ 
œ°
Ë!
NGX_OK
) {

1937 
Áûed
;

1940 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1941 "ªsﬁvî c«me:\"%V\"", &
«me
);

1943 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1945 
∫
->
˙Àn
 = (
u_sh‹t
Ë
«me
.
Àn
;

1946 
∫
->
u
.
˙ame
 = 
«me
.
d©a
;

1948 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

1949 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1951 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1953 
˘x
 = 
∫
->
waôög
;

1954 
∫
->
waôög
 = 
NULL
;

1956 i‡(
˘x
) {

1957 
˘x
->
«me
 =Çame;

1959 (Ë
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

1962 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1963 
∫
->
quîy
 = 
NULL
;

1964 #i‡(
NGX_HAVE_INET6
)

1965 
∫
->
quîy6
 = 
NULL
;

1973 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1977 
sh‹t_ª•⁄£
:

1979 
îr
 = "short DNSÑesponse";

1981 
övÆid
:

1985 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1989 
Áûed
:

1991 
√xt
:

1996 
	}
}

2000 
	$ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

2001 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
)

2003 *
îr
;

2004 
size_t
 
Àn
;

2005 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

2006 
ö_addr_t
 
addr
;

2007 
öt32_t
 
âl
;

2008 
ngx_öt_t
 
o˘ë
;

2009 
ngx_°r_t
 
«me
;

2010 
ngx_uöt_t
 
i
, 
mask
, 
qidít
, 
˛ass
;

2011 
ngx_queue_t
 *
expúe_queue
;

2012 
ngx_rbåì_t
 *
åì
;

2013 
ngx_ªsﬁvî_™_t
 *
™
;

2014 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

2015 
ngx_ªsﬁvî_node_t
 *
∫
;

2016 #i‡(
NGX_HAVE_INET6
)

2017 
uöt32_t
 
hash
;

2018 
ngx_öt_t
 
digô
;

2019 
ö6_addr
 
addr6
;

2022 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, 
NULL
, 
buf
,

2023 
buf
 + (
ngx_ªsﬁvî_hdr_t
), bu‡+ 
n
)

2024 !
NGX_OK
)

2031 
addr
 = 0;

2032 
i
 = (
ngx_ªsﬁvî_hdr_t
);

2034 
mask
 = 0; mask < 32; mask += 8) {

2035 
Àn
 = 
buf
[
i
++];

2037 
o˘ë
 = 
	`ngx_©oi
(&
buf
[
i
], 
Àn
);

2038 i‡(
o˘ë
 =
NGX_ERROR
 || octet > 255) {

2039 
övÆid_ö_addr_¨∑
;

2042 
addr
 +
o˘ë
 << 
mask
;

2043 
i
 +
Àn
;

2046 i‡(
	`ngx_°rˇ£cmp
(&
buf
[
i
], (
u_ch¨
 *) "\7in-addr\4arpa") == 0) {

2047 
i
 += ("\7in-addr\4arpa");

2051 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

2053 
åì
 = &
r
->
addr_rbåì
;

2054 
expúe_queue
 = &
r
->
addr_expúe_queue
;

2056 
addr
 = 
	`ht⁄l
(addr);

2057 
«me
.
Àn
 = 
	`ngx_öë_¡›
(
AF_INET
, &
addr
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
);

2058 
«me
.
d©a
 = 
ãxt
;

2060 
vÆid
;

2063 
övÆid_ö_addr_¨∑
:

2065 #i‡(
NGX_HAVE_INET6
)

2067 
i
 = (
ngx_ªsﬁvî_hdr_t
);

2069 
o˘ë
 = 15; octet >= 0; octet--) {

2070 i‡(
buf
[
i
++] != '\1') {

2071 
övÆid_ù6_¨∑
;

2074 
digô
 = 
	`ngx_hextoi
(&
buf
[
i
++], 1);

2075 i‡(
digô
 =
NGX_ERROR
) {

2076 
övÆid_ù6_¨∑
;

2079 
addr6
.
s6_addr
[
o˘ë
] = (
u_ch¨
Ë
digô
;

2081 i‡(
buf
[
i
++] != '\1') {

2082 
övÆid_ù6_¨∑
;

2085 
digô
 = 
	`ngx_hextoi
(&
buf
[
i
++], 1);

2086 i‡(
digô
 =
NGX_ERROR
) {

2087 
övÆid_ù6_¨∑
;

2090 
addr6
.
s6_addr
[
o˘ë
] +(
u_ch¨
Ë(
digô
 * 16);

2093 i‡(
	`ngx_°rˇ£cmp
(&
buf
[
i
], (
u_ch¨
 *) "\3ip6\4arpa") == 0) {

2094 
i
 += ("\3ip6\4arpa");

2098 
hash
 = 
	`ngx_¸c32_sh‹t
(
addr6
.
s6_addr
, 16);

2099 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
addr6
, 
hash
);

2101 
åì
 = &
r
->
addr6_rbåì
;

2102 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

2104 
«me
.
Àn
 = 
	`ngx_öë6_¡›
(
addr6
.
s6_addr
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
);

2105 
«me
.
d©a
 = 
ãxt
;

2107 
vÆid
;

2110 
övÆid_ù6_¨∑
:

2113 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2117 
vÆid
:

2119 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

2120 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2121 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

2122 
Áûed
;

2125 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

2127 i‡(
idít
 !
qidít
) {

2128 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2130 
idít
, &
«me
, 
qidít
);

2131 
Áûed
;

2134 i‡(
code
 =0 && 
«n
 == 0) {

2135 
code
 = 
NGX_RESOLVE_NXDOMAIN
;

2138 i‡(
code
) {

2139 
√xt
 = 
∫
->
waôög
;

2140 
∫
->
waôög
 = 
NULL
;

2142 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2144 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

2146 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

2150 
√xt
) {

2151 
˘x
 = 
√xt
;

2152 
˘x
->
°©e
 = 
code
;

2153 
√xt
 = 
˘x
->next;

2155 
˘x
->
	`h™dÀr
(ctx);

2161 
i
 +(
ngx_ªsﬁvî_qs_t
);

2163 i‡(
i
 + 2 + (
ngx_ªsﬁvî_™_t
Ë>
n
) {

2164 
sh‹t_ª•⁄£
;

2169 i‡(
buf
[
i
] !0xc0 || buf[ò+ 1] !(
ngx_ªsﬁvî_hdr_t
)) {

2170 
îr
 = "invalid in-addr.arpa or ip6.arpaÇame in DNSÑesponse";

2171 
övÆid
;

2174 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
 + 2];

2176 
˛ass
 = (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
;

2177 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

2178 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

2179 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

2181 i‡(
˛ass
 != 1) {

2182 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2183 "u√x≥˘ed RR cœs†%ui", 
˛ass
);

2184 
Áûed
;

2187 i‡(
âl
 < 0) {

2188 
âl
 = 0;

2191 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

2193 (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
,

2194 
˛ass
, 
Àn
);

2196 
i
 +2 + (
ngx_ªsﬁvî_™_t
);

2198 i‡(
i
 + 
Àn
 > 
n
) {

2199 
sh‹t_ª•⁄£
;

2202 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, bu‡+ 
i
, bu‡+ 
n
Ë!
NGX_OK
) {

2203 
Áûed
;

2206 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvîán:%V", &
«me
);

2208 i‡(
«me
.
Àn
 !(
size_t
Ë
∫
->
∆í


2209 || 
	`ngx_°∫cmp
(
«me
.
d©a
, 
∫
->«me,Çame.
Àn
) != 0)

2211 i‡(
∫
->
∆í
) {

2212 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

2215 
∫
->
∆í
 = (
u_sh‹t
Ë
«me
.
Àn
;

2216 
∫
->
«me
 =Çame.
d©a
;

2218 
«me
.
d©a
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Çame.
Àn
);

2219 i‡(
«me
.
d©a
 =
NULL
) {

2220 
Áûed
;

2224 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2226 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

2227 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

2229 
	`ngx_queue_ö£π_hód
(
expúe_queue
, &
∫
->
queue
);

2231 
√xt
 = 
∫
->
waôög
;

2232 
∫
->
waôög
 = 
NULL
;

2236 
√xt
) {

2237 
˘x
 = 
√xt
;

2238 
˘x
->
°©e
 = 
NGX_OK
;

2239 
˘x
->
«me
 =Çame;

2240 
√xt
 = 
˘x
->next;

2242 
˘x
->
	`h™dÀr
(ctx);

2245 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

2249 
sh‹t_ª•⁄£
:

2251 
îr
 = "short DNSÑesponse";

2253 
övÆid
:

2257 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

2261 
Áûed
:

2266 
	}
}

2269 
ngx_ªsﬁvî_node_t
 *

2270 
	$ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
)

2272 
ngx_öt_t
 
rc
;

2273 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2274 
ngx_ªsﬁvî_node_t
 *
∫
;

2276 
node
 = 
r
->
«me_rbåì
.
roŸ
;

2277 
£¡öñ
 = 
r
->
«me_rbåì
.sentinel;

2279 
node
 !
£¡öñ
) {

2281 i‡(
hash
 < 
node
->
key
) {

2282 
node
 =Çode->
À·
;

2286 i‡(
hash
 > 
node
->
key
) {

2287 
node
 =Çode->
right
;

2293 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

2295 
rc
 = 
	`ngx_memn2cmp
(
«me
->
d©a
, 
∫
->«me,Çame->
Àn
,Ñn->
∆í
);

2297 i‡(
rc
 == 0) {

2298  
∫
;

2301 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2306  
NULL
;

2307 
	}
}

2310 
ngx_ªsﬁvî_node_t
 *

2311 
	$ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 
addr
)

2313 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2315 
node
 = 
r
->
addr_rbåì
.
roŸ
;

2316 
£¡öñ
 = 
r
->
addr_rbåì
.sentinel;

2318 
node
 !
£¡öñ
) {

2320 i‡(
addr
 < 
node
->
key
) {

2321 
node
 =Çode->
À·
;

2325 i‡(
addr
 > 
node
->
key
) {

2326 
node
 =Çode->
right
;

2332  (
ngx_ªsﬁvî_node_t
 *Ë
node
;

2337  
NULL
;

2338 
	}
}

2341 #i‡(
NGX_HAVE_INET6
)

2343 
ngx_ªsﬁvî_node_t
 *

2344 
	$ngx_ªsﬁvî_lookup_addr6
(
ngx_ªsﬁvî_t
 *
r
, 
ö6_addr
 *
addr
,

2345 
uöt32_t
 
hash
)

2347 
ngx_öt_t
 
rc
;

2348 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2349 
ngx_ªsﬁvî_node_t
 *
∫
;

2351 
node
 = 
r
->
addr6_rbåì
.
roŸ
;

2352 
£¡öñ
 = 
r
->
addr6_rbåì
.sentinel;

2354 
node
 !
£¡öñ
) {

2356 i‡(
hash
 < 
node
->
key
) {

2357 
node
 =Çode->
À·
;

2361 i‡(
hash
 > 
node
->
key
) {

2362 
node
 =Çode->
right
;

2368 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

2370 
rc
 = 
	`ngx_memcmp
(
addr
, &
∫
->
addr6
, 16);

2372 i‡(
rc
 == 0) {

2373  
∫
;

2376 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2381  
NULL
;

2382 
	}
}

2388 
	$ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2389 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2391 
ngx_rbåì_node_t
 **
p
;

2392 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

2396 i‡(
node
->
key
 < 
ãmp
->key) {

2398 
p
 = &
ãmp
->
À·
;

2400 } i‡(
node
->
key
 > 
ãmp
->key) {

2402 
p
 = &
ãmp
->
right
;

2406 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

2407 
∫_ãmp
 = (
ngx_ªsﬁvî_node_t
 *Ë
ãmp
;

2409 
p
 = (
	`ngx_memn2cmp
(
∫
->
«me
, 
∫_ãmp
->«me,Ñn->
∆í
,Ñn_temp->nlen)

2410 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2413 i‡(*
p
 =
£¡öñ
) {

2417 
ãmp
 = *
p
;

2420 *
p
 = 
node
;

2421 
node
->
∑ª¡
 = 
ãmp
;

2422 
node
->
À·
 = 
£¡öñ
;

2423 
node
->
right
 = 
£¡öñ
;

2424 
	`ngx_rbt_ªd
(
node
);

2425 
	}
}

2428 #i‡(
NGX_HAVE_INET6
)

2431 
	$ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2432 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2434 
ngx_rbåì_node_t
 **
p
;

2435 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

2439 i‡(
node
->
key
 < 
ãmp
->key) {

2441 
p
 = &
ãmp
->
À·
;

2443 } i‡(
node
->
key
 > 
ãmp
->key) {

2445 
p
 = &
ãmp
->
right
;

2449 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

2450 
∫_ãmp
 = (
ngx_ªsﬁvî_node_t
 *Ë
ãmp
;

2452 
p
 = (
	`ngx_memcmp
(&
∫
->
addr6
, &
∫_ãmp
->addr6, 16)

2453 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2456 i‡(*
p
 =
£¡öñ
) {

2460 
ãmp
 = *
p
;

2463 *
p
 = 
node
;

2464 
node
->
∑ª¡
 = 
ãmp
;

2465 
node
->
À·
 = 
£¡öñ
;

2466 
node
->
right
 = 
£¡öñ
;

2467 
	`ngx_rbt_ªd
(
node
);

2468 
	}
}

2473 
ngx_öt_t


2474 
	$ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

2476 
u_ch¨
 *
p
, *
s
;

2477 
size_t
 
Àn
, 
∆í
;

2478 
ngx_uöt_t
 
idít
;

2479 #i‡(
NGX_HAVE_INET6
)

2480 
ngx_ªsﬁvî_t
 *
r
;

2482 
ngx_ªsﬁvî_qs_t
 *
qs
;

2483 
ngx_ªsﬁvî_hdr_t
 *
quîy
;

2485 
∆í
 = 
˘x
->
«me
.
Àn
 ? (1 + ctx->name.len + 1) : 1;

2487 
Àn
 = (
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
 + (
ngx_ªsﬁvî_qs_t
);

2489 #i‡(
NGX_HAVE_INET6
)

2490 
r
 = 
˘x
->
ªsﬁvî
;

2492 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
r
->
ùv6
 ? 
Àn
 * 2 :Üen);

2494 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

2496 i‡(
p
 =
NULL
) {

2497  
NGX_ERROR
;

2500 
∫
->
qÀn
 = (
u_sh‹t
Ë
Àn
;

2501 
∫
->
quîy
 = 
p
;

2503 #i‡(
NGX_HAVE_INET6
)

2504 i‡(
r
->
ùv6
) {

2505 
∫
->
quîy6
 = 
p
 + 
Àn
;

2509 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

2511 
idít
 = 
	`ngx_øndom
();

2513 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
ªsﬁvî
->
log
, 0,

2514 "ªsﬁve: \"%V\" A %i", &
˘x
->
«me
, 
idít
 & 0xffff);

2516 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

2517 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

2520 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

2523 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

2524 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

2525 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

2526 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

2528 
p
 +(
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
;

2530 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

2533 
qs
->
ty≥_hi
 = 0; qs->
ty≥_lo
 = 
NGX_RESOLVE_A
;

2536 
qs
->
˛ass_hi
 = 0; qs->
˛ass_lo
 = 1;

2540 
Àn
 = 0;

2541 
p
--;

2542 *
p
-- = '\0';

2544 i‡(
˘x
->
«me
.
Àn
 == 0) {

2545  
NGX_DECLINED
;

2548 
s
 = 
˘x
->
«me
.
d©a
 + ctx->«me.
Àn
 - 1; s >= ctx->name.data; s--) {

2549 i‡(*
s
 != '.') {

2550 *
p
 = *
s
;

2551 
Àn
++;

2554 i‡(
Àn
 == 0 ||Üen > 255) {

2555  
NGX_DECLINED
;

2558 *
p
 = (
u_ch¨
Ë
Àn
;

2559 
Àn
 = 0;

2562 
p
--;

2565 i‡(
Àn
 == 0 ||Üen > 255) {

2566  
NGX_DECLINED
;

2569 *
p
 = (
u_ch¨
Ë
Àn
;

2571 #i‡(
NGX_HAVE_INET6
)

2572 i‡(!
r
->
ùv6
) {

2573  
NGX_OK
;

2576 
p
 = 
∫
->
quîy6
;

2578 
	`ngx_mem˝y
(
p
, 
∫
->
quîy
,Ñn->
qÀn
);

2580 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

2582 
idít
 = 
	`ngx_øndom
();

2584 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
ªsﬁvî
->
log
, 0,

2585 "ªsﬁve: \"%V\" AAAA %i", &
˘x
->
«me
, 
idít
 & 0xffff);

2587 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

2588 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

2590 
p
 +(
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
;

2592 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

2594 
qs
->
ty≥_lo
 = 
NGX_RESOLVE_AAAA
;

2597  
NGX_OK
;

2598 
	}
}

2601 
ngx_öt_t


2602 
	$ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

2604 
u_ch¨
 *
p
, *
d
;

2605 
size_t
 
Àn
;

2606 
ö_addr_t
 
addr
;

2607 
ngx_öt_t
 
n
;

2608 
ngx_uöt_t
 
idít
;

2609 
ngx_ªsﬁvî_hdr_t
 *
quîy
;

2610 
sockaddr_ö
 *
sö
;

2611 #i‡(
NGX_HAVE_INET6
)

2612 
sockaddr_ö6
 *
sö6
;

2615 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

2617 #i‡(
NGX_HAVE_INET6
)

2618 
AF_INET6
:

2619 
Àn
 = (
ngx_ªsﬁvî_hdr_t
)

2621 + (
ngx_ªsﬁvî_qs_t
);

2627 
Àn
 = (
ngx_ªsﬁvî_hdr_t
)

2629 + (
ngx_ªsﬁvî_qs_t
);

2632 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

2633 i‡(
p
 =
NULL
) {

2634  
NGX_ERROR
;

2637 
∫
->
quîy
 = 
p
;

2638 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

2640 
idít
 = 
	`ngx_øndom
();

2642 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

2643 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

2646 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

2649 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

2650 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

2651 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

2652 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

2654 
p
 +(
ngx_ªsﬁvî_hdr_t
);

2656 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

2658 #i‡(
NGX_HAVE_INET6
)

2659 
AF_INET6
:

2660 
sö6
 = (
sockaddr_ö6
 *Ë
˘x
->
addr
.
sockaddr
;

2662 
n
 = 15;Ç >= 0;Ç--) {

2663 
p
 = 
	`ngx_•rötf
(p, "\1%xd\1%xd",

2664 
sö6
->
sö6_addr
.
s6_addr
[
n
] & 0xf,

2665 (
sö6
->
sö6_addr
.
s6_addr
[
n
] >> 4) & 0xf);

2668 
p
 = 
	`ngx_˝ymem
(p, "\3ip6\4arpa\0", 10);

2675 
sö
 = (
sockaddr_ö
 *Ë
˘x
->
addr
.
sockaddr
;

2676 
addr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

2678 
n
 = 0;Ç < 32;Ç += 8) {

2679 
d
 = 
	`ngx_•rötf
(&
p
[1], "%ud", (
addr
 >> 
n
) & 0xff);

2680 *
p
 = (
u_ch¨
Ë(
d
 - &p[1]);

2681 
p
 = 
d
;

2684 
p
 = 
	`ngx_˝ymem
(p, "\7in-addr\4arpa\0", 14);

2688 
p
 = 
	`ngx_˝ymem
(p, "\0\14\0\1", 4);

2690 
∫
->
qÀn
 = (
u_sh‹t
Ë(
p
 -Ñn->
quîy
);

2692  
NGX_OK
;

2693 
	}
}

2696 
ngx_öt_t


2697 
	$ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
u_ch¨
 *
buf
, u_ch¨ *
§c
,

2698 
u_ch¨
 *
œ°
)

2700 *
îr
;

2701 
u_ch¨
 *
p
, *
d°
;

2702 
ssize_t
 
Àn
;

2703 
ngx_uöt_t
 
i
, 
n
;

2705 
p
 = 
§c
;

2706 
Àn
 = -1;

2713 
i
 = 0; i < 128; i++) {

2714 
n
 = *
p
++;

2716 i‡(
n
 == 0) {

2717 
d⁄e
;

2720 i‡(
n
 & 0xc0) {

2721 
n
 = (“ & 0x3fË<< 8Ë+ *
p
;

2722 
p
 = &
buf
[
n
];

2725 
Àn
 +1 + 
n
;

2726 
p
 = &p[
n
];

2729 i‡(
p
 >
œ°
) {

2730 
îr
 = "name is out ofÑesponse";

2731 
övÆid
;

2735 
îr
 = "compressionÖointersÜoop";

2737 
övÆid
:

2739 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

2741  
NGX_ERROR
;

2743 
d⁄e
:

2745 i‡(
«me
 =
NULL
) {

2746  
NGX_OK
;

2749 i‡(
Àn
 == -1) {

2750 
«me
->
Àn
 = 0;

2751 
«me
->
d©a
 = 
NULL
;

2752  
NGX_OK
;

2755 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

2756 i‡(
d°
 =
NULL
) {

2757  
NGX_ERROR
;

2760 
«me
->
d©a
 = 
d°
;

2762 
n
 = *
§c
++;

2765 i‡(
n
 & 0xc0) {

2766 
n
 = (“ & 0x3fË<< 8Ë+ *
§c
;

2767 
§c
 = &
buf
[
n
];

2769 
n
 = *
§c
++;

2772 
	`ngx_°æow
(
d°
, 
§c
, 
n
);

2773 
d°
 +
n
;

2774 
§c
 +
n
;

2776 
n
 = *
§c
++;

2778 i‡(
n
 != 0) {

2779 *
d°
++ = '.';

2783 i‡(
n
 == 0) {

2784 
«me
->
Àn
 = 
d°
 -Çame->
d©a
;

2785  
NGX_OK
;

2788 
	}
}

2792 
	$ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
)

2794 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

2795 
ngx_ªsﬁvî_node_t
 *
∫
;

2797 
∫
 = 
ev
->
d©a
;

2798 
˘x
 = 
∫
->
waôög
;

2799 
∫
->
waôög
 = 
NULL
;

2802 
˘x
->
°©e
 = 
NGX_RESOLVE_TIMEDOUT
;

2803 
√xt
 = 
˘x
->next;

2805 
˘x
->
	`h™dÀr
(ctx);

2807 
˘x
 = 
√xt
;

2808 } 
˘x
);

2809 
	}
}

2813 
	$ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

2817 i‡(
∫
->
quîy
) {

2818 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

2821 i‡(
∫
->
«me
) {

2822 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
«me
);

2825 i‡(
∫
->
˙Àn
) {

2826 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

2829 i‡(
∫
->
«ddrs
 > 1 &&Ñn->«ddr†!(
u_sh‹t
) -1) {

2830 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

2833 #i‡(
NGX_HAVE_INET6
)

2834 i‡(
∫
->
«ddrs6
 > 1 &&Ñn->«ddrs6 !(
u_sh‹t
) -1) {

2835 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u6
.
addrs6
);

2839 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
);

2842 
	}
}

2846 
	$ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2848 
u_ch¨
 *
p
;

2852 
p
 = 
	`ngx_Æloc
(
size
, 
r
->
log
);

2856  
p
;

2857 
	}
}

2861 
	$ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2863 
u_ch¨
 *
p
;

2865 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2867 i‡(
p
) {

2868 
	`ngx_memzîo
(
p
, 
size
);

2871  
p
;

2872 
	}
}

2876 
	$ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2880 
	`ngx_‰ì
(
p
);

2883 
	}
}

2887 
	$ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2889 
	`ngx_‰ì
(
p
);

2890 
	}
}

2894 
	$ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
)

2896 *
d°
;

2898 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2900 i‡(
d°
 =
NULL
) {

2901  
d°
;

2904 
	`ngx_mem˝y
(
d°
, 
§c
, 
size
);

2906  
d°
;

2907 
	}
}

2910 
ngx_addr_t
 *

2911 
	$ngx_ªsﬁvî_exp‹t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
,

2912 
ngx_uöt_t
 
rŸ©e
)

2914 
ngx_addr_t
 *
d°
;

2915 
ngx_uöt_t
 
d
, 
i
, 
j
, 
n
;

2916 
	`u_ch¨
 (*
sockaddr
)[
NGX_SOCKADDRLEN
];

2917 
ö_addr_t
 *
addr
;

2918 
sockaddr_ö
 *
sö
;

2919 #i‡(
NGX_HAVE_INET6
)

2920 
ö6_addr
 *
addr6
;

2921 
sockaddr_ö6
 *
sö6
;

2924 
n
 = 
∫
->
«ddrs
;

2925 #i‡(
NGX_HAVE_INET6
)

2926 
n
 +
∫
->
«ddrs6
;

2929 
d°
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
n
 * (
ngx_addr_t
));

2930 i‡(
d°
 =
NULL
) {

2931  
NULL
;

2934 
sockaddr
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
n
 * 
NGX_SOCKADDRLEN
);

2935 i‡(
sockaddr
 =
NULL
) {

2936 
	`ngx_ªsﬁvî_‰ì
(
r
, 
d°
);

2937  
NULL
;

2940 
i
 = 0;

2941 
d
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
n
 : 0;

2943 i‡(
∫
->
«ddrs
) {

2944 
j
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
∫
->
«ddrs
 : 0;

2946 
addr
 = (
∫
->
«ddrs
 =1Ë? &∫->
u
.add∏:Ñn->u.
addrs
;

2949 
sö
 = (
sockaddr_ö
 *Ë
sockaddr
[
d
];

2950 
sö
->
sö_Ámûy
 = 
AF_INET
;

2951 
sö
->
sö_addr
.
s_addr
 = 
addr
[
j
++];

2952 
d°
[
d
].
sockaddr
 = (sockadd∏*Ë
sö
;

2953 
d°
[
d
++].
sockÀn
 = (
sockaddr_ö
);

2955 i‡(
d
 =
n
) {

2956 
d
 = 0;

2959 i‡(
j
 =
∫
->
«ddrs
) {

2960 
j
 = 0;

2962 } ++
i
 < 
∫
->
«ddrs
);

2965 #i‡(
NGX_HAVE_INET6
)

2966 i‡(
∫
->
«ddrs6
) {

2967 
j
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
∫
->
«ddrs6
 : 0;

2969 
addr6
 = (
∫
->
«ddrs6
 =1Ë? &∫->
u6
.addr6 :Ñn->u6.
addrs6
;

2972 
sö6
 = (
sockaddr_ö6
 *Ë
sockaddr
[
d
];

2973 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

2974 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
addr6
[
j
++].s6_addr, 16);

2975 
d°
[
d
].
sockaddr
 = (sockadd∏*Ë
sö6
;

2976 
d°
[
d
++].
sockÀn
 = (
sockaddr_ö6
);

2978 i‡(
d
 =
n
) {

2979 
d
 = 0;

2982 i‡(
j
 =
∫
->
«ddrs6
) {

2983 
j
 = 0;

2985 } ++
i
 < 
n
);

2989  
d°
;

2990 
	}
}

2994 
	$ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
)

2996 *
îr‹s
[] = {

3004 i‡(
îr
 > 0 &&Érr < 6) {

3005  
îr‹s
[
îr
 - 1];

3008 i‡(
îr
 =
NGX_RESOLVE_TIMEDOUT
) {

3013 
	}
}

3016 
u_ch¨
 *

3017 
	$ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3019 
u_ch¨
 *
p
;

3020 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

3022 
p
 = 
buf
;

3024 i‡(
log
->
a˘i⁄
) {

3025 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3026 
Àn
 -
p
 - 
buf
;

3029 
uc
 = 
log
->
d©a
;

3031 i‡(
uc
) {

3032 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñesﬁvî: %V", &
uc
->
£rvî
);

3035  
p
;

3036 
	}
}

3039 
ngx_öt_t


3040 
	$ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
)

3042 
rc
;

3043 
ngx_öt_t
 
evít
;

3044 
ngx_evít_t
 *
ªv
, *
wev
;

3045 
ngx_sockë_t
 
s
;

3046 
ngx_c⁄√˘i⁄_t
 *
c
;

3048 
s
 = 
	`ngx_sockë
(
uc
->
sockaddr
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

3050 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0, "UDP sockë %d", 
s
);

3052 i‡(
s
 =(
ngx_sockë_t
) -1) {

3053 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3054 
ngx_sockë_n
 " failed");

3055  
NGX_ERROR
;

3058 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, &
uc
->
log
);

3060 i‡(
c
 =
NULL
) {

3061 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

3062 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3063 
ngx_˛o£_sockë_n
 "failed");

3066  
NGX_ERROR
;

3069 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

3070 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3071 
ngx_n⁄blockög_n
 " failed");

3073 
Áûed
;

3076 
ªv
 = 
c
->
ªad
;

3077 
wev
 = 
c
->
wrôe
;

3079 
ªv
->
log
 = &
uc
->log;

3080 
wev
->
log
 = &
uc
->log;

3082 
uc
->
c⁄√˘i⁄
 = 
c
;

3084 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

3086 #i‡(
NGX_THREADS
)

3090 
ªv
->
lock
 = &
c
->lock;

3091 
wev
->
lock
 = &
c
->lock;

3092 
ªv
->
own_lock
 = &
c
->
lock
;

3093 
wev
->
own_lock
 = &
c
->
lock
;

3097 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0,

3098 "c⁄√˘Åÿ%V, fd:%d #%uA", &
uc
->
£rvî
, 
s
, 
c
->
numbî
);

3100 
rc
 = 
	`c⁄√˘
(
s
, 
uc
->
sockaddr
, uc->
sockÀn
);

3104 i‡(
rc
 == -1) {

3105 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3108 
Áûed
;

3112 
wev
->
ªady
 = 1;

3114 i‡(
ngx_add_evít
) {

3116 
evít
 = (
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) ?

3117  
NGX_CLEAR_EVENT
:

3118  
NGX_LEVEL_EVENT
;

3121 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

3122 
Áûed
;

3128 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

3129 
Áûed
;

3133  
NGX_OK
;

3135 
Áûed
:

3137 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3138 
uc
->
c⁄√˘i⁄
 = 
NULL
;

3140  
NGX_ERROR
;

3141 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_resolver.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_RESOLVER_H_INCLUDED_


13 
	#_NGX_RESOLVER_H_INCLUDED_


	)

16 
	#NGX_RESOLVE_A
 1

	)

17 
	#NGX_RESOLVE_CNAME
 5

	)

18 
	#NGX_RESOLVE_PTR
 12

	)

19 
	#NGX_RESOLVE_MX
 15

	)

20 
	#NGX_RESOLVE_TXT
 16

	)

21 #i‡(
NGX_HAVE_INET6
)

22 
	#NGX_RESOLVE_AAAA
 28

	)

24 
	#NGX_RESOLVE_DNAME
 39

	)

26 
	#NGX_RESOLVE_FORMERR
 1

	)

27 
	#NGX_RESOLVE_SERVFAIL
 2

	)

28 
	#NGX_RESOLVE_NXDOMAIN
 3

	)

29 
	#NGX_RESOLVE_NOTIMP
 4

	)

30 
	#NGX_RESOLVE_REFUSED
 5

	)

31 
	#NGX_RESOLVE_TIMEDOUT
 
NGX_ETIMEDOUT


	)

34 
	#NGX_NO_RESOLVER
 (*Ë-1

	)

36 
	#NGX_RESOLVER_MAX_RECURSION
 50

	)

40 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

41 
sockaddr
 *
	msockaddr
;

42 
sockÀn_t
 
	msockÀn
;

43 
ngx_°r_t
 
	m£rvî
;

44 
ngx_log_t
 
	mlog
;

45 } 
	tngx_udp_c⁄√˘i⁄_t
;

48 
ngx_ªsﬁvî_˘x_s
 
	tngx_ªsﬁvî_˘x_t
;

50 (*
	tngx_ªsﬁvî_h™dÀr_±
)(
	tngx_ªsﬁvî_˘x_t
 *
	t˘x
);

54 
ngx_rbåì_node_t
 
node
;

55 
ngx_queue_t
 
queue
;

58 
u_ch¨
 *
«me
;

60 #i‡(
NGX_HAVE_INET6
)

62 
ö6_addr
 
addr6
;

65 
u_sh‹t
 
∆í
;

66 
u_sh‹t
 
qÀn
;

68 
u_ch¨
 *
quîy
;

69 #i‡(
NGX_HAVE_INET6
)

70 
u_ch¨
 *
quîy6
;

74 
ö_addr_t
 
addr
;

75 
ö_addr_t
 *
addrs
;

76 
u_ch¨
 *
˙ame
;

77 } 
u
;

79 
u_ch¨
 
code
;

80 
u_sh‹t
 
«ddrs
;

81 
u_sh‹t
 
˙Àn
;

83 #i‡(
NGX_HAVE_INET6
)

85 
ö6_addr
 
addr6
;

86 
ö6_addr
 *
addrs6
;

87 } 
u6
;

89 
u_sh‹t
 
«ddrs6
;

92 
time_t
 
expúe
;

93 
time_t
 
vÆid
;

94 
uöt32_t
 
âl
;

96 
ngx_ªsﬁvî_˘x_t
 *
waôög
;

97 } 
	tngx_ªsﬁvî_node_t
;

102 
ngx_evít_t
 *
evít
;

103 *
dummy
;

104 
ngx_log_t
 *
log
;

107 
ngx_öt_t
 
idít
;

110 
ngx_¨øy_t
 
udp_c⁄√˘i⁄s
;

111 
ngx_uöt_t
 
œ°_c⁄√˘i⁄
;

113 
ngx_rbåì_t
 
«me_rbåì
;

114 
ngx_rbåì_node_t
 
«me_£¡öñ
;

116 
ngx_rbåì_t
 
addr_rbåì
;

117 
ngx_rbåì_node_t
 
addr_£¡öñ
;

119 
ngx_queue_t
 
«me_ª£nd_queue
;

120 
ngx_queue_t
 
addr_ª£nd_queue
;

122 
ngx_queue_t
 
«me_expúe_queue
;

123 
ngx_queue_t
 
addr_expúe_queue
;

125 #i‡(
NGX_HAVE_INET6
)

126 
ngx_uöt_t
 
ùv6
;

127 
ngx_rbåì_t
 
addr6_rbåì
;

128 
ngx_rbåì_node_t
 
addr6_£¡öñ
;

129 
ngx_queue_t
 
addr6_ª£nd_queue
;

130 
ngx_queue_t
 
addr6_expúe_queue
;

133 
time_t
 
ª£nd_timeout
;

134 
time_t
 
expúe
;

135 
time_t
 
vÆid
;

137 
ngx_uöt_t
 
log_Àvñ
;

138 } 
	tngx_ªsﬁvî_t
;

141 
	sngx_ªsﬁvî_˘x_s
 {

142 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

143 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

144 
ngx_udp_c⁄√˘i⁄_t
 *
udp_c⁄√˘i⁄
;

147 
ngx_öt_t
 
idít
;

149 
ngx_öt_t
 
°©e
;

150 
ngx_°r_t
 
«me
;

152 
ngx_uöt_t
 
«ddrs
;

153 
ngx_addr_t
 *
addrs
;

154 
ngx_addr_t
 
addr
;

155 
sockaddr_ö
 
sö
;

157 
ngx_ªsﬁvî_h™dÀr_±
 
h™dÀr
;

158 *
d©a
;

159 
ngx_m£c_t
 
timeout
;

161 
ngx_uöt_t
 
quick
;

162 
ngx_uöt_t
 
ªcursi⁄
;

163 
ngx_evít_t
 *
evít
;

167 
ngx_ªsﬁvî_t
 *
	`ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
,

168 
ngx_uöt_t
 
n
);

169 
ngx_ªsﬁvî_˘x_t
 *
	`ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
,

170 
ngx_ªsﬁvî_˘x_t
 *
ãmp
);

171 
ngx_öt_t
 
	`ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

172 
	`ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

173 
ngx_öt_t
 
	`ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

174 
	`ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

175 *
	`ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_sha1.h

8 #i‚de‡
_NGX_SHA1_H_INCLUDED_


9 
	#_NGX_SHA1_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_OPENSSL_SHA1_H
)

17 
	~<›ís¶/sha.h
>

19 
	~<sha.h
>

23 
SHA_CTX
 
	tngx_sha1_t
;

26 
	#ngx_sha1_öô
 
SHA1_Inô


	)

27 
	#ngx_sha1_upd©e
 
SHA1_Upd©e


	)

28 
	#ngx_sha1_föÆ
 
SHA1_FöÆ


	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_shmtx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_ATOMIC_OPS
)

15 
ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
);

18 
ngx_öt_t


19 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

21 
mtx
->
lock
 = &
addr
->lock;

23 i‡(
mtx
->
•ö
 =(
ngx_uöt_t
) -1) {

24  
NGX_OK
;

27 
mtx
->
•ö
 = 2048;

29 #i‡(
NGX_HAVE_POSIX_SEM
)

31 
mtx
->
waô
 = &
addr
->wait;

33 i‡(
	`£m_öô
(&
mtx
->
£m
, 1, 0) == -1) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

37 
mtx
->
£m≠h‹e
 = 1;

42  
NGX_OK
;

43 
	}
}

47 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

49 #i‡(
NGX_HAVE_POSIX_SEM
)

51 i‡(
mtx
->
£m≠h‹e
) {

52 i‡(
	`£m_de°roy
(&
mtx
->
£m
) == -1) {

53 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

59 
	}
}

62 
ngx_uöt_t


63 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

65  (*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
));

66 
	}
}

70 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

72 
ngx_uöt_t
 
i
, 
n
;

74 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtxÜock");

78 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

82 i‡(
ngx_n˝u
 > 1) {

84 
n
 = 1;Ç < 
mtx
->
•ö
;Ç <<= 1) {

86 
i
 = 0; i < 
n
; i++) {

87 
	`ngx_˝u_∑u£
();

90 i‡(*
mtx
->
lock
 == 0

91 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 0, 
ngx_pid
))

98 #i‡(
NGX_HAVE_POSIX_SEM
)

100 i‡(
mtx
->
£m≠h‹e
) {

101 (Ë
	`ngx_©omic_„tch_add
(
mtx
->
waô
, 1);

103 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

107 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

108 "shmtx waô %uA", *
mtx
->
waô
);

110 
	`£m_waô
(&
mtx
->
£m
) == -1) {

111 
ngx_îr_t
 
îr
;

113 
îr
 = 
ngx_î∫o
;

115 i‡(
îr
 !
NGX_EINTR
) {

116 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

122 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

130 
	`ngx_sched_yõld
();

132 
	}
}

136 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

138 i‡(
mtx
->
•ö
 !(
ngx_uöt_t
) -1) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtx unlock");

142 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
ngx_pid
, 0)) {

143 
	`ngx_shmtx_wakeup
(
mtx
);

145 
	}
}

148 
ngx_uöt_t


149 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

151 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

154 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
pid
, 0)) {

155 
	`ngx_shmtx_wakeup
(
mtx
);

160 
	}
}

164 
	$ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
)

166 #i‡(
NGX_HAVE_POSIX_SEM
)

167 
ngx_©omic_uöt_t
 
waô
;

169 i‡(!
mtx
->
£m≠h‹e
) {

175 
waô
 = *
mtx
->wait;

177 i‡(
waô
 == 0) {

181 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
waô
, wait, wait - 1)) {

186 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

187 "shmtx wakê%uA", 
waô
);

189 i‡(
	`£m_po°
(&
mtx
->
£m
) == -1) {

190 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

195 
	}
}

201 
ngx_öt_t


202 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

204 i‡(
mtx
->
«me
) {

206 i‡(
	`ngx_°rcmp
(
«me
, 
mtx
->name) == 0) {

207 
mtx
->
«me
 =Çame;

208  
NGX_OK
;

211 
	`ngx_shmtx_de°roy
(
mtx
);

214 
mtx
->
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

215 
NGX_FILE_DEFAULT_ACCESS
);

217 i‡(
mtx
->
fd
 =
NGX_INVALID_FILE
) {

218 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

219 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

220  
NGX_ERROR
;

223 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

224 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

225 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

228 
mtx
->
«me
 =Çame;

230  
NGX_OK
;

231 
	}
}

235 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

237 i‡(
	`ngx_˛o£_fûe
(
mtx
->
fd
Ë=
NGX_FILE_ERROR
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

239 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
mtx
->
«me
);

241 
	}
}

244 
ngx_uöt_t


245 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

247 
ngx_îr_t
 
îr
;

249 
îr
 = 
	`ngx_åylock_fd
(
mtx
->
fd
);

251 i‡(
îr
 == 0) {

255 i‡(
îr
 =
NGX_EAGAIN
) {

259 #i‡
__osf__


261 i‡(
îr
 =
NGX_EACCESS
) {

267 
	`ngx_log_ab‹t
(
îr
, 
ngx_åylock_fd_n
 " %†Áûed", 
mtx
->
«me
);

270 
	}
}

274 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

276 
ngx_îr_t
 
îr
;

278 
îr
 = 
	`ngx_lock_fd
(
mtx
->
fd
);

280 i‡(
îr
 == 0) {

284 
	`ngx_log_ab‹t
(
îr
, 
ngx_lock_fd_n
 " %†Áûed", 
mtx
->
«me
);

285 
	}
}

289 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

291 
ngx_îr_t
 
îr
;

293 
îr
 = 
	`ngx_u∆ock_fd
(
mtx
->
fd
);

295 i‡(
îr
 == 0) {

299 
	`ngx_log_ab‹t
(
îr
, 
ngx_u∆ock_fd_n
 " %†Áûed", 
mtx
->
«me
);

300 
	}
}

303 
ngx_uöt_t


304 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

307 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_shmtx.h

8 #i‚de‡
_NGX_SHMTX_H_INCLUDED_


9 
	#_NGX_SHMTX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
ngx_©omic_t
 
	mlock
;

18 #i‡(
NGX_HAVE_POSIX_SEM
)

19 
ngx_©omic_t
 
	mwaô
;

21 } 
	tngx_shmtx_sh_t
;

25 #i‡(
NGX_HAVE_ATOMIC_OPS
)

26 
ngx_©omic_t
 *
	mlock
;

27 #i‡(
NGX_HAVE_POSIX_SEM
)

28 
ngx_©omic_t
 *
	mwaô
;

29 
ngx_uöt_t
 
	m£m≠h‹e
;

30 
£m_t
 
	m£m
;

33 
ngx_fd_t
 
	mfd
;

34 
u_ch¨
 *
	m«me
;

36 
ngx_uöt_t
 
	m•ö
;

37 } 
	tngx_shmtx_t
;

40 
ngx_öt_t
 
ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
,

41 
u_ch¨
 *
«me
);

42 
ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
);

43 
ngx_uöt_t
 
ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
);

44 
ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
);

45 
ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
);

46 
ngx_uöt_t
 
ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_slab.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
	#NGX_SLAB_PAGE_MASK
 3

	)

12 
	#NGX_SLAB_PAGE
 0

	)

13 
	#NGX_SLAB_BIG
 1

	)

14 
	#NGX_SLAB_EXACT
 2

	)

15 
	#NGX_SLAB_SMALL
 3

	)

17 #i‡(
NGX_PTR_SIZE
 == 4)

19 
	#NGX_SLAB_PAGE_FREE
 0

	)

20 
	#NGX_SLAB_PAGE_BUSY
 0xffffffff

	)

21 
	#NGX_SLAB_PAGE_START
 0x80000000

	)

23 
	#NGX_SLAB_SHIFT_MASK
 0x0000000f

	)

24 
	#NGX_SLAB_MAP_MASK
 0xffff0000

	)

25 
	#NGX_SLAB_MAP_SHIFT
 16

	)

27 
	#NGX_SLAB_BUSY
 0xffffffff

	)

31 
	#NGX_SLAB_PAGE_FREE
 0

	)

32 
	#NGX_SLAB_PAGE_BUSY
 0xffffffffffffffff

	)

33 
	#NGX_SLAB_PAGE_START
 0x8000000000000000

	)

35 
	#NGX_SLAB_SHIFT_MASK
 0x000000000000000f

	)

36 
	#NGX_SLAB_MAP_MASK
 0xffffffff00000000

	)

37 
	#NGX_SLAB_MAP_SHIFT
 32

	)

39 
	#NGX_SLAB_BUSY
 0xffffffffffffffff

	)

44 #i‡(
NGX_DEBUG_MALLOC
)

46 
	#ngx_¶ab_junk
(
p
, 
size
Ë
	`ngx_mem£t
’, 0xA5, size)

	)

48 #ñi‡(
NGX_HAVE_DEBUG_MALLOC
)

50 
	#ngx_¶ab_junk
(
p
, 
size
) \

51 i‡(
ngx_debug_mÆloc
Ë
	`ngx_mem£t
(
p
, 0xA5, 
size
)

	)

55 
	#ngx_¶ab_junk
(
p
, 
size
)

	)

59 
ngx_¶ab_∑ge_t
 *
ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
,

60 
ngx_uöt_t
 
∑ges
);

61 
ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

62 
ngx_uöt_t
 
∑ges
);

63 
ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
,

64 *
ãxt
);

67 
ngx_uöt_t
 
	gngx_¶ab_max_size
;

68 
ngx_uöt_t
 
	gngx_¶ab_exa˘_size
;

69 
ngx_uöt_t
 
	gngx_¶ab_exa˘_shi·
;

73 
	$ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
)

75 
u_ch¨
 *
p
;

76 
size_t
 
size
;

77 
ngx_öt_t
 
m
;

78 
ngx_uöt_t
 
i
, 
n
, 
∑ges
;

79 
ngx_¶ab_∑ge_t
 *
¶Ÿs
;

82 i‡(
ngx_¶ab_max_size
 == 0) {

83 
ngx_¶ab_max_size
 = 
ngx_∑gesize
 / 2;

84 
ngx_¶ab_exa˘_size
 = 
ngx_∑gesize
 / (8 * (
uöçå_t
));

85 
n
 = 
ngx_¶ab_exa˘_size
;Ç >>1; 
ngx_¶ab_exa˘_shi·
++) {

91 
poﬁ
->
mö_size
 = 1 <<Öoﬁ->
mö_shi·
;

93 
p
 = (
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
);

94 
size
 = 
poﬁ
->
íd
 - 
p
;

96 
	`ngx_¶ab_junk
(
p
, 
size
);

98 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

99 
n
 = 
ngx_∑gesize_shi·
 - 
poﬁ
->
mö_shi·
;

101 
i
 = 0; i < 
n
; i++) {

102 
¶Ÿs
[
i
].
¶ab
 = 0;

103 
¶Ÿs
[
i
].
√xt
 = &slots[i];

104 
¶Ÿs
[
i
].
¥ev
 = 0;

107 
p
 +
n
 * (
ngx_¶ab_∑ge_t
);

109 
∑ges
 = (
ngx_uöt_t
Ë(
size
 / (
ngx_∑gesize
 + (
ngx_¶ab_∑ge_t
)));

111 
	`ngx_memzîo
(
p
, 
∑ges
 * (
ngx_¶ab_∑ge_t
));

113 
poﬁ
->
∑ges
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

115 
poﬁ
->
‰ì
.
¥ev
 = 0;

116 
poﬁ
->
‰ì
.
√xt
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

118 
poﬁ
->
∑ges
->
¶ab
 =Öages;

119 
poﬁ
->
∑ges
->
√xt
 = &poﬁ->
‰ì
;

120 
poﬁ
->
∑ges
->
¥ev
 = (
uöçå_t
Ë&poﬁ->
‰ì
;

122 
poﬁ
->
°¨t
 = (
u_ch¨
 *)

123 
	`ngx_Æign_±r
((
uöçå_t
Ë
p
 + 
∑ges
 * (
ngx_¶ab_∑ge_t
),

124 
ngx_∑gesize
);

126 
m
 = 
∑ges
 - (
poﬁ
->
íd
 -Öoﬁ->
°¨t
Ë/ 
ngx_∑gesize
;

127 i‡(
m
 > 0) {

128 
∑ges
 -
m
;

129 
poﬁ
->
∑ges
->
¶ab
 =Öages;

132 
poﬁ
->
log_nomem
 = 1;

133 
poﬁ
->
log_˘x
 = &poﬁ->
zîo
;

134 
poﬁ
->
zîo
 = '\0';

135 
	}
}

139 
	$ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

141 *
p
;

143 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

145 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

147 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

149  
p
;

150 
	}
}

154 
	$ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

156 
size_t
 
s
;

157 
uöçå_t
 
p
, 
n
, 
m
, 
mask
, *
bôm≠
;

158 
ngx_uöt_t
 
i
, 
¶Ÿ
, 
shi·
, 
m≠
;

159 
ngx_¶ab_∑ge_t
 *
∑ge
, *
¥ev
, *
¶Ÿs
;

161 i‡(
size
 >
ngx_¶ab_max_size
) {

163 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

164 "¶abáŒoc: %uz", 
size
);

166 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, (
size
 >> 
ngx_∑gesize_shi·
)

167 + ((
size
 % 
ngx_∑gesize
) ? 1 : 0));

168 i‡(
∑ge
) {

169 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

170 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

173 
p
 = 0;

176 
d⁄e
;

179 i‡(
size
 > 
poﬁ
->
mö_size
) {

180 
shi·
 = 1;

181 
s
 = 
size
 - 1; s >>1; 
shi·
++) { }

182 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

185 
size
 = 
poﬁ
->
mö_size
;

186 
shi·
 = 
poﬁ
->
mö_shi·
;

187 
¶Ÿ
 = 0;

190 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

191 "¶abáŒoc: %uz slŸ: %ui", 
size
, 
¶Ÿ
);

193 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

194 
∑ge
 = 
¶Ÿs
[
¶Ÿ
].
√xt
;

196 i‡(
∑ge
->
√xt
 !=Öage) {

198 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

201 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

202 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

204 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
))

205 / ((
uöçå_t
) * 8);

207 
n
 = 0;Ç < 
m≠
;Ç++) {

209 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

211 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

212 i‡((
bôm≠
[
n
] & 
m
)) {

216 
bôm≠
[
n
] |
m
;

218 
i
 = ((
n
 * (
uöçå_t
Ë* 8Ë<< 
shi·
)

219 + (
i
 << 
shi·
);

221 i‡(
bôm≠
[
n
] =
NGX_SLAB_BUSY
) {

222 
n
 =Ç + 1;Ç < 
m≠
;Ç++) {

223 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

224 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

226 
d⁄e
;

230 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

231 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

232 
¥ev
->
√xt
 = 
∑ge
->next;

233 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

235 
∑ge
->
√xt
 = 
NULL
;

236 
∑ge
->
¥ev
 = 
NGX_SLAB_SMALL
;

239 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

241 
d⁄e
;

246 
∑ge
 =Öage->
√xt
;

248 } 
∑ge
);

250 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

253 i‡(
∑ge
->
¶ab
 !
NGX_SLAB_BUSY
) {

255 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

256 i‡((
∑ge
->
¶ab
 & 
m
)) {

260 
∑ge
->
¶ab
 |
m
;

262 i‡(
∑ge
->
¶ab
 =
NGX_SLAB_BUSY
) {

263 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

264 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

265 
¥ev
->
√xt
 = 
∑ge
->next;

266 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

268 
∑ge
->
√xt
 = 
NULL
;

269 
∑ge
->
¥ev
 = 
NGX_SLAB_EXACT
;

272 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

273 
p
 +
i
 << 
shi·
;

274 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

276 
d⁄e
;

280 
∑ge
 =Öage->
√xt
;

282 } 
∑ge
);

286 
n
 = 
ngx_∑gesize_shi·
 - (
∑ge
->
¶ab
 & 
NGX_SLAB_SHIFT_MASK
);

287 
n
 = 1 <<Ç;

288 
n
 = ((
uöçå_t
) 1 <<Ç) - 1;

289 
mask
 = 
n
 << 
NGX_SLAB_MAP_SHIFT
;

292 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë!
mask
) {

294 
m
 = (
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
, 
i
 = 0;

295 
m
 & 
mask
;

296 
m
 <<1, 
i
++)

298 i‡((
∑ge
->
¶ab
 & 
m
)) {

302 
∑ge
->
¶ab
 |
m
;

304 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë=
mask
) {

305 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

306 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

307 
¥ev
->
√xt
 = 
∑ge
->next;

308 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

310 
∑ge
->
√xt
 = 
NULL
;

311 
∑ge
->
¥ev
 = 
NGX_SLAB_BIG
;

314 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

315 
p
 +
i
 << 
shi·
;

316 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

318 
d⁄e
;

322 
∑ge
 =Öage->
√xt
;

324 } 
∑ge
);

328 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, 1);

330 i‡(
∑ge
) {

331 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

332 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

333 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

335 
s
 = 1 << 
shi·
;

336 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ 8 / 
s
;

338 i‡(
n
 == 0) {

339 
n
 = 1;

342 
bôm≠
[0] = (2 << 
n
) - 1;

344 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

346 
i
 = 1; i < 
m≠
; i++) {

347 
bôm≠
[
i
] = 0;

350 
∑ge
->
¶ab
 = 
shi·
;

351 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

352 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

354 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

356 
p
 = ((
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
Ë+ 
s
 * 
n
;

357 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

359 
d⁄e
;

361 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

363 
∑ge
->
¶ab
 = 1;

364 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

365 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

367 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

369 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

370 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

372 
d⁄e
;

376 
∑ge
->
¶ab
 = ((
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
Ë| 
shi·
;

377 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

378 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

380 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

382 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

383 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

385 
d⁄e
;

389 
p
 = 0;

391 
d⁄e
:

393 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶abáŒoc: %p", 
p
);

395  (*Ë
p
;

396 
	}
}

400 
	$ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

402 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

404 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
p
);

406 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

407 
	}
}

411 
	$ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

413 
size_t
 
size
;

414 
uöçå_t
 
¶ab
, 
m
, *
bôm≠
;

415 
ngx_uöt_t
 
n
, 
ty≥
, 
¶Ÿ
, 
shi·
, 
m≠
;

416 
ngx_¶ab_∑ge_t
 *
¶Ÿs
, *
∑ge
;

418 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶ab fªe: %p", 
p
);

420 i‡((
u_ch¨
 *Ë
p
 < 
poﬁ
->
°¨t
 || (u_ch¨ *Ë∞>Öoﬁ->
íd
) {

421 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
, "ngx_slab_free(): outside ofÖool");

422 
Áû
;

425 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

426 
∑ge
 = &
poﬁ
->
∑ges
[
n
];

427 
¶ab
 = 
∑ge
->slab;

428 
ty≥
 = 
∑ge
->
¥ev
 & 
NGX_SLAB_PAGE_MASK
;

430 
ty≥
) {

432 
NGX_SLAB_SMALL
:

434 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

435 
size
 = 1 << 
shi·
;

437 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

438 
wr⁄g_chunk
;

441 
n
 = ((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
;

442 
m
 = (
uöçå_t
Ë1 << (
n
 & ((uintptr_t) * 8 - 1));

443 
n
 /((
uöçå_t
) * 8);

444 
bôm≠
 = (
uöçå_t
 *)

445 ((
uöçå_t
Ë
p
 & ~((uöçå_tË
ngx_∑gesize
 - 1));

447 i‡(
bôm≠
[
n
] & 
m
) {

449 i‡(
∑ge
->
√xt
 =
NULL
) {

450 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

451 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

452 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

454 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

455 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

457 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

458 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_SMALL
;

461 
bôm≠
[
n
] &~
m
;

463 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)) / 8 / (1 << shift);

465 i‡(
n
 == 0) {

466 
n
 = 1;

469 i‡(
bôm≠
[0] & ~(((
uöçå_t
Ë1 << 
n
) - 1)) {

470 
d⁄e
;

473 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

475 
n
 = 1;Ç < 
m≠
;Ç++) {

476 i‡(
bôm≠
[
n
]) {

477 
d⁄e
;

481 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

483 
d⁄e
;

486 
chunk_Æªady_‰ì
;

488 
NGX_SLAB_EXACT
:

490 
m
 = (
uöçå_t
) 1 <<

491 (((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
ngx_¶ab_exa˘_shi·
);

492 
size
 = 
ngx_¶ab_exa˘_size
;

494 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

495 
wr⁄g_chunk
;

498 i‡(
¶ab
 & 
m
) {

499 i‡(
¶ab
 =
NGX_SLAB_BUSY
) {

500 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

501 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

502 
¶Ÿ
 = 
ngx_¶ab_exa˘_shi·
 - 
poﬁ
->
mö_shi·
;

504 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

505 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

507 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

508 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_EXACT
;

511 
∑ge
->
¶ab
 &~
m
;

513 i‡(
∑ge
->
¶ab
) {

514 
d⁄e
;

517 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

519 
d⁄e
;

522 
chunk_Æªady_‰ì
;

524 
NGX_SLAB_BIG
:

526 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

527 
size
 = 1 << 
shi·
;

529 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

530 
wr⁄g_chunk
;

533 
m
 = (
uöçå_t
Ë1 << ((((uöçå_tË
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
)

534 + 
NGX_SLAB_MAP_SHIFT
);

536 i‡(
¶ab
 & 
m
) {

538 i‡(
∑ge
->
√xt
 =
NULL
) {

539 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

540 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

541 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

543 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

544 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

546 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

547 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_BIG
;

550 
∑ge
->
¶ab
 &~
m
;

552 i‡(
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
) {

553 
d⁄e
;

556 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

558 
d⁄e
;

561 
chunk_Æªady_‰ì
;

563 
NGX_SLAB_PAGE
:

565 i‡((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)) {

566 
wr⁄g_chunk
;

569 i‡(
¶ab
 =
NGX_SLAB_PAGE_FREE
) {

570 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

572 
Áû
;

575 i‡(
¶ab
 =
NGX_SLAB_PAGE_BUSY
) {

576 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

578 
Áû
;

581 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

582 
size
 = 
¶ab
 & ~
NGX_SLAB_PAGE_START
;

584 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, &poﬁ->
∑ges
[
n
], 
size
);

586 
	`ngx_¶ab_junk
(
p
, 
size
 << 
ngx_∑gesize_shi·
);

595 
d⁄e
:

597 
	`ngx_¶ab_junk
(
p
, 
size
);

601 
wr⁄g_chunk
:

603 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

606 
Áû
;

608 
chunk_Æªady_‰ì
:

610 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

613 
Áû
:

616 
	}
}

619 
ngx_¶ab_∑ge_t
 *

620 
	$ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
∑ges
)

622 
ngx_¶ab_∑ge_t
 *
∑ge
, *
p
;

624 
∑ge
 = 
poﬁ
->
‰ì
.
√xt
;Öage != &pool->free;Öage =Öage->next) {

626 i‡(
∑ge
->
¶ab
 >
∑ges
) {

628 i‡(
∑ge
->
¶ab
 > 
∑ges
) {

629 
∑ge
[
∑ges
].
¶ab
 =Öage->slab -Öages;

630 
∑ge
[
∑ges
].
√xt
 =Öage->next;

631 
∑ge
[
∑ges
].
¥ev
 =Öage->prev;

633 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

634 
p
->
√xt
 = &
∑ge
[
∑ges
];

635 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

638 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

639 
p
->
√xt
 = 
∑ge
->next;

640 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

643 
∑ge
->
¶ab
 = 
∑ges
 | 
NGX_SLAB_PAGE_START
;

644 
∑ge
->
√xt
 = 
NULL
;

645 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

647 i‡(--
∑ges
 == 0) {

648  
∑ge
;

651 
p
 = 
∑ge
 + 1; 
∑ges
;Öages--) {

652 
p
->
¶ab
 = 
NGX_SLAB_PAGE_BUSY
;

653 
p
->
√xt
 = 
NULL
;

654 
p
->
¥ev
 = 
NGX_SLAB_PAGE
;

655 
p
++;

658  
∑ge
;

662 i‡(
poﬁ
->
log_nomem
) {

663 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_CRIT
,

667  
NULL
;

668 
	}
}

672 
	$ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

673 
ngx_uöt_t
 
∑ges
)

675 
ngx_¶ab_∑ge_t
 *
¥ev
;

677 
∑ge
->
¶ab
 = 
∑ges
--;

679 i‡(
∑ges
) {

680 
	`ngx_memzîo
(&
∑ge
[1], 
∑ges
 * (
ngx_¶ab_∑ge_t
));

683 i‡(
∑ge
->
√xt
) {

684 
¥ev
 = (
ngx_¶ab_∑ge_t
 *Ë(
∑ge
->¥ev & ~
NGX_SLAB_PAGE_MASK
);

685 
¥ev
->
√xt
 = 
∑ge
->next;

686 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

689 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
poﬁ
->
‰ì
;

690 
∑ge
->
√xt
 = 
poﬁ
->
‰ì
.next;

692 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
)Öage;

694 
poﬁ
->
‰ì
.
√xt
 = 
∑ge
;

695 
	}
}

699 
	$ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
, *
ãxt
)

701 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 0, "%s%s", 
ãxt
, 
poﬁ
->
log_˘x
);

702 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_slab.h

8 #i‚de‡
_NGX_SLAB_H_INCLUDED_


9 
	#_NGX_SLAB_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_¶ab_∑ge_s
 
	tngx_¶ab_∑ge_t
;

18 
	sngx_¶ab_∑ge_s
 {

19 
uöçå_t
 
	m¶ab
;

20 
ngx_¶ab_∑ge_t
 *
	m√xt
;

21 
uöçå_t
 
	m¥ev
;

26 
ngx_shmtx_sh_t
 
	mlock
;

28 
size_t
 
	mmö_size
;

29 
size_t
 
	mmö_shi·
;

31 
ngx_¶ab_∑ge_t
 *
	m∑ges
;

32 
ngx_¶ab_∑ge_t
 
	m‰ì
;

34 
u_ch¨
 *
	m°¨t
;

35 
u_ch¨
 *
	míd
;

37 
ngx_shmtx_t
 
	mmuãx
;

39 
u_ch¨
 *
	mlog_˘x
;

40 
u_ch¨
 
	mzîo
;

42 
	mlog_nomem
:1;

44 *
	md©a
;

45 *
	maddr
;

46 } 
	tngx_¶ab_poﬁ_t
;

49 
ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
);

50 *
ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

51 *
ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

52 
ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

53 
ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_spinlock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
)

16 #i‡(
NGX_HAVE_ATOMIC_OPS
)

18 
ngx_uöt_t
 
i
, 
n
;

22 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

26 i‡(
ngx_n˝u
 > 1) {

28 
n
 = 1;Ç < 
•ö
;Ç <<= 1) {

30 
i
 = 0; i < 
n
; i++) {

31 
	`ngx_˝u_∑u£
();

34 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

40 
	`ngx_sched_yõld
();

45 #i‡(
NGX_THREADS
)

47 #îr‹ 
	`ngx_•ölock
(Ë
‹
 
	`ngx_©omic_cmp_£t
(Ë
¨e
 
nŸ
 
deföed
 !

53 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_string.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *
ngx_•rötf_num
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
,

13 
u_ch¨
 
zîo
, 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
);

14 
ngx_ícode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

15 c⁄° 
u_ch¨
 *
basis
, 
ngx_uöt_t
 
∑ddög
);

16 
ngx_öt_t
 
ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

17 c⁄° 
u_ch¨
 *
basis
);

21 
	$ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

23 
n
) {

24 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

25 
d°
++;

26 
§c
++;

27 
n
--;

29 
	}
}

32 
u_ch¨
 *

33 
	$ngx_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

35 i‡(
n
 == 0) {

36  
d°
;

39 --
n
) {

40 *
d°
 = *
§c
;

42 i‡(*
d°
 == '\0') {

43  
d°
;

46 
d°
++;

47 
§c
++;

50 *
d°
 = '\0';

52  
d°
;

53 
	}
}

56 
u_ch¨
 *

57 
	$ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
)

59 
u_ch¨
 *
d°
;

61 
d°
 = 
	`ngx_≤Æloc
(
poﬁ
, 
§c
->
Àn
);

62 i‡(
d°
 =
NULL
) {

63  
NULL
;

66 
	`ngx_mem˝y
(
d°
, 
§c
->
d©a
, src->
Àn
);

68  
d°
;

69 
	}
}

104 
u_ch¨
 * 
ngx_cde˛


105 
	$ngx_•rötf
(
u_ch¨
 *
buf
, c⁄° *
fmt
, ...)

107 
u_ch¨
 *
p
;

108 
va_li°
 
¨gs
;

110 
	`va_°¨t
(
¨gs
, 
fmt
);

111 
p
 = 
	`ngx_v¶¥ötf
(
buf
, (*Ë-1, 
fmt
, 
¨gs
);

112 
	`va_íd
(
¨gs
);

114  
p
;

115 
	}
}

118 
u_ch¨
 * 
ngx_cde˛


119 
	$ngx_¢¥ötf
(
u_ch¨
 *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...)

121 
u_ch¨
 *
p
;

122 
va_li°
 
¨gs
;

124 
	`va_°¨t
(
¨gs
, 
fmt
);

125 
p
 = 
	`ngx_v¶¥ötf
(
buf
, bu‡+ 
max
, 
fmt
, 
¨gs
);

126 
	`va_íd
(
¨gs
);

128  
p
;

129 
	}
}

132 
u_ch¨
 * 
ngx_cde˛


133 
	$ngx_¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, ...)

135 
u_ch¨
 *
p
;

136 
va_li°
 
¨gs
;

138 
	`va_°¨t
(
¨gs
, 
fmt
);

139 
p
 = 
	`ngx_v¶¥ötf
(
buf
, 
œ°
, 
fmt
, 
¨gs
);

140 
	`va_íd
(
¨gs
);

142  
p
;

143 
	}
}

146 
u_ch¨
 *

147 
	$ngx_v¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

149 
u_ch¨
 *
p
, 
zîo
;

150 
d
;

151 
f
;

152 
size_t
 
Àn
, 
¶í
;

153 
öt64_t
 
i64
;

154 
uöt64_t
 
ui64
, 
‰ac
;

155 
ngx_m£c_t
 
ms
;

156 
ngx_uöt_t
 
width
, 
sign
, 
hex
, 
max_width
, 
‰ac_width
, 
sˇÀ
, 
n
;

157 
ngx_°r_t
 *
v
;

158 
ngx_v¨übÀ_vÆue_t
 *
vv
;

160 *
fmt
 && 
buf
 < 
œ°
) {

167 i‡(*
fmt
 == '%') {

169 
i64
 = 0;

170 
ui64
 = 0;

172 
zîo
 = (
u_ch¨
Ë((*++
fmt
 == '0') ? '0' : ' ');

173 
width
 = 0;

174 
sign
 = 1;

175 
hex
 = 0;

176 
max_width
 = 0;

177 
‰ac_width
 = 0;

178 
¶í
 = (
size_t
) -1;

180 *
fmt
 >= '0' && *fmt <= '9') {

181 
width
 = width * 10 + *
fmt
++ - '0';

186 *
fmt
) {

189 
sign
 = 0;

190 
fmt
++;

194 
max_width
 = 1;

195 
fmt
++;

199 
hex
 = 2;

200 
sign
 = 0;

201 
fmt
++;

205 
hex
 = 1;

206 
sign
 = 0;

207 
fmt
++;

211 
fmt
++;

213 *
fmt
 >= '0' && *fmt <= '9') {

214 
‰ac_width
 = føc_width * 10 + *
fmt
++ - '0';

220 
¶í
 = 
	`va_¨g
(
¨gs
, 
size_t
);

221 
fmt
++;

232 *
fmt
) {

235 
v
 = 
	`va_¨g
(
¨gs
, 
ngx_°r_t
 *);

237 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
v
->len);

238 
buf
 = 
	`ngx_˝ymem
(buf, 
v
->
d©a
, 
Àn
);

239 
fmt
++;

244 
vv
 = 
	`va_¨g
(
¨gs
, 
ngx_v¨übÀ_vÆue_t
 *);

246 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
vv
->len);

247 
buf
 = 
	`ngx_˝ymem
(buf, 
vv
->
d©a
, 
Àn
);

248 
fmt
++;

253 
p
 = 
	`va_¨g
(
¨gs
, 
u_ch¨
 *);

255 i‡(
¶í
 =(
size_t
) -1) {

256 *
p
 && 
buf
 < 
œ°
) {

257 *
buf
++ = *
p
++;

261 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
¶í
);

262 
buf
 = 
	`ngx_˝ymem
(buf, 
p
, 
Àn
);

265 
fmt
++;

270 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
off_t
);

271 
sign
 = 1;

275 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_pid_t
);

276 
sign
 = 1;

280 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
time_t
);

281 
sign
 = 1;

285 
ms
 = (
ngx_m£c_t
Ë
	`va_¨g
(
¨gs
,Çgx_msec_t);

286 i‡((
ngx_m£c_öt_t
Ë
ms
 == -1) {

287 
sign
 = 1;

288 
i64
 = -1;

290 
sign
 = 0;

291 
ui64
 = (
uöt64_t
Ë
ms
;

296 i‡(
sign
) {

297 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ssize_t
);

299 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
size_t
);

304 i‡(
sign
) {

305 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_öt_t
);

307 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_uöt_t
);

310 i‡(
max_width
) {

311 
width
 = 
NGX_INT_T_LEN
;

317 i‡(
sign
) {

318 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

320 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_öt
);

325 i‡(
sign
) {

326 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

328 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_l⁄g
);

333 i‡(
sign
) {

334 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
öt32_t
);

336 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
uöt32_t
);

341 i‡(
sign
) {

342 
i64
 = 
	`va_¨g
(
¨gs
, 
öt64_t
);

344 
ui64
 = 
	`va_¨g
(
¨gs
, 
uöt64_t
);

349 i‡(
sign
) {

350 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_öt_t
);

352 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_uöt_t
);

355 i‡(
max_width
) {

356 
width
 = 
NGX_ATOMIC_T_LEN
;

362 
f
 = 
	`va_¨g
(
¨gs
, );

364 i‡(
f
 < 0) {

365 *
buf
++ = '-';

366 
f
 = -f;

369 
ui64
 = (
öt64_t
Ë
f
;

370 
‰ac
 = 0;

372 i‡(
‰ac_width
) {

374 
sˇÀ
 = 1;

375 
n
 = 
‰ac_width
;Ç;Ç--) {

376 
sˇÀ
 *= 10;

379 
‰ac
 = (
uöt64_t
Ë((
f
 - (Ë
ui64
Ë* 
sˇÀ
 + 0.5);

381 i‡(
‰ac
 =
sˇÀ
) {

382 
ui64
++;

383 
‰ac
 = 0;

387 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 0, 
width
);

389 i‡(
‰ac_width
) {

390 i‡(
buf
 < 
œ°
) {

391 *
buf
++ = '.';

394 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
‰ac
, '0', 0, 
‰ac_width
);

397 
fmt
++;

401 #i‡!(
NGX_WIN32
)

403 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
æim_t
);

404 
sign
 = 1;

409 
ui64
 = (
uöçå_t
Ë
	`va_¨g
(
¨gs
, *);

410 
hex
 = 2;

411 
sign
 = 0;

412 
zîo
 = '0';

413 
width
 = 
NGX_PTR_SIZE
 * 2;

417 
d
 = 
	`va_¨g
(
¨gs
, );

418 *
buf
++ = (
u_ch¨
Ë(
d
 & 0xff);

419 
fmt
++;

424 *
buf
++ = '\0';

425 
fmt
++;

430 #i‡(
NGX_WIN32
)

431 *
buf
++ = 
CR
;

433 *
buf
++ = 
LF
;

434 
fmt
++;

439 *
buf
++ = '%';

440 
fmt
++;

445 *
buf
++ = *
fmt
++;

450 i‡(
sign
) {

451 i‡(
i64
 < 0) {

452 *
buf
++ = '-';

453 
ui64
 = (
uöt64_t
Ë-
i64
;

456 
ui64
 = (
uöt64_t
Ë
i64
;

460 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 
hex
, 
width
);

462 
fmt
++;

465 *
buf
++ = *
fmt
++;

469  
buf
;

470 
	}
}

473 
u_ch¨
 *

474 
	$ngx_•rötf_num
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
, u_ch¨ 
zîo
,

475 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
)

477 
u_ch¨
 *
p
, 
ãmp
[
NGX_INT64_LEN
 + 1];

482 
size_t
 
Àn
;

483 
uöt32_t
 
ui32
;

484 
u_ch¨
 
hex
[] = "0123456789abcdef";

485 
u_ch¨
 
HEX
[] = "0123456789ABCDEF";

487 
p
 = 
ãmp
 + 
NGX_INT64_LEN
;

489 i‡(
hexadecimÆ
 == 0) {

491 i‡(
ui64
 <(
uöt64_t
Ë
NGX_MAX_UINT32_VALUE
) {

508 
ui32
 = (
uöt32_t
Ë
ui64
;

511 *--
p
 = (
u_ch¨
Ë(
ui32
 % 10 + '0');

512 } 
ui32
 /= 10);

516 *--
p
 = (
u_ch¨
Ë(
ui64
 % 10 + '0');

517 } 
ui64
 /= 10);

520 } i‡(
hexadecimÆ
 == 1) {

525 *--
p
 = 
hex
[(
uöt32_t
Ë(
ui64
 & 0xf)];

527 } 
ui64
 >>= 4);

534 *--
p
 = 
HEX
[(
uöt32_t
Ë(
ui64
 & 0xf)];

536 } 
ui64
 >>= 4);

541 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

543 
Àn
++ < 
width
 && 
buf
 < 
œ°
) {

544 *
buf
++ = 
zîo
;

549 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

551 i‡(
buf
 + 
Àn
 > 
œ°
) {

552 
Àn
 = 
œ°
 - 
buf
;

555  
	`ngx_˝ymem
(
buf
, 
p
, 
Àn
);

556 
	}
}

566 
ngx_öt_t


567 
	$ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

569 
ngx_uöt_t
 
c1
, 
c2
;

572 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

573 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

575 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

576 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

578 i‡(
c1
 =
c2
) {

580 i‡(
c1
) {

587  
c1
 - 
c2
;

589 
	}
}

592 
ngx_öt_t


593 
	$ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

595 
ngx_uöt_t
 
c1
, 
c2
;

597 
n
) {

598 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

599 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

601 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

602 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

604 i‡(
c1
 =
c2
) {

606 i‡(
c1
) {

607 
n
--;

614  
c1
 - 
c2
;

618 
	}
}

621 
u_ch¨
 *

622 
	$ngx_°∫°r
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
Àn
)

624 
u_ch¨
 
c1
, 
c2
;

625 
size_t
 
n
;

627 
c2
 = *(
u_ch¨
 *Ë
s2
++;

629 
n
 = 
	`ngx_°æí
(
s2
);

633 i‡(
Àn
-- == 0) {

634  
NULL
;

637 
c1
 = *
s1
++;

639 i‡(
c1
 == 0) {

640  
NULL
;

643 } 
c1
 !
c2
);

645 i‡(
n
 > 
Àn
) {

646  
NULL
;

649 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

651  --
s1
;

652 
	}
}

661 
u_ch¨
 *

662 
	$ngx_°r°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

664 
u_ch¨
 
c1
, 
c2
;

666 
c2
 = *(
u_ch¨
 *Ë
s2
++;

670 
c1
 = *
s1
++;

672 i‡(
c1
 == 0) {

673  
NULL
;

676 } 
c1
 !
c2
);

678 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

680  --
s1
;

681 
	}
}

684 
u_ch¨
 *

685 
	$ngx_°rˇ£°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

687 
ngx_uöt_t
 
c1
, 
c2
;

689 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

690 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

694 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

696 i‡(
c1
 == 0) {

697  
NULL
;

700 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

702 } 
c1
 !
c2
);

704 } 
	`ngx_°∫ˇ£cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

706  --
s1
;

707 
	}
}

716 
u_ch¨
 *

717 
	$ngx_°æˇ£°∫
(
u_ch¨
 *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
)

719 
ngx_uöt_t
 
c1
, 
c2
;

721 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

722 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

723 
œ°
 -
n
;

727 i‡(
s1
 >
œ°
) {

728  
NULL
;

731 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

733 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

735 } 
c1
 !
c2
);

737 } 
	`ngx_°∫ˇ£cmp
(
s1
, 
s2
, 
n
) != 0);

739  --
s1
;

740 
	}
}

743 
ngx_öt_t


744 
	$ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

746 i‡(
n
 == 0) {

750 
n
--;

753 i‡(
s1
[
n
] !
s2
[n]) {

754  
s1
[
n
] - 
s2
[n];

757 i‡(
n
 == 0) {

761 
n
--;

763 
	}
}

766 
ngx_öt_t


767 
	$ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

769 
u_ch¨
 
c1
, 
c2
;

771 i‡(
n
 == 0) {

775 
n
--;

778 
c1
 = 
s1
[
n
];

779 i‡(
c1
 >= 'a' && c1 <= 'z') {

780 
c1
 -= 'a' - 'A';

783 
c2
 = 
s2
[
n
];

784 i‡(
c2
 >= 'a' && c2 <= 'z') {

785 
c2
 -= 'a' - 'A';

788 i‡(
c1
 !
c2
) {

789  
c1
 - 
c2
;

792 i‡(
n
 == 0) {

796 
n
--;

798 
	}
}

801 
ngx_öt_t


802 
	$ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
)

804 
size_t
 
n
;

805 
ngx_öt_t
 
m
, 
z
;

807 i‡(
n1
 <
n2
) {

808 
n
 = 
n1
;

809 
z
 = -1;

812 
n
 = 
n2
;

813 
z
 = 1;

816 
m
 = 
	`ngx_memcmp
(
s1
, 
s2
, 
n
);

818 i‡(
m
 || 
n1
 =
n2
) {

819  
m
;

822  
z
;

823 
	}
}

826 
ngx_öt_t


827 
	$ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

829 
ngx_uöt_t
 
c1
, 
c2
;

832 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

833 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

835 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

836 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

838 i‡(
c1
 =
c2
) {

840 i‡(
c1
) {

849 
c1
 = (c1 == '.') ? ' ' : c1;

850 
c2
 = (c2 == '.') ? ' ' : c2;

852  
c1
 - 
c2
;

854 
	}
}

857 
ngx_öt_t


858 
	$ngx_fûíame_cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

860 
ngx_uöt_t
 
c1
, 
c2
;

862 
n
) {

863 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

864 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

866 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

867 
c1
 = 
	`tﬁowî
(c1);

868 
c2
 = 
	`tﬁowî
(c2);

871 i‡(
c1
 =
c2
) {

873 i‡(
c1
) {

874 
n
--;

883 i‡(
c1
 =0 || 
c2
 == 0) {

884  
c1
 - 
c2
;

887 
c1
 = (c1 == '/') ? 0 : c1;

888 
c2
 = (c2 == '/') ? 0 : c2;

890  
c1
 - 
c2
;

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

900 
ngx_öt_t
 
vÆue
;

902 i‡(
n
 == 0) {

903  
NGX_ERROR
;

906 
vÆue
 = 0; 
n
--; 
löe
++) {

907 i‡(*
löe
 < '0' || *line > '9') {

908  
NGX_ERROR
;

911 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

914 i‡(
vÆue
 < 0) {

915  
NGX_ERROR
;

918  
vÆue
;

920 
	}
}

925 
ngx_öt_t


926 
	$ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
)

928 
ngx_öt_t
 
vÆue
;

929 
ngx_uöt_t
 
dŸ
;

931 i‡(
n
 == 0) {

932  
NGX_ERROR
;

935 
dŸ
 = 0;

937 
vÆue
 = 0; 
n
--; 
löe
++) {

939 i‡(
poöt
 == 0) {

940  
NGX_ERROR
;

943 i‡(*
löe
 == '.') {

944 i‡(
dŸ
) {

945  
NGX_ERROR
;

948 
dŸ
 = 1;

952 i‡(*
löe
 < '0' || *line > '9') {

953  
NGX_ERROR
;

956 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

957 
poöt
 -
dŸ
;

960 
poöt
--) {

961 
vÆue
 = value * 10;

964 i‡(
vÆue
 < 0) {

965  
NGX_ERROR
;

968  
vÆue
;

970 
	}
}

973 
ssize_t


974 
	$ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
)

976 
ssize_t
 
vÆue
;

978 i‡(
n
 == 0) {

979  
NGX_ERROR
;

982 
vÆue
 = 0; 
n
--; 
löe
++) {

983 i‡(*
löe
 < '0' || *line > '9') {

984  
NGX_ERROR
;

987 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

990 i‡(
vÆue
 < 0) {

991  
NGX_ERROR
;

994  
vÆue
;

996 
	}
}

999 
off_t


1000 
	$ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1002 
off_t
 
vÆue
;

1004 i‡(
n
 == 0) {

1005  
NGX_ERROR
;

1008 
vÆue
 = 0; 
n
--; 
löe
++) {

1009 i‡(*
löe
 < '0' || *line > '9') {

1010  
NGX_ERROR
;

1013 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1016 i‡(
vÆue
 < 0) {

1017  
NGX_ERROR
;

1020  
vÆue
;

1022 
	}
}

1025 
time_t


1026 
	$ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1028 
time_t
 
vÆue
;

1030 i‡(
n
 == 0) {

1031  
NGX_ERROR
;

1034 
vÆue
 = 0; 
n
--; 
löe
++) {

1035 i‡(*
löe
 < '0' || *line > '9') {

1036  
NGX_ERROR
;

1039 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1042 i‡(
vÆue
 < 0) {

1043  
NGX_ERROR
;

1046  
vÆue
;

1048 
	}
}

1051 
ngx_öt_t


1052 
	$ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1054 
u_ch¨
 
c
, 
ch
;

1055 
ngx_öt_t
 
vÆue
;

1057 i‡(
n
 == 0) {

1058  
NGX_ERROR
;

1061 
vÆue
 = 0; 
n
--; 
löe
++) {

1062 
ch
 = *
löe
;

1064 i‡(
ch
 >= '0' && ch <= '9') {

1065 
vÆue
 = vÆuê* 16 + (
ch
 - '0');

1069 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1071 i‡(
c
 >= 'a' && c <= 'f') {

1072 
vÆue
 = vÆuê* 16 + (
c
 - 'a' + 10);

1076  
NGX_ERROR
;

1079 i‡(
vÆue
 < 0) {

1080  
NGX_ERROR
;

1083  
vÆue
;

1085 
	}
}

1088 
u_ch¨
 *

1089 
	$ngx_hex_dump
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

1091 
u_ch¨
 
hex
[] = "0123456789abcdef";

1093 
Àn
--) {

1094 *
d°
++ = 
hex
[*
§c
 >> 4];

1095 *
d°
++ = 
hex
[*
§c
++ & 0xf];

1098  
d°
;

1099 
	}
}

1103 
	$ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1105 
u_ch¨
 
basis64
[] =

1108 
	`ngx_ícode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
, 1);

1109 
	}
}

1113 
	$ngx_ícode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1115 
u_ch¨
 
basis64
[] =

1118 
	`ngx_ícode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
, 0);

1119 
	}
}

1123 
	$ngx_ícode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
,

1124 
ngx_uöt_t
 
∑ddög
)

1126 
u_ch¨
 *
d
, *
s
;

1127 
size_t
 
Àn
;

1129 
Àn
 = 
§c
->len;

1130 
s
 = 
§c
->
d©a
;

1131 
d
 = 
d°
->
d©a
;

1133 
Àn
 > 2) {

1134 *
d
++ = 
basis
[(
s
[0] >> 2) & 0x3f];

1135 *
d
++ = 
basis
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1136 *
d
++ = 
basis
[((
s
[1] & 0x0f) << 2) | (s[2] >> 6)];

1137 *
d
++ = 
basis
[
s
[2] & 0x3f];

1139 
s
 += 3;

1140 
Àn
 -= 3;

1143 i‡(
Àn
) {

1144 *
d
++ = 
basis
[(
s
[0] >> 2) & 0x3f];

1146 i‡(
Àn
 == 1) {

1147 *
d
++ = 
basis
[(
s
[0] & 3) << 4];

1148 i‡(
∑ddög
) {

1149 *
d
++ = '=';

1153 *
d
++ = 
basis
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1154 *
d
++ = 
basis
[(
s
[1] & 0x0f) << 2];

1157 i‡(
∑ddög
) {

1158 *
d
++ = '=';

1162 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1163 
	}
}

1166 
ngx_öt_t


1167 
	$ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1169 
u_ch¨
 
basis64
[] = {

1189  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1190 
	}
}

1193 
ngx_öt_t


1194 
	$ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1196 
u_ch¨
 
basis64
[] = {

1216  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1217 
	}
}

1220 
ngx_öt_t


1221 
	$ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
)

1223 
size_t
 
Àn
;

1224 
u_ch¨
 *
d
, *
s
;

1226 
Àn
 = 0;Üí < 
§c
->len;Üen++) {

1227 i‡(
§c
->
d©a
[
Àn
] == '=') {

1231 i‡(
basis
[
§c
->
d©a
[
Àn
]] == 77) {

1232  
NGX_ERROR
;

1236 i‡(
Àn
 % 4 == 1) {

1237  
NGX_ERROR
;

1240 
s
 = 
§c
->
d©a
;

1241 
d
 = 
d°
->
d©a
;

1243 
Àn
 > 3) {

1244 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1245 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1246 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[2]] << 6 | basis[s[3]]);

1248 
s
 += 4;

1249 
Àn
 -= 4;

1252 i‡(
Àn
 > 1) {

1253 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1256 i‡(
Àn
 > 2) {

1257 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1260 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1262  
NGX_OK
;

1263 
	}
}

1275 
uöt32_t


1276 
	$ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
)

1278 
size_t
 
Àn
;

1279 
uöt32_t
 
u
, 
i
, 
vÆid
;

1281 
u
 = **
p
;

1283 i‡(
u
 >= 0xf0) {

1285 
u
 &= 0x07;

1286 
vÆid
 = 0xffff;

1287 
Àn
 = 3;

1289 } i‡(
u
 >= 0xe0) {

1291 
u
 &= 0x0f;

1292 
vÆid
 = 0x7ff;

1293 
Àn
 = 2;

1295 } i‡(
u
 >= 0xc2) {

1297 
u
 &= 0x1f;

1298 
vÆid
 = 0x7f;

1299 
Àn
 = 1;

1302 (*
p
)++;

1306 i‡(
n
 - 1 < 
Àn
) {

1310 (*
p
)++;

1312 
Àn
) {

1313 
i
 = *(*
p
)++;

1315 i‡(
i
 < 0x80) {

1319 
u
 = (u << 6Ë| (
i
 & 0x3f);

1321 
Àn
--;

1324 i‡(
u
 > 
vÆid
) {

1325  
u
;

1329 
	}
}

1332 
size_t


1333 
	$ngx_utf8_Àngth
(
u_ch¨
 *
p
, 
size_t
 
n
)

1335 
u_ch¨
 
c
, *
œ°
;

1336 
size_t
 
Àn
;

1338 
œ°
 = 
p
 + 
n
;

1340 
Àn
 = 0; 
p
 < 
œ°
;Üen++) {

1342 
c
 = *
p
;

1344 i‡(
c
 < 0x80) {

1345 
p
++;

1349 i‡(
	`ngx_utf8_decode
(&
p
, 
n
) > 0x10ffff) {

1351  
n
;

1355  
Àn
;

1356 
	}
}

1359 
u_ch¨
 *

1360 
	$ngx_utf8_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
)

1362 
u_ch¨
 
c
, *
√xt
;

1364 i‡(
n
 == 0) {

1365  
d°
;

1368 --
n
) {

1370 
c
 = *
§c
;

1371 *
d°
 = 
c
;

1373 i‡(
c
 < 0x80) {

1375 i‡(
c
 != '\0') {

1376 
d°
++;

1377 
§c
++;

1378 
Àn
--;

1383  
d°
;

1386 
√xt
 = 
§c
;

1388 i‡(
	`ngx_utf8_decode
(&
√xt
, 
Àn
) > 0x10ffff) {

1393 
§c
 < 
√xt
) {

1394 *
d°
++ = *
§c
++;

1395 
Àn
--;

1399 *
d°
 = '\0';

1401  
d°
;

1402 
	}
}

1405 
uöçå_t


1406 
	$ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1408 
ngx_uöt_t
 
n
;

1409 
uöt32_t
 *
esˇ≥
;

1410 
u_ch¨
 
hex
[] = "0123456789abcdef";

1414 
uöt32_t
 
uri
[] = {

1434 
uöt32_t
 
¨gs
[] = {

1454 
uöt32_t
 
uri_comp⁄ít
[] = {

1474 
uöt32_t
 
html
[] = {

1494 
uöt32_t
 
ª‰esh
[] = {

1514 
uöt32_t
 
memˇched
[] = {

1534 
uöt32_t
 *
m≠
[] =

1535 { 
uri
, 
¨gs
, 
uri_comp⁄ít
, 
html
, 
ª‰esh
, 
memˇched
, memcached };

1538 
esˇ≥
 = 
m≠
[
ty≥
];

1540 i‡(
d°
 =
NULL
) {

1544 
n
 = 0;

1546 
size
) {

1547 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1548 
n
++;

1550 
§c
++;

1551 
size
--;

1554  (
uöçå_t
Ë
n
;

1557 
size
) {

1558 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1559 *
d°
++ = '%';

1560 *
d°
++ = 
hex
[*
§c
 >> 4];

1561 *
d°
++ = 
hex
[*
§c
 & 0xf];

1562 
§c
++;

1565 *
d°
++ = *
§c
++;

1567 
size
--;

1570  (
uöçå_t
Ë
d°
;

1571 
	}
}

1575 
	$ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1577 
u_ch¨
 *
d
, *
s
, 
ch
, 
c
, 
decoded
;

1579 
sw_usuÆ
 = 0,

1580 
sw_quŸed
,

1581 
sw_quŸed_£c⁄d


1582 } 
°©e
;

1584 
d
 = *
d°
;

1585 
s
 = *
§c
;

1587 
°©e
 = 0;

1588 
decoded
 = 0;

1590 
size
--) {

1592 
ch
 = *
s
++;

1594 
°©e
) {

1595 
sw_usuÆ
:

1596 i‡(
ch
 == '?'

1597 && (
ty≥
 & (
NGX_UNESCAPE_URI
|
NGX_UNESCAPE_REDIRECT
)))

1599 *
d
++ = 
ch
;

1600 
d⁄e
;

1603 i‡(
ch
 == '%') {

1604 
°©e
 = 
sw_quŸed
;

1608 *
d
++ = 
ch
;

1611 
sw_quŸed
:

1613 i‡(
ch
 >= '0' && ch <= '9') {

1614 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1615 
°©e
 = 
sw_quŸed_£c⁄d
;

1619 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1620 i‡(
c
 >= 'a' && c <= 'f') {

1621 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1622 
°©e
 = 
sw_quŸed_£c⁄d
;

1628 
°©e
 = 
sw_usuÆ
;

1630 *
d
++ = 
ch
;

1634 
sw_quŸed_£c⁄d
:

1636 
°©e
 = 
sw_usuÆ
;

1638 i‡(
ch
 >= '0' && ch <= '9') {

1639 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1641 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1642 i‡(
ch
 > '%' && ch < 0x7f) {

1643 *
d
++ = 
ch
;

1647 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1652 *
d
++ = 
ch
;

1657 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1658 i‡(
c
 >= 'a' && c <= 'f') {

1659 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1661 i‡(
ty≥
 & 
NGX_UNESCAPE_URI
) {

1662 i‡(
ch
 == '?') {

1663 *
d
++ = 
ch
;

1664 
d⁄e
;

1667 *
d
++ = 
ch
;

1671 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1672 i‡(
ch
 == '?') {

1673 *
d
++ = 
ch
;

1674 
d⁄e
;

1677 i‡(
ch
 > '%' && ch < 0x7f) {

1678 *
d
++ = 
ch
;

1682 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1686 *
d
++ = 
ch
;

1697 
d⁄e
:

1699 *
d°
 = 
d
;

1700 *
§c
 = 
s
;

1701 
	}
}

1704 
uöçå_t


1705 
	$ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1707 
u_ch¨
 
ch
;

1708 
ngx_uöt_t
 
Àn
;

1710 i‡(
d°
 =
NULL
) {

1712 
Àn
 = 0;

1714 
size
) {

1715 *
§c
++) {

1718 
Àn
 += ("&lt;") - 2;

1722 
Àn
 += ("&gt;") - 2;

1726 
Àn
 += ("&amp;") - 2;

1730 
Àn
 += ("&quot;") - 2;

1736 
size
--;

1739  (
uöçå_t
Ë
Àn
;

1742 
size
) {

1743 
ch
 = *
§c
++;

1745 
ch
) {

1748 *
d°
++ = '&'; *dst++ = 'l'; *dst++ = 't'; *dst++ = ';';

1752 *
d°
++ = '&'; *dst++ = 'g'; *dst++ = 't'; *dst++ = ';';

1756 *
d°
++ = '&'; *dst++ = 'a'; *dst++ = 'm'; *dst++ = 'p';

1757 *
d°
++ = ';';

1761 *
d°
++ = '&'; *dst++ = 'q'; *dst++ = 'u'; *dst++ = 'o';

1762 *
d°
++ = 't'; *dst++ = ';';

1766 *
d°
++ = 
ch
;

1769 
size
--;

1772  (
uöçå_t
Ë
d°
;

1773 
	}
}

1777 
	$ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1778 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1780 
ngx_°r_node_t
 *
n
, *
t
;

1781 
ngx_rbåì_node_t
 **
p
;

1785 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1786 
t
 = (
ngx_°r_node_t
 *Ë
ãmp
;

1788 i‡(
node
->
key
 !
ãmp
->key) {

1790 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

1792 } i‡(
n
->
°r
.
Àn
 !
t
->str.len) {

1794 
p
 = (
n
->
°r
.
Àn
 < 
t
->°r.ÀnË? &
ãmp
->
À·
 : &ãmp->
right
;

1797 
p
 = (
	`ngx_memcmp
(
n
->
°r
.
d©a
, 
t
->°r.d©a,Ç->°r.
Àn
) < 0)

1798 ? &
ãmp
->
À·
 : &ãmp->
right
;

1801 i‡(*
p
 =
£¡öñ
) {

1805 
ãmp
 = *
p
;

1808 *
p
 = 
node
;

1809 
node
->
∑ª¡
 = 
ãmp
;

1810 
node
->
À·
 = 
£¡öñ
;

1811 
node
->
right
 = 
£¡öñ
;

1812 
	`ngx_rbt_ªd
(
node
);

1813 
	}
}

1816 
ngx_°r_node_t
 *

1817 
	$ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
vÆ
, 
uöt32_t
 
hash
)

1819 
ngx_öt_t
 
rc
;

1820 
ngx_°r_node_t
 *
n
;

1821 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1823 
node
 = 
rbåì
->
roŸ
;

1824 
£¡öñ
 = 
rbåì
->sentinel;

1826 
node
 !
£¡öñ
) {

1828 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1830 i‡(
hash
 !
node
->
key
) {

1831 
node
 = (
hash
 <Çode->
key
Ë?Çode->
À·
 :Çode->
right
;

1835 i‡(
vÆ
->
Àn
 !
n
->
°r
.len) {

1836 
node
 = (
vÆ
->
Àn
 < 
n
->
°r
.ÀnË?Çode->
À·
 :Çode->
right
;

1840 
rc
 = 
	`ngx_memcmp
(
vÆ
->
d©a
, 
n
->
°r
.d©a, vÆ->
Àn
);

1842 i‡(
rc
 < 0) {

1843 
node
 =Çode->
À·
;

1847 i‡(
rc
 > 0) {

1848 
node
 =Çode->
right
;

1852  
n
;

1855  
NULL
;

1856 
	}
}

1862 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

1863 
	$ngx_öt_t
 (*
cmp
)(const *, const *))

1865 
u_ch¨
 *
p1
, *
p2
, *
p
;

1867 
p
 = 
	`ngx_Æloc
(
size
, 
ngx_cy˛e
->
log
);

1868 i‡(
p
 =
NULL
) {

1872 
p1
 = (
u_ch¨
 *Ë
ba£
 + 
size
;

1873 
p1
 < (
u_ch¨
 *Ë
ba£
 + 
n
 * 
size
;

1874 
p1
 +
size
)

1876 
	`ngx_mem˝y
(
p
, 
p1
, 
size
);

1878 
p2
 = 
p1
;

1879 
p2
 > (
u_ch¨
 *Ë
ba£
 && 
	`cmp
’2 - 
size
, 
p
) > 0;

1880 
p2
 -
size
)

1882 
	`ngx_mem˝y
(
p2
,Ö2 - 
size
, size);

1885 
	`ngx_mem˝y
(
p2
, 
p
, 
size
);

1888 
	`ngx_‰ì
(
p
);

1889 
	}
}

1892 #i‡(
NGX_MEMCPY_LIMIT
)

1895 
	$ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

1897 i‡(
n
 > 
NGX_MEMCPY_LIMIT
) {

1898 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "mem˝y %uz byãs", 
n
);

1899 
	`ngx_debug_poöt
();

1902  
	`mem˝y
(
d°
, 
§c
, 
n
);

1903 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_string.h

8 #i‚de‡
_NGX_STRING_H_INCLUDED_


9 
	#_NGX_STRING_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
size_t
 
	mÀn
;

18 
u_ch¨
 *
	md©a
;

19 } 
	tngx_°r_t
;

23 
ngx_°r_t
 
	mkey
;

24 
ngx_°r_t
 
	mvÆue
;

25 } 
	tngx_keyvÆ_t
;

29 
	mÀn
:28;

31 
	mvÆid
:1;

32 
	mno_ˇchóbÀ
:1;

33 
	mnŸ_found
:1;

34 
	mesˇ≥
:1;

36 
u_ch¨
 *
	md©a
;

37 } 
	tngx_v¨übÀ_vÆue_t
;

40 
	#ngx_°rög
(
°r
Ë{ (°rË- 1, (
u_ch¨
 *Ë°∏}

	)

41 
	#ngx_nuŒ_°rög
 { 0, 
NULL
 }

	)

42 
	#ngx_°r_£t
(
°r
, 
ãxt
) \

43 (
°r
)->
Àn
 = (
ãxt
Ë- 1; (°r)->
d©a
 = (
u_ch¨
 *Ë
	)
ãxt

44 
	#ngx_°r_nuŒ
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

47 
	#ngx_tﬁowî
(
c
Ë(
u_ch¨
Ë((¯>'A' && c <'Z'Ë? (¯| 0x20Ë: c)

	)

48 
	#ngx_touµî
(
c
Ë(
u_ch¨
Ë((¯>'a' && c <'z'Ë? (¯& ~0x20Ë: c)

	)

50 
ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

53 
	#ngx_°∫cmp
(
s1
, 
s2
, 
n
Ë
	`°∫cmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

57 
	#ngx_°rcmp
(
s1
, 
s2
Ë
	`°rcmp
((c⁄° *Ës1, (c⁄° *Ës2)

	)

60 
	#ngx_°r°r
(
s1
, 
s2
Ë
	`°r°r
((c⁄° *Ës1, (c⁄° *Ës2)

	)

61 
	#ngx_°æí
(
s
Ë
	`°æí
((c⁄° *Ës)

	)

63 
	#ngx_°rchr
(
s1
, 
c
Ë
	`°rchr
((c⁄° *Ës1, (Ëc)

	)

65 
ngx_ölöe
 
u_ch¨
 *

66 
	$ngx_°æchr
(
u_ch¨
 *
p
, u_ch¨ *
œ°
, u_ch¨ 
c
)

68 
p
 < 
œ°
) {

70 i‡(*
p
 =
c
) {

71  
p
;

74 
p
++;

77  
NULL
;

78 
	}
}

86 
	#ngx_memzîo
(
buf
, 
n
Ë(Ë
	`mem£t
(buf, 0,Ç)

	)

87 
	#ngx_mem£t
(
buf
, 
c
, 
n
Ë(Ë
	`mem£t
(buf, c,Ç)

	)

90 #i‡(
NGX_MEMCPY_LIMIT
)

92 *
ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

93 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`ngx_mem˝y
(d°, src,Ç)Ë+ (n))

	)

102 
	#ngx_mem˝y
(
d°
, 
§c
, 
n
Ë(Ë
	`mem˝y
(d°, src,Ç)

	)

103 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`mem˝y
(d°, src,Ç)Ë+ (n))

	)

108 #i‡–
__INTEL_COMPILER
 >= 800 )

115 
ngx_ölöe
 
u_ch¨
 *

116 
	$ngx_c›y
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

118 i‡(
Àn
 < 17) {

120 
Àn
) {

121 *
d°
++ = *
§c
++;

122 
Àn
--;

125  
d°
;

128  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

130 
	}
}

134 
	#ngx_c›y
 
ngx_˝ymem


	)

139 
	#ngx_memmove
(
d°
, 
§c
, 
n
Ë(Ë
	`memmove
(d°, src,Ç)

	)

140 
	#ngx_movemem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`memmove
(d°, src,Ç)Ë+ (n))

	)

144 
	#ngx_memcmp
(
s1
, 
s2
, 
n
Ë
	`memcmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

147 
u_ch¨
 *
ngx_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

148 
u_ch¨
 *
ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
);

149 
u_ch¨
 * 
ngx_cde˛
 
ngx_•rötf
(u_ch¨ *
buf
, c⁄° *
fmt
, ...);

150 
u_ch¨
 * 
ngx_cde˛
 
ngx_¢¥ötf
(u_ch¨ *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...);

151 
u_ch¨
 * 
ngx_cde˛
 
ngx_¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
,

153 
u_ch¨
 *
ngx_v¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

154 
	#ngx_v¢¥ötf
(
buf
, 
max
, 
fmt
, 
¨gs
) \

155 
	`ngx_v¶¥ötf
(
buf
, bu‡+ (
max
), 
fmt
, 
¨gs
)

	)

157 
ngx_öt_t
 
ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

158 
ngx_öt_t
 
ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

160 
u_ch¨
 *
ngx_°∫°r
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

162 
u_ch¨
 *
ngx_°r°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

163 
u_ch¨
 *
ngx_°rˇ£°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

164 
u_ch¨
 *
ngx_°æˇ£°∫
(u_ch¨ *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
);

166 
ngx_öt_t
 
ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

167 
ngx_öt_t
 
ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

168 
ngx_öt_t
 
ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
);

169 
ngx_öt_t
 
ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

170 
ngx_öt_t
 
ngx_fûíame_cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

172 
ngx_öt_t
 
ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

173 
ngx_öt_t
 
ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

174 
ssize_t
 
ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
);

175 
off_t
 
ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
);

176 
time_t
 
ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
);

177 
ngx_öt_t
 
ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

179 
u_ch¨
 *
ngx_hex_dump
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
);

182 
	#ngx_ba£64_ícoded_Àngth
(
Àn
Ë((÷í + 2Ë/ 3Ë* 4)

	)

183 
	#ngx_ba£64_decoded_Àngth
(
Àn
Ë((÷í + 3Ë/ 4Ë* 3)

	)

185 
ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

186 
ngx_ícode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

187 
ngx_öt_t
 
ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

188 
ngx_öt_t
 
ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

190 
uöt32_t
 
ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
);

191 
size_t
 
ngx_utf8_Àngth
(
u_ch¨
 *
p
, size_à
n
);

192 
u_ch¨
 *
ngx_utf8_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
);

195 
	#NGX_ESCAPE_URI
 0

	)

196 
	#NGX_ESCAPE_ARGS
 1

	)

197 
	#NGX_ESCAPE_URI_COMPONENT
 2

	)

198 
	#NGX_ESCAPE_HTML
 3

	)

199 
	#NGX_ESCAPE_REFRESH
 4

	)

200 
	#NGX_ESCAPE_MEMCACHED
 5

	)

201 
	#NGX_ESCAPE_MAIL_AUTH
 6

	)

203 
	#NGX_UNESCAPE_URI
 1

	)

204 
	#NGX_UNESCAPE_REDIRECT
 2

	)

206 
uöçå_t
 
ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
,

207 
ngx_uöt_t
 
ty≥
);

208 
ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
);

209 
uöçå_t
 
ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

213 
ngx_rbåì_node_t
 
	mnode
;

214 
ngx_°r_t
 
	m°r
;

215 } 
	tngx_°r_node_t
;

218 
ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

219 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

220 
ngx_°r_node_t
 *
ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
«me
,

221 
uöt32_t
 
hash
);

224 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

225 
	$ngx_öt_t
 (*
cmp
)(const *, const *));

226 
	#ngx_qs‹t
 
qs‹t


	)

229 
	#ngx_vÆue_hñ≥r
(
n
Ë#n

	)

230 
	#ngx_vÆue
(
n
Ë
	`ngx_vÆue_hñ≥r
“)

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_times.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

21 
	#NGX_TIME_SLOTS
 64

	)

23 
ngx_uöt_t
 
	g¶Ÿ
;

24 
ngx_©omic_t
 
	gngx_time_lock
;

26 vﬁ©ûê
ngx_m£c_t
 
	gngx_cuºít_m£c
;

27 vﬁ©ûê
ngx_time_t
 *
	gngx_ˇched_time
;

28 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_îr_log_time
;

29 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_time
;

30 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_time
;

31 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_iso8601
;

33 #i‡!(
NGX_WIN32
)

41 
ngx_öt_t
 
	gˇched_gmtoff
;

44 
ngx_time_t
 
	gˇched_time
[
NGX_TIME_SLOTS
];

45 
u_ch¨
 
	gˇched_îr_log_time
[
NGX_TIME_SLOTS
]

47 
u_ch¨
 
	gˇched_hâp_time
[
NGX_TIME_SLOTS
]

49 
u_ch¨
 
	gˇched_hâp_log_time
[
NGX_TIME_SLOTS
]

51 
u_ch¨
 
	gˇched_hâp_log_iso8601
[
NGX_TIME_SLOTS
]

55 *
	gwìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

56 *
	gm⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

60 
	$ngx_time_öô
()

62 
ngx_ˇched_îr_log_time
.
Àn
 = ("1970/09/28 12:00:00") - 1;

63 
ngx_ˇched_hâp_time
.
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT") - 1;

64 
ngx_ˇched_hâp_log_time
.
Àn
 = ("28/Sep/1970:12:00:00 +0600") - 1;

65 
ngx_ˇched_hâp_log_iso8601
.
Àn
 = ("1970-09-28T12:00:00+06:00") - 1;

67 
ngx_ˇched_time
 = &
ˇched_time
[0];

69 
	`ngx_time_upd©e
();

70 
	}
}

74 
	$ngx_time_upd©e
()

76 
u_ch¨
 *
p0
, *
p1
, *
p2
, *
p3
;

77 
ngx_tm_t
 
tm
, 
gmt
;

78 
time_t
 
£c
;

79 
ngx_uöt_t
 
m£c
;

80 
ngx_time_t
 *
ç
;

81 
timevÆ
 
tv
;

83 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

87 
	`ngx_gëtimeofday
(&
tv
);

89 
£c
 = 
tv
.
tv_£c
;

90 
m£c
 = 
tv
.
tv_u£c
 / 1000;

92 
ngx_cuºít_m£c
 = (
ngx_m£c_t
Ë
£c
 * 1000 + 
m£c
;

94 
ç
 = &
ˇched_time
[
¶Ÿ
];

96 i‡(
ç
->
£c
 == sec) {

97 
ç
->
m£c
 = msec;

98 
	`ngx_u∆ock
(&
ngx_time_lock
);

102 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

103 
¶Ÿ
 = 0;

105 
¶Ÿ
++;

108 
ç
 = &
ˇched_time
[
¶Ÿ
];

110 
ç
->
£c
 = sec;

111 
ç
->
m£c
 = msec;

113 
	`ngx_gmtime
(
£c
, &
gmt
);

116 
p0
 = &
ˇched_hâp_time
[
¶Ÿ
][0];

118 (Ë
	`ngx_•rötf
(
p0
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

119 
wìk
[
gmt
.
ngx_tm_wday
], gmt.
ngx_tm_mday
,

120 
m⁄ths
[
gmt
.
ngx_tm_m⁄
 - 1], gmt.
ngx_tm_yór
,

121 
gmt
.
ngx_tm_hour
, gmt.
ngx_tm_mö
, gmt.
ngx_tm_£c
);

123 #i‡(
NGX_HAVE_GETTIMEZONE
)

125 
ç
->
gmtoff
 = 
	`ngx_gëtimez⁄e
();

126 
	`ngx_gmtime
(
£c
 + 
ç
->
gmtoff
 * 60, &
tm
);

128 #ñi‡(
NGX_HAVE_GMTOFF
)

130 
	`ngx_loˇ…ime
(
£c
, &
tm
);

131 
ˇched_gmtoff
 = (
ngx_öt_t
Ë(
tm
.
ngx_tm_gmtoff
 / 60);

132 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

136 
	`ngx_loˇ…ime
(
£c
, &
tm
);

137 
ˇched_gmtoff
 = 
	`ngx_timez⁄e
(
tm
.
ngx_tm_isd°
);

138 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

143 
p1
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

145 (Ë
	`ngx_•rötf
(
p1
, "%4d/%02d/%02d %02d:%02d:%02d",

146 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

147 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

148 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

151 
p2
 = &
ˇched_hâp_log_time
[
¶Ÿ
][0];

153 (Ë
	`ngx_•rötf
(
p2
, "%02d/%s/%d:%02d:%02d:%02d %c%02d%02d",

154 
tm
.
ngx_tm_mday
, 
m⁄ths
[tm.
ngx_tm_m⁄
 - 1],

155 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_hour
,

156 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

157 
ç
->
gmtoff
 < 0 ? '-' : '+',

158 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

160 
p3
 = &
ˇched_hâp_log_iso8601
[
¶Ÿ
][0];

162 (Ë
	`ngx_•rötf
(
p3
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",

163 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

164 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

165 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

166 
ç
->
gmtoff
 < 0 ? '-' : '+',

167 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

170 
	`ngx_mem‹y_b¨rõr
();

172 
ngx_ˇched_time
 = 
ç
;

173 
ngx_ˇched_hâp_time
.
d©a
 = 
p0
;

174 
ngx_ˇched_îr_log_time
.
d©a
 = 
p1
;

175 
ngx_ˇched_hâp_log_time
.
d©a
 = 
p2
;

176 
ngx_ˇched_hâp_log_iso8601
.
d©a
 = 
p3
;

178 
	`ngx_u∆ock
(&
ngx_time_lock
);

179 
	}
}

182 #i‡!(
NGX_WIN32
)

185 
	$ngx_time_sigß„_upd©e
()

187 
u_ch¨
 *
p
;

188 
ngx_tm_t
 
tm
;

189 
time_t
 
£c
;

190 
ngx_time_t
 *
ç
;

191 
timevÆ
 
tv
;

193 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

197 
	`ngx_gëtimeofday
(&
tv
);

199 
£c
 = 
tv
.
tv_£c
;

201 
ç
 = &
ˇched_time
[
¶Ÿ
];

203 i‡(
ç
->
£c
 == sec) {

204 
	`ngx_u∆ock
(&
ngx_time_lock
);

208 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

209 
¶Ÿ
 = 0;

211 
¶Ÿ
++;

214 
ç
 = &
ˇched_time
[
¶Ÿ
];

216 
ç
->
£c
 = 0;

218 
	`ngx_gmtime
(
£c
 + 
ˇched_gmtoff
 * 60, &
tm
);

220 
p
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

222 (Ë
	`ngx_•rötf
(
p
, "%4d/%02d/%02d %02d:%02d:%02d",

223 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

224 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

225 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

227 
	`ngx_mem‹y_b¨rõr
();

229 
ngx_ˇched_îr_log_time
.
d©a
 = 
p
;

231 
	`ngx_u∆ock
(&
ngx_time_lock
);

232 
	}
}

237 
u_ch¨
 *

238 
	$ngx_hâp_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

240 
ngx_tm_t
 
tm
;

242 
	`ngx_gmtime
(
t
, &
tm
);

244  
	`ngx_•rötf
(
buf
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

245 
wìk
[
tm
.
ngx_tm_wday
],

246 
tm
.
ngx_tm_mday
,

247 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

248 
tm
.
ngx_tm_yór
,

249 
tm
.
ngx_tm_hour
,

250 
tm
.
ngx_tm_mö
,

251 
tm
.
ngx_tm_£c
);

252 
	}
}

255 
u_ch¨
 *

256 
	$ngx_hâp_cookõ_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

258 
ngx_tm_t
 
tm
;

260 
	`ngx_gmtime
(
t
, &
tm
);

267  
	`ngx_•rötf
(
buf
,

268 (
tm
.
ngx_tm_yór
 > 2037) ?

271 
wìk
[
tm
.
ngx_tm_wday
],

272 
tm
.
ngx_tm_mday
,

273 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

274 (
tm
.
ngx_tm_yór
 > 2037) ?Åm.ngx_tm_year:

275 
tm
.
ngx_tm_yór
 % 100,

276 
tm
.
ngx_tm_hour
,

277 
tm
.
ngx_tm_mö
,

278 
tm
.
ngx_tm_£c
);

279 
	}
}

283 
	$ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
)

285 
ngx_öt_t
 
yday
;

286 
ngx_uöt_t
 
n
, 
£c
, 
mö
, 
hour
, 
mday
, 
m⁄
, 
yór
, 
wday
, 
days
, 
À≠
;

290 
n
 = (
ngx_uöt_t
Ë
t
;

292 
days
 = 
n
 / 86400;

296 
wday
 = (4 + 
days
) % 7;

298 
n
 %= 86400;

299 
hour
 = 
n
 / 3600;

300 
n
 %= 3600;

301 
mö
 = 
n
 / 60;

302 
£c
 = 
n
 % 60;

310 
days
 = days - (31 + 28) + 719527;

319 
yór
 = (
days
 + 2) * 400 / (365 * 400 + 100 - 4 + 1);

321 
yday
 = 
days
 - (365 * 
yór
 + year / 4 - year / 100 + year / 400);

323 i‡(
yday
 < 0) {

324 
À≠
 = (
yór
 % 4 == 0) && (year % 100 || (year % 400 == 0));

325 
yday
 = 365 + 
À≠
 + yday;

326 
yór
--;

337 
m⁄
 = (
yday
 + 31) * 10 / 306;

341 
mday
 = 
yday
 - (367 * 
m⁄
 / 12 - 30) + 1;

343 i‡(
yday
 >= 306) {

345 
yór
++;

346 
m⁄
 -= 10;

356 
m⁄
 += 2;

365 
ç
->
ngx_tm_£c
 = (
ngx_tm_£c_t
Ë
£c
;

366 
ç
->
ngx_tm_mö
 = (
ngx_tm_mö_t
Ë
mö
;

367 
ç
->
ngx_tm_hour
 = (
ngx_tm_hour_t
Ë
hour
;

368 
ç
->
ngx_tm_mday
 = (
ngx_tm_mday_t
Ë
mday
;

369 
ç
->
ngx_tm_m⁄
 = (
ngx_tm_m⁄_t
Ë
m⁄
;

370 
ç
->
ngx_tm_yór
 = (
ngx_tm_yór_t
Ë
yór
;

371 
ç
->
ngx_tm_wday
 = (
ngx_tm_wday_t
Ë
wday
;

372 
	}
}

375 
time_t


376 
	$ngx_√xt_time
(
time_t
 
whí
)

378 
time_t
 
now
, 
√xt
;

379 
tm
Åm;

381 
now
 = 
	`ngx_time
();

383 
	`ngx_libc_loˇ…ime
(
now
, &
tm
);

385 
tm
.
tm_hour
 = (Ë(
whí
 / 3600);

386 
whí
 %= 3600;

387 
tm
.
tm_mö
 = (Ë(
whí
 / 60);

388 
tm
.
tm_£c
 = (Ë(
whí
 % 60);

390 
√xt
 = 
	`mktime
(&
tm
);

392 i‡(
√xt
 == -1) {

396 i‡(
√xt
 - 
now
 > 0) {

397  
√xt
;

400 
tm
.
tm_mday
++;

404 
√xt
 = 
	`mktime
(&
tm
);

406 i‡(
√xt
 != -1) {

407  
√xt
;

411 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_times.h

8 #i‚de‡
_NGX_TIMES_H_INCLUDED_


9 
	#_NGX_TIMES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
time_t
 
	m£c
;

18 
ngx_uöt_t
 
	mm£c
;

19 
ngx_öt_t
 
	mgmtoff
;

20 } 
	tngx_time_t
;

23 
ngx_time_öô
();

24 
ngx_time_upd©e
();

25 
ngx_time_sigß„_upd©e
();

26 
u_ch¨
 *
ngx_hâp_time
(u_ch¨ *
buf
, 
time_t
 
t
);

27 
u_ch¨
 *
ngx_hâp_cookõ_time
(u_ch¨ *
buf
, 
time_t
 
t
);

28 
ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
);

30 
time_t
 
ngx_√xt_time
—ime_à
whí
);

31 
	#ngx_√xt_time_n
 "mktime()"

	)

34 vﬁ©ûê
ngx_time_t
 *
ngx_ˇched_time
;

36 
	#ngx_time
(Ë
ngx_ˇched_time
->
£c


	)

37 
	#ngx_timeofday
(Ë(
ngx_time_t
 *Ë
ngx_ˇched_time


	)

39 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_îr_log_time
;

40 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_time
;

41 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_time
;

42 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_iso8601
;

48 vﬁ©ûê
ngx_m£c_t
 
ngx_cuºít_m£c
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_aio_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evít_moduÀ_t
 
ngx_kqueue_moduÀ_˘x
;

16 
ngx_öt_t
 
ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

17 
ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_öt_t
 
ngx_aio_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

19 
ngx_uöt_t
 
Êags
);

20 
ngx_öt_t
 
ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

21 
ngx_uöt_t
 
Êags
);

22 
ngx_öt_t
 
ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

24 
ngx_uöt_t
 
Êags
);

27 
ngx_os_io_t
 
	gngx_os_aio
 = {

28 
ngx_aio_ªad
,

29 
ngx_aio_ªad_chaö
,

30 
NULL
,

31 
ngx_aio_wrôe
,

32 
ngx_aio_wrôe_chaö
,

37 
ngx_°r_t
 
	gaio_«me
 = 
ngx_°rög
("aio");

39 
ngx_evít_moduÀ_t
 
	gngx_aio_moduÀ_˘x
 = {

40 &
aio_«me
,

41 
NULL
,

42 
NULL
,

45 
ngx_aio_add_evít
,

46 
ngx_aio_dñ_evít
,

47 
NULL
,

48 
NULL
,

49 
NULL
,

50 
ngx_aio_dñ_c⁄√˘i⁄
,

51 
NULL
,

52 
ngx_aio_¥o˚ss_evíts
,

53 
ngx_aio_öô
,

54 
ngx_aio_d⁄e


59 
ngx_moduÀ_t
 
	gngx_aio_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_aio_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 #i‡(
NGX_HAVE_KQUEUE
)

77 
ngx_öt_t


78 
	$ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

80 i‡(
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`öô
(
cy˛e
, 
timî
Ë=
NGX_ERROR
) {

81  
NGX_ERROR
;

84 
ngx_io
 = 
ngx_os_aio
;

86 
ngx_evít_Êags
 = 
NGX_USE_AIO_EVENT
;

87 
ngx_evít_a˘i⁄s
 = 
ngx_aio_moduÀ_˘x
.
a˘i⁄s
;

90  
NGX_OK
;

91 
	}
}

95 
	$ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

97 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`d⁄e
(
cy˛e
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_aio_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

106  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`add
(
ev
, 
evít
, 
Êags
);

107 
	}
}

110 
ngx_öt_t


111 
	$ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

113  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`dñ
(
ev
, 
evít
, 
Êags
);

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

120 
rc
;

122 i‡(
c
->
ªad
->
a˘ive
 =0 && c->
wrôe
->active == 0) {

123  
NGX_OK
;

126 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

127  
NGX_OK
;

130 
rc
 = 
	`aio_ˇn˚l
(
c
->
fd
, 
NULL
);

132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ˇn˚l: %d", 
rc
);

134 i‡(
rc
 =
AIO_CANCELED
) {

135 
c
->
ªad
->
a˘ive
 = 0;

136 
c
->
wrôe
->
a˘ive
 = 0;

137  
NGX_OK
;

140 i‡(
rc
 =
AIO_ALLDONE
) {

141 
c
->
ªad
->
a˘ive
 = 0;

142 
c
->
wrôe
->
a˘ive
 = 0;

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

145  
NGX_OK
;

148 i‡(
rc
 == -1) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

151  
NGX_ERROR
;

154 i‡(
rc
 =
AIO_NOTCANCELED
) {

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

158  
NGX_ERROR
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

168  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

169 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_devpoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_DEVPOLL
)

17 
	#POLLREMOVE
 0x0800

	)

18 
	#DP_POLL
 0xD001

	)

19 
	#DP_ISPOLLED
 0xD002

	)

21 
	sdvpﬁl
 {

22 
pﬁlfd
 *
	mdp_fds
;

23 
	mdp_nfds
;

24 
	mdp_timeout
;

31 
ngx_uöt_t
 
	mch™ges
;

32 
ngx_uöt_t
 
	mevíts
;

33 } 
	tngx_devpﬁl_c⁄f_t
;

36 
ngx_öt_t
 
ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

37 
ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_öt_t
 
ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

39 
ngx_uöt_t
 
Êags
);

40 
ngx_öt_t
 
ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

41 
ngx_uöt_t
 
Êags
);

42 
ngx_öt_t
 
ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

43 
ngx_uöt_t
 
Êags
);

44 
ngx_öt_t
 
ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

45 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

47 *
ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

48 *
ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

50 
	gdp
 = -1;

51 
pﬁlfd
 *
	gch™ge_li°
, *
	gevít_li°
;

52 
ngx_uöt_t
 
	gnch™ges
, 
	gmax_ch™ges
, 
	g√víts
;

54 
ngx_evít_t
 **
	gch™ge_ödex
;

57 
ngx_°r_t
 
	gdevpﬁl_«me
 = 
ngx_°rög
("/dev/poll");

59 
ngx_comm™d_t
 
	gngx_devpﬁl_comm™ds
[] = {

61 { 
ngx_°rög
("devpoll_changes"),

62 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

65 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
ch™ges
),

66 
NULL
 },

68 { 
ngx_°rög
("devpoll_events"),

69 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

72 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
evíts
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_evít_moduÀ_t
 
	gngx_devpﬁl_moduÀ_˘x
 = {

80 &
devpﬁl_«me
,

81 
ngx_devpﬁl_¸óã_c⁄f
,

82 
ngx_devpﬁl_öô_c⁄f
,

85 
ngx_devpﬁl_add_evít
,

86 
ngx_devpﬁl_dñ_evít
,

87 
ngx_devpﬁl_add_evít
,

88 
ngx_devpﬁl_dñ_evít
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
ngx_devpﬁl_¥o˚ss_evíts
,

93 
ngx_devpﬁl_öô
,

94 
ngx_devpﬁl_d⁄e
,

99 
ngx_moduÀ_t
 
	gngx_devpﬁl_moduÀ
 = {

100 
NGX_MODULE_V1
,

101 &
ngx_devpﬁl_moduÀ_˘x
,

102 
ngx_devpﬁl_comm™ds
,

103 
NGX_EVENT_MODULE
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NGX_MODULE_V1_PADDING


115 
ngx_öt_t


116 
	$ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

118 
size_t
 
n
;

119 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

121 
dpcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_devpﬁl_moduÀ
);

123 i‡(
dp
 == -1) {

124 
dp
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
);

126 i‡(
dp
 == -1) {

127 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

129  
NGX_ERROR
;

133 i‡(
max_ch™ges
 < 
dpcf
->
ch™ges
) {

134 i‡(
nch™ges
) {

135 
n
 = 
nch™ges
 * (
pﬁlfd
);

136 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
nch™ges
 = 0;

145 i‡(
ch™ge_li°
) {

146 
	`ngx_‰ì
(
ch™ge_li°
);

149 
ch™ge_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
ch™ges
,

150 
cy˛e
->
log
);

151 i‡(
ch™ge_li°
 =
NULL
) {

152  
NGX_ERROR
;

155 i‡(
ch™ge_ödex
) {

156 
	`ngx_‰ì
(
ch™ge_ödex
);

159 
ch™ge_ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 
dpcf
->
ch™ges
,

160 
cy˛e
->
log
);

161 i‡(
ch™ge_ödex
 =
NULL
) {

162  
NGX_ERROR
;

166 
max_ch™ges
 = 
dpcf
->
ch™ges
;

168 i‡(
√víts
 < 
dpcf
->
evíts
) {

169 i‡(
evít_li°
) {

170 
	`ngx_‰ì
(
evít_li°
);

173 
evít_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
evíts
,

174 
cy˛e
->
log
);

175 i‡(
evít_li°
 =
NULL
) {

176  
NGX_ERROR
;

180 
√víts
 = 
dpcf
->
evíts
;

182 
ngx_io
 = 
ngx_os_io
;

184 
ngx_evít_a˘i⁄s
 = 
ngx_devpﬁl_moduÀ_˘x
.
a˘i⁄s
;

186 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

188  
NGX_OK
;

189 
	}
}

193 
	$ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

195 i‡(
	`˛o£
(
dp
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

200 
dp
 = -1;

202 
	`ngx_‰ì
(
ch™ge_li°
);

203 
	`ngx_‰ì
(
evít_li°
);

204 
	`ngx_‰ì
(
ch™ge_ödex
);

206 
ch™ge_li°
 = 
NULL
;

207 
evít_li°
 = 
NULL
;

208 
ch™ge_ödex
 = 
NULL
;

209 
max_ch™ges
 = 0;

210 
nch™ges
 = 0;

211 
√víts
 = 0;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

218 #i‡(
NGX_DEBUG
)

219 
ngx_c⁄√˘i⁄_t
 *
c
;

222 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

223 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

226 #i‡(
NGX_DEBUG
)

227 
c
 = 
ev
->
d©a
;

228 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

229 "devpﬁ»addÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

232 
ev
->
a˘ive
 = 1;

234  
	`ngx_devpﬁl_£t_evít
(
ev
, 
evít
, 0);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

241 
ngx_evít_t
 *
e
;

242 
ngx_c⁄√˘i⁄_t
 *
c
;

244 
c
 = 
ev
->
d©a
;

246 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

247 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

250 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

251 "devpﬁ»dñÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

253 i‡(
	`ngx_devpﬁl_£t_evít
(
ev
, 
POLLREMOVE
, 
Êags
Ë=
NGX_ERROR
) {

254  
NGX_ERROR
;

257 
ev
->
a˘ive
 = 0;

259 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

260 
e
 = (
evít
 =
POLLIN
Ë? 
c
->
wrôe
 : c->
ªad
;

262 i‡(
e
) {

263 
e
->
a˘ive
 = 0;

266  
NGX_OK
;

271 i‡(
evít
 =
POLLIN
) {

272 
e
 = 
c
->
wrôe
;

273 
evít
 = 
POLLOUT
;

276 
e
 = 
c
->
ªad
;

277 
evít
 = 
POLLIN
;

280 i‡(
e
 &&É->
a˘ive
) {

281  
	`ngx_devpﬁl_£t_evít
(
e
, 
evít
, 0);

284  
NGX_OK
;

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

291 
size_t
 
n
;

292 
ngx_c⁄√˘i⁄_t
 *
c
;

294 
c
 = 
ev
->
d©a
;

296 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

297 "devpﬁ»fd:%dÉv:%04XòÊ:%04Xi", 
c
->
fd
, 
evít
, 
Êags
);

299 i‡(
nch™ges
 >
max_ch™ges
) {

300 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

303 
n
 = 
nch™ges
 * (
pﬁlfd
);

304 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

307  
NGX_ERROR
;

310 
nch™ges
 = 0;

313 
ch™ge_li°
[
nch™ges
].
fd
 = 
c
->fd;

314 
ch™ge_li°
[
nch™ges
].
evíts
 = (Ë
evít
;

315 
ch™ge_li°
[
nch™ges
].
ªvíts
 = 0;

317 
ch™ge_ödex
[
nch™ges
] = 
ev
;

318 
ev
->
ödex
 = 
nch™ges
;

320 
nch™ges
++;

322 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

323 
n
 = 
nch™ges
 * (
pﬁlfd
);

324 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

327  
NGX_ERROR
;

330 
nch™ges
 = 0;

333  
NGX_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

339 
ngx_uöt_t
 
Êags
)

341 
evíts
, 
ªvíts
, 
rc
;

342 
size_t
 
n
;

343 
ngx_fd_t
 
fd
;

344 
ngx_îr_t
 
îr
;

345 
ngx_öt_t
 
i
;

346 
ngx_uöt_t
 
Àvñ
, 
ö°™˚
;

347 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

348 
ngx_c⁄√˘i⁄_t
 *
c
;

349 
pﬁlfd
 
pfd
;

350 
dvpﬁl
 
dvp
;

354 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

355 "devpﬁ»timî: %M", 
timî
);

357 i‡(
nch™ges
) {

358 
n
 = 
nch™ges
 * (
pﬁlfd
);

359 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

362  
NGX_ERROR
;

365 
nch™ges
 = 0;

368 
dvp
.
dp_fds
 = 
evít_li°
;

369 
dvp
.
dp_nfds
 = (Ë
√víts
;

370 
dvp
.
dp_timeout
 = 
timî
;

371 
evíts
 = 
	`io˘l
(
dp
, 
DP_POLL
, &
dvp
);

373 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

375 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

376 
	`ngx_time_upd©e
();

379 i‡(
îr
) {

380 i‡(
îr
 =
NGX_EINTR
) {

382 i‡(
ngx_evít_timî_Æ¨m
) {

383 
ngx_evít_timî_Æ¨m
 = 0;

384  
NGX_OK
;

387 
Àvñ
 = 
NGX_LOG_INFO
;

390 
Àvñ
 = 
NGX_LOG_ALERT
;

393 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "ioctl(DP_POLL) failed");

394  
NGX_ERROR
;

397 i‡(
evíts
 == 0) {

398 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

399  
NGX_OK
;

402 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

404  
NGX_ERROR
;

407 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

409 
i
 = 0; i < 
evíts
; i++) {

411 
fd
 = 
evít_li°
[
i
].fd;

412 
ªvíts
 = 
evít_li°
[
i
].revents;

414 
c
 = 
ngx_cy˛e
->
fûes
[
fd
];

416 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

418 
pfd
.
fd
 = fd;

419 
pfd
.
evíts
 = 0;

420 
pfd
.
ªvíts
 = 0;

422 
rc
 = 
	`io˘l
(
dp
, 
DP_ISPOLLED
, &
pfd
);

424 
rc
) {

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

429 
fd
, 
ªvíts
);

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

435 
ªvíts
, 
fd
);

439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

442 
ªvíts
, 
fd
, 
rc
, 
pfd
.fd,Öfd.revents);

444 
pfd
.
fd
 = fd;

445 
pfd
.
evíts
 = 
POLLREMOVE
;

446 
pfd
.
ªvíts
 = 0;

448 i‡(
	`wrôe
(
dp
, &
pfd
, (
pﬁlfd
))

449 !(
ssize_t
Ë(
pﬁlfd
))

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

452 "wrôe(/dev/pﬁlËf‹ %d faûed", 
fd
);

455 i‡(
	`˛o£
(
fd
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

457 "˛o£(%dËÁûed", 
fd
);

466 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

468 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

470 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

471 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

473 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

476 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

477 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

480 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

483 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

484 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

492 
ªvíts
 |
POLLIN
|
POLLOUT
;

495 
ªv
 = 
c
->
ªad
;

497 i‡((
ªvíts
 & 
POLLIN
Ë&& 
ªv
->
a˘ive
) {

499 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

500 
ªv
->
po°ed_ªady
 = 1;

503 
ªv
->
ªady
 = 1;

506 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

507 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

508 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

510 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

513 
ö°™˚
 = 
ªv
->instance;

515 
ªv
->
	`h™dÀr
(rev);

517 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

523 
wev
 = 
c
->
wrôe
;

525 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
wev
->
a˘ive
) {

527 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

528 
wev
->
po°ed_ªady
 = 1;

531 
wev
->
ªady
 = 1;

534 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

535 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

538 
wev
->
	`h™dÀr
(wev);

543 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

545  
NGX_OK
;

546 
	}
}

550 
	$ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

552 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

554 
dpcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_devpﬁl_c⁄f_t
));

555 i‡(
dpcf
 =
NULL
) {

556  
NULL
;

559 
dpcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

560 
dpcf
->
evíts
 = 
NGX_CONF_UNSET
;

562  
dpcf
;

563 
	}
}

567 
	$ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

569 
ngx_devpﬁl_c⁄f_t
 *
dpcf
 = 
c⁄f
;

571 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
ch™ges
, 32);

572 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
evíts
, 32);

574  
NGX_CONF_OK
;

575 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_epoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EPOLL
)

17 
	#EPOLLIN
 0x001

	)

18 
	#EPOLLPRI
 0x002

	)

19 
	#EPOLLOUT
 0x004

	)

20 
	#EPOLLRDNORM
 0x040

	)

21 
	#EPOLLRDBAND
 0x080

	)

22 
	#EPOLLWRNORM
 0x100

	)

23 
	#EPOLLWRBAND
 0x200

	)

24 
	#EPOLLMSG
 0x400

	)

25 
	#EPOLLERR
 0x008

	)

26 
	#EPOLLHUP
 0x010

	)

28 
	#EPOLLRDHUP
 0x2000

	)

30 
	#EPOLLET
 0x80000000

	)

31 
	#EPOLLONESHOT
 0x40000000

	)

33 
	#EPOLL_CTL_ADD
 1

	)

34 
	#EPOLL_CTL_DEL
 2

	)

35 
	#EPOLL_CTL_MOD
 3

	)

37 
	uïﬁl_d©a
 {

38 *
	m±r
;

39 
	mfd
;

40 
uöt32_t
 
	mu32
;

41 
uöt64_t
 
	mu64
;

42 } 
	tïﬁl_d©a_t
;

44 
	sïﬁl_evít
 {

45 
uöt32_t
 
	mevíts
;

46 
ïﬁl_d©a_t
 
	md©a
;

50 
ïﬁl_¸óã
(
size
);

52 
	$ïﬁl_¸óã
(
size
)

55 
	}
}

58 
ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
);

60 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

63 
	}
}

66 
ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
);

68 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
)

71 
	}
}

73 #i‡(
NGX_HAVE_FILE_AIO
)

75 
	#SYS_io_£tup
 245

	)

76 
	#SYS_io_de°roy
 246

	)

77 
	#SYS_io_gëevíts
 247

	)

78 
	#SYS_evítfd
 323

	)

80 
u_öt
 
	taio_c⁄ãxt_t
;

82 
	sio_evít
 {

83 
uöt64_t
 
	md©a
;

84 
uöt64_t
 
	mobj
;

85 
öt64_t
 
	mªs
;

86 
öt64_t
 
	mªs2
;

95 
ngx_uöt_t
 
	mevíts
;

96 
ngx_uöt_t
 
	maio_ªque°s
;

97 } 
	tngx_ïﬁl_c⁄f_t
;

100 
ngx_öt_t
 
ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

101 
ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

102 
ngx_öt_t
 
ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

103 
ngx_uöt_t
 
Êags
);

104 
ngx_öt_t
 
ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

105 
ngx_uöt_t
 
Êags
);

106 
ngx_öt_t
 
ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

107 
ngx_öt_t
 
ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

108 
ngx_uöt_t
 
Êags
);

109 
ngx_öt_t
 
ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

110 
ngx_uöt_t
 
Êags
);

112 #i‡(
NGX_HAVE_FILE_AIO
)

113 
ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
);

116 *
ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

117 *
ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

119 
	gï
 = -1;

120 
ïﬁl_evít
 *
	gevít_li°
;

121 
ngx_uöt_t
 
	g√víts
;

123 #i‡(
NGX_HAVE_FILE_AIO
)

125 
	gngx_evítfd
 = -1;

126 
aio_c⁄ãxt_t
 
	gngx_aio_˘x
 = 0;

128 
ngx_evít_t
 
	gngx_evítfd_evít
;

129 
ngx_c⁄√˘i⁄_t
 
	gngx_evítfd_c⁄n
;

133 
ngx_°r_t
 
	gïﬁl_«me
 = 
ngx_°rög
("epoll");

135 
ngx_comm™d_t
 
	gngx_ïﬁl_comm™ds
[] = {

137 { 
ngx_°rög
("epoll_events"),

138 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

139 
ngx_c⁄f_£t_num_¶Ÿ
,

141 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
evíts
),

142 
NULL
 },

144 { 
ngx_°rög
("worker_aio_requests"),

145 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_num_¶Ÿ
,

148 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
aio_ªque°s
),

149 
NULL
 },

151 
ngx_nuŒ_comm™d


155 
ngx_evít_moduÀ_t
 
	gngx_ïﬁl_moduÀ_˘x
 = {

156 &
ïﬁl_«me
,

157 
ngx_ïﬁl_¸óã_c⁄f
,

158 
ngx_ïﬁl_öô_c⁄f
,

161 
ngx_ïﬁl_add_evít
,

162 
ngx_ïﬁl_dñ_evít
,

163 
ngx_ïﬁl_add_evít
,

164 
ngx_ïﬁl_dñ_evít
,

165 
ngx_ïﬁl_add_c⁄√˘i⁄
,

166 
ngx_ïﬁl_dñ_c⁄√˘i⁄
,

167 
NULL
,

168 
ngx_ïﬁl_¥o˚ss_evíts
,

169 
ngx_ïﬁl_öô
,

170 
ngx_ïﬁl_d⁄e
,

174 
ngx_moduÀ_t
 
	gngx_ïﬁl_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_ïﬁl_moduÀ_˘x
,

177 
ngx_ïﬁl_comm™ds
,

178 
NGX_EVENT_MODULE
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 #i‡(
NGX_HAVE_FILE_AIO
)

203 
	$io_£tup
(
u_öt
 
ƒ_ªqs
, 
aio_c⁄ãxt_t
 *
˘x
)

205  
	`sysˇŒ
(
SYS_io_£tup
, 
ƒ_ªqs
, 
˘x
);

206 
	}
}

210 
	$io_de°roy
(
aio_c⁄ãxt_t
 
˘x
)

212  
	`sysˇŒ
(
SYS_io_de°roy
, 
˘x
);

213 
	}
}

217 
	$io_gëevíts
(
aio_c⁄ãxt_t
 
˘x
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
,

218 
time•ec
 *
tmo
)

220  
	`sysˇŒ
(
SYS_io_gëevíts
, 
˘x
, 
mö_ƒ
, 
ƒ
, 
evíts
, 
tmo
);

221 
	}
}

225 
	$ngx_ïﬁl_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ïﬁl_c⁄f_t
 *
ïcf
)

227 
n
;

228 
ïﬁl_evít
 
ì
;

230 
ngx_evítfd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

232 i‡(
ngx_evítfd
 == -1) {

233 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

235 
ngx_fûe_aio
 = 0;

239 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

240 "evítfd: %d", 
ngx_evítfd
);

242 
n
 = 1;

244 i‡(
	`io˘l
(
ngx_evítfd
, 
FIONBIO
, &
n
) == -1) {

245 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

247 
Áûed
;

250 i‡(
	`io_£tup
(
ïcf
->
aio_ªque°s
, &
ngx_aio_˘x
) == -1) {

251 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

253 
Áûed
;

256 
ngx_evítfd_evít
.
d©a
 = &
ngx_evítfd_c⁄n
;

257 
ngx_evítfd_evít
.
h™dÀr
 = 
ngx_ïﬁl_evítfd_h™dÀr
;

258 
ngx_evítfd_evít
.
log
 = 
cy˛e
->log;

259 
ngx_evítfd_evít
.
a˘ive
 = 1;

260 
ngx_evítfd_c⁄n
.
fd
 = 
ngx_evítfd
;

261 
ngx_evítfd_c⁄n
.
ªad
 = &
ngx_evítfd_evít
;

262 
ngx_evítfd_c⁄n
.
log
 = 
cy˛e
->log;

264 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

265 
ì
.
d©a
.
±r
 = &
ngx_evítfd_c⁄n
;

267 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
ngx_evítfd
, &
ì
) != -1) {

271 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

274 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

275 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

279 
Áûed
:

281 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

282 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

286 
ngx_evítfd
 = -1;

287 
ngx_aio_˘x
 = 0;

288 
ngx_fûe_aio
 = 0;

289 
	}
}

294 
ngx_öt_t


295 
	$ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

297 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

299 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ïﬁl_moduÀ
);

301 i‡(
ï
 == -1) {

302 
ï
 = 
	`ïﬁl_¸óã
(
cy˛e
->
c⁄√˘i⁄_n
 / 2);

304 i‡(
ï
 == -1) {

305 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

307  
NGX_ERROR
;

310 #i‡(
NGX_HAVE_FILE_AIO
)

312 
	`ngx_ïﬁl_aio_öô
(
cy˛e
, 
ïcf
);

317 i‡(
√víts
 < 
ïcf
->
evíts
) {

318 i‡(
evít_li°
) {

319 
	`ngx_‰ì
(
evít_li°
);

322 
evít_li°
 = 
	`ngx_Æloc
((
ïﬁl_evít
Ë* 
ïcf
->
evíts
,

323 
cy˛e
->
log
);

324 i‡(
evít_li°
 =
NULL
) {

325  
NGX_ERROR
;

329 
√víts
 = 
ïcf
->
evíts
;

331 
ngx_io
 = 
ngx_os_io
;

333 
ngx_evít_a˘i⁄s
 = 
ngx_ïﬁl_moduÀ_˘x
.
a˘i⁄s
;

335 #i‡(
NGX_HAVE_CLEAR_EVENT
)

336 
ngx_evít_Êags
 = 
NGX_USE_CLEAR_EVENT


338 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT


340 |
NGX_USE_GREEDY_EVENT


341 |
NGX_USE_EPOLL_EVENT
;

343  
NGX_OK
;

344 
	}
}

348 
	$ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

350 i‡(
	`˛o£
(
ï
) == -1) {

351 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

355 
ï
 = -1;

357 #i‡(
NGX_HAVE_FILE_AIO
)

359 i‡(
ngx_evítfd
 != -1) {

361 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

362 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

366 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

367 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

371 
ngx_evítfd
 = -1;

374 
ngx_aio_˘x
 = 0;

378 
	`ngx_‰ì
(
evít_li°
);

380 
evít_li°
 = 
NULL
;

381 
√víts
 = 0;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

388 
›
;

389 
uöt32_t
 
evíts
, 
¥ev
;

390 
ngx_evít_t
 *
e
;

391 
ngx_c⁄√˘i⁄_t
 *
c
;

392 
ïﬁl_evít
 
ì
;

394 
c
 = 
ev
->
d©a
;

396 
evíts
 = (
uöt32_t
Ë
evít
;

398 i‡(
evít
 =
NGX_READ_EVENT
) {

399 
e
 = 
c
->
wrôe
;

400 
¥ev
 = 
EPOLLOUT
;

401 #i‡(
NGX_READ_EVENT
 !
EPOLLIN
|
EPOLLRDHUP
)

402 
evíts
 = 
EPOLLIN
|
EPOLLRDHUP
;

406 
e
 = 
c
->
ªad
;

407 
¥ev
 = 
EPOLLIN
|
EPOLLRDHUP
;

408 #i‡(
NGX_WRITE_EVENT
 !
EPOLLOUT
)

409 
evíts
 = 
EPOLLOUT
;

413 i‡(
e
->
a˘ive
) {

414 
›
 = 
EPOLL_CTL_MOD
;

415 
evíts
 |
¥ev
;

418 
›
 = 
EPOLL_CTL_ADD
;

421 
ì
.
evíts
 =Évít†| (
uöt32_t
Ë
Êags
;

422 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

424 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

426 
c
->
fd
, 
›
, 
ì
.
evíts
);

428 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

429 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

430 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

431  
NGX_ERROR
;

434 
ev
->
a˘ive
 = 1;

436 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

439  
NGX_OK
;

440 
	}
}

443 
ngx_öt_t


444 
	$ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

446 
›
;

447 
uöt32_t
 
¥ev
;

448 
ngx_evít_t
 *
e
;

449 
ngx_c⁄√˘i⁄_t
 *
c
;

450 
ïﬁl_evít
 
ì
;

458 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

459 
ev
->
a˘ive
 = 0;

460  
NGX_OK
;

463 
c
 = 
ev
->
d©a
;

465 i‡(
evít
 =
NGX_READ_EVENT
) {

466 
e
 = 
c
->
wrôe
;

467 
¥ev
 = 
EPOLLOUT
;

470 
e
 = 
c
->
ªad
;

471 
¥ev
 = 
EPOLLIN
|
EPOLLRDHUP
;

474 i‡(
e
->
a˘ive
) {

475 
›
 = 
EPOLL_CTL_MOD
;

476 
ì
.
evíts
 = 
¥ev
 | (
uöt32_t
Ë
Êags
;

477 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

480 
›
 = 
EPOLL_CTL_DEL
;

481 
ì
.
evíts
 = 0;

482 
ì
.
d©a
.
±r
 = 
NULL
;

485 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

487 
c
->
fd
, 
›
, 
ì
.
evíts
);

489 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

490 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

491 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

492  
NGX_ERROR
;

495 
ev
->
a˘ive
 = 0;

497  
NGX_OK
;

498 
	}
}

501 
ngx_öt_t


502 
	$ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

504 
ïﬁl_evít
 
ì
;

506 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLOUT
|
EPOLLET
|
EPOLLRDHUP
;

507 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | c->
ªad
->
ö°™˚
);

509 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

510 "ïﬁ»add c⁄√˘i⁄: fd:%dÉv:%08XD", 
c
->
fd
, 
ì
.
evíts
);

512 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
c
->
fd
, &
ì
) == -1) {

513 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

514 "ïﬁl_˘l(EPOLL_CTL_ADD, %dËÁûed", 
c
->
fd
);

515  
NGX_ERROR
;

518 
c
->
ªad
->
a˘ive
 = 1;

519 
c
->
wrôe
->
a˘ive
 = 1;

521  
NGX_OK
;

522 
	}
}

525 
ngx_öt_t


526 
	$ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

528 
›
;

529 
ïﬁl_evít
 
ì
;

537 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

538 
c
->
ªad
->
a˘ive
 = 0;

539 
c
->
wrôe
->
a˘ive
 = 0;

540  
NGX_OK
;

543 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

544 "ïﬁ»dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

546 
›
 = 
EPOLL_CTL_DEL
;

547 
ì
.
evíts
 = 0;

548 
ì
.
d©a
.
±r
 = 
NULL
;

550 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

551 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

552 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

553  
NGX_ERROR
;

556 
c
->
ªad
->
a˘ive
 = 0;

557 
c
->
wrôe
->
a˘ive
 = 0;

559  
NGX_OK
;

560 
	}
}

563 
ngx_öt_t


564 
	$ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

566 
evíts
;

567 
uöt32_t
 
ªvíts
;

568 
ngx_öt_t
 
ö°™˚
, 
i
;

569 
ngx_uöt_t
 
Àvñ
;

570 
ngx_îr_t
 
îr
;

571 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

572 
ngx_c⁄√˘i⁄_t
 *
c
;

576 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

577 "ïﬁ»timî: %M", 
timî
);

579 
evíts
 = 
	`ïﬁl_waô
(
ï
, 
evít_li°
, (Ë
√víts
, 
timî
);

581 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

583 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

584 
	`ngx_time_upd©e
();

587 i‡(
îr
) {

588 i‡(
îr
 =
NGX_EINTR
) {

590 i‡(
ngx_evít_timî_Æ¨m
) {

591 
ngx_evít_timî_Æ¨m
 = 0;

592  
NGX_OK
;

595 
Àvñ
 = 
NGX_LOG_INFO
;

598 
Àvñ
 = 
NGX_LOG_ALERT
;

601 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "epoll_wait() failed");

602  
NGX_ERROR
;

605 i‡(
evíts
 == 0) {

606 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

607  
NGX_OK
;

610 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

612  
NGX_ERROR
;

615 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

617 
i
 = 0; i < 
evíts
; i++) {

618 
c
 = 
evít_li°
[
i
].
d©a
.
±r
;

620 
ö°™˚
 = (
uöçå_t
Ë
c
 & 1;

621 
c
 = (
ngx_c⁄√˘i⁄_t
 *Ë((
uöçå_t
) c & (uintptr_t) ~1);

623 
ªv
 = 
c
->
ªad
;

625 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

632 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

633 "ïﬁl: sèÀÉvíà%p", 
c
);

637 
ªvíts
 = 
evít_li°
[
i
].
evíts
;

639 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

641 
c
->
fd
, 
ªvíts
, 
evít_li°
[
i
].
d©a
.
±r
);

643 i‡(
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
)) {

644 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

646 
c
->
fd
, 
ªvíts
);

650 i‡(
ªvíts
 & ~(
EPOLLIN
|
EPOLLOUT
|
EPOLLERR
|
EPOLLHUP
)) {

651 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

653 
c
->
fd
, 
ªvíts
);

657 i‡((
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
))

658 && (
ªvíts
 & (
EPOLLIN
|
EPOLLOUT
)) == 0)

666 
ªvíts
 |
EPOLLIN
|
EPOLLOUT
;

669 i‡((
ªvíts
 & 
EPOLLIN
Ë&& 
ªv
->
a˘ive
) {

671 #i‡(
NGX_HAVE_EPOLLRDHUP
)

672 i‡(
ªvíts
 & 
EPOLLRDHUP
) {

673 
ªv
->
≥ndög_eof
 = 1;

677 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

678 
ªv
->
po°ed_ªady
 = 1;

681 
ªv
->
ªady
 = 1;

684 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

685 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

686 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

688 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

691 
ªv
->
	`h™dÀr
(rev);

695 
wev
 = 
c
->
wrôe
;

697 i‡((
ªvíts
 & 
EPOLLOUT
Ë&& 
wev
->
a˘ive
) {

699 i‡(
c
->
fd
 =-1 || 
wev
->
ö°™˚
 != instance) {

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

707 "ïﬁl: sèÀÉvíà%p", 
c
);

711 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

712 
wev
->
po°ed_ªady
 = 1;

715 
wev
->
ªady
 = 1;

718 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

719 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

722 
wev
->
	`h™dÀr
(wev);

727 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

729  
NGX_OK
;

730 
	}
}

733 #i‡(
NGX_HAVE_FILE_AIO
)

736 
	$ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
)

738 
n
, 
evíts
;

739 
i
;

740 
uöt64_t
 
ªady
;

741 
ngx_îr_t
 
îr
;

742 
ngx_evít_t
 *
e
;

743 
ngx_evít_aio_t
 *
aio
;

744 
io_evít
 
evít
[64];

745 
time•ec
 
ts
;

747 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "eventfd handler");

749 
n
 = 
	`ªad
(
ngx_evítfd
, &
ªady
, 8);

751 
îr
 = 
ngx_î∫o
;

753 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "evítfd: %d", 
n
);

755 i‡(
n
 != 8) {

756 i‡(
n
 == -1) {

757 i‡(
îr
 =
NGX_EAGAIN
) {

761 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
, "read(eventfd) failed");

765 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

766 "ªad”vítfdËªtu∫ed o∆y %d byãs", 
n
);

770 
ts
.
tv_£c
 = 0;

771 
ts
.
tv_n£c
 = 0;

773 
ªady
) {

775 
evíts
 = 
	`io_gëevíts
(
ngx_aio_˘x
, 1, 64, 
evít
, &
ts
);

777 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

778 "io_gëevíts: %l", 
evíts
);

780 i‡(
evíts
 > 0) {

781 
ªady
 -
evíts
;

783 
i
 = 0; i < 
evíts
; i++) {

785 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

787 
evít
[
i
].
d©a
,Évít[i].
obj
,

788 
evít
[
i
].
ªs
,Évít[i].
ªs2
);

790 
e
 = (
ngx_evít_t
 *Ë(
uöçå_t
Ë
evít
[
i
].
d©a
;

792 
e
->
com∂ëe
 = 1;

793 
e
->
a˘ive
 = 0;

794 
e
->
ªady
 = 1;

796 
aio
 = 
e
->
d©a
;

797 
aio
->
ªs
 = 
evít
[
i
].res;

799 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

805 i‡(
evíts
 == 0) {

810 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

814 
	}
}

820 
	$ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

822 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

824 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_ïﬁl_c⁄f_t
));

825 i‡(
ïcf
 =
NULL
) {

826  
NULL
;

829 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

830 
ïcf
->
aio_ªque°s
 = 
NGX_CONF_UNSET
;

832  
ïcf
;

833 
	}
}

837 
	$ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

839 
ngx_ïﬁl_c⁄f_t
 *
ïcf
 = 
c⁄f
;

841 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 512);

842 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
aio_ªque°s
, 32);

844  
NGX_CONF_OK
;

845 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_eventport_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EVENTPORT
)

15 
	#ush‹t_t
 
u_sh‹t


	)

16 
	#uöt_t
 
u_öt


	)

18 #i‚de‡
CLOCK_REALTIME


19 
	#CLOCK_REALTIME
 0

	)

20 
	t˛ockid_t
;

21 * 
	ttimî_t
;

26 
	#PORT_SOURCE_AIO
 1

	)

27 
	#PORT_SOURCE_TIMER
 2

	)

28 
	#PORT_SOURCE_USER
 3

	)

29 
	#PORT_SOURCE_FD
 4

	)

30 
	#PORT_SOURCE_ALERT
 5

	)

31 
	#PORT_SOURCE_MQ
 6

	)

33 #i‚de‡
ETIME


34 
	#ETIME
 64

	)

37 
	#SIGEV_PORT
 4

	)

40 
	mp‹ãv_evíts
;

41 
ush‹t_t
 
	mp‹ãv_sour˚
;

42 
ush‹t_t
 
	mp‹ãv_∑d
;

43 
uöçå_t
 
	mp‹ãv_obje˘
;

44 *
	mp‹ãv_u£r
;

45 } 
	tp‹t_evít_t
;

47 
	sp‹t_nŸify
 {

48 
	mp‹äfy_p‹t
;

49 *
	mp‹äfy_u£r
;

50 } 
	tp‹t_nŸify_t
;

52 #i‡(
__FªeBSD_vîsi⁄
 < 700005)

54 
	sôimî•ec
 {

55 
time•ec
 
	mô_öãrvÆ
;

56 
time•ec
 
	mô_vÆue
;

57 } 
	tôimî•ec_t
;

61 
p‹t_¸óã
();

63 
	$p‹t_¸óã
()

66 
	}
}

69 
p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

70 *
u£r
);

72 
	$p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

73 *
u£r
)

76 
	}
}

79 
p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
);

81 
	$p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
)

84 
	}
}

87 
p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

88 
time•ec
 *
timeout
);

90 
	$p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

91 
time•ec
 *
timeout
)

94 
	}
}

97 
timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
);

99 
	$timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

102 
	}
}

105 
timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

106 
ôimî•ec
 *
ovÆue
);

108 
	$timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

109 
ôimî•ec
 *
ovÆue
)

112 
	}
}

115 
timî_dñëe
(
timî_t
 
timîid
);

117 
	$timî_dñëe
(
timî_t
 
timîid
)

120 
	}
}

126 
ngx_uöt_t
 
	mevíts
;

127 } 
	tngx_evíç‹t_c⁄f_t
;

130 
ngx_öt_t
 
ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

131 
ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

132 
ngx_öt_t
 
ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

133 
ngx_uöt_t
 
Êags
);

134 
ngx_öt_t
 
ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

135 
ngx_uöt_t
 
Êags
);

136 
ngx_öt_t
 
ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

137 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

139 *
ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

140 *
ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

142 
	gï
 = -1;

143 
p‹t_evít_t
 *
	gevít_li°
;

144 
ngx_uöt_t
 
	g√víts
;

145 
timî_t
 
	gevít_timî
 = (timer_t) -1;

147 
ngx_°r_t
 
	gevíç‹t_«me
 = 
ngx_°rög
("eventport");

150 
ngx_comm™d_t
 
	gngx_evíç‹t_comm™ds
[] = {

152 { 
ngx_°rög
("eventport_events"),

153 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

154 
ngx_c⁄f_£t_num_¶Ÿ
,

156 
off£tof
(
ngx_evíç‹t_c⁄f_t
, 
evíts
),

157 
NULL
 },

159 
ngx_nuŒ_comm™d


163 
ngx_evít_moduÀ_t
 
	gngx_evíç‹t_moduÀ_˘x
 = {

164 &
evíç‹t_«me
,

165 
ngx_evíç‹t_¸óã_c⁄f
,

166 
ngx_evíç‹t_öô_c⁄f
,

169 
ngx_evíç‹t_add_evít
,

170 
ngx_evíç‹t_dñ_evít
,

171 
ngx_evíç‹t_add_evít
,

172 
ngx_evíç‹t_dñ_evít
,

173 
NULL
,

174 
NULL
,

175 
NULL
,

176 
ngx_evíç‹t_¥o˚ss_evíts
,

177 
ngx_evíç‹t_öô
,

178 
ngx_evíç‹t_d⁄e
,

183 
ngx_moduÀ_t
 
	gngx_evíç‹t_moduÀ
 = {

184 
NGX_MODULE_V1
,

185 &
ngx_evíç‹t_moduÀ_˘x
,

186 
ngx_evíç‹t_comm™ds
,

187 
NGX_EVENT_MODULE
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NGX_MODULE_V1_PADDING


199 
ngx_öt_t


200 
	$ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

202 
p‹t_nŸify_t
 
≤
;

203 
ôimî•ec
 
ôs
;

204 
sigevít
 
£v
;

205 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

207 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíç‹t_moduÀ
);

209 i‡(
ï
 == -1) {

210 
ï
 = 
	`p‹t_¸óã
();

212 i‡(
ï
 == -1) {

213 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

215  
NGX_ERROR
;

219 i‡(
√víts
 < 
ïcf
->
evíts
) {

220 i‡(
evít_li°
) {

221 
	`ngx_‰ì
(
evít_li°
);

224 
evít_li°
 = 
	`ngx_Æloc
((
p‹t_evít_t
Ë* 
ïcf
->
evíts
,

225 
cy˛e
->
log
);

226 i‡(
evít_li°
 =
NULL
) {

227  
NGX_ERROR
;

231 
ngx_evít_Êags
 = 
NGX_USE_EVENTPORT_EVENT
;

233 i‡(
timî
) {

234 
	`ngx_memzîo
(&
≤
, (
p‹t_nŸify_t
));

235 
≤
.
p‹äfy_p‹t
 = 
ï
;

237 
	`ngx_memzîo
(&
£v
, (
sigevít
));

238 
£v
.
sigev_nŸify
 = 
SIGEV_PORT
;

239 #i‡!(
NGX_TEST_BUILD_EVENTPORT
)

240 
£v
.
sigev_vÆue
.
sivÆ_±r
 = &
≤
;

243 i‡(
	`timî_¸óã
(
CLOCK_REALTIME
, &
£v
, &
evít_timî
) == -1) {

244 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

246  
NGX_ERROR
;

249 
ôs
.
ô_öãrvÆ
.
tv_£c
 = 
timî
 / 1000;

250 
ôs
.
ô_öãrvÆ
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

251 
ôs
.
ô_vÆue
.
tv_£c
 = 
timî
 / 1000;

252 
ôs
.
ô_vÆue
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

254 i‡(
	`timî_£âime
(
evít_timî
, 0, &
ôs
, 
NULL
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

257  
NGX_ERROR
;

260 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

263 
√víts
 = 
ïcf
->
evíts
;

265 
ngx_io
 = 
ngx_os_io
;

267 
ngx_evít_a˘i⁄s
 = 
ngx_evíç‹t_moduÀ_˘x
.
a˘i⁄s
;

269  
NGX_OK
;

270 
	}
}

274 
	$ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

276 i‡(
evít_timî
 !(
timî_t
) -1) {

277 i‡(
	`timî_dñëe
(
evít_timî
) == -1) {

278 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

282 
evít_timî
 = (
timî_t
) -1;

285 i‡(
	`˛o£
(
ï
) == -1) {

286 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

290 
ï
 = -1;

292 
	`ngx_‰ì
(
evít_li°
);

294 
evít_li°
 = 
NULL
;

295 
√víts
 = 0;

296 
	}
}

299 
ngx_öt_t


300 
	$ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

302 
ngx_öt_t
 
evíts
, 
¥ev
;

303 
ngx_evít_t
 *
e
;

304 
ngx_c⁄√˘i⁄_t
 *
c
;

306 
c
 = 
ev
->
d©a
;

308 
evíts
 = 
evít
;

310 i‡(
evít
 =
NGX_READ_EVENT
) {

311 
e
 = 
c
->
wrôe
;

312 
¥ev
 = 
POLLOUT
;

313 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

314 
evíts
 = 
POLLIN
;

318 
e
 = 
c
->
ªad
;

319 
¥ev
 = 
POLLIN
;

320 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

321 
evíts
 = 
POLLOUT
;

325 i‡(
e
->
⁄eshŸ
) {

326 
evíts
 |
¥ev
;

329 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

330 "evíç‹àaddÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evíts
);

332 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evíts
,

333 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

336 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

338  
NGX_ERROR
;

341 
ev
->
a˘ive
 = 1;

342 
ev
->
⁄eshŸ
 = 1;

344  
NGX_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

351 
ngx_evít_t
 *
e
;

352 
ngx_c⁄√˘i⁄_t
 *
c
;

360 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

361 
ev
->
a˘ive
 = 0;

362 
ev
->
⁄eshŸ
 = 0;

363  
NGX_OK
;

366 
c
 = 
ev
->
d©a
;

368 i‡(
evít
 =
NGX_READ_EVENT
) {

369 
e
 = 
c
->
wrôe
;

370 
evít
 = 
POLLOUT
;

373 
e
 = 
c
->
ªad
;

374 
evít
 = 
POLLIN
;

377 i‡(
e
->
⁄eshŸ
) {

378 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

379 "evíç‹àch™gêevít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

381 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evít
,

382 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

385 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

387  
NGX_ERROR
;

391 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

392 "evíç‹àdñÉvít: fd:%d", 
c
->
fd
);

394 i‡(
	`p‹t_dissocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
) == -1) {

395 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

397  
NGX_ERROR
;

401 
ev
->
a˘ive
 = 0;

402 
ev
->
⁄eshŸ
 = 0;

404  
NGX_OK
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

410 
ngx_uöt_t
 
Êags
)

412 
n
, 
ªvíts
;

413 
u_öt
 
evíts
;

414 
ngx_îr_t
 
îr
;

415 
ngx_öt_t
 
ö°™˚
;

416 
ngx_uöt_t
 
i
, 
Àvñ
;

417 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
, **
queue
;

418 
ngx_c⁄√˘i⁄_t
 *
c
;

419 
time•ec
 
ts
, *
ç
;

421 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

422 
ç
 = 
NULL
;

425 
ts
.
tv_£c
 = 
timî
 / 1000;

426 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

427 
ç
 = &
ts
;

430 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

431 "evíç‹àtimî: %M", 
timî
);

433 
evíts
 = 1;

435 
n
 = 
	`p‹t_gën
(
ï
, 
evít_li°
, (
u_öt
Ë
√víts
, &
evíts
, 
ç
);

437 
îr
 = 
ngx_î∫o
;

439 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

440 
	`ngx_time_upd©e
();

443 i‡(
n
 == -1) {

444 i‡(
îr
 =
ETIME
) {

445 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

446  
NGX_OK
;

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

451  
NGX_ERROR
;

454 
Àvñ
 = (
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
;

455 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "port_getn() failed");

456  
NGX_ERROR
;

459 i‡(
evíts
 == 0) {

460 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

461  
NGX_OK
;

464 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

466  
NGX_ERROR
;

469 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

471 
i
 = 0; i < 
evíts
; i++) {

473 i‡(
evít_li°
[
i
].
p‹ãv_sour˚
 =
PORT_SOURCE_TIMER
) {

474 
	`ngx_time_upd©e
();

478 
ev
 = 
evít_li°
[
i
].
p‹ãv_u£r
;

480 
evít_li°
[
i
].
p‹ãv_sour˚
) {

482 
PORT_SOURCE_FD
:

484 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

485 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

487 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

494 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

495 "evíç‹t: sèÀÉvíà%p", 
ev
);

499 
ªvíts
 = 
evít_li°
[
i
].
p‹ãv_evíts
;

501 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

503 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

505 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

506 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

508 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

511 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

512 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

514 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

517 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

518 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

526 
ªvíts
 |
POLLIN
|
POLLOUT
;

529 
c
 = 
ev
->
d©a
;

530 
ªv
 = 
c
->
ªad
;

531 
wev
 = 
c
->
wrôe
;

533 
ªv
->
a˘ive
 = 0;

534 
wev
->
a˘ive
 = 0;

536 i‡(
ªvíts
 & 
POLLIN
) {

538 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

539 
ªv
->
po°ed_ªady
 = 1;

542 
ªv
->
ªady
 = 1;

545 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

546 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

547 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

549 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

552 
ªv
->
	`h™dÀr
(rev);

554 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

559 i‡(
ªv
->
ac˚±
) {

560 i‡(
ngx_u£_ac˚±_muãx
) {

561 
ngx_ac˚±_evíts
 = 1;

565 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
POLLIN
,

566 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

569 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

571  
NGX_ERROR
;

576 i‡(
ªvíts
 & 
POLLOUT
) {

578 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

579 
wev
->
po°ed_ªady
 = 1;

582 
wev
->
ªady
 = 1;

585 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

586 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

589 
wev
->
	`h™dÀr
(wev);

596 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

598 
evít_li°
[
i
].
p‹ãv_obje˘
);

603 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

605  
NGX_OK
;

606 
	}
}

610 
	$ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

612 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

614 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evíç‹t_c⁄f_t
));

615 i‡(
ïcf
 =
NULL
) {

616  
NULL
;

619 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

621  
ïcf
;

622 
	}
}

626 
	$ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

628 
ngx_evíç‹t_c⁄f_t
 *
ïcf
 = 
c⁄f
;

630 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 32);

632  
NGX_CONF_OK
;

633 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_kqueue_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mch™ges
;

15 
ngx_uöt_t
 
	mevíts
;

16 } 
	tngx_kqueue_c⁄f_t
;

19 
ngx_öt_t
 
ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

20 
ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_öt_t
 
ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

22 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

24 
ngx_uöt_t
 
Êags
);

25 
ngx_öt_t
 
ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
fûãr
,

26 
ngx_uöt_t
 
Êags
);

27 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
);

28 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

29 
ngx_uöt_t
 
Êags
);

30 
ngx_ölöe
 
ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
,

31 
kevít
 *
kev
);

33 *
ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

34 *
ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

37 
	gngx_kqueue
 = -1;

47 
kevít
 *
	gch™ge_li°
, *
	gch™ge_li°0
, *
	gch™ge_li°1
;

48 
kevít
 *
	gevít_li°
;

49 
ngx_uöt_t
 
	gmax_ch™ges
, 
	gnch™ges
, 
	g√víts
;

51 #i‡(
NGX_THREADS
)

52 
ngx_muãx_t
 *
	gli°_muãx
;

53 
ngx_muãx_t
 *
	gkevít_muãx
;

58 
ngx_°r_t
 
	gkqueue_«me
 = 
ngx_°rög
("kqueue");

60 
ngx_comm™d_t
 
	gngx_kqueue_comm™ds
[] = {

62 { 
ngx_°rög
("kqueue_changes"),

63 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_c⁄f_£t_num_¶Ÿ
,

66 
off£tof
(
ngx_kqueue_c⁄f_t
, 
ch™ges
),

67 
NULL
 },

69 { 
ngx_°rög
("kqueue_events"),

70 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_num_¶Ÿ
,

73 
off£tof
(
ngx_kqueue_c⁄f_t
, 
evíts
),

74 
NULL
 },

76 
ngx_nuŒ_comm™d


80 
ngx_evít_moduÀ_t
 
	gngx_kqueue_moduÀ_˘x
 = {

81 &
kqueue_«me
,

82 
ngx_kqueue_¸óã_c⁄f
,

83 
ngx_kqueue_öô_c⁄f
,

86 
ngx_kqueue_add_evít
,

87 
ngx_kqueue_dñ_evít
,

88 
ngx_kqueue_add_evít
,

89 
ngx_kqueue_dñ_evít
,

90 
NULL
,

91 
NULL
,

92 
ngx_kqueue_¥o˚ss_ch™ges
,

93 
ngx_kqueue_¥o˚ss_evíts
,

94 
ngx_kqueue_öô
,

95 
ngx_kqueue_d⁄e


100 
ngx_moduÀ_t
 
	gngx_kqueue_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_kqueue_moduÀ_˘x
,

103 
ngx_kqueue_comm™ds
,

104 
NGX_EVENT_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_öt_t


117 
	$ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

119 
ngx_kqueue_c⁄f_t
 *
kcf
;

120 
time•ec
 
ts
;

121 #i‡(
NGX_HAVE_TIMER_EVENT
)

122 
kevít
 
kev
;

125 
kcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_kqueue_moduÀ
);

127 i‡(
ngx_kqueue
 == -1) {

128 
ngx_kqueue
 = 
	`kqueue
();

130 i‡(
ngx_kqueue
 == -1) {

131 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

133  
NGX_ERROR
;

136 #i‡(
NGX_THREADS
)

138 
li°_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

139 i‡(
li°_muãx
 =
NULL
) {

140  
NGX_ERROR
;

143 
kevít_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

144 i‡(
kevít_muãx
 =
NULL
) {

145  
NGX_ERROR
;

151 i‡(
max_ch™ges
 < 
kcf
->
ch™ges
) {

152 i‡(
nch™ges
) {

153 
ts
.
tv_£c
 = 0;

154 
ts
.
tv_n£c
 = 0;

156 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

161  
NGX_ERROR
;

163 
nch™ges
 = 0;

166 i‡(
ch™ge_li°0
) {

167 
	`ngx_‰ì
(
ch™ge_li°0
);

170 
ch™ge_li°0
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

171 
cy˛e
->
log
);

172 i‡(
ch™ge_li°0
 =
NULL
) {

173  
NGX_ERROR
;

176 i‡(
ch™ge_li°1
) {

177 
	`ngx_‰ì
(
ch™ge_li°1
);

180 
ch™ge_li°1
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

181 
cy˛e
->
log
);

182 i‡(
ch™ge_li°1
 =
NULL
) {

183  
NGX_ERROR
;

186 
ch™ge_li°
 = 
ch™ge_li°0
;

189 
max_ch™ges
 = 
kcf
->
ch™ges
;

191 i‡(
√víts
 < 
kcf
->
evíts
) {

192 i‡(
evít_li°
) {

193 
	`ngx_‰ì
(
evít_li°
);

196 
evít_li°
 = 
	`ngx_Æloc
(
kcf
->
evíts
 * (
kevít
), 
cy˛e
->
log
);

197 i‡(
evít_li°
 =
NULL
) {

198  
NGX_ERROR
;

202 
ngx_evít_Êags
 = 
NGX_USE_ONESHOT_EVENT


203 |
NGX_USE_KQUEUE_EVENT


204 |
NGX_USE_VNODE_EVENT
;

206 #i‡(
NGX_HAVE_TIMER_EVENT
)

208 i‡(
timî
) {

209 
kev
.
idít
 = 0;

210 
kev
.
fûãr
 = 
EVFILT_TIMER
;

211 
kev
.
Êags
 = 
EV_ADD
|
EV_ENABLE
;

212 
kev
.
fÊags
 = 0;

213 
kev
.
d©a
 = 
timî
;

214 
kev
.
ud©a
 = 0;

216 
ts
.
tv_£c
 = 0;

217 
ts
.
tv_n£c
 = 0;

219 i‡(
	`kevít
(
ngx_kqueue
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

220 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

222  
NGX_ERROR
;

225 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

230 #i‡(
NGX_HAVE_CLEAR_EVENT
)

231 
ngx_evít_Êags
 |
NGX_USE_CLEAR_EVENT
;

233 
ngx_evít_Êags
 |
NGX_USE_LEVEL_EVENT
;

236 #i‡(
NGX_HAVE_LOWAT_EVENT
)

237 
ngx_evít_Êags
 |
NGX_USE_LOWAT_EVENT
;

240 
√víts
 = 
kcf
->
evíts
;

242 
ngx_io
 = 
ngx_os_io
;

244 
ngx_evít_a˘i⁄s
 = 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
;

246  
NGX_OK
;

247 
	}
}

251 
	$ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

253 i‡(
	`˛o£
(
ngx_kqueue
) == -1) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

258 
ngx_kqueue
 = -1;

260 #i‡(
NGX_THREADS
)

261 
	`ngx_muãx_de°roy
(
kevít_muãx
);

262 
	`ngx_muãx_de°roy
(
li°_muãx
);

265 
	`ngx_‰ì
(
ch™ge_li°1
);

266 
	`ngx_‰ì
(
ch™ge_li°0
);

267 
	`ngx_‰ì
(
evít_li°
);

269 
ch™ge_li°1
 = 
NULL
;

270 
ch™ge_li°0
 = 
NULL
;

271 
ch™ge_li°
 = 
NULL
;

272 
evít_li°
 = 
NULL
;

273 
max_ch™ges
 = 0;

274 
nch™ges
 = 0;

275 
√víts
 = 0;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

282 
ngx_öt_t
 
rc
;

284 
ngx_evít_t
 *
e
;

285 
ngx_c⁄√˘i⁄_t
 *
c
;

288 
ev
->
a˘ive
 = 1;

289 
ev
->
dißbÀd
 = 0;

290 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

292 
	`ngx_muãx_lock
(
li°_muãx
);

296 i‡(
ev
->
ödex
 < 
nch™ges


297 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

298 =(
uöçå_t
Ë
ev
)

300 i‡(
ch™ge_li°
[
ev
->
ödex
].
Êags
 =
EV_DISABLE
) {

307 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

309 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

311 i‡(
ev
->
ödex
 < --
nch™ges
) {

312 
e
 = (
ngx_evít_t
 *)

313 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

314 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

315 
e
->
ödex
 = 
ev
->index;

318 
	`ngx_muãx_u∆ock
(
li°_muãx
);

320  
NGX_OK
;

323 
c
 = 
ev
->
d©a
;

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

326 "¥eviou†evíà⁄ #%d wîênŸÖas£d i¿kî√l", 
c
->
fd
);

328 
	`ngx_muãx_u∆ock
(
li°_muãx
);

330  
NGX_ERROR
;

335 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
EV_ADD
|
EV_ENABLE
|
Êags
);

337 
	`ngx_muãx_u∆ock
(
li°_muãx
);

339  
rc
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

346 
ngx_öt_t
 
rc
;

347 
ngx_evít_t
 *
e
;

349 
ev
->
a˘ive
 = 0;

350 
ev
->
dißbÀd
 = 0;

352 
	`ngx_muãx_lock
(
li°_muãx
);

354 i‡(
ev
->
ödex
 < 
nch™ges


355 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

356 =(
uöçå_t
Ë
ev
)

358 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

360 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

364 
nch™ges
--;

366 i‡(
ev
->
ödex
 < 
nch™ges
) {

367 
e
 = (
ngx_evít_t
 *)

368 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

369 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

370 
e
->
ödex
 = 
ev
->index;

373 
	`ngx_muãx_u∆ock
(
li°_muãx
);

375  
NGX_OK
;

384 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

385 
	`ngx_muãx_u∆ock
(
li°_muãx
);

386  
NGX_OK
;

389 i‡(
Êags
 & 
NGX_DISABLE_EVENT
) {

390 
ev
->
dißbÀd
 = 1;

393 
Êags
 |
EV_DELETE
;

396 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
Êags
);

398 
	`ngx_muãx_u∆ock
(
li°_muãx
);

400  
rc
;

401 
	}
}

404 
ngx_öt_t


405 
	$ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
fûãr
, 
ngx_uöt_t
 
Êags
)

407 
kevít
 *
kev
;

408 
time•ec
 
ts
;

409 
ngx_c⁄√˘i⁄_t
 *
c
;

411 
c
 = 
ev
->
d©a
;

413 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

415 
c
->
fd
, 
fûãr
, 
Êags
);

417 i‡(
nch™ges
 >
max_ch™ges
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

421 
ts
.
tv_£c
 = 0;

422 
ts
.
tv_n£c
 = 0;

424 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

428  
NGX_ERROR
;

431 
nch™ges
 = 0;

434 
kev
 = &
ch™ge_li°
[
nch™ges
];

436 
kev
->
idít
 = 
c
->
fd
;

437 
kev
->
fûãr
 = () filter;

438 
kev
->
Êags
 = (
u_sh‹t
) flags;

439 
kev
->
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë
ev
 |Év->
ö°™˚
);

441 i‡(
fûãr
 =
EVFILT_VNODE
) {

442 
kev
->
fÊags
 = 
NOTE_DELETE
|
NOTE_WRITE
|
NOTE_EXTEND


443 |
NOTE_ATTRIB
|
NOTE_RENAME


444 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 430000) \

445 || 
__FªeBSD_vîsi⁄
 >= 500018

446 |
NOTE_REVOKE


449 
kev
->
d©a
 = 0;

452 #i‡(
NGX_HAVE_LOWAT_EVENT
)

453 i‡(
Êags
 & 
NGX_LOWAT_EVENT
) {

454 
kev
->
fÊags
 = 
NOTE_LOWAT
;

455 
kev
->
d©a
 = 
ev
->
avaûabÀ
;

458 
kev
->
fÊags
 = 0;

459 
kev
->
d©a
 = 0;

462 
kev
->
fÊags
 = 0;

463 
kev
->
d©a
 = 0;

467 
ev
->
ödex
 = 
nch™ges
;

468 
nch™ges
++;

470 i‡(
Êags
 & 
NGX_FLUSH_EVENT
) {

471 
ts
.
tv_£c
 = 0;

472 
ts
.
tv_n£c
 = 0;

474 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "kevent flush");

476 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

479 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

480  
NGX_ERROR
;

483 
nch™ges
 = 0;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

492 
ngx_uöt_t
 
Êags
)

494 
evíts
, 
n
;

495 
ngx_öt_t
 
i
, 
ö°™˚
;

496 
ngx_uöt_t
 
Àvñ
;

497 
ngx_îr_t
 
îr
;

498 
ngx_evít_t
 *
ev
, **
queue
;

499 
time•ec
 
ts
, *
ç
;

501 i‡(
ngx_thªaded
) {

502 i‡(
	`ngx_kqueue_¥o˚ss_ch™ges
(
cy˛e
, 0Ë=
NGX_ERROR
) {

503  
NGX_ERROR
;

506 
n
 = 0;

509 
n
 = (Ë
nch™ges
;

510 
nch™ges
 = 0;

513 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

514 
ç
 = 
NULL
;

518 
ts
.
tv_£c
 = 
timî
 / 1000;

519 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

527 #i‡(
NGX_DARWIN_KEVENT_BUG
)

528 
ts
.
tv_n£c
 <<= 32;

531 
ç
 = &
ts
;

534 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

535 "kevíàtimî: %M, ch™ges: %d", 
timî
, 
n
);

537 
evíts
 = 
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, 
n
, 
evít_li°
, (Ë
√víts
, 
ç
);

539 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

541 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

542 
	`ngx_time_upd©e
();

545 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

546 "kevíàevíts: %d", 
evíts
);

548 i‡(
îr
) {

549 i‡(
îr
 =
NGX_EINTR
) {

551 i‡(
ngx_evít_timî_Æ¨m
) {

552 
ngx_evít_timî_Æ¨m
 = 0;

553  
NGX_OK
;

556 
Àvñ
 = 
NGX_LOG_INFO
;

559 
Àvñ
 = 
NGX_LOG_ALERT
;

562 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "kevent() failed");

563  
NGX_ERROR
;

566 i‡(
evíts
 == 0) {

567 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

568  
NGX_OK
;

571 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

573  
NGX_ERROR
;

576 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

578 
i
 = 0; i < 
evíts
; i++) {

580 
	`ngx_kqueue_dump_evít
(
cy˛e
->
log
, &
evít_li°
[
i
]);

582 i‡(
evít_li°
[
i
].
Êags
 & 
EV_ERROR
) {

583 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
evít_li°
[
i
].
d©a
,

585 
evít_li°
[
i
].
idít
,Évít_li°[i].
fûãr
,

586 
evít_li°
[
i
].
Êags
);

590 #i‡(
NGX_HAVE_TIMER_EVENT
)

592 i‡(
evít_li°
[
i
].
fûãr
 =
EVFILT_TIMER
) {

593 
	`ngx_time_upd©e
();

599 
ev
 = (
ngx_evít_t
 *Ë
evít_li°
[
i
].
ud©a
;

601 
evít_li°
[
i
].
fûãr
) {

603 
EVFILT_READ
:

604 
EVFILT_WRITE
:

606 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

607 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

609 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

616 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

617 "kevít: sèÀÉvíà%p", 
ev
);

621 i‡(
ev
->
log
 && (ev->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

622 
	`ngx_kqueue_dump_evít
(
ev
->
log
, &
evít_li°
[
i
]);

625 i‡(
ev
->
⁄eshŸ
) {

626 
ev
->
a˘ive
 = 0;

629 #i‡(
NGX_THREADS
)

631 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

632 
ev
->
po°ed_ªady
 = 1;

633 
ev
->
po°ed_avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

635 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

636 
ev
->
po°ed_eof
 = 1;

637 
ev
->
po°ed_î∫o
 = 
evít_li°
[
i
].
fÊags
;

640 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

647 
ev
->
avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

649 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

650 
ev
->
≥ndög_eof
 = 1;

651 
ev
->
kq_î∫o
 = 
evít_li°
[
i
].
fÊags
;

654 
ev
->
ªady
 = 1;

658 
EVFILT_VNODE
:

659 
ev
->
kq_vnode
 = 1;

663 
EVFILT_AIO
:

664 
ev
->
com∂ëe
 = 1;

665 
ev
->
ªady
 = 1;

670 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

672 
evít_li°
[
i
].
fûãr
);

676 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

677 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

678 &
ngx_po°ed_evíts
);

679 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

684 
ev
->
	`h™dÀr
(ev);

687 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

689  
NGX_OK
;

690 
	}
}

693 
ngx_öt_t


694 
	$ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
)

696 
n
;

697 
ngx_öt_t
 
rc
;

698 
ngx_îr_t
 
îr
;

699 
time•ec
 
ts
;

700 
kevít
 *
ch™ges
;

702 
	`ngx_muãx_lock
(
kevít_muãx
);

704 
	`ngx_muãx_lock
(
li°_muãx
);

706 i‡(
nch™ges
 == 0) {

707 
	`ngx_muãx_u∆ock
(
li°_muãx
);

708 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

709  
NGX_OK
;

712 
ch™ges
 = 
ch™ge_li°
;

713 i‡(
ch™ge_li°
 =
ch™ge_li°0
) {

714 
ch™ge_li°
 = 
ch™ge_li°1
;

716 
ch™ge_li°
 = 
ch™ge_li°0
;

719 
n
 = (Ë
nch™ges
;

720 
nch™ges
 = 0;

722 
	`ngx_muãx_u∆ock
(
li°_muãx
);

724 
ts
.
tv_£c
 = 0;

725 
ts
.
tv_n£c
 = 0;

727 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

728 "kevíàch™ges: %d", 
n
);

730 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ges
, 
n
, 
NULL
, 0, &
ts
) == -1) {

731 
îr
 = 
ngx_î∫o
;

732 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

733 
cy˛e
->
log
, 
îr
, "kevent() failed");

734 
rc
 = 
NGX_ERROR
;

737 
rc
 = 
NGX_OK
;

740 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

742  
rc
;

743 
	}
}

746 
ngx_ölöe
 

747 
	$ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
, 
kevít
 *
kev
)

749 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

750 (
kev
->
idít
 > 0x8000000 && kev->ident != () -1) ?

753 
kev
->
idít
, kev->
fûãr
,

754 
kev
->
Êags
, kev->
fÊags
,

755 
kev
->
d©a
, kev->
ud©a
);

756 
	}
}

760 
	$ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

762 
ngx_kqueue_c⁄f_t
 *
kcf
;

764 
kcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_kqueue_c⁄f_t
));

765 i‡(
kcf
 =
NULL
) {

766  
NULL
;

769 
kcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

770 
kcf
->
evíts
 = 
NGX_CONF_UNSET
;

772  
kcf
;

773 
	}
}

777 
	$ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

779 
ngx_kqueue_c⁄f_t
 *
kcf
 = 
c⁄f
;

781 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
ch™ges
, 512);

782 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
evíts
, 512);

784  
NGX_CONF_OK
;

785 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_poll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 *
ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

24 
pﬁlfd
 *
	gevít_li°
;

25 
ngx_öt_t
 
	g√víts
;

28 
ngx_°r_t
 
	gpﬁl_«me
 = 
ngx_°rög
("poll");

30 
ngx_evít_moduÀ_t
 
	gngx_pﬁl_moduÀ_˘x
 = {

31 &
pﬁl_«me
,

32 
NULL
,

33 
ngx_pﬁl_öô_c⁄f
,

36 
ngx_pﬁl_add_evít
,

37 
ngx_pﬁl_dñ_evít
,

38 
ngx_pﬁl_add_evít
,

39 
ngx_pﬁl_dñ_evít
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
ngx_pﬁl_¥o˚ss_evíts
,

44 
ngx_pﬁl_öô
,

45 
ngx_pﬁl_d⁄e


50 
ngx_moduÀ_t
 
	gngx_pﬁl_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_pﬁl_moduÀ_˘x
,

53 
NULL
,

54 
NGX_EVENT_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
ngx_öt_t


68 
	$ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

70 
pﬁlfd
 *
li°
;

72 i‡(
evít_li°
 =
NULL
) {

73 
√víts
 = 0;

76 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


77 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


78 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

80 
li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
cy˛e
->
c⁄√˘i⁄_n
,

81 
cy˛e
->
log
);

82 i‡(
li°
 =
NULL
) {

83  
NGX_ERROR
;

86 i‡(
evít_li°
) {

87 
	`ngx_mem˝y
(
li°
, 
evít_li°
, (
ngx_evít_t
 *Ë* 
√víts
);

88 
	`ngx_‰ì
(
evít_li°
);

91 
evít_li°
 = 
li°
;

94 
ngx_io
 = 
ngx_os_io
;

96 
ngx_evít_a˘i⁄s
 = 
ngx_pﬁl_moduÀ_˘x
.
a˘i⁄s
;

98 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

100  
NGX_OK
;

101 
	}
}

105 
	$ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

107 
	`ngx_‰ì
(
evít_li°
);

109 
evít_li°
 = 
NULL
;

110 
	}
}

113 
ngx_öt_t


114 
	$ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

116 
ngx_evít_t
 *
e
;

117 
ngx_c⁄√˘i⁄_t
 *
c
;

119 
c
 = 
ev
->
d©a
;

121 
ev
->
a˘ive
 = 1;

123 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

125 "pﬁ»evíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

126  
NGX_OK
;

129 i‡(
evít
 =
NGX_READ_EVENT
) {

130 
e
 = 
c
->
wrôe
;

131 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

132 
evít
 = 
POLLIN
;

136 
e
 = 
c
->
ªad
;

137 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

138 
evít
 = 
POLLOUT
;

142 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

143 "pﬁ»addÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

145 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

146 
evít_li°
[
√víts
].
fd
 = 
c
->fd;

147 
evít_li°
[
√víts
].
evíts
 = (Ë
evít
;

148 
evít_li°
[
√víts
].
ªvíts
 = 0;

150 
ev
->
ödex
 = 
√víts
;

151 
√víts
++;

154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

155 "pﬁ»add index: %i", 
e
->
ödex
);

157 
evít_li°
[
e
->
ödex
].
evíts
 |(Ë
evít
;

158 
ev
->
ödex
 = 
e
->index;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

168 
ngx_evít_t
 *
e
;

169 
ngx_c⁄√˘i⁄_t
 *
c
;

171 
c
 = 
ev
->
d©a
;

173 
ev
->
a˘ive
 = 0;

175 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

178 
c
->
fd
, 
evít
);

179  
NGX_OK
;

182 i‡(
evít
 =
NGX_READ_EVENT
) {

183 
e
 = 
c
->
wrôe
;

184 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

185 
evít
 = 
POLLIN
;

189 
e
 = 
c
->
ªad
;

190 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

191 
evít
 = 
POLLOUT
;

195 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

196 "pﬁ»dñÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

198 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

199 
√víts
--;

201 i‡(
ev
->
ödex
 < (
ngx_uöt_t
Ë
√víts
) {

203 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

204 "ödex: c›yÉvíà%uòtÿ%i", 
√víts
, 
ev
->
ödex
);

206 
evít_li°
[
ev
->
ödex
] =Évít_li°[
√víts
];

208 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
√víts
].
fd
];

210 i‡(
c
->
fd
 == -1) {

211 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

215 i‡(
c
->
ªad
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

216 
c
->
ªad
->
ödex
 = 
ev
->index;

219 i‡(
c
->
wrôe
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

220 
c
->
wrôe
->
ödex
 = 
ev
->index;

226 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

227 "pﬁ»dñ index: %i", 
e
->
ödex
);

229 
evít_li°
[
e
->
ödex
].
evíts
 &(Ë~
evít
;

232 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

234  
NGX_OK
;

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

241 
ªady
, 
ªvíts
;

242 
ngx_îr_t
 
îr
;

243 
ngx_öt_t
 
i
, 
ƒódy
;

244 
ngx_uöt_t
 
found
, 
Àvñ
;

245 
ngx_evít_t
 *
ev
, **
queue
;

246 
ngx_c⁄√˘i⁄_t
 *
c
;

250 #i‡(
NGX_DEBUG0
)

251 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

252 
i
 = 0; i < 
√víts
; i++) {

253 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

255 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
);

260 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "pﬁ»timî: %M", 
timî
);

262 
ªady
 = 
	`pﬁl
(
evít_li°
, (
u_öt
Ë
√víts
, (Ë
timî
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "pﬁ»ªady %d o‡%d", 
ªady
, 
√víts
);

273 i‡(
îr
) {

274 i‡(
îr
 =
NGX_EINTR
) {

276 i‡(
ngx_evít_timî_Æ¨m
) {

277 
ngx_evít_timî_Æ¨m
 = 0;

278  
NGX_OK
;

281 
Àvñ
 = 
NGX_LOG_INFO
;

284 
Àvñ
 = 
NGX_LOG_ALERT
;

287 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "poll() failed");

288  
NGX_ERROR
;

291 i‡(
ªady
 == 0) {

292 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

293  
NGX_OK
;

296 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

298  
NGX_ERROR
;

301 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

303 
ƒódy
 = 0;

305 
i
 = 0; i < 
√víts
 && 
ªady
; i++) {

307 
ªvíts
 = 
evít_li°
[
i
].revents;

310 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

314 i‡(
ªvíts
) {

315 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

317 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

321 i‡(
ªvíts
 & 
POLLNVAL
) {

322 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

324 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

327 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

328 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

330 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

333 i‡(
evít_li°
[
i
].
fd
 == -1) {

341 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
i
].
fd
];

343 i‡(
c
->
fd
 == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "unexpectedÉvent");

351 i‡(
i
 =
√víts
 - 1) {

352 
√víts
--;

354 
evít_li°
[
i
].
fd
 = -1;

360 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

361 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

369 
ªvíts
 |
POLLIN
|
POLLOUT
;

372 
found
 = 0;

374 i‡((
ªvíts
 & 
POLLIN
Ë&& 
c
->
ªad
->
a˘ive
) {

375 
found
 = 1;

377 
ev
 = 
c
->
ªad
;

379 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

380 
ev
->
po°ed_ªady
 = 1;

383 
ev
->
ªady
 = 1;

386 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

387 &
ngx_po°ed_evíts
);

388 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

391 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
c
->
wrôe
->
a˘ive
) {

392 
found
 = 1;

393 
ev
 = 
c
->
wrôe
;

395 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

396 
ev
->
po°ed_ªady
 = 1;

399 
ev
->
ªady
 = 1;

402 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

405 i‡(
found
) {

406 
ªady
--;

411 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

413 i‡(
ªady
 != 0) {

414 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "pollÑeady !=Évents");

417  
ƒódy
;

418 
	}
}

422 
	$ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

424 
ngx_evít_c⁄f_t
 *
ecf
;

426 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

428 i‡(
ecf
->
u£
 !
ngx_pﬁl_moduÀ
.
˘x_ödex
) {

429  
NGX_CONF_OK
;

432 #i‡(
NGX_THREADS
)

434 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

436  
NGX_CONF_ERROR
;

440  
NGX_CONF_OK
;

443 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_rtsig_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_RTSIG
)

15 #i‡(
NGX_DARWIN
)

17 
	#SIGRTMIN
 33

	)

18 
	#si_fd
 
__∑d
[0]

	)

22 #ifde‡ 
SIGRTMIN


23 
	#si_fd
 
_ªas⁄
.
__•¨e__
.
__•¨e2__
[0]

	)

25 
	#SIGRTMIN
 33

	)

26 
	#si_fd
 
__•¨e__
[0]

	)

31 
	#F_SETSIG
 10

	)

32 
	#KERN_RTSIGNR
 30

	)

33 
	#KERN_RTSIGMAX
 31

	)

35 
sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

36 c⁄° 
time•ec
 *
timeout
);

38 
	$sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

39 c⁄° 
time•ec
 *
timeout
)

42 
	}
}

44 
	gngx_löux_πsig_max
;

50 
ngx_uöt_t
 
	msigno
;

51 
ngx_uöt_t
 
	movîÊow_evíts
;

52 
ngx_uöt_t
 
	movîÊow_ã°
;

53 
ngx_uöt_t
 
	movîÊow_thªshﬁd
;

54 } 
	tngx_πsig_c⁄f_t
;

57 
ngx_evít_moduÀ_t
 
ngx_pﬁl_moduÀ_˘x
;

59 
ngx_öt_t
 
ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

60 
ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

61 
ngx_öt_t
 
ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

62 
ngx_öt_t
 
ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

63 
ngx_uöt_t
 
Êags
);

64 
ngx_öt_t
 
ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

65 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

66 
ngx_öt_t
 
ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
,

67 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

69 *
ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

70 *
ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

71 *
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
,

72 *
po°
, *
d©a
);

75 
sig£t_t
 
	g£t
;

76 
ngx_uöt_t
 
	govîÊow
, 
	govîÊow_cuºít
;

77 
pﬁlfd
 *
	govîÊow_li°
;

80 
ngx_°r_t
 
	gπsig_«me
 = 
ngx_°rög
("rtsig");

82 
ngx_c⁄f_num_bounds_t
 
	gngx_ovîÊow_thªshﬁd_bounds
 = {

83 
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
, 2, 10

87 
ngx_comm™d_t
 
	gngx_πsig_comm™ds
[] = {

89 { 
ngx_°rög
("rtsig_signo"),

90 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_c⁄f_£t_num_¶Ÿ
,

93 
off£tof
(
ngx_πsig_c⁄f_t
, 
signo
),

94 
NULL
 },

96 { 
ngx_°rög
("rtsig_overflow_events"),

97 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_num_¶Ÿ
,

100 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_evíts
),

101 
NULL
 },

103 { 
ngx_°rög
("rtsig_overflow_test"),

104 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

105 
ngx_c⁄f_£t_num_¶Ÿ
,

107 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_ã°
),

108 
NULL
 },

110 { 
ngx_°rög
("rtsig_overflow_threshold"),

111 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

112 
ngx_c⁄f_£t_num_¶Ÿ
,

114 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_thªshﬁd
),

115 &
ngx_ovîÊow_thªshﬁd_bounds
 },

117 
ngx_nuŒ_comm™d


121 
ngx_evít_moduÀ_t
 
	gngx_πsig_moduÀ_˘x
 = {

122 &
πsig_«me
,

123 
ngx_πsig_¸óã_c⁄f
,

124 
ngx_πsig_öô_c⁄f
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
ngx_πsig_add_c⁄√˘i⁄
,

132 
ngx_πsig_dñ_c⁄√˘i⁄
,

133 
NULL
,

134 
ngx_πsig_¥o˚ss_evíts
,

135 
ngx_πsig_öô
,

136 
ngx_πsig_d⁄e
,

141 
ngx_moduÀ_t
 
	gngx_πsig_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_πsig_moduÀ_˘x
,

144 
ngx_πsig_comm™ds
,

145 
NGX_EVENT_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


157 
ngx_öt_t


158 
	$ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

160 
ngx_πsig_c⁄f_t
 *
πscf
;

162 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

164 
	`sigem±y£t
(&
£t
);

165 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
);

166 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
 + 1);

167 
	`sigadd£t
(&
£t
, 
SIGIO
);

168 
	`sigadd£t
(&
£t
, 
SIGALRM
);

170 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

171 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

173  
NGX_ERROR
;

176 i‡(
ovîÊow_li°
) {

177 
	`ngx_‰ì
(
ovîÊow_li°
);

180 
ovîÊow_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
πscf
->
ovîÊow_evíts
,

181 
cy˛e
->
log
);

182 i‡(
ovîÊow_li°
 =
NULL
) {

183  
NGX_ERROR
;

186 
ngx_io
 = 
ngx_os_io
;

188 
ngx_evít_a˘i⁄s
 = 
ngx_πsig_moduÀ_˘x
.
a˘i⁄s
;

190 
ngx_evít_Êags
 = 
NGX_USE_RTSIG_EVENT


191 |
NGX_USE_GREEDY_EVENT


192 |
NGX_USE_FD_EVENT
;

194  
NGX_OK
;

195 
	}
}

199 
	$ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

201 
	`ngx_‰ì
(
ovîÊow_li°
);

203 
ovîÊow_li°
 = 
NULL
;

204 
	}
}

207 
ngx_öt_t


208 
	$ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

210 
ngx_uöt_t
 
signo
;

211 
ngx_πsig_c⁄f_t
 *
πscf
;

213 i‡(
c
->
ªad
->
ac˚±
 && c->ªad->
dißbÀd
) {

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

216 "πsigÉ«bÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

218 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

219 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

221  
NGX_ERROR
;

224 
c
->
ªad
->
a˘ive
 = 1;

225 
c
->
ªad
->
dißbÀd
 = 0;

228 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

230 
signo
 = 
πscf
->signÿ+ 
c
->
ªad
->
ö°™˚
;

232 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

233 "πsigádd c⁄√˘i⁄: fd:%d signo:%ui", 
c
->
fd
, 
signo
);

235 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
|
O_ASYNC
) == -1) {

236 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

238  
NGX_ERROR
;

241 i‡(
	`f˙é
(
c
->
fd
, 
F_SETSIG
, (Ë
signo
) == -1) {

242 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

244  
NGX_ERROR
;

247 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

248 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

250  
NGX_ERROR
;

253 #i‡(
NGX_HAVE_ONESIGFD
)

254 i‡(
	`f˙é
(
c
->
fd
, 
F_SETAUXFL
, 
O_ONESIGFD
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

257  
NGX_ERROR
;

261 
c
->
ªad
->
a˘ive
 = 1;

262 
c
->
wrôe
->
a˘ive
 = 1;

264  
NGX_OK
;

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

272 "πsig dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

274 i‡((
Êags
 & 
NGX_DISABLE_EVENT
Ë&& 
c
->
ªad
->
ac˚±
) {

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

277 "πsig dißbÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

279 
c
->
ªad
->
a˘ive
 = 0;

280 
c
->
ªad
->
dißbÀd
 = 1;

281  
NGX_OK
;

284 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

285 
c
->
ªad
->
a˘ive
 = 0;

286 
c
->
wrôe
->
a˘ive
 = 0;

287  
NGX_OK
;

290 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
) == -1) {

291 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

293  
NGX_ERROR
;

296 
c
->
ªad
->
a˘ive
 = 0;

297 
c
->
wrôe
->
a˘ive
 = 0;

299  
NGX_OK
;

300 
	}
}

303 
ngx_öt_t


304 
	$ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

306 
signo
;

307 
ngx_öt_t
 
ö°™˚
;

308 
ngx_îr_t
 
îr
;

309 
sigöfo_t
 
si
;

310 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

311 
time•ec
 
ts
, *
ç
;

312 
siga˘i⁄
 
ß
;

313 
ngx_c⁄√˘i⁄_t
 *
c
;

314 
ngx_πsig_c⁄f_t
 *
πscf
;

316 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

317 
ç
 = 
NULL
;

320 
ts
.
tv_£c
 = 
timî
 / 1000;

321 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

322 
ç
 = &
ts
;

325 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

326 "πsigÅimî: %M", 
timî
);

330 
signo
 = 
	`sigtimedwaô
(&
£t
, &
si
, 
ç
);

332 i‡(
signo
 == -1) {

333 
îr
 = 
ngx_î∫o
;

335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 
îr
,

336 "πsig signo:%d", 
signo
);

338 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

339 
	`ngx_time_upd©e
();

342 i‡(
îr
 =
NGX_EAGAIN
) {

346 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

347  
NGX_AGAIN
;

350 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

352  
NGX_ERROR
;

355 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

356 
cy˛e
->
log
, 
îr
, "sigtimedwait() failed");

357  
NGX_ERROR
;

360 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

362 
signo
, 
si
.
si_fd
, si.
si_b™d
);

364 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

365 
	`ngx_time_upd©e
();

368 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

370 i‡(
signo
 =(Ë
πscf
->signo || signo == ()Ñtscf->signo + 1) {

372 i‡(
ovîÊow
 && (
ngx_uöt_t
Ë
si
.
si_fd
 > 
ovîÊow_cuºít
) {

373  
NGX_OK
;

376 
c
 = 
ngx_cy˛e
->
fûes
[
si
.
si_fd
];

378 i‡(
c
 =
NULL
) {

382  
NGX_OK
;

385 
ö°™˚
 = 
signo
 - (Ë
πscf
->signo;

387 
ªv
 = 
c
->
ªad
;

389 i‡(
ªv
->
ö°™˚
 != instance) {

396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

397 "πsig: sèÀÉvíà%p", 
c
);

399  
NGX_OK
;

402 i‡((
si
.
si_b™d
 & (
POLLIN
|
POLLHUP
|
POLLERR
)Ë&& 
ªv
->
a˘ive
) {

404 
ªv
->
ªady
 = 1;

406 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

407 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

408 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

410 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

413 
ªv
->
	`h™dÀr
(rev);

417 
wev
 = 
c
->
wrôe
;

419 i‡((
si
.
si_b™d
 & (
POLLOUT
|
POLLHUP
|
POLLERR
)Ë&& 
wev
->
a˘ive
) {

421 
wev
->
ªady
 = 1;

423 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

424 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

427 
wev
->
	`h™dÀr
(wev);

431  
NGX_OK
;

433 } i‡(
signo
 =
SIGALRM
) {

435 
	`ngx_time_upd©e
();

437  
NGX_OK
;

439 } i‡(
signo
 =
SIGIO
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

446 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

447 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

448 
	`sigem±y£t
(&
ß
.
ß_mask
);

450 i‡(
	`siga˘i⁄
(
πscf
->
signo
, &
ß
, 
NULL
) == -1) {

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

452 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
);

455 i‡(
	`siga˘i⁄
(
πscf
->
signo
 + 1, &
ß
, 
NULL
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

457 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
 + 1);

460 
ovîÊow
 = 1;

461 
ovîÊow_cuºít
 = 0;

462 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_ovîÊow
;

464  
NGX_ERROR
;

468 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

469 "sigtimedwaô(Ëªtu∫ed u√x≥˘ed sig«l: %d", 
signo
);

471  
NGX_ERROR
;

472 
	}
}

475 
ngx_öt_t


476 
	$ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

477 
ngx_uöt_t
 
Êags
)

479 
«me
[2], 
πsig_max
, 
πsig_ƒ
, 
evíts
, 
ªady
;

480 
size_t
 
Àn
;

481 
ngx_îr_t
 
îr
;

482 
ngx_uöt_t
 
ã°ed
, 
n
, 
i
;

483 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

484 
ngx_c⁄√˘i⁄_t
 *
c
;

485 
ngx_πsig_c⁄f_t
 *
πscf
;

487 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

490 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

492 
ã°ed
 = 0;

496 
n
 = 0;

497 
n
 < 
πscf
->
ovîÊow_evíts
) {

499 i‡(
ovîÊow_cuºít
 =
cy˛e
->
c⁄√˘i⁄_n
) {

503 
c
 = 
cy˛e
->
fûes
[
ovîÊow_cuºít
++];

505 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

509 
evíts
 = 0;

511 i‡(
c
->
ªad
->
a˘ive
 && c->ªad->
h™dÀr
) {

512 
evíts
 |
POLLIN
;

515 i‡(
c
->
wrôe
->
a˘ive
 && c->wrôe->
h™dÀr
) {

516 
evíts
 |
POLLOUT
;

519 i‡(
evíts
 == 0) {

523 
ovîÊow_li°
[
n
].
fd
 = 
c
->fd;

524 
ovîÊow_li°
[
n
].
evíts
 =Évents;

525 
ovîÊow_li°
[
n
].
ªvíts
 = 0;

526 
n
++;

529 i‡(
n
 == 0) {

534 
ªady
 = 
	`pﬁl
(
ovîÊow_li°
, 
n
, 0);

536 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

537 "πsig ovîÊowÖﬁl:%d", 
ªady
);

539 i‡(
ªady
 == -1) {

540 
îr
 = 
ngx_î∫o
;

541 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

542 
cy˛e
->
log
, 0,

545 i‡(
îr
 =
NGX_EINTR
) {

553 i‡(
ªady
 <= 0) {

557 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

559 
i
 = 0; i < 
n
; i++) {

560 
c
 = 
cy˛e
->
fûes
[
ovîÊow_li°
[
i
].
fd
];

562 i‡(
c
 =
NULL
) {

566 
ªv
 = 
c
->
ªad
;

568 i‡(
ªv
->
a˘ive


569 && !
ªv
->
˛o£d


570 && 
ªv
->
h™dÀr


571 && (
ovîÊow_li°
[
i
].
ªvíts


572 & (
POLLIN
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

574 
ã°ed
++;

576 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

577 
ªv
->
po°ed_ªady
 = 1;

580 
ªv
->
ªady
 = 1;

583 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

584 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

585 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

587 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

590 
ªv
->
	`h™dÀr
(rev);

594 
wev
 = 
c
->
wrôe
;

596 i‡(
wev
->
a˘ive


597 && !
wev
->
˛o£d


598 && 
wev
->
h™dÀr


599 && (
ovîÊow_li°
[
i
].
ªvíts


600 & (
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

602 
ã°ed
++;

604 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

605 
wev
->
po°ed_ªady
 = 1;

608 
wev
->
ªady
 = 1;

611 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

612 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

615 
wev
->
	`h™dÀr
(wev);

620 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

622 i‡(
ã°ed
 >
πscf
->
ovîÊow_ã°
) {

624 i‡(
ngx_löux_πsig_max
) {

634 
«me
[0] = 
CTL_KERN
;

635 
«me
[1] = 
KERN_RTSIGMAX
;

636 
Àn
 = (
πsig_max
);

638 i‡(
	`sys˘l
(
«me
, 2, &
πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

639 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

641  
NGX_ERROR
;

645 
«me
[1] = 
KERN_RTSIGNR
;

646 
Àn
 = (
πsig_ƒ
);

648 i‡(
	`sys˘l
(
«me
, 2, &
πsig_ƒ
, &
Àn
, 
NULL
, 0) == -1) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

651  
NGX_ERROR
;

660 i‡(
πsig_max
 / (Ë
πscf
->
ovîÊow_thªshﬁd
 < 
πsig_ƒ
) {

661 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

663 
πsig_ƒ
, 
πsig_max
);

664 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
)

677 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
) {

682 
ã°ed
 = 0;

686 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

687 
	`ngx_time_upd©e
();

690 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

693 
ovîÊow
 = 0;

694 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_evíts
;

696  
NGX_OK
;

697 
	}
}

701 
	$ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

703 
ngx_πsig_c⁄f_t
 *
πscf
;

705 
πscf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_πsig_c⁄f_t
));

706 i‡(
πscf
 =
NULL
) {

707  
NULL
;

710 
πscf
->
signo
 = 
NGX_CONF_UNSET
;

711 
πscf
->
ovîÊow_evíts
 = 
NGX_CONF_UNSET
;

712 
πscf
->
ovîÊow_ã°
 = 
NGX_CONF_UNSET
;

713 
πscf
->
ovîÊow_thªshﬁd
 = 
NGX_CONF_UNSET
;

715  
πscf
;

716 
	}
}

720 
	$ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

722 
ngx_πsig_c⁄f_t
 *
πscf
 = 
c⁄f
;

725 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
signo
, 
SIGRTMIN
 + 10);

727 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_evíts
, 16);

728 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_ã°
, 32);

729 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_thªshﬁd
, 10);

731  
NGX_CONF_OK
;

732 
	}
}

736 
	$ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

738 i‡(
ngx_löux_πsig_max
) {

739  
	`ngx_c⁄f_check_num_bounds
(
cf
, 
po°
, 
d©a
);

742 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

746  
NGX_CONF_OK
;

747 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_öt_t
 
	gmax_fd
;

31 
ngx_uöt_t
 
	g√víts
;

33 
ngx_evít_t
 **
	gevít_ödex
;

36 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

38 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

39 &
£À˘_«me
,

40 
NULL
,

41 
ngx_£À˘_öô_c⁄f
,

44 
ngx_£À˘_add_evít
,

45 
ngx_£À˘_dñ_evít
,

46 
ngx_£À˘_add_evít
,

47 
ngx_£À˘_dñ_evít
,

48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
ngx_£À˘_¥o˚ss_evíts
,

52 
ngx_£À˘_öô
,

53 
ngx_£À˘_d⁄e


58 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_£À˘_moduÀ_˘x
,

61 
NULL
,

62 
NGX_EVENT_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

77 
ngx_evít_t
 **
ödex
;

79 i‡(
evít_ödex
 =
NULL
) {

80 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

81 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

82 
√víts
 = 0;

85 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


86 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


87 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

89 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

90 
cy˛e
->
log
);

91 i‡(
ödex
 =
NULL
) {

92  
NGX_ERROR
;

95 i‡(
evít_ödex
) {

96 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

97 
	`ngx_‰ì
(
evít_ödex
);

100 
evít_ödex
 = 
ödex
;

103 
ngx_io
 = 
ngx_os_io
;

105 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

107 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

109 
max_fd
 = -1;

111  
NGX_OK
;

112 
	}
}

116 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

118 
	`ngx_‰ì
(
evít_ödex
);

120 
evít_ödex
 = 
NULL
;

121 
	}
}

124 
ngx_öt_t


125 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

127 
ngx_c⁄√˘i⁄_t
 *
c
;

129 
c
 = 
ev
->
d©a
;

131 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

132 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

134 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

136 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

137  
NGX_OK
;

140 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

141 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

145 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

146  
NGX_ERROR
;

149 i‡(
evít
 =
NGX_READ_EVENT
) {

150 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

152 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

153 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

156 i‡(
max_fd
 !-1 && max_fd < 
c
->
fd
) {

157 
max_fd
 = 
c
->
fd
;

160 
ev
->
a˘ive
 = 1;

162 
evít_ödex
[
√víts
] = 
ev
;

163 
ev
->
ödex
 = 
√víts
;

164 
√víts
++;

166  
NGX_OK
;

167 
	}
}

170 
ngx_öt_t


171 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

173 
ngx_evít_t
 *
e
;

174 
ngx_c⁄√˘i⁄_t
 *
c
;

176 
c
 = 
ev
->
d©a
;

178 
ev
->
a˘ive
 = 0;

180 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

181  
NGX_OK
;

184 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

185 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

187 i‡(
evít
 =
NGX_READ_EVENT
) {

188 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

190 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

191 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

194 i‡(
max_fd
 =
c
->
fd
) {

195 
max_fd
 = -1;

198 i‡(
ev
->
ödex
 < --
√víts
) {

199 
e
 = 
evít_ödex
[
√víts
];

200 
evít_ödex
[
ev
->
ödex
] = 
e
;

201 
e
->
ödex
 = 
ev
->index;

204 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

206  
NGX_OK
;

207 
	}
}

210 
ngx_öt_t


211 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

212 
ngx_uöt_t
 
Êags
)

214 
ªady
, 
ƒódy
;

215 
ngx_îr_t
 
îr
;

216 
ngx_uöt_t
 
i
, 
found
;

217 
ngx_evít_t
 *
ev
, **
queue
;

218 
timevÆ
 
tv
, *
ç
;

219 
ngx_c⁄√˘i⁄_t
 *
c
;

221 i‡(
max_fd
 == -1) {

222 
i
 = 0; i < 
√víts
; i++) {

223 
c
 = 
evít_ödex
[
i
]->
d©a
;

224 i‡(
max_fd
 < 
c
->
fd
) {

225 
max_fd
 = 
c
->
fd
;

229 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

230 "ch™gêmax_fd: %d", 
max_fd
);

233 #i‡(
NGX_DEBUG
)

234 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

235 
i
 = 0; i < 
√víts
; i++) {

236 
ev
 = 
evít_ödex
[
i
];

237 
c
 = 
ev
->
d©a
;

238 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

239 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

243 "max_fd: %d", 
max_fd
);

247 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

248 
ç
 = 
NULL
;

251 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

252 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

253 
ç
 = &
tv
;

256 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

257 "£À˘Åimî: %M", 
timî
);

259 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

260 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

262 
ªady
 = 
	`£À˘
(
max_fd
 + 1, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "£À˘Ñódy %d", 
ªady
);

273 i‡(
îr
) {

274 
ngx_uöt_t
 
Àvñ
;

276 i‡(
îr
 =
NGX_EINTR
) {

278 i‡(
ngx_evít_timî_Æ¨m
) {

279 
ngx_evít_timî_Æ¨m
 = 0;

280  
NGX_OK
;

283 
Àvñ
 = 
NGX_LOG_INFO
;

286 
Àvñ
 = 
NGX_LOG_ALERT
;

289 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "select() failed");

291 i‡(
îr
 =
NGX_EBADF
) {

292 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

295  
NGX_ERROR
;

298 i‡(
ªady
 == 0) {

299 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

300  
NGX_OK
;

303 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

305  
NGX_ERROR
;

308 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

310 
ƒódy
 = 0;

312 
i
 = 0; i < 
√víts
; i++) {

313 
ev
 = 
evít_ödex
[
i
];

314 
c
 = 
ev
->
d©a
;

315 
found
 = 0;

317 i‡(
ev
->
wrôe
) {

318 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

319 
found
 = 1;

320 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

321 "£À˘ wrôê%d", 
c
->
fd
);

325 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

326 
found
 = 1;

327 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

328 "£À˘Ñód %d", 
c
->
fd
);

332 i‡(
found
) {

333 
ev
->
ªady
 = 1;

335 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

336 &
ngx_po°ed_evíts
);

337 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

339 
ƒódy
++;

343 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

345 i‡(
ªady
 !
ƒódy
) {

346 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

347 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

349 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

352  
NGX_OK
;

353 
	}
}

357 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

359 
n
;

360 
sockÀn_t
 
Àn
;

361 
ngx_îr_t
 
îr
;

362 
ngx_sockë_t
 
s
;

364 
s
 = 0; s <
max_fd
; s++) {

366 i‡(
	`FD_ISSET
(
s
, &
ma°î_ªad_fd_£t
) == 0) {

370 
Àn
 = ();

372 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

373 
îr
 = 
ngx_sockë_î∫o
;

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

376 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

378 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

382 
s
 = 0; s <
max_fd
; s++) {

384 i‡(
	`FD_ISSET
(
s
, &
ma°î_wrôe_fd_£t
) == 0) {

388 
Àn
 = ();

390 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

391 
îr
 = 
ngx_sockë_î∫o
;

393 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

394 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

396 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

400 
max_fd
 = -1;

401 
	}
}

405 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

407 
ngx_evít_c⁄f_t
 *
ecf
;

409 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

411 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

412  
NGX_CONF_OK
;

417 i‡(
cy˛e
->
c⁄√˘i⁄_n
 > 
FD_SETSIZE
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

420 "suµ‹ãd by sñe˘(Ëi†%ud", 
FD_SETSIZE
);

421  
NGX_CONF_ERROR
;

424 #i‡(
NGX_THREADS
)

426 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

428  
NGX_CONF_ERROR
;

432  
NGX_CONF_OK
;

435 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_win32_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_uöt_t
 
	gmax_ªad
;

31 
ngx_uöt_t
 
	gmax_wrôe
;

32 
ngx_uöt_t
 
	g√víts
;

34 
ngx_evít_t
 **
	gevít_ödex
;

37 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

39 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

40 &
£À˘_«me
,

41 
NULL
,

42 
ngx_£À˘_öô_c⁄f
,

45 
ngx_£À˘_add_evít
,

46 
ngx_£À˘_dñ_evít
,

47 
ngx_£À˘_add_evít
,

48 
ngx_£À˘_dñ_evít
,

49 
NULL
,

50 
NULL
,

51 
NULL
,

52 
ngx_£À˘_¥o˚ss_evíts
,

53 
ngx_£À˘_öô
,

54 
ngx_£À˘_d⁄e


59 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_£À˘_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 
ngx_öt_t


76 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

78 
ngx_evít_t
 **
ödex
;

80 i‡(
evít_ödex
 =
NULL
) {

81 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

82 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

83 
√víts
 = 0;

86 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


87 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


88 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

90 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

91 
cy˛e
->
log
);

92 i‡(
ödex
 =
NULL
) {

93  
NGX_ERROR
;

96 i‡(
evít_ödex
) {

97 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

98 
	`ngx_‰ì
(
evít_ödex
);

101 
evít_ödex
 = 
ödex
;

104 
ngx_io
 = 
ngx_os_io
;

106 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

108 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

110 
max_ªad
 = 0;

111 
max_wrôe
 = 0;

113  
NGX_OK
;

114 
	}
}

118 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

120 
	`ngx_‰ì
(
evít_ödex
);

122 
evít_ödex
 = 
NULL
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

129 
ngx_c⁄√˘i⁄_t
 *
c
;

131 
c
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

134 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

136 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

138 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

139  
NGX_OK
;

142 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

143 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

147 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

148  
NGX_ERROR
;

151 i‡((
evít
 =
NGX_READ_EVENT
 && 
max_ªad
 >
FD_SETSIZE
)

152 || (
evít
 =
NGX_WRITE_EVENT
 && 
max_wrôe
 >
FD_SETSIZE
))

154 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ev
->
log
, 0,

156 "suµ‹ãd by sñe˘(Ëi†%d", 
FD_SETSIZE
);

157  
NGX_ERROR
;

160 i‡(
evít
 =
NGX_READ_EVENT
) {

161 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

162 
max_ªad
++;

164 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

165 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

166 
max_wrôe
++;

169 
ev
->
a˘ive
 = 1;

171 
evít_ödex
[
√víts
] = 
ev
;

172 
ev
->
ödex
 = 
√víts
;

173 
√víts
++;

175  
NGX_OK
;

176 
	}
}

179 
ngx_öt_t


180 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

182 
ngx_evít_t
 *
e
;

183 
ngx_c⁄√˘i⁄_t
 *
c
;

185 
c
 = 
ev
->
d©a
;

187 
ev
->
a˘ive
 = 0;

189 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

190  
NGX_OK
;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

194 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

196 i‡(
evít
 =
NGX_READ_EVENT
) {

197 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

198 
max_ªad
--;

200 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

201 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

202 
max_wrôe
--;

205 i‡(
ev
->
ödex
 < --
√víts
) {

206 
e
 = 
evít_ödex
[
√víts
];

207 
evít_ödex
[
ev
->
ödex
] = 
e
;

208 
e
->
ödex
 = 
ev
->index;

211 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

219 
ngx_uöt_t
 
Êags
)

221 
ªady
, 
ƒódy
;

222 
ngx_îr_t
 
îr
;

223 
ngx_uöt_t
 
i
, 
found
;

224 
ngx_evít_t
 *
ev
, **
queue
;

225 
timevÆ
 
tv
, *
ç
;

226 
ngx_c⁄√˘i⁄_t
 *
c
;

228 #i‡(
NGX_DEBUG
)

229 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

230 
i
 = 0; i < 
√víts
; i++) {

231 
ev
 = 
evít_ödex
[
i
];

232 
c
 = 
ev
->
d©a
;

233 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

234 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

239 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

240 
ç
 = 
NULL
;

243 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

244 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

245 
ç
 = &
tv
;

248 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

249 "£À˘Åimî: %M", 
timî
);

251 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

252 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

254 i‡(
max_ªad
 || 
max_wrôe
) {

255 
ªady
 = 
	`£À˘
(0, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

265 
	`ngx_m¶ìp
(
timî
);

267 
ªady
 = 0;

270 
îr
 = (
ªady
 =-1Ë? 
ngx_sockë_î∫o
 : 0;

272 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

273 
	`ngx_time_upd©e
();

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

277 "£À˘Ñódy %d", 
ªady
);

279 i‡(
îr
) {

280 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
, "select() failed");

282 i‡(
îr
 =
WSAENOTSOCK
) {

283 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

286  
NGX_ERROR
;

289 i‡(
ªady
 == 0) {

290 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

291  
NGX_OK
;

294 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

296  
NGX_ERROR
;

299 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

301 
ƒódy
 = 0;

303 
i
 = 0; i < 
√víts
; i++) {

304 
ev
 = 
evít_ödex
[
i
];

305 
c
 = 
ev
->
d©a
;

306 
found
 = 0;

308 i‡(
ev
->
wrôe
) {

309 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

310 
found
 = 1;

311 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 "£À˘ wrôê%d", 
c
->
fd
);

316 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

317 
found
 = 1;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

319 "£À˘Ñód %d", 
c
->
fd
);

323 i‡(
found
) {

324 
ev
->
ªady
 = 1;

326 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

327 &
ngx_po°ed_evíts
);

328 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

330 
ƒódy
++;

334 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

336 i‡(
ªady
 !
ƒódy
) {

337 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

338 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

340 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

343  
NGX_OK
;

344 
	}
}

348 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

350 
n
;

351 
u_öt
 
i
;

352 
sockÀn_t
 
Àn
;

353 
ngx_îr_t
 
îr
;

354 
ngx_sockë_t
 
s
;

356 
i
 = 0; i < 
ma°î_ªad_fd_£t
.
fd_cou¡
; i++) {

358 
s
 = 
ma°î_ªad_fd_£t
.
fd_¨øy
[
i
];

359 
Àn
 = ();

361 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

362 
îr
 = 
ngx_sockë_î∫o
;

364 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

365 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

367 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

371 
i
 = 0; i < 
ma°î_wrôe_fd_£t
.
fd_cou¡
; i++) {

373 
s
 = 
ma°î_wrôe_fd_£t
.
fd_¨øy
[
i
];

374 
Àn
 = ();

376 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

377 
îr
 = 
ngx_sockë_î∫o
;

379 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

380 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

382 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

385 
	}
}

389 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

391 
ngx_evít_c⁄f_t
 *
ecf
;

393 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

395 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

396  
NGX_CONF_OK
;

399  
NGX_CONF_OK
;

400 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#DEFAULT_CONNECTIONS
 512

	)

16 
ngx_moduÀ_t
 
ngx_kqueue_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_evíç‹t_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_devpﬁl_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_πsig_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_£À˘_moduÀ
;

24 *
ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
ngx_öt_t
 
ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_öt_t
 
ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
);

27 *
ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

29 *
ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

30 *
c⁄f
);

31 *
ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

32 *
ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

35 *
ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

36 *
ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

39 
ngx_uöt_t
 
	gngx_timî_ªsﬁuti⁄
;

40 
sig_©omic_t
 
	gngx_evít_timî_Æ¨m
;

42 
ngx_uöt_t
 
	gngx_evít_max_moduÀ
;

44 
ngx_uöt_t
 
	gngx_evít_Êags
;

45 
ngx_evít_a˘i⁄s_t
 
	gngx_evít_a˘i⁄s
;

48 
ngx_©omic_t
 
	gc⁄√˘i⁄_cou¡î
 = 1;

49 
ngx_©omic_t
 *
	gngx_c⁄√˘i⁄_cou¡î
 = &
c⁄√˘i⁄_cou¡î
;

52 
ngx_©omic_t
 *
	gngx_ac˚±_muãx_±r
;

53 
ngx_shmtx_t
 
	gngx_ac˚±_muãx
;

54 
ngx_uöt_t
 
	gngx_u£_ac˚±_muãx
;

55 
ngx_uöt_t
 
	gngx_ac˚±_evíts
;

56 
ngx_uöt_t
 
	gngx_ac˚±_muãx_hñd
;

57 
ngx_m£c_t
 
	gngx_ac˚±_muãx_dñay
;

58 
ngx_öt_t
 
	gngx_ac˚±_dißbÀd
;

61 #i‡(
NGX_STAT_STUB
)

63 
ngx_©omic_t
 
	gngx_°©_ac˚±ed0
;

64 
ngx_©omic_t
 *
	gngx_°©_ac˚±ed
 = &
ngx_°©_ac˚±ed0
;

65 
ngx_©omic_t
 
	gngx_°©_h™dÀd0
;

66 
ngx_©omic_t
 *
	gngx_°©_h™dÀd
 = &
ngx_°©_h™dÀd0
;

67 
ngx_©omic_t
 
	gngx_°©_ªque°s0
;

68 
ngx_©omic_t
 *
	gngx_°©_ªque°s
 = &
ngx_°©_ªque°s0
;

69 
ngx_©omic_t
 
	gngx_°©_a˘ive0
;

70 
ngx_©omic_t
 *
	gngx_°©_a˘ive
 = &
ngx_°©_a˘ive0
;

71 
ngx_©omic_t
 
	gngx_°©_ªadög0
;

72 
ngx_©omic_t
 *
	gngx_°©_ªadög
 = &
ngx_°©_ªadög0
;

73 
ngx_©omic_t
 
	gngx_°©_wrôög0
;

74 
ngx_©omic_t
 *
	gngx_°©_wrôög
 = &
ngx_°©_wrôög0
;

75 
ngx_©omic_t
 
	gngx_°©_waôög0
;

76 
ngx_©omic_t
 *
	gngx_°©_waôög
 = &
ngx_°©_waôög0
;

82 
ngx_comm™d_t
 
	gngx_evíts_comm™ds
[] = {

84 { 
ngx_°rög
("events"),

85 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

86 
ngx_evíts_block
,

89 
NULL
 },

91 
ngx_nuŒ_comm™d


95 
ngx_c‹e_moduÀ_t
 
	gngx_evíts_moduÀ_˘x
 = {

96 
ngx_°rög
("events"),

97 
NULL
,

98 
ngx_evít_öô_c⁄f


102 
ngx_moduÀ_t
 
	gngx_evíts_moduÀ
 = {

103 
NGX_MODULE_V1
,

104 &
ngx_evíts_moduÀ_˘x
,

105 
ngx_evíts_comm™ds
,

106 
NGX_CORE_MODULE
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NGX_MODULE_V1_PADDING


118 
ngx_°r_t
 
	gevít_c‹e_«me
 = 
ngx_°rög
("event_core");

121 
ngx_comm™d_t
 
	gngx_evít_c‹e_comm™ds
[] = {

123 { 
ngx_°rög
("worker_connections"),

124 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

125 
ngx_evít_c⁄√˘i⁄s
,

128 
NULL
 },

130 { 
ngx_°rög
("connections"),

131 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

132 
ngx_evít_c⁄√˘i⁄s
,

135 
NULL
 },

137 { 
ngx_°rög
("use"),

138 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

139 
ngx_evít_u£
,

142 
NULL
 },

144 { 
ngx_°rög
("multi_accept"),

145 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

146 
ngx_c⁄f_£t_Êag_¶Ÿ
,

148 
off£tof
(
ngx_evít_c⁄f_t
, 
mu…i_ac˚±
),

149 
NULL
 },

151 { 
ngx_°rög
("accept_mutex"),

152 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

153 
ngx_c⁄f_£t_Êag_¶Ÿ
,

155 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx
),

156 
NULL
 },

158 { 
ngx_°rög
("accept_mutex_delay"),

159 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

160 
ngx_c⁄f_£t_m£c_¶Ÿ
,

162 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx_dñay
),

163 
NULL
 },

165 { 
ngx_°rög
("debug_connection"),

166 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

167 
ngx_evít_debug_c⁄√˘i⁄
,

170 
NULL
 },

172 
ngx_nuŒ_comm™d


176 
ngx_evít_moduÀ_t
 
	gngx_evít_c‹e_moduÀ_˘x
 = {

177 &
evít_c‹e_«me
,

178 
ngx_evít_c‹e_¸óã_c⁄f
,

179 
ngx_evít_c‹e_öô_c⁄f
,

181 { 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }

185 
ngx_moduÀ_t
 
	gngx_evít_c‹e_moduÀ
 = {

186 
NGX_MODULE_V1
,

187 &
ngx_evít_c‹e_moduÀ_˘x
,

188 
ngx_evít_c‹e_comm™ds
,

189 
NGX_EVENT_MODULE
,

190 
NULL
,

191 
ngx_evít_moduÀ_öô
,

192 
ngx_evít_¥o˚ss_öô
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NGX_MODULE_V1_PADDING


202 
	$ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
)

204 
ngx_uöt_t
 
Êags
;

205 
ngx_m£c_t
 
timî
, 
dñè
;

207 i‡(
ngx_timî_ªsﬁuti⁄
) {

208 
timî
 = 
NGX_TIMER_INFINITE
;

209 
Êags
 = 0;

212 
timî
 = 
	`ngx_evít_föd_timî
();

213 
Êags
 = 
NGX_UPDATE_TIME
;

215 #i‡(
NGX_THREADS
)

217 i‡(
timî
 =
NGX_TIMER_INFINITE
 ||Åimer > 500) {

218 
timî
 = 500;

224 i‡(
ngx_u£_ac˚±_muãx
) {

225 i‡(
ngx_ac˚±_dißbÀd
 > 0) {

226 
ngx_ac˚±_dißbÀd
--;

229 i‡(
	`ngx_åylock_ac˚±_muãx
(
cy˛e
Ë=
NGX_ERROR
) {

233 i‡(
ngx_ac˚±_muãx_hñd
) {

234 
Êags
 |
NGX_POST_EVENTS
;

237 i‡(
timî
 =
NGX_TIMER_INFINITE


238 || 
timî
 > 
ngx_ac˚±_muãx_dñay
)

240 
timî
 = 
ngx_ac˚±_muãx_dñay
;

246 
dñè
 = 
ngx_cuºít_m£c
;

248 (Ë
	`ngx_¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

250 
dñè
 = 
ngx_cuºít_m£c
 - delta;

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

253 "timî dñè: %M", 
dñè
);

255 i‡(
ngx_po°ed_ac˚±_evíts
) {

256 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_ac˚±_evíts
);

259 i‡(
ngx_ac˚±_muãx_hñd
) {

260 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

263 i‡(
dñè
) {

264 
	`ngx_evít_expúe_timîs
();

267 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

268 "po°edÉvít†%p", 
ngx_po°ed_evíts
);

270 i‡(
ngx_po°ed_evíts
) {

271 i‡(
ngx_thªaded
) {

272 
	`ngx_wakeup_w‹kî_thªad
(
cy˛e
);

275 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_evíts
);

278 
	}
}

281 
ngx_öt_t


282 
	$ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
)

284 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

288 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

289 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_CLEAR_EVENT
)

290 =
NGX_ERROR
)

292  
NGX_ERROR
;

296  
NGX_OK
;

298 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

302 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

303 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
)

304 =
NGX_ERROR
)

306  
NGX_ERROR
;

309  
NGX_OK
;

312 i‡(
ªv
->
a˘ive
 && (ªv->
ªady
 || (
Êags
 & 
NGX_CLOSE_EVENT
))) {

313 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
 | 
Êags
)

314 =
NGX_ERROR
)

316  
NGX_ERROR
;

319  
NGX_OK
;

322 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

326 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

327 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

328  
NGX_ERROR
;

331  
NGX_OK
;

334 i‡(
ªv
->
⁄eshŸ
 && !ªv->
ªady
) {

335 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

336  
NGX_ERROR
;

339  
NGX_OK
;

345  
NGX_OK
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
)

352 
ngx_c⁄√˘i⁄_t
 *
c
;

354 i‡(
low©
) {

355 
c
 = 
wev
->
d©a
;

357 i‡(
	`ngx_£nd_low©
(
c
, 
low©
Ë=
NGX_ERROR
) {

358  
NGX_ERROR
;

362 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

366 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

367 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
,

368 
NGX_CLEAR_EVENT
 | (
low©
 ? 
NGX_LOWAT_EVENT
 : 0))

369 =
NGX_ERROR
)

371  
NGX_ERROR
;

375  
NGX_OK
;

377 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

381 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

382 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

383 =
NGX_ERROR
)

385  
NGX_ERROR
;

388  
NGX_OK
;

391 i‡(
wev
->
a˘ive
 && wev->
ªady
) {

392 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

393 =
NGX_ERROR
)

395  
NGX_ERROR
;

398  
NGX_OK
;

401 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

405 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

406 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

407  
NGX_ERROR
;

410  
NGX_OK
;

413 i‡(
wev
->
⁄eshŸ
 && wev->
ªady
) {

414 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

415  
NGX_ERROR
;

418  
NGX_OK
;

424  
NGX_OK
;

425 
	}
}

429 
	$ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

431 i‡(
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
Ë=
NULL
) {

432 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

434  
NGX_CONF_ERROR
;

437  
NGX_CONF_OK
;

438 
	}
}

441 
ngx_öt_t


442 
	$ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

444 ***
cf
;

445 
u_ch¨
 *
sh¨ed
;

446 
size_t
 
size
, 
˛
;

447 
ngx_shm_t
 
shm
;

448 
ngx_time_t
 *
ç
;

449 
ngx_c‹e_c⁄f_t
 *
ccf
;

450 
ngx_evít_c⁄f_t
 *
ecf
;

452 
cf
 = 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
);

453 
ecf
 = (*
cf
)[
ngx_evít_c‹e_moduÀ
.
˘x_ödex
];

455 i‡(!
ngx_ã°_c⁄fig
 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER
) {

456 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

457 "usögÅhê\"%s\"Évíàmëhod", 
ecf
->
«me
);

460 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

462 
ngx_timî_ªsﬁuti⁄
 = 
ccf
->
timî_ªsﬁuti⁄
;

464 #i‡!(
NGX_WIN32
)

466 
ngx_öt_t
 
limô
;

467 
æimô
 
æmt
;

469 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

470 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

474 i‡(
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
æmt
.
æim_cur


475 && (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET


476 || 
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
ccf
->
æimô_nofûe
))

478 
limô
 = (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET
) ?

479 (
ngx_öt_t
Ë
æmt
.
æim_cur
 : 
ccf
->
æimô_nofûe
;

481 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

484 
ecf
->
c⁄√˘i⁄s
, 
limô
);

491 i‡(
ccf
->
ma°î
 == 0) {

492  
NGX_OK
;

495 i‡(
ngx_ac˚±_muãx_±r
) {

496  
NGX_OK
;

502 
˛
 = 128;

504 
size
 = 
˛


505 + 
˛


506 + 
˛
;

508 #i‡(
NGX_STAT_STUB
)

510 
size
 +
˛


511 + 
˛


512 + 
˛


513 + 
˛


514 + 
˛


515 + 
˛


516 + 
˛
;

520 
shm
.
size
 = size;

521 
shm
.
«me
.
Àn
 = ("nginx_shared_zone");

522 
shm
.
«me
.
d©a
 = (
u_ch¨
 *) "nginx_shared_zone";

523 
shm
.
log
 = 
cy˛e
->log;

525 i‡(
	`ngx_shm_Æloc
(&
shm
Ë!
NGX_OK
) {

526  
NGX_ERROR
;

529 
sh¨ed
 = 
shm
.
addr
;

531 
ngx_ac˚±_muãx_±r
 = (
ngx_©omic_t
 *Ë
sh¨ed
;

532 
ngx_ac˚±_muãx
.
•ö
 = (
ngx_uöt_t
) -1;

534 i‡(
	`ngx_shmtx_¸óã
(&
ngx_ac˚±_muãx
, (
ngx_shmtx_sh_t
 *Ë
sh¨ed
,

535 
cy˛e
->
lock_fûe
.
d©a
)

536 !
NGX_OK
)

538  
NGX_ERROR
;

541 
ngx_c⁄√˘i⁄_cou¡î
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 1 * 
˛
);

543 (Ë
	`ngx_©omic_cmp_£t
(
ngx_c⁄√˘i⁄_cou¡î
, 0, 1);

545 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

547 
ngx_c⁄√˘i⁄_cou¡î
, *ngx_connection_counter);

549 
ngx_ãmp_numbî
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 2 * 
˛
);

551 
ç
 = 
	`ngx_timeofday
();

553 
ngx_øndom_numbî
 = (
ç
->
m£c
 << 16Ë+ 
ngx_pid
;

555 #i‡(
NGX_STAT_STUB
)

557 
ngx_°©_ac˚±ed
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 3 * 
˛
);

558 
ngx_°©_h™dÀd
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 4 * 
˛
);

559 
ngx_°©_ªque°s
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 5 * 
˛
);

560 
ngx_°©_a˘ive
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 6 * 
˛
);

561 
ngx_°©_ªadög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 7 * 
˛
);

562 
ngx_°©_wrôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 8 * 
˛
);

563 
ngx_°©_waôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 9 * 
˛
);

567  
NGX_OK
;

568 
	}
}

571 #i‡!(
NGX_WIN32
)

574 
	$ngx_timî_sig«l_h™dÀr
(
signo
)

576 
ngx_evít_timî_Æ¨m
 = 1;

579 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0, "timer signal");

581 
	}
}

586 
ngx_öt_t


587 
	$ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
)

589 
ngx_uöt_t
 
m
, 
i
;

590 
ngx_evít_t
 *
ªv
, *
wev
;

591 
ngx_li°íög_t
 *
ls
;

592 
ngx_c⁄√˘i⁄_t
 *
c
, *
√xt
, *
ﬁd
;

593 
ngx_c‹e_c⁄f_t
 *
ccf
;

594 
ngx_evít_c⁄f_t
 *
ecf
;

595 
ngx_evít_moduÀ_t
 *
moduÀ
;

597 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

598 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

600 i‡(
ccf
->
ma°î
 && ccf->
w‹kî_¥o˚s£s
 > 1 && 
ecf
->
ac˚±_muãx
) {

601 
ngx_u£_ac˚±_muãx
 = 1;

602 
ngx_ac˚±_muãx_hñd
 = 0;

603 
ngx_ac˚±_muãx_dñay
 = 
ecf
->
ac˚±_muãx_dñay
;

606 
ngx_u£_ac˚±_muãx
 = 0;

609 #i‡(
NGX_WIN32
)

616 
ngx_u£_ac˚±_muãx
 = 0;

620 #i‡(
NGX_THREADS
)

621 
ngx_po°ed_evíts_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

622 i‡(
ngx_po°ed_evíts_muãx
 =
NULL
) {

623  
NGX_ERROR
;

627 i‡(
	`ngx_evít_timî_öô
(
cy˛e
->
log
Ë=
NGX_ERROR
) {

628  
NGX_ERROR
;

631 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

632 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

636 i‡(
ngx_moduÀs
[
m
]->
˘x_ödex
 !
ecf
->
u£
) {

640 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

642 i‡(
moduÀ
->
a˘i⁄s
.
	`öô
(
cy˛e
, 
ngx_timî_ªsﬁuti⁄
Ë!
NGX_OK
) {

644 
	`exô
(2);

650 #i‡!(
NGX_WIN32
)

652 i‡(
ngx_timî_ªsﬁuti⁄
 && !(
ngx_evít_Êags
 & 
NGX_USE_TIMER_EVENT
)) {

653 
siga˘i⁄
 
ß
;

654 
ôimîvÆ
 
ôv
;

656 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

657 
ß
.
ß_h™dÀr
 = 
ngx_timî_sig«l_h™dÀr
;

658 
	`sigem±y£t
(&
ß
.
ß_mask
);

660 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
) == -1) {

661 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

663  
NGX_ERROR
;

666 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

667 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000) * 1000;

668 
ôv
.
ô_vÆue
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

669 
ôv
.
ô_vÆue
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000 ) * 1000;

671 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

672 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

677 i‡(
ngx_evít_Êags
 & 
NGX_USE_FD_EVENT
) {

678 
æimô
 
æmt
;

680 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

681 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

683  
NGX_ERROR
;

686 
cy˛e
->
fûes_n
 = (
ngx_uöt_t
Ë
æmt
.
æim_cur
;

688 
cy˛e
->
fûes
 = 
	`ngx_ˇŒoc
((
ngx_c⁄√˘i⁄_t
 *Ë* cy˛e->
fûes_n
,

689 
cy˛e
->
log
);

690 i‡(
cy˛e
->
fûes
 =
NULL
) {

691  
NGX_ERROR
;

697 
cy˛e
->
c⁄√˘i⁄s
 =

698 
	`ngx_Æloc
((
ngx_c⁄√˘i⁄_t
Ë* 
cy˛e
->
c⁄√˘i⁄_n
, cy˛e->
log
);

699 i‡(
cy˛e
->
c⁄√˘i⁄s
 =
NULL
) {

700  
NGX_ERROR
;

703 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

705 
cy˛e
->
ªad_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

706 
cy˛e
->
log
);

707 i‡(
cy˛e
->
ªad_evíts
 =
NULL
) {

708  
NGX_ERROR
;

711 
ªv
 = 
cy˛e
->
ªad_evíts
;

712 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

713 
ªv
[
i
].
˛o£d
 = 1;

714 
ªv
[
i
].
ö°™˚
 = 1;

715 #i‡(
NGX_THREADS
)

716 
ªv
[
i
].
lock
 = &
c
[i].lock;

717 
ªv
[
i
].
own_lock
 = &
c
[i].
lock
;

721 
cy˛e
->
wrôe_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

722 
cy˛e
->
log
);

723 i‡(
cy˛e
->
wrôe_evíts
 =
NULL
) {

724  
NGX_ERROR
;

727 
wev
 = 
cy˛e
->
wrôe_evíts
;

728 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

729 
wev
[
i
].
˛o£d
 = 1;

730 #i‡(
NGX_THREADS
)

731 
wev
[
i
].
lock
 = &
c
[i].lock;

732 
wev
[
i
].
own_lock
 = &
c
[i].
lock
;

736 
i
 = 
cy˛e
->
c⁄√˘i⁄_n
;

737 
√xt
 = 
NULL
;

740 
i
--;

742 
c
[
i
].
d©a
 = 
√xt
;

743 
c
[
i
].
ªad
 = &
cy˛e
->
ªad_evíts
[i];

744 
c
[
i
].
wrôe
 = &
cy˛e
->
wrôe_evíts
[i];

745 
c
[
i
].
fd
 = (
ngx_sockë_t
) -1;

747 
√xt
 = &
c
[
i
];

749 #i‡(
NGX_THREADS
)

750 
c
[
i
].
lock
 = 0;

752 } 
i
);

754 
cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
√xt
;

755 
cy˛e
->
‰ì_c⁄√˘i⁄_n
 = cy˛e->
c⁄√˘i⁄_n
;

759 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

760 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

762 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
ls
[
i
].
fd
, 
cy˛e
->
log
);

764 i‡(
c
 =
NULL
) {

765  
NGX_ERROR
;

768 
c
->
log
 = &
ls
[
i
].log;

770 
c
->
li°íög
 = &
ls
[
i
];

771 
ls
[
i
].
c⁄√˘i⁄
 = 
c
;

773 
ªv
 = 
c
->
ªad
;

775 
ªv
->
log
 = 
c
->log;

776 
ªv
->
ac˚±
 = 1;

778 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

779 
ªv
->
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

782 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

783 i‡(
ls
[
i
].
¥evious
) {

790 
ﬁd
 = 
ls
[
i
].
¥evious
->
c⁄√˘i⁄
;

792 i‡(
	`ngx_dñ_evít
(
ﬁd
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
)

793 =
NGX_ERROR
)

795  
NGX_ERROR
;

798 
ﬁd
->
fd
 = (
ngx_sockë_t
) -1;

802 #i‡(
NGX_WIN32
)

804 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

805 
ngx_io˝_c⁄f_t
 *
io˝cf
;

807 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±ex
;

809 i‡(
ngx_u£_ac˚±_muãx
) {

813 i‡(
	`ngx_add_evít
(
ªv
, 0, 
NGX_IOCP_ACCEPT
Ë=
NGX_ERROR
) {

814  
NGX_ERROR
;

817 
ls
[
i
].
log
.
h™dÀr
 = 
ngx_ac˚±ex_log_îr‹
;

819 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

820 i‡(
	`ngx_evít_po°_ac˚±ex
(&
ls
[
i
], 
io˝cf
->
po°_ac˚±ex
)

821 =
NGX_ERROR
)

823  
NGX_ERROR
;

827 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

829 i‡(
ngx_u£_ac˚±_muãx
) {

833 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

834  
NGX_ERROR
;

840 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

842 i‡(
ngx_u£_ac˚±_muãx
) {

846 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

847 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

848  
NGX_ERROR
;

852 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

853  
NGX_ERROR
;

861  
NGX_OK
;

862 
	}
}

865 
ngx_öt_t


866 
	$ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
)

868 
¢dlow©
;

870 #i‡(
NGX_HAVE_LOWAT_EVENT
)

872 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

873 
c
->
wrôe
->
avaûabÀ
 = 
low©
;

874  
NGX_OK
;

879 i‡(
low©
 =0 || 
c
->
¢dlow©
) {

880  
NGX_OK
;

883 
¢dlow©
 = (Ë
low©
;

885 i‡(
	`£tsock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_SNDLOWAT
,

886 (c⁄° *Ë&
¢dlow©
, ())

889 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

891  
NGX_ERROR
;

894 
c
->
¢dlow©
 = 1;

896  
NGX_OK
;

897 
	}
}

901 
	$ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

903 *
rv
;

904 ***
˘x
;

905 
ngx_uöt_t
 
i
;

906 
ngx_c⁄f_t
 
pcf
;

907 
ngx_evít_moduÀ_t
 *
m
;

909 i‡(*(**Ë
c⁄f
) {

915 
ngx_evít_max_moduÀ
 = 0;

916 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

917 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

921 
ngx_moduÀs
[
i
]->
˘x_ödex
 = 
ngx_evít_max_moduÀ
++;

924 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*));

925 i‡(
˘x
 =
NULL
) {

926  
NGX_CONF_ERROR
;

929 *
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 
ngx_evít_max_moduÀ
 * (*));

930 i‡(*
˘x
 =
NULL
) {

931  
NGX_CONF_ERROR
;

934 *(**Ë
c⁄f
 = 
˘x
;

936 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

937 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

941 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

943 i‡(
m
->
¸óã_c⁄f
) {

944 (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
m
->
	`¸óã_c⁄f
(
cf
->
cy˛e
);

945 i‡((*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

946  
NGX_CONF_ERROR
;

951 
pcf
 = *
cf
;

952 
cf
->
˘x
 = ctx;

953 
cf
->
moduÀ_ty≥
 = 
NGX_EVENT_MODULE
;

954 
cf
->
cmd_ty≥
 = 
NGX_EVENT_CONF
;

956 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

958 *
cf
 = 
pcf
;

960 i‡(
rv
 !
NGX_CONF_OK
)

961  
rv
;

963 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

964 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

968 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

970 i‡(
m
->
öô_c⁄f
) {

971 
rv
 = 
m
->
	`öô_c⁄f
(
cf
->
cy˛e
, (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
]);

972 i‡(
rv
 !
NGX_CONF_OK
) {

973  
rv
;

978  
NGX_CONF_OK
;

979 
	}
}

983 
	$ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

985 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

987 
ngx_°r_t
 *
vÆue
;

989 i‡(
ecf
->
c⁄√˘i⁄s
 !
NGX_CONF_UNSET_UINT
) {

993 i‡(
	`ngx_°rcmp
(
cmd
->
«me
.
d©a
, "connections") == 0) {

994 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

999 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1000 
ecf
->
c⁄√˘i⁄s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1001 i‡(
ecf
->
c⁄√˘i⁄s
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

1002 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1003 "övÆidÇumbî \"%V\"", &
vÆue
[1]);

1005  
NGX_CONF_ERROR
;

1008 
cf
->
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1010  
NGX_CONF_OK
;

1011 
	}
}

1015 
	$ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1017 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1019 
ngx_öt_t
 
m
;

1020 
ngx_°r_t
 *
vÆue
;

1021 
ngx_evít_c⁄f_t
 *
ﬁd_ecf
;

1022 
ngx_evít_moduÀ_t
 *
moduÀ
;

1024 i‡(
ecf
->
u£
 !
NGX_CONF_UNSET_UINT
) {

1028 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1030 i‡(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
) {

1031 
ﬁd_ecf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
,

1032 
ngx_evít_c‹e_moduÀ
);

1034 
ﬁd_ecf
 = 
NULL
;

1038 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

1039 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1043 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

1044 i‡(
moduÀ
->
«me
->
Àn
 =
vÆue
[1].len) {

1045 i‡(
	`ngx_°rcmp
(
moduÀ
->
«me
->
d©a
, 
vÆue
[1].data) == 0) {

1046 
ecf
->
u£
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

1047 
ecf
->
«me
 = 
moduÀ
->«me->
d©a
;

1049 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE


1050 && 
ﬁd_ecf


1051 && 
ﬁd_ecf
->
u£
 !
ecf
->use)

1053 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1060 &
vÆue
[1], 
ﬁd_ecf
->
«me
);

1062  
NGX_CONF_ERROR
;

1065  
NGX_CONF_OK
;

1070 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1071 "övÆidÉvíàty≥ \"%V\"", &
vÆue
[1]);

1073  
NGX_CONF_ERROR
;

1074 
	}
}

1078 
	$ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1080 #i‡(
NGX_DEBUG
)

1081 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1083 
ngx_öt_t
 
rc
;

1084 
ngx_°r_t
 *
vÆue
;

1085 
ngx_uæ_t
 
u
;

1086 
ngx_cidr_t
 
c
, *
cidr
;

1087 
ngx_uöt_t
 
i
;

1088 
sockaddr_ö
 *
sö
;

1089 #i‡(
NGX_HAVE_INET6
)

1090 
sockaddr_ö6
 *
sö6
;

1093 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1095 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1097 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

1098 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1099 i‡(
cidr
 =
NULL
) {

1100  
NGX_CONF_ERROR
;

1103 
cidr
->
Ámûy
 = 
AF_UNIX
;

1104  
NGX_CONF_OK
;

1109 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
c
);

1111 i‡(
rc
 !
NGX_ERROR
) {

1112 i‡(
rc
 =
NGX_DONE
) {

1113 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1115 &
vÆue
[1]);

1118 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1119 i‡(
cidr
 =
NULL
) {

1120  
NGX_CONF_ERROR
;

1123 *
cidr
 = 
c
;

1125  
NGX_CONF_OK
;

1128 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1129 
u
.
ho°
 = 
vÆue
[1];

1131 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1132 i‡(
u
.
îr
) {

1133 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1135 
u
.
îr
, &u.
ho°
);

1138  
NGX_CONF_ERROR
;

1141 
cidr
 = 
	`ngx_¨øy_push_n
(&
ecf
->
debug_c⁄√˘i⁄
, 
u
.
«ddrs
);

1142 i‡(
cidr
 =
NULL
) {

1143  
NGX_CONF_ERROR
;

1146 
	`ngx_memzîo
(
cidr
, 
u
.
«ddrs
 * (
ngx_cidr_t
));

1148 
i
 = 0; i < 
u
.
«ddrs
; i++) {

1149 
cidr
[
i
].
Ámûy
 = 
u
.
addrs
[i].
sockaddr
->
ß_Ámûy
;

1151 
cidr
[
i
].
Ámûy
) {

1153 #i‡(
NGX_HAVE_INET6
)

1154 
AF_INET6
:

1155 
sö6
 = (
sockaddr_ö6
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1156 
cidr
[
i
].
u
.
ö6
.
addr
 = 
sö6
->
sö6_addr
;

1157 
	`ngx_mem£t
(
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

1162 
sö
 = (
sockaddr_ö
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1163 
cidr
[
i
].
u
.
ö
.
addr
 = 
sö
->
sö_addr
.
s_addr
;

1164 
cidr
[
i
].
u
.
ö
.
mask
 = 0xffffffff;

1171 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1177  
NGX_CONF_OK
;

1178 
	}
}

1182 
	$ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1184 
ngx_evít_c⁄f_t
 *
ecf
;

1186 
ecf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evít_c⁄f_t
));

1187 i‡(
ecf
 =
NULL
) {

1188  
NULL
;

1191 
ecf
->
c⁄√˘i⁄s
 = 
NGX_CONF_UNSET_UINT
;

1192 
ecf
->
u£
 = 
NGX_CONF_UNSET_UINT
;

1193 
ecf
->
mu…i_ac˚±
 = 
NGX_CONF_UNSET
;

1194 
ecf
->
ac˚±_muãx
 = 
NGX_CONF_UNSET
;

1195 
ecf
->
ac˚±_muãx_dñay
 = 
NGX_CONF_UNSET_MSEC
;

1196 
ecf
->
«me
 = (*Ë
NGX_CONF_UNSET
;

1198 #i‡(
NGX_DEBUG
)

1200 i‡(
	`ngx_¨øy_öô
(&
ecf
->
debug_c⁄√˘i⁄
, 
cy˛e
->
poﬁ
, 4,

1201 (
ngx_cidr_t
)Ë=
NGX_ERROR
)

1203  
NULL
;

1208  
ecf
;

1209 
	}
}

1213 
	$ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1215 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1217 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1218 
fd
;

1220 #i‡(
NGX_HAVE_RTSIG
)

1221 
ngx_uöt_t
 
πsig
;

1222 
ngx_c‹e_c⁄f_t
 *
ccf
;

1224 
ngx_öt_t
 
i
;

1225 
ngx_moduÀ_t
 *
moduÀ
;

1226 
ngx_evít_moduÀ_t
 *
evít_moduÀ
;

1228 
moduÀ
 = 
NULL
;

1230 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1232 
fd
 = 
	`ïﬁl_¸óã
(100);

1234 i‡(
fd
 != -1) {

1235 (Ë
	`˛o£
(
fd
);

1236 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1238 } i‡(
ngx_î∫o
 !
NGX_ENOSYS
) {

1239 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1244 #i‡(
NGX_HAVE_RTSIG
)

1246 i‡(
moduÀ
 =
NULL
) {

1247 
moduÀ
 = &
ngx_πsig_moduÀ
;

1248 
πsig
 = 1;

1251 
πsig
 = 0;

1256 #i‡(
NGX_HAVE_DEVPOLL
)

1258 
moduÀ
 = &
ngx_devpﬁl_moduÀ
;

1262 #i‡(
NGX_HAVE_KQUEUE
)

1264 
moduÀ
 = &
ngx_kqueue_moduÀ
;

1268 #i‡(
NGX_HAVE_SELECT
)

1270 i‡(
moduÀ
 =
NULL
) {

1271 
moduÀ
 = &
ngx_£À˘_moduÀ
;

1276 i‡(
moduÀ
 =
NULL
) {

1277 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1279 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1283 
evít_moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

1285 i‡(
	`ngx_°rcmp
(
evít_moduÀ
->
«me
->
d©a
, 
evít_c‹e_«me
.data) == 0)

1290 
moduÀ
 = 
ngx_moduÀs
[
i
];

1295 i‡(
moduÀ
 =
NULL
) {

1296 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0, "noÉvents module found");

1297  
NGX_CONF_ERROR
;

1300 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
c⁄√˘i⁄s
, 
DEFAULT_CONNECTIONS
);

1301 
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1303 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
u£
, 
moduÀ
->
˘x_ödex
);

1305 
evít_moduÀ
 = 
moduÀ
->
˘x
;

1306 
	`ngx_c⁄f_öô_±r_vÆue
(
ecf
->
«me
, 
evít_moduÀ
->«me->
d©a
);

1308 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
mu…i_ac˚±
, 0);

1309 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
ac˚±_muãx
, 1);

1310 
	`ngx_c⁄f_öô_m£c_vÆue
(
ecf
->
ac˚±_muãx_dñay
, 500);

1313 #i‡(
NGX_HAVE_RTSIG
)

1315 i‡(!
πsig
) {

1316  
NGX_CONF_OK
;

1319 i‡(
ecf
->
ac˚±_muãx
) {

1320  
NGX_CONF_OK
;

1323 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1325 i‡(
ccf
->
w‹kî_¥o˚s£s
 == 0) {

1326  
NGX_CONF_OK
;

1329 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1332  
NGX_CONF_ERROR
;

1336  
NGX_CONF_OK
;

1339 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event.h

8 #i‚de‡
_NGX_EVENT_H_INCLUDED_


9 
	#_NGX_EVENT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INVALID_INDEX
 0xd0d0d0d0

	)

19 #i‡(
NGX_HAVE_IOCP
)

22 
WSAOVERLAPPED
 
	movÕ
;

23 
ngx_evít_t
 *
	mevít
;

24 
	mîr‹
;

25 } 
	tngx_evít_ovÕ_t
;

31 
ngx_uöt_t
 
	mlock
;

33 
ngx_evít_t
 *
	mevíts
;

34 
ngx_evít_t
 *
	mœ°
;

35 } 
	tngx_evít_muãx_t
;

38 
	sngx_evít_s
 {

39 *
	md©a
;

41 
	mwrôe
:1;

43 
	mac˚±
:1;

46 
	mö°™˚
:1;

52 
	ma˘ive
:1;

54 
	mdißbÀd
:1;

57 
	mªady
:1;

59 
	m⁄eshŸ
:1;

62 
	mcom∂ëe
:1;

64 
	meof
:1;

65 
	mîr‹
:1;

67 
	mtimedout
:1;

68 
	mtimî_£t
:1;

70 
	mdñayed
:1;

72 
	mde„ºed_ac˚±
:1;

75 
	m≥ndög_eof
:1;

77 #i‡!(
NGX_THREADS
)

78 
	mpo°ed_ªady
:1;

81 #i‡(
NGX_WIN32
)

83 
	mac˚±_c⁄ãxt_upd©ed
:1;

86 #i‡(
NGX_HAVE_KQUEUE
)

87 
	mkq_vnode
:1;

90 
	mkq_î∫o
;

107 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

108 
	mavaûabÀ
;

110 
	mavaûabÀ
:1;

113 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

116 #i‡(
NGX_HAVE_AIO
)

118 #i‡(
NGX_HAVE_IOCP
)

119 
ngx_evít_ovÕ_t
 
	movÕ
;

121 
aiocb
 
	maiocb
;

126 
ngx_uöt_t
 
	mödex
;

128 
ngx_log_t
 *
	mlog
;

130 
ngx_rbåì_node_t
 
	mtimî
;

132 
	m˛o£d
:1;

135 
	mch™√l
:1;

136 
	mªsﬁvî
:1;

138 #i‡(
NGX_THREADS
)

140 
	mlocked
:1;

142 
	mpo°ed_ªady
:1;

143 
	mpo°ed_timedout
:1;

144 
	mpo°ed_eof
:1;

146 #i‡(
NGX_HAVE_KQUEUE
)

148 
	mpo°ed_î∫o
;

151 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

152 
	mpo°ed_avaûabÀ
;

154 
	mpo°ed_avaûabÀ
:1;

157 
ngx_©omic_t
 *
	mlock
;

158 
ngx_©omic_t
 *
	mown_lock
;

163 
ngx_evít_t
 *
	m√xt
;

164 
ngx_evít_t
 **
	m¥ev
;

177 *
	mthr_˘x
;

179 #i‡(
NGX_EVENT_T_PADDING
)

183 
uöt32_t
 
	m∑ddög
[
NGX_EVENT_T_PADDING
];

189 #i‡(
NGX_HAVE_FILE_AIO
)

191 
	sngx_evít_aio_s
 {

192 *
	md©a
;

193 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

194 
ngx_fûe_t
 *
	mfûe
;

196 
ngx_fd_t
 
	mfd
;

198 #i‡(
NGX_HAVE_EVENTFD
)

199 
öt64_t
 
	mªs
;

200 #i‡(
NGX_TEST_BUILD_EPOLL
)

201 
ngx_îr_t
 
	mîr
;

202 
size_t
 
	mnbyãs
;

205 
ngx_îr_t
 
	mîr
;

206 
size_t
 
	mnbyãs
;

209 #i‡(
NGX_HAVE_AIO_SENDFILE
)

210 
off_t
 
	mœ°_off£t
;

213 
ngx_aiocb_t
 
	maiocb
;

214 
ngx_evít_t
 
	mevít
;

221 
ngx_öt_t
 (*
add
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

222 
ngx_öt_t
 (*
dñ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

224 
ngx_öt_t
 (*
íabÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

225 
ngx_öt_t
 (*
dißbÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

227 
ngx_öt_t
 (*
add_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
);

228 
ngx_öt_t
 (*
dñ_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
, 
ngx_uöt_t
 
	mÊags
);

230 
ngx_öt_t
 (*
¥o˚ss_ch™ges
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_uöt_t
 
	mnowaô
);

231 
ngx_öt_t
 (*
¥o˚ss_evíts
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
,

232 
ngx_uöt_t
 
	mÊags
);

234 
ngx_öt_t
 (*
öô
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
);

235 (*
	md⁄e
)(
ngx_cy˛e_t
 *
	mcy˛e
);

236 } 
	tngx_evít_a˘i⁄s_t
;

239 
ngx_evít_a˘i⁄s_t
 
ngx_evít_a˘i⁄s
;

246 
	#NGX_USE_LEVEL_EVENT
 0x00000001

	)

252 
	#NGX_USE_ONESHOT_EVENT
 0x00000002

	)

258 
	#NGX_USE_CLEAR_EVENT
 0x00000004

	)

264 
	#NGX_USE_KQUEUE_EVENT
 0x00000008

	)

270 
	#NGX_USE_LOWAT_EVENT
 0x00000010

	)

275 
	#NGX_USE_GREEDY_EVENT
 0x00000020

	)

280 
	#NGX_USE_EPOLL_EVENT
 0x00000040

	)

285 
	#NGX_USE_RTSIG_EVENT
 0x00000080

	)

291 
	#NGX_USE_AIO_EVENT
 0x00000100

	)

297 
	#NGX_USE_IOCP_EVENT
 0x00000200

	)

303 
	#NGX_USE_FD_EVENT
 0x00000400

	)

309 
	#NGX_USE_TIMER_EVENT
 0x00000800

	)

315 
	#NGX_USE_EVENTPORT_EVENT
 0x00001000

	)

320 
	#NGX_USE_VNODE_EVENT
 0x00002000

	)

333 
	#NGX_CLOSE_EVENT
 1

	)

339 
	#NGX_DISABLE_EVENT
 2

	)

344 
	#NGX_FLUSH_EVENT
 4

	)

348 
	#NGX_LOWAT_EVENT
 0

	)

349 
	#NGX_VNODE_EVENT
 0

	)

352 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_HAVE_EPOLLRDHUP
)

353 
	#EPOLLRDHUP
 0

	)

357 #i‡(
NGX_HAVE_KQUEUE
)

359 
	#NGX_READ_EVENT
 
EVFILT_READ


	)

360 
	#NGX_WRITE_EVENT
 
EVFILT_WRITE


	)

362 #unde‡
NGX_VNODE_EVENT


363 
	#NGX_VNODE_EVENT
 
EVFILT_VNODE


	)

372 #unde‡
NGX_CLOSE_EVENT


373 
	#NGX_CLOSE_EVENT
 
EV_EOF


	)

375 #unde‡
NGX_LOWAT_EVENT


376 
	#NGX_LOWAT_EVENT
 
EV_FLAG1


	)

378 #unde‡
NGX_FLUSH_EVENT


379 
	#NGX_FLUSH_EVENT
 
EV_ERROR


	)

381 
	#NGX_LEVEL_EVENT
 0

	)

382 
	#NGX_ONESHOT_EVENT
 
EV_ONESHOT


	)

383 
	#NGX_CLEAR_EVENT
 
EV_CLEAR


	)

385 #unde‡
NGX_DISABLE_EVENT


386 
	#NGX_DISABLE_EVENT
 
EV_DISABLE


	)

389 #ñi‡(
NGX_HAVE_DEVPOLL
 || 
NGX_HAVE_EVENTPORT
)

391 
	#NGX_READ_EVENT
 
POLLIN


	)

392 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

394 
	#NGX_LEVEL_EVENT
 0

	)

395 
	#NGX_ONESHOT_EVENT
 1

	)

398 #ñi‡(
NGX_HAVE_EPOLL
)

400 
	#NGX_READ_EVENT
 (
EPOLLIN
|
EPOLLRDHUP
)

	)

401 
	#NGX_WRITE_EVENT
 
EPOLLOUT


	)

403 
	#NGX_LEVEL_EVENT
 0

	)

404 
	#NGX_CLEAR_EVENT
 
EPOLLET


	)

405 
	#NGX_ONESHOT_EVENT
 0x70000000

	)

407 
	#NGX_ONESHOT_EVENT
 
EPOLLONESHOT


	)

411 #ñi‡(
NGX_HAVE_POLL
)

413 
	#NGX_READ_EVENT
 
POLLIN


	)

414 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

416 
	#NGX_LEVEL_EVENT
 0

	)

417 
	#NGX_ONESHOT_EVENT
 1

	)

422 
	#NGX_READ_EVENT
 0

	)

423 
	#NGX_WRITE_EVENT
 1

	)

425 
	#NGX_LEVEL_EVENT
 0

	)

426 
	#NGX_ONESHOT_EVENT
 1

	)

431 #i‡(
NGX_HAVE_IOCP
)

432 
	#NGX_IOCP_ACCEPT
 0

	)

433 
	#NGX_IOCP_IO
 1

	)

434 
	#NGX_IOCP_CONNECT
 2

	)

438 #i‚de‡
NGX_CLEAR_EVENT


439 
	#NGX_CLEAR_EVENT
 0

	)

443 
	#ngx_¥o˚ss_ch™ges
 
ngx_evít_a˘i⁄s
.
¥o˚ss_ch™ges


	)

444 
	#ngx_¥o˚ss_evíts
 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts


	)

445 
	#ngx_d⁄e_evíts
 
ngx_evít_a˘i⁄s
.
d⁄e


	)

447 
	#ngx_add_evít
 
ngx_evít_a˘i⁄s
.
add


	)

448 
	#ngx_dñ_evít
 
ngx_evít_a˘i⁄s
.
dñ


	)

449 
	#ngx_add_c⁄n
 
ngx_evít_a˘i⁄s
.
add_c⁄n


	)

450 
	#ngx_dñ_c⁄n
 
ngx_evít_a˘i⁄s
.
dñ_c⁄n


	)

452 
	#ngx_add_timî
 
ngx_evít_add_timî


	)

453 
	#ngx_dñ_timî
 
ngx_evít_dñ_timî


	)

456 
ngx_os_io_t
 
ngx_io
;

458 
	#ngx_ªcv
 
ngx_io
.
ªcv


	)

459 
	#ngx_ªcv_chaö
 
ngx_io
.
ªcv_chaö


	)

460 
	#ngx_udp_ªcv
 
ngx_io
.
udp_ªcv


	)

461 
	#ngx_£nd
 
ngx_io
.
£nd


	)

462 
	#ngx_£nd_chaö
 
ngx_io
.
£nd_chaö


	)

465 
	#NGX_EVENT_MODULE
 0x544E5645

	)

466 
	#NGX_EVENT_CONF
 0x02000000

	)

470 
ngx_uöt_t
 
	mc⁄√˘i⁄s
;

471 
ngx_uöt_t
 
	mu£
;

473 
ngx_Êag_t
 
	mmu…i_ac˚±
;

474 
ngx_Êag_t
 
	mac˚±_muãx
;

476 
ngx_m£c_t
 
	mac˚±_muãx_dñay
;

478 
u_ch¨
 *
	m«me
;

480 #i‡(
NGX_DEBUG
)

481 
ngx_¨øy_t
 
	mdebug_c⁄√˘i⁄
;

483 } 
	tngx_evít_c⁄f_t
;

487 
ngx_°r_t
 *
	m«me
;

489 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

490 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

492 
ngx_evít_a˘i⁄s_t
 
	ma˘i⁄s
;

493 } 
	tngx_evít_moduÀ_t
;

496 
ngx_©omic_t
 *
ngx_c⁄√˘i⁄_cou¡î
;

498 
ngx_©omic_t
 *
ngx_ac˚±_muãx_±r
;

499 
ngx_shmtx_t
 
ngx_ac˚±_muãx
;

500 
ngx_uöt_t
 
ngx_u£_ac˚±_muãx
;

501 
ngx_uöt_t
 
ngx_ac˚±_evíts
;

502 
ngx_uöt_t
 
ngx_ac˚±_muãx_hñd
;

503 
ngx_m£c_t
 
ngx_ac˚±_muãx_dñay
;

504 
ngx_öt_t
 
ngx_ac˚±_dißbÀd
;

507 #i‡(
NGX_STAT_STUB
)

509 
ngx_©omic_t
 *
ngx_°©_ac˚±ed
;

510 
ngx_©omic_t
 *
ngx_°©_h™dÀd
;

511 
ngx_©omic_t
 *
ngx_°©_ªque°s
;

512 
ngx_©omic_t
 *
ngx_°©_a˘ive
;

513 
ngx_©omic_t
 *
ngx_°©_ªadög
;

514 
ngx_©omic_t
 *
ngx_°©_wrôög
;

515 
ngx_©omic_t
 *
ngx_°©_waôög
;

520 
	#NGX_UPDATE_TIME
 1

	)

521 
	#NGX_POST_EVENTS
 2

	)

522 
	#NGX_POST_THREAD_EVENTS
 4

	)

525 
sig_©omic_t
 
ngx_evít_timî_Æ¨m
;

526 
ngx_uöt_t
 
ngx_evít_Êags
;

527 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

528 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

531 
	#ngx_evít_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
) \

532 (*(
	`ngx_gë_c⁄f
(
c⁄f_˘x
, 
ngx_evíts_moduÀ
))Ë[
moduÀ
.
˘x_ödex
];

	)

536 
ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
);

537 
ngx_öt_t
 
ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
);

538 
u_ch¨
 *
ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

541 
ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
);

542 
ngx_öt_t
 
ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
);

543 
ngx_öt_t
 
ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
);

546 #i‡(
NGX_WIN32
)

547 
ngx_evít_ac˚±ex
(
ngx_evít_t
 *
ev
);

548 
ngx_öt_t
 
ngx_evít_po°_ac˚±ex
(
ngx_li°íög_t
 *
ls
, 
ngx_uöt_t
 
n
);

549 
u_ch¨
 *
ngx_ac˚±ex_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

553 
ngx_öt_t
 
ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
);

557 
	#ngx_evít_idít
(
p
Ë((
ngx_c⁄√˘i⁄_t
 *Ë’))->
fd


	)

560 
	~<ngx_evít_timî.h
>

561 
	~<ngx_evít_po°ed.h
>

562 
	~<ngx_evít_busy_lock.h
>

564 #i‡(
NGX_WIN32
)

565 
	~<ngx_io˝_moduÀ.h
>

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_accept.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

19 
	$ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
)

21 
sockÀn_t
 
sockÀn
;

22 
ngx_îr_t
 
îr
;

23 
ngx_log_t
 *
log
;

24 
ngx_uöt_t
 
Àvñ
;

25 
ngx_sockë_t
 
s
;

26 
ngx_evít_t
 *
ªv
, *
wev
;

27 
ngx_li°íög_t
 *
ls
;

28 
ngx_c⁄√˘i⁄_t
 *
c
, *
lc
;

29 
ngx_evít_c⁄f_t
 *
ecf
;

30 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

31 #i‡(
NGX_HAVE_ACCEPT4
)

32 
ngx_uöt_t
 
u£_ac˚±4
 = 1;

35 i‡(
ev
->
timedout
) {

36 i‡(
	`ngx_íabÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
Ë!
NGX_OK
) {

40 
ev
->
timedout
 = 0;

43 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

45 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

46 
ev
->
avaûabÀ
 = 1;

48 } i‡(!(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
)) {

49 
ev
->
avaûabÀ
 = 
ecf
->
mu…i_ac˚±
;

52 
lc
 = 
ev
->
d©a
;

53 
ls
 = 
lc
->
li°íög
;

54 
ev
->
ªady
 = 0;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

57 "ac˚± o¿%V,Ñódy: %d", &
ls
->
addr_ãxt
, 
ev
->
avaûabÀ
);

60 
sockÀn
 = 
NGX_SOCKADDRLEN
;

62 #i‡(
NGX_HAVE_ACCEPT4
)

63 i‡(
u£_ac˚±4
) {

64 
s
 = 
	`ac˚±4
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
,

65 
SOCK_NONBLOCK
);

67 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

70 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

73 i‡(
s
 =(
ngx_sockë_t
) -1) {

74 
îr
 = 
ngx_sockë_î∫o
;

76 i‡(
îr
 =
NGX_EAGAIN
) {

77 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 
îr
,

82 
Àvñ
 = 
NGX_LOG_ALERT
;

84 i‡(
îr
 =
NGX_ECONNABORTED
) {

85 
Àvñ
 = 
NGX_LOG_ERR
;

87 } i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

88 
Àvñ
 = 
NGX_LOG_CRIT
;

91 #i‡(
NGX_HAVE_ACCEPT4
)

92 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
,

93 
u£_ac˚±4
 ? "accept4() failed" : "accept() failed");

95 i‡(
u£_ac˚±4
 && 
îr
 =
NGX_ENOSYS
) {

96 
u£_ac˚±4
 = 0;

97 
ngx_öhîôed_n⁄blockög
 = 0;

101 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
, "accept() failed");

104 i‡(
îr
 =
NGX_ECONNABORTED
) {

105 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

106 
ev
->
avaûabÀ
--;

109 i‡(
ev
->
avaûabÀ
) {

114 i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

115 i‡(
	`ngx_dißbÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
)

116 !
NGX_OK
)

121 i‡(
ngx_u£_ac˚±_muãx
) {

122 i‡(
ngx_ac˚±_muãx_hñd
) {

123 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

124 
ngx_ac˚±_muãx_hñd
 = 0;

127 
ngx_ac˚±_dißbÀd
 = 1;

130 
	`ngx_add_timî
(
ev
, 
ecf
->
ac˚±_muãx_dñay
);

137 #i‡(
NGX_STAT_STUB
)

138 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ac˚±ed
, 1);

141 
ngx_ac˚±_dißbÀd
 = 
ngx_cy˛e
->
c⁄√˘i⁄_n
 / 8

142 - 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
;

144 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
ev
->
log
);

146 i‡(
c
 =
NULL
) {

147 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

148 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

149 
ngx_˛o£_sockë_n
 " failed");

155 #i‡(
NGX_STAT_STUB
)

156 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

159 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
ls
->
poﬁ_size
, 
ev
->
log
);

160 i‡(
c
->
poﬁ
 =
NULL
) {

161 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

165 
c
->
sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
sockÀn
);

166 i‡(
c
->
sockaddr
 =
NULL
) {

167 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

171 
	`ngx_mem˝y
(
c
->
sockaddr
, 
ß
, 
sockÀn
);

173 
log
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_log_t
));

174 i‡(
log
 =
NULL
) {

175 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

181 i‡(
ngx_öhîôed_n⁄blockög
) {

182 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

183 i‡(
	`ngx_blockög
(
s
) == -1) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

185 
ngx_blockög_n
 " failed");

186 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

192 i‡(!(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
))) {

193 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

195 
ngx_n⁄blockög_n
 " failed");

196 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

202 *
log
 = 
ls
->log;

204 
c
->
ªcv
 = 
ngx_ªcv
;

205 
c
->
£nd
 = 
ngx_£nd
;

206 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

207 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

209 
c
->
log
 =Üog;

210 
c
->
poﬁ
->
log
 =Üog;

212 
c
->
sockÀn
 = socklen;

213 
c
->
li°íög
 = 
ls
;

214 
c
->
loˇl_sockaddr
 = 
ls
->
sockaddr
;

215 
c
->
loˇl_sockÀn
 = 
ls
->
sockÀn
;

217 
c
->
u√x≥˘ed_eof
 = 1;

219 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

220 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

221 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

222 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

223 #i‡(
NGX_SOLARIS
)

225 
c
->
£ndfûe
 = 0;

230 
ªv
 = 
c
->
ªad
;

231 
wev
 = 
c
->
wrôe
;

233 
wev
->
ªady
 = 1;

235 i‡(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
)) {

237 
ªv
->
ªady
 = 1;

240 i‡(
ev
->
de„ºed_ac˚±
) {

241 
ªv
->
ªady
 = 1;

242 #i‡(
NGX_HAVE_KQUEUE
)

243 
ªv
->
avaûabÀ
 = 1;

247 
ªv
->
log
 =Üog;

248 
wev
->
log
 =Üog;

259 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

261 #i‡(
NGX_STAT_STUB
)

262 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_h™dÀd
, 1);

265 #i‡(
NGX_THREADS
)

266 
ªv
->
lock
 = &
c
->lock;

267 
wev
->
lock
 = &
c
->lock;

268 
ªv
->
own_lock
 = &
c
->
lock
;

269 
wev
->
own_lock
 = &
c
->
lock
;

272 i‡(
ls
->
addr_¡›
) {

273 
c
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
ls
->
addr_ãxt_max_Àn
);

274 i‡(
c
->
addr_ãxt
.
d©a
 =
NULL
) {

275 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

279 
c
->
addr_ãxt
.
Àn
 = 
	`ngx_sock_¡›
(c->
sockaddr
, c->
sockÀn
,

280 
c
->
addr_ãxt
.
d©a
,

281 
ls
->
addr_ãxt_max_Àn
, 0);

282 i‡(
c
->
addr_ãxt
.
Àn
 == 0) {

283 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

288 #i‡(
NGX_DEBUG
)

291 
sockaddr_ö
 *
sö
;

292 
ngx_cidr_t
 *
cidr
;

293 
ngx_uöt_t
 
i
;

294 #i‡(
NGX_HAVE_INET6
)

295 
sockaddr_ö6
 *
sö6
;

296 
ngx_uöt_t
 
n
;

299 
cidr
 = 
ecf
->
debug_c⁄√˘i⁄
.
ñts
;

300 
i
 = 0; i < 
ecf
->
debug_c⁄√˘i⁄
.
√…s
; i++) {

301 i‡(
cidr
[
i
].
Ámûy
 !(
ngx_uöt_t
Ë
c
->
sockaddr
->
ß_Ámûy
) {

302 
√xt
;

305 
cidr
[
i
].
Ámûy
) {

307 #i‡(
NGX_HAVE_INET6
)

308 
AF_INET6
:

309 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
sockaddr
;

310 
n
 = 0;Ç < 16;Ç++) {

311 i‡((
sö6
->
sö6_addr
.
s6_addr
[
n
]

312 & 
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
[
n
])

313 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

315 
√xt
;

321 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

322 
AF_UNIX
:

327 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

328 i‡((
sö
->
sö_addr
.
s_addr
 & 
cidr
[
i
].
u
.
ö
.
mask
)

329 !
cidr
[
i
].
u
.
ö
.
addr
)

331 
√xt
;

336 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_CONNECTION
|
NGX_LOG_DEBUG_ALL
;

339 
√xt
:

346 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

347 "*%uAác˚±: %V fd:%d", 
c
->
numbî
, &c->
addr_ãxt
, 
s
);

349 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

350 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

351 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

356 
log
->
d©a
 = 
NULL
;

357 
log
->
h™dÀr
 = 
NULL
;

359 
ls
->
	`h™dÀr
(
c
);

361 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

362 
ev
->
avaûabÀ
--;

365 } 
ev
->
avaûabÀ
);

366 
	}
}

369 
ngx_öt_t


370 
	$ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
)

372 i‡(
	`ngx_shmtx_åylock
(&
ngx_ac˚±_muãx
)) {

374 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

377 i‡(
ngx_ac˚±_muãx_hñd


378 && 
ngx_ac˚±_evíts
 == 0

379 && !(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
))

381  
NGX_OK
;

384 i‡(
	`ngx_íabÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

385 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

386  
NGX_ERROR
;

389 
ngx_ac˚±_evíts
 = 0;

390 
ngx_ac˚±_muãx_hñd
 = 1;

392  
NGX_OK
;

395 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

396 "ac˚± muãxÜock faûed: %ui", 
ngx_ac˚±_muãx_hñd
);

398 i‡(
ngx_ac˚±_muãx_hñd
) {

399 i‡(
	`ngx_dißbÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

400  
NGX_ERROR
;

403 
ngx_ac˚±_muãx_hñd
 = 0;

406  
NGX_OK
;

407 
	}
}

410 
ngx_öt_t


411 
	$ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

413 
ngx_uöt_t
 
i
;

414 
ngx_li°íög_t
 *
ls
;

415 
ngx_c⁄√˘i⁄_t
 *
c
;

417 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

418 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

420 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

422 i‡(
c
->
ªad
->
a˘ive
) {

426 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

428 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

429  
NGX_ERROR
;

433 i‡(
	`ngx_add_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

434  
NGX_ERROR
;

439  
NGX_OK
;

440 
	}
}

443 
ngx_öt_t


444 
	$ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

446 
ngx_uöt_t
 
i
;

447 
ngx_li°íög_t
 *
ls
;

448 
ngx_c⁄√˘i⁄_t
 *
c
;

450 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

451 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

453 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

455 i‡(!
c
->
ªad
->
a˘ive
) {

459 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

460 i‡(
	`ngx_dñ_c⁄n
(
c
, 
NGX_DISABLE_EVENT
Ë=
NGX_ERROR
) {

461  
NGX_ERROR
;

465 i‡(
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_DISABLE_EVENT
)

466 =
NGX_ERROR
)

468  
NGX_ERROR
;

473  
NGX_OK
;

474 
	}
}

478 
	$ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

480 
ngx_sockë_t
 
fd
;

482 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

484 
fd
 = 
c
->fd;

485 
c
->
fd
 = (
ngx_sockë_t
) -1;

487 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

488 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_sockë_î∫o
,

489 
ngx_˛o£_sockë_n
 " failed");

492 i‡(
c
->
poﬁ
) {

493 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

496 #i‡(
NGX_STAT_STUB
)

497 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

499 
	}
}

502 
u_ch¨
 *

503 
	$ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

505  
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whileácceptingÇew connection on %V",

506 
log
->
d©a
);

507 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

14 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

15 
ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
);

16 
ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_öt_t


27 
	$ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
, 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

29 
ngx_öt_t
 
rc
;

31 
	`ngx_muãx_lock
(
bl
->
muãx
);

33 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

35 
bl
->
busy
, bl->
max_busy
);

37 i‡(
bl
->
busy
 < bl->
max_busy
) {

38 
bl
->
busy
++;

40 
rc
 = 
NGX_OK
;

42 } i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

43 
bl
->
waôög
++;

44 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

45 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

47 i‡(
bl
->
evíts
) {

48 
bl
->
œ°
->
√xt
 = 
˘x
;

51 
bl
->
evíts
 = 
˘x
;

54 
bl
->
œ°
 = 
˘x
;

56 
rc
 = 
NGX_AGAIN
;

59 
rc
 = 
NGX_BUSY
;

62 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

64  
rc
;

65 
	}
}

68 
ngx_öt_t


69 
	$ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

70 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

72 
ngx_öt_t
 
rc
;

74 
	`ngx_muãx_lock
(
bl
->
muãx
);

76 
rc
 = 
	`ngx_evít_busy_lock_look_ˇchóbÀ
(
bl
, 
˘x
);

78 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

80 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

88 i‡(
rc
 =
NGX_AGAIN
) {

90 i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

91 
bl
->
waôög
++;

92 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

93 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

95 i‡(
bl
->
evíts
 =
NULL
) {

96 
bl
->
evíts
 = 
˘x
;

98 
bl
->
œ°
->
√xt
 = 
˘x
;

100 
bl
->
œ°
 = 
˘x
;

103 
rc
 = 
NGX_BUSY
;

107 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

109  
rc
;

110 
	}
}

114 
	$ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

115 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

117 
ngx_evít_t
 *
ev
;

118 
ngx_evít_busy_lock_˘x_t
 *
wakeup
;

120 
	`ngx_muãx_lock
(
bl
->
muãx
);

122 i‡(
bl
->
evíts
) {

123 
wakeup
 = 
bl
->
evíts
;

124 
bl
->
evíts
 = bl->evíts->
√xt
;

127 
wakeup
 = 
NULL
;

128 
bl
->
busy
--;

136 i‡(
wakeup
 =
NULL
) {

137 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

141 i‡(
˘x
->
md5
) {

142 
wakeup
 = 
bl
->
evíts
; wakeup; wakeu∞wakeup->
√xt
) {

143 i‡(
wakeup
->
md5
 =
NULL
 || wakeup->
¶Ÿ
 !
˘x
->slot) {

147 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

148 
wakeup
->
ˇche_upd©ed
 = 1;

150 
ev
 = 
wakeup
->
evít
;

152 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

155 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

158 
bl
->
waôög
--;

160 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

162 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

163 
wakeup
->
locked
 = 1;

165 
ev
 = 
wakeup
->
evít
;

167 i‡(
ev
->
timî_£t
) {

168 
	`ngx_dñ_timî
(
ev
);

171 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

173 
	}
}

177 
	$ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

178 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

180 
ngx_evít_busy_lock_˘x_t
 *
c
, *
p
;

182 
	`ngx_muãx_lock
(
bl
->
muãx
);

184 
bl
->
waôög
--;

186 i‡(
˘x
 =
bl
->
evíts
) {

187 
bl
->
evíts
 = 
˘x
->
√xt
;

190 
p
 = 
bl
->
evíts
;

191 
c
 = 
bl
->
evíts
->
√xt
; c; c = c->next) {

192 i‡(
c
 =
˘x
) {

193 
p
->
√xt
 = 
˘x
->next;

196 
p
 = 
c
;

200 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

201 
	}
}

204 
ngx_öt_t


205 
	$ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

206 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

208 
ngx_öt_t
 
‰ì
;

209 
ngx_uöt_t
 
i
, 
bô
, 
ˇchóbÀ
, 
mask
;

211 
bô
 = 0;

212 
ˇchóbÀ
 = 0;

213 
‰ì
 = -1;

215 #i‡(
NGX_SUPPRESS_WARN
)

216 
mask
 = 0;

219 
i
 = 0; i < 
bl
->
max_busy
; i++) {

221 i‡((
bô
 & 7) == 0) {

222 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

225 i‡(
mask
 & 1) {

226 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
˘x
->md5, 16) == 0) {

227 
˘x
->
waôög
 = 1;

228 
˘x
->
¶Ÿ
 = 
i
;

229  
NGX_AGAIN
;

231 
ˇchóbÀ
++;

233 } i‡(
‰ì
 == -1) {

234 
‰ì
 = 
i
;

237 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

238 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

239 
‰ì
 = 
i
 + 1;

245 
mask
 >>= 1;

246 
bô
++;

249 i‡(
‰ì
 == -1) {

250  
NGX_BUSY
;

254 i‡(
bl
->
busy
 =bl->
max_busy
) {

255  
NGX_BUSY
;

259 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
˘x
->md5, 16);

260 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

261 
˘x
->
¶Ÿ
 = 
‰ì
;

263 
bl
->
ˇchóbÀ
++;

264 
bl
->
busy
++;

266  
NGX_OK
;

267 
	}
}

271 
	$ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
)

273 
ev
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

275 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

276 
	}
}

280 
	$ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
)

282 
ngx_evít_busy_lock_˘x_t
 *
˘x
;

284 
˘x
 = 
ev
->
d©a
;

285 
˘x
->
	`h™dÀr
(
ev
);

286 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_busy_lock.h

8 #i‚de‡
_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

16 
ngx_evít_busy_lock_˘x_s
 
	tngx_evít_busy_lock_˘x_t
;

18 
	sngx_evít_busy_lock_˘x_s
 {

19 
ngx_evít_t
 *
	mevít
;

20 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

21 *
	md©a
;

22 
ngx_m£c_t
 
	mtimî
;

24 
	mlocked
:1;

25 
	mwaôög
:1;

26 
	mˇche_upd©ed
:1;

28 *
	mmd5
;

29 
ngx_öt_t
 
	m¶Ÿ
;

31 
ngx_evít_busy_lock_˘x_t
 *
	m√xt
;

36 
u_ch¨
 *
	mmd5_mask
;

37 *
	mmd5
;

38 
ngx_uöt_t
 
	mˇchóbÀ
;

40 
ngx_uöt_t
 
	mbusy
;

41 
ngx_uöt_t
 
	mmax_busy
;

43 
ngx_uöt_t
 
	mwaôög
;

44 
ngx_uöt_t
 
	mmax_waôög
;

46 
ngx_evít_busy_lock_˘x_t
 *
	mevíts
;

47 
ngx_evít_busy_lock_˘x_t
 *
	mœ°
;

49 #i‡(
NGX_THREADS
)

50 
ngx_muãx_t
 *
	mmuãx
;

52 } 
	tngx_evít_busy_lock_t
;

55 
ngx_öt_t
 
ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
,

56 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

57 
ngx_öt_t
 
ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

58 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

59 
ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

60 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

61 
ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

62 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_connect.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 
ngx_öt_t


15 
	$ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
)

17 
rc
;

18 
ngx_öt_t
 
evít
;

19 
ngx_îr_t
 
îr
;

20 
ngx_uöt_t
 
Àvñ
;

21 
ngx_sockë_t
 
s
;

22 
ngx_evít_t
 *
ªv
, *
wev
;

23 
ngx_c⁄√˘i⁄_t
 *
c
;

25 
rc
 = 
pc
->
	`gë
’c,Öc->
d©a
);

26 i‡(
rc
 !
NGX_OK
) {

27  
rc
;

30 
s
 = 
	`ngx_sockë
(
pc
->
sockaddr
->
ß_Ámûy
, 
SOCK_STREAM
, 0);

32 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "sockë %d", 
s
);

34 i‡(
s
 =(
ngx_sockë_t
) -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

36 
ngx_sockë_n
 " failed");

37  
NGX_ERROR
;

41 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
pc
->
log
);

43 i‡(
c
 =
NULL
) {

44 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

46 
ngx_˛o£_sockë_n
 "failed");

49  
NGX_ERROR
;

52 i‡(
pc
->
rcvbuf
) {

53 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVBUF
,

54 (c⁄° *Ë&
pc
->
rcvbuf
, ()) == -1)

56 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

58 
Áûed
;

62 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

64 
ngx_n⁄blockög_n
 " failed");

66 
Áûed
;

69 i‡(
pc
->
loˇl
) {

70 i‡(
	`böd
(
s
, 
pc
->
loˇl
->
sockaddr
,Öc->loˇl->
sockÀn
) == -1) {

71 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

72 "böd(%VËÁûed", &
pc
->
loˇl
->
«me
);

74 
Áûed
;

78 
c
->
ªcv
 = 
ngx_ªcv
;

79 
c
->
£nd
 = 
ngx_£nd
;

80 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

81 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

83 
c
->
£ndfûe
 = 1;

85 
c
->
log_îr‹
 = 
pc
->log_error;

87 i‡(
pc
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

88 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

89 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

91 #i‡(
NGX_SOLARIS
)

93 
c
->
£ndfûe
 = 0;

97 
ªv
 = 
c
->
ªad
;

98 
wev
 = 
c
->
wrôe
;

100 
ªv
->
log
 = 
pc
->log;

101 
wev
->
log
 = 
pc
->log;

103 
pc
->
c⁄√˘i⁄
 = 
c
;

105 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

107 #i‡(
NGX_THREADS
)

111 
ªv
->
lock
 = 
pc
->lock;

112 
wev
->
lock
 = 
pc
->lock;

113 
ªv
->
own_lock
 = &
c
->
lock
;

114 
wev
->
own_lock
 = &
c
->
lock
;

118 i‡(
ngx_add_c⁄n
) {

119 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

120 
Áûed
;

124 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0,

125 "c⁄√˘Åÿ%V, fd:%d #%uA", 
pc
->
«me
, 
s
, 
c
->
numbî
);

127 
rc
 = 
	`c⁄√˘
(
s
, 
pc
->
sockaddr
,Öc->
sockÀn
);

129 i‡(
rc
 == -1) {

130 
îr
 = 
ngx_sockë_î∫o
;

133 i‡(
îr
 !
NGX_EINPROGRESS


134 #i‡(
NGX_WIN32
)

136 && 
îr
 !
NGX_EAGAIN


140 i‡(
îr
 =
NGX_ECONNREFUSED


141 #i‡(
NGX_LINUX
)

146 || 
îr
 =
NGX_EAGAIN


148 || 
îr
 =
NGX_ECONNRESET


149 || 
îr
 =
NGX_ENETDOWN


150 || 
îr
 =
NGX_ENETUNREACH


151 || 
îr
 =
NGX_EHOSTDOWN


152 || 
îr
 =
NGX_EHOSTUNREACH
)

154 
Àvñ
 = 
NGX_LOG_ERR
;

157 
Àvñ
 = 
NGX_LOG_CRIT
;

160 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, "connect()Åo %V failed",

161 
pc
->
«me
);

163 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

164 
pc
->
c⁄√˘i⁄
 = 
NULL
;

166  
NGX_DECLINED
;

170 i‡(
ngx_add_c⁄n
) {

171 i‡(
rc
 == -1) {

175  
NGX_AGAIN
;

178 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

180 
wev
->
ªady
 = 1;

182  
NGX_OK
;

185 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

187 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

188 "c⁄√˘(): %d", 
rc
);

192 i‡(
	`ngx_blockög
(
s
) == -1) {

193 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

194 
ngx_blockög_n
 " failed");

195 
Áûed
;

205 
ªv
->
ªady
 = 1;

206 
wev
->
ªady
 = 1;

208  
NGX_OK
;

211 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

215 
evít
 = 
NGX_CLEAR_EVENT
;

221 
evít
 = 
NGX_LEVEL_EVENT
;

224 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

225 
Áûed
;

228 i‡(
rc
 == -1) {

232 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
evít
Ë!
NGX_OK
) {

233 
Áûed
;

236  
NGX_AGAIN
;

239 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

241 
wev
->
ªady
 = 1;

243  
NGX_OK
;

245 
Áûed
:

247 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

248 
pc
->
c⁄√˘i⁄
 = 
NULL
;

250  
NGX_ERROR
;

251 
	}
}

254 
ngx_öt_t


255 
	$ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

257  
NGX_OK
;

258 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_connect.h

8 #i‚de‡
_NGX_EVENT_CONNECT_H_INCLUDED_


9 
	#_NGX_EVENT_CONNECT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_PEER_KEEPALIVE
 1

	)

18 
	#NGX_PEER_NEXT
 2

	)

19 
	#NGX_PEER_FAILED
 4

	)

22 
ngx_≥î_c⁄√˘i⁄_s
 
	tngx_≥î_c⁄√˘i⁄_t
;

24 
	$ngx_öt_t
 (*
	tngx_evít_gë_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

25 *
	td©a
);

26 (*
	tngx_evít_‰ì_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
, *
	td©a
,

27 
	tngx_uöt_t
 
	t°©e
);

28 #i‡(
NGX_SSL
)

30 
	$ngx_öt_t
 (*
	tngx_evít_£t_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

31 *
	td©a
);

32 (*
	tngx_evít_ßve_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

33 *
	td©a
);

37 
	sngx_≥î_c⁄√˘i⁄_s
 {

38 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

40 
sockaddr
 *sockaddr;

41 
sockÀn_t
 
sockÀn
;

42 
ngx_°r_t
 *
«me
;

44 
ngx_uöt_t
 
åõs
;

46 
ngx_evít_gë_≥î_±
 
gë
;

47 
ngx_evít_‰ì_≥î_±
 
‰ì
;

48 *
d©a
;

50 #i‡(
NGX_SSL
)

51 
ngx_evít_£t_≥î_£ssi⁄_±
 
£t_£ssi⁄
;

52 
ngx_evít_ßve_≥î_£ssi⁄_±
 
ßve_£ssi⁄
;

55 #i‡(
NGX_THREADS
)

56 
ngx_©omic_t
 *
lock
;

59 
ngx_addr_t
 *
loˇl
;

61 
rcvbuf
;

63 
ngx_log_t
 *
log
;

65 
ˇched
:1;

68 
log_îr‹
:2;

72 
ngx_öt_t
 
	`ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

73 
ngx_öt_t
 
	`ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_mutex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
	$ngx_evít_muãx_timedlock
(
ngx_evít_muãx_t
 *
m
, 
ngx_m£c_t
 
timî
,

14 
ngx_evít_t
 *
ev
)

16 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

17 "lockÉvíàmuãx %∞lock:%XD", 
m
, m->
lock
);

19 i‡(
m
->
lock
) {

21 i‡(
m
->
evíts
 =
NULL
) {

22 
m
->
evíts
 = 
ev
;

25 
m
->
œ°
->
√xt
 = 
ev
;

28 
m
->
œ°
 = 
ev
;

29 
ev
->
√xt
 = 
NULL
;

31 #i‡(
NGX_THREADS0
)

32 
ev
->
light
 = 1;

35 
	`ngx_add_timî
(
ev
, 
timî
);

37  
NGX_AGAIN
;

40 
m
->
lock
 = 1;

42  
NGX_OK
;

43 
	}
}

46 
ngx_öt_t
 
	$ngx_evít_muãx_u∆ock
(
ngx_evít_muãx_t
 *
m
, 
ngx_log_t
 *
log
)

48 
ngx_evít_t
 *
ev
;

50 i‡(
m
->
lock
 == 0) {

51 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

52 "åögÅÿu∆ockÅhê‰ìÉvíàmuãx %p", 
m
);

53  
NGX_ERROR
;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

57 "u∆ockÉvíàmuãx %p,Çexàevít: %p", 
m
, m->
evíts
);

59 
m
->
lock
 = 0;

61 i‡(
m
->
evíts
) {

62 
ev
 = 
m
->
evíts
;

63 
m
->
evíts
 = 
ev
->
√xt
;

65 
ev
->
√xt
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

66 
ngx_po°ed_evíts
 = 
ev
;

69  
NGX_OK
;

70 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_openssl.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mígöe
;

15 } 
	tngx_›ís¶_c⁄f_t
;

18 
ngx_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
);

19 
ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
,

20 
ªt
);

21 
ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
);

22 
ngx_öt_t
 
ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
);

23 
ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

24 
ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

25 
ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
,

27 
ngx_îr_t
 
îr
, *
ãxt
);

28 
ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
);

30 
ngx_öt_t
 
ngx_s¶_£ssi⁄_id_c⁄ãxt
(
ngx_s¶_t
 *
s¶
,

31 
ngx_°r_t
 *
£ss_˘x
);

32 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

33 
ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

34 
ngx_s¶_£ssi⁄_t
 *
£ss
);

35 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

36 
u_ch¨
 *
id
, 
Àn
, *
c›y
);

37 
ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

38 
ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

39 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
);

40 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

41 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

43 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


44 
ngx_s¶_£ssi⁄_tickë_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

45 *
«me
, *
iv
, 
EVP_CIPHER_CTX
 *
e˘x
,

46 
HMAC_CTX
 *
h˘x
, 
íc
);

49 *
ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

50 *
ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

51 
ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
);

54 
ngx_comm™d_t
 
	gngx_›ís¶_comm™ds
[] = {

56 { 
ngx_°rög
("ssl_engine"),

57 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_›ís¶_ígöe
,

61 
NULL
 },

63 
ngx_nuŒ_comm™d


67 
ngx_c‹e_moduÀ_t
 
	gngx_›ís¶_moduÀ_˘x
 = {

68 
ngx_°rög
("openssl"),

69 
ngx_›ís¶_¸óã_c⁄f
,

70 
NULL


74 
ngx_moduÀ_t
 
	gngx_›ís¶_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_›ís¶_moduÀ_˘x
,

77 
ngx_›ís¶_comm™ds
,

78 
NGX_CORE_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
ngx_›ís¶_exô
,

86 
NGX_MODULE_V1_PADDING


90 
	gngx_s¶_c⁄√˘i⁄_ödex
;

91 
	gngx_s¶_£rvî_c⁄f_ödex
;

92 
	gngx_s¶_£ssi⁄_ˇche_ödex
;

93 
	gngx_s¶_£ssi⁄_tickë_keys_ödex
;

94 
	gngx_s¶_˚πifiˇã_ödex
;

95 
	gngx_s¶_°≠lög_ödex
;

98 
ngx_öt_t


99 
	$ngx_s¶_öô
(
ngx_log_t
 *
log
)

101 
	`OPENSSL_c⁄fig
(
NULL
);

103 
	`SSL_libøry_öô
();

104 
	`SSL_lﬂd_îr‹_°rögs
();

106 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

108 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

109 #i‚de‡
SSL_OP_NO_COMPRESSION


115 
n
;

116 
	`STACK_OF
(
SSL_COMP
Ë*
s¶_comp_mëhods
;

118 
s¶_comp_mëhods
 = 
	`SSL_COMP_gë_com¥essi⁄_mëhods
();

119 
n
 = 
	`sk_SSL_COMP_num
(
s¶_comp_mëhods
);

121 
n
--) {

122 (Ë
	`sk_SSL_COMP_p›
(
s¶_comp_mëhods
);

128 
ngx_s¶_c⁄√˘i⁄_ödex
 = 
	`SSL_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL, NULL);

130 i‡(
ngx_s¶_c⁄√˘i⁄_ödex
 == -1) {

131 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "SSL_get_ex_new_index() failed");

132  
NGX_ERROR
;

135 
ngx_s¶_£rvî_c⁄f_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

136 
NULL
);

137 i‡(
ngx_s¶_£rvî_c⁄f_ödex
 == -1) {

138 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

140  
NGX_ERROR
;

143 
ngx_s¶_£ssi⁄_ˇche_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

144 
NULL
);

145 i‡(
ngx_s¶_£ssi⁄_ˇche_ödex
 == -1) {

146 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

148  
NGX_ERROR
;

151 
ngx_s¶_£ssi⁄_tickë_keys_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL,

152 
NULL
, NULL);

153 i‡(
ngx_s¶_£ssi⁄_tickë_keys_ödex
 == -1) {

154 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

156  
NGX_ERROR
;

159 
ngx_s¶_˚πifiˇã_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

160 
NULL
);

161 i‡(
ngx_s¶_˚πifiˇã_ödex
 == -1) {

162 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

164  
NGX_ERROR
;

167 
ngx_s¶_°≠lög_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

168 
NULL
);

169 i‡(
ngx_s¶_°≠lög_ödex
 == -1) {

170 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

172  
NGX_ERROR
;

175  
NGX_OK
;

176 
	}
}

179 
ngx_öt_t


180 
	$ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
)

182 
s¶
->
˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_mëhod
());

184 i‡(
s¶
->
˘x
 =
NULL
) {

185 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "SSL_CTX_new() failed");

186  
NGX_ERROR
;

189 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
, 
d©a
) == 0) {

190 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

192  
NGX_ERROR
;

195 
s¶
->
buf„r_size
 = 
NGX_SSL_BUFSIZE
;

199 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_SESS_ID_BUG
);

200 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NETSCAPE_CHALLENGE_BUG
);

204 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
);

205 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
);

207 #ifde‡
SSL_OP_MSIE_SSLV2_RSA_PADDING


209 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MSIE_SSLV2_RSA_PADDING
);

212 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLEAY_080_CLIENT_DH_BUG
);

213 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_D5_BUG
);

214 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_BLOCK_PADDING_BUG
);

216 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
);

218 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_DH_USE
);

220 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv2
)) {

221 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv2
);

223 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv3
)) {

224 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv3
);

226 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1
)) {

227 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1
);

229 #ifde‡
SSL_OP_NO_TLSv1_1


230 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_1
)) {

231 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

234 #ifde‡
SSL_OP_NO_TLSv1_2


235 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_2
)) {

236 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

240 #ifde‡
SSL_OP_NO_COMPRESSION


241 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_COMPRESSION
);

244 #ifde‡
SSL_MODE_RELEASE_BUFFERS


245 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

248 
	`SSL_CTX_£t_ªad_ahód
(
s¶
->
˘x
, 1);

250 
	`SSL_CTX_£t_öfo_ˇŒback
(
s¶
->
˘x
, 
ngx_s¶_öfo_ˇŒback
);

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

258 
ngx_°r_t
 *
key
)

260 
BIO
 *
bio
;

261 
X509
 *
x509
;

262 
u_l⁄g
 
n
;

264 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

265  
NGX_ERROR
;

274 
bio
 = 
	`BIO_√w_fûe
((*Ë
˚π
->
d©a
, "r");

275 i‡(
bio
 =
NULL
) {

276 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

277 "BIO_√w_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

278  
NGX_ERROR
;

281 
x509
 = 
	`PEM_ªad_bio_X509_AUX
(
bio
, 
NULL
, NULL, NULL);

282 i‡(
x509
 =
NULL
) {

283 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

284 "PEM_ªad_bio_X509_AUX(\"%s\"ËÁûed", 
˚π
->
d©a
);

285 
	`BIO_‰ì
(
bio
);

286  
NGX_ERROR
;

289 i‡(
	`SSL_CTX_u£_˚πifiˇã
(
s¶
->
˘x
, 
x509
) == 0) {

290 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

291 "SSL_CTX_u£_˚πifiˇã(\"%s\"ËÁûed", 
˚π
->
d©a
);

292 
	`X509_‰ì
(
x509
);

293 
	`BIO_‰ì
(
bio
);

294  
NGX_ERROR
;

297 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
, 
x509
)

300 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

302 
	`X509_‰ì
(
x509
);

303 
	`BIO_‰ì
(
bio
);

304  
NGX_ERROR
;

307 
	`X509_‰ì
(
x509
);

313 
x509
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

314 i‡(
x509
 =
NULL
) {

315 
n
 = 
	`ERR_≥ek_œ°_îr‹
();

317 i‡(
	`ERR_GET_LIB
(
n
Ë=
ERR_LIB_PEM


318 && 
	`ERR_GET_REASON
(
n
Ë=
PEM_R_NO_START_LINE
)

321 
	`ERR_˛ór_îr‹
();

327 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

328 "PEM_ªad_bio_X509(\"%s\"ËÁûed", 
˚π
->
d©a
);

329 
	`BIO_‰ì
(
bio
);

330  
NGX_ERROR
;

333 i‡(
	`SSL_CTX_add_exåa_chaö_˚π
(
s¶
->
˘x
, 
x509
) == 0) {

334 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

336 
˚π
->
d©a
);

337 
	`X509_‰ì
(
x509
);

338 
	`BIO_‰ì
(
bio
);

339  
NGX_ERROR
;

343 
	`BIO_‰ì
(
bio
);

345 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
key
, 1Ë!
NGX_OK
) {

346  
NGX_ERROR
;

349 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
s¶
->
˘x
, (*Ë
key
->
d©a
,

350 
SSL_FILETYPE_PEM
)

353 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

354 "SSL_CTX_u£_Priv©eKey_fûe(\"%s\"ËÁûed", 
key
->
d©a
);

355  
NGX_ERROR
;

358  
NGX_OK
;

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

364 
ngx_öt_t
 
dïth
)

366 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

368 
	`SSL_CTX_£t_vîify
(
s¶
->
˘x
, 
SSL_VERIFY_PEER
, 
ngx_s¶_vîify_ˇŒback
);

370 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

372 i‡(
˚π
->
Àn
 == 0) {

373  
NGX_OK
;

376 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

377  
NGX_ERROR
;

380 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

383 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

385 
˚π
->
d©a
);

386  
NGX_ERROR
;

394 
	`ERR_˛ór_îr‹
();

396 
li°
 = 
	`SSL_lﬂd_˛õ¡_CA_fûe
((*Ë
˚π
->
d©a
);

398 i‡(
li°
 =
NULL
) {

399 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

400 "SSL_lﬂd_˛õ¡_CA_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

401  
NGX_ERROR
;

409 
	`ERR_˛ór_îr‹
();

411 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
s¶
->
˘x
, 
li°
);

413  
NGX_OK
;

414 
	}
}

417 
ngx_öt_t


418 
	$ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

419 
ngx_öt_t
 
dïth
)

421 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

423 i‡(
˚π
->
Àn
 == 0) {

424  
NGX_OK
;

427 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

428  
NGX_ERROR
;

431 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

434 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

436 
˚π
->
d©a
);

437  
NGX_ERROR
;

445 
	`ERR_˛ór_îr‹
();

447  
NGX_OK
;

448 
	}
}

451 
ngx_öt_t


452 
	$ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
)

454 
X509_STORE
 *
°‹e
;

455 
X509_LOOKUP
 *
lookup
;

457 i‡(
¸l
->
Àn
 == 0) {

458  
NGX_OK
;

461 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
¸l
, 1Ë!
NGX_OK
) {

462  
NGX_ERROR
;

465 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

467 i‡(
°‹e
 =
NULL
) {

468 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

470  
NGX_ERROR
;

473 
lookup
 = 
	`X509_STORE_add_lookup
(
°‹e
, 
	`X509_LOOKUP_fûe
());

475 i‡(
lookup
 =
NULL
) {

476 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

478  
NGX_ERROR
;

481 i‡(
	`X509_LOOKUP_lﬂd_fûe
(
lookup
, (*Ë
¸l
->
d©a
, 
X509_FILETYPE_PEM
)

484 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

485 "X509_LOOKUP_lﬂd_fûe(\"%s\"ËÁûed", 
¸l
->
d©a
);

486  
NGX_ERROR
;

489 
	`X509_STORE_£t_Êags
(
°‹e
,

490 
X509_V_FLAG_CRL_CHECK
|
X509_V_FLAG_CRL_CHECK_ALL
);

492  
NGX_OK
;

493 
	}
}

497 
	$ngx_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
)

499 #i‡(
NGX_DEBUG
)

500 *
subje˘
, *
issuî
;

501 
îr
, 
dïth
;

502 
X509
 *
˚π
;

503 
X509_NAME
 *
¢ame
, *
öame
;

504 
ngx_c⁄√˘i⁄_t
 *
c
;

505 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
;

507 
s¶_c⁄n
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
x509_°‹e
,

508 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

510 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

512 
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
x509_°‹e
);

513 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
x509_°‹e
);

514 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
x509_°‹e
);

516 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

517 
subje˘
 = 
¢ame
 ? 
	`X509_NAME_⁄ñöe
(¢ame, 
NULL
, 0) : "(none)";

519 
öame
 = 
	`X509_gë_issuî_«me
(
˚π
);

520 
issuî
 = 
öame
 ? 
	`X509_NAME_⁄ñöe
(öame, 
NULL
, 0) : "(none)";

522 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

525 
ok
, 
îr
, 
dïth
, 
subje˘
, 
issuî
);

527 i‡(
¢ame
) {

528 
	`OPENSSL_‰ì
(
subje˘
);

531 i‡(
öame
) {

532 
	`OPENSSL_‰ì
(
issuî
);

537 
	}
}

541 
	$ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
, 
ªt
)

543 
BIO
 *
rbio
, *
wbio
;

544 
ngx_c⁄√˘i⁄_t
 *
c
;

546 i‡(
whîe
 & 
SSL_CB_HANDSHAKE_START
) {

547 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

549 i‡(
c
->
s¶
->
h™dshaked
) {

550 
c
->
s¶
->
ª√gŸüti⁄
 = 1;

551 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÑenegotiation");

555 i‡((
whîe
 & 
SSL_CB_ACCEPT_LOOP
) == SSL_CB_ACCEPT_LOOP) {

556 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

558 i‡(!
c
->
s¶
->
h™dshake_buf„r_£t
) {

570 
rbio
 = 
	`SSL_gë_rbio
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

571 
wbio
 = 
	`SSL_gë_wbio
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

573 i‡(
rbio
 !
wbio
) {

574 (Ë
	`BIO_£t_wrôe_buf„r_size
(
wbio
, 
NGX_SSL_BUFSIZE
);

575 
c
->
s¶
->
h™dshake_buf„r_£t
 = 1;

579 
	}
}

582 
RSA
 *

583 
	$ngx_s¶_rß512_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
is_exp‹t
,

584 
key_Àngth
)

586 
RSA
 *
key
;

588 i‡(
key_Àngth
 == 512) {

589 i‡(
key
 =
NULL
) {

590 
key
 = 
	`RSA_gíî©e_key
(512, 
RSA_F4
, 
NULL
, NULL);

594  
key
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

601 
DH
 *
dh
;

602 
BIO
 *
bio
;

612 
dh1024_p
[] = {

626 
dh1024_g
[] = { 0x02 };

629 i‡(
fûe
->
Àn
 == 0) {

631 
dh
 = 
	`DH_√w
();

632 i‡(
dh
 =
NULL
) {

633 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "DH_new() failed");

634  
NGX_ERROR
;

637 
dh
->
p
 = 
	`BN_bö2bn
(
dh1024_p
, (dh1024_p), 
NULL
);

638 
dh
->
g
 = 
	`BN_bö2bn
(
dh1024_g
, (dh1024_g), 
NULL
);

640 i‡(
dh
->
p
 =
NULL
 || dh->
g
 == NULL) {

641 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "BN_bin2bn() failed");

642 
	`DH_‰ì
(
dh
);

643  
NGX_ERROR
;

646 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

648 
	`DH_‰ì
(
dh
);

650  
NGX_OK
;

653 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

654  
NGX_ERROR
;

657 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

658 i‡(
bio
 =
NULL
) {

659 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

660 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

661  
NGX_ERROR
;

664 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

665 i‡(
dh
 =
NULL
) {

666 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

667 "PEM_ªad_bio_DH∑øms(\"%s\"ËÁûed", 
fûe
->
d©a
);

668 
	`BIO_‰ì
(
bio
);

669  
NGX_ERROR
;

672 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

674 
	`DH_‰ì
(
dh
);

675 
	`BIO_‰ì
(
bio
);

677  
NGX_OK
;

678 
	}
}

681 
ngx_öt_t


682 
	$ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
)

684 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

685 #i‚de‡
OPENSSL_NO_ECDH


686 
nid
;

687 
EC_KEY
 *
ecdh
;

696 
nid
 = 
	`OBJ_¢2nid
((c⁄° *Ë
«me
->
d©a
);

697 i‡(
nid
 == 0) {

698 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

699 "Unknow¿curvê«mê\"%s\"", 
«me
->
d©a
);

700  
NGX_ERROR
;

703 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
nid
);

704 i‡(
ecdh
 =
NULL
) {

705 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

706 "U«bÀÅÿ¸óã curvê\"%s\"", 
«me
->
d©a
);

707  
NGX_ERROR
;

710 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_ECDH_USE
);

712 
	`SSL_CTX_£t_tmp_ecdh
(
s¶
->
˘x
, 
ecdh
);

714 
	`EC_KEY_‰ì
(
ecdh
);

718  
NGX_OK
;

719 
	}
}

722 
ngx_öt_t


723 
	$ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

725 
ngx_s¶_c⁄√˘i⁄_t
 *
sc
;

727 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_s¶_c⁄√˘i⁄_t
));

728 i‡(
sc
 =
NULL
) {

729  
NGX_ERROR
;

732 
sc
->
buf„r
 = ((
Êags
 & 
NGX_SSL_BUFFER
) != 0);

733 
sc
->
buf„r_size
 = 
s¶
->buffer_size;

735 
sc
->
c⁄√˘i⁄
 = 
	`SSL_√w
(
s¶
->
˘x
);

737 i‡(
sc
->
c⁄√˘i⁄
 =
NULL
) {

738 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_new() failed");

739  
NGX_ERROR
;

742 i‡(
	`SSL_£t_fd
(
sc
->
c⁄√˘i⁄
, 
c
->
fd
) == 0) {

743 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_fd() failed");

744  
NGX_ERROR
;

747 i‡(
Êags
 & 
NGX_SSL_CLIENT
) {

748 
	`SSL_£t_c⁄√˘_°©e
(
sc
->
c⁄√˘i⁄
);

751 
	`SSL_£t_ac˚±_°©e
(
sc
->
c⁄√˘i⁄
);

754 i‡(
	`SSL_£t_ex_d©a
(
sc
->
c⁄√˘i⁄
, 
ngx_s¶_c⁄√˘i⁄_ödex
, 
c
) == 0) {

755 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_ex_data() failed");

756  
NGX_ERROR
;

759 
c
->
s¶
 = 
sc
;

761  
NGX_OK
;

762 
	}
}

765 
ngx_öt_t


766 
	$ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
)

768 i‡(
£ssi⁄
) {

769 i‡(
	`SSL_£t_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
, 
£ssi⁄
) == 0) {

770 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_session() failed");

771  
NGX_ERROR
;

775  
NGX_OK
;

776 
	}
}

779 
ngx_öt_t


780 
	$ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

782 
n
, 
s¶îr
;

783 
ngx_îr_t
 
îr
;

785 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

787 
n
 = 
	`SSL_do_h™dshake
(
c
->
s¶
->
c⁄√˘i⁄
);

789 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_do_h™dshake: %d", 
n
);

791 i‡(
n
 == 1) {

793 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

794  
NGX_ERROR
;

797 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

798  
NGX_ERROR
;

801 #i‡(
NGX_DEBUG
)

803 
buf
[129], *
s
, *
d
;

804 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

807 
SSL_CIPHER
 *
cùhî
;

809 
cùhî
 = 
	`SSL_gë_cuºít_cùhî
(
c
->
s¶
->
c⁄√˘i⁄
);

811 i‡(
cùhî
) {

812 
	`SSL_CIPHER_des¸ùti⁄
(
cùhî
, &
buf
[1], 128);

814 
s
 = &
buf
[1], 
d
 = buf; *s; s++) {

815 i‡(*
s
 =' ' && *
d
 == ' ') {

819 i‡(*
s
 =
LF
 || *†=
CR
) {

823 *++
d
 = *
s
;

826 i‡(*
d
 != ' ') {

827 
d
++;

830 *
d
 = '\0';

832 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

834 
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
), &
buf
[1]);

836 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

837 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

842 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

848 
c
->
s¶
->
h™dshaked
 = 1;

850 
c
->
ªcv
 = 
ngx_s¶_ªcv
;

851 
c
->
£nd
 = 
ngx_s¶_wrôe
;

852 
c
->
ªcv_chaö
 = 
ngx_s¶_ªcv_chaö
;

853 
c
->
£nd_chaö
 = 
ngx_s¶_£nd_chaö
;

856 i‡(
c
->
s¶
->
c⁄√˘i⁄
->
s3
) {

857 
c
->
s¶
->
c⁄√˘i⁄
->
s3
->
Êags
 |
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
;

860  
NGX_OK
;

863 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

865 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

867 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

868 
c
->
ªad
->
ªady
 = 0;

869 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

870 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

872 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

873  
NGX_ERROR
;

876 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

877  
NGX_ERROR
;

880  
NGX_AGAIN
;

883 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

884 
c
->
wrôe
->
ªady
 = 0;

885 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

886 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

888 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

889  
NGX_ERROR
;

892 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

893  
NGX_ERROR
;

896  
NGX_AGAIN
;

899 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

901 
c
->
s¶
->
no_waô_shutdown
 = 1;

902 
c
->
s¶
->
no_£nd_shutdown
 = 1;

903 
c
->
ªad
->
eof
 = 1;

905 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

906 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

909  
NGX_ERROR
;

912 
c
->
ªad
->
îr‹
 = 1;

914 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_do_handshake() failed");

916  
NGX_ERROR
;

917 
	}
}

921 
	$ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
)

923 
ngx_c⁄√˘i⁄_t
 *
c
;

925 
c
 = 
ev
->
d©a
;

927 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

928 "SSL h™dshakêh™dÀr: %d", 
ev
->
wrôe
);

930 i‡(
ev
->
timedout
) {

931 
c
->
s¶
->
	`h™dÀr
(c);

935 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

939 
c
->
s¶
->
	`h™dÀr
(c);

940 
	}
}

943 
ssize_t


944 
	$ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

946 
u_ch¨
 *
œ°
;

947 
ssize_t
 
n
, 
byãs
;

948 
ngx_buf_t
 *
b
;

950 
byãs
 = 0;

952 
b
 = 
˛
->
buf
;

953 
œ°
 = 
b
->last;

957 
n
 = 
	`ngx_s¶_ªcv
(
c
, 
œ°
, 
b
->
íd
 -Üast);

959 i‡(
n
 > 0) {

960 
œ°
 +
n
;

961 
byãs
 +
n
;

963 i‡(
œ°
 =
b
->
íd
) {

964 
˛
 = cl->
√xt
;

966 i‡(
˛
 =
NULL
) {

967  
byãs
;

970 
b
 = 
˛
->
buf
;

971 
œ°
 = 
b
->last;

977 i‡(
byãs
) {

979 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

980 
c
->
ªad
->
ªady
 = 1;

983  
byãs
;

986  
n
;

988 
	}
}

991 
ssize_t


992 
	$ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

994 
n
, 
byãs
;

996 i‡(
c
->
s¶
->
œ°
 =
NGX_ERROR
) {

997 
c
->
ªad
->
îr‹
 = 1;

998  
NGX_ERROR
;

1001 i‡(
c
->
s¶
->
œ°
 =
NGX_DONE
) {

1002 
c
->
ªad
->
ªady
 = 0;

1003 
c
->
ªad
->
eof
 = 1;

1007 
byãs
 = 0;

1009 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1018 
n
 = 
	`SSL_ªad
(
c
->
s¶
->
c⁄√˘i⁄
, 
buf
, 
size
);

1020 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_ªad: %d", 
n
);

1022 i‡(
n
 > 0) {

1023 
byãs
 +
n
;

1026 
c
->
s¶
->
œ°
 = 
	`ngx_s¶_h™dÀ_ªcv
(c, 
n
);

1028 i‡(
c
->
s¶
->
œ°
 =
NGX_OK
) {

1030 
size
 -
n
;

1032 i‡(
size
 == 0) {

1033 
c
->
ªad
->
ªady
 = 1;

1034  
byãs
;

1037 
buf
 +
n
;

1042 i‡(
byãs
) {

1043 i‡(
c
->
s¶
->
œ°
 !
NGX_AGAIN
) {

1044 
c
->
ªad
->
ªady
 = 1;

1047  
byãs
;

1050 
c
->
s¶
->
œ°
) {

1052 
NGX_DONE
:

1053 
c
->
ªad
->
ªady
 = 0;

1054 
c
->
ªad
->
eof
 = 1;

1057 
NGX_ERROR
:

1058 
c
->
ªad
->
îr‹
 = 1;

1062 
NGX_AGAIN
:

1063  
c
->
s¶
->
œ°
;

1066 
	}
}

1069 
ngx_öt_t


1070 
	$ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
)

1072 
s¶îr
;

1073 
ngx_îr_t
 
îr
;

1075 i‡(
c
->
s¶
->
ª√gŸüti⁄
) {

1082 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
c
->
log
, 0, "SSLÑenegotiation disabled");

1084 
	`ERR_≥ek_îr‹
()) {

1085 
	`ngx_s¶_îr‹
(
NGX_LOG_DEBUG
, 
c
->
log
, 0,

1089 
	`ERR_˛ór_îr‹
();

1091 
c
->
s¶
->
no_waô_shutdown
 = 1;

1092 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1094  
NGX_ERROR
;

1097 i‡(
n
 > 0) {

1099 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
) {

1101 
c
->
wrôe
->
h™dÀr
 = c->
s¶
->
ßved_wrôe_h™dÀr
;

1102 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = 
NULL
;

1103 
c
->
wrôe
->
ªady
 = 1;

1105 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1106  
NGX_ERROR
;

1109 
	`ngx_po°_evít
(
c
->
wrôe
, &
ngx_po°ed_evíts
);

1112  
NGX_OK
;

1115 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1117 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1119 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1121 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1122 
c
->
ªad
->
ªady
 = 0;

1123  
NGX_AGAIN
;

1126 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1128 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1131 
c
->
wrôe
->
ªady
 = 0;

1133 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1134  
NGX_ERROR
;

1141 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
 =
NULL
) {

1142 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = c->
wrôe
->
h™dÀr
;

1143 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_wrôe_h™dÀr
;

1146  
NGX_AGAIN
;

1149 
c
->
s¶
->
no_waô_shutdown
 = 1;

1150 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1152 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

1153 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1155  
NGX_DONE
;

1158 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_read() failed");

1160  
NGX_ERROR
;

1161 
	}
}

1165 
	$ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

1167 
ngx_c⁄√˘i⁄_t
 *
c
;

1169 
c
 = 
wev
->
d©a
;

1171 
c
->
ªad
->
	`h™dÀr
(c->read);

1172 
	}
}

1183 
ngx_chaö_t
 *

1184 
	$ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

1186 
n
;

1187 
ngx_uöt_t
 
Êush
;

1188 
ssize_t
 
£nd
, 
size
;

1189 
ngx_buf_t
 *
buf
;

1191 i‡(!
c
->
s¶
->
buf„r
) {

1193 
ö
) {

1194 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1195 
ö
 = in->
√xt
;

1199 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
ö
->
buf
->
pos
, in->buf->
œ°
 - in->buf->pos);

1201 i‡(
n
 =
NGX_ERROR
) {

1202  
NGX_CHAIN_ERROR
;

1205 i‡(
n
 =
NGX_AGAIN
) {

1206  
ö
;

1209 
ö
->
buf
->
pos
 +
n
;

1210 
c
->
£¡
 +
n
;

1212 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1213 
ö
 = in->
√xt
;

1217  
ö
;

1223 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
)) {

1224 
limô
 = 
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
;

1227 
buf
 = 
c
->
s¶
->buf;

1229 i‡(
buf
 =
NULL
) {

1230 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, c->
s¶
->
buf„r_size
);

1231 i‡(
buf
 =
NULL
) {

1232  
NGX_CHAIN_ERROR
;

1235 
c
->
s¶
->
buf
 = buf;

1238 i‡(
buf
->
°¨t
 =
NULL
) {

1239 
buf
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, c->
s¶
->
buf„r_size
);

1240 i‡(
buf
->
°¨t
 =
NULL
) {

1241  
NGX_CHAIN_ERROR
;

1244 
buf
->
pos
 = buf->
°¨t
;

1245 
buf
->
œ°
 = buf->
°¨t
;

1246 
buf
->
íd
 = buf->
°¨t
 + 
c
->
s¶
->
buf„r_size
;

1249 
£nd
 = 
buf
->
œ°
 - buf->
pos
;

1250 
Êush
 = (
ö
 =
NULL
Ë? 1 : 
buf
->flush;

1254 
ö
 && 
buf
->
œ°
 < buf->
íd
 && 
£nd
 < 
limô
) {

1255 i‡(
ö
->
buf
->
œ°_buf
 || in->buf->
Êush
) {

1256 
Êush
 = 1;

1259 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1260 
ö
 = in->
√xt
;

1264 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

1266 i‡(
size
 > 
buf
->
íd
 - buf->
œ°
) {

1267 
size
 = 
buf
->
íd
 - buf->
œ°
;

1270 i‡(
£nd
 + 
size
 > 
limô
) {

1271 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

1274 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1275 "SSL bu‡c›y: %d", 
size
);

1277 
	`ngx_mem˝y
(
buf
->
œ°
, 
ö
->buf->
pos
, 
size
);

1279 
buf
->
œ°
 +
size
;

1280 
ö
->
buf
->
pos
 +
size
;

1281 
£nd
 +
size
;

1283 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1284 
ö
 = in->
√xt
;

1288 i‡(!
Êush
 && 
£nd
 < 
limô
 && 
buf
->
œ°
 < buf->
íd
) {

1292 
size
 = 
buf
->
œ°
 - buf->
pos
;

1294 i‡(
size
 == 0) {

1295 
buf
->
Êush
 = 0;

1296 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1297  
ö
;

1300 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
buf
->
pos
, 
size
);

1302 i‡(
n
 =
NGX_ERROR
) {

1303  
NGX_CHAIN_ERROR
;

1306 i‡(
n
 =
NGX_AGAIN
) {

1310 
buf
->
pos
 +
n
;

1311 
c
->
£¡
 +
n
;

1313 i‡(
n
 < 
size
) {

1317 
Êush
 = 0;

1319 
buf
->
pos
 = buf->
°¨t
;

1320 
buf
->
œ°
 = buf->
°¨t
;

1322 i‡(
ö
 =
NULL
 || 
£nd
 =
limô
) {

1327 
buf
->
Êush
 = flush;

1329 i‡(
buf
->
pos
 < buf->
œ°
) {

1330 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

1333 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1336  
ö
;

1337 
	}
}

1340 
ssize_t


1341 
	$ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
)

1343 
n
, 
s¶îr
;

1344 
ngx_îr_t
 
îr
;

1346 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1348 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÅÿwrôe: %d", 
size
);

1350 
n
 = 
	`SSL_wrôe
(
c
->
s¶
->
c⁄√˘i⁄
, 
d©a
, 
size
);

1352 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_wrôe: %d", 
n
);

1354 i‡(
n
 > 0) {

1356 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
) {

1358 
c
->
ªad
->
h™dÀr
 = c->
s¶
->
ßved_ªad_h™dÀr
;

1359 
c
->
s¶
->
ßved_ªad_h™dÀr
 = 
NULL
;

1360 
c
->
ªad
->
ªady
 = 1;

1362 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1363  
NGX_ERROR
;

1366 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

1369  
n
;

1372 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1374 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1376 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1378 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1379 
c
->
wrôe
->
ªady
 = 0;

1380  
NGX_AGAIN
;

1383 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1385 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1388 
c
->
ªad
->
ªady
 = 0;

1390 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1391  
NGX_ERROR
;

1399 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
 =
NULL
) {

1400 
c
->
s¶
->
ßved_ªad_h™dÀr
 = c->
ªad
->
h™dÀr
;

1401 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_ªad_h™dÀr
;

1404  
NGX_AGAIN
;

1407 
c
->
s¶
->
no_waô_shutdown
 = 1;

1408 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1409 
c
->
wrôe
->
îr‹
 = 1;

1411 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_write() failed");

1413  
NGX_ERROR
;

1414 
	}
}

1418 
	$ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1420 
ngx_c⁄√˘i⁄_t
 *
c
;

1422 
c
 = 
ªv
->
d©a
;

1424 
c
->
wrôe
->
	`h™dÀr
(c->write);

1425 
	}
}

1429 
	$ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
)

1431 i‡(
c
->
s¶
->
buf
 && c->s¶->buf->
°¨t
) {

1432 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, c->
s¶
->
buf
->
°¨t
Ë=
NGX_OK
) {

1433 
c
->
s¶
->
buf
->
°¨t
 = 
NULL
;

1436 
	}
}

1439 
ngx_öt_t


1440 
	$ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
)

1442 
n
, 
s¶îr
, 
mode
;

1443 
ngx_îr_t
 
îr
;

1445 i‡(
c
->
timedout
) {

1446 
mode
 = 
SSL_RECEIVED_SHUTDOWN
|
SSL_SENT_SHUTDOWN
;

1447 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1450 
mode
 = 
	`SSL_gë_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1452 i‡(
c
->
s¶
->
no_waô_shutdown
) {

1453 
mode
 |
SSL_RECEIVED_SHUTDOWN
;

1456 i‡(
c
->
s¶
->
no_£nd_shutdown
) {

1457 
mode
 |
SSL_SENT_SHUTDOWN
;

1460 i‡(
c
->
s¶
->
no_waô_shutdown
 && c->s¶->
no_£nd_shutdown
) {

1461 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1465 
	`SSL_£t_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 
mode
);

1467 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1469 
n
 = 
	`SSL_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1471 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_shutdown: %d", 
n
);

1473 
s¶îr
 = 0;

1477 i‡(
n
 !1 && 
	`ERR_≥ek_îr‹
()) {

1478 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1480 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1481 "SSL_gë_îr‹: %d", 
s¶îr
);

1484 i‡(
n
 =1 || 
s¶îr
 =0 || s¶î∏=
SSL_ERROR_ZERO_RETURN
) {

1485 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1486 
c
->
s¶
 = 
NULL
;

1488  
NGX_OK
;

1491 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
 || s¶î∏=
SSL_ERROR_WANT_WRITE
) {

1492 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1493 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1495 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1496  
NGX_ERROR
;

1499 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1500  
NGX_ERROR
;

1503 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1504 
	`ngx_add_timî
(
c
->
ªad
, 30000);

1507  
NGX_AGAIN
;

1510 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1512 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_shutdown() failed");

1514 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1515 
c
->
s¶
 = 
NULL
;

1517  
NGX_ERROR
;

1518 
	}
}

1522 
	$ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
)

1524 
ngx_c⁄√˘i⁄_t
 *
c
;

1525 
ngx_c⁄√˘i⁄_h™dÀr_±
 
h™dÀr
;

1527 
c
 = 
ev
->
d©a
;

1528 
h™dÀr
 = 
c
->
s¶
->handler;

1530 i‡(
ev
->
timedout
) {

1531 
c
->
timedout
 = 1;

1534 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "SSL shutdown handler");

1536 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

1540 
	`h™dÀr
(
c
);

1541 
	}
}

1545 
	$ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
, 
ngx_îr_t
 
îr
,

1546 *
ãxt
)

1548 
n
;

1549 
ngx_uöt_t
 
Àvñ
;

1551 
Àvñ
 = 
NGX_LOG_CRIT
;

1553 i‡(
s¶îr
 =
SSL_ERROR_SYSCALL
) {

1555 i‡(
îr
 =
NGX_ECONNRESET


1556 || 
îr
 =
NGX_EPIPE


1557 || 
îr
 =
NGX_ENOTCONN


1558 || 
îr
 =
NGX_ETIMEDOUT


1559 || 
îr
 =
NGX_ECONNREFUSED


1560 || 
îr
 =
NGX_ENETDOWN


1561 || 
îr
 =
NGX_ENETUNREACH


1562 || 
îr
 =
NGX_EHOSTDOWN


1563 || 
îr
 =
NGX_EHOSTUNREACH
)

1565 
c
->
log_îr‹
) {

1567 
NGX_ERROR_IGNORE_ECONNRESET
:

1568 
NGX_ERROR_INFO
:

1569 
Àvñ
 = 
NGX_LOG_INFO
;

1572 
NGX_ERROR_ERR
:

1573 
Àvñ
 = 
NGX_LOG_ERR
;

1581 } i‡(
s¶îr
 =
SSL_ERROR_SSL
) {

1583 
n
 = 
	`ERR_GET_REASON
(
	`ERR_≥ek_îr‹
());

1586 i‡(
n
 =
SSL_R_BAD_CHANGE_CIPHER_SPEC


1587 || 
n
 =
SSL_R_BLOCK_CIPHER_PAD_IS_WRONG


1588 || 
n
 =
SSL_R_DIGEST_CHECK_FAILED


1589 || 
n
 =
SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST


1590 || 
n
 =
SSL_R_EXCESSIVE_MESSAGE_SIZE


1591 || 
n
 =
SSL_R_LENGTH_MISMATCH


1592 || 
n
 =
SSL_R_NO_CIPHERS_PASSED


1593 || 
n
 =
SSL_R_NO_CIPHERS_SPECIFIED


1594 || 
n
 =
SSL_R_NO_COMPRESSION_SPECIFIED


1595 || 
n
 =
SSL_R_NO_SHARED_CIPHER


1596 || 
n
 =
SSL_R_RECORD_LENGTH_MISMATCH


1597 #ifde‡
SSL_R_PARSE_TLSEXT


1598 || 
n
 =
SSL_R_PARSE_TLSEXT


1600 || 
n
 =
SSL_R_UNEXPECTED_MESSAGE


1601 || 
n
 =
SSL_R_UNEXPECTED_RECORD


1602 || 
n
 =
SSL_R_UNKNOWN_ALERT_TYPE


1603 || 
n
 =
SSL_R_UNKNOWN_PROTOCOL


1604 || 
n
 =
SSL_R_WRONG_VERSION_NUMBER


1605 || 
n
 =
SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC


1606 #ifde‡
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1607 || 
n
 =
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1608 || 
n
 =
SSL_R_RENEGOTIATION_ENCODING_ERR


1609 || 
n
 =
SSL_R_RENEGOTIATION_MISMATCH


1611 #ifde‡
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1612 || 
n
 =
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1614 #ifde‡
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1615 || 
n
 =
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1617 || 
n
 == 1000

1618 || 
n
 =
SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE


1619 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_RECORD_MAC


1620 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPTION_FAILED


1621 || 
n
 =
SSL_R_TLSV1_ALERT_RECORD_OVERFLOW


1622 || 
n
 =
SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE


1623 || 
n
 =
SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE


1624 || 
n
 =
SSL_R_SSLV3_ALERT_NO_CERTIFICATE


1625 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_CERTIFICATE


1626 || 
n
 =
SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE


1627 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED


1628 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED


1629 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN


1630 || 
n
 =
SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER


1631 || 
n
 =
SSL_R_TLSV1_ALERT_UNKNOWN_CA


1632 || 
n
 =
SSL_R_TLSV1_ALERT_ACCESS_DENIED


1633 || 
n
 =
SSL_R_TLSV1_ALERT_DECODE_ERROR


1634 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPT_ERROR


1635 || 
n
 =
SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION


1636 || 
n
 =
SSL_R_TLSV1_ALERT_PROTOCOL_VERSION


1637 || 
n
 =
SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY


1638 || 
n
 =
SSL_R_TLSV1_ALERT_INTERNAL_ERROR


1639 || 
n
 =
SSL_R_TLSV1_ALERT_USER_CANCELLED


1640 || 
n
 =
SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
)

1642 
c
->
log_îr‹
) {

1644 
NGX_ERROR_IGNORE_ECONNRESET
:

1645 
NGX_ERROR_INFO
:

1646 
Àvñ
 = 
NGX_LOG_INFO
;

1649 
NGX_ERROR_ERR
:

1650 
Àvñ
 = 
NGX_LOG_ERR
;

1659 
	`ngx_s¶_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1660 
	}
}

1664 
	$ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
)

1666 
	`ERR_≥ek_îr‹
()) {

1667 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "ignoring stale global SSLÉrror");

1670 
	`ERR_˛ór_îr‹
();

1671 
	}
}

1674 
ngx_cde˛


1675 
	$ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, *
fmt
, ...)

1677 
Êags
;

1678 
u_l⁄g
 
n
;

1679 
va_li°
 
¨gs
;

1680 
u_ch¨
 *
p
, *
œ°
;

1681 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1682 c⁄° *
d©a
;

1684 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

1686 
	`va_°¨t
(
¨gs
, 
fmt
);

1687 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
 - 1, 
fmt
, 
¨gs
);

1688 
	`va_íd
(
¨gs
);

1690 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (SSL:", 
œ°
 -Ö);

1694 
n
 = 
	`ERR_≥ek_îr‹_löe_d©a
(
NULL
, NULL, &
d©a
, &
Êags
);

1696 i‡(
n
 == 0) {

1700 i‡(
p
 >
œ°
) {

1701 
√xt
;

1704 *
p
++ = ' ';

1706 
	`ERR_îr‹_°rög_n
(
n
, (*Ë
p
, 
œ°
 -Ö);

1708 
p
 < 
œ°
 && *p) {

1709 
p
++;

1712 i‡(
p
 < 
œ°
 && *
d©a
 && (
Êags
 & 
ERR_TXT_STRING
)) {

1713 *
p
++ = ':';

1714 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
d©a
, 
œ°
 -Ö);

1717 
√xt
:

1719 (Ë
	`ERR_gë_îr‹
();

1722 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%s)", 
îr°r
);

1723 
	}
}

1726 
ngx_öt_t


1727 
	$ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

1728 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
)

1730 
ˇche_mode
;

1732 
	`SSL_CTX_£t_timeout
(
s¶
->
˘x
, (Ë
timeout
);

1734 i‡(
	`ngx_s¶_£ssi⁄_id_c⁄ãxt
(
s¶
, 
£ss_˘x
Ë!
NGX_OK
) {

1735  
NGX_ERROR
;

1738 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_SCACHE
) {

1739 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
SSL_SESS_CACHE_OFF
);

1740  
NGX_OK
;

1743 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NONE_SCACHE
) {

1756 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
,

1757 
SSL_SESS_CACHE_SERVER


1758 |
SSL_SESS_CACHE_NO_AUTO_CLEAR


1759 |
SSL_SESS_CACHE_NO_INTERNAL_STORE
);

1761 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 1);

1763  
NGX_OK
;

1766 
ˇche_mode
 = 
SSL_SESS_CACHE_SERVER
;

1768 i‡(
shm_z⁄e
 && 
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_BUILTIN_SCACHE
) {

1769 
ˇche_mode
 |
SSL_SESS_CACHE_NO_INTERNAL
;

1772 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
ˇche_mode
);

1774 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_NO_BUILTIN_SCACHE
) {

1776 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_DFLT_BUILTIN_SCACHE
) {

1777 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 
buûtö_£ssi⁄_ˇche
);

1781 i‡(
shm_z⁄e
) {

1782 
	`SSL_CTX_£ss_£t_√w_cb
(
s¶
->
˘x
, 
ngx_s¶_√w_£ssi⁄
);

1783 
	`SSL_CTX_£ss_£t_gë_cb
(
s¶
->
˘x
, 
ngx_s¶_gë_ˇched_£ssi⁄
);

1784 
	`SSL_CTX_£ss_£t_ªmove_cb
(
s¶
->
˘x
, 
ngx_s¶_ªmove_£ssi⁄
);

1786 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
, 
shm_z⁄e
)

1789 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1791  
NGX_ERROR
;

1795  
NGX_OK
;

1796 
	}
}

1799 
ngx_öt_t


1800 
	$ngx_s¶_£ssi⁄_id_c⁄ãxt
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
)

1802 
n
, 
i
;

1803 
X509
 *
˚π
;

1804 
X509_NAME
 *
«me
;

1805 
EVP_MD_CTX
 
md
;

1806 
Àn
;

1807 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

1808 
u_ch¨
 
buf
[
EVP_MAX_MD_SIZE
];

1815 
	`EVP_MD_CTX_öô
(&
md
);

1817 i‡(
	`EVP_Dige°Inô_ex
(&
md
, 
	`EVP_sha1
(), 
NULL
) == 0) {

1818 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1820 
Áûed
;

1823 i‡(
	`EVP_Dige°Upd©e
(&
md
, 
£ss_˘x
->
d©a
, sess_˘x->
Àn
) == 0) {

1824 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1826 
Áûed
;

1829 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

1831 i‡(
	`X509_dige°
(
˚π
, 
	`EVP_sha1
(), 
buf
, &
Àn
) == 0) {

1832 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1834 
Áûed
;

1837 i‡(
	`EVP_Dige°Upd©e
(&
md
, 
buf
, 
Àn
) == 0) {

1838 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1840 
Áûed
;

1843 
li°
 = 
	`SSL_CTX_gë_˛õ¡_CA_li°
(
s¶
->
˘x
);

1845 i‡(
li°
 !
NULL
) {

1846 
n
 = 
	`sk_X509_NAME_num
(
li°
);

1848 
i
 = 0; i < 
n
; i++) {

1849 
«me
 = 
	`sk_X509_NAME_vÆue
(
li°
, 
i
);

1851 i‡(
	`X509_NAME_dige°
(
«me
, 
	`EVP_sha1
(), 
buf
, &
Àn
) == 0) {

1852 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1854 
Áûed
;

1857 i‡(
	`EVP_Dige°Upd©e
(&
md
, 
buf
, 
Àn
) == 0) {

1858 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1860 
Áûed
;

1865 i‡(
	`EVP_Dige°FöÆ_ex
(&
md
, 
buf
, &
Àn
) == 0) {

1866 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1868 
Áûed
;

1871 
	`EVP_MD_CTX_˛ónup
(&
md
);

1873 i‡(
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
s¶
->
˘x
, 
buf
, 
Àn
) == 0) {

1874 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1876  
NGX_ERROR
;

1879  
NGX_OK
;

1881 
Áûed
:

1883 
	`EVP_MD_CTX_˛ónup
(&
md
);

1885  
NGX_ERROR
;

1886 
	}
}

1889 
ngx_öt_t


1890 
	$ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

1892 
size_t
 
Àn
;

1893 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1894 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1896 i‡(
d©a
) {

1897 
shm_z⁄e
->
d©a
 = data;

1898  
NGX_OK
;

1901 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1903 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

1904 
shm_z⁄e
->
d©a
 = 
shpoﬁ
->data;

1905  
NGX_OK
;

1908 
ˇche
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_s¶_£ssi⁄_ˇche_t
));

1909 i‡(
ˇche
 =
NULL
) {

1910  
NGX_ERROR
;

1913 
shpoﬁ
->
d©a
 = 
ˇche
;

1914 
shm_z⁄e
->
d©a
 = 
ˇche
;

1916 
	`ngx_rbåì_öô
(&
ˇche
->
£ssi⁄_rbåì
, &ˇche->
£¡öñ
,

1917 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
);

1919 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

1921 
Àn
 = (" i¿SSL sessi⁄ sh¨ed cachê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

1923 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

1924 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

1925  
NGX_ERROR
;

1928 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in SSL session shared cache \"%V\"%Z",

1929 &
shm_z⁄e
->
shm
.
«me
);

1931 
shpoﬁ
->
log_nomem
 = 0;

1933  
NGX_OK
;

1934 
	}
}

1955 
	$ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1957 
Àn
;

1958 
u_ch¨
 *
p
, *
id
, *
ˇched_£ss
;

1959 
uöt32_t
 
hash
;

1960 
SSL_CTX
 *
s¶_˘x
;

1961 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1962 
ngx_c⁄√˘i⁄_t
 *
c
;

1963 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1964 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1965 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1966 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

1968 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

1972 i‡(
Àn
 > (Ë
NGX_SSL_MAX_SESSION_SIZE
) {

1976 
p
 = 
buf
;

1977 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

1979 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1981 
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
);

1982 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1984 
ˇche
 = 
shm_z⁄e
->
d©a
;

1985 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1987 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1990 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 1);

1992 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

1994 i‡(
ˇched_£ss
 =
NULL
) {

1998 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2000 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

2002 i‡(
ˇched_£ss
 =
NULL
) {

2003 
£ss_id
 = 
NULL
;

2004 
Áûed
;

2008 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

2010 i‡(
£ss_id
 =
NULL
) {

2014 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2016 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

2018 i‡(
£ss_id
 =
NULL
) {

2019 
Áûed
;

2023 #i‡(
NGX_PTR_SIZE
 == 8)

2025 
id
 = 
£ss_id
->sess_id;

2029 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ss
->
£ssi⁄_id_Àngth
);

2031 i‡(
id
 =
NULL
) {

2035 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2037 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ss
->
£ssi⁄_id_Àngth
);

2039 i‡(
id
 =
NULL
) {

2040 
Áûed
;

2046 
	`ngx_mem˝y
(
ˇched_£ss
, 
buf
, 
Àn
);

2048 
	`ngx_mem˝y
(
id
, 
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

2050 
hash
 = 
	`ngx_¸c32_sh‹t
(
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

2052 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2054 
hash
, 
£ss
->
£ssi⁄_id_Àngth
, 
Àn
);

2056 
£ss_id
->
node
.
key
 = 
hash
;

2057 
£ss_id
->
node
.
d©a
 = (
u_ch¨
Ë
£ss
->
£ssi⁄_id_Àngth
;

2058 
£ss_id
->
id
 = id;

2059 
£ss_id
->
Àn
 =Üen;

2060 
£ss_id
->
£ssi⁄
 = 
ˇched_£ss
;

2062 
£ss_id
->
expúe
 = 
	`ngx_time
(Ë+ 
	`SSL_CTX_gë_timeout
(
s¶_˘x
);

2064 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
£ss_id
->
queue
);

2066 
	`ngx_rbåì_ö£π
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2068 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2072 
Áûed
:

2074 i‡(
ˇched_£ss
) {

2075 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
ˇched_£ss
);

2078 i‡(
£ss_id
) {

2079 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2082 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2084 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2085 "couldÇŸáŒoˇãÇew sessi⁄%s", 
shpoﬁ
->
log_˘x
);

2088 
	}
}

2091 
ngx_s¶_£ssi⁄_t
 *

2092 
	$ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
u_ch¨
 *
id
, 
Àn
,

2093 *
c›y
)

2095 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

2098 
u_ch¨
 *
p
;

2099 
uöt32_t
 
hash
;

2100 
ngx_öt_t
 
rc
;

2101 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2102 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2103 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2104 
ngx_s¶_£ssi⁄_t
 *
£ss
;

2105 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2106 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2107 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

2108 #i‡(
NGX_DEBUG
)

2109 
ngx_c⁄√˘i⁄_t
 *
c
;

2112 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, (
size_t
Ë
Àn
);

2113 *
c›y
 = 0;

2115 #i‡(
NGX_DEBUG
)

2116 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

2118 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2119 "s¶ gë sessi⁄: %08XD:%d", 
hash
, 
Àn
);

2122 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
),

2123 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2125 
ˇche
 = 
shm_z⁄e
->
d©a
;

2127 
£ss
 = 
NULL
;

2129 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2131 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2133 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

2134 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

2136 
node
 !
£¡öñ
) {

2138 i‡(
hash
 < 
node
->
key
) {

2139 
node
 =Çode->
À·
;

2143 i‡(
hash
 > 
node
->
key
) {

2144 
node
 =Çode->
right
;

2150 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2152 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, (
size_t
Ë
Àn
, (size_tË
node
->
d©a
);

2154 i‡(
rc
 == 0) {

2156 i‡(
£ss_id
->
expúe
 > 
	`ngx_time
()) {

2157 
	`ngx_mem˝y
(
buf
, 
£ss_id
->
£ssi⁄
, sess_id->
Àn
);

2159 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2161 
p
 = 
buf
;

2162 
£ss
 = 
	`d2i_SSL_SESSION
(
NULL
, &
p
, 
£ss_id
->
Àn
);

2164  
£ss
;

2167 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

2169 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2171 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2172 #i‡(
NGX_PTR_SIZE
 == 4)

2173 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2175 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2177 
£ss
 = 
NULL
;

2179 
d⁄e
;

2182 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2185 
d⁄e
:

2187 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2189  
£ss
;

2190 
	}
}

2194 
	$ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2196 
	`SSL_CTX_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2198 
	`ngx_s¶_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2199 
	}
}

2203 
	$ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2205 
size_t
 
Àn
;

2206 
u_ch¨
 *
id
;

2207 
uöt32_t
 
hash
;

2208 
ngx_öt_t
 
rc
;

2209 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2210 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2211 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2212 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2213 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2215 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2217 i‡(
shm_z⁄e
 =
NULL
) {

2221 
ˇche
 = 
shm_z⁄e
->
d©a
;

2223 
id
 = 
£ss
->
£ssi⁄_id
;

2224 
Àn
 = (
size_t
Ë
£ss
->
£ssi⁄_id_Àngth
;

2226 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, 
Àn
);

2228 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2229 "s¶Ñemovê£ssi⁄: %08XD:%uz", 
hash
, 
Àn
);

2231 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2233 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2235 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

2236 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

2238 
node
 !
£¡öñ
) {

2240 i‡(
hash
 < 
node
->
key
) {

2241 
node
 =Çode->
À·
;

2245 i‡(
hash
 > 
node
->
key
) {

2246 
node
 =Çode->
right
;

2252 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2254 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, 
Àn
, (
size_t
Ë
node
->
d©a
);

2256 i‡(
rc
 == 0) {

2258 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

2260 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2262 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2263 #i‡(
NGX_PTR_SIZE
 == 4)

2264 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2266 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2268 
d⁄e
;

2271 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2274 
d⁄e
:

2276 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2277 
	}
}

2281 
	$ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

2282 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
)

2284 
time_t
 
now
;

2285 
ngx_queue_t
 *
q
;

2286 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2288 
now
 = 
	`ngx_time
();

2290 
n
 < 3) {

2292 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

2296 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

2298 
£ss_id
 = 
	`ngx_queue_d©a
(
q
, 
ngx_s¶_£ss_id_t
, 
queue
);

2300 i‡(
n
++ !0 && 
£ss_id
->
expúe
 > 
now
) {

2304 
	`ngx_queue_ªmove
(
q
);

2306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2307 "expúê£ssi⁄: %08Xi", 
£ss_id
->
node
.
key
);

2309 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2311 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2312 #i‡(
NGX_PTR_SIZE
 == 4)

2313 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2315 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2317 
	}
}

2321 
	$ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2322 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2324 
ngx_rbåì_node_t
 **
p
;

2325 
ngx_s¶_£ss_id_t
 *
£ss_id
, *
£ss_id_ãmp
;

2329 i‡(
node
->
key
 < 
ãmp
->key) {

2331 
p
 = &
ãmp
->
À·
;

2333 } i‡(
node
->
key
 > 
ãmp
->key) {

2335 
p
 = &
ãmp
->
right
;

2339 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2340 
£ss_id_ãmp
 = (
ngx_s¶_£ss_id_t
 *Ë
ãmp
;

2342 
p
 = (
	`ngx_memn2cmp
(
£ss_id
->
id
, 
£ss_id_ãmp
->id,

2343 (
size_t
Ë
node
->
d©a
, (size_tË
ãmp
->data)

2344 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2347 i‡(*
p
 =
£¡öñ
) {

2351 
ãmp
 = *
p
;

2354 *
p
 = 
node
;

2355 
node
->
∑ª¡
 = 
ãmp
;

2356 
node
->
À·
 = 
£¡öñ
;

2357 
node
->
right
 = 
£¡öñ
;

2358 
	`ngx_rbt_ªd
(
node
);

2359 
	}
}

2362 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


2364 
ngx_öt_t


2365 
	$ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_¨øy_t
 *
∑ths
)

2367 
u_ch¨
 
buf
[48];

2368 
ssize_t
 
n
;

2369 
ngx_°r_t
 *
∑th
;

2370 
ngx_fûe_t
 
fûe
;

2371 
ngx_uöt_t
 
i
;

2372 
ngx_¨øy_t
 *
keys
;

2373 
ngx_fûe_öfo_t
 
fi
;

2374 
ngx_s¶_£ssi⁄_tickë_key_t
 *
key
;

2376 i‡(
∑ths
 =
NULL
) {

2377  
NGX_OK
;

2380 
keys
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 
∑ths
->
√…s
,

2381 (
ngx_s¶_£ssi⁄_tickë_key_t
));

2382 i‡(
keys
 =
NULL
) {

2383  
NGX_ERROR
;

2386 
∑th
 = 
∑ths
->
ñts
;

2387 
i
 = 0; i < 
∑ths
->
√…s
; i++) {

2389 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
[
i
], 1Ë!
NGX_OK
) {

2390  
NGX_ERROR
;

2393 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

2394 
fûe
.
«me
 = 
∑th
[
i
];

2395 
fûe
.
log
 = 
cf
->log;

2397 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
, 0, 0);

2398 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

2399 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

2400 
ngx_›í_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2401  
NGX_ERROR
;

2404 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

2405 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

2406 
ngx_fd_öfo_n
 " \"%V\" faûed", &
fûe
.
«me
);

2407 
Áûed
;

2410 i‡(
	`ngx_fûe_size
(&
fi
) != 48) {

2411 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2412 "\"%V\" mu° bê48 byãs", &
fûe
.
«me
);

2413 
Áûed
;

2416 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 48, 0);

2418 i‡(
n
 =
NGX_ERROR
) {

2419 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

2420 
ngx_ªad_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2421 
Áûed
;

2424 i‡(
n
 != 48) {

2425 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

2426 
ngx_ªad_fûe_n
 " \"%V\"Ñeturned only "

2427 "%z byã†ö°ód o‡48", &
fûe
.
«me
, 
n
);

2428 
Áûed
;

2431 
key
 = 
	`ngx_¨øy_push
(
keys
);

2432 i‡(
key
 =
NULL
) {

2433 
Áûed
;

2436 
	`ngx_mem˝y
(
key
->
«me
, 
buf
, 16);

2437 
	`ngx_mem˝y
(
key
->
´s_key
, 
buf
 + 16, 16);

2438 
	`ngx_mem˝y
(
key
->
hmac_key
, 
buf
 + 32, 16);

2440 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

2441 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

2442 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2446 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_tickë_keys_ödex
, 
keys
)

2449 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2451  
NGX_ERROR
;

2454 i‡(
	`SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
->
˘x
,

2455 
ngx_s¶_£ssi⁄_tickë_key_ˇŒback
)

2458 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2465  
NGX_OK
;

2467 
Áûed
:

2469 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

2470 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

2471 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2474  
NGX_ERROR
;

2475 
	}
}

2478 #ifde‡
OPENSSL_NO_SHA256


2479 
	#ngx_s¶_£ssi⁄_tickë_md
 
EVP_sha1


	)

2481 
	#ngx_s¶_£ssi⁄_tickë_md
 
EVP_sha256


	)

2486 
	$ngx_s¶_£ssi⁄_tickë_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

2487 *
«me
, *
iv
, 
EVP_CIPHER_CTX
 *
e˘x
,

2488 
HMAC_CTX
 *
h˘x
, 
íc
)

2490 
SSL_CTX
 *
s¶_˘x
;

2491 
ngx_uöt_t
 
i
;

2492 
ngx_¨øy_t
 *
keys
;

2493 
ngx_s¶_£ssi⁄_tickë_key_t
 *
key
;

2494 #i‡(
NGX_DEBUG
)

2495 
u_ch¨
 
buf
[32];

2496 
ngx_c⁄√˘i⁄_t
 *
c
;

2499 
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
);

2501 
keys
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_tickë_keys_ödex
);

2502 i‡(
keys
 =
NULL
) {

2506 
key
 = 
keys
->
ñts
;

2508 #i‡(
NGX_DEBUG
)

2509 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

2512 i‡(
íc
 == 1) {

2515 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2517 
	`ngx_hex_dump
(
buf
, 
key
[0].
«me
, 16) - buf, buf,

2518 
	`SSL_£ssi⁄_ªu£d
(
s¶_c⁄n
) ? "reused" : "new");

2520 
	`RAND_p£udo_byãs
(
iv
, 16);

2521 
	`EVP_En¸y±Inô_ex
(
e˘x
, 
	`EVP_´s_128_cbc
(), 
NULL
, 
key
[0].
´s_key
, 
iv
);

2522 
	`HMAC_Inô_ex
(
h˘x
, 
key
[0].
hmac_key
, 16,

2523 
	`ngx_s¶_£ssi⁄_tickë_md
(), 
NULL
);

2524 
	`mem˝y
(
«me
, 
key
[0].name, 16);

2531 
i
 = 0; i < 
keys
->
√…s
; i++) {

2532 i‡(
	`ngx_memcmp
(
«me
, 
key
[
i
].name, 16) == 0) {

2533 
found
;

2537 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2539 
	`ngx_hex_dump
(
buf
, 
«me
, 16) - buf, buf);

2543 
found
:

2545 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2547 
	`ngx_hex_dump
(
buf
, 
key
[
i
].
«me
, 16) - buf, buf,

2548 (
i
 == 0) ? " (default)" : "");

2550 
	`HMAC_Inô_ex
(
h˘x
, 
key
[
i
].
hmac_key
, 16,

2551 
	`ngx_s¶_£ssi⁄_tickë_md
(), 
NULL
);

2552 
	`EVP_De¸y±Inô_ex
(
e˘x
, 
	`EVP_´s_128_cbc
(), 
NULL
, 
key
[
i
].
´s_key
, 
iv
);

2554  (
i
 == 0) ? 1 : 2 ;

2556 
	}
}

2560 
ngx_öt_t


2561 
	$ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_¨øy_t
 *
∑ths
)

2563 i‡(
∑ths
) {

2564 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

2568  
NGX_OK
;

2569 
	}
}

2575 
	$ngx_s¶_˛ónup_˘x
(*
d©a
)

2577 
ngx_s¶_t
 *
s¶
 = 
d©a
;

2579 
	`SSL_CTX_‰ì
(
s¶
->
˘x
);

2580 
	}
}

2583 
ngx_öt_t


2584 
	$ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2586 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2587  
NGX_OK
;

2588 
	}
}

2591 
ngx_öt_t


2592 
	$ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2594 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_cùhî_«me
(
c
->
s¶
->
c⁄√˘i⁄
);

2595  
NGX_OK
;

2596 
	}
}

2599 
ngx_öt_t


2600 
	$ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2602 
Àn
;

2603 
u_ch¨
 *
buf
;

2604 
SSL_SESSION
 *
£ss
;

2606 
£ss
 = 
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2607 i‡(
£ss
 =
NULL
) {

2608 
s
->
Àn
 = 0;

2609  
NGX_OK
;

2612 
buf
 = 
£ss
->
£ssi⁄_id
;

2613 
Àn
 = 
£ss
->
£ssi⁄_id_Àngth
;

2615 
s
->
Àn
 = 2 *Üen;

2616 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

2617 i‡(
s
->
d©a
 =
NULL
) {

2618  
NGX_ERROR
;

2621 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

2623  
NGX_OK
;

2624 
	}
}

2627 
ngx_öt_t


2628 
	$ngx_s¶_gë_£ssi⁄_ªu£d
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2630 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

2631 
	`ngx_°r_£t
(
s
, "r");

2634 
	`ngx_°r_£t
(
s
, ".");

2637  
NGX_OK
;

2638 
	}
}

2641 
ngx_öt_t


2642 
	$ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2644 
size_t
 
Àn
;

2645 
BIO
 *
bio
;

2646 
X509
 *
˚π
;

2648 
s
->
Àn
 = 0;

2650 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2651 i‡(
˚π
 =
NULL
) {

2652  
NGX_OK
;

2655 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2656 i‡(
bio
 =
NULL
) {

2657 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "BIO_new() failed");

2658 
	`X509_‰ì
(
˚π
);

2659  
NGX_ERROR
;

2662 i‡(
	`PEM_wrôe_bio_X509
(
bio
, 
˚π
) == 0) {

2663 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "PEM_write_bio_X509() failed");

2664 
Áûed
;

2667 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2668 
s
->
Àn
 =Üen;

2670 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2671 i‡(
s
->
d©a
 =
NULL
) {

2672 
Áûed
;

2675 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2677 
	`BIO_‰ì
(
bio
);

2678 
	`X509_‰ì
(
˚π
);

2680  
NGX_OK
;

2682 
Áûed
:

2684 
	`BIO_‰ì
(
bio
);

2685 
	`X509_‰ì
(
˚π
);

2687  
NGX_ERROR
;

2688 
	}
}

2691 
ngx_öt_t


2692 
	$ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2694 
u_ch¨
 *
p
;

2695 
size_t
 
Àn
;

2696 
ngx_uöt_t
 
i
;

2697 
ngx_°r_t
 
˚π
;

2699 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
˚π
Ë!
NGX_OK
) {

2700  
NGX_ERROR
;

2703 i‡(
˚π
.
Àn
 == 0) {

2704 
s
->
Àn
 = 0;

2705  
NGX_OK
;

2708 
Àn
 = 
˚π
.len - 1;

2710 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2711 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2712 
Àn
++;

2716 
s
->
Àn
 =Üen;

2717 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2718 i‡(
s
->
d©a
 =
NULL
) {

2719  
NGX_ERROR
;

2722 
p
 = 
s
->
d©a
;

2724 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2725 *
p
++ = 
˚π
.
d©a
[
i
];

2726 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2727 *
p
++ = '\t';

2731  
NGX_OK
;

2732 
	}
}

2735 
ngx_öt_t


2736 
	$ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2738 *
p
;

2739 
size_t
 
Àn
;

2740 
X509
 *
˚π
;

2741 
X509_NAME
 *
«me
;

2743 
s
->
Àn
 = 0;

2745 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2746 i‡(
˚π
 =
NULL
) {

2747  
NGX_OK
;

2750 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

2751 i‡(
«me
 =
NULL
) {

2752 
	`X509_‰ì
(
˚π
);

2753  
NGX_ERROR
;

2756 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2758 
Àn
 = 0; 
p
[len];Üen++) { }

2760 
s
->
Àn
 =Üen;

2761 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2762 i‡(
s
->
d©a
 =
NULL
) {

2763 
	`OPENSSL_‰ì
(
p
);

2764 
	`X509_‰ì
(
˚π
);

2765  
NGX_ERROR
;

2768 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2770 
	`OPENSSL_‰ì
(
p
);

2771 
	`X509_‰ì
(
˚π
);

2773  
NGX_OK
;

2774 
	}
}

2777 
ngx_öt_t


2778 
	$ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2780 *
p
;

2781 
size_t
 
Àn
;

2782 
X509
 *
˚π
;

2783 
X509_NAME
 *
«me
;

2785 
s
->
Àn
 = 0;

2787 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2788 i‡(
˚π
 =
NULL
) {

2789  
NGX_OK
;

2792 
«me
 = 
	`X509_gë_issuî_«me
(
˚π
);

2793 i‡(
«me
 =
NULL
) {

2794 
	`X509_‰ì
(
˚π
);

2795  
NGX_ERROR
;

2798 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2800 
Àn
 = 0; 
p
[len];Üen++) { }

2802 
s
->
Àn
 =Üen;

2803 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2804 i‡(
s
->
d©a
 =
NULL
) {

2805 
	`OPENSSL_‰ì
(
p
);

2806 
	`X509_‰ì
(
˚π
);

2807  
NGX_ERROR
;

2810 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2812 
	`OPENSSL_‰ì
(
p
);

2813 
	`X509_‰ì
(
˚π
);

2815  
NGX_OK
;

2816 
	}
}

2819 
ngx_öt_t


2820 
	$ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2822 
size_t
 
Àn
;

2823 
X509
 *
˚π
;

2824 
BIO
 *
bio
;

2826 
s
->
Àn
 = 0;

2828 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2829 i‡(
˚π
 =
NULL
) {

2830  
NGX_OK
;

2833 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2834 i‡(
bio
 =
NULL
) {

2835 
	`X509_‰ì
(
˚π
);

2836  
NGX_ERROR
;

2839 
	`i2a_ASN1_INTEGER
(
bio
, 
	`X509_gë_£rülNumbî
(
˚π
));

2840 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2842 
s
->
Àn
 =Üen;

2843 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2844 i‡(
s
->
d©a
 =
NULL
) {

2845 
	`BIO_‰ì
(
bio
);

2846 
	`X509_‰ì
(
˚π
);

2847  
NGX_ERROR
;

2850 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2851 
	`BIO_‰ì
(
bio
);

2852 
	`X509_‰ì
(
˚π
);

2854  
NGX_OK
;

2855 
	}
}

2858 
ngx_öt_t


2859 
	$ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2861 
X509
 *
˚π
;

2863 i‡(
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
Ë!
X509_V_OK
) {

2864 
	`ngx_°r_£t
(
s
, "FAILED");

2865  
NGX_OK
;

2868 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2870 i‡(
˚π
) {

2871 
	`ngx_°r_£t
(
s
, "SUCCESS");

2874 
	`ngx_°r_£t
(
s
, "NONE");

2877 
	`X509_‰ì
(
˚π
);

2879  
NGX_OK
;

2880 
	}
}

2884 
	$ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

2886 
ngx_›ís¶_c⁄f_t
 *
oscf
;

2888 
oscf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_›ís¶_c⁄f_t
));

2889 i‡(
oscf
 =
NULL
) {

2890  
NULL
;

2899  
oscf
;

2900 
	}
}

2904 
	$ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2906 
ngx_›ís¶_c⁄f_t
 *
oscf
 = 
c⁄f
;

2908 
ENGINE
 *
ígöe
;

2909 
ngx_°r_t
 *
vÆue
;

2911 i‡(
oscf
->
ígöe
) {

2915 
oscf
->
ígöe
 = 1;

2917 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2919 
ígöe
 = 
	`ENGINE_by_id
((c⁄° *Ë
vÆue
[1].
d©a
);

2921 i‡(
ígöe
 =
NULL
) {

2922 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2923 "ENGINE_by_id(\"%V\"ËÁûed", &
vÆue
[1]);

2924  
NGX_CONF_ERROR
;

2927 i‡(
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
) == 0) {

2928 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2930 &
vÆue
[1]);

2932 
	`ENGINE_‰ì
(
ígöe
);

2934  
NGX_CONF_ERROR
;

2937 
	`ENGINE_‰ì
(
ígöe
);

2939  
NGX_CONF_OK
;

2940 
	}
}

2944 
	$ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
)

2946 
	`EVP_˛ónup
();

2947 
	`ENGINE_˛ónup
();

2948 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_openssl.h

8 #i‚de‡
_NGX_EVENT_OPENSSL_H_INCLUDED_


9 
	#_NGX_EVENT_OPENSSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<›ís¶/s¶.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/c⁄f.h
>

18 
	~<›ís¶/ígöe.h
>

19 
	~<›ís¶/evp.h
>

20 
	~<›ís¶/oc•.h
>

22 
	#NGX_SSL_NAME
 "O≥nSSL"

	)

25 
	#ngx_s¶_£ssi⁄_t
 
SSL_SESSION


	)

26 
	#ngx_s¶_c⁄n_t
 
SSL


	)

30 
SSL_CTX
 *
	m˘x
;

31 
ngx_log_t
 *
	mlog
;

32 
size_t
 
	mbuf„r_size
;

33 } 
	tngx_s¶_t
;

37 
ngx_s¶_c⁄n_t
 *
	mc⁄√˘i⁄
;

39 
ngx_öt_t
 
	mœ°
;

40 
ngx_buf_t
 *
	mbuf
;

41 
size_t
 
	mbuf„r_size
;

43 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

45 
ngx_evít_h™dÀr_±
 
	mßved_ªad_h™dÀr
;

46 
ngx_evít_h™dÀr_±
 
	mßved_wrôe_h™dÀr
;

48 
	mh™dshaked
:1;

49 
	mª√gŸüti⁄
:1;

50 
	mbuf„r
:1;

51 
	mno_waô_shutdown
:1;

52 
	mno_£nd_shutdown
:1;

53 
	mh™dshake_buf„r_£t
:1;

54 } 
	tngx_s¶_c⁄√˘i⁄_t
;

57 
	#NGX_SSL_NO_SCACHE
 -2

	)

58 
	#NGX_SSL_NONE_SCACHE
 -3

	)

59 
	#NGX_SSL_NO_BUILTIN_SCACHE
 -4

	)

60 
	#NGX_SSL_DFLT_BUILTIN_SCACHE
 -5

	)

63 
	#NGX_SSL_MAX_SESSION_SIZE
 4096

	)

65 
ngx_s¶_£ss_id_s
 
	tngx_s¶_£ss_id_t
;

67 
	sngx_s¶_£ss_id_s
 {

68 
ngx_rbåì_node_t
 
	mnode
;

69 
u_ch¨
 *
	mid
;

70 
size_t
 
	mÀn
;

71 
u_ch¨
 *
	m£ssi⁄
;

72 
ngx_queue_t
 
	mqueue
;

73 
time_t
 
	mexpúe
;

74 #i‡(
NGX_PTR_SIZE
 == 8)

75 *
	m°ub
;

76 
u_ch¨
 
	m£ss_id
[32];

82 
ngx_rbåì_t
 
	m£ssi⁄_rbåì
;

83 
ngx_rbåì_node_t
 
	m£¡öñ
;

84 
ngx_queue_t
 
	mexpúe_queue
;

85 } 
	tngx_s¶_£ssi⁄_ˇche_t
;

88 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


91 
u_ch¨
 
	m«me
[16];

92 
u_ch¨
 
	m´s_key
[16];

93 
u_ch¨
 
	mhmac_key
[16];

94 } 
	tngx_s¶_£ssi⁄_tickë_key_t
;

99 
	#NGX_SSL_SSLv2
 0x0002

	)

100 
	#NGX_SSL_SSLv3
 0x0004

	)

101 
	#NGX_SSL_TLSv1
 0x0008

	)

102 
	#NGX_SSL_TLSv1_1
 0x0010

	)

103 
	#NGX_SSL_TLSv1_2
 0x0020

	)

106 
	#NGX_SSL_BUFFER
 1

	)

107 
	#NGX_SSL_CLIENT
 2

	)

109 
	#NGX_SSL_BUFSIZE
 16384

	)

112 
ngx_öt_t
 
ngx_s¶_öô
(
ngx_log_t
 *
log
);

113 
ngx_öt_t
 
ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
);

114 
ngx_öt_t
 
ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

115 
ngx_°r_t
 *
˚π
,Çgx_°r_à*
key
);

116 
ngx_öt_t
 
ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

117 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

118 
ngx_öt_t
 
ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

119 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

120 
ngx_öt_t
 
ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
);

121 
ngx_öt_t
 
ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

122 
ngx_°r_t
 *
fûe
,Çgx_°r_à*
ª•⁄dî
, 
ngx_uöt_t
 
vîify
);

123 
ngx_öt_t
 
ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

124 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
);

125 
RSA
 *
ngx_s¶_rß512_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
is_exp‹t
,

126 
key_Àngth
);

127 
ngx_öt_t
 
ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
);

128 
ngx_öt_t
 
ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
);

129 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

130 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
);

131 
ngx_öt_t
 
ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

132 
ngx_¨øy_t
 *
∑ths
);

133 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

134 
ngx_öt_t
 
ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
,

135 
ngx_uöt_t
 
Êags
);

137 
ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

138 
ngx_öt_t
 
ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
);

139 
	#ngx_s¶_gë_£ssi⁄
(
c
Ë
	`SSL_gë1_£ssi⁄
(c->
s¶
->
c⁄√˘i⁄
)

	)

140 
	#ngx_s¶_‰ì_£ssi⁄
 
SSL_SESSION_‰ì


	)

141 
	#ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
) \

142 
	`SSL_gë_ex_d©a
(
s¶_c⁄n
, 
ngx_s¶_c⁄√˘i⁄_ödex
)

	)

143 
	#ngx_s¶_gë_£rvî_c⁄f
(
s¶_˘x
) \

144 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
)

	)

146 
	#ngx_s¶_vîify_îr‹_›ti⁄Æ
(
n
) \

147 (
n
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 \

148 || 
n
 =
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 \

149 || 
n
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 \

150 || 
n
 =
X509_V_ERR_CERT_UNTRUSTED
 \

151 || 
n
 =
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
)

	)

154 
ngx_öt_t
 
ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

155 
ngx_°r_t
 *
s
);

156 
ngx_öt_t
 
ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

157 
ngx_°r_t
 *
s
);

158 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

159 
ngx_°r_t
 *
s
);

160 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_ªu£d
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

161 
ngx_°r_t
 *
s
);

162 
ngx_öt_t
 
ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

163 
ngx_°r_t
 *
s
);

164 
ngx_öt_t
 
ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

165 
ngx_°r_t
 *
s
);

166 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

167 
ngx_°r_t
 *
s
);

168 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

169 
ngx_°r_t
 *
s
);

170 
ngx_öt_t
 
ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

171 
ngx_°r_t
 *
s
);

172 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

173 
ngx_°r_t
 *
s
);

176 
ngx_öt_t
 
ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

177 
ssize_t
 
ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

178 
ssize_t
 
ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
);

179 
ssize_t
 
ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

180 
ngx_chaö_t
 *
ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

181 
off_t
 
limô
);

182 
ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
);

183 
ngx_öt_t
 
ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
);

184 
ngx_cde˛
 
ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

185 *
fmt
, ...);

186 
ngx_s¶_˛ónup_˘x
(*
d©a
);

189 
ngx_s¶_c⁄√˘i⁄_ödex
;

190 
ngx_s¶_£rvî_c⁄f_ödex
;

191 
ngx_s¶_£ssi⁄_ˇche_ödex
;

192 
ngx_s¶_£ssi⁄_tickë_keys_ödex
;

193 
ngx_s¶_˚πifiˇã_ödex
;

194 
ngx_s¶_°≠lög_ödex
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_openssl_stapling.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 #ifde‡
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB


18 
ngx_°r_t
 
	m°≠À
;

19 
ngx_m£c_t
 
	mtimeout
;

21 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

22 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

24 
ngx_addr_t
 *
	maddrs
;

25 
ngx_°r_t
 
	mho°
;

26 
ngx_°r_t
 
	muri
;

27 
ö_p‹t_t
 
	mp‹t
;

29 
SSL_CTX
 *
	ms¶_˘x
;

31 
X509
 *
	m˚π
;

32 
X509
 *
	missuî
;

34 
time_t
 
	mvÆid
;

36 
	mvîify
:1;

37 
	mlﬂdög
:1;

38 } 
	tngx_s¶_°≠lög_t
;

41 
ngx_s¶_oc•_˘x_s
 
	tngx_s¶_oc•_˘x_t
;

43 
	sngx_s¶_oc•_˘x_s
 {

44 
X509
 *
	m˚π
;

45 
X509
 *
	missuî
;

47 
ngx_uöt_t
 
	m«ddrs
;

49 
ngx_addr_t
 *
	maddrs
;

50 
ngx_°r_t
 
	mho°
;

51 
ngx_°r_t
 
	muri
;

52 
ö_p‹t_t
 
	mp‹t
;

54 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

55 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

57 
ngx_m£c_t
 
	mtimeout
;

59 (*
	mh™dÀr
)(
ngx_s¶_oc•_˘x_t
 *
	mr
);

60 *
	md©a
;

62 
ngx_buf_t
 *
	mªque°
;

63 
ngx_buf_t
 *
	mª•⁄£
;

64 
ngx_≥î_c⁄√˘i⁄_t
 
	m≥î
;

66 
ngx_öt_t
 (*
¥o˚ss
)(
ngx_s¶_oc•_˘x_t
 *
	mr
);

68 
ngx_uöt_t
 
	m°©e
;

70 
ngx_uöt_t
 
	mcode
;

71 
ngx_uöt_t
 
	mcou¡
;

73 
ngx_uöt_t
 
	md⁄e
;

75 
u_ch¨
 *
	mhódî_«me_°¨t
;

76 
u_ch¨
 *
	mhódî_«me_íd
;

77 
u_ch¨
 *
	mhódî_°¨t
;

78 
u_ch¨
 *
	mhódî_íd
;

80 
ngx_poﬁ_t
 *
	mpoﬁ
;

81 
ngx_log_t
 *
	mlog
;

85 
ngx_öt_t
 
ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

86 
ngx_°r_t
 *
fûe
);

87 
ngx_öt_t
 
ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
);

88 
ngx_öt_t
 
ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

89 
ngx_°r_t
 *
ª•⁄dî
);

91 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

92 *
d©a
);

93 
ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
);

94 
ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

96 
ngx_s¶_°≠lög_˛ónup
(*
d©a
);

98 
ngx_s¶_oc•_˘x_t
 *
ngx_s¶_oc•_°¨t
();

99 
ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

100 
ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

101 
ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
);

102 
ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

103 
ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

104 
ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

105 
ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

107 
ngx_öt_t
 
ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

108 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

109 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

111 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

112 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

114 
u_ch¨
 *
ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

117 
ngx_öt_t


118 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

119 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

121 
ngx_öt_t
 
rc
;

122 
ngx_poﬁ_˛ónup_t
 *
˛n
;

123 
ngx_s¶_°≠lög_t
 *
°≠À
;

125 
°≠À
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_°≠lög_t
));

126 i‡(
°≠À
 =
NULL
) {

127  
NGX_ERROR
;

130 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

131 i‡(
˛n
 =
NULL
) {

132  
NGX_ERROR
;

135 
˛n
->
h™dÀr
 = 
ngx_s¶_°≠lög_˛ónup
;

136 
˛n
->
d©a
 = 
°≠À
;

138 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
, 
°≠À
)

141 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

143  
NGX_ERROR
;

146 
°≠À
->
s¶_˘x
 = 
s¶
->
˘x
;

147 
°≠À
->
timeout
 = 60000;

148 
°≠À
->
vîify
 = verify;

150 i‡(
fûe
->
Àn
) {

153 i‡(
	`ngx_s¶_°≠lög_fûe
(
cf
, 
s¶
, 
fûe
Ë!
NGX_OK
) {

154  
NGX_ERROR
;

157 
d⁄e
;

160 
rc
 = 
	`ngx_s¶_°≠lög_issuî
(
cf
, 
s¶
);

162 i‡(
rc
 =
NGX_DECLINED
) {

163  
NGX_OK
;

166 i‡(
rc
 !
NGX_OK
) {

167  
NGX_ERROR
;

170 
rc
 = 
	`ngx_s¶_°≠lög_ª•⁄dî
(
cf
, 
s¶
, 
ª•⁄dî
);

172 i‡(
rc
 =
NGX_DECLINED
) {

173  
NGX_OK
;

176 i‡(
rc
 !
NGX_OK
) {

177  
NGX_ERROR
;

180 
d⁄e
:

182 
	`SSL_CTX_£t_é£xt_°©us_cb
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
);

183 
	`SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
->
˘x
, 
°≠À
);

185  
NGX_OK
;

186 
	}
}

189 
ngx_öt_t


190 
	$ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

192 
BIO
 *
bio
;

193 
Àn
;

194 
u_ch¨
 *
p
, *
buf
;

195 
OCSP_RESPONSE
 *
ª•⁄£
;

196 
ngx_s¶_°≠lög_t
 *
°≠À
;

198 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

200 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

201  
NGX_ERROR
;

204 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

205 i‡(
bio
 =
NULL
) {

206 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

207 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

208  
NGX_ERROR
;

211 
ª•⁄£
 = 
	`d2i_OCSP_RESPONSE_bio
(
bio
, 
NULL
);

212 i‡(
ª•⁄£
 =
NULL
) {

213 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

214 "d2i_OCSP_RESPONSE_bio(\"%s\"ËÁûed", 
fûe
->
d©a
);

215 
	`BIO_‰ì
(
bio
);

216  
NGX_ERROR
;

219 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, 
NULL
);

220 i‡(
Àn
 <= 0) {

221 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

222 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

223 
Áûed
;

226 
buf
 = 
	`ngx_Æloc
(
Àn
, 
s¶
->
log
);

227 i‡(
buf
 =
NULL
) {

228 
Áûed
;

231 
p
 = 
buf
;

232 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, &
p
);

233 i‡(
Àn
 <= 0) {

234 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

235 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

236 
	`ngx_‰ì
(
buf
);

237 
Áûed
;

240 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

241 
	`BIO_‰ì
(
bio
);

243 
°≠À
->°≠À.
d©a
 = 
buf
;

244 
°≠À
->°≠À.
Àn
 =Üen;

246  
NGX_OK
;

248 
Áûed
:

250 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

251 
	`BIO_‰ì
(
bio
);

253  
NGX_ERROR
;

254 
	}
}

257 
ngx_öt_t


258 
	$ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
)

260 
i
, 
n
, 
rc
;

261 
X509
 *
˚π
, *
issuî
;

262 
X509_STORE
 *
°‹e
;

263 
X509_STORE_CTX
 *
°‹e_˘x
;

264 
	`STACK_OF
(
X509
Ë*
chaö
;

265 
ngx_s¶_°≠lög_t
 *
°≠À
;

267 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

268 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

270 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10001000L

271 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
s¶
->
˘x
, &
chaö
);

273 
chaö
 = 
s¶
->
˘x
->
exåa_˚πs
;

276 
n
 = 
	`sk_X509_num
(
chaö
);

278 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

279 "SSL gë issuî: %dÉxå®˚πs", 
n
);

281 
i
 = 0; i < 
n
; i++) {

282 
issuî
 = 
	`sk_X509_vÆue
(
chaö
, 
i
);

283 i‡(
	`X509_check_issued
(
issuî
, 
˚π
Ë=
X509_V_OK
) {

284 
	`CRYPTO_add
(&
issuî
->
ª„ªn˚s
, 1, 
CRYPTO_LOCK_X509
);

286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

287 "SSL gë issuî: found %∞öÉxå®˚πs", 
issuî
);

289 
°≠À
->
˚π
 = cert;

290 
°≠À
->
issuî
 = issuer;

292  
NGX_OK
;

296 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

297 i‡(
°‹e
 =
NULL
) {

298 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

300  
NGX_ERROR
;

303 
°‹e_˘x
 = 
	`X509_STORE_CTX_√w
();

304 i‡(
°‹e_˘x
 =
NULL
) {

305 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

307  
NGX_ERROR
;

310 i‡(
	`X509_STORE_CTX_öô
(
°‹e_˘x
, 
°‹e
, 
NULL
, NULL) == 0) {

311 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

313  
NGX_ERROR
;

316 
rc
 = 
	`X509_STORE_CTX_gë1_issuî
(&
issuî
, 
°‹e_˘x
, 
˚π
);

318 i‡(
rc
 == -1) {

319 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

321 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

322  
NGX_ERROR
;

325 i‡(
rc
 == 0) {

326 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

328 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

329  
NGX_DECLINED
;

332 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

335 "SSL gë issuî: found %∞ö cîà°‹e", 
issuî
);

337 
°≠À
->
˚π
 = cert;

338 
°≠À
->
issuî
 = issuer;

340  
NGX_OK
;

341 
	}
}

344 
ngx_öt_t


345 
	$ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
ª•⁄dî
)

347 
ngx_uæ_t
 
u
;

348 *
s
;

349 
ngx_s¶_°≠lög_t
 *
°≠À
;

350 
	`STACK_OF
(
OPENSSL_STRING
Ë*
aü
;

352 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

354 i‡(
ª•⁄dî
->
Àn
 == 0) {

358 
aü
 = 
	`X509_gë1_oc•
(
°≠À
->
˚π
);

359 i‡(
aü
 =
NULL
) {

360 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

363  
NGX_DECLINED
;

366 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

367 
s
 = 
	`sk_OPENSSL_STRING_vÆue
(
aü
, 0);

369 
s
 = 
	`sk_vÆue
(
aü
, 0);

371 i‡(
s
 =
NULL
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

375 
	`X509_emaû_‰ì
(
aü
);

376  
NGX_DECLINED
;

379 
ª•⁄dî
->
Àn
 = 
	`ngx_°æí
(
s
);

380 
ª•⁄dî
->
d©a
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñe•⁄dî->
Àn
);

381 i‡(
ª•⁄dî
->
d©a
 =
NULL
) {

382 
	`X509_emaû_‰ì
(
aü
);

383  
NGX_ERROR
;

386 
	`ngx_mem˝y
(
ª•⁄dî
->
d©a
, 
s
,Ñe•⁄dî->
Àn
);

387 
	`X509_emaû_‰ì
(
aü
);

390 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

392 
u
.
uæ
 = *
ª•⁄dî
;

393 
u
.
deÁu…_p‹t
 = 80;

394 
u
.
uri_∑π
 = 1;

396 i‡(
u
.
uæ
.
Àn
 > 7

397 && 
	`ngx_°∫ˇ£cmp
(
u
.
uæ
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

399 
u
.
uæ
.
Àn
 -= 7;

400 
u
.
uæ
.
d©a
 += 7;

403 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

405 "övÆid URLÖªfix i¿OCSPÑe•⁄dî \"%V\"", &
u
.
uæ
);

406  
NGX_DECLINED
;

409 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

410 i‡(
u
.
îr
) {

411 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

413 "%†ö OCSPÑe•⁄dî \"%V\"", 
u
.
îr
, &u.
uæ
);

414  
NGX_DECLINED
;

417  
NGX_ERROR
;

420 
°≠À
->
addrs
 = 
u
.addrs;

421 
°≠À
->
ho°
 = 
u
.host;

422 
°≠À
->
uri
 = 
u
.uri;

423 
°≠À
->
p‹t
 = 
u
.port;

425 i‡(
°≠À
->
uri
.
Àn
 == 0) {

426 
	`ngx_°r_£t
(&
°≠À
->
uri
, "/");

429  
NGX_OK
;

430 
	}
}

433 
ngx_öt_t


434 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

435 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

437 
ngx_s¶_°≠lög_t
 *
°≠À
;

439 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

441 
°≠À
->
ªsﬁvî
 =Ñesolver;

442 
°≠À
->
ªsﬁvî_timeout
 =Ñesolver_timeout;

444  
NGX_OK
;

445 
	}
}

449 
	$ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
d©a
)

451 
rc
;

452 
u_ch¨
 *
p
;

453 
ngx_c⁄√˘i⁄_t
 *
c
;

454 
ngx_s¶_°≠lög_t
 *
°≠À
;

456 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

458 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

461 
°≠À
 = 
d©a
;

462 
rc
 = 
SSL_TLSEXT_ERR_NOACK
;

464 i‡(
°≠À
->°≠À.
Àn
) {

467 
p
 = 
	`OPENSSL_mÆloc
(
°≠À
->°≠À.
Àn
);

468 i‡(
p
 =
NULL
) {

469 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "OPENSSL_malloc() failed");

470  
SSL_TLSEXT_ERR_NOACK
;

473 
	`ngx_mem˝y
(
p
, 
°≠À
->°≠À.
d©a
, sè∂e->°≠À.
Àn
);

475 
	`SSL_£t_é£xt_°©us_oc•_ª•
(
s¶_c⁄n
, 
p
, 
°≠À
->°≠À.
Àn
);

477 
rc
 = 
SSL_TLSEXT_ERR_OK
;

480 
	`ngx_s¶_°≠lög_upd©e
(
°≠À
);

482  
rc
;

483 
	}
}

487 
	$ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
)

489 
ngx_s¶_oc•_˘x_t
 *
˘x
;

491 i‡(
°≠À
->
ho°
.
Àn
 == 0

492 || 
°≠À
->
lﬂdög
 || sè∂e->
vÆid
 >
	`ngx_time
())

497 
°≠À
->
lﬂdög
 = 1;

499 
˘x
 = 
	`ngx_s¶_oc•_°¨t
();

500 i‡(
˘x
 =
NULL
) {

504 
˘x
->
˚π
 = 
°≠À
->cert;

505 
˘x
->
issuî
 = 
°≠À
->issuer;

507 
˘x
->
addrs
 = 
°≠À
->addrs;

508 
˘x
->
ho°
 = 
°≠À
->host;

509 
˘x
->
uri
 = 
°≠À
->uri;

510 
˘x
->
p‹t
 = 
°≠À
->port;

511 
˘x
->
timeout
 = 
°≠À
->timeout;

513 
˘x
->
ªsﬁvî
 = 
°≠À
->resolver;

514 
˘x
->
ªsﬁvî_timeout
 = 
°≠À
->resolver_timeout;

516 
˘x
->
h™dÀr
 = 
ngx_s¶_°≠lög_oc•_h™dÀr
;

517 
˘x
->
d©a
 = 
°≠À
;

519 
	`ngx_s¶_oc•_ªque°
(
˘x
);

522 
	}
}

526 
	$ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

528 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

531 
u_ch¨
 *
p
;

532 
n
;

533 
size_t
 
Àn
;

534 
ngx_°r_t
 
ª•⁄£
;

535 
X509_STORE
 *
°‹e
;

536 
	`STACK_OF
(
X509
Ë*
chaö
;

537 
OCSP_CERTID
 *
id
;

538 
OCSP_RESPONSE
 *
oc•
;

539 
OCSP_BASICRESP
 *
basic
;

540 
ngx_s¶_°≠lög_t
 *
°≠À
;

541 
ASN1_GENERALIZEDTIME
 *
thisupd©e
, *
√xtupd©e
;

543 
°≠À
 = 
˘x
->
d©a
;

544 
oc•
 = 
NULL
;

545 
basic
 = 
NULL
;

546 
id
 = 
NULL
;

548 i‡(
˘x
->
code
 != 200) {

549 
îr‹
;

554 
Àn
 = 
˘x
->
ª•⁄£
->
œ°
 - ctx->ª•⁄£->
pos
;

555 
p
 = 
˘x
->
ª•⁄£
->
pos
;

557 
oc•
 = 
	`d2i_OCSP_RESPONSE
(
NULL
, &
p
, 
Àn
);

558 i‡(
oc•
 =
NULL
) {

559 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

561 
îr‹
;

564 
n
 = 
	`OCSP_ª•⁄£_°©us
(
oc•
);

566 i‡(
n
 !
OCSP_RESPONSE_STATUS_SUCCESSFUL
) {

567 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

569 
n
, 
	`OCSP_ª•⁄£_°©us_°r
(n));

570 
îr‹
;

573 
basic
 = 
	`OCSP_ª•⁄£_gë1_basic
(
oc•
);

574 i‡(
basic
 =
NULL
) {

575 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

577 
îr‹
;

580 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
°≠À
->
s¶_˘x
);

581 i‡(
°‹e
 =
NULL
) {

582 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

584 
îr‹
;

587 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10001000L

588 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
°≠À
->
s¶_˘x
, &
chaö
);

590 
chaö
 = 
°≠À
->
s¶_˘x
->
exåa_˚πs
;

593 i‡(
	`OCSP_basic_vîify
(
basic
, 
chaö
, 
°‹e
,

594 
°≠À
->
vîify
 ? 
OCSP_TRUSTOTHER
 : 
OCSP_NOVERIFY
)

597 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

599 
îr‹
;

602 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

603 i‡(
id
 =
NULL
) {

604 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

606 
îr‹
;

609 i‡(
	`OCSP_ª•_föd_°©us
(
basic
, 
id
, &
n
, 
NULL
, NULL,

610 &
thisupd©e
, &
√xtupd©e
)

613 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

615 
îr‹
;

618 i‡(
n
 !
V_OCSP_CERTSTATUS_GOOD
) {

619 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

621 
	`OCSP_˚π_°©us_°r
(
n
));

622 
îr‹
;

625 i‡(
	`OCSP_check_vÆidôy
(
thisupd©e
, 
√xtupd©e
, 300, -1) != 1) {

626 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

628 
îr‹
;

631 
	`OCSP_CERTID_‰ì
(
id
);

632 
	`OCSP_BASICRESP_‰ì
(
basic
);

633 
	`OCSP_RESPONSE_‰ì
(
oc•
);

637 
ª•⁄£
.
Àn
 =Üen;

638 
ª•⁄£
.
d©a
 = 
	`ngx_Æloc
‘e•⁄£.
Àn
, 
˘x
->
log
);

640 i‡(
ª•⁄£
.
d©a
 =
NULL
) {

641 
d⁄e
;

644 
	`ngx_mem˝y
(
ª•⁄£
.
d©a
, 
˘x
->ª•⁄£->
pos
,Ñe•⁄£.
Àn
);

646 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

648 
	`OCSP_˚π_°©us_°r
(
n
), 
ª•⁄£
.
Àn
);

650 i‡(
°≠À
->°≠À.
d©a
) {

651 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

654 
°≠À
->°≠À = 
ª•⁄£
;

656 
d⁄e
:

658 
°≠À
->
lﬂdög
 = 0;

659 
°≠À
->
vÆid
 = 
	`ngx_time
() + 3600;

661 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

664 
îr‹
:

666 
°≠À
->
lﬂdög
 = 0;

667 
°≠À
->
vÆid
 = 
	`ngx_time
() + 300;

669 i‡(
id
) {

670 
	`OCSP_CERTID_‰ì
(
id
);

673 i‡(
basic
) {

674 
	`OCSP_BASICRESP_‰ì
(
basic
);

677 i‡(
oc•
) {

678 
	`OCSP_RESPONSE_‰ì
(
oc•
);

681 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

682 
	}
}

686 
	$ngx_s¶_°≠lög_˛ónup
(*
d©a
)

688 
ngx_s¶_°≠lög_t
 *
°≠À
 = 
d©a
;

690 i‡(
°≠À
->
issuî
) {

691 
	`X509_‰ì
(
°≠À
->
issuî
);

694 i‡(
°≠À
->°≠À.
d©a
) {

695 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

697 
	}
}

700 
ngx_s¶_oc•_˘x_t
 *

701 
	$ngx_s¶_oc•_°¨t
()

703 
ngx_log_t
 *
log
;

704 
ngx_poﬁ_t
 *
poﬁ
;

705 
ngx_s¶_oc•_˘x_t
 *
˘x
;

707 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
ngx_cy˛e
->
log
);

708 i‡(
poﬁ
 =
NULL
) {

709  
NULL
;

712 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_s¶_oc•_˘x_t
));

713 i‡(
˘x
 =
NULL
) {

714 
	`ngx_de°roy_poﬁ
(
poﬁ
);

715  
NULL
;

718 
log
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_log_t
));

719 i‡(
log
 =
NULL
) {

720 
	`ngx_de°roy_poﬁ
(
poﬁ
);

721  
NULL
;

724 
˘x
->
poﬁ
 =Öool;

726 *
log
 = *
˘x
->
poﬁ
->log;

728 
˘x
->
poﬁ
->
log
 =Üog;

729 
˘x
->
log
 =Üog;

731 
log
->
h™dÀr
 = 
ngx_s¶_oc•_log_îr‹
;

732 
log
->
d©a
 = 
˘x
;

733 
log
->
a˘i⁄
 = "requesting certificate status";

735  
˘x
;

736 
	}
}

740 
	$ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

742 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

745 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

746 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

749 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

750 
	}
}

754 
	$ngx_s¶_oc•_îr‹
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

756 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

759 
˘x
->
code
 = 0;

760 
˘x
->
	`h™dÀr
(ctx);

761 
	}
}

765 
	$ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

767 
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
, 
ãmp
;

769 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

772 i‡(
	`ngx_s¶_oc•_¸óã_ªque°
(
˘x
Ë!
NGX_OK
) {

773 
	`ngx_s¶_oc•_îr‹
(
˘x
);

777 i‡(
˘x
->
ªsﬁvî
) {

780 
ãmp
.
«me
 = 
˘x
->
ho°
;

782 
ªsﬁve
 = 
	`ngx_ªsﬁve_°¨t
(
˘x
->
ªsﬁvî
, &
ãmp
);

783 i‡(
ªsﬁve
 =
NULL
) {

784 
	`ngx_s¶_oc•_îr‹
(
˘x
);

788 i‡(
ªsﬁve
 =
NGX_NO_RESOLVER
) {

789 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
˘x
->
log
, 0,

790 "nÿªsﬁvî deföedÅÿªsﬁvê%V", &
˘x
->
ho°
);

791 
c⁄√˘
;

794 
ªsﬁve
->
«me
 = 
˘x
->
ho°
;

795 
ªsﬁve
->
h™dÀr
 = 
ngx_s¶_oc•_ªsﬁve_h™dÀr
;

796 
ªsﬁve
->
d©a
 = 
˘x
;

797 
ªsﬁve
->
timeout
 = 
˘x
->
ªsﬁvî_timeout
;

799 i‡(
	`ngx_ªsﬁve_«me
(
ªsﬁve
Ë!
NGX_OK
) {

800 
	`ngx_s¶_oc•_îr‹
(
˘x
);

807 
c⁄√˘
:

809 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

810 
	}
}

814 
	$ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
)

816 
ngx_s¶_oc•_˘x_t
 *
˘x
 = 
ªsﬁve
->
d©a
;

818 
u_ch¨
 *
p
;

819 
size_t
 
Àn
;

820 
ö_p‹t_t
 
p‹t
;

821 
sockÀn_t
 
sockÀn
;

822 
ngx_uöt_t
 
i
;

823 
sockaddr
 *sockaddr;

825 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

828 i‡(
ªsﬁve
->
°©e
) {

829 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

831 &
ªsﬁve
->
«me
,Ñesﬁve->
°©e
,

832 
	`ngx_ªsﬁvî_°ªº‹
(
ªsﬁve
->
°©e
));

833 
Áûed
;

836 #i‡(
NGX_DEBUG
)

838 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

839 
ngx_°r_t
 
addr
;

841 
addr
.
d©a
 = 
ãxt
;

843 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

844 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
ªsﬁve
->
addrs
[
i
].
sockaddr
,

845 
ªsﬁve
->
addrs
[
i
].
sockÀn
,

846 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

848 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

849 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

855 
˘x
->
«ddrs
 = 
ªsﬁve
->naddrs;

856 
˘x
->
addrs
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
, ctx->
«ddrs
 * (
ngx_addr_t
));

858 i‡(
˘x
->
addrs
 =
NULL
) {

859 
Áûed
;

862 
p‹t
 = 
	`ht⁄s
(
˘x
->port);

864 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

866 
sockÀn
 = 
ªsﬁve
->
addrs
[
i
].socklen;

868 
sockaddr
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
sockÀn
);

869 i‡(
sockaddr
 =
NULL
) {

870 
Áûed
;

873 
	`ngx_mem˝y
(
sockaddr
, 
ªsﬁve
->
addrs
[
i
].sockaddr, 
sockÀn
);

875 
sockaddr
->
ß_Ámûy
) {

876 #i‡(
NGX_HAVE_INET6
)

877 
AF_INET6
:

878 ((
sockaddr_ö6
 *Ë
sockaddr
)->
sö6_p‹t
 = 
p‹t
;

882 ((
sockaddr_ö
 *Ë
sockaddr
)->
sö_p‹t
 = 
p‹t
;

885 
˘x
->
addrs
[
i
].
sockaddr
 = sockaddr;

886 
˘x
->
addrs
[
i
].
sockÀn
 = socklen;

888 
p
 = 
	`ngx_≤Æloc
(
˘x
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

889 i‡(
p
 =
NULL
) {

890 
Áûed
;

893 
Àn
 = 
	`ngx_sock_¡›
(
sockaddr
, 
sockÀn
, 
p
, 
NGX_SOCKADDR_STRLEN
, 1);

895 
˘x
->
addrs
[
i
].
«me
.
Àn
 =Üen;

896 
˘x
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

899 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

901 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

904 
Áûed
:

906 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

907 
	`ngx_s¶_oc•_îr‹
(
˘x
);

908 
	}
}

912 
	$ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

914 
ngx_öt_t
 
rc
;

916 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

921 
˘x
->
≥î
.
sockaddr
 = ctx->
addrs
[0].sockaddr;

922 
˘x
->
≥î
.
sockÀn
 = ctx->
addrs
[0].socklen;

923 
˘x
->
≥î
.
«me
 = &˘x->
addrs
[0].name;

924 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

925 
˘x
->
≥î
.
log
 = ctx->log;

926 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

928 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

930 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

933 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

934 
	`ngx_s¶_oc•_îr‹
(
˘x
);

938 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = ctx;

939 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = ctx->pool;

941 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_s¶_oc•_ªad_h™dÀr
;

942 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_s¶_oc•_wrôe_h™dÀr
;

944 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_°©us_löe
;

946 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, ctx->
timeout
);

947 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, ctx->
timeout
);

949 i‡(
rc
 =
NGX_OK
) {

950 
	`ngx_s¶_oc•_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

953 
	}
}

957 
	$ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

959 
ssize_t
 
n
, 
size
;

960 
ngx_c⁄√˘i⁄_t
 *
c
;

961 
ngx_s¶_oc•_˘x_t
 *
˘x
;

963 
c
 = 
wev
->
d©a
;

964 
˘x
 = 
c
->
d©a
;

966 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

969 i‡(
wev
->
timedout
) {

970 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

972 
	`ngx_s¶_oc•_îr‹
(
˘x
);

976 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

978 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

980 i‡(
n
 =
NGX_ERROR
) {

981 
	`ngx_s¶_oc•_îr‹
(
˘x
);

985 i‡(
n
 > 0) {

986 
˘x
->
ªque°
->
pos
 +
n
;

988 i‡(
n
 =
size
) {

989 
wev
->
h™dÀr
 = 
ngx_s¶_oc•_dummy_h™dÀr
;

991 i‡(
wev
->
timî_£t
) {

992 
	`ngx_dñ_timî
(
wev
);

995 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

996 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1003 i‡(!
wev
->
timî_£t
) {

1004 
	`ngx_add_timî
(
wev
, 
˘x
->
timeout
);

1006 
	}
}

1010 
	$ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1012 
ssize_t
 
n
, 
size
;

1013 
ngx_öt_t
 
rc
;

1014 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1015 
ngx_c⁄√˘i⁄_t
 *
c
;

1017 
c
 = 
ªv
->
d©a
;

1018 
˘x
 = 
c
->
d©a
;

1020 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

1023 i‡(
ªv
->
timedout
) {

1024 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

1026 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1030 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1031 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 16384);

1032 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1033 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1040 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

1042 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
œ°
, 
size
);

1044 i‡(
n
 > 0) {

1045 
˘x
->
ª•⁄£
->
œ°
 +
n
;

1047 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1049 i‡(
rc
 =
NGX_ERROR
) {

1050 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1057 i‡(
n
 =
NGX_AGAIN
) {

1059 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1060 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1069 
˘x
->
d⁄e
 = 1;

1071 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1073 i‡(
rc
 =
NGX_DONE
) {

1078 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1081 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1082 
	}
}

1086 
	$ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1088 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

1090 
	}
}

1093 
ngx_öt_t


1094 
	$ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1096 
Àn
;

1097 
u_ch¨
 *
p
;

1098 
uöçå_t
 
esˇ≥
;

1099 
ngx_°r_t
 
bö¨y
, 
ba£64
;

1100 
ngx_buf_t
 *
b
;

1101 
OCSP_CERTID
 *
id
;

1102 
OCSP_REQUEST
 *
oc•
;

1104 
oc•
 = 
	`OCSP_REQUEST_√w
();

1105 i‡(
oc•
 =
NULL
) {

1106 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1108  
NGX_ERROR
;

1111 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

1112 i‡(
id
 =
NULL
) {

1113 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1115 
Áûed
;

1118 i‡(
	`OCSP_ªque°_add0_id
(
oc•
, 
id
Ë=
NULL
) {

1119 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1121 
Áûed
;

1124 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, 
NULL
);

1125 i‡(
Àn
 <= 0) {

1126 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1128 
Áûed
;

1131 
bö¨y
.
Àn
 =Üen;

1132 
bö¨y
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
Àn
);

1133 i‡(
bö¨y
.
d©a
 =
NULL
) {

1134 
Áûed
;

1137 
p
 = 
bö¨y
.
d©a
;

1138 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, &
p
);

1139 i‡(
Àn
 <= 0) {

1140 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
˘x
->
log
, 0,

1142 
Áûed
;

1145 
ba£64
.
Àn
 = 
	`ngx_ba£64_ícoded_Àngth
(
bö¨y
.len);

1146 
ba£64
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, ba£64.
Àn
);

1147 i‡(
ba£64
.
d©a
 =
NULL
) {

1148 
Áûed
;

1151 
	`ngx_ícode_ba£64
(&
ba£64
, &
bö¨y
);

1153 
esˇ≥
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ba£64
.
d©a
, ba£64.
Àn
,

1154 
NGX_ESCAPE_URI_COMPONENT
);

1156 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1158 
ba£64
.
Àn
, 
esˇ≥
);

1160 
Àn
 = ("GET "Ë- 1 + 
˘x
->
uri
.len + ("/") - 1

1161 + 
ba£64
.
Àn
 + 2 * 
esˇ≥
 + (" HTTP/1.0" 
CRLF
) - 1

1162 + ("Ho°: "Ë- 1 + 
˘x
->
ho°
.
Àn
 + (
CRLF
) - 1

1163 + (
CRLF
) - 1;

1165 
b
 = 
	`ngx_¸óã_ãmp_buf
(
˘x
->
poﬁ
, 
Àn
);

1166 i‡(
b
 =
NULL
) {

1167 
Áûed
;

1170 
p
 = 
b
->
œ°
;

1172 
p
 = 
	`ngx_˝ymem
(p, "GET ", ("GET ") - 1);

1173 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
uri
.
d©a
, ctx->uri.
Àn
);

1175 i‡(
˘x
->
uri
.
d©a
[˘x->uri.
Àn
 - 1] != '/') {

1176 *
p
++ = '/';

1179 i‡(
esˇ≥
 == 0) {

1180 
p
 = 
	`ngx_˝ymem
’, 
ba£64
.
d©a
, ba£64.
Àn
);

1183 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
ba£64
.
d©a
, ba£64.
Àn
,

1184 
NGX_ESCAPE_URI_COMPONENT
);

1187 
p
 = 
	`ngx_˝ymem
’, " HTTP/1.0" 
CRLF
, (" HTTP/1.0" CRLF) - 1);

1188 
p
 = 
	`ngx_˝ymem
(p, "Host: ", ("Host: ") - 1);

1189 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
ho°
.
d©a
, ctx->ho°.
Àn
);

1190 *
p
++ = 
CR
; *p++ = 
LF
;

1193 *
p
++ = 
CR
; *p++ = 
LF
;

1195 
b
->
œ°
 = 
p
;

1196 
˘x
->
ªque°
 = 
b
;

1198  
NGX_OK
;

1200 
Áûed
:

1202 
	`OCSP_REQUEST_‰ì
(
oc•
);

1204  
NGX_ERROR
;

1205 
	}
}

1208 
ngx_öt_t


1209 
	$ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1211 
ngx_öt_t
 
rc
;

1213 
rc
 = 
	`ngx_s¶_oc•_∑r£_°©us_löe
(
˘x
);

1215 i‡(
rc
 =
NGX_OK
) {

1217 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1219 
˘x
->
ª•⁄£
->
pos
 - ctx->ª•⁄£->
°¨t
,

1220 
˘x
->
ª•⁄£
->
°¨t
);

1223 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_hódîs
;

1224  
˘x
->
	`¥o˚ss
(ctx);

1227 i‡(
rc
 =
NGX_AGAIN
) {

1228  
NGX_AGAIN
;

1233 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1236  
NGX_ERROR
;

1237 
	}
}

1240 
ngx_öt_t


1241 
	$ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1243 
u_ch¨
 
ch
;

1244 
u_ch¨
 *
p
;

1245 
ngx_buf_t
 *
b
;

1247 
sw_°¨t
 = 0,

1248 
sw_H
,

1249 
sw_HT
,

1250 
sw_HTT
,

1251 
sw_HTTP
,

1252 
sw_fú°_maj‹_digô
,

1253 
sw_maj‹_digô
,

1254 
sw_fú°_mö‹_digô
,

1255 
sw_mö‹_digô
,

1256 
sw_°©us
,

1257 
sw_•a˚_a·î_°©us
,

1258 
sw_°©us_ãxt
,

1259 
sw_Æmo°_d⁄e


1260 } 
°©e
;

1262 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1265 
°©e
 = 
˘x
->state;

1266 
b
 = 
˘x
->
ª•⁄£
;

1268 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1269 
ch
 = *
p
;

1271 
°©e
) {

1274 
sw_°¨t
:

1275 
ch
) {

1277 
°©e
 = 
sw_H
;

1280  
NGX_ERROR
;

1284 
sw_H
:

1285 
ch
) {

1287 
°©e
 = 
sw_HT
;

1290  
NGX_ERROR
;

1294 
sw_HT
:

1295 
ch
) {

1297 
°©e
 = 
sw_HTT
;

1300  
NGX_ERROR
;

1304 
sw_HTT
:

1305 
ch
) {

1307 
°©e
 = 
sw_HTTP
;

1310  
NGX_ERROR
;

1314 
sw_HTTP
:

1315 
ch
) {

1317 
°©e
 = 
sw_fú°_maj‹_digô
;

1320  
NGX_ERROR
;

1325 
sw_fú°_maj‹_digô
:

1326 i‡(
ch
 < '1' || ch > '9') {

1327  
NGX_ERROR
;

1330 
°©e
 = 
sw_maj‹_digô
;

1334 
sw_maj‹_digô
:

1335 i‡(
ch
 == '.') {

1336 
°©e
 = 
sw_fú°_mö‹_digô
;

1340 i‡(
ch
 < '0' || ch > '9') {

1341  
NGX_ERROR
;

1347 
sw_fú°_mö‹_digô
:

1348 i‡(
ch
 < '0' || ch > '9') {

1349  
NGX_ERROR
;

1352 
°©e
 = 
sw_mö‹_digô
;

1356 
sw_mö‹_digô
:

1357 i‡(
ch
 == ' ') {

1358 
°©e
 = 
sw_°©us
;

1362 i‡(
ch
 < '0' || ch > '9') {

1363  
NGX_ERROR
;

1369 
sw_°©us
:

1370 i‡(
ch
 == ' ') {

1374 i‡(
ch
 < '0' || ch > '9') {

1375  
NGX_ERROR
;

1378 
˘x
->
code
 = ctx->codê* 10 + 
ch
 - '0';

1380 i‡(++
˘x
->
cou¡
 == 3) {

1381 
°©e
 = 
sw_•a˚_a·î_°©us
;

1387 
sw_•a˚_a·î_°©us
:

1388 
ch
) {

1390 
°©e
 = 
sw_°©us_ãxt
;

1393 
°©e
 = 
sw_°©us_ãxt
;

1395 
CR
:

1396 
°©e
 = 
sw_Æmo°_d⁄e
;

1398 
LF
:

1399 
d⁄e
;

1401  
NGX_ERROR
;

1406 
sw_°©us_ãxt
:

1407 
ch
) {

1408 
CR
:

1409 
°©e
 = 
sw_Æmo°_d⁄e
;

1411 
LF
:

1412 
d⁄e
;

1417 
sw_Æmo°_d⁄e
:

1418 
ch
) {

1419 
LF
:

1420 
d⁄e
;

1422  
NGX_ERROR
;

1427 
b
->
pos
 = 
p
;

1428 
˘x
->
°©e
 = state;

1430  
NGX_AGAIN
;

1432 
d⁄e
:

1434 
b
->
pos
 = 
p
 + 1;

1435 
˘x
->
°©e
 = 
sw_°¨t
;

1437  
NGX_OK
;

1438 
	}
}

1441 
ngx_öt_t


1442 
	$ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1444 
size_t
 
Àn
;

1445 
ngx_öt_t
 
rc
;

1447 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1451 
rc
 = 
	`ngx_s¶_oc•_∑r£_hódî_löe
(
˘x
);

1453 i‡(
rc
 =
NGX_OK
) {

1455 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1457 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
,

1458 
˘x
->
hódî_«me_°¨t
,

1459 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1460 
˘x
->
hódî_°¨t
);

1462 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

1464 i‡(
Àn
 == ("Content-Type") - 1

1465 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

1466 (
u_ch¨
 *) "Content-Type",

1470 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

1472 i‡(
Àn
 != ("application/ocsp-response") - 1

1473 || 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_°¨t
,

1474 (
u_ch¨
 *) "application/ocsp-response",

1478 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1481 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1482 
˘x
->
hódî_°¨t
);

1483  
NGX_ERROR
;

1494 i‡(
rc
 =
NGX_DONE
) {

1498 i‡(
rc
 =
NGX_AGAIN
) {

1499  
NGX_AGAIN
;

1504 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1507  
NGX_ERROR
;

1510 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_body
;

1511  
˘x
->
	`¥o˚ss
(ctx);

1512 
	}
}

1514 
ngx_öt_t


1515 
	$ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1517 
u_ch¨
 
c
, 
ch
, *
p
;

1519 
sw_°¨t
 = 0,

1520 
sw_«me
,

1521 
sw_•a˚_bef‹e_vÆue
,

1522 
sw_vÆue
,

1523 
sw_•a˚_a·î_vÆue
,

1524 
sw_Æmo°_d⁄e
,

1525 
sw_hódî_Æmo°_d⁄e


1526 } 
°©e
;

1528 
°©e
 = 
˘x
->state;

1530 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

1531 
ch
 = *
p
;

1534 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1535 "s:%d in:'%02Xd:%c'", 
°©e
, 
ch
, ch);

1538 
°©e
) {

1541 
sw_°¨t
:

1543 
ch
) {

1544 
CR
:

1545 
˘x
->
hódî_íd
 = 
p
;

1546 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

1548 
LF
:

1549 
˘x
->
hódî_íd
 = 
p
;

1550 
hódî_d⁄e
;

1552 
°©e
 = 
sw_«me
;

1553 
˘x
->
hódî_«me_°¨t
 = 
p
;

1555 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1556 i‡(
c
 >= 'a' && c <= 'z') {

1560 i‡(
ch
 >= '0' && ch <= '9') {

1564  
NGX_ERROR
;

1569 
sw_«me
:

1570 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1571 i‡(
c
 >= 'a' && c <= 'z') {

1575 i‡(
ch
 == ':') {

1576 
˘x
->
hódî_«me_íd
 = 
p
;

1577 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

1581 i‡(
ch
 == '-') {

1585 i‡(
ch
 >= '0' && ch <= '9') {

1589 i‡(
ch
 =
CR
) {

1590 
˘x
->
hódî_«me_íd
 = 
p
;

1591 
˘x
->
hódî_°¨t
 = 
p
;

1592 
˘x
->
hódî_íd
 = 
p
;

1593 
°©e
 = 
sw_Æmo°_d⁄e
;

1597 i‡(
ch
 =
LF
) {

1598 
˘x
->
hódî_«me_íd
 = 
p
;

1599 
˘x
->
hódî_°¨t
 = 
p
;

1600 
˘x
->
hódî_íd
 = 
p
;

1601 
d⁄e
;

1604  
NGX_ERROR
;

1607 
sw_•a˚_bef‹e_vÆue
:

1608 
ch
) {

1611 
CR
:

1612 
˘x
->
hódî_°¨t
 = 
p
;

1613 
˘x
->
hódî_íd
 = 
p
;

1614 
°©e
 = 
sw_Æmo°_d⁄e
;

1616 
LF
:

1617 
˘x
->
hódî_°¨t
 = 
p
;

1618 
˘x
->
hódî_íd
 = 
p
;

1619 
d⁄e
;

1621 
˘x
->
hódî_°¨t
 = 
p
;

1622 
°©e
 = 
sw_vÆue
;

1628 
sw_vÆue
:

1629 
ch
) {

1631 
˘x
->
hódî_íd
 = 
p
;

1632 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1634 
CR
:

1635 
˘x
->
hódî_íd
 = 
p
;

1636 
°©e
 = 
sw_Æmo°_d⁄e
;

1638 
LF
:

1639 
˘x
->
hódî_íd
 = 
p
;

1640 
d⁄e
;

1645 
sw_•a˚_a·î_vÆue
:

1646 
ch
) {

1649 
CR
:

1650 
°©e
 = 
sw_Æmo°_d⁄e
;

1652 
LF
:

1653 
d⁄e
;

1655 
°©e
 = 
sw_vÆue
;

1661 
sw_Æmo°_d⁄e
:

1662 
ch
) {

1663 
LF
:

1664 
d⁄e
;

1666  
NGX_ERROR
;

1670 
sw_hódî_Æmo°_d⁄e
:

1671 
ch
) {

1672 
LF
:

1673 
hódî_d⁄e
;

1675  
NGX_ERROR
;

1680 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1681 
˘x
->
°©e
 = state;

1683  
NGX_AGAIN
;

1685 
d⁄e
:

1687 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1688 
˘x
->
°©e
 = 
sw_°¨t
;

1690  
NGX_OK
;

1692 
hódî_d⁄e
:

1694 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1695 
˘x
->
°©e
 = 
sw_°¨t
;

1697  
NGX_DONE
;

1698 
	}
}

1701 
ngx_öt_t


1702 
	$ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1704 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1707 i‡(
˘x
->
d⁄e
) {

1708 
˘x
->
	`h™dÀr
(ctx);

1709  
NGX_DONE
;

1712  
NGX_AGAIN
;

1713 
	}
}

1716 
u_ch¨
 *

1717 
	$ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

1719 
u_ch¨
 *
p
;

1720 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1722 
p
 = 
buf
;

1724 i‡(
log
->
a˘i⁄
) {

1725 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

1726 
Àn
 -
p
 - 
buf
;

1729 
˘x
 = 
log
->
d©a
;

1731 i‡(
˘x
) {

1732 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñe•⁄dî: %V", &
˘x
->
ho°
);

1735  
p
;

1736 
	}
}

1742 
ngx_öt_t


1743 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

1744 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

1746 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

1749  
NGX_OK
;

1750 
	}
}

1752 
ngx_öt_t


1753 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

1754 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

1756  
NGX_OK
;

1757 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_pipe.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_pùe.h
>

14 
ngx_öt_t
 
ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
);

15 
ngx_öt_t
 
ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
);

17 
ngx_öt_t
 
ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
);

18 
ngx_ölöe
 
ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
);

19 
ngx_öt_t
 
ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
);

22 
ngx_öt_t


23 
	$ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
, 
ngx_öt_t
 
do_wrôe
)

25 
u_öt
 
Êags
;

26 
ngx_öt_t
 
rc
;

27 
ngx_evít_t
 *
ªv
, *
wev
;

30 i‡(
do_wrôe
) {

31 
p
->
log
->
a˘i⁄
 = "sendingÅo client";

33 
rc
 = 
	`ngx_evít_pùe_wrôe_to_down°ªam
(
p
);

35 i‡(
rc
 =
NGX_ABORT
) {

36  
NGX_ABORT
;

39 i‡(
rc
 =
NGX_BUSY
) {

40  
NGX_OK
;

44 
p
->
ªad
 = 0;

45 
p
->
up°ªam_blocked
 = 0;

47 
p
->
log
->
a˘i⁄
 = "reading upstream";

49 i‡(
	`ngx_evít_pùe_ªad_up°ªam
(
p
Ë=
NGX_ABORT
) {

50  
NGX_ABORT
;

53 i‡(!
p
->
ªad
 && !p->
up°ªam_blocked
) {

57 
do_wrôe
 = 1;

60 i‡(
p
->
up°ªam
->
fd
 !(
ngx_sockë_t
) -1) {

61 
ªv
 = 
p
->
up°ªam
->
ªad
;

63 
Êags
 = (
ªv
->
eof
 ||Ñev->
îr‹
Ë? 
NGX_CLOSE_EVENT
 : 0;

65 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 
Êags
Ë!
NGX_OK
) {

66  
NGX_ABORT
;

69 i‡(
ªv
->
a˘ive
 && !ªv->
ªady
) {

70 
	`ngx_add_timî
(
ªv
, 
p
->
ªad_timeout
);

72 } i‡(
ªv
->
timî_£t
) {

73 
	`ngx_dñ_timî
(
ªv
);

77 i‡(
p
->
down°ªam
->
fd
 !(
ngx_sockë_t
) -1

78 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x
)

80 
wev
 = 
p
->
down°ªam
->
wrôe
;

81 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

82  
NGX_ABORT
;

85 i‡(!
wev
->
dñayed
) {

86 i‡(
wev
->
a˘ive
 && !wev->
ªady
) {

87 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

89 } i‡(
wev
->
timî_£t
) {

90 
	`ngx_dñ_timî
(
wev
);

95  
NGX_OK
;

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
)

102 
ssize_t
 
n
, 
size
;

103 
ngx_öt_t
 
rc
;

104 
ngx_buf_t
 *
b
;

105 
ngx_chaö_t
 *
chaö
, *
˛
, *
 
;

107 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

108  
NGX_OK
;

111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

112 "pùêªad up°ªam: %d", 
p
->
up°ªam
->
ªad
->
ªady
);

116 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

120 i‡(
p
->
¥îód_bufs
 =
NULL
 && !p->
up°ªam
->
ªad
->
ªady
) {

124 i‡(
p
->
¥îód_bufs
) {

128 
chaö
 = 
p
->
¥îód_bufs
;

129 
p
->
¥îód_bufs
 = 
NULL
;

130 
n
 = 
p
->
¥îód_size
;

132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

133 "pùê¥îód: %z", 
n
);

135 i‡(
n
) {

136 
p
->
ªad
 = 1;

141 #i‡(
NGX_HAVE_KQUEUE
)

149 i‡(
p
->
up°ªam
->
ªad
->
avaûabÀ
 == 0

150 && 
p
->
up°ªam
->
ªad
->
≥ndög_eof
)

152 
p
->
up°ªam
->
ªad
->
ªady
 = 0;

153 
p
->
up°ªam
->
ªad
->
eof
 = 1;

154 
p
->
up°ªam_eof
 = 1;

155 
p
->
ªad
 = 1;

157 i‡(
p
->
up°ªam
->
ªad
->
kq_î∫o
) {

158 
p
->
up°ªam
->
ªad
->
îr‹
 = 1;

159 
p
->
up°ªam_îr‹
 = 1;

160 
p
->
up°ªam_eof
 = 0;

162 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
,

163 
p
->
up°ªam
->
ªad
->
kq_î∫o
,

172 i‡(
p
->
‰ì_øw_bufs
) {

176 
chaö
 = 
p
->
‰ì_øw_bufs
;

177 i‡(
p
->
sögÀ_buf
) {

178 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

179 
chaö
->
√xt
 = 
NULL
;

181 
p
->
‰ì_øw_bufs
 = 
NULL
;

184 } i‡(
p
->
Æloˇãd
 <Ö->
bufs
.
num
) {

188 
b
 = 
	`ngx_¸óã_ãmp_buf
(
p
->
poﬁ
,Ö->
bufs
.
size
);

189 i‡(
b
 =
NULL
) {

190  
NGX_ABORT
;

193 
p
->
Æloˇãd
++;

195 
chaö
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

196 i‡(
chaö
 =
NULL
) {

197  
NGX_ABORT
;

200 
chaö
->
buf
 = 
b
;

201 
chaö
->
√xt
 = 
NULL
;

203 } i‡(!
p
->
ˇchóbÀ


204 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x


205 && 
p
->
down°ªam
->
wrôe
->
ªady


206 && !
p
->
down°ªam
->
wrôe
->
dñayed
)

213 
p
->
up°ªam_blocked
 = 1;

215 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

220 } i‡(
p
->
ˇchóbÀ


221 || 
p
->
ãmp_fûe
->
off£t
 <Ö->
max_ãmp_fûe_size
)

229 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

231 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

232 "pùêãm∞off£t: %O", 
p
->
ãmp_fûe
->
off£t
);

234 i‡(
rc
 =
NGX_BUSY
) {

238 i‡(
rc
 =
NGX_AGAIN
) {

239 i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT


240 && 
p
->
up°ªam
->
ªad
->
a˘ive


241 && 
p
->
up°ªam
->
ªad
->
ªady
)

243 i‡(
	`ngx_dñ_evít
(
p
->
up°ªam
->
ªad
, 
NGX_READ_EVENT
, 0)

244 =
NGX_ERROR
)

246  
NGX_ABORT
;

251 i‡(
rc
 !
NGX_OK
) {

252  
rc
;

255 
chaö
 = 
p
->
‰ì_øw_bufs
;

256 i‡(
p
->
sögÀ_buf
) {

257 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

258 
chaö
->
√xt
 = 
NULL
;

260 
p
->
‰ì_øw_bufs
 = 
NULL
;

267 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

273 
n
 = 
p
->
up°ªam
->
	`ªcv_chaö
’->up°ªam, 
chaö
);

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

276 "pùêªcv chaö: %z", 
n
);

278 i‡(
p
->
‰ì_øw_bufs
) {

279 
chaö
->
√xt
 = 
p
->
‰ì_øw_bufs
;

281 
p
->
‰ì_øw_bufs
 = 
chaö
;

283 i‡(
n
 =
NGX_ERROR
) {

284 
p
->
up°ªam_îr‹
 = 1;

285  
NGX_ERROR
;

288 i‡(
n
 =
NGX_AGAIN
) {

289 i‡(
p
->
sögÀ_buf
) {

290 
	`ngx_evít_pùe_ªmove_shadow_löks
(
chaö
->
buf
);

296 
p
->
ªad
 = 1;

298 i‡(
n
 == 0) {

299 
p
->
up°ªam_eof
 = 1;

304 
p
->
ªad_Àngth
 +
n
;

305 
˛
 = 
chaö
;

306 
p
->
‰ì_øw_bufs
 = 
NULL
;

308 
˛
 && 
n
 > 0) {

310 
	`ngx_evít_pùe_ªmove_shadow_löks
(
˛
->
buf
);

312 
size
 = 
˛
->
buf
->
íd
 - cl->buf->
œ°
;

314 i‡(
n
 >
size
) {

315 
˛
->
buf
->
œ°
 = cl->buf->
íd
;

317  
˛
->
buf
->
num
 = 
p
->num++;

319 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

320  
NGX_ABORT
;

323 
n
 -
size
;

324 
 
 = 
˛
;

325 
˛
 = cl->
√xt
;

326 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
 
);

329 
˛
->
buf
->
œ°
 +
n
;

330 
n
 = 0;

334 i‡(
˛
) {

335 
 
 = 
˛
;Ün->
√xt
;Ün =Ün->next) { }

337 
 
->
√xt
 = 
p
->
‰ì_øw_bufs
;

338 
p
->
‰ì_øw_bufs
 = 
˛
;

342 #i‡(
NGX_DEBUG
)

344 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

345 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

349 (
˛
->
buf
->
shadow
 ? 1 : 0),

350 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

351 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

352 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

353 
˛
->
buf
->
fûe_pos
,

354 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

357 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

358 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

362 (
˛
->
buf
->
shadow
 ? 1 : 0),

363 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

364 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

365 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

366 
˛
->
buf
->
fûe_pos
,

367 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

370 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

371 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

375 (
˛
->
buf
->
shadow
 ? 1 : 0),

376 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

377 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

378 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

379 
˛
->
buf
->
fûe_pos
,

380 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

383 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

384 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

388 (
˛
->
buf
->
shadow
 ? 1 : 0),

389 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

390 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

391 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

392 
˛
->
buf
->
fûe_pos
,

393 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

397 "pùêÀngth: %O", 
p
->
Àngth
);

401 i‡(
p
->
‰ì_øw_bufs
 &&Ö->
Àngth
 != -1) {

402 
˛
 = 
p
->
‰ì_øw_bufs
;

404 i‡(
˛
->
buf
->
œ°
 - cl->buf->
pos
 >
p
->
Àngth
) {

406 
p
->
‰ì_øw_bufs
 = 
˛
->
√xt
;

408  
˛
->
buf
->
num
 = 
p
->num++;

410 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

411  
NGX_ABORT
;

414 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

418 i‡(
p
->
Àngth
 == 0) {

419 
p
->
up°ªam_d⁄e
 = 1;

420 
p
->
ªad
 = 1;

423 i‡((
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
Ë&&Ö->
‰ì_øw_bufs
) {

425  
p
->
‰ì_øw_bufs
->
buf
->
num
 =Ö->num++;

427 i‡(
p
->
	`öput_fûãr
’,Ö->
‰ì_øw_bufs
->
buf
Ë=
NGX_ERROR
) {

428  
NGX_ABORT
;

431 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

433 i‡(
p
->
‰ì_bufs
 &&Ö->
buf_to_fûe
 =
NULL
) {

434 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

435 i‡(
˛
->
buf
->
shadow
 =
NULL
) {

436 
	`ngx_p‰ì
(
p
->
poﬁ
, 
˛
->
buf
->
°¨t
);

442 i‡(
p
->
ˇchóbÀ
 &&Ö->
ö
) {

443 i‡(
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
Ë=
NGX_ABORT
) {

444  
NGX_ABORT
;

448  
NGX_OK
;

449 
	}
}

452 
ngx_öt_t


453 
	$ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
)

455 
u_ch¨
 *
¥ev
;

456 
size_t
 
bsize
;

457 
ngx_öt_t
 
rc
;

458 
ngx_uöt_t
 
Êush
, 
Êushed
, 
¥ev_œ°_shadow
;

459 
ngx_chaö_t
 *
out
, **
Œ
, *
˛
;

460 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

462 
down°ªam
 = 
p
->downstream;

464 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

465 "pùêwrôêdown°ªam: %d", 
down°ªam
->
wrôe
->
ªady
);

467 
Êushed
 = 0;

470 i‡(
p
->
down°ªam_îr‹
) {

471  
	`ngx_evít_pùe_døö_chaös
(
p
);

474 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

478 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

479 
˛
->
buf
->
ªcy˛ed
 = 0;

482 i‡(
p
->
out
) {

483 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

486 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

487 
˛
->
buf
->
ªcy˛ed
 = 0;

490 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
out
);

492 i‡(
rc
 =
NGX_ERROR
) {

493 
p
->
down°ªam_îr‹
 = 1;

494  
	`ngx_evít_pùe_døö_chaös
(
p
);

497 
p
->
out
 = 
NULL
;

500 i‡(
p
->
ö
) {

501 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

504 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

505 
˛
->
buf
->
ªcy˛ed
 = 0;

508 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
ö
);

510 i‡(
rc
 =
NGX_ERROR
) {

511 
p
->
down°ªam_îr‹
 = 1;

512  
	`ngx_evít_pùe_døö_chaös
(
p
);

515 
p
->
ö
 = 
NULL
;

518 i‡(
p
->
ˇchóbÀ
 &&Ö->
buf_to_fûe
) {

519 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

522 i‡(
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
Ë=
NGX_ABORT
) {

523  
NGX_ABORT
;

527 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

532 
p
->
down°ªam_d⁄e
 = 1;

536 i‡(
down°ªam
->
d©a
 !
p
->
ouçut_˘x


537 || !
down°ªam
->
wrôe
->
ªady


538 || 
down°ªam
->
wrôe
->
dñayed
)

545 
¥ev
 = 
NULL
;

546 
bsize
 = 0;

548 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

550 i‡(
˛
->
buf
->
ªcy˛ed
) {

551 i‡(
¥ev
 =
˛
->
buf
->
°¨t
) {

555 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

556 
¥ev
 = 
˛
->
buf
->
°¨t
;

560 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

561 "pùêwrôêbusy: %uz", 
bsize
);

563 
out
 = 
NULL
;

565 i‡(
bsize
 >(
size_t
Ë
p
->
busy_size
) {

566 
Êush
 = 1;

567 
Êush
;

570 
Êush
 = 0;

571 
Œ
 = 
NULL
;

572 
¥ev_œ°_shadow
 = 1;

575 i‡(
p
->
out
) {

576 
˛
 = 
p
->
out
;

578 i‡(
˛
->
buf
->
ªcy˛ed
) {

579 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
p
->
log
, 0,

583 
p
->
out
 =Ö->out->
√xt
;

585 } i‡(!
p
->
ˇchóbÀ
 &&Ö->
ö
) {

586 
˛
 = 
p
->
ö
;

588 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

590 
˛
->
buf
->
œ°_shadow
,

591 
˛
->
buf
->
pos
,

592 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

594 i‡(
˛
->
buf
->
ªcy˛ed
 && 
¥ev_œ°_shadow
) {

595 i‡(
bsize
 + 
˛
->
buf
->
íd
 - cl->buf->
°¨t
 > 
p
->
busy_size
) {

596 
Êush
 = 1;

600 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

603 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

605 
p
->
ö
 =Ö->ö->
√xt
;

611 
˛
->
√xt
 = 
NULL
;

613 i‡(
out
) {

614 *
Œ
 = 
˛
;

616 
out
 = 
˛
;

618 
Œ
 = &
˛
->
√xt
;

621 
Êush
:

623 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

624 "pùêwrôe: out:%p, f:%d", 
out
, 
Êush
);

626 i‡(
out
 =
NULL
) {

628 i‡(!
Êush
) {

633 i‡(
Êushed
++ > 10) {

634  
NGX_BUSY
;

638 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
, 
out
);

640 
	`ngx_chaö_upd©e_chaös
(
p
->
poﬁ
, &p->
‰ì
, &p->
busy
, &
out
,Ö->
èg
);

642 i‡(
rc
 =
NGX_ERROR
) {

643 
p
->
down°ªam_îr‹
 = 1;

644  
	`ngx_evít_pùe_døö_chaös
(
p
);

647 
˛
 = 
p
->
‰ì
; cl; c»˛->
√xt
) {

649 i‡(
˛
->
buf
->
ãmp_fûe
) {

650 i‡(
p
->
ˇchóbÀ
 || !p->
cy˛ic_ãmp_fûe
) {

656 i‡(
˛
->
buf
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

657 
p
->
ãmp_fûe
->
off£t
 = 0;

665 i‡(
˛
->
buf
->
œ°_shadow
) {

666 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

667  
NGX_ABORT
;

670 
˛
->
buf
->
œ°_shadow
 = 0;

673 
˛
->
buf
->
shadow
 = 
NULL
;

677  
NGX_OK
;

678 
	}
}

681 
ngx_öt_t


682 
	$ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
)

684 
ssize_t
 
size
, 
bsize
, 
n
;

685 
ngx_buf_t
 *
b
;

686 
ngx_uöt_t
 
¥ev_œ°_shadow
;

687 
ngx_chaö_t
 *
˛
, *
é
, *
√xt
, *
out
, **
Œ
, **
œ°_out
, **
œ°_‰ì
, 
Ê
;

689 i‡(
p
->
buf_to_fûe
) {

690 
Ê
.
buf
 = 
p
->
buf_to_fûe
;

691 
Ê
.
√xt
 = 
p
->
ö
;

692 
out
 = &
Ê
;

695 
out
 = 
p
->
ö
;

698 i‡(!
p
->
ˇchóbÀ
) {

700 
size
 = 0;

701 
˛
 = 
out
;

702 
Œ
 = 
NULL
;

703 
¥ev_œ°_shadow
 = 1;

705 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

706 "pùêoff£t: %O", 
p
->
ãmp_fûe
->
off£t
);

709 
bsize
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

711 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

713 
˛
->
buf
->
œ°_shadow
, cl->buf->
°¨t
,

714 
˛
->
buf
->
pos
, 
bsize
);

716 i‡(
¥ev_œ°_shadow


717 && ((
size
 + 
bsize
 > 
p
->
ãmp_fûe_wrôe_size
)

718 || (
p
->
ãmp_fûe
->
off£t
 + 
size
 + 
bsize


719 > 
p
->
max_ãmp_fûe_size
)))

724 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

726 
size
 +
bsize
;

727 
Œ
 = &
˛
->
√xt
;

728 
˛
 = cl->
√xt
;

730 } 
˛
);

732 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "size: %z", 
size
);

734 i‡(
Œ
 =
NULL
) {

735  
NGX_BUSY
;

738 i‡(
˛
) {

739 
p
->
ö
 = 
˛
;

740 *
Œ
 = 
NULL
;

743 
p
->
ö
 = 
NULL
;

744 
p
->
œ°_ö
 = &p->
ö
;

748 
p
->
ö
 = 
NULL
;

749 
p
->
œ°_ö
 = &p->
ö
;

752 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, 
out
);

754 i‡(
n
 =
NGX_ERROR
) {

755  
NGX_ABORT
;

758 i‡(
p
->
buf_to_fûe
) {

759 
p
->
ãmp_fûe
->
off£t
 =Ö->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

760 
n
 -
p
->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

761 
p
->
buf_to_fûe
 = 
NULL
;

762 
out
 = out->
√xt
;

765 i‡(
n
 > 0) {

768 i‡(
p
->
out
) {

769 
˛
 = 
p
->
out
; cl->
√xt
; cl = cl->next) { }

771 
b
 = 
˛
->
buf
;

773 i‡(
b
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

774 
p
->
ãmp_fûe
->
off£t
 +
n
;

775 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

776 
‰ì
;

779 
œ°_out
 = &
˛
->
√xt
;

782 
œ°_out
 = &
p
->
out
;

785 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

786 i‡(
˛
 =
NULL
) {

787  
NGX_ABORT
;

790 
b
 = 
˛
->
buf
;

792 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

794 
b
->
èg
 = 
p
->tag;

796 
b
->
fûe
 = &
p
->
ãmp_fûe
->file;

797 
b
->
fûe_pos
 = 
p
->
ãmp_fûe
->
off£t
;

798 
p
->
ãmp_fûe
->
off£t
 +
n
;

799 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

801 
b
->
ö_fûe
 = 1;

802 
b
->
ãmp_fûe
 = 1;

804 *
œ°_out
 = 
˛
;

807 
‰ì
:

809 
œ°_‰ì
 = &
p
->
‰ì_øw_bufs
;

810 *
œ°_‰ì
 !
NULL
;

811 
œ°_‰ì
 = &(*œ°_‰ì)->
√xt
)

816 
˛
 = 
out
; cl; c»
√xt
) {

817 
√xt
 = 
˛
->next;

819 
˛
->
√xt
 = 
p
->
‰ì
;

820 
p
->
‰ì
 = 
˛
;

822 
b
 = 
˛
->
buf
;

824 i‡(
b
->
œ°_shadow
) {

826 
é
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

827 i‡(
é
 =
NULL
) {

828  
NGX_ABORT
;

831 
é
->
buf
 = 
b
->
shadow
;

832 
é
->
√xt
 = 
NULL
;

834 *
œ°_‰ì
 = 
é
;

835 
œ°_‰ì
 = &
é
->
√xt
;

837 
b
->
shadow
->
pos
 = b->shadow->
°¨t
;

838 
b
->
shadow
->
œ°
 = b->shadow->
°¨t
;

840 
	`ngx_evít_pùe_ªmove_shadow_löks
(
b
->
shadow
);

844  
NGX_OK
;

845 
	}
}

850 
ngx_öt_t


851 
	$ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

853 
ngx_buf_t
 *
b
;

854 
ngx_chaö_t
 *
˛
;

856 i‡(
buf
->
pos
 =buf->
œ°
) {

857  
NGX_OK
;

860 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

861 i‡(
˛
 =
NULL
) {

862  
NGX_ERROR
;

865 
b
 = 
˛
->
buf
;

867 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

868 
b
->
shadow
 = 
buf
;

869 
b
->
èg
 = 
p
->tag;

870 
b
->
œ°_shadow
 = 1;

871 
b
->
ªcy˛ed
 = 1;

872 
buf
->
shadow
 = 
b
;

874 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

876 i‡(
p
->
ö
) {

877 *
p
->
œ°_ö
 = 
˛
;

879 
p
->
ö
 = 
˛
;

881 
p
->
œ°_ö
 = &
˛
->
√xt
;

883 i‡(
p
->
Àngth
 == -1) {

884  
NGX_OK
;

887 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

889  
NGX_OK
;

890 
	}
}

893 
ngx_ölöe
 

894 
	$ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
)

896 
ngx_buf_t
 *
b
, *
√xt
;

898 
b
 = 
buf
->
shadow
;

900 i‡(
b
 =
NULL
) {

904 !
b
->
œ°_shadow
) {

905 
√xt
 = 
b
->
shadow
;

907 
b
->
ãmp‹¨y
 = 0;

908 
b
->
ªcy˛ed
 = 0;

910 
b
->
shadow
 = 
NULL
;

911 
b
 = 
√xt
;

914 
b
->
ãmp‹¨y
 = 0;

915 
b
->
ªcy˛ed
 = 0;

916 
b
->
œ°_shadow
 = 0;

918 
b
->
shadow
 = 
NULL
;

920 
buf
->
shadow
 = 
NULL
;

921 
	}
}

924 
ngx_öt_t


925 
	$ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
)

927 
ngx_chaö_t
 *
˛
;

929 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

930 i‡(
˛
 =
NULL
) {

931  
NGX_ERROR
;

934 i‡(
p
->
buf_to_fûe
 && 
b
->
°¨t
 ==Ö->buf_to_file->start) {

935 
b
->
pos
 = 
p
->
buf_to_fûe
->
œ°
;

936 
b
->
œ°
 = 
p
->
buf_to_fûe
->last;

939 
b
->
pos
 = b->
°¨t
;

940 
b
->
œ°
 = b->
°¨t
;

943 
b
->
shadow
 = 
NULL
;

945 
˛
->
buf
 = 
b
;

947 i‡(
p
->
‰ì_øw_bufs
 =
NULL
) {

948 
p
->
‰ì_øw_bufs
 = 
˛
;

949 
˛
->
√xt
 = 
NULL
;

951  
NGX_OK
;

954 i‡(
p
->
‰ì_øw_bufs
->
buf
->
pos
 =p->‰ì_øw_bufs->buf->
œ°
) {

958 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
;

959 
p
->
‰ì_øw_bufs
 = 
˛
;

961  
NGX_OK
;

966 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
->next;

967 
p
->
‰ì_øw_bufs
->
√xt
 = 
˛
;

969  
NGX_OK
;

970 
	}
}

973 
ngx_öt_t


974 
	$ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
)

976 
ngx_chaö_t
 *
˛
, *
é
;

979 i‡(
p
->
busy
) {

980 
˛
 = 
p
->
busy
;

981 
p
->
busy
 = 
NULL
;

983 } i‡(
p
->
out
) {

984 
˛
 = 
p
->
out
;

985 
p
->
out
 = 
NULL
;

987 } i‡(
p
->
ö
) {

988 
˛
 = 
p
->
ö
;

989 
p
->
ö
 = 
NULL
;

992  
NGX_OK
;

995 
˛
) {

996 i‡(
˛
->
buf
->
œ°_shadow
) {

997 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

998  
NGX_ABORT
;

1001 
˛
->
buf
->
œ°_shadow
 = 0;

1004 
˛
->
buf
->
shadow
 = 
NULL
;

1005 
é
 = 
˛
->
√xt
;

1006 
˛
->
√xt
 = 
p
->
‰ì
;

1007 
p
->
‰ì
 = 
˛
;

1008 
˛
 = 
é
;

1011 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_pipe.h

8 #i‚de‡
_NGX_EVENT_PIPE_H_INCLUDED_


9 
	#_NGX_EVENT_PIPE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
ngx_evít_pùe_s
 
	tngx_evít_pùe_t
;

19 
	$ngx_öt_t
 (*
	tngx_evít_pùe_öput_fûãr_±
)(
	tngx_evít_pùe_t
 *
	tp
,

20 
	tngx_buf_t
 *
	tbuf
);

21 
	$ngx_öt_t
 (*
	tngx_evít_pùe_ouçut_fûãr_±
)(*
	td©a
,

22 
	tngx_chaö_t
 *
	tchaö
);

25 
	sngx_evít_pùe_s
 {

26 
ngx_c⁄√˘i⁄_t
 *
up°ªam
;

27 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

29 
ngx_chaö_t
 *
‰ì_øw_bufs
;

30 
ngx_chaö_t
 *
ö
;

31 
ngx_chaö_t
 **
œ°_ö
;

33 
ngx_chaö_t
 *
out
;

34 
ngx_chaö_t
 *
‰ì
;

35 
ngx_chaö_t
 *
busy
;

42 
ngx_evít_pùe_öput_fûãr_±
 
öput_fûãr
;

43 *
öput_˘x
;

45 
ngx_evít_pùe_ouçut_fûãr_±
 
ouçut_fûãr
;

46 *
ouçut_˘x
;

48 
ªad
:1;

49 
ˇchóbÀ
:1;

50 
sögÀ_buf
:1;

51 
‰ì_bufs
:1;

52 
up°ªam_d⁄e
:1;

53 
up°ªam_îr‹
:1;

54 
up°ªam_eof
:1;

55 
up°ªam_blocked
:1;

56 
down°ªam_d⁄e
:1;

57 
down°ªam_îr‹
:1;

58 
cy˛ic_ãmp_fûe
:1;

60 
ngx_öt_t
 
Æloˇãd
;

61 
ngx_bufs_t
 
bufs
;

62 
ngx_buf_èg_t
 
èg
;

64 
ssize_t
 
busy_size
;

66 
off_t
 
ªad_Àngth
;

67 
off_t
 
Àngth
;

69 
off_t
 
max_ãmp_fûe_size
;

70 
ssize_t
 
ãmp_fûe_wrôe_size
;

72 
ngx_m£c_t
 
ªad_timeout
;

73 
ngx_m£c_t
 
£nd_timeout
;

74 
ssize_t
 
£nd_low©
;

76 
ngx_poﬁ_t
 *
poﬁ
;

77 
ngx_log_t
 *
log
;

79 
ngx_chaö_t
 *
¥îód_bufs
;

80 
size_t
 
¥îód_size
;

81 
ngx_buf_t
 *
buf_to_fûe
;

83 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

85  
num
;

89 
ngx_öt_t
 
	`ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
,Çgx_öt_à
do_wrôe
);

90 
ngx_öt_t
 
	`ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
);

91 
ngx_öt_t
 
	`ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_posted.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_ac˚±_evíts
;

14 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_evíts
;

16 #i‡(
NGX_THREADS
)

17 
ngx_muãx_t
 *
	gngx_po°ed_evíts_muãx
;

22 
	$ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

23 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
)

25 
ngx_evít_t
 *
ev
;

29 
ev
 = (
ngx_evít_t
 *Ë*
po°ed
;

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

32 "po°edÉvíà%p", 
ev
);

34 i‡(
ev
 =
NULL
) {

38 
	`ngx_dñëe_po°ed_evít
(
ev
);

40 
ev
->
	`h™dÀr
(ev);

42 
	}
}

45 #i‡(
NGX_THREADS
Ë&& !(
NGX_WIN32
)

48 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

50 
ngx_öt_t
 
i
;

52 
ngx_uöt_t
 
busy
;

53 
ngx_evít_t
 *
ev
;

55 
busy
 = 1;

57 i‡(
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

61 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;Év;Év =Év->
√xt
) {

62 i‡(*(
ev
->
lock
) == 0) {

63 
busy
 = 0;

68 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

70 i‡(
busy
) {

75 
i
 = 0; i < 
ngx_thªads_n
; i++) {

76 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_FREE
) {

77 
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
);

81 
	}
}

84 
ngx_öt_t


85 
	$ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
)

87 
ngx_evít_t
 *
ev
;

91 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

95 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

96 "po°edÉvíà%p", 
ev
);

98 i‡(
ev
 =
NULL
) {

99  
NGX_OK
;

102 i‡(
	`ngx_åylock
(
ev
->
lock
) == 0) {

104 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

105 "po°edÉvíà%∞i†busy", 
ev
);

107 
ev
 =Év->
√xt
;

111 i‡(
ev
->
lock
 !ev->
own_lock
) {

112 i‡(*(
ev
->
own_lock
)) {

113 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

114 "thêow¿lock o‡thêpo°edÉvíà%∞i†busy", 
ev
);

115 
	`ngx_u∆ock
(
ev
->
lock
);

116 
ev
 =Év->
√xt
;

119 *(
ev
->
own_lock
) = 1;

122 
	`ngx_dñëe_po°ed_evít
(
ev
);

124 
ev
->
locked
 = 1;

126 
ev
->
ªady
 |ev->
po°ed_ªady
;

127 
ev
->
timedout
 |ev->
po°ed_timedout
;

128 
ev
->
≥ndög_eof
 |ev->
po°ed_eof
;

129 #i‡(
NGX_HAVE_KQUEUE
)

130 
ev
->
kq_î∫o
 |ev->
po°ed_î∫o
;

132 i‡(
ev
->
po°ed_avaûabÀ
) {

133 
ev
->
avaûabÀ
 =Év->
po°ed_avaûabÀ
;

136 
ev
->
po°ed_ªady
 = 0;

137 
ev
->
po°ed_timedout
 = 0;

138 
ev
->
po°ed_eof
 = 0;

139 #i‡(
NGX_HAVE_KQUEUE
)

140 
ev
->
po°ed_î∫o
 = 0;

142 
ev
->
po°ed_avaûabÀ
 = 0;

144 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

146 
ev
->
	`h™dÀr
(ev);

148 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

150 i‡(
ev
->
locked
) {

151 
	`ngx_u∆ock
(
ev
->
lock
);

153 i‡(
ev
->
lock
 !ev->
own_lock
) {

154 
	`ngx_u∆ock
(
ev
->
own_lock
);

158 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

159 "po°edÉvíà%∞i†d⁄e", 
ev
);

164 
	}
}

169 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

171 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_posted.h

8 #i‚de‡
_NGX_EVENT_POSTED_H_INCLUDED_


9 
	#_NGX_EVENT_POSTED_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 #i‡(
NGX_THREADS
)

18 
ngx_muãx_t
 *
ngx_po°ed_evíts_muãx
;

22 
	#ngx_locked_po°_evít
(
ev
, 
queue
) \

24 i‡(
ev
->
¥ev
 =
NULL
) { \

25 
ev
->
√xt
 = (
ngx_evít_t
 *Ë*
queue
; \

26 
ev
->
¥ev
 = (
ngx_evít_t
 **Ë
queue
; \

27 *
queue
 = 
ev
; \

29 i‡(
ev
->
√xt
) { \

30 
ev
->
√xt
->
¥ev
 = &ev->next; \

33 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "postÉvent %p",Év); \

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

37 "upd©êpo°edÉvíà%p", 
ev
); \

38 }

	)

41 
	#ngx_po°_evít
(
ev
, 
queue
) \

43 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
); \

44 
	`ngx_locked_po°_evít
(
ev
, 
queue
); \

45 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

	)

48 
	#ngx_dñëe_po°ed_evít
(
ev
) \

50 *(
ev
->
¥ev
Ëev->
√xt
; \

52 i‡(
ev
->
√xt
) { \

53 
ev
->
√xt
->
¥ev
 =Év->prev; \

56 
ev
->
¥ev
 = 
NULL
; \

57 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

58 "dñëêpo°edÉvíà%p", 
ev
);

	)

62 
ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

63 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
);

64 
ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
);

66 #i‡(
NGX_THREADS
)

67 
ngx_öt_t
 
ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
);

71 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_ac˚±_evíts
;

72 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_evíts
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_timer.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_THREADS
)

14 
ngx_muãx_t
 *
	gngx_evít_timî_muãx
;

18 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
	gngx_evít_timî_rbåì
;

19 
ngx_rbåì_node_t
 
	gngx_evít_timî_£¡öñ
;

27 
ngx_öt_t


28 
	$ngx_evít_timî_öô
(
ngx_log_t
 *
log
)

30 
	`ngx_rbåì_öô
(&
ngx_evít_timî_rbåì
, &
ngx_evít_timî_£¡öñ
,

31 
ngx_rbåì_ö£π_timî_vÆue
);

33 #i‡(
NGX_THREADS
)

35 i‡(
ngx_evít_timî_muãx
) {

36 
ngx_evít_timî_muãx
->
log
 =Üog;

37  
NGX_OK
;

40 
ngx_evít_timî_muãx
 = 
	`ngx_muãx_öô
(
log
, 0);

41 i‡(
ngx_evít_timî_muãx
 =
NULL
) {

42  
NGX_ERROR
;

47  
NGX_OK
;

48 
	}
}

51 
ngx_m£c_t


52 
	$ngx_evít_föd_timî
()

54 
ngx_m£c_öt_t
 
timî
;

55 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

57 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =&
ngx_evít_timî_£¡öñ
) {

58  
NGX_TIMER_INFINITE
;

61 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

63 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

64 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

66 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

68 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

70 
timî
 = (
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
);

72  (
ngx_m£c_t
Ë(
timî
 > 0 ?Åimer : 0);

73 
	}
}

77 
	$ngx_evít_expúe_timîs
()

79 
ngx_evít_t
 *
ev
;

80 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

82 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

86 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

88 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

90 i‡(
roŸ
 =
£¡öñ
) {

94 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

98 i‡((
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
) <= 0) {

99 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

101 #i‡(
NGX_THREADS
)

103 i‡(
ngx_thªaded
 && 
	`ngx_åylock
(
ev
->
lock
) == 0) {

113 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

114 "evíà%∞i†busy i¿expúêtimîs", 
ev
);

119 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

121 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

123 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

125 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

127 #i‡(
NGX_DEBUG
)

128 
ev
->
timî
.
À·
 = 
NULL
;

129 
ev
->
timî
.
right
 = 
NULL
;

130 
ev
->
timî
.
∑ª¡
 = 
NULL
;

133 
ev
->
timî_£t
 = 0;

135 #i‡(
NGX_THREADS
)

136 i‡(
ngx_thªaded
) {

137 
ev
->
po°ed_timedout
 = 1;

139 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

141 
	`ngx_u∆ock
(
ev
->
lock
);

147 
ev
->
timedout
 = 1;

149 
ev
->
	`h™dÀr
(ev);

157 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

158 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_timer.h

8 #i‚de‡
_NGX_EVENT_TIMER_H_INCLUDED_


9 
	#_NGX_EVENT_TIMER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_TIMER_INFINITE
 (
ngx_m£c_t
Ë-1

	)

19 
	#NGX_TIMER_LAZY_DELAY
 300

	)

22 
ngx_öt_t
 
ngx_evít_timî_öô
(
ngx_log_t
 *
log
);

23 
ngx_m£c_t
 
ngx_evít_föd_timî
();

24 
ngx_evít_expúe_timîs
();

27 #i‡(
NGX_THREADS
)

28 
ngx_muãx_t
 *
ngx_evít_timî_muãx
;

32 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
ngx_evít_timî_rbåì
;

35 
ngx_ölöe
 

36 
	$ngx_evít_dñ_timî
(
ngx_evít_t
 *
ev
)

38 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

40 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

42 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

44 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

46 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

48 #i‡(
NGX_DEBUG
)

49 
ev
->
timî
.
À·
 = 
NULL
;

50 
ev
->
timî
.
right
 = 
NULL
;

51 
ev
->
timî
.
∑ª¡
 = 
NULL
;

54 
ev
->
timî_£t
 = 0;

55 
	}
}

58 
ngx_ölöe
 

59 
	$ngx_evít_add_timî
(
ngx_evít_t
 *
ev
, 
ngx_m£c_t
 
timî
)

61 
ngx_m£c_t
 
key
;

62 
ngx_m£c_öt_t
 
diff
;

64 
key
 = 
ngx_cuºít_m£c
 + 
timî
;

66 i‡(
ev
->
timî_£t
) {

74 
diff
 = (
ngx_m£c_öt_t
Ë(
key
 - 
ev
->
timî
.key);

76 i‡(
	`ngx_abs
(
diff
Ë< 
NGX_TIMER_LAZY_DELAY
) {

77 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

79 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
, key);

83 
	`ngx_dñ_timî
(
ev
);

86 
ev
->
timî
.
key
 = key;

88 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

90 
	`ngx_evít_idít
(
ev
->
d©a
), 
timî
,Év->timî.
key
);

92 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

94 
	`ngx_rbåì_ö£π
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

96 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

98 
ev
->
timî_£t
 = 1;

99 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_access_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ö_addr_t
 
	mmask
;

15 
ö_addr_t
 
	maddr
;

16 
ngx_uöt_t
 
	mdíy
;

17 } 
	tngx_hâp_ac˚ss_ruÀ_t
;

19 #i‡(
NGX_HAVE_INET6
)

22 
ö6_addr
 
	maddr
;

23 
ö6_addr
 
	mmask
;

24 
ngx_uöt_t
 
	mdíy
;

25 } 
	tngx_hâp_ac˚ss_ruÀ6_t
;

29 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

32 
ngx_uöt_t
 
	mdíy
;

33 } 
	tngx_hâp_ac˚ss_ruÀ_un_t
;

38 
ngx_¨øy_t
 *
	mruÀs
;

39 #i‡(
NGX_HAVE_INET6
)

40 
ngx_¨øy_t
 *
	mruÀs6
;

42 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

43 
ngx_¨øy_t
 *
	mruÀs_un
;

45 } 
	tngx_hâp_ac˚ss_loc_c⁄f_t
;

48 
ngx_öt_t
 
ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
ö_addr_t
 
addr
);

51 #i‡(
NGX_HAVE_INET6
)

52 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
u_ch¨
 *
p
);

55 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

56 
ngx_öt_t
 
ngx_hâp_ac˚ss_unix
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
);

59 
ngx_öt_t
 
ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
);

60 *
ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

61 *
c⁄f
);

62 *
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

63 *
ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

64 *
∑ª¡
, *
chûd
);

65 
ngx_öt_t
 
ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
);

68 
ngx_comm™d_t
 
	gngx_hâp_ac˚ss_comm™ds
[] = {

70 { 
ngx_°rög
("allow"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


72 |
NGX_CONF_TAKE1
,

73 
ngx_hâp_ac˚ss_ruÀ
,

74 
NGX_HTTP_LOC_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("deny"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


80 |
NGX_CONF_TAKE1
,

81 
ngx_hâp_ac˚ss_ruÀ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

84 
NULL
 },

86 
ngx_nuŒ_comm™d


91 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ_˘x
 = {

92 
NULL
,

93 
ngx_hâp_ac˚ss_öô
,

95 
NULL
,

96 
NULL
,

98 
NULL
,

99 
NULL
,

101 
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
,

102 
ngx_hâp_ac˚ss_mîge_loc_c⁄f


106 
ngx_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ
 = {

107 
NGX_MODULE_V1
,

108 &
ngx_hâp_ac˚ss_moduÀ_˘x
,

109 
ngx_hâp_ac˚ss_comm™ds
,

110 
NGX_HTTP_MODULE
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NGX_MODULE_V1_PADDING


122 
ngx_öt_t


123 
	$ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

125 
sockaddr_ö
 *
sö
;

126 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
;

127 #i‡(
NGX_HAVE_INET6
)

128 
u_ch¨
 *
p
;

129 
ö_addr_t
 
addr
;

130 
sockaddr_ö6
 *
sö6
;

133 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ac˚ss_moduÀ
);

135 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

137 
AF_INET
:

138 i‡(
Æcf
->
ruÀs
) {

139 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

140  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
sö
->
sö_addr
.
s_addr
);

144 #i‡(
NGX_HAVE_INET6
)

146 
AF_INET6
:

147 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

148 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

150 i‡(
Æcf
->
ruÀs
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

151 
addr
 = 
p
[12] << 24;

152 
addr
 +
p
[13] << 16;

153 
addr
 +
p
[14] << 8;

154 
addr
 +
p
[15];

155  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
	`ht⁄l
(
addr
));

158 i‡(
Æcf
->
ruÀs6
) {

159  
	`ngx_hâp_ac˚ss_öë6
(
r
, 
Æcf
, 
p
);

166 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

168 
AF_UNIX
:

169 i‡(
Æcf
->
ruÀs_un
) {

170  
	`ngx_hâp_ac˚ss_unix
(
r
, 
Æcf
);

178  
NGX_DECLINED
;

179 
	}
}

182 
ngx_öt_t


183 
	$ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

184 
ö_addr_t
 
addr
)

186 
ngx_uöt_t
 
i
;

187 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

189 
ruÀ
 = 
Æcf
->
ruÀs
->
ñts
;

190 
i
 = 0; i < 
Æcf
->
ruÀs
->
√…s
; i++) {

192 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

194 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

196 i‡((
addr
 & 
ruÀ
[
i
].
mask
) ==Ñule[i].addr) {

197  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ
[
i
].
díy
);

201  
NGX_DECLINED
;

202 
	}
}

205 #i‡(
NGX_HAVE_INET6
)

207 
ngx_öt_t


208 
	$ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

209 
u_ch¨
 *
p
)

211 
ngx_uöt_t
 
n
;

212 
ngx_uöt_t
 
i
;

213 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

215 
ruÀ6
 = 
Æcf
->
ruÀs6
->
ñts
;

216 
i
 = 0; i < 
Æcf
->
ruÀs6
->
√…s
; i++) {

218 #i‡(
NGX_DEBUG
)

220 
size_t
 
˛
, 
ml
, 
Æ
;

221 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

222 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

223 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

225 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

226 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

227 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

229 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

230 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

234 
n
 = 0;Ç < 16;Ç++) {

235 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

236 
√xt
;

240  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ6
[
i
].
díy
);

242 
√xt
:

246  
NGX_DECLINED
;

247 
	}
}

252 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

254 
ngx_öt_t


255 
	$ngx_hâp_ac˚ss_unix
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
)

257 
ngx_uöt_t
 
i
;

258 
ngx_hâp_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

260 
ruÀ_un
 = 
Æcf
->
ruÀs_un
->
ñts
;

261 
i
 = 0; i < 
Æcf
->
ruÀs_un
->
√…s
; i++) {

265  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ_un
[
i
].
díy
);

269  
NGX_DECLINED
;

270 
	}
}

275 
ngx_öt_t


276 
	$ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
)

278 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

280 i‡(
díy
) {

281 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

283 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

284 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

288  
NGX_HTTP_FORBIDDEN
;

291  
NGX_OK
;

292 
	}
}

296 
	$ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

298 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

300 
ngx_öt_t
 
rc
;

301 
ngx_uöt_t
 
Æl
;

302 
ngx_°r_t
 *
vÆue
;

303 
ngx_cidr_t
 
cidr
;

304 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

305 #i‡(
NGX_HAVE_INET6
)

306 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

308 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

309 
ngx_hâp_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

312 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

314 
vÆue
 = 
cf
->
¨gs
->
ñts
;

316 
Æl
 = (
vÆue
[1].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "all") == 0);

318 i‡(!
Æl
) {

320 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

322 i‡(
vÆue
[1].
Àn
 =5 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "unix:") == 0) {

323 
cidr
.
Ámûy
 = 
AF_UNIX
;

324 
rc
 = 
NGX_OK
;

327 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

331 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

334 i‡(
rc
 =
NGX_ERROR
) {

335 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

336 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

337  
NGX_CONF_ERROR
;

340 i‡(
rc
 =
NGX_DONE
) {

341 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

342 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

346 i‡(
cidr
.
Ámûy
 =
AF_INET
 || 
Æl
) {

348 i‡(
Æcf
->
ruÀs
 =
NULL
) {

349 
Æcf
->
ruÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

350 (
ngx_hâp_ac˚ss_ruÀ_t
));

351 i‡(
Æcf
->
ruÀs
 =
NULL
) {

352  
NGX_CONF_ERROR
;

356 
ruÀ
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs
);

357 i‡(
ruÀ
 =
NULL
) {

358  
NGX_CONF_ERROR
;

361 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

362 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

363 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

366 #i‡(
NGX_HAVE_INET6
)

367 i‡(
cidr
.
Ámûy
 =
AF_INET6
 || 
Æl
) {

369 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

370 
Æcf
->
ruÀs6
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

371 (
ngx_hâp_ac˚ss_ruÀ6_t
));

372 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

373  
NGX_CONF_ERROR
;

377 
ruÀ6
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs6
);

378 i‡(
ruÀ6
 =
NULL
) {

379  
NGX_CONF_ERROR
;

382 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

383 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

384 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

388 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

389 i‡(
cidr
.
Ámûy
 =
AF_UNIX
 || 
Æl
) {

391 i‡(
Æcf
->
ruÀs_un
 =
NULL
) {

392 
Æcf
->
ruÀs_un
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

393 (
ngx_hâp_ac˚ss_ruÀ_un_t
));

394 i‡(
Æcf
->
ruÀs_un
 =
NULL
) {

395  
NGX_CONF_ERROR
;

399 
ruÀ_un
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs_un
);

400 i‡(
ruÀ_un
 =
NULL
) {

401  
NGX_CONF_ERROR
;

404 
ruÀ_un
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

408  
NGX_CONF_OK
;

409 
	}
}

413 
	$ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

415 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
;

417 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ac˚ss_loc_c⁄f_t
));

418 i‡(
c⁄f
 =
NULL
) {

419  
NULL
;

422  
c⁄f
;

423 
	}
}

427 
	$ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

429 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

430 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

432 i‡(
c⁄f
->
ruÀs
 =
NULL


433 #i‡(
NGX_HAVE_INET6
)

434 && 
c⁄f
->
ruÀs6
 =
NULL


436 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

437 && 
c⁄f
->
ruÀs_un
 =
NULL


440 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

441 #i‡(
NGX_HAVE_INET6
)

442 
c⁄f
->
ruÀs6
 = 
¥ev
->rules6;

444 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

445 
c⁄f
->
ruÀs_un
 = 
¥ev
->rules_un;

449  
NGX_CONF_OK
;

450 
	}
}

453 
ngx_öt_t


454 
	$ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
)

456 
ngx_hâp_h™dÀr_±
 *
h
;

457 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

459 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

461 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

462 i‡(
h
 =
NULL
) {

463  
NGX_ERROR
;

466 *
h
 = 
ngx_hâp_ac˚ss_h™dÀr
;

468  
NGX_OK
;

469 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_addition_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mbef‹e_body
;

15 
ngx_°r_t
 
	ma·î_body
;

17 
ngx_hash_t
 
	mty≥s
;

18 
ngx_¨øy_t
 *
	mty≥s_keys
;

19 } 
	tngx_hâp_addôi⁄_c⁄f_t
;

23 
ngx_uöt_t
 
	mbef‹e_body_£¡
;

24 } 
	tngx_hâp_addôi⁄_˘x_t
;

27 *
ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

29 *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_addôi⁄_comm™ds
[] = {

35 { 
ngx_°rög
("add_before_body"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

37 
ngx_c⁄f_£t_°r_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
bef‹e_body
),

40 
NULL
 },

42 { 
ngx_°rög
("add_after_body"),

43 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

44 
ngx_c⁄f_£t_°r_¶Ÿ
,

45 
NGX_HTTP_LOC_CONF_OFFSET
,

46 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
a·î_body
),

47 
NULL
 },

49 { 
ngx_°rög
("addition_types"),

50 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

51 
ngx_hâp_ty≥s_¶Ÿ
,

52 
NGX_HTTP_LOC_CONF_OFFSET
,

53 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
ty≥s_keys
),

54 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

56 
ngx_nuŒ_comm™d


60 
ngx_hâp_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ_˘x
 = {

61 
NULL
,

62 
ngx_hâp_addôi⁄_fûãr_öô
,

64 
NULL
,

65 
NULL
,

67 
NULL
,

68 
NULL
,

70 
ngx_hâp_addôi⁄_¸óã_c⁄f
,

71 
ngx_hâp_addôi⁄_mîge_c⁄f


75 
ngx_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ
 = {

76 
NGX_MODULE_V1
,

77 &
ngx_hâp_addôi⁄_fûãr_moduÀ_˘x
,

78 
ngx_hâp_addôi⁄_comm™ds
,

79 
NGX_HTTP_MODULE
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NGX_MODULE_V1_PADDING


91 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

92 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_addôi⁄_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

99 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

101 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK
 ||Ñ !r->
maö
) {

102  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

105 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

107 i‡(
c⁄f
->
bef‹e_body
.
Àn
 =0 && c⁄f->
a·î_body
.len == 0) {

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

111 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
) {

112  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

115 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_addôi⁄_˘x_t
));

116 i‡(
˘x
 =
NULL
) {

117  
NGX_ERROR
;

120 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

122 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

123 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

124 
	`ngx_hâp_˛ór_ëag
(
r
);

126  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

127 
	}
}

130 
ngx_öt_t


131 
	$ngx_hâp_addôi⁄_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

133 
ngx_öt_t
 
rc
;

134 
ngx_uöt_t
 
œ°
;

135 
ngx_chaö_t
 *
˛
;

136 
ngx_hâp_ªque°_t
 *
§
;

137 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

138 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

140 i‡(
ö
 =
NULL
 || 
r
->
hódî_⁄ly
) {

141  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

144 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

146 i‡(
˘x
 =
NULL
) {

147  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

150 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

152 i‡(!
˘x
->
bef‹e_body_£¡
) {

153 
˘x
->
bef‹e_body_£¡
 = 1;

155 i‡(
c⁄f
->
bef‹e_body
.
Àn
) {

156 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
bef‹e_body
, 
NULL
, &
§
, NULL, 0)

157 !
NGX_OK
)

159  
NGX_ERROR
;

164 i‡(
c⁄f
->
a·î_body
.
Àn
 == 0) {

165 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

166  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

169 
œ°
 = 0;

171 
˛
 = 
ö
; cl; c»˛->
√xt
) {

172 i‡(
˛
->
buf
->
œ°_buf
) {

173 
˛
->
buf
->
œ°_buf
 = 0;

174 
˛
->
buf
->
sync
 = 1;

175 
œ°
 = 1;

179 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

181 i‡(
rc
 =
NGX_ERROR
 || !
œ°
 || 
c⁄f
->
a·î_body
.
Àn
 == 0) {

182  
rc
;

185 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
a·î_body
, 
NULL
, &
§
, NULL, 0)

186 !
NGX_OK
)

188  
NGX_ERROR
;

191 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

193  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

194 
	}
}

197 
ngx_öt_t


198 
	$ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

200 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

201 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_addôi⁄_hódî_fûãr
;

203 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

204 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_addôi⁄_body_fûãr
;

206  
NGX_OK
;

207 
	}
}

211 
	$ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

213 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

215 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_addôi⁄_c⁄f_t
));

216 i‡(
c⁄f
 =
NULL
) {

217  
NULL
;

229  
c⁄f
;

230 
	}
}

234 
	$ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

236 
ngx_hâp_addôi⁄_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

237 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
 = 
chûd
;

239 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
bef‹e_body
, 
¥ev
->before_body, "");

240 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
a·î_body
, 
¥ev
->after_body, "");

242 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

243 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

244 
ngx_hâp_html_deÁu…_ty≥s
)

245 !
NGX_OK
)

247  
NGX_CONF_ERROR
;

250  
NGX_CONF_OK
;

251 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_auth_basic_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_¸y±.h
>

14 
	#NGX_HTTP_AUTH_BUF_SIZE
 2048

	)

18 
ngx_°r_t
 
	m∑sswd
;

19 } 
	tngx_hâp_auth_basic_˘x_t
;

23 
ngx_hâp_com∂ex_vÆue_t
 *
	mªÆm
;

24 
ngx_hâp_com∂ex_vÆue_t
 
	mu£r_fûe
;

25 } 
	tngx_hâp_auth_basic_loc_c⁄f_t
;

28 
ngx_öt_t
 
ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
);

31 
ngx_öt_t
 
ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_°r_t
 *
ªÆm
);

33 
ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
);

34 *
ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

37 
ngx_öt_t
 
ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
);

38 *
ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_auth_basic_comm™ds
[] = {

44 { 
ngx_°rög
("auth_basic"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


46 |
NGX_CONF_TAKE1
,

47 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

48 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
ªÆm
),

50 
NULL
 },

52 { 
ngx_°rög
("auth_basic_user_file"),

53 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


54 |
NGX_CONF_TAKE1
,

55 
ngx_hâp_auth_basic_u£r_fûe
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
u£r_fûe
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ_˘x
 = {

65 
NULL
,

66 
ngx_hâp_auth_basic_öô
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_auth_basic_¸óã_loc_c⁄f
,

75 
ngx_hâp_auth_basic_mîge_loc_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_auth_basic_moduÀ_˘x
,

82 
ngx_hâp_auth_basic_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_öt_t


96 
	$ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

98 
off_t
 
off£t
;

99 
ssize_t
 
n
;

100 
ngx_fd_t
 
fd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_îr_t
 
îr
;

103 
ngx_°r_t
 
pwd
, 
ªÆm
, 
u£r_fûe
;

104 
ngx_uöt_t
 
i
, 
Àvñ
, 
logö
, 
À·
, 
∑sswd
;

105 
ngx_fûe_t
 
fûe
;

106 
ngx_hâp_auth_basic_˘x_t
 *
˘x
;

107 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
;

108 
u_ch¨
 
buf
[
NGX_HTTP_AUTH_BUF_SIZE
];

110 
sw_logö
,

111 
sw_∑sswd
,

112 
sw_skù


113 } 
°©e
;

115 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

117 i‡(
Æcf
->
ªÆm
 =
NULL
 ||álcf->
u£r_fûe
.
vÆue
.
d©a
 == NULL) {

118  
NGX_DECLINED
;

121 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
Æcf
->
ªÆm
, &ªÆmË!
NGX_OK
) {

122  
NGX_ERROR
;

125 i‡(
ªÆm
.
Àn
 =3 && 
	`ngx_°∫cmp
‘ólm.
d©a
, "off", 3) == 0) {

126  
NGX_DECLINED
;

129 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

131 i‡(
˘x
) {

132  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
˘x
, &˘x->
∑sswd
,

133 &
ªÆm
);

136 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

138 i‡(
rc
 =
NGX_DECLINED
) {

140 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

146 i‡(
rc
 =
NGX_ERROR
) {

147  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Æcf
->
u£r_fûe
, &u£r_fûeË!
NGX_OK
) {

151  
NGX_ERROR
;

154 
fd
 = 
	`ngx_›í_fûe
(
u£r_fûe
.
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

156 i‡(
fd
 =
NGX_INVALID_FILE
) {

157 
îr
 = 
ngx_î∫o
;

159 i‡(
îr
 =
NGX_ENOENT
) {

160 
Àvñ
 = 
NGX_LOG_ERR
;

161 
rc
 = 
NGX_HTTP_FORBIDDEN
;

164 
Àvñ
 = 
NGX_LOG_CRIT
;

165 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

168 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

169 
ngx_›í_fûe_n
 " \"%s\" faûed", 
u£r_fûe
.
d©a
);

171  
rc
;

174 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

176 
fûe
.
fd
 = fd;

177 
fûe
.
«me
 = 
u£r_fûe
;

178 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

180 
°©e
 = 
sw_logö
;

181 
∑sswd
 = 0;

182 
logö
 = 0;

183 
À·
 = 0;

184 
off£t
 = 0;

187 
i
 = 
À·
;

189 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
 + 
À·
, 
NGX_HTTP_AUTH_BUF_SIZE
 -Üeft,

190 
off£t
);

192 i‡(
n
 =
NGX_ERROR
) {

193 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

194  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

197 i‡(
n
 == 0) {

201 
i
 = 
À·
; i <Üe· + 
n
; i++) {

202 
°©e
) {

204 
sw_logö
:

205 i‡(
logö
 == 0) {

207 i‡(
buf
[
i
] ='#' || buf[i] =
CR
) {

208 
°©e
 = 
sw_skù
;

212 i‡(
buf
[
i
] =
LF
) {

217 i‡(
buf
[
i
] !
r
->
hódîs_ö
.
u£r
.
d©a
[
logö
]) {

218 
°©e
 = 
sw_skù
;

222 i‡(
logö
 =
r
->
hódîs_ö
.
u£r
.
Àn
) {

223 
°©e
 = 
sw_∑sswd
;

224 
∑sswd
 = 
i
 + 1;

227 
logö
++;

231 
sw_∑sswd
:

232 i‡(
buf
[
i
] =
LF
 || buf[i] =
CR
 || buf[i] == ':') {

233 
buf
[
i
] = '\0';

235 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

237 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

238 
pwd
.
d©a
 = &
buf
[
∑sswd
];

240  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
,

241 &
ªÆm
);

246 
sw_skù
:

247 i‡(
buf
[
i
] =
LF
) {

248 
°©e
 = 
sw_logö
;

249 
logö
 = 0;

256 i‡(
°©e
 =
sw_∑sswd
) {

257 
À·
 =Üe· + 
n
 - 
∑sswd
;

258 
	`ngx_memmove
(
buf
, &buf[
∑sswd
], 
À·
);

259 
∑sswd
 = 0;

262 
À·
 = 0;

265 
off£t
 +
n
;

268 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

270 i‡(
°©e
 =
sw_∑sswd
) {

271 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

272 
pwd
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Öwd.
Àn
 + 1);

273 i‡(
pwd
.
d©a
 =
NULL
) {

274  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

277 
	`ngx_˝y°∫
(
pwd
.
d©a
, &
buf
[
∑sswd
],Öwd.
Àn
 + 1);

279  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
, &
ªÆm
);

282 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

284 &
r
->
hódîs_ö
.
u£r
, &
u£r_fûe
);

286  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

287 
	}
}

290 
ngx_öt_t


291 
	$ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

292 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
)

294 
ngx_öt_t
 
rc
;

295 
u_ch¨
 *
í¸y±ed
;

297 
rc
 = 
	`ngx_¸y±
(
r
->
poﬁ
,Ñ->
hódîs_ö
.
∑sswd
.
d©a
,Öasswd->data,

298 &
í¸y±ed
);

300 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

302 
rc
, &
r
->
hódîs_ö
.
u£r
, 
∑sswd
->
d©a
);

304 i‡(
rc
 =
NGX_OK
) {

305 i‡(
	`ngx_°rcmp
(
í¸y±ed
, 
∑sswd
->
d©a
) == 0) {

306  
NGX_OK
;

309 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

310 "í¸y±ed: \"%s\"", 
í¸y±ed
);

312 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

314 &
r
->
hódîs_ö
.
u£r
);

316  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, 
ªÆm
);

319 i‡(
rc
 =
NGX_ERROR
) {

320  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

325 i‡(
˘x
 =
NULL
) {

326 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_auth_basic_˘x_t
));

327 i‡(
˘x
 =
NULL
) {

328  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

331 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_basic_moduÀ
);

333 
˘x
->
∑sswd
.
Àn
 =Öasswd->len;

334 
∑sswd
->
Àn
++;

336 
˘x
->
∑sswd
.
d©a
 = 
	`ngx_p°rdup
(
r
->
poﬁ
,Öasswd);

337 i‡(
˘x
->
∑sswd
.
d©a
 =
NULL
) {

338  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

345  
rc
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ªÆm
)

352 
size_t
 
Àn
;

353 
u_ch¨
 *
basic
, *
p
;

355 
r
->
hódîs_out
.
www_authítiˇã
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

356 i‡(
r
->
hódîs_out
.
www_authítiˇã
 =
NULL
) {

357  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

360 
Àn
 = ("Basi¯ªÆm=\"\""Ë- 1 + 
ªÆm
->len;

362 
basic
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

363 i‡(
basic
 =
NULL
) {

364  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

367 
p
 = 
	`ngx_˝ymem
(
basic
, "BasicÑealm=\"", ("BasicÑealm=\"") - 1);

368 
p
 = 
	`ngx_˝ymem
’, 
ªÆm
->
d©a
,Ñólm->
Àn
);

369 *
p
 = '"';

371 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 1;

372 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
www_authítiˇã
->
key
, "WWW-Authenticate");

373 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
d©a
 = 
basic
;

374 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
Àn
 =Üen;

376  
NGX_HTTP_UNAUTHORIZED
;

377 
	}
}

380 
	$ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
)

382 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
ngx_î∫o
,

384 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
.
d©a
);

386 
	}
}

390 
	$ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

392 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
;

394 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_basic_loc_c⁄f_t
));

395 i‡(
c⁄f
 =
NULL
) {

396  
NULL
;

399  
c⁄f
;

400 
	}
}

404 
	$ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

406 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

407 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

409 i‡(
c⁄f
->
ªÆm
 =
NULL
) {

410 
c⁄f
->
ªÆm
 = 
¥ev
->realm;

413 i‡(
c⁄f
->
u£r_fûe
.
vÆue
.
d©a
 =
NULL
) {

414 
c⁄f
->
u£r_fûe
 = 
¥ev
->user_file;

417  
NGX_CONF_OK
;

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
)

424 
ngx_hâp_h™dÀr_±
 *
h
;

425 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

427 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

429 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

430 i‡(
h
 =
NULL
) {

431  
NGX_ERROR
;

434 *
h
 = 
ngx_hâp_auth_basic_h™dÀr
;

436  
NGX_OK
;

437 
	}
}

441 
	$ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

443 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

445 
ngx_°r_t
 *
vÆue
;

446 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

448 i‡(
Æcf
->
u£r_fûe
.
vÆue
.
d©a
) {

452 
vÆue
 = 
cf
->
¨gs
->
ñts
;

454 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

456 
ccv
.
cf
 = cf;

457 
ccv
.
vÆue
 = &value[1];

458 
ccv
.
com∂ex_vÆue
 = &
Æcf
->
u£r_fûe
;

459 
ccv
.
zîo
 = 1;

460 
ccv
.
c⁄f_¥efix
 = 1;

462 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

463  
NGX_CONF_ERROR
;

466  
NGX_CONF_OK
;

467 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_auth_request_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	muri
;

15 
ngx_¨øy_t
 *
	mv¨s
;

16 } 
	tngx_hâp_auth_ªque°_c⁄f_t
;

20 
ngx_uöt_t
 
	md⁄e
;

21 
ngx_uöt_t
 
	m°©us
;

22 
ngx_hâp_ªque°_t
 *
	msubªque°
;

23 } 
	tngx_hâp_auth_ªque°_˘x_t
;

27 
ngx_öt_t
 
	mödex
;

28 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

29 
ngx_hâp_£t_v¨übÀ_±
 
	m£t_h™dÀr
;

30 } 
	tngx_hâp_auth_ªque°_v¨übÀ_t
;

33 
ngx_öt_t
 
ngx_hâp_auth_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

34 
ngx_öt_t
 
ngx_hâp_auth_ªque°_d⁄e
(
ngx_hâp_ªque°_t
 *
r
,

35 *
d©a
, 
ngx_öt_t
 
rc
);

36 
ngx_öt_t
 
ngx_hâp_auth_ªque°_£t_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
, 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
);

38 
ngx_öt_t
 
ngx_hâp_auth_ªque°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 *
ngx_hâp_auth_ªque°_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

41 *
ngx_hâp_auth_ªque°_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

42 *
∑ª¡
, *
chûd
);

43 
ngx_öt_t
 
ngx_hâp_auth_ªque°_öô
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_auth_ªque°
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

45 *
c⁄f
);

46 *
ngx_hâp_auth_ªque°_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

50 
ngx_comm™d_t
 
	gngx_hâp_auth_ªque°_comm™ds
[] = {

52 { 
ngx_°rög
("auth_request"),

53 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

54 
ngx_hâp_auth_ªque°
,

55 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
NULL
 },

59 { 
ngx_°rög
("auth_request_set"),

60 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

61 
ngx_hâp_auth_ªque°_£t
,

62 
NGX_HTTP_LOC_CONF_OFFSET
,

64 
NULL
 },

66 
ngx_nuŒ_comm™d


70 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_ªque°_moduÀ_˘x
 = {

71 
NULL
,

72 
ngx_hâp_auth_ªque°_öô
,

74 
NULL
,

75 
NULL
,

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_auth_ªque°_¸óã_c⁄f
,

81 
ngx_hâp_auth_ªque°_mîge_c⁄f


85 
ngx_moduÀ_t
 
	gngx_hâp_auth_ªque°_moduÀ
 = {

86 
NGX_MODULE_V1
,

87 &
ngx_hâp_auth_ªque°_moduÀ_˘x
,

88 
ngx_hâp_auth_ªque°_comm™ds
,

89 
NGX_HTTP_MODULE
,

90 
NULL
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
NULL
,

95 
NULL
,

96 
NULL
,

97 
NGX_MODULE_V1_PADDING


101 
ngx_öt_t


102 
	$ngx_hâp_auth_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

104 
ngx_èbÀ_ñt_t
 *
h
, *
ho
;

105 
ngx_hâp_ªque°_t
 *
§
;

106 
ngx_hâp_po°_subªque°_t
 *
ps
;

107 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
;

108 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
;

110 
¨cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_ªque°_moduÀ
);

112 i‡(
¨cf
->
uri
.
Àn
 == 0) {

113  
NGX_DECLINED
;

116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

119 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_ªque°_moduÀ
);

121 i‡(
˘x
 !
NULL
) {

122 i‡(!
˘x
->
d⁄e
) {

123  
NGX_AGAIN
;

131 i‡(
	`ngx_hâp_auth_ªque°_£t_v¨übÀs
(
r
, 
¨cf
, 
˘x
Ë!
NGX_OK
) {

132  
NGX_ERROR
;

137 i‡(
˘x
->
°©us
 =
NGX_HTTP_FORBIDDEN
) {

138  
˘x
->
°©us
;

141 i‡(
˘x
->
°©us
 =
NGX_HTTP_UNAUTHORIZED
) {

142 
§
 = 
˘x
->
subªque°
;

144 
h
 = 
§
->
hódîs_out
.
www_authítiˇã
;

146 i‡(!
h
 && 
§
->
up°ªam
) {

147 
h
 = 
§
->
up°ªam
->
hódîs_ö
.
www_authítiˇã
;

150 i‡(
h
) {

151 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

152 i‡(
ho
 =
NULL
) {

153  
NGX_ERROR
;

156 *
ho
 = *
h
;

158 
r
->
hódîs_out
.
www_authítiˇã
 = 
ho
;

161  
˘x
->
°©us
;

164 i‡(
˘x
->
°©us
 >
NGX_HTTP_OK


165 && 
˘x
->
°©us
 < 
NGX_HTTP_SPECIAL_RESPONSE
)

167  
NGX_OK
;

170 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

171 "authÑeque° u√x≥˘ed sètus: %d", 
˘x
->
°©us
);

173  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

176 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_auth_ªque°_˘x_t
));

177 i‡(
˘x
 =
NULL
) {

178  
NGX_ERROR
;

181 
ps
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

182 i‡(
ps
 =
NULL
) {

183  
NGX_ERROR
;

186 
ps
->
h™dÀr
 = 
ngx_hâp_auth_ªque°_d⁄e
;

187 
ps
->
d©a
 = 
˘x
;

189 i‡(
	`ngx_hâp_subªque°
(
r
, &
¨cf
->
uri
, 
NULL
, &
§
, 
ps
,

190 
NGX_HTTP_SUBREQUEST_WAITED
)

191 !
NGX_OK
)

193  
NGX_ERROR
;

201 
§
->
ªque°_body
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

202 i‡(
§
->
ªque°_body
 =
NULL
) {

203  
NGX_ERROR
;

206 
§
->
hódî_⁄ly
 = 1;

208 
˘x
->
subªque°
 = 
§
;

210 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_ªque°_moduÀ
);

212  
NGX_AGAIN
;

213 
	}
}

216 
ngx_öt_t


217 
	$ngx_hâp_auth_ªque°_d⁄e
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

219 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
 = 
d©a
;

221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

222 "authÑeque° d⁄ês:%d", 
r
->
hódîs_out
.
°©us
);

224 
˘x
->
d⁄e
 = 1;

225 
˘x
->
°©us
 = 
r
->
hódîs_out
.status;

227  
rc
;

228 
	}
}

231 
ngx_öt_t


232 
	$ngx_hâp_auth_ªque°_£t_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

233 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
, 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
)

235 
ngx_°r_t
 
vÆ
;

236 
ngx_hâp_v¨übÀ_t
 *
v
;

237 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

238 
ngx_hâp_auth_ªque°_v¨übÀ_t
 *
av
, *
œ°
;

239 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

241 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

244 i‡(
¨cf
->
v¨s
 =
NULL
) {

245  
NGX_OK
;

248 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

249 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

251 
av
 = 
¨cf
->
v¨s
->
ñts
;

252 
œ°
 = 
av
 + 
¨cf
->
v¨s
->
√…s
;

254 
av
 < 
œ°
) {

260 
vv
 = &
r
->
v¨übÀs
[
av
->
ödex
];

262 i‡(
	`ngx_hâp_com∂ex_vÆue
(
˘x
->
subªque°
, &
av
->
vÆue
, &
vÆ
)

263 !
NGX_OK
)

265  
NGX_ERROR
;

268 
vv
->
vÆid
 = 1;

269 
vv
->
nŸ_found
 = 0;

270 
vv
->
d©a
 = 
vÆ
.data;

271 
vv
->
Àn
 = 
vÆ
.len;

273 i‡(
av
->
£t_h™dÀr
) {

279 
av
->
	`£t_h™dÀr
(
r
, 
vv
, 
v
[av->
ödex
].
d©a
);

282 
av
++;

285  
NGX_OK
;

286 
	}
}

289 
ngx_öt_t


290 
	$ngx_hâp_auth_ªque°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

291 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

293 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

296 
v
->
nŸ_found
 = 1;

298  
NGX_OK
;

299 
	}
}

303 
	$ngx_hâp_auth_ªque°_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

305 
ngx_hâp_auth_ªque°_c⁄f_t
 *
c⁄f
;

307 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_ªque°_c⁄f_t
));

308 i‡(
c⁄f
 =
NULL
) {

309  
NULL
;

318 
c⁄f
->
v¨s
 = 
NGX_CONF_UNSET_PTR
;

320  
c⁄f
;

321 
	}
}

325 
	$ngx_hâp_auth_ªque°_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

327 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

328 
ngx_hâp_auth_ªque°_c⁄f_t
 *
c⁄f
 = 
chûd
;

330 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uri
, 
¥ev
->uri, "");

331 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
v¨s
, 
¥ev
->v¨s, 
NULL
);

333  
NGX_CONF_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_hâp_auth_ªque°_öô
(
ngx_c⁄f_t
 *
cf
)

340 
ngx_hâp_h™dÀr_±
 *
h
;

341 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

343 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

345 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

346 i‡(
h
 =
NULL
) {

347  
NGX_ERROR
;

350 *
h
 = 
ngx_hâp_auth_ªque°_h™dÀr
;

352  
NGX_OK
;

353 
	}
}

357 
	$ngx_hâp_auth_ªque°
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

359 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
 = 
c⁄f
;

361 
ngx_°r_t
 *
vÆue
;

363 i‡(
¨cf
->
uri
.
d©a
 !
NULL
) {

367 
vÆue
 = 
cf
->
¨gs
->
ñts
;

369 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

370 
¨cf
->
uri
.
Àn
 = 0;

371 
¨cf
->
uri
.
d©a
 = (
u_ch¨
 *) "";

373  
NGX_CONF_OK
;

376 
¨cf
->
uri
 = 
vÆue
[1];

378  
NGX_CONF_OK
;

379 
	}
}

383 
	$ngx_hâp_auth_ªque°_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

385 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
 = 
c⁄f
;

387 
ngx_°r_t
 *
vÆue
;

388 
ngx_hâp_v¨übÀ_t
 *
v
;

389 
ngx_hâp_auth_ªque°_v¨übÀ_t
 *
av
;

390 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

392 
vÆue
 = 
cf
->
¨gs
->
ñts
;

394 i‡(
vÆue
[1].
d©a
[0] != '$') {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

396 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

397  
NGX_CONF_ERROR
;

400 
vÆue
[1].
Àn
--;

401 
vÆue
[1].
d©a
++;

403 i‡(
¨cf
->
v¨s
 =
NGX_CONF_UNSET_PTR
) {

404 
¨cf
->
v¨s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

405 (
ngx_hâp_auth_ªque°_v¨übÀ_t
));

406 i‡(
¨cf
->
v¨s
 =
NULL
) {

407  
NGX_CONF_ERROR
;

411 
av
 = 
	`ngx_¨øy_push
(
¨cf
->
v¨s
);

412 i‡(
av
 =
NULL
) {

413  
NGX_CONF_ERROR
;

416 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

417 i‡(
v
 =
NULL
) {

418  
NGX_CONF_ERROR
;

421 
av
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

422 i‡(
av
->
ödex
 =
NGX_ERROR
) {

423  
NGX_CONF_ERROR
;

426 i‡(
v
->
gë_h™dÀr
 =
NULL
) {

427 
v
->
gë_h™dÀr
 = 
ngx_hâp_auth_ªque°_v¨übÀ
;

428 
v
->
d©a
 = (
uöçå_t
Ë
av
;

431 
av
->
£t_h™dÀr
 = 
v
->set_handler;

433 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

435 
ccv
.
cf
 = cf;

436 
ccv
.
vÆue
 = &value[2];

437 
ccv
.
com∂ex_vÆue
 = &
av
->
vÆue
;

439 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

440  
NGX_CONF_ERROR
;

443  
NGX_CONF_OK
;

444 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_autoindex_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

16 
ngx_buf_t
 *
	mbuf
;

17 
size_t
 
	msize
;

18 
ngx_poﬁ_t
 *
	mpoﬁ
;

19 
size_t
 
	mÆloc_size
;

20 
ngx_chaö_t
 **
	mœ°_out
;

21 } 
	tngx_hâp_autoödex_˘x_t
;

27 
ngx_°r_t
 
	m«me
;

28 
size_t
 
	mutf_Àn
;

29 
size_t
 
	mesˇ≥
;

30 
size_t
 
	mesˇ≥_html
;

32 
	mdú
:1;

34 
time_t
 
	mmtime
;

35 
off_t
 
	msize
;

36 } 
	tngx_hâp_autoödex_íåy_t
;

40 
ngx_Êag_t
 
	míabÀ
;

41 
ngx_Êag_t
 
	mloˇ…ime
;

42 
ngx_Êag_t
 
	mexa˘_size
;

43 } 
	tngx_hâp_autoödex_loc_c⁄f_t
;

46 
	#NGX_HTTP_AUTOINDEX_PREALLOCATE
 50

	)

48 
	#NGX_HTTP_AUTOINDEX_NAME_LEN
 50

	)

51 
ngx_libc_cde˛
 
ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
,

52 c⁄° *
two
);

53 
ngx_öt_t
 
ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

55 
ngx_öt_t
 
ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
);

56 *
ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

58 *
∑ª¡
, *
chûd
);

61 
ngx_comm™d_t
 
	gngx_hâp_autoödex_comm™ds
[] = {

63 { 
ngx_°rög
("autoindex"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
íabÀ
),

68 
NULL
 },

70 { 
ngx_°rög
("autoindex_localtime"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
loˇ…ime
),

75 
NULL
 },

77 { 
ngx_°rög
("autoindex_exact_size"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

79 
ngx_c⁄f_£t_Êag_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
exa˘_size
),

82 
NULL
 },

84 
ngx_nuŒ_comm™d


88 
ngx_hâp_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ_˘x
 = {

89 
NULL
,

90 
ngx_hâp_autoödex_öô
,

92 
NULL
,

93 
NULL
,

95 
NULL
,

96 
NULL
,

98 
ngx_hâp_autoödex_¸óã_loc_c⁄f
,

99 
ngx_hâp_autoödex_mîge_loc_c⁄f


103 
ngx_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_hâp_autoödex_moduÀ_˘x
,

106 
ngx_hâp_autoödex_comm™ds
,

107 
NGX_HTTP_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


119 
u_ch¨
 
	gtôÀ
[] =

120 "<html>" 
CRLF


125 
u_ch¨
 
	ghódî
[] =

126 "</tôÀ></hód>" 
CRLF


127 "<body bgcﬁ‹=\"whôe\">" 
CRLF


131 
u_ch¨
 
	gèû
[] =

132 "</body>" 
CRLF


133 "</html>" 
CRLF


137 
ngx_öt_t


138 
	$ngx_hâp_autoödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

140 
u_ch¨
 *
œ°
, *
fûíame
, 
sˇÀ
;

141 
off_t
 
Àngth
;

142 
size_t
 
Àn
, 
ch¨_Àn
, 
esˇ≥_html
, 
Æloˇãd
, 
roŸ
;

143 
ngx_tm_t
 
tm
;

144 
ngx_îr_t
 
îr
;

145 
ngx_buf_t
 *
b
;

146 
ngx_öt_t
 
rc
, 
size
;

147 
ngx_°r_t
 
∑th
;

148 
ngx_dú_t
 
dú
;

149 
ngx_uöt_t
 
i
, 
Àvñ
, 
utf8
;

150 
ngx_poﬁ_t
 *
poﬁ
;

151 
ngx_time_t
 *
ç
;

152 
ngx_chaö_t
 
out
;

153 
ngx_¨øy_t
 
íåõs
;

154 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

155 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

157 *
m⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

160 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

161  
NGX_DECLINED
;

164 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

165  
NGX_DECLINED
;

168 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

170 i‡(!
Æcf
->
íabÀ
) {

171  
NGX_DECLINED
;

176 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
,

177 
NGX_HTTP_AUTOINDEX_PREALLOCATE
);

178 i‡(
œ°
 =
NULL
) {

179  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

182 
Æloˇãd
 = 
∑th
.
Àn
;

183 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

184 i‡(
∑th
.
Àn
 > 1) {

185 
∑th
.
Àn
--;

187 
∑th
.
d©a
[∑th.
Àn
] = '\0';

189 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

190 "hâ∞autoödex: \"%s\"", 
∑th
.
d©a
);

192 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

193 
îr
 = 
ngx_î∫o
;

195 i‡(
îr
 =
NGX_ENOENT


196 || 
îr
 =
NGX_ENOTDIR


197 || 
îr
 =
NGX_ENAMETOOLONG
)

199 
Àvñ
 = 
NGX_LOG_ERR
;

200 
rc
 = 
NGX_HTTP_NOT_FOUND
;

202 } i‡(
îr
 =
NGX_EACCES
) {

203 
Àvñ
 = 
NGX_LOG_ERR
;

204 
rc
 = 
NGX_HTTP_FORBIDDEN
;

207 
Àvñ
 = 
NGX_LOG_CRIT
;

208 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

212 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

214  
rc
;

217 #i‡(
NGX_SUPPRESS_WARN
)

220 
	`ngx_memzîo
(&
íåõs
, (
ngx_¨øy_t
));

225 
poﬁ
 = 
r
->pool;

227 i‡(
	`ngx_¨øy_öô
(&
íåõs
, 
poﬁ
, 40, (
ngx_hâp_autoödex_íåy_t
))

228 !
NGX_OK
)

230  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

233 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

234 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

235 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

236 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

238 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

240 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

241 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

242 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

243 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

246  
rc
;

249 
fûíame
 = 
∑th
.
d©a
;

250 
fûíame
[
∑th
.
Àn
] = '/';

252 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
 == 5

253 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
ch¨£t
.
d©a
, (
u_ch¨
 *) "utf-8", 5)

256 
utf8
 = 1;

259 
utf8
 = 0;

263 
	`ngx_£t_î∫o
(0);

265 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

266 
îr
 = 
ngx_î∫o
;

268 i‡(
îr
 !
NGX_ENOMOREFILES
) {

269 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

270 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

271  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

277 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 "hâ∞autoödex fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

280 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

282 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

286 i‡(!
dú
.
vÆid_öfo
) {

290 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

291 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

292 + 
NGX_HTTP_AUTOINDEX_PREALLOCATE
;

294 
fûíame
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Æloˇãd
);

295 i‡(
fûíame
 =
NULL
) {

296  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

299 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

300 *
œ°
++ = '/';

303 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

305 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

306 
îr
 = 
ngx_î∫o
;

308 i‡(
îr
 !
NGX_ENOENT
 &&Éº !
NGX_ELOOP
) {

309 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

310 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

312 i‡(
îr
 =
NGX_EACCES
) {

316  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

319 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

320 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

321 
ngx_de_lök_öfo_n
 " \"%s\" failed",

322 
fûíame
);

323  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

328 
íåy
 = 
	`ngx_¨øy_push
(&
íåõs
);

329 i‡(
íåy
 =
NULL
) {

330  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

333 
íåy
->
«me
.
Àn
 =Üen;

335 
íåy
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 1);

336 i‡(
íåy
->
«me
.
d©a
 =
NULL
) {

337  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

340 
	`ngx_˝y°∫
(
íåy
->
«me
.
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

342 
íåy
->
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
	`ngx_de_«me
(&
dú
), 
Àn
,

343 
NGX_ESCAPE_URI_COMPONENT
);

345 
íåy
->
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry->
«me
.
d©a
,

346 
íåy
->
«me
.
Àn
);

348 i‡(
utf8
) {

349 
íåy
->
utf_Àn
 = 
	`ngx_utf8_Àngth
”¡ry->
«me
.
d©a
,É¡ry->«me.
Àn
);

351 
íåy
->
utf_Àn
 = 
Àn
;

354 
íåy
->
dú
 = 
	`ngx_de_is_dú
(&dir);

355 
íåy
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

356 
íåy
->
size
 = 
	`ngx_de_size
(&
dú
);

359 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

361 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

364 
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

366 
Àn
 = (
tôÀ
) - 1

367 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


368 + (
hódî
) - 1

369 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


371 + ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1

373 + (
èû
) - 1;

375 
íåy
 = 
íåõs
.
ñts
;

376 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

377 
Àn
 += ("<a href=\"") - 1

378 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


381 + 
íåy
[
i
].
«me
.
Àn
 -É¡ry[i].
utf_Àn


382 + 
íåy
[
i
].
esˇ≥_html


383 + 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + ("&gt;") - 2

390 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

391 i‡(
b
 =
NULL
) {

392  
NGX_ERROR
;

395 i‡(
íåõs
.
√…s
 > 1) {

396 
	`ngx_qs‹t
(
íåy
, (
size_t
Ë
íåõs
.
√…s
,

397 (
ngx_hâp_autoödex_íåy_t
),

398 
ngx_hâp_autoödex_cmp_íåõs
);

401 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
tôÀ
, (title) - 1);

403 i‡(
esˇ≥_html
) {

404 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

405 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

406 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

409 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

410 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

411 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

414 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</h1>", ("</h1>") - 1);

416 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
,

417 ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1);

419 
ç
 = 
	`ngx_timeofday
();

421 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

422 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "<a href=\"", ("<a href=\"") - 1);

424 i‡(
íåy
[
i
].
esˇ≥
) {

425 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
íåy
[
i
].
«me
.
d©a
,É¡ry[i].«me.
Àn
,

426 
NGX_ESCAPE_URI_COMPONENT
);

428 
b
->
œ°
 +
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥
;

431 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

432 
íåy
[
i
].
«me
.
Àn
);

435 i‡(
íåy
[
i
].
dú
) {

436 *
b
->
œ°
++ = '/';

439 *
b
->
œ°
++ = '"';

440 *
b
->
œ°
++ = '>';

442 
Àn
 = 
íåy
[
i
].
utf_Àn
;

444 i‡(
íåy
[
i
].
«me
.
Àn
 !=Üen) {

445 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

446 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3 + 1;

449 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1;

452 
œ°
 = 
b
->last;

453 
b
->
œ°
 = 
	`ngx_utf8_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

454 
ch¨_Àn
, 
íåy
[
i
].
«me
.
Àn
 + 1);

456 i‡(
íåy
[
i
].
esˇ≥_html
) {

457 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
÷a°, 
íåy
[
i
].
«me
.
d©a
,

458 
b
->
œ°
 -Üast);

461 
œ°
 = 
b
->last;

464 i‡(
íåy
[
i
].
esˇ≥_html
) {

465 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

466 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3;

469 
ch¨_Àn
 = 
Àn
;

472 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->last,

473 
íåy
[
i
].
«me
.
d©a
, 
ch¨_Àn
);

474 
œ°
 = 
b
->last;

477 
b
->
œ°
 = 
	`ngx_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

478 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1);

479 
œ°
 = 
b
->last - 3;

483 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

484 
b
->
œ°
 = 
	`ngx_˝ymem
(last, "..&gt;</a>", ("..&gt;</a>") - 1);

487 i‡(
íåy
[
i
].
dú
 && 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

488 *
b
->
œ°
++ = '/';

489 
Àn
++;

492 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</a>", ("</a>") - 1);

494 i‡(
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

495 
	`ngx_mem£t
(
b
->
œ°
, ' ', 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
);

496 
b
->
œ°
 +
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
;

500 *
b
->
œ°
++ = ' ';

502 
	`ngx_gmtime
(
íåy
[
i
].
mtime
 + 
ç
->
gmtoff
 * 60 * 
Æcf
->
loˇ…ime
, &
tm
);

504 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%02d-%s-%d %02d:%02d ",

505 
tm
.
ngx_tm_mday
,

506 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

507 
tm
.
ngx_tm_yór
,

508 
tm
.
ngx_tm_hour
,

509 
tm
.
ngx_tm_mö
);

511 i‡(
Æcf
->
exa˘_size
) {

512 i‡(
íåy
[
i
].
dú
) {

513 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

516 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%19O", 
íåy
[
i
].
size
);

520 i‡(
íåy
[
i
].
dú
) {

521 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

525 
Àngth
 = 
íåy
[
i
].
size
;

527 i‡(
Àngth
 > 1024 * 1024 * 1024 - 1) {

528 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024 * 1024));

529 i‡((
Àngth
 % (1024 * 1024 * 1024))

532 
size
++;

534 
sˇÀ
 = 'G';

536 } i‡(
Àngth
 > 1024 * 1024 - 1) {

537 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024));

538 i‡((
Àngth
 % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {

539 
size
++;

541 
sˇÀ
 = 'M';

543 } i‡(
Àngth
 > 9999) {

544 
size
 = (
ngx_öt_t
Ë(
Àngth
 / 1024);

545 i‡(
Àngth
 % 1024 > 511) {

546 
size
++;

548 
sˇÀ
 = 'K';

551 
size
 = (
ngx_öt_t
Ë
Àngth
;

552 
sˇÀ
 = '\0';

555 i‡(
sˇÀ
) {

556 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%6i%c", 
size
, 
sˇÀ
);

559 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %6i", 
size
);

564 *
b
->
œ°
++ = 
CR
;

565 *
b
->
œ°
++ = 
LF
;

570 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</pre><hr>", ("</pre><hr>") - 1);

572 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

574 i‡(
r
 =r->
maö
) {

575 
b
->
œ°_buf
 = 1;

578 
b
->
œ°_ö_chaö
 = 1;

580 
out
.
buf
 = 
b
;

581 
out
.
√xt
 = 
NULL
;

583  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

584 
	}
}

587 
ngx_libc_cde˛


588 
	$ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
, c⁄° *
two
)

590 
ngx_hâp_autoödex_íåy_t
 *
fú°
 = (ngx_hâp_autoödex_íåy_à*Ë
⁄e
;

591 
ngx_hâp_autoödex_íåy_t
 *
£c⁄d
 = (ngx_hâp_autoödex_íåy_à*Ë
two
;

593 i‡(
fú°
->
dú
 && !
£c⁄d
->dir) {

598 i‡(!
fú°
->
dú
 && 
£c⁄d
->dir) {

603  (Ë
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

604 
	}
}

609 
ngx_buf_t
 *

610 
	$ngx_hâp_autoödex_Æloc
(
ngx_hâp_autoödex_˘x_t
 *
˘x
, 
size_t
 
size
)

612 
ngx_chaö_t
 *
˛
;

614 i‡(
˘x
->
buf
) {

616 i‡((
size_t
Ë(
˘x
->
buf
->
íd
 - ctx->buf->
œ°
Ë>
size
) {

617  
˘x
->
buf
;

620 
˘x
->
size
 +˘x->
buf
->
œ°
 - ctx->buf->
pos
;

623 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, ctx->
Æloc_size
);

624 i‡(
˘x
->
buf
 =
NULL
) {

625  
NULL
;

628 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

629 i‡(
˛
 =
NULL
) {

630  
NULL
;

633 
˛
->
buf
 = 
˘x
->buf;

634 
˛
->
√xt
 = 
NULL
;

636 *
˘x
->
œ°_out
 = 
˛
;

637 
˘x
->
œ°_out
 = &
˛
->
√xt
;

639  
˘x
->
buf
;

640 
	}
}

645 
ngx_öt_t


646 
	$ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
)

648 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

650 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

653  
r
->
hódî_£¡
 ? 
NGX_ERROR
 : 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

654 
	}
}

658 
	$ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

660 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
;

662 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_autoödex_loc_c⁄f_t
));

663 i‡(
c⁄f
 =
NULL
) {

664  
NULL
;

667 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

668 
c⁄f
->
loˇ…ime
 = 
NGX_CONF_UNSET
;

669 
c⁄f
->
exa˘_size
 = 
NGX_CONF_UNSET
;

671  
c⁄f
;

672 
	}
}

676 
	$ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

678 
ngx_hâp_autoödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

679 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

681 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

682 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
loˇ…ime
, 
¥ev
->localtime, 0);

683 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
exa˘_size
, 
¥ev
->exact_size, 1);

685  
NGX_CONF_OK
;

686 
	}
}

689 
ngx_öt_t


690 
	$ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
)

692 
ngx_hâp_h™dÀr_±
 *
h
;

693 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

695 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

697 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

698 i‡(
h
 =
NULL
) {

699  
NGX_ERROR
;

702 *
h
 = 
ngx_hâp_autoödex_h™dÀr
;

704  
NGX_OK
;

705 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_browser_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_MODERN_BROWSER
 0

	)

21 
	#NGX_HTTP_ANCIENT_BROWSER
 1

	)

25 
u_ch¨
 
	mbrow£r
[12];

26 
size_t
 
	mskù
;

27 
size_t
 
	madd
;

28 
u_ch¨
 
	m«me
[12];

29 } 
	tngx_hâp_modîn_brow£r_mask_t
;

33 
ngx_uöt_t
 
	mvîsi⁄
;

34 
size_t
 
	mskù
;

35 
size_t
 
	madd
;

36 
u_ch¨
 
	m«me
[12];

37 } 
	tngx_hâp_modîn_brow£r_t
;

41 
ngx_°r_t
 
	m«me
;

42 
ngx_hâp_gë_v¨übÀ_±
 
	mh™dÀr
;

43 
uöçå_t
 
	md©a
;

44 } 
	tngx_hâp_brow£r_v¨übÀ_t
;

48 
ngx_¨øy_t
 *
	mmodîn_brow£rs
;

49 
ngx_¨øy_t
 *
	m™cõ¡_brow£rs
;

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mmodîn_brow£r_vÆue
;

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m™cõ¡_brow£r_vÆue
;

53 
	mmodîn_u∆i°ed_brow£rs
:1;

54 
	m√tsˇ≥4
:1;

55 } 
	tngx_hâp_brow£r_c⁄f_t
;

58 
ngx_öt_t
 
ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_uöt_t
 
ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_brow£r_c⁄f_t
 *
cf
);

66 
ngx_öt_t
 
ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
);

67 *
ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

69 *
chûd
);

70 
ngx_libc_cde˛
 
ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
,

71 c⁄° *
two
);

72 *
ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 *
ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

78 *
ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

79 *
c⁄f
);

82 
ngx_comm™d_t
 
	gngx_hâp_brow£r_comm™ds
[] = {

84 { 
ngx_°rög
("modern_browser"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

86 
ngx_hâp_modîn_brow£r
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("ancient_browser"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

93 
ngx_hâp_™cõ¡_brow£r
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

96 
NULL
 },

98 { 
ngx_°rög
("modern_browser_value"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_hâp_modîn_brow£r_vÆue
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
NULL
 },

105 { 
ngx_°rög
("ancient_browser_value"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_hâp_™cõ¡_brow£r_vÆue
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
NULL
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ_˘x
 = {

117 
ngx_hâp_brow£r_add_v¨übÀ
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
NULL
,

124 
NULL
,

126 
ngx_hâp_brow£r_¸óã_c⁄f
,

127 
ngx_hâp_brow£r_mîge_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_brow£r_moduÀ_˘x
,

134 
ngx_hâp_brow£r_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_hâp_modîn_brow£r_mask_t
 
	gngx_hâp_modîn_brow£r_masks
[] = {

221 
ngx_hâp_brow£r_v¨übÀ_t
 
	gngx_hâp_brow£rs
[] = {

222 { 
ngx_°rög
("msõ"), 
ngx_hâp_msõ_v¨übÀ
, 0 },

223 { 
ngx_°rög
("modîn_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

224 
NGX_HTTP_MODERN_BROWSER
 },

225 { 
ngx_°rög
("™cõ¡_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

226 
NGX_HTTP_ANCIENT_BROWSER
 },

227 { 
ngx_nuŒ_°rög
, 
NULL
, 0 }

231 
ngx_öt_t


232 
	$ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

233 
uöçå_t
 
d©a
)

235 
ngx_uöt_t
 
rc
;

236 
ngx_hâp_brow£r_c⁄f_t
 *
cf
;

238 
cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_brow£r_moduÀ
);

240 
rc
 = 
	`ngx_hâp_brow£r
(
r
, 
cf
);

242 i‡(
d©a
 =
NGX_HTTP_MODERN_BROWSER
 && 
rc
 == NGX_HTTP_MODERN_BROWSER) {

243 *
v
 = *
cf
->
modîn_brow£r_vÆue
;

244  
NGX_OK
;

247 i‡(
d©a
 =
NGX_HTTP_ANCIENT_BROWSER
 && 
rc
 == NGX_HTTP_ANCIENT_BROWSER) {

248 *
v
 = *
cf
->
™cõ¡_brow£r_vÆue
;

249  
NGX_OK
;

252 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

253  
NGX_OK
;

254 
	}
}

257 
ngx_uöt_t


258 
	$ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_brow£r_c⁄f_t
 *
cf
)

260 
size_t
 
Àn
;

261 
u_ch¨
 *
«me
, *
ua
, *
œ°
, 
c
;

262 
ngx_°r_t
 *
™cõ¡
;

263 
ngx_uöt_t
 
i
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

264 
ngx_hâp_modîn_brow£r_t
 *
modîn
;

266 i‡(
r
->
hódîs_ö
.
u£r_agít
 =
NULL
) {

267 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

268  
NGX_HTTP_MODERN_BROWSER
;

271  
NGX_HTTP_ANCIENT_BROWSER
;

274 
ua
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.
d©a
;

275 
Àn
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.len;

276 
œ°
 = 
ua
 + 
Àn
;

278 i‡(
cf
->
modîn_brow£rs
) {

279 
modîn
 = 
cf
->
modîn_brow£rs
->
ñts
;

281 
i
 = 0; i < 
cf
->
modîn_brow£rs
->
√…s
; i++) {

282 
«me
 = 
ua
 + 
modîn
[
i
].
skù
;

284 i‡(
«me
 >
œ°
) {

288 
«me
 = (
u_ch¨
 *Ë
	`ngx_°r°r
“ame, 
modîn
[
i
].name);

290 i‡(
«me
 =
NULL
) {

294 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

295 "brow£r: \"%s\"", 
«me
);

297 
«me
 +
modîn
[
i
].
add
;

299 i‡(
«me
 >
œ°
) {

303 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

304 "vîsi⁄: \"%ui\" \"%s\"", 
modîn
[
i
].
vîsi⁄
, 
«me
);

306 
vîsi⁄
 = 0;

307 
vî
 = 0;

308 
sˇÀ
 = 1000000;

310 
«me
 < 
œ°
) {

312 
c
 = *
«me
++;

314 i‡(
c
 >= '0' && c <= '9') {

315 
vî
 = vî * 10 + (
c
 - '0');

319 i‡(
c
 == '.') {

320 
vîsi⁄
 +
vî
 * 
sˇÀ
;

322 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

324 
modîn
[
i
].
vîsi⁄
, version);

326 i‡(
vîsi⁄
 > 
modîn
[
i
].version) {

327  
NGX_HTTP_MODERN_BROWSER
;

330 
vî
 = 0;

331 
sˇÀ
 /= 100;

338 
vîsi⁄
 +
vî
 * 
sˇÀ
;

340 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 
modîn
[
i
].
vîsi⁄
, version);

344 i‡(
vîsi⁄
 >
modîn
[
i
].version) {

345  
NGX_HTTP_MODERN_BROWSER
;

348  
NGX_HTTP_ANCIENT_BROWSER
;

351 i‡(!
cf
->
modîn_u∆i°ed_brow£rs
) {

352  
NGX_HTTP_ANCIENT_BROWSER
;

356 i‡(
cf
->
√tsˇ≥4
) {

357 i‡(
Àn
 > ("Mozilla/4.72 ") - 1

358 && 
	`ngx_°∫cmp
(
ua
, "Mozilla/", ("Mozilla/") - 1) == 0

359 && 
ua
[8] > '0' && ua[8] < '5')

361  
NGX_HTTP_ANCIENT_BROWSER
;

365 i‡(
cf
->
™cõ¡_brow£rs
) {

366 
™cõ¡
 = 
cf
->
™cõ¡_brow£rs
->
ñts
;

368 
i
 = 0; i < 
cf
->
™cõ¡_brow£rs
->
√…s
; i++) {

369 i‡(
Àn
 >
™cõ¡
[
i
].len

370 && 
	`ngx_°r°r
(
ua
, 
™cõ¡
[
i
].
d©a
Ë!
NULL
)

372  
NGX_HTTP_ANCIENT_BROWSER
;

377 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

378  
NGX_HTTP_MODERN_BROWSER
;

381  
NGX_HTTP_ANCIENT_BROWSER
;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

387 
uöçå_t
 
d©a
)

389 i‡(
r
->
hódîs_ö
.
msõ
) {

390 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

391  
NGX_OK
;

394 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

395  
NGX_OK
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
)

402 
ngx_hâp_brow£r_v¨übÀ_t
 *
v¨
;

403 
ngx_hâp_v¨übÀ_t
 *
v
;

405 
v¨
 = 
ngx_hâp_brow£rs
; v¨->
«me
.
Àn
; var++) {

407 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v¨
->
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

408 i‡(
v
 =
NULL
) {

409  
NGX_ERROR
;

412 
v
->
gë_h™dÀr
 = 
v¨
->
h™dÀr
;

413 
v
->
d©a
 = 
v¨
->data;

416  
NGX_OK
;

417 
	}
}

421 
	$ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

423 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
;

425 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_brow£r_c⁄f_t
));

426 i‡(
c⁄f
 =
NULL
) {

427  
NULL
;

442  
c⁄f
;

443 
	}
}

447 
	$ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

449 
ngx_hâp_brow£r_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

450 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
 = 
chûd
;

452 
ngx_uöt_t
 
i
, 
n
;

453 
ngx_hâp_modîn_brow£r_t
 *
brow£rs
, *
›îa
;

461 i‡(
c⁄f
->
modîn_brow£rs
 =
NULL
 && c⁄f->
modîn_u∆i°ed_brow£rs
 == 0) {

462 
c⁄f
->
modîn_brow£rs
 = 
¥ev
->modern_browsers;

463 
c⁄f
->
modîn_u∆i°ed_brow£rs
 = 
¥ev
->modern_unlisted_browsers;

465 } i‡(
c⁄f
->
modîn_brow£rs
 !
NULL
) {

466 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

468 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

469 i‡(
brow£rs
[
i
].
skù
 == 0) {

470 
found
;

479 
›îa
 = 
	`ngx_¨øy_push
(
c⁄f
->
modîn_brow£rs
);

480 i‡(
›îa
 =
NULL
) {

481  
NGX_CONF_ERROR
;

484 
›îa
->
skù
 = 0;

485 
›îa
->
vîsi⁄
 = 4001000000U;

487 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

489 
found
:

491 
	`ngx_qs‹t
(
brow£rs
, (
size_t
Ë
c⁄f
->
modîn_brow£rs
->
√…s
,

492 (
ngx_hâp_modîn_brow£r_t
),

493 
ngx_hâp_modîn_brow£r_s‹t
);

495 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

496 
n
 = 
brow£rs
[
i
].
skù
;

498 
brow£rs
[
i
].
skù
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].skip;

499 
brow£rs
[
i
].
add
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].add;

500 (Ë
	`ngx_˝y°∫
(
brow£rs
[
i
].
«me
,

501 
ngx_hâp_modîn_brow£r_masks
[
n
].
«me
, 12);

505 i‡(
c⁄f
->
™cõ¡_brow£rs
 =
NULL
 && c⁄f->
√tsˇ≥4
 == 0) {

506 
c⁄f
->
™cõ¡_brow£rs
 = 
¥ev
->ancient_browsers;

507 
c⁄f
->
√tsˇ≥4
 = 
¥ev
->netscape4;

510 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

511 
c⁄f
->
modîn_brow£r_vÆue
 = 
¥ev
->modern_browser_value;

514 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

515 
c⁄f
->
modîn_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

518 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

519 
c⁄f
->
™cõ¡_brow£r_vÆue
 = 
¥ev
->ancient_browser_value;

522 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

523 
c⁄f
->
™cõ¡_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

526  
NGX_CONF_OK
;

527 
	}
}

530 
ngx_libc_cde˛


531 
	$ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
, c⁄° *
two
)

533 
ngx_hâp_modîn_brow£r_t
 *
fú°
 = (ngx_hâp_modîn_brow£r_à*Ë
⁄e
;

534 
ngx_hâp_modîn_brow£r_t
 *
£c⁄d
 = (ngx_hâp_modîn_brow£r_à*Ë
two
;

536  (
fú°
->
skù
 - 
£c⁄d
->skip);

537 
	}
}

541 
	$ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

543 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

545 
u_ch¨
 
c
;

546 
ngx_°r_t
 *
vÆue
;

547 
ngx_uöt_t
 
i
, 
n
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

548 
ngx_hâp_modîn_brow£r_t
 *
brow£r
;

549 
ngx_hâp_modîn_brow£r_mask_t
 *
mask
;

551 
vÆue
 = 
cf
->
¨gs
->
ñts
;

553 i‡(
cf
->
¨gs
->
√…s
 == 2) {

554 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unlisted") == 0) {

555 
bcf
->
modîn_u∆i°ed_brow£rs
 = 1;

556  
NGX_CONF_OK
;

559  
NGX_CONF_ERROR
;

562 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

563 
bcf
->
modîn_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 5,

564 (
ngx_hâp_modîn_brow£r_t
));

565 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

566  
NGX_CONF_ERROR
;

570 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
modîn_brow£rs
);

571 i‡(
brow£r
 =
NULL
) {

572  
NGX_CONF_ERROR
;

575 
mask
 = 
ngx_hâp_modîn_brow£r_masks
;

577 
n
 = 0; 
mask
[n].
brow£r
[0] != '\0';Ç++) {

578 i‡(
	`ngx_°rˇ£cmp
(
mask
[
n
].
brow£r
, 
vÆue
[1].
d©a
) == 0) {

579 
found
;

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 "unknow¿brow£∏«mê\"%V\"", &
vÆue
[1]);

586  
NGX_CONF_ERROR
;

588 
found
:

596 
brow£r
->
skù
 = 
n
;

598 
vîsi⁄
 = 0;

599 
vî
 = 0;

600 
sˇÀ
 = 1000000;

602 
i
 = 0; i < 
vÆue
[2].
Àn
; i++) {

604 
c
 = 
vÆue
[2].
d©a
[
i
];

606 i‡(
c
 >= '0' && c <= '9') {

607 
vî
 = vî * 10 + (
c
 - '0');

611 i‡(
c
 == '.') {

612 
vîsi⁄
 +
vî
 * 
sˇÀ
;

613 
vî
 = 0;

614 
sˇÀ
 /= 100;

618 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

619 "övÆid brow£∏vîsi⁄ \"%V\"", &
vÆue
[2]);

621  
NGX_CONF_ERROR
;

624 
vîsi⁄
 +
vî
 * 
sˇÀ
;

626 
brow£r
->
vîsi⁄
 = version;

628  
NGX_CONF_OK
;

629 
	}
}

633 
	$ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

635 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

637 
ngx_°r_t
 *
vÆue
, *
brow£r
;

638 
ngx_uöt_t
 
i
;

640 
vÆue
 = 
cf
->
¨gs
->
ñts
;

642 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

643 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "netscape4") == 0) {

644 
bcf
->
√tsˇ≥4
 = 1;

648 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

649 
bcf
->
™cõ¡_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

650 (
ngx_°r_t
));

651 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

652  
NGX_CONF_ERROR
;

656 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
™cõ¡_brow£rs
);

657 i‡(
brow£r
 =
NULL
) {

658  
NGX_CONF_ERROR
;

661 *
brow£r
 = 
vÆue
[
i
];

664  
NGX_CONF_OK
;

665 
	}
}

669 
	$ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

671 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

673 
ngx_°r_t
 *
vÆue
;

675 
bcf
->
modîn_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

676 (
ngx_hâp_v¨übÀ_vÆue_t
));

677 i‡(
bcf
->
modîn_brow£r_vÆue
 =
NULL
) {

678  
NGX_CONF_ERROR
;

681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

683 
bcf
->
modîn_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

684 
bcf
->
modîn_brow£r_vÆue
->
vÆid
 = 1;

685 
bcf
->
modîn_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

686 
bcf
->
modîn_brow£r_vÆue
->
nŸ_found
 = 0;

687 
bcf
->
modîn_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

689  
NGX_CONF_OK
;

690 
	}
}

694 
	$ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

696 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

698 
ngx_°r_t
 *
vÆue
;

700 
bcf
->
™cõ¡_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

701 (
ngx_hâp_v¨übÀ_vÆue_t
));

702 i‡(
bcf
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

703  
NGX_CONF_ERROR
;

706 
vÆue
 = 
cf
->
¨gs
->
ñts
;

708 
bcf
->
™cõ¡_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

709 
bcf
->
™cõ¡_brow£r_vÆue
->
vÆid
 = 1;

710 
bcf
->
™cõ¡_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

711 
bcf
->
™cõ¡_brow£r_vÆue
->
nŸ_found
 = 0;

712 
bcf
->
™cõ¡_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

714  
NGX_CONF_OK
;

715 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_charset_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_CHARSET_OFF
 -2

	)

14 
	#NGX_HTTP_NO_CHARSET
 -3

	)

15 
	#NGX_HTTP_CHARSET_VAR
 0x10000

	)

18 
	#NGX_UTF_LEN
 4

	)

20 
	#NGX_HTML_ENTITY_LEN
 (("&#1114111;"Ë- 1)

	)

24 
u_ch¨
 **
	mèbÀs
;

25 
ngx_°r_t
 
	m«me
;

27 
	mÀngth
:16;

28 
	mutf8
:1;

29 } 
	tngx_hâp_ch¨£t_t
;

33 
ngx_öt_t
 
	m§c
;

34 
ngx_öt_t
 
	md°
;

35 } 
	tngx_hâp_ch¨£t_ªcode_t
;

39 
ngx_öt_t
 
	m§c
;

40 
ngx_öt_t
 
	md°
;

41 
u_ch¨
 *
	m§c2d°
;

42 
u_ch¨
 *
	md°2§c
;

43 } 
	tngx_hâp_ch¨£t_èbÀs_t
;

47 
ngx_¨øy_t
 
	mch¨£ts
;

48 
ngx_¨øy_t
 
	mèbÀs
;

49 
ngx_¨øy_t
 
	mªcodes
;

50 } 
	tngx_hâp_ch¨£t_maö_c⁄f_t
;

54 
ngx_öt_t
 
	mch¨£t
;

55 
ngx_öt_t
 
	msour˚_ch¨£t
;

56 
ngx_Êag_t
 
	movîride_ch¨£t
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 } 
	tngx_hâp_ch¨£t_loc_c⁄f_t
;

64 
u_ch¨
 *
	mèbÀ
;

65 
ngx_öt_t
 
	mch¨£t
;

66 
ngx_°r_t
 
	mch¨£t_«me
;

68 
ngx_chaö_t
 *
	mbusy
;

69 
ngx_chaö_t
 *
	m‰ì_bufs
;

70 
ngx_chaö_t
 *
	m‰ì_buf„rs
;

72 
size_t
 
	mßved_Àn
;

73 
u_ch¨
 
	mßved
[
NGX_UTF_LEN
];

75 
	mÀngth
:16;

76 
	m‰om_utf8
:1;

77 
	mto_utf8
:1;

78 } 
	tngx_hâp_ch¨£t_˘x_t
;

82 
ngx_hâp_ch¨£t_èbÀs_t
 *
	mèbÀ
;

83 
ngx_hâp_ch¨£t_t
 *
	mch¨£t
;

84 
ngx_uöt_t
 
	mch¨a˘îs
;

85 } 
	tngx_hâp_ch¨£t_c⁄f_˘x_t
;

88 
ngx_öt_t
 
ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_°r_t
 *
«me
);

90 
ngx_öt_t
 
ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_°r_t
 *
«me
);

92 
ngx_öt_t
 
ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_°r_t
 *
«me
);

94 
ngx_öt_t
 
ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

95 
ngx_ölöe
 
ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_°r_t
 *
ch¨£t
);

97 
ngx_öt_t
 
ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
, 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
);

99 
ngx_uöt_t
 
ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
);

100 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

101 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

102 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

103 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

105 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
,

106 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

107 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
,

108 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
, 
size_t
 
size
);

110 *
ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

111 *
c⁄f
);

112 *
ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

113 *
c⁄f
);

115 *
ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

116 *
c⁄f
);

117 
ngx_öt_t
 
ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
);

119 *
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

120 *
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

121 *
ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

122 *
∑ª¡
, *
chûd
);

123 
ngx_öt_t
 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

126 
ngx_°r_t
 
	gngx_hâp_ch¨£t_deÁu…_ty≥s
[] = {

127 
ngx_°rög
("text/html"),

128 
ngx_°rög
("text/xml"),

129 
ngx_°rög
("text/plain"),

130 
ngx_°rög
("text/vnd.wap.wml"),

131 
ngx_°rög
("application/javascript"),

132 
ngx_°rög
("application/rss+xml"),

133 
ngx_nuŒ_°rög


137 
ngx_comm™d_t
 
	gngx_hâp_ch¨£t_fûãr_comm™ds
[] = {

139 { 
ngx_°rög
("charset"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


141 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

142 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
),

145 
NULL
 },

147 { 
ngx_°rög
("source_charset"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


149 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
sour˚_ch¨£t
),

153 
NULL
 },

155 { 
ngx_°rög
("override_charset"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


157 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

158 
ngx_c⁄f_£t_Êag_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ovîride_ch¨£t
),

161 
NULL
 },

163 { 
ngx_°rög
("charset_types"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

165 
ngx_hâp_ty≥s_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ty≥s_keys
),

168 &
ngx_hâp_ch¨£t_deÁu…_ty≥s
[0] },

170 { 
ngx_°rög
("charset_map"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

172 
ngx_hâp_ch¨£t_m≠_block
,

173 
NGX_HTTP_MAIN_CONF_OFFSET
,

175 
NULL
 },

177 
ngx_nuŒ_comm™d


181 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ_˘x
 = {

182 
NULL
,

183 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
,

185 
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
,

186 
NULL
,

188 
NULL
,

189 
NULL
,

191 
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
,

192 
ngx_hâp_ch¨£t_mîge_loc_c⁄f


196 
ngx_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ
 = {

197 
NGX_MODULE_V1
,

198 &
ngx_hâp_ch¨£t_fûãr_moduÀ_˘x
,

199 
ngx_hâp_ch¨£t_fûãr_comm™ds
,

200 
NGX_HTTP_MODULE
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NGX_MODULE_V1_PADDING


212 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

213 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

216 
ngx_öt_t


217 
	$ngx_hâp_ch¨£t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

219 
ngx_öt_t
 
ch¨£t
, 
sour˚_ch¨£t
;

220 
ngx_°r_t
 
d°
, 
§c
;

221 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

222 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

224 i‡(
r
 =r->
maö
) {

225 
ch¨£t
 = 
	`ngx_hâp_de°ö©i⁄_ch¨£t
(
r
, &
d°
);

228 
ch¨£t
 = 
	`ngx_hâp_maö_ªque°_ch¨£t
(
r
, &
d°
);

231 i‡(
ch¨£t
 =
NGX_ERROR
) {

232  
NGX_ERROR
;

235 i‡(
ch¨£t
 =
NGX_DECLINED
) {

236  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

241 
sour˚_ch¨£t
 = 
	`ngx_hâp_sour˚_ch¨£t
(
r
, &
§c
);

243 i‡(
sour˚_ch¨£t
 =
NGX_ERROR
) {

244  
NGX_ERROR
;

252 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

253 "ch¨£t: \"%V\" > \"%V\"", &
§c
, &
d°
);

255 i‡(
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

256 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

258  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

261 i‡(
ch¨£t
 =
NGX_HTTP_NO_CHARSET


262 || 
sour˚_ch¨£t
 =
NGX_HTTP_NO_CHARSET
)

264 i‡(
sour˚_ch¨£t
 !
ch¨£t


265 || 
	`ngx_°∫ˇ£cmp
(
d°
.
d©a
, 
§c
.d©a, d°.
Àn
) != 0)

267 
no_ch¨£t_m≠
;

270 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

272  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

275 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

276 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

278 i‡(
sour˚_ch¨£t
 !
ch¨£t


279 && (
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
 =
NULL


280 || 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
] =
NULL
))

282 
no_ch¨£t_m≠
;

285 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

287 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

289 i‡(
sour˚_ch¨£t
 !
ch¨£t
) {

290  
	`ngx_hâp_ch¨£t_˘x
(
r
, 
ch¨£ts
, 
ch¨£t
, 
sour˚_ch¨£t
);

293  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

295 
no_ch¨£t_m≠
:

297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

299 &
§c
, &
d°
);

301  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

308 
ngx_öt_t
 
ch¨£t
;

309 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

310 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

311 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
mlcf
;

312 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

314 i‡(!
r
->
ign‹e_c⁄ã¡_ícodög


315 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög


316 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

318  
NGX_DECLINED
;

321 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

322  
NGX_DECLINED
;

325 i‡(
r
->
hódîs_out
.
ovîride_ch¨£t


326 && 
r
->
hódîs_out
.
ovîride_ch¨£t
->
Àn
)

328 *
«me
 = *
r
->
hódîs_out
.
ovîride_ch¨£t
;

330 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

332 i‡(
ch¨£t
 !
NGX_HTTP_NO_CHARSET
) {

333  
ch¨£t
;

336 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

337 "unknow¿ch¨£à\"%V\"Åÿovîride", 
«me
);

339  
NGX_DECLINED
;

342 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

343 
ch¨£t
 = 
mlcf
->charset;

345 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

346  
NGX_DECLINED
;

349 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

350 i‡(
mlcf
->
ovîride_ch¨£t
 == 0) {

351  
NGX_DECLINED
;

355 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
mlcf
->
ty≥s
Ë=
NULL
) {

356  
NGX_DECLINED
;

360 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

361 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

362 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

363 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

364  
ch¨£t
;

367 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

369 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

370  
NGX_ERROR
;

373 
«me
->
Àn
 = 
vv
->len;

374 
«me
->
d©a
 = 
vv
->data;

376  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

377 
	}
}

380 
ngx_öt_t


381 
	$ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
§c
)

383 
ngx_öt_t
 
ch¨£t
;

384 
ngx_°r_t
 *
maö_ch¨£t
;

385 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

387 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

389 i‡(
˘x
) {

390 *
§c
 = 
˘x
->
ch¨£t_«me
;

391  
˘x
->
ch¨£t
;

394 
maö_ch¨£t
 = &
r
->
maö
->
hódîs_out
.
ch¨£t
;

396 i‡(
maö_ch¨£t
->
Àn
 == 0) {

397  
NGX_DECLINED
;

400 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

401 i‡(
˘x
 =
NULL
) {

402  
NGX_ERROR
;

405 
	`ngx_hâp_£t_˘x
(
r
->
maö
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

407 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
maö_ch¨£t
);

409 
˘x
->
ch¨£t
 = charset;

410 
˘x
->
ch¨£t_«me
 = *
maö_ch¨£t
;

411 *
§c
 = *
maö_ch¨£t
;

413  
ch¨£t
;

414 
	}
}

417 
ngx_öt_t


418 
	$ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

420 
ngx_öt_t
 
ch¨£t
;

421 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

422 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

423 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

424 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

426 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

427 *
«me
 = 
r
->
hódîs_out
.
ch¨£t
;

428  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

431 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

433 
ch¨£t
 = 
lcf
->
sour˚_ch¨£t
;

435 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

436 
«me
->
Àn
 = 0;

437  
ch¨£t
;

440 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

441 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

442 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

443 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

444  
ch¨£t
;

447 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

449 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

450  
NGX_ERROR
;

453 
«me
->
Àn
 = 
vv
->len;

454 
«me
->
d©a
 = 
vv
->data;

456  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

457 
	}
}

460 
ngx_öt_t


461 
	$ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

463 
ngx_uöt_t
 
i
, 
n
;

464 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

465 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

467 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

469 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

470 
n
 = 
mcf
->
ch¨£ts
.
√…s
;

472 
i
 = 0; i < 
n
; i++) {

473 i‡(
ch¨£t
[
i
].
«me
.
Àn
 !=Çame->len) {

477 i‡(
	`ngx_°∫ˇ£cmp
(
ch¨£t
[
i
].
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0) {

478  
i
;

482  
NGX_HTTP_NO_CHARSET
;

483 
	}
}

486 
ngx_ölöe
 

487 
	$ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ch¨£t
)

489 i‡(
r
 !r->
maö
) {

493 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


494 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY
)

501 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

505 
r
->
hódîs_out
.
ch¨£t
 = *charset;

506 
	}
}

509 
ngx_öt_t


510 
	$ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
,

511 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
)

513 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

515 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

516 i‡(
˘x
 =
NULL
) {

517  
NGX_ERROR
;

520 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

522 
˘x
->
èbÀ
 = 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
];

523 
˘x
->
ch¨£t
 = charset;

524 
˘x
->
ch¨£t_«me
 = 
ch¨£ts
[
ch¨£t
].
«me
;

525 
˘x
->
Àngth
 = 
ch¨£ts
[
ch¨£t
].length;

526 
˘x
->
‰om_utf8
 = 
ch¨£ts
[
sour˚_ch¨£t
].
utf8
;

527 
˘x
->
to_utf8
 = 
ch¨£ts
[
ch¨£t
].
utf8
;

529 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

531 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë&& 
r
 =r->
maö
) {

532 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

535 
r
->
fûãr_√ed_ãmp‹¨y
 = 1;

538  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

539 
	}
}

542 
ngx_öt_t


543 
	$ngx_hâp_ch¨£t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

545 
ngx_öt_t
 
rc
;

546 
ngx_buf_t
 *
b
;

547 
ngx_chaö_t
 *
˛
, *
out
, **
Œ
;

548 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

550 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

552 i‡(
˘x
 =
NULL
 || ctx->
èbÀ
 == NULL) {

553  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

556 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë|| ctx->
busy
) {

558 
out
 = 
NULL
;

559 
Œ
 = &
out
;

561 
˛
 = 
ö
; cl; c»˛->
√xt
) {

562 
b
 = 
˛
->
buf
;

564 i‡(
	`ngx_buf_size
(
b
) == 0) {

566 *
Œ
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

567 i‡(*
Œ
 =
NULL
) {

568  
NGX_ERROR
;

571 (*
Œ
)->
buf
 = 
b
;

572 (*
Œ
)->
√xt
 = 
NULL
;

574 
Œ
 = &(*Œ)->
√xt
;

579 i‡(
˘x
->
to_utf8
) {

580 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_to_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

583 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

586 i‡(*
Œ
 =
NULL
) {

587  
NGX_ERROR
;

590 *
Œ
) {

591 
Œ
 = &(*Œ)->
√xt
;

595 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

597 i‡(
out
) {

598 i‡(
˘x
->
busy
 =
NULL
) {

599 
˘x
->
busy
 = 
out
;

602 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

603 
˛
->
√xt
 = 
out
;

607 
˘x
->
busy
) {

609 
˛
 = 
˘x
->
busy
;

610 
b
 = 
˛
->
buf
;

612 i‡(
	`ngx_buf_size
(
b
) != 0) {

616 
˘x
->
busy
 = 
˛
->
√xt
;

618 i‡(
b
->
èg
 !(
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
) {

622 i‡(
b
->
shadow
) {

623 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

626 i‡(
b
->
pos
) {

627 
˛
->
√xt
 = 
˘x
->
‰ì_buf„rs
;

628 
˘x
->
‰ì_buf„rs
 = 
˛
;

632 
˛
->
√xt
 = 
˘x
->
‰ì_bufs
;

633 
˘x
->
‰ì_bufs
 = 
˛
;

636  
rc
;

639 
˛
 = 
ö
; cl; c»˛->
√xt
) {

640 (Ë
	`ngx_hâp_ch¨£t_ªcode
(
˛
->
buf
, 
˘x
->
èbÀ
);

643  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

644 
	}
}

647 
ngx_uöt_t


648 
	$ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
)

650 
u_ch¨
 *
p
, *
œ°
;

652 
œ°
 = 
b
->last;

654 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

656 i‡(*
p
 !
èbÀ
[*p]) {

657 
ªcode
;

663 
ªcode
:

666 i‡(*
p
 !
èbÀ
[*p]) {

667 *
p
 = 
èbÀ
[*p];

670 
p
++;

672 } 
p
 < 
œ°
);

674 
b
->
ö_fûe
 = 0;

677 
	}
}

680 
ngx_chaö_t
 *

681 
	$ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

682 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

684 
size_t
 
Àn
, 
size
;

685 
u_ch¨
 
c
, *
p
, *
§c
, *
d°
, *
ßved
, **
èbÀ
;

686 
uöt32_t
 
n
;

687 
ngx_buf_t
 *
b
;

688 
ngx_uöt_t
 
i
;

689 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

691 
§c
 = 
buf
->
pos
;

693 i‡(
˘x
->
ßved_Àn
 == 0) {

695  ; 
§c
 < 
buf
->
œ°
; src++) {

697 i‡(*
§c
 < 0x80) {

701 
Àn
 = 
§c
 - 
buf
->
pos
;

703 i‡(
Àn
 > 512) {

704 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

705 i‡(
out
 =
NULL
) {

706  
NULL
;

709 
b
 = 
out
->
buf
;

711 
b
->
ãmp‹¨y
 = 
buf
->temporary;

712 
b
->
mem‹y
 = 
buf
->memory;

713 
b
->
mm≠
 = 
buf
->mmap;

714 
b
->
Êush
 = 
buf
->flush;

716 
b
->
pos
 = 
buf
->pos;

717 
b
->
œ°
 = 
§c
;

719 
out
->
buf
 = 
b
;

720 
out
->
√xt
 = 
NULL
;

722 
size
 = 
buf
->
œ°
 - 
§c
;

724 
ßved
 = 
§c
;

725 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
size
);

727 i‡(
n
 == 0xfffffffe) {

730 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
size
);

731 
˘x
->
ßved_Àn
 = 
size
;

733 
b
->
shadow
 = 
buf
;

735  
out
;

739 
out
 = 
NULL
;

740 
size
 = 
Àn
 + 
buf
->
œ°
 - 
§c
;

741 
§c
 = 
buf
->
pos
;

744 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

745 
size
 +
NGX_HTML_ENTITY_LEN
;

748 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

749 i‡(
˛
 =
NULL
) {

750  
NULL
;

753 i‡(
out
) {

754 
out
->
√xt
 = 
˛
;

757 
out
 = 
˛
;

760 
b
 = 
˛
->
buf
;

761 
d°
 = 
b
->
pos
;

763 
ªcode
;

766 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

767 i‡(
out
 =
NULL
) {

768  
NULL
;

771 
out
->
buf
 = buf;

772 
out
->
√xt
 = 
NULL
;

774  
out
;

779 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

780 "hâ∞ch¨£àut‡ßved: %z", 
˘x
->
ßved_Àn
);

782 
p
 = 
§c
;

784 
i
 = 
˘x
->
ßved_Àn
; i < 
NGX_UTF_LEN
; i++) {

785 
˘x
->
ßved
[
i
] = *
p
++;

787 i‡(
p
 =
buf
->
œ°
) {

792 
ßved
 = 
˘x
->saved;

793 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
i
);

795 
c
 = '\0';

797 i‡(
n
 < 0x10000) {

798 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

799 
p
 = 
èbÀ
[
n
 >> 8];

801 i‡(
p
) {

802 
c
 = 
p
[
n
 & 0xff];

805 } i‡(
n
 == 0xfffffffe) {

809 i‡(
i
 < 
NGX_UTF_LEN
) {

810 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

811 i‡(
out
 =
NULL
) {

812  
NULL
;

815 
b
 = 
out
->
buf
;

817 
b
->
pos
 = 
buf
->pos;

818 
b
->
œ°
 = 
buf
->last;

819 
b
->
sync
 = 1;

820 
b
->
shadow
 = 
buf
;

822 
	`ngx_mem˝y
(&
˘x
->
ßved
[˘x->
ßved_Àn
], 
§c
, 
i
);

823 
˘x
->
ßved_Àn
 +
i
;

825  
out
;

829 
size
 = 
buf
->
œ°
 - buf->
pos
;

831 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

832 
size
 +
NGX_HTML_ENTITY_LEN
;

835 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

836 i‡(
˛
 =
NULL
) {

837  
NULL
;

840 
out
 = 
˛
;

842 
b
 = 
˛
->
buf
;

843 
d°
 = 
b
->
pos
;

845 i‡(
c
) {

846 *
d°
++ = 
c
;

848 } i‡(
n
 == 0xfffffffe) {

849 *
d°
++ = '?';

851 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

854 
ßved
 = &
˘x
->ßved[
NGX_UTF_LEN
];

856 } i‡(
n
 > 0x10ffff) {

857 *
d°
++ = '?';

859 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

863 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

866 
§c
 +(
ßved
 - 
˘x
->ßvedË- ctx->
ßved_Àn
;

867 
˘x
->
ßved_Àn
 = 0;

869 
ªcode
:

871 
Œ
 = &
˛
->
√xt
;

873 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

875 
§c
 < 
buf
->
œ°
) {

877 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
NGX_HTML_ENTITY_LEN
) {

878 
b
->
œ°
 = 
d°
;

880 
size
 = 
buf
->
œ°
 - 
§c
 + 
NGX_HTML_ENTITY_LEN
;

882 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

883 i‡(
˛
 =
NULL
) {

884  
NULL
;

887 *
Œ
 = 
˛
;

888 
Œ
 = &
˛
->
√xt
;

890 
b
 = 
˛
->
buf
;

891 
d°
 = 
b
->
pos
;

894 i‡(*
§c
 < 0x80) {

895 *
d°
++ = *
§c
++;

899 
Àn
 = 
buf
->
œ°
 - 
§c
;

901 
n
 = 
	`ngx_utf8_decode
(&
§c
, 
Àn
);

903 i‡(
n
 < 0x10000) {

905 
p
 = 
èbÀ
[
n
 >> 8];

907 i‡(
p
) {

908 
c
 = 
p
[
n
 & 0xff];

910 i‡(
c
) {

911 *
d°
++ = 
c
;

916 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

921 i‡(
n
 == 0xfffffffe) {

924 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
Àn
);

925 
˘x
->
ßved_Àn
 = 
Àn
;

927 i‡(
b
->
pos
 =
d°
) {

928 
b
->
sync
 = 1;

929 
b
->
ãmp‹¨y
 = 0;

935 i‡(
n
 > 0x10ffff) {

936 *
d°
++ = '?';

938 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

946 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

949 
b
->
œ°
 = 
d°
;

951 
b
->
œ°_buf
 = 
buf
->last_buf;

952 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

953 
b
->
Êush
 = 
buf
->flush;

955 
b
->
shadow
 = 
buf
;

957  
out
;

958 
	}
}

961 
ngx_chaö_t
 *

962 
	$ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

963 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

965 
size_t
 
Àn
, 
size
;

966 
u_ch¨
 *
p
, *
§c
, *
d°
, *
èbÀ
;

967 
ngx_buf_t
 *
b
;

968 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

970 
èbÀ
 = 
˘x
->table;

972 
§c
 = 
buf
->
pos
; sr¯< buf->
œ°
; src++) {

973 i‡(
èbÀ
[*
§c
 * 
NGX_UTF_LEN
] == '\1') {

977 
ªcode
;

980 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

981 i‡(
out
 =
NULL
) {

982  
NULL
;

985 
out
->
buf
 = buf;

986 
out
->
√xt
 = 
NULL
;

988  
out
;

990 
ªcode
:

997 
Àn
 = 
§c
 - 
buf
->
pos
;

999 i‡(
Àn
 > 512) {

1000 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

1001 i‡(
out
 =
NULL
) {

1002  
NULL
;

1005 
b
 = 
out
->
buf
;

1007 
b
->
ãmp‹¨y
 = 
buf
->temporary;

1008 
b
->
mem‹y
 = 
buf
->memory;

1009 
b
->
mm≠
 = 
buf
->mmap;

1010 
b
->
Êush
 = 
buf
->flush;

1012 
b
->
pos
 = 
buf
->pos;

1013 
b
->
œ°
 = 
§c
;

1015 
out
->
buf
 = 
b
;

1016 
out
->
√xt
 = 
NULL
;

1018 
size
 = 
buf
->
œ°
 - 
§c
;

1019 
size
 = sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1022 
out
 = 
NULL
;

1024 
size
 = 
buf
->
œ°
 - 
§c
;

1025 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1027 
§c
 = 
buf
->
pos
;

1030 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1031 i‡(
˛
 =
NULL
) {

1032  
NULL
;

1035 i‡(
out
) {

1036 
out
->
√xt
 = 
˛
;

1039 
out
 = 
˛
;

1042 
Œ
 = &
˛
->
√xt
;

1044 
b
 = 
˛
->
buf
;

1045 
d°
 = 
b
->
pos
;

1047 
§c
 < 
buf
->
œ°
) {

1049 
p
 = &
èbÀ
[*
§c
++ * 
NGX_UTF_LEN
];

1050 
Àn
 = *
p
++;

1052 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
Àn
) {

1053 
b
->
œ°
 = 
d°
;

1055 
size
 = 
buf
->
œ°
 - 
§c
;

1056 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1058 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1059 i‡(
˛
 =
NULL
) {

1060  
NULL
;

1063 *
Œ
 = 
˛
;

1064 
Œ
 = &
˛
->
√xt
;

1066 
b
 = 
˛
->
buf
;

1067 
d°
 = 
b
->
pos
;

1070 
Àn
) {

1071 *
d°
++ = *
p
++;

1072 
Àn
--;

1076 
b
->
œ°
 = 
d°
;

1078 
b
->
œ°_buf
 = 
buf
->last_buf;

1079 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

1080 
b
->
Êush
 = 
buf
->flush;

1082 
b
->
shadow
 = 
buf
;

1084  
out
;

1085 
	}
}

1088 
ngx_chaö_t
 *

1089 
	$ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

1091 
ngx_chaö_t
 *
˛
;

1093 
˛
 = 
˘x
->
‰ì_bufs
;

1095 i‡(
˛
) {

1096 
˘x
->
‰ì_bufs
 = 
˛
->
√xt
;

1098 
˛
->
buf
->
shadow
 = 
NULL
;

1099 
˛
->
√xt
 = 
NULL
;

1101  
˛
;

1104 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1105 i‡(
˛
 =
NULL
) {

1106  
NULL
;

1109 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

1110 i‡(
˛
->
buf
 =
NULL
) {

1111  
NULL
;

1114 
˛
->
√xt
 = 
NULL
;

1116 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1118  
˛
;

1119 
	}
}

1122 
ngx_chaö_t
 *

1123 
	$ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
,

1124 
size_t
 
size
)

1126 
ngx_buf_t
 *
b
;

1127 
ngx_chaö_t
 *
˛
, **
Œ
;

1129 
Œ
 = &
˘x
->
‰ì_buf„rs
, 
˛
 = ctx->free_buffers;

1130 
˛
;

1131 
Œ
 = &
˛
->
√xt
, cl = cl->next)

1133 
b
 = 
˛
->
buf
;

1135 i‡((
size_t
Ë(
b
->
íd
 - b->
°¨t
Ë>
size
) {

1136 *
Œ
 = 
˛
->
√xt
;

1137 
˛
->
√xt
 = 
NULL
;

1139 
b
->
pos
 = b->
°¨t
;

1140 
b
->
ãmp‹¨y
 = 1;

1141 
b
->
shadow
 = 
NULL
;

1143  
˛
;

1147 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1148 i‡(
˛
 =
NULL
) {

1149  
NULL
;

1152 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
size
);

1153 i‡(
˛
->
buf
 =
NULL
) {

1154  
NULL
;

1157 
˛
->
√xt
 = 
NULL
;

1159 
˛
->
buf
->
ãmp‹¨y
 = 1;

1160 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1162  
˛
;

1163 
	}
}

1167 
	$ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1169 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
 = 
c⁄f
;

1171 *
rv
;

1172 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1173 
ngx_öt_t
 
§c
, 
d°
;

1174 
ngx_uöt_t
 
i
, 
n
;

1175 
ngx_°r_t
 *
vÆue
;

1176 
ngx_c⁄f_t
 
pvcf
;

1177 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1178 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1179 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 
˘x
;

1181 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1183 
§c
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1184 i‡(
§c
 =
NGX_ERROR
) {

1185  
NGX_CONF_ERROR
;

1188 
d°
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[2]);

1189 i‡(
d°
 =
NGX_ERROR
) {

1190  
NGX_CONF_ERROR
;

1193 i‡(
§c
 =
d°
) {

1194 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1196 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1197  
NGX_CONF_ERROR
;

1200 
èbÀ
 = 
mcf
->
èbÀs
.
ñts
;

1201 
i
 = 0; i < 
mcf
->
èbÀs
.
√…s
; i++) {

1202 i‡((
§c
 =
èbÀ
->§¯&& 
d°
 ==Åable->dst)

1203 || (
§c
 =
èbÀ
->
d°
 && dst ==Åable->src))

1205 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1207 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1208  
NGX_CONF_ERROR
;

1212 
èbÀ
 = 
	`ngx_¨øy_push
(&
mcf
->
èbÀs
);

1213 i‡(
èbÀ
 =
NULL
) {

1214  
NGX_CONF_ERROR
;

1217 
èbÀ
->
§c
 = src;

1218 
èbÀ
->
d°
 = dst;

1220 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[2].
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1221 
èbÀ
->
§c2d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * 
NGX_UTF_LEN
);

1222 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1223  
NGX_CONF_ERROR
;

1226 
èbÀ
->
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * (*));

1227 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1228  
NGX_CONF_ERROR
;

1231 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1232 i‡(
d°2§c
 =
NULL
) {

1233  
NGX_CONF_ERROR
;

1236 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1237 
µ
[0] = 
d°2§c
;

1239 
i
 = 0; i < 128; i++) {

1240 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1241 
p
[0] = '\1';

1242 
p
[1] = (
u_ch¨
Ë
i
;

1243 
d°2§c
[
i
] = (
u_ch¨
) i;

1246  ; 
i
 < 256; i++) {

1247 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1248 
p
[0] = '\1';

1249 
p
[1] = '?';

1253 
èbÀ
->
§c2d°
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1254 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1255  
NGX_CONF_ERROR
;

1258 
èbÀ
->
d°2§c
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1259 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1260  
NGX_CONF_ERROR
;

1263 
i
 = 0; i < 128; i++) {

1264 
èbÀ
->
§c2d°
[
i
] = (
u_ch¨
) i;

1265 
èbÀ
->
d°2§c
[
i
] = (
u_ch¨
) i;

1268  ; 
i
 < 256; i++) {

1269 
èbÀ
->
§c2d°
[
i
] = '?';

1270 
èbÀ
->
d°2§c
[
i
] = '?';

1274 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1276 
˘x
.
èbÀ
 =Åable;

1277 
˘x
.
ch¨£t
 = &ch¨£t[
d°
];

1278 
˘x
.
ch¨a˘îs
 = 0;

1280 
pvcf
 = *
cf
;

1281 
cf
->
˘x
 = &ctx;

1282 
cf
->
h™dÀr
 = 
ngx_hâp_ch¨£t_m≠
;

1283 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

1285 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

1287 *
cf
 = 
pvcf
;

1289 i‡(
˘x
.
ch¨a˘îs
) {

1290 
n
 = 
˘x
.
ch¨£t
->
Àngth
;

1291 
˘x
.
ch¨£t
->
Àngth
 /˘x.
ch¨a˘îs
;

1293 i‡(((
n
 * 10Ë/ 
˘x
.
ch¨a˘îs
) % 10 > 4) {

1294 
˘x
.
ch¨£t
->
Àngth
++;

1298  
rv
;

1299 
	}
}

1303 
	$ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

1305 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1306 
uöt32_t
 
n
;

1307 
ngx_öt_t
 
§c
, 
d°
;

1308 
ngx_°r_t
 *
vÆue
;

1309 
ngx_uöt_t
 
i
;

1310 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1311 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 *
˘x
;

1313 i‡(
cf
->
¨gs
->
√…s
 != 2) {

1314 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarametersÇumber");

1315  
NGX_CONF_ERROR
;

1318 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1320 
§c
 = 
	`ngx_hextoi
(
vÆue
[0].
d©a
, vÆue[0].
Àn
);

1321 i‡(
§c
 =
NGX_ERROR
 || src > 255) {

1322 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1323 "övÆid vÆuê\"%V\"", &
vÆue
[0]);

1324  
NGX_CONF_ERROR
;

1327 
˘x
 = 
cf
->ctx;

1328 
èbÀ
 = 
˘x
->table;

1330 i‡(
˘x
->
ch¨£t
->
utf8
) {

1331 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
];

1333 *
p
++ = (
u_ch¨
Ë(
vÆue
[1].
Àn
 / 2);

1335 
i
 = 0; i < 
vÆue
[1].
Àn
; i += 2) {

1336 
d°
 = 
	`ngx_hextoi
(&
vÆue
[1].
d©a
[
i
], 2);

1337 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1338 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1339 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1340  
NGX_CONF_ERROR
;

1343 *
p
++ = (
u_ch¨
Ë
d°
;

1346 
i
 /= 2;

1348 
˘x
->
ch¨£t
->
Àngth
 +
i
;

1349 
˘x
->
ch¨a˘îs
++;

1351 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
] + 1;

1353 
n
 = 
	`ngx_utf8_decode
(&
p
, 
i
);

1355 i‡(
n
 > 0xffff) {

1356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1357 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1358  
NGX_CONF_ERROR
;

1361 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1363 
d°2§c
 = 
µ
[
n
 >> 8];

1365 i‡(
d°2§c
 =
NULL
) {

1366 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1367 i‡(
d°2§c
 =
NULL
) {

1368  
NGX_CONF_ERROR
;

1371 
µ
[
n
 >> 8] = 
d°2§c
;

1374 
d°2§c
[
n
 & 0xff] = (
u_ch¨
Ë
§c
;

1377 
d°
 = 
	`ngx_hextoi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1378 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1379 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1380 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1381  
NGX_CONF_ERROR
;

1384 
èbÀ
->
§c2d°
[
§c
] = (
u_ch¨
Ë
d°
;

1385 
èbÀ
->
d°2§c
[
d°
] = (
u_ch¨
Ë
§c
;

1388  
NGX_CONF_OK
;

1389 
	}
}

1393 
	$ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1395 *
p
 = 
c⁄f
;

1397 
ngx_öt_t
 *
˝
;

1398 
ngx_°r_t
 *
vÆue
, 
v¨
;

1399 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1401 
˝
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1403 i‡(*
˝
 !
NGX_CONF_UNSET
) {

1407 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1409 i‡(
cmd
->
off£t
 =
	`off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
)

1410 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0)

1412 *
˝
 = 
NGX_HTTP_CHARSET_OFF
;

1413  
NGX_CONF_OK
;

1417 i‡(
vÆue
[1].
d©a
[0] == '$') {

1418 
v¨
.
Àn
 = 
vÆue
[1].len - 1;

1419 
v¨
.
d©a
 = 
vÆue
[1].data + 1;

1421 *
˝
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
v¨
);

1423 i‡(*
˝
 =
NGX_ERROR
) {

1424  
NGX_CONF_ERROR
;

1427 *
˝
 +
NGX_HTTP_CHARSET_VAR
;

1429  
NGX_CONF_OK
;

1432 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1433 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1435 *
˝
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1436 i‡(*
˝
 =
NGX_ERROR
) {

1437  
NGX_CONF_ERROR
;

1440  
NGX_CONF_OK
;

1441 
	}
}

1444 
ngx_öt_t


1445 
	$ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
)

1447 
ngx_uöt_t
 
i
;

1448 
ngx_hâp_ch¨£t_t
 *
c
;

1450 
c
 = 
ch¨£ts
->
ñts
;

1451 
i
 = 0; i < 
ch¨£ts
->
√…s
; i++) {

1452 i‡(
«me
->
Àn
 !
c
[
i
].name.len) {

1456 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, 
c
[
i
].name.data) == 0) {

1461 i‡(
i
 < 
ch¨£ts
->
√…s
) {

1462  
i
;

1465 
c
 = 
	`ngx_¨øy_push
(
ch¨£ts
);

1466 i‡(
c
 =
NULL
) {

1467  
NGX_ERROR
;

1470 
c
->
èbÀs
 = 
NULL
;

1471 
c
->
«me
 = *name;

1472 
c
->
Àngth
 = 0;

1474 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1475 
c
->
utf8
 = 1;

1478 
c
->
utf8
 = 0;

1481  
i
;

1482 
	}
}

1486 
	$ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1488 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1490 
mcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_maö_c⁄f_t
));

1491 i‡(
mcf
 =
NULL
) {

1492  
NULL
;

1495 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ch¨£ts
, 
cf
->
poﬁ
, 2, (
ngx_hâp_ch¨£t_t
))

1496 !
NGX_OK
)

1498  
NULL
;

1501 i‡(
	`ngx_¨øy_öô
(&
mcf
->
èbÀs
, 
cf
->
poﬁ
, 1,

1502 (
ngx_hâp_ch¨£t_èbÀs_t
))

1503 !
NGX_OK
)

1505  
NULL
;

1508 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ªcodes
, 
cf
->
poﬁ
, 2,

1509 (
ngx_hâp_ch¨£t_ªcode_t
))

1510 !
NGX_OK
)

1512  
NULL
;

1515  
mcf
;

1516 
	}
}

1520 
	$ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1522 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

1524 
lcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_loc_c⁄f_t
));

1525 i‡(
lcf
 =
NULL
) {

1526  
NULL
;

1536 
lcf
->
ch¨£t
 = 
NGX_CONF_UNSET
;

1537 
lcf
->
sour˚_ch¨£t
 = 
NGX_CONF_UNSET
;

1538 
lcf
->
ovîride_ch¨£t
 = 
NGX_CONF_UNSET
;

1540  
lcf
;

1541 
	}
}

1545 
	$ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1547 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1548 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1550 
ngx_uöt_t
 
i
;

1551 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1552 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1554 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1555 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1556 
ngx_hâp_ch¨£t_deÁu…_ty≥s
)

1557 !
NGX_OK
)

1559  
NGX_CONF_ERROR
;

1562 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ovîride_ch¨£t
, 
¥ev
->override_charset, 0);

1563 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ch¨£t
, 
¥ev
->ch¨£t, 
NGX_HTTP_CHARSET_OFF
);

1564 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sour˚_ch¨£t
, 
¥ev
->source_charset,

1565 
NGX_HTTP_CHARSET_OFF
);

1567 i‡(
c⁄f
->
ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1568 || 
c⁄f
->
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1569 || 
c⁄f
->
ch¨£t
 =c⁄f->
sour˚_ch¨£t
)

1571  
NGX_CONF_OK
;

1574 i‡(
c⁄f
->
sour˚_ch¨£t
 >
NGX_HTTP_CHARSET_VAR


1575 || 
c⁄f
->
ch¨£t
 >
NGX_HTTP_CHARSET_VAR
)

1577  
NGX_CONF_OK
;

1580 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1581 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1582 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1583 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1584 i‡(
c⁄f
->
sour˚_ch¨£t
 =
ªcode
[
i
].
§c


1585 && 
c⁄f
->
ch¨£t
 =
ªcode
[
i
].
d°
)

1587  
NGX_CONF_OK
;

1591 
ªcode
 = 
	`ngx_¨øy_push
(&
mcf
->
ªcodes
);

1592 i‡(
ªcode
 =
NULL
) {

1593  
NGX_CONF_ERROR
;

1596 
ªcode
->
§c
 = 
c⁄f
->
sour˚_ch¨£t
;

1597 
ªcode
->
d°
 = 
c⁄f
->
ch¨£t
;

1599  
NGX_CONF_OK
;

1600 
	}
}

1603 
ngx_öt_t


1604 
	$ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1606 
u_ch¨
 **
§c
, **
d°
;

1607 
ngx_öt_t
 
c
;

1608 
ngx_uöt_t
 
i
, 
t
;

1609 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1610 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1611 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀs
;

1612 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1614 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1615 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1617 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1618 
èbÀs
 = 
mcf
->èbÀs.
ñts
;

1619 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1621 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1623 
c
 = 
ªcode
[
i
].
§c
;

1625 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1627 i‡(
c
 =
èbÀs
[
t
].
§c
 && 
ªcode
[
i
].
d°
 ==Åables[t].dst) {

1628 
√xt
;

1631 i‡(
c
 =
èbÀs
[
t
].
d°
 && 
ªcode
[
i
].d° =èbÀs[t].
§c
) {

1632 
√xt
;

1636 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1638 &
ch¨£t
[
c
].
«me
, &ch¨£t[
ªcode
[
i
].
d°
].name);

1639  
NGX_ERROR
;

1641 
√xt
:

1646 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1648 
§c
 = 
ch¨£t
[
èbÀs
[
t
].src].tables;

1650 i‡(
§c
 =
NULL
) {

1651 
§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1652 i‡(
§c
 =
NULL
) {

1653  
NGX_ERROR
;

1656 
ch¨£t
[
èbÀs
[
t
].
§c
].tables = src;

1659 
d°
 = 
ch¨£t
[
èbÀs
[
t
].dst].tables;

1661 i‡(
d°
 =
NULL
) {

1662 
d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1663 i‡(
d°
 =
NULL
) {

1664  
NGX_ERROR
;

1667 
ch¨£t
[
èbÀs
[
t
].
d°
].tables = dst;

1670 
§c
[
èbÀs
[
t
].
d°
] =ÅabÀs[t].
§c2d°
;

1671 
d°
[
èbÀs
[
t
].
§c
] =ÅabÀs[t].
d°2§c
;

1674 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1675 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ch¨£t_hódî_fûãr
;

1677 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1678 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ch¨£t_body_fûãr
;

1680  
NGX_OK
;

1681 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_chunked_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_chaö_t
 *
	m‰ì
;

15 
ngx_chaö_t
 *
	mbusy
;

16 } 
	tngx_hâp_chunked_fûãr_˘x_t
;

19 
ngx_öt_t
 
ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

22 
ngx_hâp_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ_˘x
 = {

23 
NULL
,

24 
ngx_hâp_chunked_fûãr_öô
,

26 
NULL
,

27 
NULL
,

29 
NULL
,

30 
NULL
,

32 
NULL
,

33 
NULL


37 
ngx_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ
 = {

38 
NGX_MODULE_V1
,

39 &
ngx_hâp_chunked_fûãr_moduÀ_˘x
,

40 
NULL
,

41 
NGX_HTTP_MODULE
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NULL
,

49 
NGX_MODULE_V1_PADDING


53 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

57 
ngx_öt_t


58 
	$ngx_hâp_chunked_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

61 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

63 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED


64 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NO_CONTENT


65 || 
r
->
hódîs_out
.
°©us
 < 
NGX_HTTP_OK


66 || 
r
 !r->
maö


67 || (
r
->
mëhod
 & 
NGX_HTTP_HEAD
))

69  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

72 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1) {

73 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

74 
r
->
kì∑live
 = 0;

77 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

79 i‡(
˛cf
->
chunked_å™s„r_ícodög
) {

80 
r
->
chunked
 = 1;

82 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

83 (
ngx_hâp_chunked_fûãr_˘x_t
));

84 i‡(
˘x
 =
NULL
) {

85  
NGX_ERROR
;

88 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_chunked_fûãr_moduÀ
);

91 
r
->
kì∑live
 = 0;

96  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

97 
	}
}

100 
ngx_öt_t


101 
	$ngx_hâp_chunked_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

103 
u_ch¨
 *
chunk
;

104 
off_t
 
size
;

105 
ngx_öt_t
 
rc
;

106 
ngx_buf_t
 *
b
;

107 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
;

108 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

110 i‡(
ö
 =
NULL
 || !
r
->
chunked
 ||Ñ->
hódî_⁄ly
) {

111  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

114 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_chunked_fûãr_moduÀ
);

116 
out
 = 
NULL
;

117 
Œ
 = &
out
;

119 
size
 = 0;

120 
˛
 = 
ö
;

123 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

124 "hâ∞chunk: %d", 
	`ngx_buf_size
(
˛
->
buf
));

126 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

128 i‡(
˛
->
buf
->
Êush


129 || 
˛
->
buf
->
sync


130 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

131 || 
˛
->
buf
->
ö_fûe
)

133 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

134 i‡(
é
 =
NULL
) {

135  
NGX_ERROR
;

138 
é
->
buf
 = 
˛
->buf;

139 *
Œ
 = 
é
;

140 
Œ
 = &
é
->
√xt
;

143 i‡(
˛
->
√xt
 =
NULL
) {

147 
˛
 = cl->
√xt
;

150 i‡(
size
) {

151 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

152 i‡(
é
 =
NULL
) {

153  
NGX_ERROR
;

156 
b
 = 
é
->
buf
;

157 
chunk
 = 
b
->
°¨t
;

159 i‡(
chunk
 =
NULL
) {

162 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

163 i‡(
chunk
 =
NULL
) {

164  
NGX_ERROR
;

167 
b
->
°¨t
 = 
chunk
;

168 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

171 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

172 
b
->
mem‹y
 = 0;

173 
b
->
ãmp‹¨y
 = 1;

174 
b
->
pos
 = 
chunk
;

175 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

177 
é
->
√xt
 = 
out
;

178 
out
 = 
é
;

181 i‡(
˛
->
buf
->
œ°_buf
) {

182 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

183 i‡(
é
 =
NULL
) {

184  
NGX_ERROR
;

187 
b
 = 
é
->
buf
;

189 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

190 
b
->
ãmp‹¨y
 = 0;

191 
b
->
mem‹y
 = 1;

192 
b
->
œ°_buf
 = 1;

193 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

194 
b
->
œ°
 = b->
pos
 + 7;

196 
˛
->
buf
->
œ°_buf
 = 0;

198 *
Œ
 = 
é
;

200 i‡(
size
 == 0) {

201 
b
->
pos
 += 2;

204 } i‡(
size
 > 0) {

205 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

206 i‡(
é
 =
NULL
) {

207  
NGX_ERROR
;

210 
b
 = 
é
->
buf
;

212 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

213 
b
->
ãmp‹¨y
 = 0;

214 
b
->
mem‹y
 = 1;

215 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

216 
b
->
œ°
 = b->
pos
 + 2;

218 *
Œ
 = 
é
;

221 *
Œ
 = 
NULL
;

224 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

226 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

227 (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
);

229  
rc
;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

237 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_chunked_hódî_fûãr
;

239 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

240 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_chunked_body_fûãr
;

242  
NGX_OK
;

243 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_dav_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_DAV_OFF
 2

	)

16 
	#NGX_HTTP_DAV_NO_DEPTH
 -3

	)

17 
	#NGX_HTTP_DAV_INVALID_DEPTH
 -2

	)

18 
	#NGX_HTTP_DAV_INFINITY_DEPTH
 -1

	)

22 
ngx_uöt_t
 
	mmëhods
;

23 
ngx_uöt_t
 
	mac˚ss
;

24 
ngx_uöt_t
 
	mmö_dñëe_dïth
;

25 
ngx_Êag_t
 
	m¸óã_fuŒ_put_∑th
;

26 } 
	tngx_hâp_dav_loc_c⁄f_t
;

30 
ngx_°r_t
 
	m∑th
;

31 
size_t
 
	mÀn
;

32 } 
	tngx_hâp_dav_c›y_˘x_t
;

35 
ngx_öt_t
 
ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_öt_t
 
ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

40 
ngx_öt_t
 
ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
);

42 
ngx_öt_t
 
ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

43 
ngx_öt_t
 
ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

44 
ngx_öt_t
 
ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

46 
ngx_öt_t
 
ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
);

49 
ngx_öt_t
 
ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

51 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
,

52 
ngx_°r_t
 *
∑th
);

53 
ngx_öt_t
 
ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

56 
ngx_öt_t
 
ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
,Çgx_öt_à
dÊt
);

57 
ngx_öt_t
 
ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

58 
ngx_öt_t
 
nŸ_found
, *
Áûed
, 
u_ch¨
 *
∑th
);

59 
ngx_öt_t
 
ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
);

60 *
ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

62 *
∑ª¡
, *
chûd
);

63 
ngx_öt_t
 
ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
);

66 
ngx_c⁄f_bômask_t
 
	gngx_hâp_dav_mëhods_mask
[] = {

67 { 
ngx_°rög
("off"), 
NGX_HTTP_DAV_OFF
 },

68 { 
ngx_°rög
("put"), 
NGX_HTTP_PUT
 },

69 { 
ngx_°rög
("dñëe"), 
NGX_HTTP_DELETE
 },

70 { 
ngx_°rög
("mkcﬁ"), 
NGX_HTTP_MKCOL
 },

71 { 
ngx_°rög
("c›y"), 
NGX_HTTP_COPY
 },

72 { 
ngx_°rög
("move"), 
NGX_HTTP_MOVE
 },

73 { 
ngx_nuŒ_°rög
, 0 }

77 
ngx_comm™d_t
 
	gngx_hâp_dav_comm™ds
[] = {

79 { 
ngx_°rög
("dav_methods"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

81 
ngx_c⁄f_£t_bômask_¶Ÿ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mëhods
),

84 &
ngx_hâp_dav_mëhods_mask
 },

86 { 
ngx_°rög
("create_full_put_path"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
¸óã_fuŒ_put_∑th
),

91 
NULL
 },

93 { 
ngx_°rög
("min_delete_depth"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_c⁄f_£t_num_¶Ÿ
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mö_dñëe_dïth
),

98 
NULL
 },

100 { 
ngx_°rög
("dav_access"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

102 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
ac˚ss
),

105 
NULL
 },

107 
ngx_nuŒ_comm™d


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_dav_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_dav_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
ngx_hâp_dav_¸óã_loc_c⁄f
,

122 
ngx_hâp_dav_mîge_loc_c⁄f


126 
ngx_moduÀ_t
 
	gngx_hâp_dav_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_dav_moduÀ_˘x
,

129 
ngx_hâp_dav_comm™ds
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_öt_t


143 
	$ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

145 
ngx_öt_t
 
rc
;

146 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

148 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

150 i‡(!(
r
->
mëhod
 & 
dlcf
->
mëhods
)) {

151  
NGX_DECLINED
;

154 
r
->
mëhod
) {

156 
NGX_HTTP_PUT
:

158 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

159 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

161  
NGX_HTTP_CONFLICT
;

164 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

165 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

166 
r
->
ªque°_body_ö_˛ón_fûe
 = 1;

167 
r
->
ªque°_body_fûe_group_ac˚ss
 = 1;

168 
r
->
ªque°_body_fûe_log_Àvñ
 = 0;

170 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_dav_put_h™dÀr
);

172 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

173  
rc
;

176  
NGX_DONE
;

178 
NGX_HTTP_DELETE
:

180  
	`ngx_hâp_dav_dñëe_h™dÀr
(
r
);

182 
NGX_HTTP_MKCOL
:

184  
	`ngx_hâp_dav_mkcﬁ_h™dÀr
(
r
, 
dlcf
);

186 
NGX_HTTP_COPY
:

188  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

190 
NGX_HTTP_MOVE
:

192  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

195  
NGX_DECLINED
;

196 
	}
}

200 
	$ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

202 
size_t
 
roŸ
;

203 
time_t
 
d©e
;

204 
ngx_°r_t
 *
ãmp
, 
∑th
;

205 
ngx_uöt_t
 
°©us
;

206 
ngx_fûe_öfo_t
 
fi
;

207 
ngx_ext_ª«me_fûe_t
 
ext
;

208 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

210 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

211 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

215 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

217 
∑th
.
Àn
--;

219 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

220 "hâ∞puàfûíame: \"%s\"", 
∑th
.
d©a
);

222 
ãmp
 = &
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
;

224 i‡(
	`ngx_fûe_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

225 
°©us
 = 
NGX_HTTP_CREATED
;

228 
°©us
 = 
NGX_HTTP_NO_CONTENT
;

230 i‡(
	`ngx_is_dú
(&
fi
)) {

231 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

232 "\"%s\" couldÇŸ bê¸óãd", 
∑th
.
d©a
);

234 i‡(
	`ngx_dñëe_fûe
(
ãmp
->
d©a
Ë=
NGX_FILE_ERROR
) {

235 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

236 
ngx_dñëe_fûe_n
 " \"%s\" failed",

237 
ãmp
->
d©a
);

240 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CONFLICT
);

245 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

247 
ext
.
ac˚ss
 = 
dlcf
->access;

248 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

249 
ext
.
time
 = -1;

250 
ext
.
¸óã_∑th
 = 
dlcf
->
¸óã_fuŒ_put_∑th
;

251 
ext
.
dñëe_fûe
 = 1;

252 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

254 i‡(
r
->
hódîs_ö
.
d©e
) {

255 
d©e
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.d©e->
vÆue
.
d©a
,

256 
r
->
hódîs_ö
.
d©e
->
vÆue
.
Àn
);

258 i‡(
d©e
 !
NGX_ERROR
) {

259 
ext
.
time
 = 
d©e
;

260 
ext
.
fd
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.fd;

264 i‡(
	`ngx_ext_ª«me_fûe
(
ãmp
, &
∑th
, &
ext
Ë!
NGX_OK
) {

265 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

269 i‡(
°©us
 =
NGX_HTTP_CREATED
) {

270 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

271 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

275 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

278 
r
->
hódîs_out
.
°©us
 = status;

279 
r
->
hódî_⁄ly
 = 1;

281 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_£nd_hódî
(r));

283 
	}
}

286 
ngx_öt_t


287 
	$ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

289 
size_t
 
roŸ
;

290 
ngx_îr_t
 
îr
;

291 
ngx_öt_t
 
rc
, 
dïth
;

292 
ngx_uöt_t
 
i
, 
d
, 
dú
;

293 
ngx_°r_t
 
∑th
;

294 
ngx_fûe_öfo_t
 
fi
;

295 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

297 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

298 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

300  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

303 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

305 i‡(
dlcf
->
mö_dñëe_dïth
) {

306 
d
 = 0;

308 
i
 = 0; i < 
r
->
uri
.
Àn
; ) {

309 i‡(
r
->
uri
.
d©a
[
i
++] == '/') {

310 i‡(++
d
 >
dlcf
->
mö_dñëe_dïth
 && 
i
 < 
r
->
uri
.
Àn
) {

311 
ok
;

316 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

317 "ösufficõ¡ URI dïth:%òtÿDELETE", 
d
);

318  
NGX_HTTP_CONFLICT
;

321 
ok
:

323 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

325 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

326 "hâ∞dñëêfûíame: \"%s\"", 
∑th
.
d©a
);

328 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

329 
îr
 = 
ngx_î∫o
;

331 
rc
 = (
îr
 =
NGX_ENOTDIR
Ë? 
NGX_HTTP_CONFLICT
 : 
NGX_HTTP_NOT_FOUND
;

333  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

334 
rc
, 
ngx_lök_öfo_n
, 
∑th
.
d©a
);

337 i‡(
	`ngx_is_dú
(&
fi
)) {

339 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

340 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

341 "DELETE \"%s\" faûed", 
∑th
.
d©a
);

342  
NGX_HTTP_CONFLICT
;

345 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

347 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

348 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

350  
NGX_HTTP_BAD_REQUEST
;

353 
∑th
.
Àn
 -= 2;

355 
dú
 = 1;

364 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 0);

366 i‡(
dïth
 !0 && dïth !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

367 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

369  
NGX_HTTP_BAD_REQUEST
;

372 
dú
 = 0;

375 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 
dú
);

377 i‡(
rc
 =
NGX_OK
) {

378  
NGX_HTTP_NO_CONTENT
;

381  
rc
;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
)

388 *
Áûed
;

389 
ngx_åì_˘x_t
 
åì
;

391 i‡(
dú
) {

393 
åì
.
öô_h™dÀr
 = 
NULL
;

394 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

395 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_no›
;

396 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_dñëe_dú
;

397 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

398 
åì
.
d©a
 = 
NULL
;

399 
åì
.
Æloc
 = 0;

400 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

404 i‡(
	`ngx_wÆk_åì
(&
åì
, 
∑th
Ë!
NGX_OK
) {

405  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

408 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

409  
NGX_OK
;

412 
Áûed
 = 
ngx_dñëe_dú_n
;

416 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

417  
NGX_OK
;

420 
Áûed
 = 
ngx_dñëe_fûe_n
;

423  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

424 
NGX_HTTP_NOT_FOUND
, 
Áûed
, 
∑th
->
d©a
);

425 
	}
}

428 
ngx_öt_t


429 
	$ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

431 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

432 "hâ∞dñëêdú: \"%s\"", 
∑th
->
d©a
);

434 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

438 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_dú_n
,

439 
∑th
->
d©a
);

442  
NGX_OK
;

443 
	}
}

446 
ngx_öt_t


447 
	$ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

449 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

450 "hâ∞dñëêfûe: \"%s\"", 
∑th
->
d©a
);

452 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

456 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_fûe_n
,

457 
∑th
->
d©a
);

460  
NGX_OK
;

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

467  
NGX_OK
;

468 
	}
}

471 
ngx_öt_t


472 
	$ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
)

474 
u_ch¨
 *
p
;

475 
size_t
 
roŸ
;

476 
ngx_°r_t
 
∑th
;

478 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

479 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

481  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

484 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

485 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

487  
NGX_HTTP_CONFLICT
;

490 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

492 *(
p
 - 1) = '\0';

493 
r
->
uri
.
Àn
--;

495 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

496 "hâ∞mkcﬁÖ©h: \"%s\"", 
∑th
.
d©a
);

498 i‡(
	`ngx_¸óã_dú
(
∑th
.
d©a
, 
	`ngx_dú_ac˚ss
(
dlcf
->
ac˚ss
))

499 !
NGX_FILE_ERROR
)

501 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

502  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

505  
NGX_HTTP_CREATED
;

508  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

509 
NGX_HTTP_CONFLICT
, 
ngx_¸óã_dú_n
, 
∑th
.
d©a
);

510 
	}
}

513 
ngx_öt_t


514 
	$ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

516 
u_ch¨
 *
p
, *
ho°
, *
œ°
, 
ch
;

517 
size_t
 
Àn
, 
roŸ
;

518 
ngx_îr_t
 
îr
;

519 
ngx_öt_t
 
rc
, 
dïth
;

520 
ngx_uöt_t
 
ovîwrôe
, 
¶ash
, 
dú
, 
Êags
;

521 
ngx_°r_t
 
∑th
, 
uri
, 
duri
, 
¨gs
;

522 
ngx_åì_˘x_t
 
åì
;

523 
ngx_c›y_fûe_t
 
cf
;

524 
ngx_fûe_öfo_t
 
fi
;

525 
ngx_èbÀ_ñt_t
 *
de°
, *
ovî
;

526 
ngx_ext_ª«me_fûe_t
 
ext
;

527 
ngx_hâp_dav_c›y_˘x_t
 
c›y
;

528 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

530 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

531  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

534 
de°
 = 
r
->
hódîs_ö
.
de°ö©i⁄
;

536 i‡(
de°
 =
NULL
) {

537 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

539  
NGX_HTTP_BAD_REQUEST
;

542 
p
 = 
de°
->
vÆue
.
d©a
;

544 i‡(
p
[0] == '/') {

545 
œ°
 = 
p
 + 
de°
->
vÆue
.
Àn
;

546 
de°ö©i⁄_d⁄e
;

549 
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

551 i‡(
Àn
 == 0) {

552 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

554  
NGX_HTTP_BAD_REQUEST
;

557 #i‡(
NGX_HTTP_SSL
)

559 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

560 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "https://", ("https://") - 1)

563 
övÆid_de°ö©i⁄
;

566 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("https://") - 1;

571 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "http://", ("http://") - 1)

574 
övÆid_de°ö©i⁄
;

577 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("http://") - 1;

580 i‡(
	`ngx_°∫cmp
(
ho°
, 
r
->
hódîs_ö
.
£rvî
.
d©a
, 
Àn
) != 0) {

581 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

584 &
de°
->
vÆue
);

585  
NGX_HTTP_BAD_REQUEST
;

588 
œ°
 = 
de°
->
vÆue
.
d©a
 + de°->vÆue.
Àn
;

590 
p
 = 
ho°
 + 
Àn
;Ö < 
œ°
;Ö++) {

591 i‡(*
p
 == '/') {

592 
de°ö©i⁄_d⁄e
;

596 
övÆid_de°ö©i⁄
:

598 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

600 &
de°
->
vÆue
);

601  
NGX_HTTP_BAD_REQUEST
;

603 
de°ö©i⁄_d⁄e
:

605 
duri
.
Àn
 = 
œ°
 - 
p
;

606 
duri
.
d©a
 = 
p
;

607 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

609 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
duri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

610 
övÆid_de°ö©i⁄
;

613 i‡((
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] ='/' && *(
œ°
 - 1) != '/')

614 || (
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] !'/' && *(
œ°
 - 1) == '/'))

616 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

619 &
r
->
uri
, &
de°
->
vÆue
);

620  
NGX_HTTP_CONFLICT
;

623 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

625 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

627 i‡(
r
->
mëhod
 =
NGX_HTTP_COPY
) {

628 i‡(
dïth
 != 0) {

629 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

631  
NGX_HTTP_BAD_REQUEST
;

635 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

637  
NGX_HTTP_BAD_REQUEST
;

641 
ovî
 = 
r
->
hódîs_ö
.
ovîwrôe
;

643 i‡(
ovî
) {

644 i‡(
ovî
->
vÆue
.
Àn
 == 1) {

645 
ch
 = 
ovî
->
vÆue
.
d©a
[0];

647 i‡(
ch
 == 'T' || ch == 't') {

648 
ovîwrôe
 = 1;

649 
ovîwrôe_d⁄e
;

652 i‡(
ch
 == 'F' || ch == 'f') {

653 
ovîwrôe
 = 0;

654 
ovîwrôe_d⁄e
;

659 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

661 &
ovî
->
vÆue
);

662  
NGX_HTTP_BAD_REQUEST
;

665 
ovîwrôe
 = 1;

667 
ovîwrôe_d⁄e
:

669 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

671 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

672 "hâ∞c›y from: \"%s\"", 
∑th
.
d©a
);

674 
uri
 = 
r
->uri;

675 
r
->
uri
 = 
duri
;

677 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
c›y
.
∑th
, &
roŸ
, 0);

679 
r
->
uri
 = uri;

681 
c›y
.
∑th
.
Àn
--;

683 i‡(
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
 - 1] == '/') {

684 
¶ash
 = 1;

685 
c›y
.
∑th
.
Àn
--;

686 
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
] = '\0';

689 
¶ash
 = 0;

692 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

693 "hâ∞c›yÅo: \"%s\"", 
c›y
.
∑th
.
d©a
);

695 i‡(
	`ngx_lök_öfo
(
c›y
.
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

696 
îr
 = 
ngx_î∫o
;

698 i‡(
îr
 !
NGX_ENOENT
) {

699  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

700 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

701 
c›y
.
∑th
.
d©a
);

706 
ovîwrôe
 = 0;

707 
dú
 = 0;

713 i‡(
	`ngx_is_dú
(&
fi
Ë&& !
¶ash
) {

714 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

716 &
r
->
uri
, &r->
mëhod_«me
, &
de°
->
vÆue
);

717  
NGX_HTTP_CONFLICT
;

720 i‡(!
ovîwrôe
) {

721 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EEXIST
,

722 "\"%s\" couldÇŸ bê¸óãd", 
c›y
.
∑th
.
d©a
);

723  
NGX_HTTP_PRECONDITION_FAILED
;

726 
dú
 = 
	`ngx_is_dú
(&
fi
);

729 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

730  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

731 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

732 
∑th
.
d©a
);

735 i‡(
	`ngx_is_dú
(&
fi
)) {

737 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

738 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

739 "\"%V\" i†cﬁÀ˘i⁄", &
r
->
uri
);

740  
NGX_HTTP_BAD_REQUEST
;

743 i‡(
ovîwrôe
) {

744 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

745 "hâ∞dñëe: \"%s\"", 
c›y
.
∑th
.
d©a
);

747 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
c›y
.
∑th
, 
dú
);

749 i‡(
rc
 !
NGX_OK
) {

750  
rc
;

755 i‡(
	`ngx_is_dú
(&
fi
)) {

757 
∑th
.
Àn
 -= 2;

759 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

760 i‡(
	`ngx_ª«me_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©aË!
NGX_FILE_ERROR
) {

761  
NGX_HTTP_CREATED
;

765 i‡(
	`ngx_¸óã_dú
(
c›y
.
∑th
.
d©a
, 
	`ngx_fûe_ac˚ss
(&
fi
))

766 =
NGX_FILE_ERROR
)

768  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

769 
NGX_HTTP_NOT_FOUND
,

770 
ngx_¸óã_dú_n
, 
c›y
.
∑th
.
d©a
);

773 
c›y
.
Àn
 = 
∑th
.len;

775 
åì
.
öô_h™dÀr
 = 
NULL
;

776 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_c›y_åì_fûe
;

777 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú
;

778 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú_time
;

779 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_no›
;

780 
åì
.
d©a
 = &
c›y
;

781 
åì
.
Æloc
 = 0;

782 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

784 i‡(
	`ngx_wÆk_åì
(&
åì
, &
∑th
Ë=
NGX_OK
) {

786 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

787 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 1);

789 i‡(
rc
 !
NGX_OK
) {

790  
rc
;

794  
NGX_HTTP_CREATED
;

799 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

801 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

803 
ext
.
ac˚ss
 = 0;

804 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

805 
ext
.
time
 = -1;

806 
ext
.
¸óã_∑th
 = 1;

807 
ext
.
dñëe_fûe
 = 0;

808 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

810 i‡(
	`ngx_ext_ª«me_fûe
(&
∑th
, &
c›y
.∑th, &
ext
Ë=
NGX_OK
) {

811  
NGX_HTTP_NO_CONTENT
;

814  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

817 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

819 
cf
.
size
 = 
	`ngx_fûe_size
(&
fi
);

820 
cf
.
buf_size
 = 0;

821 
cf
.
ac˚ss
 = 
dlcf
->access;

822 
cf
.
time
 = 
	`ngx_fûe_mtime
(&
fi
);

823 
cf
.
log
 = 
r
->
c⁄√˘i⁄
->log;

825 i‡(
	`ngx_c›y_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©a, &
cf
Ë=
NGX_OK
) {

826  
NGX_HTTP_NO_CONTENT
;

830  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

831 
	}
}

834 
ngx_öt_t


835 
	$ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

837 
u_ch¨
 *
p
, *
dú
;

838 
size_t
 
Àn
;

839 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

841 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

842 "hâ∞c›y dú: \"%s\"", 
∑th
->
d©a
);

844 
c›y
 = 
˘x
->
d©a
;

846 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

848 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

849 i‡(
dú
 =
NULL
) {

850  
NGX_ABORT
;

853 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

854 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

856 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

857 "hâ∞c›y dúÅo: \"%s\"", 
dú
);

859 i‡(
	`ngx_¸óã_dú
(
dú
, 
	`ngx_dú_ac˚ss
(
˘x
->
ac˚ss
)Ë=
NGX_FILE_ERROR
) {

860 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_¸óã_dú_n
,

861 
dú
);

864 
	`ngx_‰ì
(
dú
);

866  
NGX_OK
;

867 
	}
}

870 
ngx_öt_t


871 
	$ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

873 
u_ch¨
 *
p
, *
dú
;

874 
size_t
 
Àn
;

875 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

877 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

878 "hâ∞c›y dúÅime: \"%s\"", 
∑th
->
d©a
);

880 
c›y
 = 
˘x
->
d©a
;

882 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

884 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

885 i‡(
dú
 =
NULL
) {

886  
NGX_ABORT
;

889 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

890 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

892 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

893 "hâ∞c›y dúÅimêto: \"%s\"", 
dú
);

895 #i‡(
NGX_WIN32
)

897 
ngx_fd_t
 
fd
;

899 
fd
 = 
	`ngx_›í_fûe
(
dú
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

901 i‡(
fd
 =
NGX_INVALID_FILE
) {

902 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_›í_fûe_n
, 
dú
);

903 
Áûed
;

906 i‡(
	`ngx_£t_fûe_time
(
NULL
, 
fd
, 
˘x
->
mtime
Ë!
NGX_OK
) {

907 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

908 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

911 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

912 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

913 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
dú
);

917 
Áûed
:

921 i‡(
	`ngx_£t_fûe_time
(
dú
, 0, 
˘x
->
mtime
Ë!
NGX_OK
) {

922 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

923 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

928 
	`ngx_‰ì
(
dú
);

930  
NGX_OK
;

931 
	}
}

934 
ngx_öt_t


935 
	$ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

937 
u_ch¨
 *
p
, *
fûe
;

938 
size_t
 
Àn
;

939 
ngx_c›y_fûe_t
 
cf
;

940 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

942 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

943 "hâ∞c›y fûe: \"%s\"", 
∑th
->
d©a
);

945 
c›y
 = 
˘x
->
d©a
;

947 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

949 
fûe
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

950 i‡(
fûe
 =
NULL
) {

951  
NGX_ABORT
;

954 
p
 = 
	`ngx_˝ymem
(
fûe
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

955 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

957 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

958 "hâ∞c›y fûêto: \"%s\"", 
fûe
);

960 
cf
.
size
 = 
˘x
->size;

961 
cf
.
buf_size
 = 0;

962 
cf
.
ac˚ss
 = 
˘x
->access;

963 
cf
.
time
 = 
˘x
->
mtime
;

964 
cf
.
log
 = 
˘x
->log;

966 (Ë
	`ngx_c›y_fûe
(
∑th
->
d©a
, 
fûe
, &
cf
);

968 
	`ngx_‰ì
(
fûe
);

970  
NGX_OK
;

971 
	}
}

974 
ngx_öt_t


975 
	$ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
dÊt
)

977 
ngx_èbÀ_ñt_t
 *
dïth
;

979 
dïth
 = 
r
->
hódîs_ö
.depth;

981 i‡(
dïth
 =
NULL
) {

982  
dÊt
;

985 i‡(
dïth
->
vÆue
.
Àn
 == 1) {

987 i‡(
dïth
->
vÆue
.
d©a
[0] == '0') {

991 i‡(
dïth
->
vÆue
.
d©a
[0] == '1') {

997 i‡(
dïth
->
vÆue
.
Àn
 == ("infinity") - 1

998 && 
	`ngx_°rcmp
(
dïth
->
vÆue
.
d©a
, "infinity") == 0)

1000  
NGX_HTTP_DAV_INFINITY_DEPTH
;

1004 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1006 &
dïth
->
vÆue
);

1008  
NGX_HTTP_DAV_INVALID_DEPTH
;

1009 
	}
}

1012 
ngx_öt_t


1013 
	$ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, 
ngx_öt_t
 
nŸ_found
,

1014 *
Áûed
, 
u_ch¨
 *
∑th
)

1016 
ngx_öt_t
 
rc
;

1017 
ngx_uöt_t
 
Àvñ
;

1019 i‡(
îr
 =
NGX_ENOENT
 ||Éº =
NGX_ENOTDIR
 ||Éº =
NGX_ENAMETOOLONG
) {

1020 
Àvñ
 = 
NGX_LOG_ERR
;

1021 
rc
 = 
nŸ_found
;

1023 } i‡(
îr
 =
NGX_EACCES
 ||Éº =
NGX_EPERM
) {

1024 
Àvñ
 = 
NGX_LOG_ERR
;

1025 
rc
 = 
NGX_HTTP_FORBIDDEN
;

1027 } i‡(
îr
 =
NGX_EEXIST
) {

1028 
Àvñ
 = 
NGX_LOG_ERR
;

1029 
rc
 = 
NGX_HTTP_NOT_ALLOWED
;

1031 } i‡(
îr
 =
NGX_ENOSPC
) {

1032 
Àvñ
 = 
NGX_LOG_CRIT
;

1033 
rc
 = 
NGX_HTTP_INSUFFICIENT_STORAGE
;

1036 
Àvñ
 = 
NGX_LOG_CRIT
;

1037 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1040 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%†\"%s\" faûed", 
Áûed
, 
∑th
);

1042  
rc
;

1043 
	}
}

1046 
ngx_öt_t


1047 
	$ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
)

1049 
u_ch¨
 *
loˇti⁄
;

1050 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1052 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

1053 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1054  
NGX_ERROR
;

1057 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1059 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
) {

1060 
loˇti⁄
 = 
∑th
 + 
˛cf
->
roŸ
.
Àn
;

1063 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
uri
.
Àn
);

1064 i‡(
loˇti⁄
 =
NULL
) {

1065  
NGX_ERROR
;

1068 
	`ngx_mem˝y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

1076 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Ñ->
uri
.len;

1077 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

1079  
NGX_OK
;

1080 
	}
}

1084 
	$ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1086 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
;

1088 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_dav_loc_c⁄f_t
));

1089 i‡(
c⁄f
 =
NULL
) {

1090  
NULL
;

1099 
c⁄f
->
mö_dñëe_dïth
 = 
NGX_CONF_UNSET_UINT
;

1100 
c⁄f
->
ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1101 
c⁄f
->
¸óã_fuŒ_put_∑th
 = 
NGX_CONF_UNSET
;

1103  
c⁄f
;

1104 
	}
}

1108 
	$ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1110 
ngx_hâp_dav_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1111 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1113 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
mëhods
, 
¥ev
->methods,

1114 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_DAV_OFF
));

1116 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mö_dñëe_dïth
,

1117 
¥ev
->
mö_dñëe_dïth
, 0);

1119 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ac˚ss
, 
¥ev
->access, 0600);

1121 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¸óã_fuŒ_put_∑th
,

1122 
¥ev
->
¸óã_fuŒ_put_∑th
, 0);

1124  
NGX_CONF_OK
;

1125 
	}
}

1128 
ngx_öt_t


1129 
	$ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
)

1131 
ngx_hâp_h™dÀr_±
 *
h
;

1132 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1134 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1136 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1137 i‡(
h
 =
NULL
) {

1138  
NGX_ERROR
;

1141 *
h
 = 
ngx_hâp_dav_h™dÀr
;

1143  
NGX_OK
;

1144 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_degradation_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
size_t
 
	msbrk_size
;

15 } 
	tngx_hâp_degød©i⁄_maö_c⁄f_t
;

19 
ngx_uöt_t
 
	mdegøde
;

20 } 
	tngx_hâp_degød©i⁄_loc_c⁄f_t
;

23 
ngx_c⁄f_íum_t
 
	gngx_hâp_degøde
[] = {

24 { 
ngx_°rög
("204"), 204 },

25 { 
ngx_°rög
("444"), 444 },

26 { 
ngx_nuŒ_°rög
, 0 }

30 *
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 *
ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

35 *
c⁄f
);

36 
ngx_öt_t
 
ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_degød©i⁄_comm™ds
[] = {

41 { 
ngx_°rög
("degradation"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

43 
ngx_hâp_degød©i⁄
,

44 
NGX_HTTP_MAIN_CONF_OFFSET
,

46 
NULL
 },

48 { 
ngx_°rög
("degrade"),

49 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_íum_¶Ÿ
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_degød©i⁄_loc_c⁄f_t
, 
degøde
),

53 &
ngx_hâp_degøde
 },

55 
ngx_nuŒ_comm™d


59 
ngx_hâp_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ_˘x
 = {

60 
NULL
,

61 
ngx_hâp_degød©i⁄_öô
,

63 
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
,

64 
NULL
,

66 
NULL
,

67 
NULL
,

69 
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
,

70 
ngx_hâp_degød©i⁄_mîge_loc_c⁄f


74 
ngx_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_hâp_degød©i⁄_moduÀ_˘x
,

77 
ngx_hâp_degød©i⁄_comm™ds
,

78 
NGX_HTTP_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_öt_t


91 
	$ngx_hâp_degød©i⁄_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

93 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
dlcf
;

95 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

97 i‡(
dlcf
->
degøde
 && 
	`ngx_hâp_degøded
(
r
)) {

98  
dlcf
->
degøde
;

101  
NGX_DECLINED
;

102 
	}
}

105 
ngx_uöt_t


106 
	$ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *
r
)

108 
time_t
 
now
;

109 
ngx_uöt_t
 
log
;

110 
size_t
 
sbrk_size
;

111 
time_t
 
sbrk_time
;

112 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

114 
dmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

116 i‡(
dmcf
->
sbrk_size
) {

118 
log
 = 0;

119 
now
 = 
	`ngx_time
();

123 i‡(
now
 !
sbrk_time
) {

132 
sbrk_size
 = (
size_t
Ë
	`sbrk
(0Ë- ((
uöçå_t
Ë
ngx_∑Œoc
 & ~0x3FFFFF);

133 
sbrk_time
 = 
now
;

134 
log
 = 1;

139 i‡(
sbrk_size
 >
dmcf
->sbrk_size) {

140 i‡(
log
) {

141 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143 
sbrk_size
 / (1024 * 1024));

151 
	}
}

155 
	$ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

157 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

159 
dmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_maö_c⁄f_t
));

160 i‡(
dmcf
 =
NULL
) {

161  
NULL
;

164  
dmcf
;

165 
	}
}

169 
	$ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

171 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
;

173 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_loc_c⁄f_t
));

174 i‡(
c⁄f
 =
NULL
) {

175  
NULL
;

178 
c⁄f
->
degøde
 = 
NGX_CONF_UNSET_UINT
;

180  
c⁄f
;

181 
	}
}

185 
	$ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

187 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

188 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

190 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
degøde
, 
¥ev
->degrade, 0);

192  
NGX_CONF_OK
;

193 
	}
}

197 
	$ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

199 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
 = 
c⁄f
;

201 
ngx_°r_t
 *
vÆue
, 
s
;

203 
vÆue
 = 
cf
->
¨gs
->
ñts
;

205 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "sbrk=", 5) == 0) {

207 
s
.
Àn
 = 
vÆue
[1].len - 5;

208 
s
.
d©a
 = 
vÆue
[1].data + 5;

210 
dmcf
->
sbrk_size
 = 
	`ngx_∑r£_size
(&
s
);

211 i‡(
dmcf
->
sbrk_size
 =(
size_t
Ë
NGX_ERROR
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

213 "övÆid sbrk sizê\"%V\"", &
vÆue
[1]);

214  
NGX_CONF_ERROR
;

217  
NGX_CONF_OK
;

220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

223  
NGX_CONF_ERROR
;

224 
	}
}

227 
ngx_öt_t


228 
	$ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
)

230 
ngx_hâp_h™dÀr_±
 *
h
;

231 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

233 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

235 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

236 i‡(
h
 =
NULL
) {

237  
NGX_ERROR
;

240 *
h
 = 
ngx_hâp_degød©i⁄_h™dÀr
;

242  
NGX_OK
;

243 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_empty_gif_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

13 *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_hâp_em±y_gif_comm™ds
[] = {

17 { 
ngx_°rög
("empty_gif"),

18 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

19 
ngx_hâp_em±y_gif
,

22 
NULL
 },

24 
ngx_nuŒ_comm™d


30 
u_ch¨
 
	gngx_em±y_gif
[] = {

78 
ngx_hâp_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ_˘x
 = {

79 
NULL
,

80 
NULL
,

82 
NULL
,

83 
NULL
,

85 
NULL
,

86 
NULL
,

88 
NULL
,

89 
NULL


93 
ngx_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ
 = {

94 
NGX_MODULE_V1
,

95 &
ngx_hâp_em±y_gif_moduÀ_˘x
,

96 
ngx_hâp_em±y_gif_comm™ds
,

97 
NGX_HTTP_MODULE
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NGX_MODULE_V1_PADDING


109 
ngx_°r_t
 
	gngx_hâp_gif_ty≥
 = 
ngx_°rög
("image/gif");

112 
ngx_öt_t


113 
	$ngx_hâp_em±y_gif_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

115 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

117 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

118  
NGX_HTTP_NOT_ALLOWED
;

121 
	`ngx_memzîo
(&
cv
, (
ngx_hâp_com∂ex_vÆue_t
));

123 
cv
.
vÆue
.
Àn
 = (
ngx_em±y_gif
);

124 
cv
.
vÆue
.
d©a
 = 
ngx_em±y_gif
;

125 
r
->
hódîs_out
.
œ°_modifõd_time
 = 23349600;

127  
	`ngx_hâp_£nd_ª•⁄£
(
r
, 
NGX_HTTP_OK
, &
ngx_hâp_gif_ty≥
, &
cv
);

128 
	}
}

132 
	$ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

134 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

136 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

137 
˛cf
->
h™dÀr
 = 
ngx_hâp_em±y_gif_h™dÀr
;

139  
NGX_CONF_OK
;

140 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_fastcgi_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

16 
ngx_°r_t
 
	mödex
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_¨øy_t
 *
	mˇtch_°dîr
;

24 
ngx_¨øy_t
 *
	mÁ°cgi_Àngths
;

25 
ngx_¨øy_t
 *
	mÁ°cgi_vÆues
;

27 
ngx_hash_t
 
	mhódîs_hash
;

28 
ngx_uöt_t
 
	mhódî_∑øms
;

30 
ngx_Êag_t
 
	mkìp_c⁄n
;

32 #i‡(
NGX_HTTP_CACHE
)

33 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

36 #i‡(
NGX_PCRE
)

37 
ngx_ªgex_t
 *
	m•lô_ªgex
;

38 
ngx_°r_t
 
	m•lô_«me
;

40 } 
	tngx_hâp_Á°cgi_loc_c⁄f_t
;

44 
	mngx_hâp_Á°cgi_°_vîsi⁄
 = 0,

45 
	mngx_hâp_Á°cgi_°_ty≥
,

46 
	mngx_hâp_Á°cgi_°_ªque°_id_hi
,

47 
	mngx_hâp_Á°cgi_°_ªque°_id_lo
,

48 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
,

49 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
,

50 
	mngx_hâp_Á°cgi_°_∑ddög_Àngth
,

51 
	mngx_hâp_Á°cgi_°_ª£rved
,

52 
	mngx_hâp_Á°cgi_°_d©a
,

53 
	mngx_hâp_Á°cgi_°_∑ddög


54 } 
	tngx_hâp_Á°cgi_°©e_e
;

58 
u_ch¨
 *
	m°¨t
;

59 
u_ch¨
 *
	míd
;

60 } 
	tngx_hâp_Á°cgi_•lô_∑π_t
;

64 
ngx_hâp_Á°cgi_°©e_e
 
	m°©e
;

65 
u_ch¨
 *
	mpos
;

66 
u_ch¨
 *
	mœ°
;

67 
ngx_uöt_t
 
	mty≥
;

68 
size_t
 
	mÀngth
;

69 
size_t
 
	m∑ddög
;

71 
	mÁ°cgi_°dout
:1;

72 
	mœrge_°dîr
:1;

74 
ngx_¨øy_t
 *
	m•lô_∑πs
;

76 
ngx_°r_t
 
	ms¸ùt_«me
;

77 
ngx_°r_t
 
	m∑th_öfo
;

78 } 
	tngx_hâp_Á°cgi_˘x_t
;

81 
	#NGX_HTTP_FASTCGI_RESPONDER
 1

	)

83 
	#NGX_HTTP_FASTCGI_KEEP_CONN
 1

	)

85 
	#NGX_HTTP_FASTCGI_BEGIN_REQUEST
 1

	)

86 
	#NGX_HTTP_FASTCGI_ABORT_REQUEST
 2

	)

87 
	#NGX_HTTP_FASTCGI_END_REQUEST
 3

	)

88 
	#NGX_HTTP_FASTCGI_PARAMS
 4

	)

89 
	#NGX_HTTP_FASTCGI_STDIN
 5

	)

90 
	#NGX_HTTP_FASTCGI_STDOUT
 6

	)

91 
	#NGX_HTTP_FASTCGI_STDERR
 7

	)

92 
	#NGX_HTTP_FASTCGI_DATA
 8

	)

96 
u_ch¨
 
	mvîsi⁄
;

97 
u_ch¨
 
	mty≥
;

98 
u_ch¨
 
	mªque°_id_hi
;

99 
u_ch¨
 
	mªque°_id_lo
;

100 
u_ch¨
 
	mc⁄ã¡_Àngth_hi
;

101 
u_ch¨
 
	mc⁄ã¡_Àngth_lo
;

102 
u_ch¨
 
	m∑ddög_Àngth
;

103 
u_ch¨
 
	mª£rved
;

104 } 
	tngx_hâp_Á°cgi_hódî_t
;

108 
u_ch¨
 
	mrﬁe_hi
;

109 
u_ch¨
 
	mrﬁe_lo
;

110 
u_ch¨
 
	mÊags
;

111 
u_ch¨
 
	mª£rved
[5];

112 } 
	tngx_hâp_Á°cgi_begö_ªque°_t
;

116 
u_ch¨
 
	mvîsi⁄
;

117 
u_ch¨
 
	mty≥
;

118 
u_ch¨
 
	mªque°_id_hi
;

119 
u_ch¨
 
	mªque°_id_lo
;

120 } 
	tngx_hâp_Á°cgi_hódî_smÆl_t
;

124 
ngx_hâp_Á°cgi_hódî_t
 
	mh0
;

125 
ngx_hâp_Á°cgi_begö_ªque°_t
 
	mbr
;

126 
ngx_hâp_Á°cgi_hódî_smÆl_t
 
	mh1
;

127 } 
	tngx_hâp_Á°cgi_ªque°_°¨t_t
;

130 
ngx_öt_t
 
ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

132 #i‡(
NGX_HTTP_CACHE
)

133 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

135 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

136 
ngx_öt_t
 
ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

137 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

138 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
);

139 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
,

140 
ngx_buf_t
 *
buf
);

141 
ngx_öt_t
 
ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
(*
d©a
,

142 
ssize_t
 
byãs
);

143 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

144 
ngx_hâp_Á°cgi_˘x_t
 *
f
);

145 
ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

146 
ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

147 
ngx_öt_t
 
rc
);

149 
ngx_öt_t
 
ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

150 *
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

151 *
ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

152 *
∑ª¡
, *
chûd
);

153 
ngx_öt_t
 
ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

154 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
);

156 
ngx_öt_t
 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

157 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

158 
ngx_öt_t
 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

159 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

160 
ngx_hâp_Á°cgi_˘x_t
 *
ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
,

161 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

163 *
ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

164 *
c⁄f
);

165 *
ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
,

166 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

167 *
ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

168 *
c⁄f
);

169 #i‡(
NGX_HTTP_CACHE
)

170 *
ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

171 *
c⁄f
);

172 *
ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

173 *
c⁄f
);

176 *
ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
,

177 *
d©a
);

180 
ngx_c⁄f_po°_t
 
	gngx_hâp_Á°cgi_low©_po°
 =

181 { 
ngx_hâp_Á°cgi_low©_check
 };

184 
ngx_c⁄f_bômask_t
 
	gngx_hâp_Á°cgi_√xt_up°ªam_masks
[] = {

185 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

186 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

187 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

188 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

189 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

190 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

191 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

192 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

193 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

194 { 
ngx_nuŒ_°rög
, 0 }

198 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
;

201 
ngx_comm™d_t
 
	gngx_hâp_Á°cgi_comm™ds
[] = {

203 { 
ngx_°rög
("fastcgi_pass"),

204 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

205 
ngx_hâp_Á°cgi_∑ss
,

206 
NGX_HTTP_LOC_CONF_OFFSET
,

208 
NULL
 },

210 { 
ngx_°rög
("fastcgi_index"),

211 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

212 
ngx_c⁄f_£t_°r_¶Ÿ
,

213 
NGX_HTTP_LOC_CONF_OFFSET
,

214 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ödex
),

215 
NULL
 },

217 { 
ngx_°rög
("fastcgi_split_path_info"),

218 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

219 
ngx_hâp_Á°cgi_•lô_∑th_öfo
,

220 
NGX_HTTP_LOC_CONF_OFFSET
,

222 
NULL
 },

224 { 
ngx_°rög
("fastcgi_store"),

225 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

226 
ngx_hâp_Á°cgi_°‹e
,

227 
NGX_HTTP_LOC_CONF_OFFSET
,

229 
NULL
 },

231 { 
ngx_°rög
("fastcgi_store_access"),

232 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

233 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

234 
NGX_HTTP_LOC_CONF_OFFSET
,

235 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

236 
NULL
 },

238 { 
ngx_°rög
("fastcgi_buffering"),

239 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

240 
ngx_c⁄f_£t_Êag_¶Ÿ
,

241 
NGX_HTTP_LOC_CONF_OFFSET
,

242 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

243 
NULL
 },

245 { 
ngx_°rög
("fastcgi_ignore_client_abort"),

246 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

247 
ngx_c⁄f_£t_Êag_¶Ÿ
,

248 
NGX_HTTP_LOC_CONF_OFFSET
,

249 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

250 
NULL
 },

252 { 
ngx_°rög
("fastcgi_bind"),

253 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

254 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

255 
NGX_HTTP_LOC_CONF_OFFSET
,

256 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

257 
NULL
 },

259 { 
ngx_°rög
("fastcgi_connect_timeout"),

260 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

261 
ngx_c⁄f_£t_m£c_¶Ÿ
,

262 
NGX_HTTP_LOC_CONF_OFFSET
,

263 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

264 
NULL
 },

266 { 
ngx_°rög
("fastcgi_send_timeout"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

268 
ngx_c⁄f_£t_m£c_¶Ÿ
,

269 
NGX_HTTP_LOC_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

271 
NULL
 },

273 { 
ngx_°rög
("fastcgi_send_lowat"),

274 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

275 
ngx_c⁄f_£t_size_¶Ÿ
,

276 
NGX_HTTP_LOC_CONF_OFFSET
,

277 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

278 &
ngx_hâp_Á°cgi_low©_po°
 },

280 { 
ngx_°rög
("fastcgi_buffer_size"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

282 
ngx_c⁄f_£t_size_¶Ÿ
,

283 
NGX_HTTP_LOC_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

285 
NULL
 },

287 { 
ngx_°rög
("fastcgi_pass_request_headers"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

289 
ngx_c⁄f_£t_Êag_¶Ÿ
,

290 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

292 
NULL
 },

294 { 
ngx_°rög
("fastcgi_pass_request_body"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

296 
ngx_c⁄f_£t_Êag_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

299 
NULL
 },

301 { 
ngx_°rög
("fastcgi_intercept_errors"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

303 
ngx_c⁄f_£t_Êag_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

306 
NULL
 },

308 { 
ngx_°rög
("fastcgi_read_timeout"),

309 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

310 
ngx_c⁄f_£t_m£c_¶Ÿ
,

311 
NGX_HTTP_LOC_CONF_OFFSET
,

312 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

313 
NULL
 },

315 { 
ngx_°rög
("fastcgi_buffers"),

316 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

317 
ngx_c⁄f_£t_bufs_¶Ÿ
,

318 
NGX_HTTP_LOC_CONF_OFFSET
,

319 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

320 
NULL
 },

322 { 
ngx_°rög
("fastcgi_busy_buffers_size"),

323 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

324 
ngx_c⁄f_£t_size_¶Ÿ
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

327 
NULL
 },

329 #i‡(
NGX_HTTP_CACHE
)

331 { 
ngx_°rög
("fastcgi_cache"),

332 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

333 
ngx_hâp_Á°cgi_ˇche
,

334 
NGX_HTTP_LOC_CONF_OFFSET
,

336 
NULL
 },

338 { 
ngx_°rög
("fastcgi_cache_key"),

339 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

340 
ngx_hâp_Á°cgi_ˇche_key
,

341 
NGX_HTTP_LOC_CONF_OFFSET
,

343 
NULL
 },

345 { 
ngx_°rög
("fastcgi_cache_path"),

346 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

347 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

350 &
ngx_hâp_Á°cgi_moduÀ
 },

352 { 
ngx_°rög
("fastcgi_cache_bypass"),

353 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

354 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

355 
NGX_HTTP_LOC_CONF_OFFSET
,

356 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

357 
NULL
 },

359 { 
ngx_°rög
("fastcgi_no_cache"),

360 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

361 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

362 
NGX_HTTP_LOC_CONF_OFFSET
,

363 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

364 
NULL
 },

366 { 
ngx_°rög
("fastcgi_cache_valid"),

367 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

368 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

369 
NGX_HTTP_LOC_CONF_OFFSET
,

370 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

371 
NULL
 },

373 { 
ngx_°rög
("fastcgi_cache_min_uses"),

374 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

375 
ngx_c⁄f_£t_num_¶Ÿ
,

376 
NGX_HTTP_LOC_CONF_OFFSET
,

377 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

378 
NULL
 },

380 { 
ngx_°rög
("fastcgi_cache_use_stale"),

381 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

382 
ngx_c⁄f_£t_bômask_¶Ÿ
,

383 
NGX_HTTP_LOC_CONF_OFFSET
,

384 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

385 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

387 { 
ngx_°rög
("fastcgi_cache_methods"),

388 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

389 
ngx_c⁄f_£t_bômask_¶Ÿ
,

390 
NGX_HTTP_LOC_CONF_OFFSET
,

391 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

392 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

394 { 
ngx_°rög
("fastcgi_cache_lock"),

395 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

396 
ngx_c⁄f_£t_Êag_¶Ÿ
,

397 
NGX_HTTP_LOC_CONF_OFFSET
,

398 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

399 
NULL
 },

401 { 
ngx_°rög
("fastcgi_cache_lock_timeout"),

402 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

403 
ngx_c⁄f_£t_m£c_¶Ÿ
,

404 
NGX_HTTP_LOC_CONF_OFFSET
,

405 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

406 
NULL
 },

408 { 
ngx_°rög
("fastcgi_cache_revalidate"),

409 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

410 
ngx_c⁄f_£t_Êag_¶Ÿ
,

411 
NGX_HTTP_LOC_CONF_OFFSET
,

412 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

413 
NULL
 },

417 { 
ngx_°rög
("fastcgi_temp_path"),

418 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

419 
ngx_c⁄f_£t_∑th_¶Ÿ
,

420 
NGX_HTTP_LOC_CONF_OFFSET
,

421 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

422 
NULL
 },

424 { 
ngx_°rög
("fastcgi_max_temp_file_size"),

425 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

426 
ngx_c⁄f_£t_size_¶Ÿ
,

427 
NGX_HTTP_LOC_CONF_OFFSET
,

428 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

429 
NULL
 },

431 { 
ngx_°rög
("fastcgi_temp_file_write_size"),

432 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

433 
ngx_c⁄f_£t_size_¶Ÿ
,

434 
NGX_HTTP_LOC_CONF_OFFSET
,

435 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

436 
NULL
 },

438 { 
ngx_°rög
("fastcgi_next_upstream"),

439 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

440 
ngx_c⁄f_£t_bômask_¶Ÿ
,

441 
NGX_HTTP_LOC_CONF_OFFSET
,

442 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

443 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

445 { 
ngx_°rög
("fastcgi_param"),

446 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

447 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

448 
NGX_HTTP_LOC_CONF_OFFSET
,

449 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
∑øms_sour˚
),

450 
NULL
 },

452 { 
ngx_°rög
("fastcgi_pass_header"),

453 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

454 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

455 
NGX_HTTP_LOC_CONF_OFFSET
,

456 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

457 
NULL
 },

459 { 
ngx_°rög
("fastcgi_hide_header"),

460 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

461 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

462 
NGX_HTTP_LOC_CONF_OFFSET
,

463 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

464 
NULL
 },

466 { 
ngx_°rög
("fastcgi_ignore_headers"),

467 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

468 
ngx_c⁄f_£t_bômask_¶Ÿ
,

469 
NGX_HTTP_LOC_CONF_OFFSET
,

470 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

471 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

473 { 
ngx_°rög
("fastcgi_catch_stderr"),

474 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

475 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

476 
NGX_HTTP_LOC_CONF_OFFSET
,

477 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ˇtch_°dîr
),

478 
NULL
 },

480 { 
ngx_°rög
("fastcgi_keep_conn"),

481 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

482 
ngx_c⁄f_£t_Êag_¶Ÿ
,

483 
NGX_HTTP_LOC_CONF_OFFSET
,

484 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
kìp_c⁄n
),

485 
NULL
 },

487 
ngx_nuŒ_comm™d


491 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ_˘x
 = {

492 
ngx_hâp_Á°cgi_add_v¨übÀs
,

493 
NULL
,

495 
NULL
,

496 
NULL
,

498 
NULL
,

499 
NULL
,

501 
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
,

502 
ngx_hâp_Á°cgi_mîge_loc_c⁄f


506 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
 = {

507 
NGX_MODULE_V1
,

508 &
ngx_hâp_Á°cgi_moduÀ_˘x
,

509 
ngx_hâp_Á°cgi_comm™ds
,

510 
NGX_HTTP_MODULE
,

511 
NULL
,

512 
NULL
,

513 
NULL
,

514 
NULL
,

515 
NULL
,

516 
NULL
,

517 
NULL
,

518 
NGX_MODULE_V1_PADDING


522 
ngx_hâp_Á°cgi_ªque°_°¨t_t
 
	gngx_hâp_Á°cgi_ªque°_°¨t
 = {

524 
NGX_HTTP_FASTCGI_BEGIN_REQUEST
,

528 (
ngx_hâp_Á°cgi_begö_ªque°_t
),

533 
NGX_HTTP_FASTCGI_RESPONDER
,

538 
NGX_HTTP_FASTCGI_PARAMS
,

545 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_Á°cgi_v¨s
[] = {

547 { 
ngx_°rög
("Á°cgi_s¸ùt_«me"), 
NULL
,

548 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
, 0,

549 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

551 { 
ngx_°rög
("Á°cgi_∑th_öfo"), 
NULL
,

552 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
, 0,

553 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

555 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

559 
ngx_°r_t
 
	gngx_hâp_Á°cgi_hide_hódîs
[] = {

560 
ngx_°rög
("Status"),

561 
ngx_°rög
("X-Accel-Expires"),

562 
ngx_°rög
("X-Accel-Redirect"),

563 
ngx_°rög
("X-Accel-Limit-Rate"),

564 
ngx_°rög
("X-Accel-Buffering"),

565 
ngx_°rög
("X-Accel-Charset"),

566 
ngx_nuŒ_°rög


570 #i‡(
NGX_HTTP_CACHE
)

572 
ngx_keyvÆ_t
 
	gngx_hâp_Á°cgi_ˇche_hódîs
[] = {

573 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

574 
ngx_°rög
("$upstream_cache_last_modified") },

575 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

576 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

577 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

578 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

579 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

580 { 
ngx_nuŒ_°rög
,Çgx_null_string }

586 
ngx_∑th_öô_t
 
	gngx_hâp_Á°cgi_ãmp_∑th
 = {

587 
ngx_°rög
(
NGX_HTTP_FASTCGI_TEMP_PATH
), { 1, 2, 0 }

591 
ngx_öt_t


592 
	$ngx_hâp_Á°cgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

594 
ngx_öt_t
 
rc
;

595 
ngx_hâp_up°ªam_t
 *
u
;

596 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

597 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

599 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

600  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

603 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

604 i‡(
f
 =
NULL
) {

605  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

608 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

610 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

612 i‡(
Êcf
->
Á°cgi_Àngths
) {

613 i‡(
	`ngx_hâp_Á°cgi_evÆ
(
r
, 
Êcf
Ë!
NGX_OK
) {

614  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

618 
u
 = 
r
->
up°ªam
;

620 
	`ngx_°r_£t
(&
u
->
schema
, "fastcgi://");

621 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_moduÀ
;

623 
u
->
c⁄f
 = &
Êcf
->
up°ªam
;

625 #i‡(
NGX_HTTP_CACHE
)

626 
u
->
¸óã_key
 = 
ngx_hâp_Á°cgi_¸óã_key
;

628 
u
->
¸óã_ªque°
 = 
ngx_hâp_Á°cgi_¸óã_ªque°
;

629 
u
->
ªöô_ªque°
 = 
ngx_hâp_Á°cgi_ªöô_ªque°
;

630 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_Á°cgi_¥o˚ss_hódî
;

631 
u
->
ab‹t_ªque°
 = 
ngx_hâp_Á°cgi_ab‹t_ªque°
;

632 
u
->
föÆize_ªque°
 = 
ngx_hâp_Á°cgi_föÆize_ªque°
;

633 
r
->
°©e
 = 0;

635 
u
->
buf„rög
 = 
Êcf
->
up°ªam
.buffering;

637 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

638 i‡(
u
->
pùe
 =
NULL
) {

639  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

642 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_öput_fûãr
;

643 
u
->
pùe
->
öput_˘x
 = 
r
;

645 
u
->
öput_fûãr_öô
 = 
ngx_hâp_Á°cgi_öput_fûãr_öô
;

646 
u
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
;

647 
u
->
öput_fûãr_˘x
 = 
r
;

649 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

651 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

652  
rc
;

655  
NGX_DONE
;

656 
	}
}

659 
ngx_öt_t


660 
	$ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

662 
ngx_uæ_t
 
uæ
;

663 
ngx_hâp_up°ªam_t
 *
u
;

665 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

667 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
Êcf
->
Á°cgi_Àngths
->
ñts
, 0,

668 
Êcf
->
Á°cgi_vÆues
->
ñts
)

669 =
NULL
)

671  
NGX_ERROR
;

674 
uæ
.
no_ªsﬁve
 = 1;

676 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

677 i‡(
uæ
.
îr
) {

678 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

679 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

682  
NGX_ERROR
;

685 
u
 = 
r
->
up°ªam
;

687 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

688 i‡(
u
->
ªsﬁved
 =
NULL
) {

689  
NGX_ERROR
;

692 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

693 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

694 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

695 
u
->
ªsﬁved
->
«ddrs
 = 1;

696 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

699 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

700 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

701 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

704  
NGX_OK
;

705 
	}
}

708 #i‡(
NGX_HTTP_CACHE
)

710 
ngx_öt_t


711 
	$ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

713 
ngx_°r_t
 *
key
;

714 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

716 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

717 i‡(
key
 =
NULL
) {

718  
NGX_ERROR
;

721 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

723 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Êcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

724  
NGX_ERROR
;

727  
NGX_OK
;

728 
	}
}

733 
ngx_öt_t


734 
	$ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

736 
off_t
 
fûe_pos
;

737 
u_ch¨
 
ch
, *
pos
, *
lowˇ£_key
;

738 
size_t
 
size
, 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
∑ddög
,

739 
Æloˇãd
;

740 
ngx_uöt_t
 
i
, 
n
, 
√xt
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

741 
ngx_buf_t
 *
b
;

742 
ngx_chaö_t
 *
˛
, *
body
;

743 
ngx_li°_∑π_t
 *
∑π
;

744 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

745 
ngx_hâp_s¸ùt_code_±
 
code
;

746 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

747 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

748 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

749 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

751 
Àn
 = 0;

752 
hódî_∑øms
 = 0;

753 
ign‹ed
 = 
NULL
;

755 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

757 i‡(
Êcf
->
∑øms_Àn
) {

758 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

760 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
Êcf
->
Êushes
);

761 
À
.
Êushed
 = 1;

763 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

764 
À
.
ªque°
 = 
r
;

766 *(
uöçå_t
 *Ë
À
.
ù
) {

768 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

769 
key_Àn
 = 
	`lcode
(&
À
);

771 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

772 
skù_em±y
 = 
	`lcode
(&
À
);

774 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

775 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

777 
À
.
ù
 +(
uöçå_t
);

779 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

783 
Àn
 +1 + 
key_Àn
 + ((
vÆ_Àn
 > 127) ? 4 : 1) + val_len;

787 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

789 
Æloˇãd
 = 0;

790 
lowˇ£_key
 = 
NULL
;

792 i‡(
Êcf
->
hódî_∑øms
) {

793 
n
 = 0;

794 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

796 
∑π
) {

797 
n
 +
∑π
->
√…s
;

798 
∑π
 =Ö¨t->
√xt
;

801 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

802 i‡(
ign‹ed
 =
NULL
) {

803  
NGX_ERROR
;

807 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

808 
hódî
 = 
∑π
->
ñts
;

810 
i
 = 0; ; i++) {

812 i‡(
i
 >
∑π
->
√…s
) {

813 i‡(
∑π
->
√xt
 =
NULL
) {

817 
∑π
 =Ö¨t->
√xt
;

818 
hódî
 = 
∑π
->
ñts
;

819 
i
 = 0;

822 i‡(
Êcf
->
hódî_∑øms
) {

823 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

824 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

825 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

826 i‡(
lowˇ£_key
 =
NULL
) {

827  
NGX_ERROR
;

831 
hash
 = 0;

833 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

834 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

836 i‡(
ch
 >= 'A' && ch <= 'Z') {

837 
ch
 |= 0x20;

839 } i‡(
ch
 == '-') {

840 
ch
 = '_';

843 
hash
 = 
	`ngx_hash
(hash, 
ch
);

844 
lowˇ£_key
[
n
] = 
ch
;

847 i‡(
	`ngx_hash_föd
(&
Êcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

848 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

852 
n
 += ("HTTP_") - 1;

855 
n
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

858 
Àn
 +((
n
 > 127Ë? 4 : 1Ë+ ((
hódî
[
i
].
vÆue
.len > 127) ? 4 : 1)

859 + 
n
 + 
hódî
[
i
].
vÆue
.
Àn
;

864 i‡(
Àn
 > 65535) {

865 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

866 "Á°cgòªque°Ñec‹d i†toÿbig: %uz", 
Àn
);

867  
NGX_ERROR
;

871 
∑ddög
 = 8 - 
Àn
 % 8;

872 
∑ddög
 = (padding == 8) ? 0 :Öadding;

875 
size
 = (
ngx_hâp_Á°cgi_hódî_t
)

876 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

878 + (
ngx_hâp_Á°cgi_hódî_t
)

879 + 
Àn
 + 
∑ddög


880 + (
ngx_hâp_Á°cgi_hódî_t
)

882 + (
ngx_hâp_Á°cgi_hódî_t
);

885 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

886 i‡(
b
 =
NULL
) {

887  
NGX_ERROR
;

890 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

891 i‡(
˛
 =
NULL
) {

892  
NGX_ERROR
;

895 
˛
->
buf
 = 
b
;

897 
ngx_hâp_Á°cgi_ªque°_°¨t
.
br
.
Êags
 =

898 
Êcf
->
kìp_c⁄n
 ? 
NGX_HTTP_FASTCGI_KEEP_CONN
 : 0;

900 
	`ngx_mem˝y
(
b
->
pos
, &
ngx_hâp_Á°cgi_ªque°_°¨t
,

901 (
ngx_hâp_Á°cgi_ªque°_°¨t_t
));

903 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *)

904 (
b
->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

905 + (
ngx_hâp_Á°cgi_begö_ªque°_t
));

907 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

908 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

909 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

910 
h
->
ª£rved
 = 0;

912 
b
->
œ°
 = b->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

913 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

914 + (
ngx_hâp_Á°cgi_hódî_t
);

917 i‡(
Êcf
->
∑øms_Àn
) {

918 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

920 
e
.
ù
 = 
Êcf
->
∑øms
->
ñts
;

921 
e
.
pos
 = 
b
->
œ°
;

922 
e
.
ªque°
 = 
r
;

923 
e
.
Êushed
 = 1;

925 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

927 *(
uöçå_t
 *Ë
À
.
ù
) {

929 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

930 
key_Àn
 = (
u_ch¨
Ë
	`lcode
(&
À
);

932 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

933 
skù_em±y
 = 
	`lcode
(&
À
);

935 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

936 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

938 
À
.
ù
 +(
uöçå_t
);

940 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

941 
e
.
skù
 = 1;

943 *(
uöçå_t
 *Ë
e
.
ù
) {

944 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

945 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

947 
e
.
ù
 +(
uöçå_t
);

949 
e
.
skù
 = 0;

954 *
e
.
pos
++ = (
u_ch¨
Ë
key_Àn
;

956 i‡(
vÆ_Àn
 > 127) {

957 *
e
.
pos
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

958 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

959 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

960 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

963 *
e
.
pos
++ = (
u_ch¨
Ë
vÆ_Àn
;

966 *(
uöçå_t
 *Ë
e
.
ù
) {

967 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

968 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

970 
e
.
ù
 +(
uöçå_t
);

972 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

974 
key_Àn
, 
e
.
pos
 - (key_À¿+ 
vÆ_Àn
),

975 
vÆ_Àn
, 
e
.
pos
 - val_len);

978 
b
->
œ°
 = 
e
.
pos
;

982 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

984 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

985 
hódî
 = 
∑π
->
ñts
;

987 
i
 = 0; ; i++) {

989 i‡(
i
 >
∑π
->
√…s
) {

990 i‡(
∑π
->
√xt
 =
NULL
) {

994 
∑π
 =Ö¨t->
√xt
;

995 
hódî
 = 
∑π
->
ñts
;

996 
i
 = 0;

999 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

1000 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

1001 
√xt
;

1005 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

1006 i‡(
key_Àn
 > 127) {

1007 *
b
->
œ°
++ = (
u_ch¨
Ë(((
key_Àn
 >> 24) & 0x7f) | 0x80);

1008 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 16) & 0xff);

1009 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

1010 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1013 *
b
->
œ°
++ = (
u_ch¨
Ë
key_Àn
;

1016 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1017 i‡(
vÆ_Àn
 > 127) {

1018 *
b
->
œ°
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

1019 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

1020 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1021 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1024 *
b
->
œ°
++ = (
u_ch¨
Ë
vÆ_Àn
;

1027 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

1029 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

1030 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

1032 i‡(
ch
 >= 'a' && ch <= 'z') {

1033 
ch
 &= ~0x20;

1035 } i‡(
ch
 == '-') {

1036 
ch
 = '_';

1039 *
b
->
œ°
++ = 
ch
;

1042 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

1044 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1046 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 
vÆ_Àn
),

1047 
vÆ_Àn
, 
b
->
œ°
 - val_len);

1048 
√xt
:

1055 i‡(
∑ddög
) {

1056 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1057 
b
->
œ°
 +
∑ddög
;

1061 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1062 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1064 
h
->
vîsi⁄
 = 1;

1065 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_PARAMS
;

1066 
h
->
ªque°_id_hi
 = 0;

1067 
h
->
ªque°_id_lo
 = 1;

1068 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1069 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1070 
h
->
∑ddög_Àngth
 = 0;

1071 
h
->
ª£rved
 = 0;

1073 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1074 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1076 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_body
) {

1077 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

1078 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1080 #i‡(
NGX_SUPPRESS_WARN
)

1081 
fûe_pos
 = 0;

1082 
pos
 = 
NULL
;

1085 
body
) {

1087 i‡(
body
->
buf
->
ö_fûe
) {

1088 
fûe_pos
 = 
body
->
buf
->file_pos;

1091 
pos
 = 
body
->
buf
->pos;

1094 
√xt
 = 0;

1097 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1098 i‡(
b
 =
NULL
) {

1099  
NGX_ERROR
;

1102 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1104 i‡(
body
->
buf
->
ö_fûe
) {

1105 
b
->
fûe_pos
 = file_pos;

1106 
fûe_pos
 += 32 * 1024;

1108 i‡(
fûe_pos
 >
body
->
buf
->
fûe_œ°
) {

1109 
fûe_pos
 = 
body
->
buf
->
fûe_œ°
;

1110 
√xt
 = 1;

1113 
b
->
fûe_œ°
 = 
fûe_pos
;

1114 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1117 
b
->
pos
 =Öos;

1118 
pos
 += 32 * 1024;

1120 i‡(
pos
 >
body
->
buf
->
œ°
) {

1121 
pos
 = 
body
->
buf
->
œ°
;

1122 
√xt
 = 1;

1125 
b
->
œ°
 = 
pos
;

1126 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1129 
∑ddög
 = 8 - 
Àn
 % 8;

1130 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1132 
h
->
vîsi⁄
 = 1;

1133 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1134 
h
->
ªque°_id_hi
 = 0;

1135 
h
->
ªque°_id_lo
 = 1;

1136 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1137 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1138 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1139 
h
->
ª£rved
 = 0;

1141 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1142 i‡(
˛
->
√xt
 =
NULL
) {

1143  
NGX_ERROR
;

1146 
˛
 = cl->
√xt
;

1147 
˛
->
buf
 = 
b
;

1149 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

1150 (
ngx_hâp_Á°cgi_hódî_t
)

1151 + 
∑ddög
);

1152 i‡(
b
 =
NULL
) {

1153  
NGX_ERROR
;

1156 i‡(
∑ddög
) {

1157 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1158 
b
->
œ°
 +
∑ddög
;

1161 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1162 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1164 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1165 i‡(
˛
->
√xt
 =
NULL
) {

1166  
NGX_ERROR
;

1169 
˛
 = cl->
√xt
;

1170 
˛
->
buf
 = 
b
;

1172 } !
√xt
);

1174 
body
 = body->
√xt
;

1178 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1181 
h
->
vîsi⁄
 = 1;

1182 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1183 
h
->
ªque°_id_hi
 = 0;

1184 
h
->
ªque°_id_lo
 = 1;

1185 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1186 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1187 
h
->
∑ddög_Àngth
 = 0;

1188 
h
->
ª£rved
 = 0;

1190 
˛
->
√xt
 = 
NULL
;

1192  
NGX_OK
;

1193 
	}
}

1196 
ngx_öt_t


1197 
	$ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1199 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1201 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1203 i‡(
f
 =
NULL
) {

1204  
NGX_OK
;

1207 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1208 
f
->
Á°cgi_°dout
 = 0;

1209 
f
->
œrge_°dîr
 = 0;

1211 i‡(
f
->
•lô_∑πs
) {

1212 
f
->
•lô_∑πs
->
√…s
 = 0;

1215 
r
->
°©e
 = 0;

1217  
NGX_OK
;

1218 
	}
}

1221 
ngx_öt_t


1222 
	$ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1224 
u_ch¨
 *
p
, *
msg
, *
°¨t
, *
œ°
,

1225 *
∑π_°¨t
, *
∑π_íd
;

1226 
size_t
 
size
;

1227 
ngx_°r_t
 *
°©us_löe
, *
∑âîn
;

1228 
ngx_öt_t
 
rc
, 
°©us
;

1229 
ngx_buf_t
 
buf
;

1230 
ngx_uöt_t
 
i
;

1231 
ngx_èbÀ_ñt_t
 *
h
;

1232 
ngx_hâp_up°ªam_t
 *
u
;

1233 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1234 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1235 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1236 
ngx_hâp_Á°cgi_•lô_∑π_t
 *
∑π
;

1237 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1239 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1241 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1243 
u
 = 
r
->
up°ªam
;

1247 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1249 
f
->
pos
 = 
u
->
buf„r
.pos;

1250 
f
->
œ°
 = 
u
->
buf„r
.last;

1252 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1254 
u
->
buf„r
.
pos
 = 
f
->pos;

1255 
u
->
buf„r
.
œ°
 = 
f
->last;

1257 i‡(
rc
 =
NGX_AGAIN
) {

1258  
NGX_AGAIN
;

1261 i‡(
rc
 =
NGX_ERROR
) {

1262  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1265 i‡(
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDOUT


1266 && 
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDERR
)

1268 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1270 
f
->
ty≥
);

1272  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1275 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1276 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1279  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1283 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1285 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 < u->buf„r.
œ°
) {

1286 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1287 
u
->
buf„r
.
pos
 +
f
->
∑ddög
;

1292 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 =u->buf„r.
œ°
) {

1293 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1294 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1296  
NGX_AGAIN
;

1299 
f
->
∑ddög
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1300 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1302  
NGX_AGAIN
;

1308 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1310 i‡(
f
->
Àngth
) {

1311 
msg
 = 
u
->
buf„r
.
pos
;

1313 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 <u->buf„r.
œ°
) {

1314 
u
->
buf„r
.
pos
 +
f
->
Àngth
;

1315 
f
->
Àngth
 = 0;

1316 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1319 
f
->
Àngth
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1320 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1323 
p
 = 
u
->
buf„r
.
pos
 - 1; 
msg
 <Ö;Ö--) {

1324 i‡(*
p
 !
LF
 && *∞!
CR
 && *p != '.' && *p != ' ') {

1329 
p
++;

1331 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1332 "Fa°CGI síàö stdîr: \"%*s\"", 
p
 - 
msg
, msg);

1334 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1336 i‡(
Êcf
->
ˇtch_°dîr
) {

1337 
∑âîn
 = 
Êcf
->
ˇtch_°dîr
->
ñts
;

1339 
i
 = 0; i < 
Êcf
->
ˇtch_°dîr
->
√…s
; i++) {

1340 i‡(
	`ngx_°∫°r
(
msg
, (*Ë
∑âîn
[
i
].
d©a
,

1341 
p
 - 
msg
)

1342 !
NULL
)

1344  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1349 i‡(
u
->
buf„r
.
pos
 =u->buf„r.
œ°
) {

1351 i‡(!
f
->
Á°cgi_°dout
) {

1358 #i‡(
NGX_HTTP_CACHE
)

1359 i‡(
r
->
ˇche
) {

1360 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t


1361 + 
r
->
ˇche
->
hódî_°¨t
;

1363 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1366 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1368 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1369 
f
->
œrge_°dîr
 = 1;

1372  
NGX_AGAIN
;

1376 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1385 #i‡(
NGX_HTTP_CACHE
)

1387 i‡(
f
->
œrge_°dîr
 && 
r
->
ˇche
) {

1388 
u_ch¨
 *
°¨t
;

1389 
ssize_t
 
Àn
;

1390 
ngx_hâp_Á°cgi_hódî_t
 *
fh
;

1392 
°¨t
 = 
u
->
buf„r
.°¨à+ 
r
->
ˇche
->
hódî_°¨t
;

1394 
Àn
 = 
u
->
buf„r
.
pos
 - 
°¨t
 - 2 * (
ngx_hâp_Á°cgi_hódî_t
);

1404 i‡(
Àn
 >= 0) {

1405 
fh
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
°¨t
;

1406 
fh
->
vîsi⁄
 = 1;

1407 
fh
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDERR
;

1408 
fh
->
ªque°_id_hi
 = 0;

1409 
fh
->
ªque°_id_lo
 = 1;

1410 
fh
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1411 
fh
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1412 
fh
->
∑ddög_Àngth
 = 0;

1413 
fh
->
ª£rved
 = 0;

1416 
r
->
ˇche
->
hódî_°¨t
 +
u
->
buf„r
.
pos
 - 
°¨t


1417 - (
ngx_hâp_Á°cgi_hódî_t
);

1420 
f
->
œrge_°dîr
 = 0;

1425 
f
->
Á°cgi_°dout
 = 1;

1427 
°¨t
 = 
u
->
buf„r
.
pos
;

1429 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 < u->buf„r.
œ°
) {

1436 
œ°
 = 
u
->
buf„r
.last;

1437 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
 + 
f
->
Àngth
;

1440 
œ°
 = 
NULL
;

1445 
∑π_°¨t
 = 
u
->
buf„r
.
pos
;

1446 
∑π_íd
 = 
u
->
buf„r
.
œ°
;

1448 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
u
->
buf„r
, 1);

1450 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1451 "hâ∞Á°cgò∑r£r: %d", 
rc
);

1453 i‡(
rc
 =
NGX_AGAIN
) {

1457 i‡(
rc
 =
NGX_OK
) {

1461 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
hódîs
);

1462 i‡(
h
 =
NULL
) {

1463  
NGX_ERROR
;

1466 i‡(
f
->
•lô_∑πs
 && f->•lô_∑πs->
√…s
) {

1468 
∑π
 = 
f
->
•lô_∑πs
->
ñts
;

1469 
size
 = 
u
->
buf„r
.
pos
 - 
∑π_°¨t
;

1471 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1472 
size
 +
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
;

1475 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
size
);

1476 i‡(
p
 =
NULL
) {

1477  
NGX_ERROR
;

1480 
buf
.
pos
 = 
p
;

1482 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1483 
p
 = 
	`ngx_˝ymem
’, 
∑π
[
i
].
°¨t
,

1484 
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
);

1487 
p
 = 
	`ngx_˝ymem
’, 
∑π_°¨t
, 
u
->
buf„r
.
pos
 -Öart_start);

1489 
buf
.
œ°
 = 
p
;

1491 
f
->
•lô_∑πs
->
√…s
 = 0;

1493 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
buf
, 1);

1495 i‡(
rc
 !
NGX_OK
) {

1496 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1499  
NGX_ERROR
;

1502 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1503 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1504 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1506 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1507 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1508 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1510 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1511 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1512  
NGX_ERROR
;

1517 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1518 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1520 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1521 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1522 + 
h
->
key
.
Àn
);

1523 i‡(
h
->
key
.
d©a
 =
NULL
) {

1524  
NGX_ERROR
;

1527 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1528 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1

1529 + 
h
->
vÆue
.
Àn
 + 1;

1531 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1532 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1533 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1534 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1537 
h
->
hash
 = 
r
->
hódî_hash
;

1539 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1540 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1543 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1546 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1547 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1549 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1550  
NGX_ERROR
;

1553 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1555 &
h
->
key
, &h->
vÆue
);

1557 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1566 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1570 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1573 i‡(
u
->
hódîs_ö
.
°©us
) {

1574 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1576 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1578 i‡(
°©us
 =
NGX_ERROR
) {

1579 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1581 
°©us_löe
);

1582  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1585 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1586 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1588 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1589 
u
->
hódîs_ö
.
°©us_n
 = 302;

1590 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1594 
u
->
hódîs_ö
.
°©us_n
 = 200;

1595 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1598 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1599 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1607 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1610  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1613 i‡(
œ°
) {

1614 
u
->
buf„r
.
œ°
 =Üast;

1617 
f
->
Àngth
 -
u
->
buf„r
.
pos
 - 
°¨t
;

1619 i‡(
f
->
Àngth
 == 0) {

1620 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1623 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1624  
NGX_OK
;

1627 i‡(
rc
 =
NGX_OK
) {

1633 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1636 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1637 
f
->
•lô_∑πs
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 1,

1638 (
ngx_hâp_Á°cgi_•lô_∑π_t
));

1639 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1640  
NGX_ERROR
;

1644 
∑π
 = 
	`ngx_¨øy_push
(
f
->
•lô_∑πs
);

1645 i‡(
∑π
 =
NULL
) {

1646  
NGX_ERROR
;

1649 
∑π
->
°¨t
 = 
∑π_°¨t
;

1650 
∑π
->
íd
 = 
∑π_íd
;

1652 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1656  
NGX_AGAIN
;

1658 
	}
}

1661 
ngx_öt_t


1662 
	$ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
)

1664 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1665 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1667 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1669 
r
->
up°ªam
->
pùe
->
Àngth
 = 
Êcf
->
kìp_c⁄n
 ?

1670 (
off_t
Ë(
ngx_hâp_Á°cgi_hódî_t
) : -1;

1672  
NGX_OK
;

1673 
	}
}

1676 
ngx_öt_t


1677 
	$ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1679 
u_ch¨
 *
m
, *
msg
;

1680 
ngx_öt_t
 
rc
;

1681 
ngx_buf_t
 *
b
, **
¥ev
;

1682 
ngx_chaö_t
 *
˛
;

1683 
ngx_hâp_ªque°_t
 *
r
;

1684 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1685 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1687 i‡(
buf
->
pos
 =buf->
œ°
) {

1688  
NGX_OK
;

1691 
r
 = 
p
->
öput_˘x
;

1692 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1693 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1695 
b
 = 
NULL
;

1696 
¥ev
 = &
buf
->
shadow
;

1698 
f
->
pos
 = 
buf
->pos;

1699 
f
->
œ°
 = 
buf
->last;

1702 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1704 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1706 i‡(
rc
 =
NGX_AGAIN
) {

1710 i‡(
rc
 =
NGX_ERROR
) {

1711  
NGX_ERROR
;

1714 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1715 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1717 i‡(!
Êcf
->
kìp_c⁄n
) {

1718 
p
->
up°ªam_d⁄e
 = 1;

1721 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1727 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1729 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1732 i‡(!
Êcf
->
kìp_c⁄n
) {

1733 
p
->
up°ªam_d⁄e
 = 1;

1742 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1744 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1746 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1747 
p
->
up°ªam_d⁄e
 = 1;

1751 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1752 
p
->
up°ªam_d⁄e
 = 1;

1753 
r
->
up°ªam
->
kì∑live
 = 1;

1757 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1762 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1763 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1764 
f
->
pos
 +f->
∑ddög
;

1769 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1770 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1775 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1783 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1785 i‡(
f
->
Àngth
) {

1787 i‡(
f
->
pos
 =f->
œ°
) {

1791 
msg
 = 
f
->
pos
;

1793 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1794 
f
->
pos
 +f->
Àngth
;

1795 
f
->
Àngth
 = 0;

1796 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1799 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1800 
f
->
pos
 = f->
œ°
;

1803 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

1804 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

1809 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
, 0,

1811 
m
 + 1 - 
msg
, msg);

1814 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1820 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1822 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1823 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1824 
f
->
pos
 +f->
Àngth
;

1829 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1837 i‡(
f
->
pos
 =f->
œ°
) {

1841 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

1842 i‡(
˛
 =
NULL
) {

1843  
NGX_ERROR
;

1846 
b
 = 
˛
->
buf
;

1848 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1850 
b
->
pos
 = 
f
->pos;

1851 
b
->
°¨t
 = 
buf
->start;

1852 
b
->
íd
 = 
buf
->end;

1853 
b
->
èg
 = 
p
->tag;

1854 
b
->
ãmp‹¨y
 = 1;

1855 
b
->
ªcy˛ed
 = 1;

1857 *
¥ev
 = 
b
;

1858 
¥ev
 = &
b
->
shadow
;

1860 i‡(
p
->
ö
) {

1861 *
p
->
œ°_ö
 = 
˛
;

1863 
p
->
ö
 = 
˛
;

1865 
p
->
œ°_ö
 = &
˛
->
√xt
;

1868  
b
->
num
 = 
buf
->num;

1870 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1871 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

1873 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1874 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1875 
f
->
pos
 +f->
Àngth
;

1876 
b
->
œ°
 = 
f
->
pos
;

1881 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1883 
b
->
œ°
 = 
f
->last;

1889 i‡(
Êcf
->
kìp_c⁄n
) {

1893 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1894 
p
->
Àngth
 = 1;

1896 } i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1897 
p
->
Àngth
 = 
f
->
∑ddög
;

1902 
p
->
Àngth
 = 
f
->length;

1906 i‡(
b
) {

1907 
b
->
shadow
 = 
buf
;

1908 
b
->
œ°_shadow
 = 1;

1910 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1911 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

1913  
NGX_OK
;

1918 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

1919  
NGX_ERROR
;

1922  
NGX_OK
;

1923 
	}
}

1926 
ngx_öt_t


1927 
	$ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

1929 
u_ch¨
 *
m
, *
msg
;

1930 
ngx_öt_t
 
rc
;

1931 
ngx_buf_t
 *
b
, *
buf
;

1932 
ngx_chaö_t
 *
˛
, **
Œ
;

1933 
ngx_hâp_ªque°_t
 *
r
;

1934 
ngx_hâp_up°ªam_t
 *
u
;

1935 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1937 
r
 = 
d©a
;

1938 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1940 
u
 = 
r
->
up°ªam
;

1941 
buf
 = &
u
->
buf„r
;

1943 
buf
->
pos
 = buf->
œ°
;

1944 
buf
->
œ°
 +
byãs
;

1946 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

1947 
Œ
 = &
˛
->
√xt
;

1950 
f
->
pos
 = 
buf
->pos;

1951 
f
->
œ°
 = 
buf
->last;

1954 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1956 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1958 i‡(
rc
 =
NGX_AGAIN
) {

1962 i‡(
rc
 =
NGX_ERROR
) {

1963  
NGX_ERROR
;

1966 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1967 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1969 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1976 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1978 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1980 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1981 
u
->
Àngth
 = 0;

1985 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1986 
u
->
Àngth
 = 0;

1987 
u
->
kì∑live
 = 1;

1991 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1996 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1997 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1998 
f
->
pos
 +f->
∑ddög
;

2003 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2004 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2009 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2017 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

2019 i‡(
f
->
Àngth
) {

2021 i‡(
f
->
pos
 =f->
œ°
) {

2025 
msg
 = 
f
->
pos
;

2027 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2028 
f
->
pos
 +f->
Àngth
;

2029 
f
->
Àngth
 = 0;

2030 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2033 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2034 
f
->
pos
 = f->
œ°
;

2037 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

2038 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

2043 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2045 
m
 + 1 - 
msg
, msg);

2048 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2054 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2056 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2057 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2058 
f
->
pos
 +f->
Àngth
;

2063 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2071 i‡(
f
->
pos
 =f->
œ°
) {

2075 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2076 i‡(
˛
 =
NULL
) {

2077  
NGX_ERROR
;

2080 *
Œ
 = 
˛
;

2081 
Œ
 = &
˛
->
√xt
;

2083 
b
 = 
˛
->
buf
;

2085 
b
->
Êush
 = 1;

2086 
b
->
mem‹y
 = 1;

2088 
b
->
pos
 = 
f
->pos;

2089 
b
->
èg
 = 
u
->
ouçut
.tag;

2091 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2092 "hâ∞Á°cgòouçuàbu‡%p", 
b
->
pos
);

2094 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2095 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2096 
f
->
pos
 +f->
Àngth
;

2097 
b
->
œ°
 = 
f
->
pos
;

2102 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2103 
b
->
œ°
 = 
f
->last;

2110 i‡(
r
->
subªque°_ö_mem‹y
) {

2112 
˛
 = 
u
->
out_bufs
;

2114 i‡(
˛
) {

2115 
buf
->
pos
 = 
˛
->buf->pos;

2118 
buf
->
œ°
 = buf->
pos
;

2120 
˛
 = 
u
->
out_bufs
; cl; c»˛->
√xt
) {

2121 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2123 
˛
->
buf
->
pos
, cl->buf->
œ°
, 
	`ngx_buf_size
(cl->buf));

2125 i‡(
buf
->
œ°
 =
˛
->buf->
pos
) {

2126 
buf
->
œ°
 = 
˛
->buf->last;

2130 
buf
->
œ°
 = 
	`ngx_movemem
(buf->œ°, 
˛
->buf->
pos
,

2131 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

2133 
˛
->
buf
->
pos
 = buf->
œ°
 - (cl->buf->last - cl->buf->pos);

2134 
˛
->
buf
->
œ°
 = buf->last;

2138  
NGX_OK
;

2139 
	}
}

2142 
ngx_öt_t


2143 
	$ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

2144 
ngx_hâp_Á°cgi_˘x_t
 *
f
)

2146 
u_ch¨
 
ch
, *
p
;

2147 
ngx_hâp_Á°cgi_°©e_e
 
°©e
;

2149 
°©e
 = 
f
->state;

2151 
p
 = 
f
->
pos
;Ö < f->
œ°
;Ö++) {

2153 
ch
 = *
p
;

2155 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2156 "hâ∞Á°cgòªc‹d byã: %02Xd", 
ch
);

2158 
°©e
) {

2160 
ngx_hâp_Á°cgi_°_vîsi⁄
:

2161 i‡(
ch
 != 1) {

2162 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2164 "¥Ÿocﬁ vîsi⁄: %d", 
ch
);

2165  
NGX_ERROR
;

2167 
°©e
 = 
ngx_hâp_Á°cgi_°_ty≥
;

2170 
ngx_hâp_Á°cgi_°_ty≥
:

2171 
ch
) {

2172 
NGX_HTTP_FASTCGI_STDOUT
:

2173 
NGX_HTTP_FASTCGI_STDERR
:

2174 
NGX_HTTP_FASTCGI_END_REQUEST
:

2175 
f
->
ty≥
 = (
ngx_uöt_t
Ë
ch
;

2178 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2180 "ªc‹dÅy≥: %d", 
ch
);

2181  
NGX_ERROR
;

2184 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_hi
;

2189 
ngx_hâp_Á°cgi_°_ªque°_id_hi
:

2190 i‡(
ch
 != 0) {

2191 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2193 "ªque° id high byã: %d", 
ch
);

2194  
NGX_ERROR
;

2196 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_lo
;

2199 
ngx_hâp_Á°cgi_°_ªque°_id_lo
:

2200 i‡(
ch
 != 1) {

2201 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2203 "ªque° idÜow byã: %d", 
ch
);

2204  
NGX_ERROR
;

2206 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
;

2209 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
:

2210 
f
->
Àngth
 = 
ch
 << 8;

2211 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
;

2214 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
:

2215 
f
->
Àngth
 |(
size_t
Ë
ch
;

2216 
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
;

2219 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
:

2220 
f
->
∑ddög
 = (
size_t
Ë
ch
;

2221 
°©e
 = 
ngx_hâp_Á°cgi_°_ª£rved
;

2224 
ngx_hâp_Á°cgi_°_ª£rved
:

2225 
°©e
 = 
ngx_hâp_Á°cgi_°_d©a
;

2227 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2228 "hâ∞Á°cgòªc‹dÜígth: %z", 
f
->
Àngth
);

2230 
f
->
pos
 = 
p
 + 1;

2231 
f
->
°©e
 = state;

2233  
NGX_OK
;

2236 
ngx_hâp_Á°cgi_°_d©a
:

2237 
ngx_hâp_Á°cgi_°_∑ddög
:

2242 
f
->
°©e
 = state;

2244  
NGX_AGAIN
;

2245 
	}
}

2249 
	$ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2255 
	}
}

2259 
	$ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2261 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2265 
	}
}

2268 
ngx_öt_t


2269 
	$ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2271 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2273 
v
 = 
ngx_hâp_Á°cgi_v¨s
; v->
«me
.
Àn
; v++) {

2274 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2275 i‡(
v¨
 =
NULL
) {

2276  
NGX_ERROR
;

2279 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2280 
v¨
->
d©a
 = 
v
->data;

2283  
NGX_OK
;

2284 
	}
}

2288 
	$ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2290 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
;

2292 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_loc_c⁄f_t
));

2293 i‡(
c⁄f
 =
NULL
) {

2294  
NULL
;

2315 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2316 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2317 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2318 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2320 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2322 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2323 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2324 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2326 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2327 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2329 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2330 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2331 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2333 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2334 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2336 #i‡(
NGX_HTTP_CACHE
)

2337 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

2338 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2339 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2340 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2341 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2342 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2343 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2344 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

2347 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2348 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2350 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2353 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2355 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2357 
c⁄f
->
ˇtch_°dîr
 = 
NGX_CONF_UNSET_PTR
;

2359 
c⁄f
->
kìp_c⁄n
 = 
NGX_CONF_UNSET
;

2361 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "fastcgi");

2363  
c⁄f
;

2364 
	}
}

2368 
	$ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2370 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2371 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2373 
size_t
 
size
;

2374 
ngx_hash_öô_t
 
hash
;

2375 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2377 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

2378 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2379 
¥ev
->
up°ªam
.
°‹e
, 0);

2381 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

2382 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2383 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2387 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2388 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2390 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2391 
¥ev
->
up°ªam
.
buf„rög
, 1);

2393 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2394 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2396 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2397 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2399 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2400 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2402 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2403 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2405 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2406 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2408 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2409 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2411 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2412 
¥ev
->
up°ªam
.
buf„r_size
,

2413 (
size_t
Ë
ngx_∑gesize
);

2416 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2417 8, 
ngx_∑gesize
);

2419 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2420 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2422  
NGX_CONF_ERROR
;

2426 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2427 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2428 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2432 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2433 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2434 
NGX_CONF_UNSET_SIZE
);

2436 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2437 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2439 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2440 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2443 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2444 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2449  
NGX_CONF_ERROR
;

2452 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2453 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2455 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2459  
NGX_CONF_ERROR
;

2463 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2464 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2465 
NGX_CONF_UNSET_SIZE
);

2467 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2468 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2470 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2471 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2474 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2475 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2480  
NGX_CONF_ERROR
;

2484 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2485 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2486 
NGX_CONF_UNSET_SIZE
);

2488 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2489 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2491 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2492 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2495 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2496 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2498 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2504  
NGX_CONF_ERROR
;

2508 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2509 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2510 
NGX_CONF_BITMASK_SET
);

2513 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2514 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2515 (
NGX_CONF_BITMASK_SET


2516 |
NGX_HTTP_UPSTREAM_FT_ERROR


2517 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2519 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2520 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2521 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2524 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2525 
¥ev
->
up°ªam
.
ãmp_∑th
,

2526 &
ngx_hâp_Á°cgi_ãmp_∑th
)

2527 !
NGX_OK
)

2529  
NGX_CONF_ERROR
;

2532 #i‡(
NGX_HTTP_CACHE
)

2534 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2535 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

2537 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

2538 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2540 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

2542 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2544 &
shm_z⁄e
->
shm
.
«me
);

2546  
NGX_CONF_ERROR
;

2549 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2550 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2552 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2553 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2554 (
NGX_CONF_BITMASK_SET


2555 |
NGX_HTTP_UPSTREAM_FT_OFF
));

2557 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2558 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


2559 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2562 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2563 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

2566 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

2567 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

2570 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

2572 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

2573 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

2575 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

2576 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

2578 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

2579 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

2581 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

2582 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

2585 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

2586 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

2588 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

2589 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

2591 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

2592 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

2596 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

2597 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

2598 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

2599 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

2601 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

2602 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

2604 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ˇtch_°dîr
, 
¥ev
->ˇtch_°dîr, 
NULL
);

2606 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
kìp_c⁄n
, 
¥ev
->keep_conn, 0);

2609 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ödex
, 
¥ev
->index, "");

2611 
hash
.
max_size
 = 512;

2612 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

2613 
hash
.
«me
 = "fastcgi_hide_headers_hash";

2615 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

2616 &
¥ev
->
up°ªam
, 
ngx_hâp_Á°cgi_hide_hódîs
, &
hash
)

2617 !
NGX_OK
)

2619  
NGX_CONF_ERROR
;

2622 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

2623 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

2626 i‡(
c⁄f
->
Á°cgi_Àngths
 =
NULL
) {

2627 
c⁄f
->
Á°cgi_Àngths
 = 
¥ev
->fastcgi_lengths;

2628 
c⁄f
->
Á°cgi_vÆues
 = 
¥ev
->fastcgi_values;

2631 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
Á°cgi_Àngths
) {

2632 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2633 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

2634 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

2638 #i‡(
NGX_PCRE
)

2639 i‡(
c⁄f
->
•lô_ªgex
 =
NULL
) {

2640 
c⁄f
->
•lô_ªgex
 = 
¥ev
->split_regex;

2641 
c⁄f
->
•lô_«me
 = 
¥ev
->split_name;

2645 i‡(
	`ngx_hâp_Á°cgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

2646  
NGX_CONF_ERROR
;

2649  
NGX_CONF_OK
;

2650 
	}
}

2653 
ngx_öt_t


2654 
	$ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

2655 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
)

2657 
u_ch¨
 *
p
;

2658 
size_t
 
size
;

2659 
uöçå_t
 *
code
;

2660 
ngx_uöt_t
 
i
, 
n§c
;

2661 
ngx_¨øy_t
 
hódîs_«mes
;

2662 #i‡(
NGX_HTTP_CACHE
)

2663 
ngx_¨øy_t
 
∑øms_mîged
;

2665 
ngx_hash_key_t
 *
hk
;

2666 
ngx_hash_öô_t
 
hash
;

2667 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

2668 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2669 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

2671 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

2672 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

2674 i‡(
¥ev
->
hódîs_hash
.
buckës


2675 #i‡(
NGX_HTTP_CACHE
)

2676 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

2677 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

2681 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

2682 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

2683 
c⁄f
->
∑øms
 = 
¥ev
->params;

2684 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

2685 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

2687  
NGX_OK
;

2691 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


2692 #i‡(
NGX_HTTP_CACHE
)

2693 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

2697 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

2698  
NGX_OK
;

2701 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

2702 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

2703  
NGX_ERROR
;

2706 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

2707 i‡(
c⁄f
->
∑øms
 =
NULL
) {

2708  
NGX_ERROR
;

2711 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

2712 !
NGX_OK
)

2714  
NGX_ERROR
;

2717 i‡(
c⁄f
->
∑øms_sour˚
) {

2718 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

2719 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

2722 
§c
 = 
NULL
;

2723 
n§c
 = 0;

2726 #i‡(
NGX_HTTP_CACHE
)

2728 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

2729 
ngx_keyvÆ_t
 *
h
;

2730 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

2732 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

2733 (
ngx_hâp_up°ªam_∑øm_t
))

2734 !
NGX_OK
)

2736  
NGX_ERROR
;

2739 
i
 = 0; i < 
n§c
; i++) {

2741 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2742 i‡(
s
 =
NULL
) {

2743  
NGX_ERROR
;

2746 *
s
 = 
§c
[
i
];

2749 
h
 = 
ngx_hâp_Á°cgi_ˇche_hódîs
;

2751 
h
->
key
.
Àn
) {

2753 
§c
 = 
∑øms_mîged
.
ñts
;

2754 
n§c
 = 
∑øms_mîged
.
√…s
;

2756 
i
 = 0; i < 
n§c
; i++) {

2757 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

2758 
√xt
;

2762 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2763 i‡(
s
 =
NULL
) {

2764  
NGX_ERROR
;

2767 
s
->
key
 = 
h
->key;

2768 
s
->
vÆue
 = 
h
->value;

2769 
s
->
skù_em±y
 = 1;

2771 
√xt
:

2773 
h
++;

2776 
§c
 = 
∑øms_mîged
.
ñts
;

2777 
n§c
 = 
∑øms_mîged
.
√…s
;

2782 
i
 = 0; i < 
n§c
; i++) {

2784 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

2785 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

2787 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

2788 i‡(
hk
 =
NULL
) {

2789  
NGX_ERROR
;

2792 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

2793 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

2794 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

2795 
hk
->
vÆue
 = (*) 1;

2797 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

2802 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

2803 (
ngx_hâp_s¸ùt_c›y_code_t
));

2804 i‡(
c›y
 =
NULL
) {

2805  
NGX_ERROR
;

2808 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

2809 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2811 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

2812 (
ngx_hâp_s¸ùt_c›y_code_t
));

2813 i‡(
c›y
 =
NULL
) {

2814  
NGX_ERROR
;

2817 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

2818 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

2821 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2822 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

2823 & ~((
uöçå_t
) - 1);

2825 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

2826 i‡(
c›y
 =
NULL
) {

2827  
NGX_ERROR
;

2830 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2831 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2833 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2834 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2837 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2839 
sc
.
cf
 = cf;

2840 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

2841 
sc
.
Êushes
 = &
c⁄f
->flushes;

2842 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

2843 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

2845 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2846  
NGX_ERROR
;

2849 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2850 i‡(
code
 =
NULL
) {

2851  
NGX_ERROR
;

2854 *
code
 = (
uöçå_t
Ë
NULL
;

2857 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

2858 i‡(
code
 =
NULL
) {

2859  
NGX_ERROR
;

2862 *
code
 = (
uöçå_t
Ë
NULL
;

2865 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2866 i‡(
code
 =
NULL
) {

2867  
NGX_ERROR
;

2870 *
code
 = (
uöçå_t
Ë
NULL
;

2872 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

2874 
hash
.hash = &
c⁄f
->
hódîs_hash
;

2875 
hash
.
key
 = 
ngx_hash_key_lc
;

2876 
hash
.
max_size
 = 512;

2877 
hash
.
buckë_size
 = 64;

2878 
hash
.
«me
 = "fastcgi_params_hash";

2879 
hash
.
poﬁ
 = 
cf
->pool;

2880 
hash
.
ãmp_poﬁ
 = 
NULL
;

2882  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

2883 
	}
}

2886 
ngx_öt_t


2887 
	$ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2888 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2890 
u_ch¨
 *
p
;

2891 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2892 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2894 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2896 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2898 i‡(
f
 =
NULL
) {

2899  
NGX_ERROR
;

2902 i‡(
f
->
s¸ùt_«me
.
Àn
 == 0

2903 || 
f
->
s¸ùt_«me
.
d©a
[f->s¸ùt_«me.
Àn
 - 1] != '/')

2905 
v
->
Àn
 = 
f
->
s¸ùt_«me
.len;

2906 
v
->
vÆid
 = 1;

2907 
v
->
no_ˇchóbÀ
 = 0;

2908 
v
->
nŸ_found
 = 0;

2909 
v
->
d©a
 = 
f
->
s¸ùt_«me
.data;

2911  
NGX_OK
;

2914 
v
->
Àn
 = 
f
->
s¸ùt_«me
.À¿+ 
Êcf
->
ödex
.len;

2916 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2917 i‡(
v
->
d©a
 =
NULL
) {

2918  
NGX_ERROR
;

2921 
p
 = 
	`ngx_c›y
(
v
->
d©a
, 
f
->
s¸ùt_«me
.d©a, f->s¸ùt_«me.
Àn
);

2922 
	`ngx_mem˝y
(
p
, 
Êcf
->
ödex
.
d©a
, flcf->ödex.
Àn
);

2924  
NGX_OK
;

2925 
	}
}

2928 
ngx_öt_t


2929 
	$ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2930 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2932 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2933 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2935 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2937 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2939 i‡(
f
 =
NULL
) {

2940  
NGX_ERROR
;

2943 
v
->
Àn
 = 
f
->
∑th_öfo
.len;

2944 
v
->
vÆid
 = 1;

2945 
v
->
no_ˇchóbÀ
 = 0;

2946 
v
->
nŸ_found
 = 0;

2947 
v
->
d©a
 = 
f
->
∑th_öfo
.data;

2949  
NGX_OK
;

2950 
	}
}

2953 
ngx_hâp_Á°cgi_˘x_t
 *

2954 
	$ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

2956 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2957 #i‡(
NGX_PCRE
)

2958 
ngx_öt_t
 
n
;

2959 
ˇ±uªs
[(1 + 2) * 3];

2961 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2963 i‡(
f
 =
NULL
) {

2964 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

2965 i‡(
f
 =
NULL
) {

2966  
NULL
;

2969 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

2972 i‡(
f
->
s¸ùt_«me
.
Àn
) {

2973  
f
;

2976 i‡(
Êcf
->
•lô_ªgex
 =
NULL
) {

2977 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2978  
f
;

2981 
n
 = 
	`ngx_ªgex_exec
(
Êcf
->
•lô_ªgex
, &
r
->
uri
, 
ˇ±uªs
, (1 + 2) * 3);

2983 i‡(
n
 >= 0) {

2984 
f
->
s¸ùt_«me
.
Àn
 = 
ˇ±uªs
[3] - captures[2];

2985 
f
->
s¸ùt_«me
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[2];

2987 
f
->
∑th_öfo
.
Àn
 = 
ˇ±uªs
[5] - captures[4];

2988 
f
->
∑th_öfo
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[4];

2990  
f
;

2993 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2994 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2995  
f
;

2998 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2999 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

3000 
n
, &
r
->
uri
, &
Êcf
->
•lô_«me
);

3001  
NULL
;

3005 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3007 i‡(
f
 =
NULL
) {

3008 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

3009 i‡(
f
 =
NULL
) {

3010  
NULL
;

3013 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

3016 
f
->
s¸ùt_«me
 = 
r
->
uri
;

3018  
f
;

3021 
	}
}

3025 
	$ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3027 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3029 
ngx_uæ_t
 
u
;

3030 
ngx_°r_t
 *
vÆue
, *
uæ
;

3031 
ngx_uöt_t
 
n
;

3032 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3033 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3035 i‡(
Êcf
->
up°ªam
.up°ªam || flcf->
Á°cgi_Àngths
) {

3039 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3041 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

3043 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

3044 
˛cf
->
auto_ªdúe˘
 = 1;

3047 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3049 
uæ
 = &
vÆue
[1];

3051 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3053 i‡(
n
) {

3055 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3057 
sc
.
cf
 = cf;

3058 
sc
.
sour˚
 = 
uæ
;

3059 
sc
.
Àngths
 = &
Êcf
->
Á°cgi_Àngths
;

3060 
sc
.
vÆues
 = &
Êcf
->
Á°cgi_vÆues
;

3061 
sc
.
v¨übÀs
 = 
n
;

3062 
sc
.
com∂ëe_Àngths
 = 1;

3063 
sc
.
com∂ëe_vÆues
 = 1;

3065 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3066  
NGX_CONF_ERROR
;

3069  
NGX_CONF_OK
;

3072 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3074 
u
.
uæ
 = 
vÆue
[1];

3075 
u
.
no_ªsﬁve
 = 1;

3077 
Êcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3078 i‡(
Êcf
->
up°ªam
.up°ªam =
NULL
) {

3079  
NGX_CONF_ERROR
;

3082  
NGX_CONF_OK
;

3083 
	}
}

3087 
	$ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3089 #i‡(
NGX_PCRE
)

3090 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3092 
ngx_°r_t
 *
vÆue
;

3093 
ngx_ªgex_compûe_t
 
rc
;

3094 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3096 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3098 
Êcf
->
•lô_«me
 = 
vÆue
[1];

3100 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3102 
rc
.
∑âîn
 = 
vÆue
[1];

3103 
rc
.
poﬁ
 = 
cf
->pool;

3104 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3105 
rc
.
îr
.
d©a
 = 
îr°r
;

3107 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

3108 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

3109  
NGX_CONF_ERROR
;

3112 i‡(
rc
.
ˇ±uªs
 != 2) {

3113 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3114 "∑âî¿\"%V\" mu° havê2 c≠tuªs", &
vÆue
[1]);

3115  
NGX_CONF_ERROR
;

3118 
Êcf
->
•lô_ªgex
 = 
rc
.
ªgex
;

3120  
NGX_CONF_OK
;

3124 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3125 "\"%V\"Ñequúe†PCREÜibøry", &
cmd
->
«me
);

3126  
NGX_CONF_ERROR
;

3129 
	}
}

3133 
	$ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3135 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3137 
ngx_°r_t
 *
vÆue
;

3138 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3140 i‡(
Êcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


3141 || 
Êcf
->
up°ªam
.
°‹e_Àngths
)

3146 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3148 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3149 
Êcf
->
up°ªam
.
°‹e
 = 0;

3150  
NGX_CONF_OK
;

3153 #i‡(
NGX_HTTP_CACHE
)

3155 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


3156 && 
Êcf
->
up°ªam
.
ˇche
 !
NULL
)

3163 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

3164 
Êcf
->
up°ªam
.
°‹e
 = 1;

3165  
NGX_CONF_OK
;

3169 
vÆue
[1].
Àn
++;

3171 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3173 
sc
.
cf
 = cf;

3174 
sc
.
sour˚
 = &
vÆue
[1];

3175 
sc
.
Àngths
 = &
Êcf
->
up°ªam
.
°‹e_Àngths
;

3176 
sc
.
vÆues
 = &
Êcf
->
up°ªam
.
°‹e_vÆues
;

3177 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

3178 
sc
.
com∂ëe_Àngths
 = 1;

3179 
sc
.
com∂ëe_vÆues
 = 1;

3181 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3182  
NGX_CONF_ERROR
;

3185  
NGX_CONF_OK
;

3186 
	}
}

3189 #i‡(
NGX_HTTP_CACHE
)

3192 
	$ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3194 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3196 
ngx_°r_t
 *
vÆue
;

3198 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3200 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

3204 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3205 
Êcf
->
up°ªam
.
ˇche
 = 
NULL
;

3206  
NGX_CONF_OK
;

3209 i‡(
Êcf
->
up°ªam
.
°‹e
 > 0 || flcf->up°ªam.
°‹e_Àngths
) {

3213 
Êcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

3214 &
ngx_hâp_Á°cgi_moduÀ
);

3215 i‡(
Êcf
->
up°ªam
.
ˇche
 =
NULL
) {

3216  
NGX_CONF_ERROR
;

3219  
NGX_CONF_OK
;

3220 
	}
}

3224 
	$ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3226 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3228 
ngx_°r_t
 *
vÆue
;

3229 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3231 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3233 i‡(
Êcf
->
ˇche_key
.
vÆue
.
d©a
) {

3237 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3239 
ccv
.
cf
 = cf;

3240 
ccv
.
vÆue
 = &value[1];

3241 
ccv
.
com∂ex_vÆue
 = &
Êcf
->
ˇche_key
;

3243 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3244  
NGX_CONF_ERROR
;

3247  
NGX_CONF_OK
;

3248 
	}
}

3254 
	$ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3256 #i‡(
NGX_FREEBSD
)

3257 
ssize_t
 *
≈
 = 
d©a
;

3259 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3260 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3263 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3265  
NGX_CONF_ERROR
;

3268 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3269 
ssize_t
 *
≈
 = 
d©a
;

3271 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3274 *
≈
 = 0;

3278  
NGX_CONF_OK
;

3279 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_flv_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_comm™d_t
 
	gngx_hâp_Êv_comm™ds
[] = {

16 { 
ngx_°rög
("flv"),

17 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

18 
ngx_hâp_Êv
,

21 
NULL
 },

23 
ngx_nuŒ_comm™d


27 
u_ch¨
 
	gngx_Êv_hódî
[] = "FLV\x1\x5\0\0\0\x9\0\0\0\0";

30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Êv_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_Êv_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_Êv_moduÀ_˘x
,

48 
ngx_hâp_Êv_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t


62 
	$ngx_hâp_Êv_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

64 
u_ch¨
 *
œ°
;

65 
off_t
 
°¨t
, 
Àn
;

66 
size_t
 
roŸ
;

67 
ngx_öt_t
 
rc
;

68 
ngx_uöt_t
 
Àvñ
, 
i
;

69 
ngx_°r_t
 
∑th
, 
vÆue
;

70 
ngx_log_t
 *
log
;

71 
ngx_buf_t
 *
b
;

72 
ngx_chaö_t
 
out
[2];

73 
ngx_›í_fûe_öfo_t
 
of
;

74 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

76 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

77  
NGX_HTTP_NOT_ALLOWED
;

80 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

81  
NGX_DECLINED
;

84 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

86 i‡(
rc
 !
NGX_OK
) {

87  
rc
;

90 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

91 i‡(
œ°
 =
NULL
) {

92  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

95 
log
 = 
r
->
c⁄√˘i⁄
->log;

97 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

100 "hâ∞Êv fûíame: \"%V\"", &
∑th
);

102 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

104 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

106 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

107 
of
.
dúe˘io
 = 
˛cf
->directio;

108 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

109 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

110 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

111 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

113 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

114  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

118 !
NGX_OK
)

120 
of
.
îr
) {

123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

125 
NGX_ENOENT
:

126 
NGX_ENOTDIR
:

127 
NGX_ENAMETOOLONG
:

129 
Àvñ
 = 
NGX_LOG_ERR
;

130 
rc
 = 
NGX_HTTP_NOT_FOUND
;

133 
NGX_EACCES
:

134 #i‡(
NGX_HAVE_OPENAT
)

135 
NGX_EMLINK
:

136 
NGX_ELOOP
:

139 
Àvñ
 = 
NGX_LOG_ERR
;

140 
rc
 = 
NGX_HTTP_FORBIDDEN
;

145 
Àvñ
 = 
NGX_LOG_CRIT
;

146 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

151 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

152 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

155  
rc
;

158 i‡(!
of
.
is_fûe
) {

160 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

162 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

165  
NGX_DECLINED
;

168 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

170 
°¨t
 = 0;

171 
Àn
 = 
of
.
size
;

172 
i
 = 1;

174 i‡(
r
->
¨gs
.
Àn
) {

176 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

178 
°¨t
 = 
	`ngx_©oof
(
vÆue
.
d©a
, vÆue.
Àn
);

180 i‡(
°¨t
 =
NGX_ERROR
 || sèπ >
Àn
) {

181 
°¨t
 = 0;

184 i‡(
°¨t
) {

185 
Àn
 = (
ngx_Êv_hódî
Ë- 1 +Üí - 
°¨t
;

186 
i
 = 0;

191 
log
->
a˘i⁄
 = "sending flvÅo client";

193 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

194 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

195 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

197 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

198  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

201 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

202  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

205 i‡(
i
 == 0) {

206 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

207 i‡(
b
 =
NULL
) {

208  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
b
->
pos
 = 
ngx_Êv_hódî
;

212 
b
->
œ°
 = 
ngx_Êv_hódî
 + (ngx_flv_header) - 1;

213 
b
->
mem‹y
 = 1;

215 
out
[0].
buf
 = 
b
;

216 
out
[0].
√xt
 = &out[1];

220 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

221 i‡(
b
 =
NULL
) {

222  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

225 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

226 i‡(
b
->
fûe
 =
NULL
) {

227  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

230 
r
->
Ælow_ønges
 = 1;

232 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

234 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

235  
rc
;

238 
b
->
fûe_pos
 = 
°¨t
;

239 
b
->
fûe_œ°
 = 
of
.
size
;

241 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

242 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

243 
b
->
œ°_ö_chaö
 = 1;

245 
b
->
fûe
->
fd
 = 
of
.fd;

246 
b
->
fûe
->
«me
 = 
∑th
;

247 
b
->
fûe
->
log
 =Üog;

248 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

250 
out
[1].
buf
 = 
b
;

251 
out
[1].
√xt
 = 
NULL
;

253  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[
i
]);

254 
	}
}

258 
	$ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

260 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

262 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

263 
˛cf
->
h™dÀr
 = 
ngx_hâp_Êv_h™dÀr
;

265  
NGX_CONF_OK
;

266 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_geo_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

15 
u_sh‹t
 
	m°¨t
;

16 
u_sh‹t
 
	míd
;

17 } 
	tngx_hâp_geo_ønge_t
;

21 
ngx_ødix_åì_t
 *
	måì
;

22 #i‡(
NGX_HAVE_INET6
)

23 
ngx_ødix_åì_t
 *
	måì6
;

25 } 
	tngx_hâp_geo_åìs_t
;

29 
ngx_hâp_geo_ønge_t
 **
	mlow
;

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

31 } 
	tngx_hâp_geo_high_ønges_t
;

35 
ngx_°r_node_t
 
	m¢
;

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

37 
size_t
 
	moff£t
;

38 } 
	tngx_hâp_geo_v¨übÀ_vÆue_node_t
;

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

43 
ngx_°r_t
 *
	m√t
;

44 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

45 
ngx_ødix_åì_t
 *
	måì
;

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_ødix_åì_t
 *
	måì6
;

49 
ngx_rbåì_t
 
	mrbåì
;

50 
ngx_rbåì_node_t
 
	m£¡öñ
;

51 
ngx_¨øy_t
 *
	m¥oxõs
;

52 
ngx_poﬁ_t
 *
	mpoﬁ
;

53 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

55 
size_t
 
	md©a_size
;

57 
ngx_°r_t
 
	mö˛ude_«me
;

58 
ngx_uöt_t
 
	mö˛udes
;

59 
ngx_uöt_t
 
	míåõs
;

61 
	mønges
:1;

62 
	moutside_íåõs
:1;

63 
	mÆlow_bö¨y_ö˛ude
:1;

64 
	mbö¨y_ö˛ude
:1;

65 
	m¥oxy_ªcursive
:1;

66 } 
	tngx_hâp_geo_c⁄f_˘x_t
;

71 
ngx_hâp_geo_åìs_t
 
	måìs
;

72 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

73 } 
	mu
;

75 
ngx_¨øy_t
 *
	m¥oxõs
;

76 
	m¥oxy_ªcursive
:1;

78 
ngx_öt_t
 
	mödex
;

79 } 
	tngx_hâp_geo_˘x_t
;

82 
ngx_öt_t
 
ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

84 
ngx_öt_t
 
ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

86 *
ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

87 *
ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

88 *
ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

89 
ngx_°r_t
 *
vÆue
);

90 *
ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
,

91 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

92 
ngx_uöt_t
 
ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
,

93 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

94 *
ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

95 
ngx_°r_t
 *
vÆue
);

96 *
ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

97 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
);

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

100 *
ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
,

101 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_cidr_t
 *
cidr
);

102 
ngx_öt_t
 
ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

103 
ngx_cidr_t
 *
cidr
);

104 *
ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

105 
ngx_°r_t
 *
«me
);

106 
ngx_öt_t
 
ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

107 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

108 
ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
);

109 
u_ch¨
 *
ngx_hâp_geo_c›y_vÆues
(u_ch¨ *
ba£
, u_ch¨ *
p
,

110 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

113 
ngx_comm™d_t
 
	gngx_hâp_geo_comm™ds
[] = {

115 { 
ngx_°rög
("geo"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

117 
ngx_hâp_geo_block
,

118 
NGX_HTTP_MAIN_CONF_OFFSET
,

120 
NULL
 },

122 
ngx_nuŒ_comm™d


126 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geo_moduÀ_˘x
 = {

127 
NULL
,

128 
NULL
,

130 
NULL
,

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
NULL
,

137 
NULL


141 
ngx_moduÀ_t
 
	gngx_hâp_geo_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_hâp_geo_moduÀ_˘x
,

144 
ngx_hâp_geo_comm™ds
,

145 
NGX_HTTP_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


158 
u_ch¨
 
	mGEORNG
[6];

159 
u_ch¨
 
	mvîsi⁄
;

160 
u_ch¨
 
	m±r_size
;

161 
uöt32_t
 
	mídü¬ess
;

162 
uöt32_t
 
	m¸c32
;

163 } 
	tngx_hâp_geo_hódî_t
;

166 
ngx_hâp_geo_hódî_t
 
	gngx_hâp_geo_hódî
 = {

173 
ngx_öt_t


174 
	$ngx_hâp_geo_cidr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

175 
uöçå_t
 
d©a
)

177 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

179 
ö_addr_t
 
öaddr
;

180 
ngx_addr_t
 
addr
;

181 
sockaddr_ö
 *
sö
;

182 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

183 #i‡(
NGX_HAVE_INET6
)

184 
u_ch¨
 *
p
;

185 
ö6_addr
 *
öaddr6
;

188 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë!
NGX_OK
) {

189 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

190 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
INADDR_NONE
);

191 
d⁄e
;

194 
addr
.
sockaddr
->
ß_Ámûy
) {

196 #i‡(
NGX_HAVE_INET6
)

197 
AF_INET6
:

198 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

199 
p
 = 
öaddr6
->
s6_addr
;

201 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

202 
öaddr
 = 
p
[12] << 24;

203 
öaddr
 +
p
[13] << 16;

204 
öaddr
 +
p
[14] << 8;

205 
öaddr
 +
p
[15];

207 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

208 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

211 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

212 
	`ngx_ødix128åì_föd
(
˘x
->
u
.
åìs
.
åì6
, 
p
);

219 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

220 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

222 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

223 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

228 
d⁄e
:

230 *
v
 = *
vv
;

232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

233 "hâ∞geo: %v", 
v
);

235  
NGX_OK
;

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_hâp_geo_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

241 
uöçå_t
 
d©a
)

243 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

245 
ö_addr_t
 
öaddr
;

246 
ngx_addr_t
 
addr
;

247 
ngx_uöt_t
 
n
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_hâp_geo_ønge_t
 *
ønge
;

250 #i‡(
NGX_HAVE_INET6
)

251 
u_ch¨
 *
p
;

252 
ö6_addr
 *
öaddr6
;

255 *
v
 = *
˘x
->
u
.
high
.
deÁu…_vÆue
;

257 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë=
NGX_OK
) {

259 
addr
.
sockaddr
->
ß_Ámûy
) {

261 #i‡(
NGX_HAVE_INET6
)

262 
AF_INET6
:

263 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

265 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

266 
p
 = 
öaddr6
->
s6_addr
;

268 
öaddr
 = 
p
[12] << 24;

269 
öaddr
 +
p
[13] << 16;

270 
öaddr
 +
p
[14] << 8;

271 
öaddr
 +
p
[15];

274 
öaddr
 = 
INADDR_NONE
;

281 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

282 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

287 
öaddr
 = 
INADDR_NONE
;

290 i‡(
˘x
->
u
.
high
.
low
) {

291 
ønge
 = 
˘x
->
u
.
high
.
low
[
öaddr
 >> 16];

293 i‡(
ønge
) {

294 
n
 = 
öaddr
 & 0xffff;

296 i‡(
n
 >(
ngx_uöt_t
Ë
ønge
->
°¨t


297 && 
n
 <(
ngx_uöt_t
Ë
ønge
->
íd
)

299 *
v
 = *
ønge
->
vÆue
;

302 } (++
ønge
)->
vÆue
);

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 "hâ∞geo: %v", 
v
);

309  
NGX_OK
;

310 
	}
}

313 
ngx_öt_t


314 
	$ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

315 
ngx_addr_t
 *
addr
)

317 
ngx_¨øy_t
 *
xfwd
;

319 i‡(
	`ngx_hâp_geo_ªÆ_addr
(
r
, 
˘x
, 
addr
Ë!
NGX_OK
) {

320  
NGX_ERROR
;

323 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

325 i‡(
xfwd
->
√…s
 > 0 && 
˘x
->
¥oxõs
 !
NULL
) {

326 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, 
addr
, 
xfwd
, 
NULL
,

327 
˘x
->
¥oxõs
, ctx->
¥oxy_ªcursive
);

330  
NGX_OK
;

331 
	}
}

334 
ngx_öt_t


335 
	$ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

336 
ngx_addr_t
 *
addr
)

338 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

340 i‡(
˘x
->
ödex
 == -1) {

341 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 "hâ∞geÿ°¨ãd: %V", &
r
->
c⁄√˘i⁄
->
addr_ãxt
);

344 
addr
->
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

345 
addr
->
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

348  
NGX_OK
;

351 
v
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
˘x
->
ödex
);

353 i‡(
v
 =
NULL
 || v->
nŸ_found
) {

354 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

357  
NGX_ERROR
;

360 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "hâ∞geÿ°¨ãd: %v", 
v
);

363 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
v
->
d©a
, v->
Àn
Ë=
NGX_OK
) {

364  
NGX_OK
;

367  
NGX_ERROR
;

368 
	}
}

372 
	$ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

374 *
rv
;

375 
size_t
 
Àn
;

376 
ngx_°r_t
 *
vÆue
, 
«me
;

377 
ngx_uöt_t
 
i
;

378 
ngx_c⁄f_t
 
ßve
;

379 
ngx_poﬁ_t
 *
poﬁ
;

380 
ngx_¨øy_t
 *
a
;

381 
ngx_hâp_v¨übÀ_t
 *
v¨
;

382 
ngx_hâp_geo_˘x_t
 *
geo
;

383 
ngx_hâp_geo_c⁄f_˘x_t
 
˘x
;

384 #i‡(
NGX_HAVE_INET6
)

385 
ö6_addr
 
zîo
;

388 
vÆue
 = 
cf
->
¨gs
->
ñts
;

390 
geo
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_geo_˘x_t
));

391 i‡(
geo
 =
NULL
) {

392  
NGX_CONF_ERROR
;

395 
«me
 = 
vÆue
[1];

397 i‡(
«me
.
d©a
[0] != '$') {

398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

399 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

400  
NGX_CONF_ERROR
;

403 
«me
.
Àn
--;

404 
«me
.
d©a
++;

406 i‡(
cf
->
¨gs
->
√…s
 == 3) {

408 
geo
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

409 i‡(
geo
->
ödex
 =
NGX_ERROR
) {

410  
NGX_CONF_ERROR
;

413 
«me
 = 
vÆue
[2];

415 i‡(
«me
.
d©a
[0] != '$') {

416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

417 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

418  
NGX_CONF_ERROR
;

421 
«me
.
Àn
--;

422 
«me
.
d©a
++;

425 
geo
->
ödex
 = -1;

428 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

429 i‡(
v¨
 =
NULL
) {

430  
NGX_CONF_ERROR
;

433 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

434 i‡(
poﬁ
 =
NULL
) {

435  
NGX_CONF_ERROR
;

438 
	`ngx_memzîo
(&
˘x
, (
ngx_hâp_geo_c⁄f_˘x_t
));

440 
˘x
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

441 i‡(
˘x
.
ãmp_poﬁ
 =
NULL
) {

442  
NGX_CONF_ERROR
;

445 
	`ngx_rbåì_öô
(&
˘x
.
rbåì
, &˘x.
£¡öñ
, 
ngx_°r_rbåì_ö£π_vÆue
);

447 
˘x
.
poﬁ
 = 
cf
->pool;

448 
˘x
.
d©a_size
 = (
ngx_hâp_geo_hódî_t
)

449 + (
ngx_hâp_v¨übÀ_vÆue_t
)

450 + 0x10000 * (
ngx_hâp_geo_ønge_t
 *);

451 
˘x
.
Ælow_bö¨y_ö˛ude
 = 1;

453 
ßve
 = *
cf
;

454 
cf
->
poﬁ
 =Öool;

455 
cf
->
˘x
 = &ctx;

456 
cf
->
h™dÀr
 = 
ngx_hâp_geo
;

457 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

459 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

461 *
cf
 = 
ßve
;

463 
geo
->
¥oxõs
 = 
˘x
.proxies;

464 
geo
->
¥oxy_ªcursive
 = 
˘x
.proxy_recursive;

466 i‡(
˘x
.
ønges
) {

468 i‡(
˘x
.
high
.
low
 && !˘x.
bö¨y_ö˛ude
) {

469 
i
 = 0; i < 0x10000; i++) {

470 
a
 = (
ngx_¨øy_t
 *Ë
˘x
.
high
.
low
[
i
];

472 i‡(
a
 =
NULL
 ||á->
√…s
 == 0) {

476 
Àn
 = 
a
->
√…s
 * (
ngx_hâp_geo_ønge_t
);

478 
˘x
.
high
.
low
[
i
] = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
Àn
 + (*));

479 i‡(
˘x
.
high
.
low
[
i
] =
NULL
) {

480  
NGX_CONF_ERROR
;

483 
	`ngx_mem˝y
(
˘x
.
high
.
low
[
i
], 
a
->
ñts
, 
Àn
);

484 
˘x
.
high
.
low
[
i
][
a
->
√…s
].
vÆue
 = 
NULL
;

485 
˘x
.
d©a_size
 +
Àn
 + (*);

488 i‡(
˘x
.
Ælow_bö¨y_ö˛ude


489 && !
˘x
.
outside_íåõs


490 && 
˘x
.
íåõs
 > 100000

491 && 
˘x
.
ö˛udes
 == 1)

493 
	`ngx_hâp_geo_¸óã_bö¨y_ba£
(&
˘x
);

497 i‡(
˘x
.
high
.
deÁu…_vÆue
 =
NULL
) {

498 
˘x
.
high
.
deÁu…_vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

501 
geo
->
u
.
high
 = 
˘x
.high;

503 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_ønge_v¨übÀ
;

504 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

506 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

507 
	`ngx_de°roy_poﬁ
(
poﬁ
);

510 i‡(
˘x
.
åì
 =
NULL
) {

511 
˘x
.
åì
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

512 i‡(
˘x
.
åì
 =
NULL
) {

513  
NGX_CONF_ERROR
;

517 
geo
->
u
.
åìs
.
åì
 = 
˘x
.tree;

519 #i‡(
NGX_HAVE_INET6
)

520 i‡(
˘x
.
åì6
 =
NULL
) {

521 
˘x
.
åì6
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

522 i‡(
˘x
.
åì6
 =
NULL
) {

523  
NGX_CONF_ERROR
;

527 
geo
->
u
.
åìs
.
åì6
 = 
˘x
.tree6;

530 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_cidr_v¨übÀ
;

531 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

533 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

534 
	`ngx_de°roy_poﬁ
(
poﬁ
);

536 i‡(
	`ngx_ødix32åì_ö£π
(
˘x
.
åì
, 0, 0,

537 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

538 =
NGX_ERROR
)

540  
NGX_CONF_ERROR
;

545 #i‡(
NGX_HAVE_INET6
)

546 i‡(
	`ngx_ødix128åì_ö£π
(
˘x
.
åì6
, 
zîo
.
s6_addr
, zero.s6_addr,

547 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

548 =
NGX_ERROR
)

550  
NGX_CONF_ERROR
;

555  
rv
;

556 
	}
}

560 
	$ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

562 *
rv
;

563 
ngx_°r_t
 *
vÆue
;

564 
ngx_cidr_t
 
cidr
;

565 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
;

567 
˘x
 = 
cf
->ctx;

569 
vÆue
 = 
cf
->
¨gs
->
ñts
;

571 i‡(
cf
->
¨gs
->
√…s
 == 1) {

573 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "ranges") == 0) {

575 i‡(
˘x
->
åì


576 #i‡(
NGX_HAVE_INET6
)

577 || 
˘x
->
åì6


581 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 
Áûed
;

587 
˘x
->
ønges
 = 1;

589 
rv
 = 
NGX_CONF_OK
;

591 
d⁄e
;

594 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy_recursive") == 0) {

595 
˘x
->
¥oxy_ªcursive
 = 1;

596 
rv
 = 
NGX_CONF_OK
;

597 
d⁄e
;

601 i‡(
cf
->
¨gs
->
√…s
 != 2) {

602 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

604 
Áûed
;

607 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

609 
rv
 = 
	`ngx_hâp_geo_ö˛ude
(
cf
, 
˘x
, &
vÆue
[1]);

611 
d⁄e
;

613 } i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy") == 0) {

615 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

616 
Áûed
;

619 
rv
 = 
	`ngx_hâp_geo_add_¥oxy
(
cf
, 
˘x
, &
cidr
);

621 
d⁄e
;

624 i‡(
˘x
->
ønges
) {

625 
rv
 = 
	`ngx_hâp_geo_ønge
(
cf
, 
˘x
, 
vÆue
);

628 
rv
 = 
	`ngx_hâp_geo_cidr
(
cf
, 
˘x
, 
vÆue
);

631 
d⁄e
:

633 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

635  
rv
;

637 
Áûed
:

639 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

641  
NGX_CONF_ERROR
;

642 
	}
}

646 
	$ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

647 
ngx_°r_t
 *
vÆue
)

649 
u_ch¨
 *
p
, *
œ°
;

650 
ö_addr_t
 
°¨t
, 
íd
;

651 
ngx_°r_t
 *
√t
;

652 
ngx_uöt_t
 
dñ
;

654 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

656 i‡(
˘x
->
high
.
deÁu…_vÆue
) {

657 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

659 &
vÆue
[1], 
˘x
->
high
.
deÁu…_vÆue
);

662 
˘x
->
high
.
deÁu…_vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &
vÆue
[1]);

663 i‡(
˘x
->
high
.
deÁu…_vÆue
 =
NULL
) {

664  
NGX_CONF_ERROR
;

667  
NGX_CONF_OK
;

670 i‡(
˘x
->
bö¨y_ö˛ude
) {

671 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

673 
˘x
->
ö˛ude_«me
.
d©a
);

674  
NGX_CONF_ERROR
;

677 i‡(
˘x
->
high
.
low
 =
NULL
) {

678 
˘x
->
high
.
low
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
,

679 0x10000 * (
ngx_hâp_geo_ønge_t
 *));

680 i‡(
˘x
->
high
.
low
 =
NULL
) {

681  
NGX_CONF_ERROR
;

685 
˘x
->
íåõs
++;

686 
˘x
->
outside_íåõs
 = 1;

688 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

689 
√t
 = &
vÆue
[1];

690 
dñ
 = 1;

693 
√t
 = &
vÆue
[0];

694 
dñ
 = 0;

697 
œ°
 = 
√t
->
d©a
 +Çë->
Àn
;

699 
p
 = 
	`ngx_°æchr
(
√t
->
d©a
, 
œ°
, '-');

701 i‡(
p
 =
NULL
) {

702 
övÆid
;

705 
°¨t
 = 
	`ngx_öë_addr
(
√t
->
d©a
, 
p
 -Çet->data);

707 i‡(
°¨t
 =
INADDR_NONE
) {

708 
övÆid
;

711 
°¨t
 = 
	`¡ohl
(start);

713 
p
++;

715 
íd
 = 
	`ngx_öë_addr
(
p
, 
œ°
 -Ö);

717 i‡(
íd
 =
INADDR_NONE
) {

718 
övÆid
;

721 
íd
 = 
	`¡ohl
(end);

723 i‡(
°¨t
 > 
íd
) {

724 
övÆid
;

727 i‡(
dñ
) {

728 i‡(
	`ngx_hâp_geo_dñëe_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
)) {

729 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

730 "nÿaddªs†øngê\"%V\"Åÿdñëe", 
√t
);

733  
NGX_CONF_OK
;

736 
˘x
->
vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &value[1]);

738 i‡(
˘x
->
vÆue
 =
NULL
) {

739  
NGX_CONF_ERROR
;

742 
˘x
->
√t
 =Çet;

744  
	`ngx_hâp_geo_add_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
);

746 
övÆid
:

748 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÑ™gê\"%V\"", 
√t
);

750  
NGX_CONF_ERROR
;

751 
	}
}

757 
	$ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

758 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

760 
ö_addr_t
 
n
;

761 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
;

762 
ngx_¨øy_t
 *
a
;

763 
ngx_hâp_geo_ønge_t
 *
ønge
;

765 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

767 
h
 = 
n
 >> 16;

769 i‡(
n
 =
°¨t
) {

770 
s
 = 
n
 & 0xffff;

772 
s
 = 0;

775 i‡((
n
 | 0xffffË> 
íd
) {

776 
e
 = 
íd
 & 0xffff;

779 
e
 = 0xffff;

782 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

784 i‡(
a
 =
NULL
) {

785 
a
 = 
	`ngx_¨øy_¸óã
(
˘x
->
ãmp_poﬁ
, 64,

786 (
ngx_hâp_geo_ønge_t
));

787 i‡(
a
 =
NULL
) {

788  
NGX_CONF_ERROR
;

791 
˘x
->
high
.
low
[
h
] = (
ngx_hâp_geo_ønge_t
 *Ë
a
;

794 
i
 = 
a
->
√…s
;

795 
ønge
 = 
a
->
ñts
;

797 
i
) {

799 
i
--;

801 i‡(
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
) {

805 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
íd
) {

809 
ønge
 = 
	`ngx_¨øy_push
(
a
);

810 i‡(
ønge
 =
NULL
) {

811  
NGX_CONF_ERROR
;

814 
ønge
 = 
a
->
ñts
;

816 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

817 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

819 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

820 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

821 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

823 
√xt
;

826 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


827 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

829 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

831 
˘x
->
√t
, ctx->
vÆue
, 
ønge
[
i
].value);

833 
ønge
[
i
].
vÆue
 = 
˘x
->value;

835 
√xt
;

838 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


839 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

843 
ønge
 = 
	`ngx_¨øy_push
(
a
);

844 i‡(
ønge
 =
NULL
) {

845  
NGX_CONF_ERROR
;

848 
ønge
 = 
	`ngx_¨øy_push
(
a
);

849 i‡(
ønge
 =
NULL
) {

850  
NGX_CONF_ERROR
;

853 
ønge
 = 
a
->
ñts
;

855 
	`ngx_memmove
(&
ønge
[
i
 + 3], &range[i + 1],

856 (
a
->
√…s
 - 3 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

858 
ønge
[
i
 + 2].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

859 
ønge
[
i
 + 2].
íd
 =Ñange[i].end;

860 
ønge
[
i
 + 2].
vÆue
 =Ñange[i].value;

862 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

863 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

864 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

866 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

868 
√xt
;

871 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


872 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

876 
ønge
 = 
	`ngx_¨øy_push
(
a
);

877 i‡(
ønge
 =
NULL
) {

878  
NGX_CONF_ERROR
;

881 
ønge
 = 
a
->
ñts
;

883 
	`ngx_memmove
(&
ønge
[
i
 + 1], &range[i],

884 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

886 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

888 
ønge
[
i
].
°¨t
 = (
u_sh‹t
Ë
s
;

889 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë
e
;

890 
ønge
[
i
].
vÆue
 = 
˘x
->value;

892 
√xt
;

895 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


896 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

900 
ønge
 = 
	`ngx_¨øy_push
(
a
);

901 i‡(
ønge
 =
NULL
) {

902  
NGX_CONF_ERROR
;

905 
ønge
 = 
a
->
ñts
;

907 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

908 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

910 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

911 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

912 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

914 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

916 
√xt
;

919 
s
 = (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
;

920 
e
 = (
ngx_uöt_t
Ë
ønge
[
i
].
íd
;

922 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

924 
˘x
->
√t
,

925 
h
 >> 8, h & 0xff, 
s
 >> 8, s & 0xff,

926 
h
 >> 8, h & 0xff, 
e
 >> 8,É & 0xff);

928  
NGX_CONF_ERROR
;

933 
ønge
 = 
	`ngx_¨øy_push
(
a
);

934 i‡(
ønge
 =
NULL
) {

935  
NGX_CONF_ERROR
;

938 
ønge
->
°¨t
 = (
u_sh‹t
Ë
s
;

939 
ønge
->
íd
 = (
u_sh‹t
Ë
e
;

940 
ønge
->
vÆue
 = 
˘x
->value;

942 
√xt
:

947  
NGX_CONF_OK
;

948 
	}
}

951 
ngx_uöt_t


952 
	$ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

953 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

955 
ö_addr_t
 
n
;

956 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
, 
w¨n
;

957 
ngx_¨øy_t
 *
a
;

958 
ngx_hâp_geo_ønge_t
 *
ønge
;

960 
w¨n
 = 0;

962 
n
 = 
°¨t
;Ç <
íd
;Ç += 0x10000) {

964 
h
 = 
n
 >> 16;

966 i‡(
n
 =
°¨t
) {

967 
s
 = 
n
 & 0xffff;

969 
s
 = 0;

972 i‡((
n
 | 0xffffË> 
íd
) {

973 
e
 = 
íd
 & 0xffff;

976 
e
 = 0xffff;

979 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

981 i‡(
a
 =
NULL
) {

982 
w¨n
 = 1;

986 
ønge
 = 
a
->
ñts
;

987 
i
 = 0; i < 
a
->
√…s
; i++) {

989 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


990 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

992 
	`ngx_memmove
(&
ønge
[
i
], &range[i + 1],

993 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

995 
a
->
√…s
--;

1000 i‡(
s
 !(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


1001 && 
e
 !(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

1006 
w¨n
 = 1;

1010  
w¨n
;

1011 
	}
}

1015 
	$ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1016 
ngx_°r_t
 *
vÆue
)

1018 *
rv
;

1019 
ngx_öt_t
 
rc
, 
dñ
;

1020 
ngx_°r_t
 *
√t
;

1021 
ngx_cidr_t
 
cidr
;

1023 i‡(
˘x
->
åì
 =
NULL
) {

1024 
˘x
->
åì
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1025 i‡(
˘x
->
åì
 =
NULL
) {

1026  
NGX_CONF_ERROR
;

1030 #i‡(
NGX_HAVE_INET6
)

1031 i‡(
˘x
->
åì6
 =
NULL
) {

1032 
˘x
->
åì6
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1033 i‡(
˘x
->
åì6
 =
NULL
) {

1034  
NGX_CONF_ERROR
;

1039 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

1040 
cidr
.
Ámûy
 = 
AF_INET
;

1041 
cidr
.
u
.
ö
.
addr
 = 0;

1042 
cidr
.
u
.
ö
.
mask
 = 0;

1044 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1046 i‡(
rv
 !
NGX_CONF_OK
) {

1047  
rv
;

1050 #i‡(
NGX_HAVE_INET6
)

1051 
cidr
.
Ámûy
 = 
AF_INET6
;

1052 
	`ngx_memzîo
(&
cidr
.
u
.
ö6
, (
ngx_ö6_cidr_t
));

1054 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1056 i‡(
rv
 !
NGX_CONF_OK
) {

1057  
rv
;

1061  
NGX_CONF_OK
;

1064 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

1065 
√t
 = &
vÆue
[1];

1066 
dñ
 = 1;

1069 
√t
 = &
vÆue
[0];

1070 
dñ
 = 0;

1073 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, 
√t
, &
cidr
Ë!
NGX_OK
) {

1074  
NGX_CONF_ERROR
;

1077 i‡(
cidr
.
Ámûy
 =
AF_INET
) {

1078 
cidr
.
u
.
ö
.
addr
 = 
	`¡ohl
(cidr.u.in.addr);

1079 
cidr
.
u
.
ö
.
mask
 = 
	`¡ohl
(cidr.u.in.mask);

1082 i‡(
dñ
) {

1083 
cidr
.
Ámûy
) {

1085 #i‡(
NGX_HAVE_INET6
)

1086 
AF_INET6
:

1087 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1088 
cidr
.
u
.
ö6
.
addr
.
s6_addr
,

1089 
cidr
.
u
.
ö6
.
mask
.
s6_addr
);

1094 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
,

1095 
cidr
.
u
.
ö
.
mask
);

1099 i‡(
rc
 !
NGX_OK
) {

1100 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1101 "nÿ√tw‹k \"%V\"Åÿdñëe", 
√t
);

1104  
NGX_CONF_OK
;

1107  
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], 
√t
);

1108 
	}
}

1112 
	$ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1113 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
)

1115 
ngx_öt_t
 
rc
;

1116 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ﬁd
;

1118 
vÆ
 = 
	`ngx_hâp_geo_vÆue
(
cf
, 
˘x
, 
vÆue
);

1120 i‡(
vÆ
 =
NULL
) {

1121  
NGX_CONF_ERROR
;

1124 
cidr
->
Ámûy
) {

1126 #i‡(
NGX_HAVE_INET6
)

1127 
AF_INET6
:

1128 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1129 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1130 (
uöçå_t
Ë
vÆ
);

1132 i‡(
rc
 =
NGX_OK
) {

1133  
NGX_CONF_OK
;

1136 i‡(
rc
 =
NGX_ERROR
) {

1137  
NGX_CONF_ERROR
;

1142 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1143 
	`ngx_ødix128åì_föd
(
˘x
->
åì6
,

1144 
cidr
->
u
.
ö6
.
addr
.
s6_addr
);

1146 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1148 
√t
, 
vÆ
, 
ﬁd
);

1150 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1151 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1152 
cidr
->
u
.
ö6
.
mask
.
s6_addr
);

1154 i‡(
rc
 =
NGX_ERROR
) {

1155 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1156  
NGX_CONF_ERROR
;

1159 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1160 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1161 (
uöçå_t
Ë
vÆ
);

1167 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1168 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1170 i‡(
rc
 =
NGX_OK
) {

1171  
NGX_CONF_OK
;

1174 i‡(
rc
 =
NGX_ERROR
) {

1175  
NGX_CONF_ERROR
;

1180 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1181 
	`ngx_ødix32åì_föd
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
);

1183 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1185 
√t
, 
vÆ
, 
ﬁd
);

1187 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
,

1188 
cidr
->
u
.
ö
.
addr
, cidr->u.ö.
mask
);

1190 i‡(
rc
 =
NGX_ERROR
) {

1191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1192  
NGX_CONF_ERROR
;

1195 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1196 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1201 i‡(
rc
 =
NGX_OK
) {

1202  
NGX_CONF_OK
;

1205  
NGX_CONF_ERROR
;

1206 
	}
}

1209 
ngx_hâp_v¨übÀ_vÆue_t
 *

1210 
	$ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1211 
ngx_°r_t
 *
vÆue
)

1213 
uöt32_t
 
hash
;

1214 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
;

1215 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1217 
hash
 = 
	`ngx_¸c32_l⁄g
(
vÆue
->
d©a
, vÆue->
Àn
);

1219 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1220 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, 
vÆue
, 
hash
);

1222 i‡(
gvvn
) {

1223  
gvvn
->
vÆue
;

1226 
vÆ
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1227 i‡(
vÆ
 =
NULL
) {

1228  
NULL
;

1231 
vÆ
->
Àn
 = 
vÆue
->len;

1232 
vÆ
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
poﬁ
, 
vÆue
);

1233 i‡(
vÆ
->
d©a
 =
NULL
) {

1234  
NULL
;

1237 
vÆ
->
vÆid
 = 1;

1238 
vÆ
->
no_ˇchóbÀ
 = 0;

1239 
vÆ
->
nŸ_found
 = 0;

1241 
gvvn
 = 
	`ngx_∑Œoc
(
˘x
->
ãmp_poﬁ
,

1242 (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
));

1243 i‡(
gvvn
 =
NULL
) {

1244  
NULL
;

1247 
gvvn
->
¢
.
node
.
key
 = 
hash
;

1248 
gvvn
->
¢
.
°r
.
Àn
 = 
vÆ
->len;

1249 
gvvn
->
¢
.
°r
.
d©a
 = 
vÆ
->data;

1250 
gvvn
->
vÆue
 = 
vÆ
;

1251 
gvvn
->
off£t
 = 0;

1253 
	`ngx_rbåì_ö£π
(&
˘x
->
rbåì
, &
gvvn
->
¢
.
node
);

1255 
˘x
->
d©a_size
 +
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vÆue
->
Àn
,

1258  
vÆ
;

1259 
	}
}

1263 
	$ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1264 
ngx_cidr_t
 *
cidr
)

1266 
ngx_cidr_t
 *
c
;

1268 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1269 
˘x
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(˘x->
poﬁ
, 4, (
ngx_cidr_t
));

1270 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1271  
NGX_CONF_ERROR
;

1275 
c
 = 
	`ngx_¨øy_push
(
˘x
->
¥oxõs
);

1276 i‡(
c
 =
NULL
) {

1277  
NGX_CONF_ERROR
;

1280 *
c
 = *
cidr
;

1282  
NGX_CONF_OK
;

1283 
	}
}

1286 
ngx_öt_t


1287 
	$ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

1289 
ngx_öt_t
 
rc
;

1291 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

1292 
cidr
->
Ámûy
 = 
AF_INET
;

1293 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

1294 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

1296  
NGX_OK
;

1299 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

1301 i‡(
rc
 =
NGX_ERROR
) {

1302 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

1303  
NGX_ERROR
;

1306 i‡(
rc
 =
NGX_DONE
) {

1307 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1308 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

1311  
NGX_OK
;

1312 
	}
}

1316 
	$ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1317 
ngx_°r_t
 *
«me
)

1319 *
rv
;

1320 
ngx_°r_t
 
fûe
;

1322 
fûe
.
Àn
 = 
«me
->len + 4;

1323 
fûe
.
d©a
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, 
«me
->
Àn
 + 5);

1324 i‡(
fûe
.
d©a
 =
NULL
) {

1325  
NGX_CONF_ERROR
;

1328 
	`ngx_•rötf
(
fûe
.
d©a
, "%V.bö%Z", 
«me
);

1330 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

1331  
NGX_CONF_ERROR
;

1334 i‡(
˘x
->
ønges
) {

1335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1337 
	`ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
cf
, 
˘x
, &
fûe
)) {

1338 
NGX_OK
:

1339  
NGX_CONF_OK
;

1340 
NGX_ERROR
:

1341  
NGX_CONF_ERROR
;

1347 
fûe
.
Àn
 -= 4;

1348 
fûe
.
d©a
[fûe.
Àn
] = '\0';

1350 
˘x
->
ö˛ude_«me
 = 
fûe
;

1352 i‡(
˘x
->
outside_íåõs
) {

1353 
˘x
->
Ælow_bö¨y_ö˛ude
 = 0;

1356 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1358 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

1360 
˘x
->
ö˛udes
++;

1361 
˘x
->
outside_íåõs
 = 0;

1363  
rv
;

1364 
	}
}

1367 
ngx_öt_t


1368 
	$ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1369 
ngx_°r_t
 *
«me
)

1371 
u_ch¨
 *
ba£
, 
ch
;

1372 
time_t
 
mtime
;

1373 
size_t
 
size
, 
Àn
;

1374 
ssize_t
 
n
;

1375 
uöt32_t
 
¸c32
;

1376 
ngx_îr_t
 
îr
;

1377 
ngx_öt_t
 
rc
;

1378 
ngx_uöt_t
 
i
;

1379 
ngx_fûe_t
 
fûe
;

1380 
ngx_fûe_öfo_t
 
fi
;

1381 
ngx_hâp_geo_ønge_t
 *
ønge
, **
ønges
;

1382 
ngx_hâp_geo_hódî_t
 *
hódî
;

1383 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1385 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1386 
fûe
.
«me
 = *name;

1387 
fûe
.
log
 = 
cf
->log;

1389 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
NGX_FILE_RDONLY
, 0, 0);

1390 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1391 
îr
 = 
ngx_î∫o
;

1392 i‡(
îr
 !
NGX_ENOENT
) {

1393 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
îr
,

1394 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1396  
NGX_DECLINED
;

1399 i‡(
˘x
->
outside_íåõs
) {

1400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1402 
«me
->
d©a
);

1403 
rc
 = 
NGX_ERROR
;

1404 
d⁄e
;

1407 i‡(
˘x
->
bö¨y_ö˛ude
) {

1408 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1410 
«me
->
d©a
, 
˘x
->
ö˛ude_«me
.data);

1411 
rc
 = 
NGX_ERROR
;

1412 
d⁄e
;

1415 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1417 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1418 
Áûed
;

1421 
size
 = (
size_t
Ë
	`ngx_fûe_size
(&
fi
);

1422 
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

1424 
ch
 = 
«me
->
d©a
[«me->
Àn
 - 4];

1425 
«me
->
d©a
[«me->
Àn
 - 4] = '\0';

1427 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1428 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1429 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1430 
Áûed
;

1433 
«me
->
d©a
[«me->
Àn
 - 4] = 
ch
;

1435 i‡(
mtime
 < 
	`ngx_fûe_mtime
(&
fi
)) {

1436 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1437 "°Æêbö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1438 
Áûed
;

1441 
ba£
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

1442 i‡(
ba£
 =
NULL
) {

1443 
Áûed
;

1446 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
ba£
, 
size
, 0);

1448 i‡(
n
 =
NGX_ERROR
) {

1449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1450 
ngx_ªad_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1451 
Áûed
;

1454 i‡((
size_t
Ë
n
 !
size
) {

1455 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

1456 
ngx_ªad_fûe_n
 " \"%s\"Ñeturned only %z bytes instead of %z",

1457 
«me
->
d©a
, 
n
, 
size
);

1458 
Áûed
;

1461 
hódî
 = (
ngx_hâp_geo_hódî_t
 *Ë
ba£
;

1463 i‡(
size
 < 16 || 
	`ngx_memcmp
(&
ngx_hâp_geo_hódî
, 
hódî
, 12) != 0) {

1464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1465 "öcom∑tibÀ bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1466 
Áûed
;

1469 
	`ngx_¸c32_öô
(
¸c32
);

1471 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë(
ba£
 + (
ngx_hâp_geo_hódî_t
));

1473 
vv
->
d©a
) {

1474 
Àn
 = 
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vv
->len,

1476 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, 
Àn
);

1477 
vv
->
d©a
 +(
size_t
Ë
ba£
;

1478 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë((
u_ch¨
 *Ëvv + 
Àn
);

1480 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1481 
vv
++;

1483 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
vv
;

1485 
i
 = 0; i < 0x10000; i++) {

1486 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë&
ønges
[
i
], (*));

1487 i‡(
ønges
[
i
]) {

1488 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *)

1489 ((
u_ch¨
 *Ë
ønges
[
i
] + (
size_t
Ë
ba£
);

1493 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë&
ønges
[0x10000];

1495 (
u_ch¨
 *Ë
ønge
 < 
ba£
 + 
size
) {

1496 
ønge
->
vÆue
) {

1497 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
,

1498 (
ngx_hâp_geo_ønge_t
));

1499 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1500 ((
u_ch¨
 *Ë
ønge
->
vÆue
 + (
size_t
Ë
ba£
);

1501 
ønge
++;

1503 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
, (*));

1504 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë((
u_ch¨
 *)Ñange + (*));

1507 
	`ngx_¸c32_föÆ
(
¸c32
);

1509 i‡(
¸c32
 !
hódî
->crc32) {

1510 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1511 "CRC32 mism©ch i¿bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1512 
Áûed
;

1515 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
, 0,

1516 "usög bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1518 
˘x
->
ö˛ude_«me
 = *
«me
;

1519 
˘x
->
bö¨y_ö˛ude
 = 1;

1520 
˘x
->
high
.
low
 = 
ønges
;

1521 
rc
 = 
NGX_OK
;

1523 
d⁄e
;

1525 
Áûed
:

1527 
rc
 = 
NGX_DECLINED
;

1529 
d⁄e
:

1531 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1532 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

1533 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1536  
rc
;

1537 
	}
}

1541 
	$ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
)

1543 
u_ch¨
 *
p
;

1544 
uöt32_t
 
hash
;

1545 
ngx_°r_t
 
s
;

1546 
ngx_uöt_t
 
i
;

1547 
ngx_fûe_m≠pög_t
 
fm
;

1548 
ngx_hâp_geo_ønge_t
 *
r
, *
ønge
, **
ønges
;

1549 
ngx_hâp_geo_hódî_t
 *
hódî
;

1550 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1552 
fm
.
«me
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, ctx->
ö˛ude_«me
.
Àn
 + 5);

1553 i‡(
fm
.
«me
 =
NULL
) {

1557 
	`ngx_•rötf
(
fm
.
«me
, "%V.bö%Z", &
˘x
->
ö˛ude_«me
);

1559 
fm
.
size
 = 
˘x
->
d©a_size
;

1560 
fm
.
log
 = 
˘x
->
poﬁ
->log;

1562 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
fm
.
log
, 0,

1563 "¸ótög bö¨y geÿøngêba£ \"%s\"", 
fm
.
«me
);

1565 i‡(
	`ngx_¸óã_fûe_m≠pög
(&
fm
Ë!
NGX_OK
) {

1569 
p
 = 
	`ngx_˝ymem
(
fm
.
addr
, &
ngx_hâp_geo_hódî
,

1570 (
ngx_hâp_geo_hódî_t
));

1572 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
fm
.
addr
,Ö, 
˘x
->
rbåì
.
roŸ
,

1573 
˘x
->
rbåì
.
£¡öñ
);

1575 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1577 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
p
;

1579 
p
 +0x10000 * (
ngx_hâp_geo_ønge_t
 *);

1581 
i
 = 0; i < 0x10000; i++) {

1582 
r
 = 
˘x
->
high
.
low
[
i
];

1583 i‡(
r
 =
NULL
) {

1587 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë
p
;

1588 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *Ë(
p
 - (
u_ch¨
 *Ë
fm
.
addr
);

1591 
s
.
Àn
 = 
r
->
vÆue
->len;

1592 
s
.
d©a
 = 
r
->
vÆue
->data;

1593 
hash
 = 
	`ngx_¸c32_l⁄g
(
s
.
d©a
, s.
Àn
);

1594 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1595 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, &
s
, 
hash
);

1597 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
gvvn
->
off£t
;

1598 
ønge
->
°¨t
 = 
r
->start;

1599 
ønge
->
íd
 = 
r
->end;

1600 
ønge
++;

1602 } (++
r
)->
vÆue
);

1604 
ønge
->
vÆue
 = 
NULL
;

1606 
p
 = (
u_ch¨
 *Ë
ønge
 + (*);

1609 
hódî
 = 
fm
.
addr
;

1610 
hódî
->
¸c32
 = 
	`ngx_¸c32_l⁄g
((
u_ch¨
 *Ë
fm
.
addr


1611 + (
ngx_hâp_geo_hódî_t
),

1612 
fm
.
size
 - (
ngx_hâp_geo_hódî_t
));

1614 
	`ngx_˛o£_fûe_m≠pög
(&
fm
);

1615 
	}
}

1618 
u_ch¨
 *

1619 
	$ngx_hâp_geo_c›y_vÆues
(
u_ch¨
 *
ba£
, u_ch¨ *
p
, 
ngx_rbåì_node_t
 *
node
,

1620 
ngx_rbåì_node_t
 *
£¡öñ
)

1622 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1623 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1625 i‡(
node
 =
£¡öñ
) {

1626  
p
;

1629 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *Ë
node
;

1630 
gvvn
->
off£t
 = 
p
 - 
ba£
;

1632 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
p
;

1633 *
vv
 = *
gvvn
->
vÆue
;

1634 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1635 
vv
->
d©a
 = (
u_ch¨
 *Ë(
p
 - 
ba£
);

1637 
p
 = 
	`ngx_˝ymem
’, 
gvvn
->
¢
.
°r
.
d©a
, gvvn->¢.°r.
Àn
);

1639 
p
 = 
	`ngx_Æign_±r
(p, (*));

1641 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
ba£
,Ö, 
node
->
À·
, 
£¡öñ
);

1643  
	`ngx_hâp_geo_c›y_vÆues
(
ba£
, 
p
, 
node
->
right
, 
£¡öñ
);

1644 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_geoip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<GeoIP.h
>

13 
	~<GeoIPCôy.h
>

16 
	#NGX_GEOIP_COUNTRY_CODE
 0

	)

17 
	#NGX_GEOIP_COUNTRY_CODE3
 1

	)

18 
	#NGX_GEOIP_COUNTRY_NAME
 2

	)

22 
GeoIP
 *
	mcou¡ry
;

23 
GeoIP
 *
	m‹g
;

24 
GeoIP
 *
	mcôy
;

25 
ngx_¨øy_t
 *
	m¥oxõs
;

26 
ngx_Êag_t
 
	m¥oxy_ªcursive
;

27 #i‡(
NGX_HAVE_GEOIP_V6
)

28 
	mcou¡ry_v6
:1;

29 
	m‹g_v6
:1;

30 
	mcôy_v6
:1;

32 } 
	tngx_hâp_geoù_c⁄f_t
;

36 
ngx_°r_t
 *
	m«me
;

37 
uöçå_t
 
	md©a
;

38 } 
	tngx_hâp_geoù_v¨_t
;

41 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_±
)(
	tGeoIP
 *,

42 
	tu_l⁄g
 
	taddr
);

45 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
	gngx_hâp_geoù_cou¡ry_fun˘i⁄s
[] = {

46 
GeoIP_cou¡ry_code_by_ùnum
,

47 
GeoIP_cou¡ry_code3_by_ùnum
,

48 
GeoIP_cou¡ry_«me_by_ùnum
,

52 #i‡(
NGX_HAVE_GEOIP_V6
)

54 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
)(
	tGeoIP
 *,

55 
	tgeoùv6_t
 
	taddr
);

58 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
	gngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[] = {

59 
GeoIP_cou¡ry_code_by_ùnum_v6
,

60 
GeoIP_cou¡ry_code3_by_ùnum_v6
,

61 
GeoIP_cou¡ry_«me_by_ùnum_v6
,

67 
ngx_öt_t
 
ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
GeoIPRec‹d
 *
ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
);

81 
ngx_öt_t
 
ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

82 *
ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

83 *
ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

84 *
ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

86 *
ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

87 *
c⁄f
);

88 *
ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

89 *
c⁄f
);

90 *
ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

91 *
c⁄f
);

92 
ngx_öt_t
 
ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

93 
ngx_cidr_t
 *
cidr
);

94 
ngx_hâp_geoù_˛ónup
(*
d©a
);

97 
ngx_comm™d_t
 
	gngx_hâp_geoù_comm™ds
[] = {

99 { 
ngx_°rög
("geoip_country"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

101 
ngx_hâp_geoù_cou¡ry
,

102 
NGX_HTTP_MAIN_CONF_OFFSET
,

104 
NULL
 },

106 { 
ngx_°rög
("geoip_org"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

108 
ngx_hâp_geoù_‹g
,

109 
NGX_HTTP_MAIN_CONF_OFFSET
,

111 
NULL
 },

113 { 
ngx_°rög
("geoip_city"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

115 
ngx_hâp_geoù_côy
,

116 
NGX_HTTP_MAIN_CONF_OFFSET
,

118 
NULL
 },

120 { 
ngx_°rög
("geoip_proxy"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_geoù_¥oxy
,

123 
NGX_HTTP_MAIN_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("geoip_proxy_recursive"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_FLAG
,

129 
ngx_c⁄f_£t_Êag_¶Ÿ
,

130 
NGX_HTTP_MAIN_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_geoù_c⁄f_t
, 
¥oxy_ªcursive
),

132 
NULL
 },

134 
ngx_nuŒ_comm™d


138 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geoù_moduÀ_˘x
 = {

139 
ngx_hâp_geoù_add_v¨übÀs
,

140 
NULL
,

142 
ngx_hâp_geoù_¸óã_c⁄f
,

143 
ngx_hâp_geoù_öô_c⁄f
,

145 
NULL
,

146 
NULL
,

148 
NULL
,

149 
NULL


153 
ngx_moduÀ_t
 
	gngx_hâp_geoù_moduÀ
 = {

154 
NGX_MODULE_V1
,

155 &
ngx_hâp_geoù_moduÀ_˘x
,

156 
ngx_hâp_geoù_comm™ds
,

157 
NGX_HTTP_MODULE
,

158 
NULL
,

159 
NULL
,

160 
NULL
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NULL
,

165 
NGX_MODULE_V1_PADDING


169 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_geoù_v¨s
[] = {

171 { 
ngx_°rög
("geoù_cou¡ry_code"), 
NULL
,

172 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

173 
NGX_GEOIP_COUNTRY_CODE
, 0, 0 },

175 { 
ngx_°rög
("geoù_cou¡ry_code3"), 
NULL
,

176 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

177 
NGX_GEOIP_COUNTRY_CODE3
, 0, 0 },

179 { 
ngx_°rög
("geoù_cou¡ry_«me"), 
NULL
,

180 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

181 
NGX_GEOIP_COUNTRY_NAME
, 0, 0 },

183 { 
ngx_°rög
("geoù_‹g"), 
NULL
,

184 
ngx_hâp_geoù_‹g_v¨übÀ
,

187 { 
ngx_°rög
("geoù_côy_c⁄töít_code"), 
NULL
,

188 
ngx_hâp_geoù_côy_v¨übÀ
,

189 
off£tof
(
GeoIPRec‹d
, 
c⁄töít_code
), 0, 0 },

191 { 
ngx_°rög
("geoù_côy_cou¡ry_code"), 
NULL
,

192 
ngx_hâp_geoù_côy_v¨übÀ
,

193 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code
), 0, 0 },

195 { 
ngx_°rög
("geoù_côy_cou¡ry_code3"), 
NULL
,

196 
ngx_hâp_geoù_côy_v¨übÀ
,

197 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code3
), 0, 0 },

199 { 
ngx_°rög
("geoù_côy_cou¡ry_«me"), 
NULL
,

200 
ngx_hâp_geoù_côy_v¨übÀ
,

201 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_«me
), 0, 0 },

203 { 
ngx_°rög
("geoù_ªgi⁄"), 
NULL
,

204 
ngx_hâp_geoù_côy_v¨übÀ
,

205 
off£tof
(
GeoIPRec‹d
, 
ªgi⁄
), 0, 0 },

207 { 
ngx_°rög
("geoù_ªgi⁄_«me"), 
NULL
,

208 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
,

211 { 
ngx_°rög
("geoù_côy"), 
NULL
,

212 
ngx_hâp_geoù_côy_v¨übÀ
,

213 
off£tof
(
GeoIPRec‹d
, 
côy
), 0, 0 },

215 { 
ngx_°rög
("geoù_po°Æ_code"), 
NULL
,

216 
ngx_hâp_geoù_côy_v¨übÀ
,

217 
off£tof
(
GeoIPRec‹d
, 
po°Æ_code
), 0, 0 },

219 { 
ngx_°rög
("geoù_œtôude"), 
NULL
,

220 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

221 
off£tof
(
GeoIPRec‹d
, 
œtôude
), 0, 0 },

223 { 
ngx_°rög
("geoù_l⁄gôude"), 
NULL
,

224 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

225 
off£tof
(
GeoIPRec‹d
, 
l⁄gôude
), 0, 0 },

227 { 
ngx_°rög
("geoù_dma_code"), 
NULL
,

228 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

229 
off£tof
(
GeoIPRec‹d
, 
dma_code
), 0, 0 },

231 { 
ngx_°rög
("geoù_¨ó_code"), 
NULL
,

232 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

233 
off£tof
(
GeoIPRec‹d
, 
¨ó_code
), 0, 0 },

235 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

239 
u_l⁄g


240 
	$ngx_hâp_geoù_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

242 
ngx_addr_t
 
addr
;

243 
ngx_¨øy_t
 *
xfwd
;

244 
sockaddr_ö
 *
sö
;

246 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

247 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

250 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

252 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

253 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

254 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

257 #i‡(
NGX_HAVE_INET6
)

259 i‡(
addr
.
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

260 
u_ch¨
 *
p
;

261 
ö_addr_t
 
öaddr
;

262 
ö6_addr
 *
öaddr6
;

264 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

266 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

267 
p
 = 
öaddr6
->
s6_addr
;

269 
öaddr
 = 
p
[12] << 24;

270 
öaddr
 +
p
[13] << 16;

271 
öaddr
 +
p
[14] << 8;

272 
öaddr
 +
p
[15];

274  
öaddr
;

280 i‡(
addr
.
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

281  
INADDR_NONE
;

284 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

285  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

286 
	}
}

289 #i‡(
NGX_HAVE_GEOIP_V6
)

291 
geoùv6_t


292 
	$ngx_hâp_geoù_addr_v6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

294 
ngx_addr_t
 
addr
;

295 
ngx_¨øy_t
 *
xfwd
;

296 
ö_addr_t
 
addr4
;

297 
ö6_addr
 
addr6
;

298 
sockaddr_ö
 *
sö
;

299 
sockaddr_ö6
 *
sö6
;

301 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

302 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

305 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

307 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

308 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

309 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

312 
addr
.
sockaddr
->
ß_Ámûy
) {

314 
AF_INET
:

316 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

317 
addr4
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

319 
	`ngx_memzîo
(&
addr6
, (
ö6_addr
));

320 
addr6
.
s6_addr
[10] = 0xff;

321 
addr6
.
s6_addr
[11] = 0xff;

322 
addr6
.
s6_addr
[12] = 
addr4
 >> 24;

323 
addr6
.
s6_addr
[13] = 
addr4
 >> 16;

324 
addr6
.
s6_addr
[14] = 
addr4
 >> 8;

325 
addr6
.
s6_addr
[15] = 
addr4
;

326  
addr6
;

328 
AF_INET6
:

329 
sö6
 = (
sockaddr_ö6
 *Ë
addr
.
sockaddr
;

330  
sö6
->
sö6_addr
;

333  
ö6addr_™y
;

335 
	}
}

340 
ngx_öt_t


341 
	$ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

342 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

344 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

345 
ngx_hâp_geoù_cou¡ry_fun˘i⁄s
[
d©a
];

346 #i‡(
NGX_HAVE_GEOIP_V6
)

347 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
h™dÀr_v6
 =

348 
ngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[
d©a
];

351 c⁄° *
vÆ
;

352 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

354 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

356 i‡(
gcf
->
cou¡ry
 =
NULL
) {

357 
nŸ_found
;

360 #i‡(
NGX_HAVE_GEOIP_V6
)

361 
vÆ
 = 
gcf
->
cou¡ry_v6


362 ? 
	`h™dÀr_v6
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr_v6
(
r
, gcf))

363 : 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

365 
vÆ
 = 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

368 i‡(
vÆ
 =
NULL
) {

369 
nŸ_found
;

372 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

373 
v
->
vÆid
 = 1;

374 
v
->
no_ˇchóbÀ
 = 0;

375 
v
->
nŸ_found
 = 0;

376 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

378  
NGX_OK
;

380 
nŸ_found
:

382 
v
->
nŸ_found
 = 1;

384  
NGX_OK
;

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

390 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

392 
size_t
 
Àn
;

393 *
vÆ
;

394 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

396 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

398 i‡(
gcf
->
‹g
 =
NULL
) {

399 
nŸ_found
;

402 #i‡(
NGX_HAVE_GEOIP_V6
)

403 
vÆ
 = 
gcf
->
‹g_v6


404 ? 
	`GeoIP_«me_by_ùnum_v6
(
gcf
->
‹g
,

405 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

406 : 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
,

407 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

409 
vÆ
 = 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

412 i‡(
vÆ
 =
NULL
) {

413 
nŸ_found
;

416 
Àn
 = 
	`ngx_°æí
(
vÆ
);

417 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

418 i‡(
v
->
d©a
 =
NULL
) {

419 
	`ngx_‰ì
(
vÆ
);

420  
NGX_ERROR
;

423 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

425 
v
->
Àn
 =Üen;

426 
v
->
vÆid
 = 1;

427 
v
->
no_ˇchóbÀ
 = 0;

428 
v
->
nŸ_found
 = 0;

430 
	`ngx_‰ì
(
vÆ
);

432  
NGX_OK
;

434 
nŸ_found
:

436 
v
->
nŸ_found
 = 1;

438  
NGX_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

444 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

446 *
vÆ
;

447 
size_t
 
Àn
;

448 
GeoIPRec‹d
 *
gr
;

450 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

451 i‡(
gr
 =
NULL
) {

452 
nŸ_found
;

455 
vÆ
 = *(**Ë((*Ë
gr
 + 
d©a
);

456 i‡(
vÆ
 =
NULL
) {

457 
no_vÆue
;

460 
Àn
 = 
	`ngx_°æí
(
vÆ
);

461 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

462 i‡(
v
->
d©a
 =
NULL
) {

463 
	`GeoIPRec‹d_dñëe
(
gr
);

464  
NGX_ERROR
;

467 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

469 
v
->
Àn
 =Üen;

470 
v
->
vÆid
 = 1;

471 
v
->
no_ˇchóbÀ
 = 0;

472 
v
->
nŸ_found
 = 0;

474 
	`GeoIPRec‹d_dñëe
(
gr
);

476  
NGX_OK
;

478 
no_vÆue
:

480 
	`GeoIPRec‹d_dñëe
(
gr
);

482 
nŸ_found
:

484 
v
->
nŸ_found
 = 1;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

492 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

494 
size_t
 
Àn
;

495 c⁄° *
vÆ
;

496 
GeoIPRec‹d
 *
gr
;

498 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

499 i‡(
gr
 =
NULL
) {

500 
nŸ_found
;

503 
vÆ
 = 
	`GeoIP_ªgi⁄_«me_by_code
(
gr
->
cou¡ry_code
, gr->
ªgi⁄
);

505 
	`GeoIPRec‹d_dñëe
(
gr
);

507 i‡(
vÆ
 =
NULL
) {

508 
nŸ_found
;

511 
Àn
 = 
	`ngx_°æí
(
vÆ
);

512 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

513 i‡(
v
->
d©a
 =
NULL
) {

514  
NGX_ERROR
;

517 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

519 
v
->
Àn
 =Üen;

520 
v
->
vÆid
 = 1;

521 
v
->
no_ˇchóbÀ
 = 0;

522 
v
->
nŸ_found
 = 0;

524  
NGX_OK
;

526 
nŸ_found
:

528 
v
->
nŸ_found
 = 1;

530  
NGX_OK
;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

538 
vÆ
;

539 
GeoIPRec‹d
 *
gr
;

541 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

542 i‡(
gr
 =
NULL
) {

543 
v
->
nŸ_found
 = 1;

544  
NGX_OK
;

547 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
 + 5);

548 i‡(
v
->
d©a
 =
NULL
) {

549 
	`GeoIPRec‹d_dñëe
(
gr
);

550  
NGX_ERROR
;

553 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

555 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%.4f", 
vÆ
) - v->data;

557 
	`GeoIPRec‹d_dñëe
(
gr
);

559  
NGX_OK
;

560 
	}
}

563 
ngx_öt_t


564 
	$ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

565 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

567 
vÆ
;

568 
GeoIPRec‹d
 *
gr
;

570 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

571 i‡(
gr
 =
NULL
) {

572 
v
->
nŸ_found
 = 1;

573  
NGX_OK
;

576 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

577 i‡(
v
->
d©a
 =
NULL
) {

578 
	`GeoIPRec‹d_dñëe
(
gr
);

579  
NGX_ERROR
;

582 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

584 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%d", 
vÆ
) - v->data;

586 
	`GeoIPRec‹d_dñëe
(
gr
);

588  
NGX_OK
;

589 
	}
}

592 
GeoIPRec‹d
 *

593 
	$ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
)

595 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

597 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

599 i‡(
gcf
->
côy
) {

600 #i‡(
NGX_HAVE_GEOIP_V6
)

601  
gcf
->
côy_v6


602 ? 
	`GeoIP_ªc‹d_by_ùnum_v6
(
gcf
->
côy
,

603 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

604 : 
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
,

605 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

607  
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

611  
NULL
;

612 
	}
}

615 
ngx_öt_t


616 
	$ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

618 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

620 
v
 = 
ngx_hâp_geoù_v¨s
; v->
«me
.
Àn
; v++) {

621 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

622 i‡(
v¨
 =
NULL
) {

623  
NGX_ERROR
;

626 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

627 
v¨
->
d©a
 = 
v
->data;

630  
NGX_OK
;

631 
	}
}

635 
	$ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

637 
ngx_poﬁ_˛ónup_t
 *
˛n
;

638 
ngx_hâp_geoù_c⁄f_t
 *
c⁄f
;

640 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_geoù_c⁄f_t
));

641 i‡(
c⁄f
 =
NULL
) {

642  
NULL
;

645 
c⁄f
->
¥oxy_ªcursive
 = 
NGX_CONF_UNSET
;

647 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

648 i‡(
˛n
 =
NULL
) {

649  
NULL
;

652 
˛n
->
h™dÀr
 = 
ngx_hâp_geoù_˛ónup
;

653 
˛n
->
d©a
 = 
c⁄f
;

655  
c⁄f
;

656 
	}
}

660 
	$ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

662 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

664 
	`ngx_c⁄f_öô_vÆue
(
gcf
->
¥oxy_ªcursive
, 0);

666  
NGX_CONF_OK
;

667 
	}
}

671 
	$ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

673 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

675 
ngx_°r_t
 *
vÆue
;

677 i‡(
gcf
->
cou¡ry
) {

681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

683 
gcf
->
cou¡ry
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

685 i‡(
gcf
->
cou¡ry
 =
NULL
) {

686 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

687 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

689  
NGX_CONF_ERROR
;

692 i‡(
cf
->
¨gs
->
√…s
 == 3) {

693 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

694 
	`GeoIP_£t_ch¨£t
 (
gcf
->
cou¡ry
, 
GEOIP_CHARSET_UTF8
);

697 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

698 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

699  
NGX_CONF_ERROR
;

703 
gcf
->
cou¡ry
->
d©aba£Ty≥
) {

705 
GEOIP_COUNTRY_EDITION
:

707  
NGX_CONF_OK
;

709 #i‡(
NGX_HAVE_GEOIP_V6
)

710 
GEOIP_COUNTRY_EDITION_V6
:

712 
gcf
->
cou¡ry_v6
 = 1;

713  
NGX_CONF_OK
;

717 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

719 &
vÆue
[1], 
gcf
->
cou¡ry
->
d©aba£Ty≥
);

720  
NGX_CONF_ERROR
;

722 
	}
}

726 
	$ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

728 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

730 
ngx_°r_t
 *
vÆue
;

732 i‡(
gcf
->
‹g
) {

736 
vÆue
 = 
cf
->
¨gs
->
ñts
;

738 
gcf
->
‹g
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

740 i‡(
gcf
->
‹g
 =
NULL
) {

741 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

742 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

744  
NGX_CONF_ERROR
;

747 i‡(
cf
->
¨gs
->
√…s
 == 3) {

748 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

749 
	`GeoIP_£t_ch¨£t
 (
gcf
->
‹g
, 
GEOIP_CHARSET_UTF8
);

752 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

753 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

754  
NGX_CONF_ERROR
;

758 
gcf
->
‹g
->
d©aba£Ty≥
) {

760 
GEOIP_ISP_EDITION
:

761 
GEOIP_ORG_EDITION
:

762 
GEOIP_DOMAIN_EDITION
:

763 
GEOIP_ASNUM_EDITION
:

765  
NGX_CONF_OK
;

767 #i‡(
NGX_HAVE_GEOIP_V6
)

768 
GEOIP_ISP_EDITION_V6
:

769 
GEOIP_ORG_EDITION_V6
:

770 
GEOIP_DOMAIN_EDITION_V6
:

771 
GEOIP_ASNUM_EDITION_V6
:

773 
gcf
->
‹g_v6
 = 1;

774  
NGX_CONF_OK
;

778 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

780 &
vÆue
[1], 
gcf
->
‹g
->
d©aba£Ty≥
);

781  
NGX_CONF_ERROR
;

783 
	}
}

787 
	$ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

789 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

791 
ngx_°r_t
 *
vÆue
;

793 i‡(
gcf
->
côy
) {

797 
vÆue
 = 
cf
->
¨gs
->
ñts
;

799 
gcf
->
côy
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

801 i‡(
gcf
->
côy
 =
NULL
) {

802 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

803 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

805  
NGX_CONF_ERROR
;

808 i‡(
cf
->
¨gs
->
√…s
 == 3) {

809 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

810 
	`GeoIP_£t_ch¨£t
 (
gcf
->
côy
, 
GEOIP_CHARSET_UTF8
);

813 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

814 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

815  
NGX_CONF_ERROR
;

819 
gcf
->
côy
->
d©aba£Ty≥
) {

821 
GEOIP_CITY_EDITION_REV0
:

822 
GEOIP_CITY_EDITION_REV1
:

824  
NGX_CONF_OK
;

826 #i‡(
NGX_HAVE_GEOIP_V6
)

827 
GEOIP_CITY_EDITION_REV0_V6
:

828 
GEOIP_CITY_EDITION_REV1_V6
:

830 
gcf
->
côy_v6
 = 1;

831  
NGX_CONF_OK
;

835 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

837 &
vÆue
[1], 
gcf
->
côy
->
d©aba£Ty≥
);

838  
NGX_CONF_ERROR
;

840 
	}
}

844 
	$ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

846 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

848 
ngx_°r_t
 *
vÆue
;

849 
ngx_cidr_t
 
cidr
, *
c
;

851 
vÆue
 = 
cf
->
¨gs
->
ñts
;

853 i‡(
	`ngx_hâp_geoù_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

854  
NGX_CONF_ERROR
;

857 i‡(
gcf
->
¥oxõs
 =
NULL
) {

858 
gcf
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_cidr_t
));

859 i‡(
gcf
->
¥oxõs
 =
NULL
) {

860  
NGX_CONF_ERROR
;

864 
c
 = 
	`ngx_¨øy_push
(
gcf
->
¥oxõs
);

865 i‡(
c
 =
NULL
) {

866  
NGX_CONF_ERROR
;

869 *
c
 = 
cidr
;

871  
NGX_CONF_OK
;

872 
	}
}

874 
ngx_öt_t


875 
	$ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

877 
ngx_öt_t
 
rc
;

879 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

880 
cidr
->
Ámûy
 = 
AF_INET
;

881 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

882 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

884  
NGX_OK
;

887 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

889 i‡(
rc
 =
NGX_ERROR
) {

890 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

891  
NGX_ERROR
;

894 i‡(
rc
 =
NGX_DONE
) {

895 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

896 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

899  
NGX_OK
;

900 
	}
}

904 
	$ngx_hâp_geoù_˛ónup
(*
d©a
)

906 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
d©a
;

908 i‡(
gcf
->
cou¡ry
) {

909 
	`GeoIP_dñëe
(
gcf
->
cou¡ry
);

912 i‡(
gcf
->
‹g
) {

913 
	`GeoIP_dñëe
(
gcf
->
‹g
);

916 i‡(
gcf
->
côy
) {

917 
	`GeoIP_dñëe
(
gcf
->
côy
);

919 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_gunzip_filter_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

13 
	~<zlib.h
>

17 
ngx_Êag_t
 
	míabÀ
;

18 
ngx_bufs_t
 
	mbufs
;

19 } 
	tngx_hâp_gunzù_c⁄f_t
;

23 
ngx_chaö_t
 *
	mö
;

24 
ngx_chaö_t
 *
	m‰ì
;

25 
ngx_chaö_t
 *
	mbusy
;

26 
ngx_chaö_t
 *
	mout
;

27 
ngx_chaö_t
 **
	mœ°_out
;

29 
ngx_buf_t
 *
	mö_buf
;

30 
ngx_buf_t
 *
	mout_buf
;

31 
ngx_öt_t
 
	mbufs
;

33 
	m°¨ãd
:1;

34 
	mÊush
:4;

35 
	mªdo
:1;

36 
	md⁄e
:1;

37 
	mnomem
:1;

39 
z_°ªam
 
	mz°ªam
;

40 
ngx_hâp_ªque°_t
 *
	mªque°
;

41 } 
	tngx_hâp_gunzù_˘x_t
;

44 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

45 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

46 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

48 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

50 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

52 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

55 *
ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

56 
u_öt
 
size
);

57 
ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
);

59 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

60 *
ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

62 *
∑ª¡
, *
chûd
);

65 
ngx_comm™d_t
 
	gngx_hâp_gunzù_fûãr_comm™ds
[] = {

67 { 
ngx_°rög
("gunzip"),

68 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

69 
ngx_c⁄f_£t_Êag_¶Ÿ
,

70 
NGX_HTTP_LOC_CONF_OFFSET
,

71 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
íabÀ
),

72 
NULL
 },

74 { 
ngx_°rög
("gunzip_buffers"),

75 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

76 
ngx_c⁄f_£t_bufs_¶Ÿ
,

77 
NGX_HTTP_LOC_CONF_OFFSET
,

78 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
bufs
),

79 
NULL
 },

81 
ngx_nuŒ_comm™d


85 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ_˘x
 = {

86 
NULL
,

87 
ngx_hâp_gunzù_fûãr_öô
,

89 
NULL
,

90 
NULL
,

92 
NULL
,

93 
NULL
,

95 
ngx_hâp_gunzù_¸óã_c⁄f
,

96 
ngx_hâp_gunzù_mîge_c⁄f


100 
ngx_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_hâp_gunzù_fûãr_moduÀ_˘x
,

103 
ngx_hâp_gunzù_fûãr_comm™ds
,

104 
NGX_HTTP_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

117 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

120 
ngx_öt_t


121 
	$ngx_hâp_gunzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

123 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

124 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

126 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

132 i‡(!
c⁄f
->
íabÀ


133 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 =
NULL


134 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
 != 4

135 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
d©a
,

136 (
u_ch¨
 *) "gzip", 4) != 0)

138  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

141 
r
->
gzù_v¨y
 = 1;

143 i‡(!
r
->
gzù_ã°ed
) {

144 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë=
NGX_OK
) {

145  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

148 } i‡(
r
->
gzù_ok
) {

149  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

152 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gunzù_˘x_t
));

153 i‡(
˘x
 =
NULL
) {

154  
NGX_ERROR
;

157 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

159 
˘x
->
ªque°
 = 
r
;

161 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

163 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

164 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

166 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

167 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

168 
	`ngx_hâp_˛ór_ëag
(
r
);

170  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

171 
	}
}

174 
ngx_öt_t


175 
	$ngx_hâp_gunzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

177 
rc
;

178 
ngx_chaö_t
 *
˛
;

179 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

181 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

183 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

184  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

187 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

190 i‡(!
˘x
->
°¨ãd
) {

191 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

192 
Áûed
;

196 i‡(
ö
) {

197 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

198 
Áûed
;

202 i‡(
˘x
->
nomem
 || 
ö
 =
NULL
) {

206 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

207 
Áûed
;

210 
˛
 = 
NULL
;

212 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

213 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

214 
˘x
->
nomem
 = 0;

225 
rc
 = 
	`ngx_hâp_gunzù_fûãr_add_d©a
(
r
, 
˘x
);

227 i‡(
rc
 =
NGX_DECLINED
) {

231 i‡(
rc
 =
NGX_AGAIN
) {

238 
rc
 = 
	`ngx_hâp_gunzù_fûãr_gë_buf
(
r
, 
˘x
);

240 i‡(
rc
 =
NGX_DECLINED
) {

244 i‡(
rc
 =
NGX_ERROR
) {

245 
Áûed
;

248 
rc
 = 
	`ngx_hâp_gunzù_fûãr_öÊ©e
(
r
, 
˘x
);

250 i‡(
rc
 =
NGX_OK
) {

254 i‡(
rc
 =
NGX_ERROR
) {

255 
Áûed
;

261 i‡(
˘x
->
out
 =
NULL
) {

262  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

265 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

267 i‡(
rc
 =
NGX_ERROR
) {

268 
Áûed
;

271 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

272 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

273 
˘x
->
œ°_out
 = &˘x->
out
;

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

276 "gunzù out: %p", 
˘x
->
out
);

278 
˘x
->
nomem
 = 0;

280 i‡(
˘x
->
d⁄e
) {

281  
rc
;

287 
Áûed
:

289 
˘x
->
d⁄e
 = 1;

291  
NGX_ERROR
;

292 
	}
}

295 
ngx_öt_t


296 
	$ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

297 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

299 
rc
;

301 
˘x
->
z°ªam
.
√xt_ö
 = 
Z_NULL
;

302 
˘x
->
z°ªam
.
avaû_ö
 = 0;

304 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gunzù_fûãr_Æloc
;

305 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gunzù_fûãr_‰ì
;

306 
˘x
->
z°ªam
.
›aque
 = ctx;

309 
rc
 = 
	`öÊ©eInô2
(&
˘x
->
z°ªam
, 
MAX_WBITS
 + 16);

311 i‡(
rc
 !
Z_OK
) {

312 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

313 "öÊ©eInô2(ËÁûed: %d", 
rc
);

314  
NGX_ERROR
;

317 
˘x
->
°¨ãd
 = 1;

319 
˘x
->
œ°_out
 = &˘x->
out
;

320 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

322  
NGX_OK
;

323 
	}
}

326 
ngx_öt_t


327 
	$ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

328 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

330 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

331  
NGX_OK
;

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

335 "gunzù in: %p", 
˘x
->
ö
);

337 i‡(
˘x
->
ö
 =
NULL
) {

338  
NGX_DECLINED
;

341 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

342 
˘x
->
ö
 = ctx->ö->
√xt
;

344 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

345 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

347 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

349 
˘x
->
ö_buf
,

350 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

352 i‡(
˘x
->
ö_buf
->
œ°_buf
 || ctx->ö_buf->
œ°_ö_chaö
) {

353 
˘x
->
Êush
 = 
Z_FINISH
;

355 } i‡(
˘x
->
ö_buf
->
Êush
) {

356 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

358 } i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

360  
NGX_AGAIN
;

363  
NGX_OK
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

369 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

371 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

373 i‡(
˘x
->
z°ªam
.
avaû_out
) {

374  
NGX_OK
;

377 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

379 i‡(
˘x
->
‰ì
) {

380 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

381 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

383 
˘x
->
out_buf
->
Êush
 = 0;

385 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

387 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

388 i‡(
˘x
->
out_buf
 =
NULL
) {

389  
NGX_ERROR
;

392 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
;

393 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

394 
˘x
->
bufs
++;

397 
˘x
->
nomem
 = 1;

398  
NGX_DECLINED
;

401 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

402 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

404  
NGX_OK
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

410 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

412 
rc
;

413 
ngx_buf_t
 *
b
;

414 
ngx_chaö_t
 *
˛
;

416 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

418 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

419 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

420 
˘x
->
Êush
, ctx->
ªdo
);

422 
rc
 = 
	`öÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

424 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

426 "öÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

427  
NGX_ERROR
;

430 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

432 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

433 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

434 
rc
);

436 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

438 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

440 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

441 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

443 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

444 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

448 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

450 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

454 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

455 i‡(
˛
 =
NULL
) {

456  
NGX_ERROR
;

459 
˛
->
buf
 = 
˘x
->
out_buf
;

460 
˛
->
√xt
 = 
NULL
;

461 *
˘x
->
œ°_out
 = 
˛
;

462 
˘x
->
œ°_out
 = &
˛
->
√xt
;

464 
˘x
->
ªdo
 = 1;

466  
NGX_AGAIN
;

469 
˘x
->
ªdo
 = 0;

471 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

473 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

475 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

476 i‡(
˛
 =
NULL
) {

477  
NGX_ERROR
;

480 
b
 = 
˘x
->
out_buf
;

482 i‡(
	`ngx_buf_size
(
b
) == 0) {

484 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

485 i‡(
b
 =
NULL
) {

486  
NGX_ERROR
;

490 
˘x
->
z°ªam
.
avaû_out
 = 0;

493 
b
->
Êush
 = 1;

495 
˛
->
buf
 = 
b
;

496 
˛
->
√xt
 = 
NULL
;

497 *
˘x
->
œ°_out
 = 
˛
;

498 
˘x
->
œ°_out
 = &
˛
->
√xt
;

500  
NGX_OK
;

503 i‡(
˘x
->
Êush
 =
Z_FINISH
 && ctx->
z°ªam
.
avaû_ö
 == 0) {

505 i‡(
rc
 !
Z_STREAM_END
) {

506 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

507 "öÊ©e(Ëªtu∫ed %d o¿ª•⁄£Énd", 
rc
);

508  
NGX_ERROR
;

511 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

512  
NGX_ERROR
;

515  
NGX_OK
;

518 i‡(
rc
 =
Z_STREAM_END
 && 
˘x
->
z°ªam
.
avaû_ö
 > 0) {

520 
rc
 = 
	`öÊ©eRe£t
(&
˘x
->
z°ªam
);

522 i‡(
rc
 !
Z_OK
) {

523 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

524 "öÊ©eRe£t(ËÁûed: %d", 
rc
);

525  
NGX_ERROR
;

528 
˘x
->
ªdo
 = 1;

530  
NGX_AGAIN
;

533 i‡(
˘x
->
ö
 =
NULL
) {

535 
b
 = 
˘x
->
out_buf
;

537 i‡(
	`ngx_buf_size
(
b
) == 0) {

538  
NGX_OK
;

541 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

542 i‡(
˛
 =
NULL
) {

543  
NGX_ERROR
;

546 
˘x
->
z°ªam
.
avaû_out
 = 0;

548 
˛
->
buf
 = 
b
;

549 
˛
->
√xt
 = 
NULL
;

550 *
˘x
->
œ°_out
 = 
˛
;

551 
˘x
->
œ°_out
 = &
˛
->
√xt
;

553  
NGX_OK
;

556  
NGX_AGAIN
;

557 
	}
}

560 
ngx_öt_t


561 
	$ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

562 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

564 
rc
;

565 
ngx_buf_t
 *
b
;

566 
ngx_chaö_t
 *
˛
;

568 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

571 
rc
 = 
	`öÊ©eEnd
(&
˘x
->
z°ªam
);

573 i‡(
rc
 !
Z_OK
) {

574 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

575 "öÊ©eEnd(ËÁûed: %d", 
rc
);

576  
NGX_ERROR
;

579 
b
 = 
˘x
->
out_buf
;

581 i‡(
	`ngx_buf_size
(
b
) == 0) {

583 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

584 i‡(
b
 =
NULL
) {

585  
NGX_ERROR
;

589 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

590 i‡(
˛
 =
NULL
) {

591  
NGX_ERROR
;

594 
˛
->
buf
 = 
b
;

595 
˛
->
√xt
 = 
NULL
;

596 *
˘x
->
œ°_out
 = 
˛
;

597 
˘x
->
œ°_out
 = &
˛
->
√xt
;

599 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

600 
b
->
œ°_ö_chaö
 = 1;

601 
b
->
sync
 = 1;

603 
˘x
->
d⁄e
 = 1;

605  
NGX_OK
;

606 
	}
}

610 
	$ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

612 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

614 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

616 
ôems
, 
size
);

618  
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

619 
	}
}

623 
	$ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
)

626 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

628 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

629 "gunzù fªe: %p", 
addªss
);

631 
	}
}

635 
	$ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

637 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

639 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gunzù_c⁄f_t
));

640 i‡(
c⁄f
 =
NULL
) {

641  
NULL
;

650 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

652  
c⁄f
;

653 
	}
}

657 
	$ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

659 
ngx_hâp_gunzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

660 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

662 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

664 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

665 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

667  
NGX_CONF_OK
;

668 
	}
}

671 
ngx_öt_t


672 
	$ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

674 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

675 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gunzù_hódî_fûãr
;

677 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

678 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gunzù_body_fûãr
;

680  
NGX_OK
;

681 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_gzip_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<zlib.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	mno_buf„r
;

19 
ngx_hash_t
 
	mty≥s
;

21 
ngx_bufs_t
 
	mbufs
;

23 
size_t
 
	mpo°p⁄e_gzùpög
;

24 
ngx_öt_t
 
	mÀvñ
;

25 
size_t
 
	mwbôs
;

26 
size_t
 
	mmemÀvñ
;

27 
ssize_t
 
	mmö_Àngth
;

29 
ngx_¨øy_t
 *
	mty≥s_keys
;

30 } 
	tngx_hâp_gzù_c⁄f_t
;

34 
ngx_chaö_t
 *
	mö
;

35 
ngx_chaö_t
 *
	m‰ì
;

36 
ngx_chaö_t
 *
	mbusy
;

37 
ngx_chaö_t
 *
	mout
;

38 
ngx_chaö_t
 **
	mœ°_out
;

40 
ngx_chaö_t
 *
	mc›õd
;

41 
ngx_chaö_t
 *
	mc›y_buf
;

43 
ngx_buf_t
 *
	mö_buf
;

44 
ngx_buf_t
 *
	mout_buf
;

45 
ngx_öt_t
 
	mbufs
;

47 *
	m¥óŒoˇãd
;

48 *
	m‰ì_mem
;

49 
ngx_uöt_t
 
	mÆloˇãd
;

51 
	mwbôs
;

52 
	mmemÀvñ
;

54 
	mÊush
:4;

55 
	mªdo
:1;

56 
	md⁄e
:1;

57 
	mnomem
:1;

58 
	mgzhódî
:1;

59 
	mbuf„rög
:1;

61 
size_t
 
	mzö
;

62 
size_t
 
	mzout
;

64 
uöt32_t
 
	m¸c32
;

65 
z_°ªam
 
	mz°ªam
;

66 
ngx_hâp_ªque°_t
 *
	mªque°
;

67 } 
	tngx_hâp_gzù_˘x_t
;

70 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

72 
	sgzåaûî
 {

73 
uöt32_t
 
	m¸c32
;

74 
uöt32_t
 
	mzÀn
;

79 
	sgzåaûî
 {

80 
u_ch¨
 
	m¸c32
[4];

81 
u_ch¨
 
	mzÀn
[4];

87 
ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_gzù_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
,

90 
ngx_chaö_t
 *
ö
);

91 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_gzù_˘x_t
 *
˘x
);

93 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_gzù_˘x_t
 *
˘x
);

95 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_gzù_˘x_t
 *
˘x
);

97 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_gzù_˘x_t
 *
˘x
);

99 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_gzù_˘x_t
 *
˘x
);

101 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_gzù_˘x_t
 *
˘x
);

104 *
ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

105 
u_öt
 
size
);

106 
ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
);

107 
ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_hâp_gzù_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

111 
ngx_öt_t
 
ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

114 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 *
ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

119 *
ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

122 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_gzù_comp_Àvñ_bounds
 = {

123 
ngx_c⁄f_check_num_bounds
, 1, 9

126 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_wödow_p
 = 
ngx_hâp_gzù_wödow
;

127 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_hash_p
 = 
ngx_hâp_gzù_hash
;

130 
ngx_comm™d_t
 
	gngx_hâp_gzù_fûãr_comm™ds
[] = {

132 { 
ngx_°rög
("gzip"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


134 |
NGX_CONF_FLAG
,

135 
ngx_c⁄f_£t_Êag_¶Ÿ
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
íabÀ
),

138 
NULL
 },

140 { 
ngx_°rög
("gzip_buffers"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

142 
ngx_c⁄f_£t_bufs_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
bufs
),

145 
NULL
 },

147 { 
ngx_°rög
("gzip_types"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

149 
ngx_hâp_ty≥s_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
ty≥s_keys
),

152 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

154 { 
ngx_°rög
("gzip_comp_level"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_num_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
Àvñ
),

159 &
ngx_hâp_gzù_comp_Àvñ_bounds
 },

161 { 
ngx_°rög
("gzip_window"),

162 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

163 
ngx_c⁄f_£t_size_¶Ÿ
,

164 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
wbôs
),

166 &
ngx_hâp_gzù_wödow_p
 },

168 { 
ngx_°rög
("gzip_hash"),

169 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

170 
ngx_c⁄f_£t_size_¶Ÿ
,

171 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
memÀvñ
),

173 &
ngx_hâp_gzù_hash_p
 },

175 { 
ngx_°rög
("postpone_gzipping"),

176 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

177 
ngx_c⁄f_£t_size_¶Ÿ
,

178 
NGX_HTTP_LOC_CONF_OFFSET
,

179 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
po°p⁄e_gzùpög
),

180 
NULL
 },

182 { 
ngx_°rög
("gzip_no_buffer"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

184 
ngx_c⁄f_£t_Êag_¶Ÿ
,

185 
NGX_HTTP_LOC_CONF_OFFSET
,

186 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
no_buf„r
),

187 
NULL
 },

189 { 
ngx_°rög
("gzip_min_length"),

190 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

191 
ngx_c⁄f_£t_size_¶Ÿ
,

192 
NGX_HTTP_LOC_CONF_OFFSET
,

193 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
mö_Àngth
),

194 
NULL
 },

196 
ngx_nuŒ_comm™d


200 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ_˘x
 = {

201 
ngx_hâp_gzù_add_v¨übÀs
,

202 
ngx_hâp_gzù_fûãr_öô
,

204 
NULL
,

205 
NULL
,

207 
NULL
,

208 
NULL
,

210 
ngx_hâp_gzù_¸óã_c⁄f
,

211 
ngx_hâp_gzù_mîge_c⁄f


215 
ngx_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ
 = {

216 
NGX_MODULE_V1
,

217 &
ngx_hâp_gzù_fûãr_moduÀ_˘x
,

218 
ngx_hâp_gzù_fûãr_comm™ds
,

219 
NGX_HTTP_MODULE
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NGX_MODULE_V1_PADDING


231 
ngx_°r_t
 
	gngx_hâp_gzù_øtio
 = 
ngx_°rög
("gzip_ratio");

233 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

234 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

237 
ngx_öt_t


238 
	$ngx_hâp_gzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

240 
ngx_èbÀ_ñt_t
 *
h
;

241 
ngx_hâp_gzù_˘x_t
 *
˘x
;

242 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

244 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

246 i‡(!
c⁄f
->
íabÀ


247 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


248 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_FORBIDDEN


249 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_FOUND
)

250 || (
r
->
hódîs_out
.
c⁄ã¡_ícodög


251 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

252 || (
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1

253 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < 
c⁄f
->
mö_Àngth
)

254 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL


255 || 
r
->
hódî_⁄ly
)

257  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

260 
r
->
gzù_v¨y
 = 1;

262 #i‡(
NGX_HTTP_DEGRADATION
)

264 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

266 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

268 i‡(
˛cf
->
gzù_dißbÀ_degød©i⁄
 && 
	`ngx_hâp_degøded
(
r
)) {

269  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

274 i‡(!
r
->
gzù_ã°ed
) {

275 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë!
NGX_OK
) {

276  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

279 } i‡(!
r
->
gzù_ok
) {

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

283 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gzù_˘x_t
));

284 i‡(
˘x
 =
NULL
) {

285  
NGX_ERROR
;

288 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gzù_fûãr_moduÀ
);

290 
˘x
->
ªque°
 = 
r
;

291 
˘x
->
buf„rög
 = (
c⁄f
->
po°p⁄e_gzùpög
 != 0);

293 
	`ngx_hâp_gzù_fûãr_mem‹y
(
r
, 
˘x
);

295 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

296 i‡(
h
 =
NULL
) {

297  
NGX_ERROR
;

300 
h
->
hash
 = 1;

301 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

302 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

303 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

305 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

307 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

308 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

309 
	`ngx_hâp_˛ór_ëag
(
r
);

311  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_hâp_gzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

318 
rc
;

319 
ngx_chaö_t
 *
˛
;

320 
ngx_hâp_gzù_˘x_t
 *
˘x
;

322 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

324 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
 || 
r
->
hódî_⁄ly
) {

325  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

328 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

331 i‡(
˘x
->
buf„rög
) {

342 i‡(
ö
) {

343 
	`ngx_hâp_gzù_fûãr_buf„r
(
˘x
, 
ö
)) {

345 
NGX_OK
:

346  
NGX_OK
;

348 
NGX_DONE
:

349 
ö
 = 
NULL
;

353 
Áûed
;

357 
˘x
->
buf„rög
 = 0;

361 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

362 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

363 
Áûed
;

367 i‡(
ö
) {

368 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

369 
Áûed
;

372 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

375 i‡(
˘x
->
nomem
 || 
ö
 =
NULL
) {

379 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

380 
Áûed
;

383 
˛
 = 
NULL
;

385 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

386 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

387 
˘x
->
nomem
 = 0;

398 
rc
 = 
	`ngx_hâp_gzù_fûãr_add_d©a
(
r
, 
˘x
);

400 i‡(
rc
 =
NGX_DECLINED
) {

404 i‡(
rc
 =
NGX_AGAIN
) {

411 
rc
 = 
	`ngx_hâp_gzù_fûãr_gë_buf
(
r
, 
˘x
);

413 i‡(
rc
 =
NGX_DECLINED
) {

417 i‡(
rc
 =
NGX_ERROR
) {

418 
Áûed
;

422 
rc
 = 
	`ngx_hâp_gzù_fûãr_deÊ©e
(
r
, 
˘x
);

424 i‡(
rc
 =
NGX_OK
) {

428 i‡(
rc
 =
NGX_ERROR
) {

429 
Áûed
;

435 i‡(
˘x
->
out
 =
NULL
) {

436 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

438  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

441 i‡(!
˘x
->
gzhódî
) {

442 i‡(
	`ngx_hâp_gzù_fûãr_gzhódî
(
r
, 
˘x
Ë!
NGX_OK
) {

443 
Áûed
;

447 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

449 i‡(
rc
 =
NGX_ERROR
) {

450 
Áûed
;

453 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

455 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

456 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

457 
˘x
->
œ°_out
 = &˘x->
out
;

459 
˘x
->
nomem
 = 0;

461 i‡(
˘x
->
d⁄e
) {

462  
rc
;

468 
Áûed
:

470 
˘x
->
d⁄e
 = 1;

472 i‡(
˘x
->
¥óŒoˇãd
) {

473 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

475 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

478 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

480  
NGX_ERROR
;

481 
	}
}

485 
	$ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

487 
wbôs
, 
memÀvñ
;

488 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

490 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

492 
wbôs
 = 
c⁄f
->wbits;

493 
memÀvñ
 = 
c⁄f
->memlevel;

495 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 > 0) {

499 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < ((1 << (
wbôs
 - 1)) - 262)) {

500 
wbôs
--;

501 
memÀvñ
--;

504 i‡(
memÀvñ
 < 1) {

505 
memÀvñ
 = 1;

509 
˘x
->
wbôs
 = wbits;

510 
˘x
->
memÀvñ
 = memlevel;

524 
˘x
->
Æloˇãd
 = 8192 + (1 << (
wbôs
 + 2)Ë+ (1 << (
memÀvñ
 + 9));

525 
	}
}

528 
ngx_öt_t


529 
	$ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

531 
size_t
 
size
, 
buf„ªd
;

532 
ngx_buf_t
 *
b
, *
buf
;

533 
ngx_chaö_t
 *
˛
, **
Œ
;

534 
ngx_hâp_ªque°_t
 *
r
;

535 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

537 
r
 = 
˘x
->
ªque°
;

539 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

541 
buf„ªd
 = 0;

542 
Œ
 = &
˘x
->
ö
;

544 
˛
 = 
˘x
->
ö
; cl; c»˛->
√xt
) {

545 
buf„ªd
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

546 
Œ
 = &
˛
->
√xt
;

549 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

551 
ö
) {

552 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

553 i‡(
˛
 =
NULL
) {

554  
NGX_ERROR
;

557 
b
 = 
ö
->
buf
;

559 
size
 = 
b
->
œ°
 - b->
pos
;

560 
buf„ªd
 +
size
;

562 i‡(
b
->
Êush
 || b->
œ°_buf
 || 
buf„ªd
 > 
c⁄f
->
po°p⁄e_gzùpög
) {

563 
˘x
->
buf„rög
 = 0;

566 i‡(
˘x
->
buf„rög
 && 
size
) {

568 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

569 i‡(
buf
 =
NULL
) {

570  
NGX_ERROR
;

573 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->
pos
, 
b
->pos, 
size
);

574 
b
->
pos
 = b->
œ°
;

576 
buf
->
œ°_buf
 = 
b
->last_buf;

577 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

579 
˛
->
buf
 = buf;

582 
˛
->
buf
 = 
b
;

585 *
Œ
 = 
˛
;

586 
Œ
 = &
˛
->
√xt
;

587 
ö
 = in->
√xt
;

590 *
Œ
 = 
NULL
;

592  
˘x
->
buf„rög
 ? 
NGX_OK
 : 
NGX_DONE
;

593 
	}
}

596 
ngx_öt_t


597 
	$ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

598 
ngx_hâp_gzù_˘x_t
 *
˘x
)

600 
rc
;

601 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

603 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

605 
˘x
->
¥óŒoˇãd
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Æloˇãd
);

606 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

607  
NGX_ERROR
;

610 
˘x
->
‰ì_mem
 = ctx->
¥óŒoˇãd
;

612 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gzù_fûãr_Æloc
;

613 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gzù_fûãr_‰ì
;

614 
˘x
->
z°ªam
.
›aque
 = ctx;

616 
rc
 = 
	`deÊ©eInô2
(&
˘x
->
z°ªam
, (Ë
c⁄f
->
Àvñ
, 
Z_DEFLATED
,

617 - 
˘x
->
wbôs
, ctx->
memÀvñ
, 
Z_DEFAULT_STRATEGY
);

619 i‡(
rc
 !
Z_OK
) {

620 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

621 "deÊ©eInô2(ËÁûed: %d", 
rc
);

622  
NGX_ERROR
;

625 
˘x
->
œ°_out
 = &˘x->
out
;

626 
˘x
->
¸c32
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

627 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

629  
NGX_OK
;

630 
	}
}

633 
ngx_öt_t


634 
	$ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

636 
ngx_buf_t
 *
b
;

637 
ngx_chaö_t
 *
˛
;

638 
u_ch¨
 
gzhódî
[10] =

639 { 0x1f, 0x8b, 
Z_DEFLATED
, 0, 0, 0, 0, 0, 0, 3 };

641 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

642 i‡(
b
 =
NULL
) {

643  
NGX_ERROR
;

646 
b
->
mem‹y
 = 1;

647 
b
->
pos
 = 
gzhódî
;

648 
b
->
œ°
 = b->
pos
 + 10;

650 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

651 i‡(
˛
 =
NULL
) {

652  
NGX_ERROR
;

655 
˛
->
buf
 = 
b
;

656 
˛
->
√xt
 = 
˘x
->
out
;

657 
˘x
->
out
 = 
˛
;

659 
˘x
->
gzhódî
 = 1;

661  
NGX_OK
;

662 
	}
}

665 
ngx_öt_t


666 
	$ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

668 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

669  
NGX_OK
;

672 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

673 "gzù in: %p", 
˘x
->
ö
);

675 i‡(
˘x
->
ö
 =
NULL
) {

676  
NGX_DECLINED
;

679 i‡(
˘x
->
c›y_buf
) {

686 
˘x
->
c›y_buf
->
√xt
 = ctx->
c›õd
;

687 
˘x
->
c›õd
 = ctx->
c›y_buf
;

688 
˘x
->
c›y_buf
 = 
NULL
;

691 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

693 i‡(
˘x
->
ö_buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
) {

694 
˘x
->
c›y_buf
 = ctx->
ö
;

697 
˘x
->
ö
 = ctx->ö->
√xt
;

699 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

700 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

702 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

704 
˘x
->
ö_buf
,

705 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

707 i‡(
˘x
->
ö_buf
->
œ°_buf
) {

708 
˘x
->
Êush
 = 
Z_FINISH
;

710 } i‡(
˘x
->
ö_buf
->
Êush
) {

711 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

714 i‡(
˘x
->
z°ªam
.
avaû_ö
) {

716 
˘x
->
¸c32
 = 
	`¸c32
(˘x->¸c32, ctx->
z°ªam
.
√xt_ö
,

717 
˘x
->
z°ªam
.
avaû_ö
);

719 } i‡(
˘x
->
Êush
 =
Z_NO_FLUSH
) {

720  
NGX_AGAIN
;

723  
NGX_OK
;

724 
	}
}

727 
ngx_öt_t


728 
	$ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

730 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

732 i‡(
˘x
->
z°ªam
.
avaû_out
) {

733  
NGX_OK
;

736 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

738 i‡(
˘x
->
‰ì
) {

739 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

740 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

742 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

744 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

745 i‡(
˘x
->
out_buf
 =
NULL
) {

746  
NGX_ERROR
;

749 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

750 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

751 
˘x
->
bufs
++;

754 
˘x
->
nomem
 = 1;

755  
NGX_DECLINED
;

758 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

759 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

761  
NGX_OK
;

762 
	}
}

765 
ngx_öt_t


766 
	$ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

768 
rc
;

769 
ngx_buf_t
 *
b
;

770 
ngx_chaö_t
 *
˛
;

771 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

773 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

775 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

776 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

777 
˘x
->
Êush
, ctx->
ªdo
);

779 
rc
 = 
	`deÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

781 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

782 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

783 "deÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

784  
NGX_ERROR
;

787 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

789 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

790 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

791 
rc
);

793 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

795 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

797 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

798 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

800 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

801 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

805 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

807 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

811 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

812 i‡(
˛
 =
NULL
) {

813  
NGX_ERROR
;

816 
˛
->
buf
 = 
˘x
->
out_buf
;

817 
˛
->
√xt
 = 
NULL
;

818 *
˘x
->
œ°_out
 = 
˛
;

819 
˘x
->
œ°_out
 = &
˛
->
√xt
;

821 
˘x
->
ªdo
 = 1;

823  
NGX_AGAIN
;

826 
˘x
->
ªdo
 = 0;

828 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

830 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

832 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

833 i‡(
˛
 =
NULL
) {

834  
NGX_ERROR
;

837 
b
 = 
˘x
->
out_buf
;

839 i‡(
	`ngx_buf_size
(
b
) == 0) {

841 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

842 i‡(
b
 =
NULL
) {

843  
NGX_ERROR
;

847 
˘x
->
z°ªam
.
avaû_out
 = 0;

850 
b
->
Êush
 = 1;

852 
˛
->
buf
 = 
b
;

853 
˛
->
√xt
 = 
NULL
;

854 *
˘x
->
œ°_out
 = 
˛
;

855 
˘x
->
œ°_out
 = &
˛
->
√xt
;

857 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

859  
NGX_OK
;

862 i‡(
rc
 =
Z_STREAM_END
) {

864 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

865  
NGX_ERROR
;

868  
NGX_OK
;

871 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

873 i‡(
c⁄f
->
no_buf„r
 && 
˘x
->
ö
 =
NULL
) {

875 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

876 i‡(
˛
 =
NULL
) {

877  
NGX_ERROR
;

880 
˛
->
buf
 = 
˘x
->
out_buf
;

881 
˛
->
√xt
 = 
NULL
;

882 *
˘x
->
œ°_out
 = 
˛
;

883 
˘x
->
œ°_out
 = &
˛
->
√xt
;

885  
NGX_OK
;

888  
NGX_AGAIN
;

889 
	}
}

892 
ngx_öt_t


893 
	$ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

894 
ngx_hâp_gzù_˘x_t
 *
˘x
)

896 
rc
;

897 
ngx_buf_t
 *
b
;

898 
ngx_chaö_t
 *
˛
;

899 
gzåaûî
 *
åaûî
;

901 
˘x
->
zö
 = ctx->
z°ªam
.
tŸÆ_ö
;

902 
˘x
->
zout
 = 10 + ctx->
z°ªam
.
tŸÆ_out
 + 8;

904 
rc
 = 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

906 i‡(
rc
 !
Z_OK
) {

907 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

908 "deÊ©eEnd(ËÁûed: %d", 
rc
);

909  
NGX_ERROR
;

912 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

914 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

915 i‡(
˛
 =
NULL
) {

916  
NGX_ERROR
;

919 
˛
->
buf
 = 
˘x
->
out_buf
;

920 
˛
->
√xt
 = 
NULL
;

921 *
˘x
->
œ°_out
 = 
˛
;

922 
˘x
->
œ°_out
 = &
˛
->
√xt
;

924 i‡(
˘x
->
z°ªam
.
avaû_out
 >= 8) {

925 
åaûî
 = (
gzåaûî
 *Ë
˘x
->
out_buf
->
œ°
;

926 
˘x
->
out_buf
->
œ°
 += 8;

927 
˘x
->
out_buf
->
œ°_buf
 = 1;

930 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 8);

931 i‡(
b
 =
NULL
) {

932  
NGX_ERROR
;

935 
b
->
œ°_buf
 = 1;

937 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

938 i‡(
˛
 =
NULL
) {

939  
NGX_ERROR
;

942 
˛
->
buf
 = 
b
;

943 
˛
->
√xt
 = 
NULL
;

944 *
˘x
->
œ°_out
 = 
˛
;

945 
˘x
->
œ°_out
 = &
˛
->
√xt
;

946 
åaûî
 = (
gzåaûî
 *Ë
b
->
pos
;

947 
b
->
œ°
 += 8;

950 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

952 
åaûî
->
¸c32
 = 
˘x
->crc32;

953 
åaûî
->
zÀn
 = 
˘x
->
zö
;

957 
åaûî
->
¸c32
[0] = (
u_ch¨
Ë(
˘x
->crc32 & 0xff);

958 
åaûî
->
¸c32
[1] = (
u_ch¨
Ë((
˘x
->crc32 >> 8) & 0xff);

959 
åaûî
->
¸c32
[2] = (
u_ch¨
Ë((
˘x
->crc32 >> 16) & 0xff);

960 
åaûî
->
¸c32
[3] = (
u_ch¨
Ë((
˘x
->crc32 >> 24) & 0xff);

962 
åaûî
->
zÀn
[0] = (
u_ch¨
Ë(
˘x
->
zö
 & 0xff);

963 
åaûî
->
zÀn
[1] = (
u_ch¨
Ë((
˘x
->
zö
 >> 8) & 0xff);

964 
åaûî
->
zÀn
[2] = (
u_ch¨
Ë((
˘x
->
zö
 >> 16) & 0xff);

965 
åaûî
->
zÀn
[3] = (
u_ch¨
Ë((
˘x
->
zö
 >> 24) & 0xff);

969 
˘x
->
z°ªam
.
avaû_ö
 = 0;

970 
˘x
->
z°ªam
.
avaû_out
 = 0;

972 
˘x
->
d⁄e
 = 1;

974 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

976  
NGX_OK
;

977 
	}
}

981 
	$ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

983 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

985 *
p
;

986 
ngx_uöt_t
 
Æloc
;

988 
Æloc
 = 
ôems
 * 
size
;

990 i‡(
Æloc
 % 512 != 0 &&álloc < 8192) {

997 
Æloc
 = 8192;

1000 i‡(
Æloc
 <
˘x
->
Æloˇãd
) {

1001 
p
 = 
˘x
->
‰ì_mem
;

1002 
˘x
->
‰ì_mem
 +
Æloc
;

1003 
˘x
->
Æloˇãd
 -
Æloc
;

1005 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1007 
ôems
, 
size
, 
Æloc
, 
p
);

1009  
p
;

1012 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1014 
ôems
 * 
size
, 
˘x
->
Æloˇãd
);

1016 
p
 = 
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

1018  
p
;

1019 
	}
}

1023 
	$ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
)

1026 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

1028 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1029 "gzù fªe: %p", 
addªss
);

1031 
	}
}

1035 
	$ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

1036 
ngx_hâp_gzù_˘x_t
 *
˘x
)

1038 
ngx_chaö_t
 *
˛
;

1040 
˛
 = 
˘x
->
c›õd
; cl; c»˛->
√xt
) {

1041 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˛
->
buf
->
°¨t
);

1044 
˘x
->
c›õd
 = 
NULL
;

1045 
	}
}

1048 
ngx_öt_t


1049 
	$ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1051 
ngx_hâp_v¨übÀ_t
 *
v¨
;

1053 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_gzù_øtio
, 
NGX_HTTP_VAR_NOHASH
);

1054 i‡(
v¨
 =
NULL
) {

1055  
NGX_ERROR
;

1058 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_gzù_øtio_v¨übÀ
;

1060  
NGX_OK
;

1061 
	}
}

1064 
ngx_öt_t


1065 
	$ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1066 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1068 
ngx_uöt_t
 
zöt
, 
z‰ac
;

1069 
ngx_hâp_gzù_˘x_t
 *
˘x
;

1071 
v
->
vÆid
 = 1;

1072 
v
->
no_ˇchóbÀ
 = 0;

1073 
v
->
nŸ_found
 = 0;

1075 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

1077 i‡(
˘x
 =
NULL
 || ctx->
zout
 == 0) {

1078 
v
->
nŸ_found
 = 1;

1079  
NGX_OK
;

1082 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
 + 3);

1083 i‡(
v
->
d©a
 =
NULL
) {

1084  
NGX_ERROR
;

1087 
zöt
 = (
ngx_uöt_t
Ë(
˘x
->
zö
 / ctx->
zout
);

1088 
z‰ac
 = (
ngx_uöt_t
Ë((
˘x
->
zö
 * 100 / ctx->
zout
) % 100);

1090 i‡((
˘x
->
zö
 * 1000 / ctx->
zout
) % 10 > 4) {

1094 
z‰ac
++;

1096 i‡(
z‰ac
 > 99) {

1097 
zöt
++;

1098 
z‰ac
 = 0;

1102 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui.%02ui", 
zöt
, 
z‰ac
) - v->data;

1104  
NGX_OK
;

1105 
	}
}

1109 
	$ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1111 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

1113 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_c⁄f_t
));

1114 i‡(
c⁄f
 =
NULL
) {

1115  
NULL
;

1126 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1127 
c⁄f
->
no_buf„r
 = 
NGX_CONF_UNSET
;

1129 
c⁄f
->
po°p⁄e_gzùpög
 = 
NGX_CONF_UNSET_SIZE
;

1130 
c⁄f
->
Àvñ
 = 
NGX_CONF_UNSET
;

1131 
c⁄f
->
wbôs
 = 
NGX_CONF_UNSET_SIZE
;

1132 
c⁄f
->
memÀvñ
 = 
NGX_CONF_UNSET_SIZE
;

1133 
c⁄f
->
mö_Àngth
 = 
NGX_CONF_UNSET
;

1135  
c⁄f
;

1136 
	}
}

1140 
	$ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1142 
ngx_hâp_gzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1143 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

1145 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1146 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_buf„r
, 
¥ev
->no_buffer, 0);

1148 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

1149 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

1151 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_gzùpög
, 
¥ev
->postpone_gzipping,

1153 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
Àvñ
, 
¥ev
->level, 1);

1154 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
wbôs
, 
¥ev
->wbôs, 
MAX_WBITS
);

1155 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
memÀvñ
, 
¥ev
->memlevel,

1156 
MAX_MEM_LEVEL
 - 1);

1157 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mö_Àngth
, 
¥ev
->min_length, 20);

1159 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1160 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1161 
ngx_hâp_html_deÁu…_ty≥s
)

1162 !
NGX_OK
)

1164  
NGX_CONF_ERROR
;

1167  
NGX_CONF_OK
;

1168 
	}
}

1171 
ngx_öt_t


1172 
	$ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1174 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1175 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gzù_hódî_fûãr
;

1177 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1178 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gzù_body_fûãr
;

1180  
NGX_OK
;

1181 
	}
}

1185 
	$ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1187 
size_t
 *
≈
 = 
d©a
;

1189 
size_t
 
wbôs
, 
wsize
;

1191 
wbôs
 = 15;

1193 
wsize
 = 32 * 1024; wsize > 256; wsize >>= 1) {

1195 i‡(
wsize
 =*
≈
) {

1196 *
≈
 = 
wbôs
;

1198  
NGX_CONF_OK
;

1201 
wbôs
--;

1205 
	}
}

1209 
	$ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1211 
size_t
 *
≈
 = 
d©a
;

1213 
size_t
 
memÀvñ
, 
hsize
;

1215 
memÀvñ
 = 9;

1217 
hsize
 = 128 * 1024; hsize > 256; hsize >>= 1) {

1219 i‡(
hsize
 =*
≈
) {

1220 *
≈
 = 
memÀvñ
;

1222  
NGX_CONF_OK
;

1225 
memÀvñ
--;

1229 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_gzip_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_GZIP_STATIC_OFF
 0

	)

14 
	#NGX_HTTP_GZIP_STATIC_ON
 1

	)

15 
	#NGX_HTTP_GZIP_STATIC_ALWAYS
 2

	)

19 
ngx_uöt_t
 
	míabÀ
;

20 } 
	tngx_hâp_gzù_°©ic_c⁄f_t
;

23 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

24 *
ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

26 *
chûd
);

27 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

30 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_°©ic
[] = {

31 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_STATIC_OFF
 },

32 { 
ngx_°rög
("⁄"), 
NGX_HTTP_GZIP_STATIC_ON
 },

33 { 
ngx_°rög
("Æways"), 
NGX_HTTP_GZIP_STATIC_ALWAYS
 },

34 { 
ngx_nuŒ_°rög
, 0 }

38 
ngx_comm™d_t
 
	gngx_hâp_gzù_°©ic_comm™ds
[] = {

40 { 
ngx_°rög
("gzip_static"),

41 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

42 
ngx_c⁄f_£t_íum_¶Ÿ
,

43 
NGX_HTTP_LOC_CONF_OFFSET
,

44 
off£tof
(
ngx_hâp_gzù_°©ic_c⁄f_t
, 
íabÀ
),

45 &
ngx_hâp_gzù_°©ic
 },

47 
ngx_nuŒ_comm™d


51 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ_˘x
 = {

52 
NULL
,

53 
ngx_hâp_gzù_°©ic_öô
,

55 
NULL
,

56 
NULL
,

58 
NULL
,

59 
NULL
,

61 
ngx_hâp_gzù_°©ic_¸óã_c⁄f
,

62 
ngx_hâp_gzù_°©ic_mîge_c⁄f


66 
ngx_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ
 = {

67 
NGX_MODULE_V1
,

68 &
ngx_hâp_gzù_°©ic_moduÀ_˘x
,

69 
ngx_hâp_gzù_°©ic_comm™ds
,

70 
NGX_HTTP_MODULE
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NGX_MODULE_V1_PADDING


82 
ngx_öt_t


83 
	$ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

85 
u_ch¨
 *
p
;

86 
size_t
 
roŸ
;

87 
ngx_°r_t
 
∑th
;

88 
ngx_öt_t
 
rc
;

89 
ngx_uöt_t
 
Àvñ
;

90 
ngx_log_t
 *
log
;

91 
ngx_buf_t
 *
b
;

92 
ngx_chaö_t
 
out
;

93 
ngx_èbÀ_ñt_t
 *
h
;

94 
ngx_›í_fûe_öfo_t
 
of
;

95 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

96 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
gzcf
;

98 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

99  
NGX_DECLINED
;

102 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

103  
NGX_DECLINED
;

106 
gzcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_°©ic_moduÀ
);

108 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_OFF
) {

109  
NGX_DECLINED
;

112 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

113 
rc
 = 
	`ngx_hâp_gzù_ok
(
r
);

117 
rc
 = 
NGX_OK
;

120 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

122 i‡(!
˛cf
->
gzù_v¨y
 && 
rc
 !
NGX_OK
) {

123  
NGX_DECLINED
;

126 
log
 = 
r
->
c⁄√˘i⁄
->log;

128 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, (".gz") - 1);

129 i‡(
p
 =
NULL
) {

130  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

133 *
p
++ = '.';

134 *
p
++ = 'g';

135 *
p
++ = 'z';

136 *
p
 = '\0';

138 
∑th
.
Àn
 = 
p
 -Ö©h.
d©a
;

140 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

141 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

143 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

145 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

146 
of
.
dúe˘io
 = 
˛cf
->directio;

147 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

148 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

149 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

150 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

152 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

153  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

156 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

157 !
NGX_OK
)

159 
of
.
îr
) {

162  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

164 
NGX_ENOENT
:

165 
NGX_ENOTDIR
:

166 
NGX_ENAMETOOLONG
:

168  
NGX_DECLINED
;

170 
NGX_EACCES
:

171 #i‡(
NGX_HAVE_OPENAT
)

172 
NGX_EMLINK
:

173 
NGX_ELOOP
:

176 
Àvñ
 = 
NGX_LOG_ERR
;

181 
Àvñ
 = 
NGX_LOG_CRIT
;

185 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

186 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

188  
NGX_DECLINED
;

191 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

192 
r
->
gzù_v¨y
 = 1;

194 i‡(
rc
 !
NGX_OK
) {

195  
NGX_DECLINED
;

199 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

201 i‡(
of
.
is_dú
) {

202 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

203  
NGX_DECLINED
;

206 #i‡!(
NGX_WIN32
)

208 i‡(!
of
.
is_fûe
) {

209 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

210 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

212  
NGX_HTTP_NOT_FOUND
;

217 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

219 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

221 i‡(
rc
 !
NGX_OK
) {

222  
rc
;

225 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

227 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

229 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

231 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

232  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

235 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

236  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

239 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

240 i‡(
h
 =
NULL
) {

241  
NGX_ERROR
;

244 
h
->
hash
 = 1;

245 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

246 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

247 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

249 
r
->
ign‹e_c⁄ã¡_ícodög
 = 1;

253 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

254 i‡(
b
 =
NULL
) {

255  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

258 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

259 i‡(
b
->
fûe
 =
NULL
) {

260  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

263 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

265 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

266  
rc
;

269 
b
->
fûe_pos
 = 0;

270 
b
->
fûe_œ°
 = 
of
.
size
;

272 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

273 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

274 
b
->
œ°_ö_chaö
 = 1;

276 
b
->
fûe
->
fd
 = 
of
.fd;

277 
b
->
fûe
->
«me
 = 
∑th
;

278 
b
->
fûe
->
log
 =Üog;

279 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

281 
out
.
buf
 = 
b
;

282 
out
.
√xt
 = 
NULL
;

284  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

285 
	}
}

289 
	$ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

291 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
;

293 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_°©ic_c⁄f_t
));

294 i‡(
c⁄f
 =
NULL
) {

295  
NULL
;

298 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

300  
c⁄f
;

301 
	}
}

305 
	$ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

307 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

308 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
 = 
chûd
;

310 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

311 
NGX_HTTP_GZIP_STATIC_OFF
);

313  
NGX_CONF_OK
;

314 
	}
}

317 
ngx_öt_t


318 
	$ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

320 
ngx_hâp_h™dÀr_±
 *
h
;

321 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

323 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

325 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

326 i‡(
h
 =
NULL
) {

327  
NGX_ERROR
;

330 *
h
 = 
ngx_hâp_gzù_°©ic_h™dÀr
;

332  
NGX_OK
;

333 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_headers_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_hódî_vÆ_s
 
	tngx_hâp_hódî_vÆ_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_£t_hódî_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_hâp_hódî_vÆ_t
 *
	thv
, 
	tngx_°r_t
 *
	tvÆue
);

20 
ngx_°r_t
 
«me
;

21 
ngx_uöt_t
 
off£t
;

22 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

23 } 
	tngx_hâp_£t_hódî_t
;

26 
	sngx_hâp_hódî_vÆ_s
 {

27 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

28 
ngx_°r_t
 
key
;

29 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

30 
ngx_uöt_t
 
off£t
;

35 
NGX_HTTP_EXPIRES_OFF
,

36 
NGX_HTTP_EXPIRES_EPOCH
,

37 
NGX_HTTP_EXPIRES_MAX
,

38 
NGX_HTTP_EXPIRES_ACCESS
,

39 
NGX_HTTP_EXPIRES_MODIFIED
,

40 
NGX_HTTP_EXPIRES_DAILY
,

41 
NGX_HTTP_EXPIRES_UNSET


42 } 
	tngx_hâp_expúes_t
;

46 
ngx_hâp_expúes_t
 
expúes
;

47 
time_t
 
expúes_time
;

48 
ngx_¨øy_t
 *
hódîs
;

49 } 
	tngx_hâp_hódîs_c⁄f_t
;

52 
ngx_öt_t
 
	`ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
);

54 
ngx_öt_t
 
	`ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

56 
ngx_öt_t
 
	`ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

58 
ngx_öt_t
 
	`ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

60 
ngx_öt_t
 
	`ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

63 *
	`ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

64 *
	`ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

65 *
∑ª¡
, *
chûd
);

66 
ngx_öt_t
 
	`ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

67 *
	`ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

69 *
	`ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

73 
ngx_hâp_£t_hódî_t
 
ngx_hâp_£t_hódîs
[] = {

75 { 
	`ngx_°rög
("Cache-C⁄åﬁ"), 0, 
ngx_hâp_add_ˇche_c⁄åﬁ
 },

77 { 
	`ngx_°rög
("Last-Modified"),

78 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
),

79 
ngx_hâp_£t_œ°_modifõd
 },

81 { 
	`ngx_°rög
("ETag"),

82 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
),

83 
ngx_hâp_£t_ª•⁄£_hódî
 },

85 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

86 
	}
};

89 
ngx_comm™d_t
 
	gngx_hâp_hódîs_fûãr_comm™ds
[] = {

91 { 
ngx_°rög
("expires"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


93 |
NGX_CONF_TAKE12
,

94 
ngx_hâp_hódîs_expúes
,

95 
NGX_HTTP_LOC_CONF_OFFSET
,

97 
NULL
},

99 { 
ngx_°rög
("add_header"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


101 |
NGX_CONF_TAKE2
,

102 
ngx_hâp_hódîs_add
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
NULL
},

107 
ngx_nuŒ_comm™d


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_hódîs_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
ngx_hâp_hódîs_¸óã_c⁄f
,

122 
ngx_hâp_hódîs_mîge_c⁄f


126 
ngx_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_hódîs_fûãr_moduÀ_˘x
,

129 
ngx_hâp_hódîs_fûãr_comm™ds
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

145 
ngx_öt_t


146 
	$ngx_hâp_hódîs_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

148 
ngx_°r_t
 
vÆue
;

149 
ngx_uöt_t
 
i
;

150 
ngx_hâp_hódî_vÆ_t
 *
h
;

151 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

153 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_hódîs_fûãr_moduÀ
);

155 i‡((
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_OFF
 && c⁄f->
hódîs
 =
NULL
)

156 || 
r
 !r->
maö


157 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


158 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_CREATED


159 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NO_CONTENT


160 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


161 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_PERMANENTLY


162 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_TEMPORARILY


163 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_SEE_OTHER


164 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED


165 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_TEMPORARY_REDIRECT
))

167  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

170 i‡(
c⁄f
->
expúes
 !
NGX_HTTP_EXPIRES_OFF
) {

171 i‡(
	`ngx_hâp_£t_expúes
(
r
, 
c⁄f
Ë!
NGX_OK
) {

172  
NGX_ERROR
;

176 i‡(
c⁄f
->
hódîs
) {

177 
h
 = 
c⁄f
->
hódîs
->
ñts
;

178 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

180 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
h
[
i
].
vÆue
, &vÆueË!
NGX_OK
) {

181  
NGX_ERROR
;

184 i‡(
h
[
i
].
	`h™dÀr
(
r
, &h[i], &
vÆue
Ë!
NGX_OK
) {

185  
NGX_ERROR
;

190  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

191 
	}
}

194 
ngx_öt_t


195 
	$ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
)

197 
size_t
 
Àn
;

198 
time_t
 
now
, 
expúes_time
, 
max_age
;

199 
ngx_uöt_t
 
i
;

200 
ngx_èbÀ_ñt_t
 *
expúes
, *
cc
, **
c˝
;

202 
expúes
 = 
r
->
hódîs_out
.expires;

204 i‡(
expúes
 =
NULL
) {

206 
expúes
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

207 i‡(
expúes
 =
NULL
) {

208  
NGX_ERROR
;

211 
r
->
hódîs_out
.
expúes
 =Éxpires;

213 
expúes
->
hash
 = 1;

214 
	`ngx_°r_£t
(&
expúes
->
key
, "Expires");

217 
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT");

218 
expúes
->
vÆue
.
Àn
 =Üen - 1;

220 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

222 i‡(
c˝
 =
NULL
) {

224 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

225 1, (
ngx_èbÀ_ñt_t
 *))

226 !
NGX_OK
)

228  
NGX_ERROR
;

231 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

232 i‡(
c˝
 =
NULL
) {

233  
NGX_ERROR
;

236 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

237 i‡(
cc
 =
NULL
) {

238  
NGX_ERROR
;

241 
cc
->
hash
 = 1;

242 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

243 *
c˝
 = 
cc
;

246 
i
 = 1; i < 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
√…s
; i++) {

247 
c˝
[
i
]->
hash
 = 0;

250 
cc
 = 
c˝
[0];

253 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_EPOCH
) {

254 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 01 Jan 1970 00:00:01 GMT";

255 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

256  
NGX_OK
;

259 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_MAX
) {

260 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 31 Dec 2037 23:55:55 GMT";

262 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=315360000");

263  
NGX_OK
;

266 
expúes
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

267 i‡(
expúes
->
vÆue
.
d©a
 =
NULL
) {

268  
NGX_ERROR
;

271 i‡(
c⁄f
->
expúes_time
 =0 && c⁄f->
expúes
 !
NGX_HTTP_EXPIRES_DAILY
) {

272 
	`ngx_mem˝y
(
expúes
->
vÆue
.
d©a
, 
ngx_ˇched_hâp_time
.data,

273 
ngx_ˇched_hâp_time
.
Àn
 + 1);

274 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=0");

275  
NGX_OK
;

278 
now
 = 
	`ngx_time
();

280 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY
) {

281 
expúes_time
 = 
	`ngx_√xt_time
(
c⁄f
->expires_time);

282 
max_age
 = 
expúes_time
 - 
now
;

284 } i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_ACCESS


285 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

287 
expúes_time
 = 
now
 + 
c⁄f
->expires_time;

288 
max_age
 = 
c⁄f
->
expúes_time
;

291 
expúes_time
 = 
r
->
hódîs_out
.
œ°_modifõd_time
 + 
c⁄f
->expires_time;

292 
max_age
 = 
expúes_time
 - 
now
;

295 
	`ngx_hâp_time
(
expúes
->
vÆue
.
d©a
, 
expúes_time
);

297 i‡(
c⁄f
->
expúes_time
 < 0 || 
max_age
 < 0) {

298 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

299  
NGX_OK
;

302 
cc
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

303 ("max-age="Ë+ 
NGX_TIME_T_LEN
 + 1);

304 i‡(
cc
->
vÆue
.
d©a
 =
NULL
) {

305  
NGX_ERROR
;

308 
cc
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(cc->vÆue.
d©a
, "max-age=%T", 
max_age
)

309 - 
cc
->
vÆue
.
d©a
;

311  
NGX_OK
;

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

317 
ngx_°r_t
 *
vÆue
)

319 
ngx_èbÀ_ñt_t
 *
h
;

321 i‡(
vÆue
->
Àn
) {

322 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

323 i‡(
h
 =
NULL
) {

324  
NGX_ERROR
;

327 
h
->
hash
 = 1;

328 
h
->
key
 = 
hv
->key;

329 
h
->
vÆue
 = *value;

332  
NGX_OK
;

333 
	}
}

336 
ngx_öt_t


337 
	$ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

338 
ngx_°r_t
 *
vÆue
)

340 
ngx_èbÀ_ñt_t
 *
cc
, **
c˝
;

342 i‡(
vÆue
->
Àn
 == 0) {

343  
NGX_OK
;

346 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

348 i‡(
c˝
 =
NULL
) {

350 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

351 1, (
ngx_èbÀ_ñt_t
 *))

352 !
NGX_OK
)

354  
NGX_ERROR
;

358 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

359 i‡(
c˝
 =
NULL
) {

360  
NGX_ERROR
;

363 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

364 i‡(
cc
 =
NULL
) {

365  
NGX_ERROR
;

368 
cc
->
hash
 = 1;

369 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

370 
cc
->
vÆue
 = *value;

372 *
c˝
 = 
cc
;

374  
NGX_OK
;

375 
	}
}

378 
ngx_öt_t


379 
	$ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

380 
ngx_°r_t
 *
vÆue
)

382 i‡(
	`ngx_hâp_£t_ª•⁄£_hódî
(
r
, 
hv
, 
vÆue
Ë!
NGX_OK
) {

383  
NGX_ERROR
;

386 
r
->
hódîs_out
.
œ°_modifõd_time
 =

387 (
vÆue
->
Àn
Ë? 
	`ngx_hâp_∑r£_time
(vÆue->
d©a
, value->len) : -1;

389  
NGX_OK
;

390 
	}
}

393 
ngx_öt_t


394 
	$ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

395 
ngx_°r_t
 *
vÆue
)

397 
ngx_èbÀ_ñt_t
 *
h
, **
ﬁd
;

399 
ﬁd
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
hv
->
off£t
);

401 i‡(
vÆue
->
Àn
 == 0) {

402 i‡(*
ﬁd
) {

403 (*
ﬁd
)->
hash
 = 0;

404 *
ﬁd
 = 
NULL
;

407  
NGX_OK
;

410 i‡(*
ﬁd
) {

411 
h
 = *
ﬁd
;

414 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

415 i‡(
h
 =
NULL
) {

416  
NGX_ERROR
;

419 *
ﬁd
 = 
h
;

422 
h
->
hash
 = 1;

423 
h
->
key
 = 
hv
->key;

424 
h
->
vÆue
 = *value;

426  
NGX_OK
;

427 
	}
}

431 
	$ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

433 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

435 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_hódîs_c⁄f_t
));

436 i‡(
c⁄f
 =
NULL
) {

437  
NULL
;

447 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_UNSET
;

449  
c⁄f
;

450 
	}
}

454 
	$ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

456 
ngx_hâp_hódîs_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

457 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
 = 
chûd
;

459 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

460 
c⁄f
->
expúes
 = 
¥ev
->expires;

461 
c⁄f
->
expúes_time
 = 
¥ev
->expires_time;

463 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

464 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

468 i‡(
c⁄f
->
hódîs
 =
NULL
) {

469 
c⁄f
->
hódîs
 = 
¥ev
->headers;

472  
NGX_CONF_OK
;

473 
	}
}

476 
ngx_öt_t


477 
	$ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

479 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

480 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódîs_fûãr
;

482  
NGX_OK
;

483 
	}
}

487 
	$ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

489 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

491 
ngx_uöt_t
 
möus
, 
n
;

492 
ngx_°r_t
 *
vÆue
;

494 i‡(
hcf
->
expúes
 !
NGX_HTTP_EXPIRES_UNSET
) {

498 
vÆue
 = 
cf
->
¨gs
->
ñts
;

500 i‡(
cf
->
¨gs
->
√…s
 == 2) {

502 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "epoch") == 0) {

503 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_EPOCH
;

504  
NGX_CONF_OK
;

507 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

508 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MAX
;

509  
NGX_CONF_OK
;

512 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

513 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

514  
NGX_CONF_OK
;

517 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_ACCESS
;

519 
n
 = 1;

523 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "modified") != 0) {

527 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MODIFIED
;

529 
n
 = 2;

532 i‡(
vÆue
[
n
].
d©a
[0] == '@') {

533 
vÆue
[
n
].
d©a
++;

534 
vÆue
[
n
].
Àn
--;

535 
möus
 = 0;

537 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_MODIFIED
) {

541 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_DAILY
;

543 } i‡(
vÆue
[
n
].
d©a
[0] == '+') {

544 
vÆue
[
n
].
d©a
++;

545 
vÆue
[
n
].
Àn
--;

546 
möus
 = 0;

548 } i‡(
vÆue
[
n
].
d©a
[0] == '-') {

549 
vÆue
[
n
].
d©a
++;

550 
vÆue
[
n
].
Àn
--;

551 
möus
 = 1;

554 
möus
 = 0;

557 
hcf
->
expúes_time
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

559 i‡(
hcf
->
expúes_time
 =(
time_t
Ë
NGX_ERROR
) {

563 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY


564 && 
hcf
->
expúes_time
 > 24 * 60 * 60)

569 i‡(
möus
) {

570 
hcf
->
expúes_time
 = - hcf->expires_time;

573  
NGX_CONF_OK
;

574 
	}
}

578 
	$ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

580 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

582 
ngx_°r_t
 *
vÆue
;

583 
ngx_uöt_t
 
i
;

584 
ngx_hâp_hódî_vÆ_t
 *
hv
;

585 
ngx_hâp_£t_hódî_t
 *
£t
;

586 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

588 
vÆue
 = 
cf
->
¨gs
->
ñts
;

590 i‡(
hcf
->
hódîs
 =
NULL
) {

591 
hcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

592 (
ngx_hâp_hódî_vÆ_t
));

593 i‡(
hcf
->
hódîs
 =
NULL
) {

594  
NGX_CONF_ERROR
;

598 
hv
 = 
	`ngx_¨øy_push
(
hcf
->
hódîs
);

599 i‡(
hv
 =
NULL
) {

600  
NGX_CONF_ERROR
;

603 
hv
->
key
 = 
vÆue
[1];

604 
hv
->
h™dÀr
 = 
ngx_hâp_add_hódî
;

605 
hv
->
off£t
 = 0;

607 
£t
 = 
ngx_hâp_£t_hódîs
;

608 
i
 = 0; 
£t
[i].
«me
.
Àn
; i++) {

609 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, 
£t
[
i
].
«me
.data) != 0) {

613 
hv
->
off£t
 = 
£t
[
i
].offset;

614 
hv
->
h™dÀr
 = 
£t
[
i
].handler;

619 i‡(
vÆue
[2].
Àn
 == 0) {

620 
	`ngx_memzîo
(&
hv
->
vÆue
, (
ngx_hâp_com∂ex_vÆue_t
));

621  
NGX_CONF_OK
;

624 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

626 
ccv
.
cf
 = cf;

627 
ccv
.
vÆue
 = &value[2];

628 
ccv
.
com∂ex_vÆue
 = &
hv
->
vÆue
;

630 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

631  
NGX_CONF_ERROR
;

634  
NGX_CONF_OK
;

635 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_image_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<gd.h
>

15 
	#NGX_HTTP_IMAGE_OFF
 0

	)

16 
	#NGX_HTTP_IMAGE_TEST
 1

	)

17 
	#NGX_HTTP_IMAGE_SIZE
 2

	)

18 
	#NGX_HTTP_IMAGE_RESIZE
 3

	)

19 
	#NGX_HTTP_IMAGE_CROP
 4

	)

20 
	#NGX_HTTP_IMAGE_ROTATE
 5

	)

23 
	#NGX_HTTP_IMAGE_START
 0

	)

24 
	#NGX_HTTP_IMAGE_READ
 1

	)

25 
	#NGX_HTTP_IMAGE_PROCESS
 2

	)

26 
	#NGX_HTTP_IMAGE_PASS
 3

	)

27 
	#NGX_HTTP_IMAGE_DONE
 4

	)

30 
	#NGX_HTTP_IMAGE_NONE
 0

	)

31 
	#NGX_HTTP_IMAGE_JPEG
 1

	)

32 
	#NGX_HTTP_IMAGE_GIF
 2

	)

33 
	#NGX_HTTP_IMAGE_PNG
 3

	)

36 
	#NGX_HTTP_IMAGE_BUFFERED
 0x08

	)

40 
ngx_uöt_t
 
	mfûãr
;

41 
ngx_uöt_t
 
	mwidth
;

42 
ngx_uöt_t
 
	mheight
;

43 
ngx_uöt_t
 
	m™gÀ
;

44 
ngx_uöt_t
 
	mj≥g_quÆôy
;

45 
ngx_uöt_t
 
	msh¨≥n
;

47 
ngx_Êag_t
 
	må™•¨ícy
;

48 
ngx_Êag_t
 
	möãæa˚
;

50 
ngx_hâp_com∂ex_vÆue_t
 *
	mwcv
;

51 
ngx_hâp_com∂ex_vÆue_t
 *
	mhcv
;

52 
ngx_hâp_com∂ex_vÆue_t
 *
	macv
;

53 
ngx_hâp_com∂ex_vÆue_t
 *
	mjqcv
;

54 
ngx_hâp_com∂ex_vÆue_t
 *
	mshcv
;

56 
size_t
 
	mbuf„r_size
;

57 } 
	tngx_hâp_image_fûãr_c⁄f_t
;

61 
u_ch¨
 *
	mimage
;

62 
u_ch¨
 *
	mœ°
;

64 
size_t
 
	mÀngth
;

66 
ngx_uöt_t
 
	mwidth
;

67 
ngx_uöt_t
 
	mheight
;

68 
ngx_uöt_t
 
	mmax_width
;

69 
ngx_uöt_t
 
	mmax_height
;

70 
ngx_uöt_t
 
	m™gÀ
;

72 
ngx_uöt_t
 
	mpha£
;

73 
ngx_uöt_t
 
	mty≥
;

74 
ngx_uöt_t
 
	mf‹˚
;

75 } 
	tngx_hâp_image_fûãr_˘x_t
;

78 
ngx_öt_t
 
ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

80 
ngx_uöt_t
 
ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

81 
ngx_öt_t
 
ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

82 
ngx_buf_t
 *
ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
);

83 
ngx_buf_t
 *
ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

85 
ngx_buf_t
 *
ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

87 
ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

88 
ngx_öt_t
 
ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

91 
ngx_buf_t
 *
ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

93 
gdImagePå
 
ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

95 
gdImagePå
 
ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
,

96 
cﬁ‹s
);

97 
u_ch¨
 *
ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
,

98 
gdImagePå
 
img
, *
size
);

99 
ngx_hâp_image_˛ónup
(*
d©a
);

100 
ngx_uöt_t
 
ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
);

102 
ngx_uöt_t
 
ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
);

105 *
ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

106 *
ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

107 *
chûd
);

108 *
ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

109 *
c⁄f
);

110 *
ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
,

111 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

112 *
ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

113 *
c⁄f
);

114 
ngx_öt_t
 
ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

117 
ngx_comm™d_t
 
	gngx_hâp_image_fûãr_comm™ds
[] = {

119 { 
ngx_°rög
("image_filter"),

120 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

121 
ngx_hâp_image_fûãr
,

122 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
NULL
 },

126 { 
ngx_°rög
("image_filter_jpeg_quality"),

127 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

128 
ngx_hâp_image_fûãr_j≥g_quÆôy
,

129 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
NULL
 },

133 { 
ngx_°rög
("image_filter_sharpen"),

134 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

135 
ngx_hâp_image_fûãr_sh¨≥n
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

138 
NULL
 },

140 { 
ngx_°rög
("image_filter_transparency"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

142 
ngx_c⁄f_£t_Êag_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
å™•¨ícy
),

145 
NULL
 },

147 { 
ngx_°rög
("image_filter_interlace"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

149 
ngx_c⁄f_£t_Êag_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
öãæa˚
),

152 
NULL
 },

154 { 
ngx_°rög
("image_filter_buffer"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_size_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
buf„r_size
),

159 
NULL
 },

161 
ngx_nuŒ_comm™d


165 
ngx_hâp_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ_˘x
 = {

166 
NULL
,

167 
ngx_hâp_image_fûãr_öô
,

169 
NULL
,

170 
NULL
,

172 
NULL
,

173 
NULL
,

175 
ngx_hâp_image_fûãr_¸óã_c⁄f
,

176 
ngx_hâp_image_fûãr_mîge_c⁄f


180 
ngx_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ
 = {

181 
NGX_MODULE_V1
,

182 &
ngx_hâp_image_fûãr_moduÀ_˘x
,

183 
ngx_hâp_image_fûãr_comm™ds
,

184 
NGX_HTTP_MODULE
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NGX_MODULE_V1_PADDING


196 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

197 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

200 
ngx_°r_t
 
	gngx_hâp_image_ty≥s
[] = {

201 
ngx_°rög
("image/jpeg"),

202 
ngx_°rög
("image/gif"),

203 
ngx_°rög
("image/png")

207 
ngx_öt_t


208 
	$ngx_hâp_image_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

210 
off_t
 
Àn
;

211 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

212 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

214 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

215  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

218 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

220 i‡(
˘x
) {

221 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_image_fûãr_moduÀ
);

222  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

225 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

227 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_OFF
) {

228  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

231 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


233 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

234 (
u_ch¨
 *) "multipart/x-mixed-replace",

238 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241  
NGX_ERROR
;

244 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_image_fûãr_˘x_t
));

245 i‡(
˘x
 =
NULL
) {

246  
NGX_ERROR
;

249 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_image_fûãr_moduÀ
);

251 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

253 i‡(
Àn
 !-1 &&Üí > (
off_t
Ë
c⁄f
->
buf„r_size
) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

255 "imagêfûãr:ÅoÿbigÑe•⁄£: %O", 
Àn
);

257  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

260 i‡(
Àn
 == -1) {

261 
˘x
->
Àngth
 = 
c⁄f
->
buf„r_size
;

264 
˘x
->
Àngth
 = (
size_t
Ë
Àn
;

267 i‡(
r
->
hódîs_out
.
ª‰esh
) {

268 
r
->
hódîs_out
.
ª‰esh
->
hash
 = 0;

271 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

272 
r
->
Ælow_ønges
 = 0;

274  
NGX_OK
;

275 
	}
}

278 
ngx_öt_t


279 
	$ngx_hâp_image_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

281 
ngx_öt_t
 
rc
;

282 
ngx_°r_t
 *
˘
;

283 
ngx_chaö_t
 
out
;

284 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

285 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

287 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "image filter");

289 i‡(
ö
 =
NULL
) {

290  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

293 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

295 i‡(
˘x
 =
NULL
) {

296  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

299 
˘x
->
pha£
) {

301 
NGX_HTTP_IMAGE_START
:

303 
˘x
->
ty≥
 = 
	`ngx_hâp_image_ã°
(
r
, 
ö
);

305 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

307 i‡(
˘x
->
ty≥
 =
NGX_HTTP_IMAGE_NONE
) {

309 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

310 
out
.
buf
 = 
	`ngx_hâp_image_js⁄
(
r
, 
NULL
);

312 i‡(
out
.
buf
) {

313 
out
.
√xt
 = 
NULL
;

314 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_DONE
;

316  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

320  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

321 &
ngx_hâp_image_fûãr_moduÀ
,

322 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

327 
˘
 = &
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1];

328 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

329 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

330 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

332 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_TEST
) {

333 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

335  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, 
ö
);

338 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_READ
;

342 
NGX_HTTP_IMAGE_READ
:

344 
rc
 = 
	`ngx_hâp_image_ªad
(
r
, 
ö
);

346 i‡(
rc
 =
NGX_AGAIN
) {

347  
NGX_OK
;

350 i‡(
rc
 =
NGX_ERROR
) {

351  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

352 &
ngx_hâp_image_fûãr_moduÀ
,

353 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

358 
NGX_HTTP_IMAGE_PROCESS
:

360 
out
.
buf
 = 
	`ngx_hâp_image_¥o˚ss
(
r
);

362 i‡(
out
.
buf
 =
NULL
) {

363  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

364 &
ngx_hâp_image_fûãr_moduÀ
,

365 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

368 
out
.
√xt
 = 
NULL
;

369 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

371  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

373 
NGX_HTTP_IMAGE_PASS
:

375  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

379 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

382  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

384 
	}
}

387 
ngx_öt_t


388 
	$ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
,

389 
ngx_chaö_t
 *
ö
)

391 
ngx_öt_t
 
rc
;

393 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

395 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

396  
NGX_ERROR
;

399 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

401 i‡(
˘x
->
pha£
 =
NGX_HTTP_IMAGE_DONE
) {

403  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

406  
rc
;

407 
	}
}

410 
ngx_uöt_t


411 
	$ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

413 
u_ch¨
 *
p
;

415 
p
 = 
ö
->
buf
->
pos
;

417 i‡(
ö
->
buf
->
œ°
 - 
p
 < 16) {

418  
NGX_HTTP_IMAGE_NONE
;

421 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

422 "imagêfûãr: \"%c%c\"", 
p
[0],Ö[1]);

424 i‡(
p
[0] == 0xff &&Ö[1] == 0xd8) {

428  
NGX_HTTP_IMAGE_JPEG
;

430 } i‡(
p
[0] == 'G' &&Ö[1] == 'I' &&Ö[2] == 'F' &&Ö[3] == '8'

431 && 
p
[5] == 'a')

433 i‡(
p
[4] == '9' ||Ö[4] == '7') {

435  
NGX_HTTP_IMAGE_GIF
;

438 } i‡(
p
[0] == 0x89 &&Ö[1] == 'P' &&Ö[2] == 'N' &&Ö[3] == 'G'

439 && 
p
[4] == 0x0d &&Ö[5] == 0x0a &&Ö[6] == 0x1a &&Ö[7] == 0x0a)

443  
NGX_HTTP_IMAGE_PNG
;

446  
NGX_HTTP_IMAGE_NONE
;

447 
	}
}

450 
ngx_öt_t


451 
	$ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

453 
u_ch¨
 *
p
;

454 
size_t
 
size
, 
ª°
;

455 
ngx_buf_t
 *
b
;

456 
ngx_chaö_t
 *
˛
;

457 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

459 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

461 i‡(
˘x
->
image
 =
NULL
) {

462 
˘x
->
image
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Àngth
);

463 i‡(
˘x
->
image
 =
NULL
) {

464  
NGX_ERROR
;

467 
˘x
->
œ°
 = ctx->
image
;

470 
p
 = 
˘x
->
œ°
;

472 
˛
 = 
ö
; cl; c»˛->
√xt
) {

474 
b
 = 
˛
->
buf
;

475 
size
 = 
b
->
œ°
 - b->
pos
;

477 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

478 "imagêbuf: %uz", 
size
);

480 
ª°
 = 
˘x
->
image
 + ctx->
Àngth
 - 
p
;

482 i‡(
size
 > 
ª°
) {

483 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

485  
NGX_ERROR
;

488 
p
 = 
	`ngx_˝ymem
’, 
b
->
pos
, 
size
);

489 
b
->
pos
 +
size
;

491 i‡(
b
->
œ°_buf
) {

492 
˘x
->
œ°
 = 
p
;

493  
NGX_OK
;

497 
˘x
->
œ°
 = 
p
;

498 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_IMAGE_BUFFERED
;

500  
NGX_AGAIN
;

501 
	}
}

504 
ngx_buf_t
 *

505 
	$ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
)

507 
ngx_öt_t
 
rc
;

508 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

509 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

511 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_IMAGE_BUFFERED
;

513 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

515 
rc
 = 
	`ngx_hâp_image_size
(
r
, 
˘x
);

517 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

519 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

520  
	`ngx_hâp_image_js⁄
(
r
, 
rc
 =
NGX_OK
 ? 
˘x
 : 
NULL
);

523 
˘x
->
™gÀ
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
acv
, conf->angle);

525 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

527 i‡(
˘x
->
™gÀ
 != 90 && ctx->angle != 180 && ctx->angle != 270) {

528  
NULL
;

531  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

534 
˘x
->
max_width
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
wcv
, c⁄f->
width
);

535 i‡(
˘x
->
max_width
 == 0) {

536  
NULL
;

539 
˘x
->
max_height
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
hcv
,

540 
c⁄f
->
height
);

541 i‡(
˘x
->
max_height
 == 0) {

542  
NULL
;

545 i‡(
rc
 =
NGX_OK


546 && 
˘x
->
width
 <˘x->
max_width


547 && 
˘x
->
height
 <˘x->
max_height


548 && 
˘x
->
™gÀ
 == 0

549 && !
˘x
->
f‹˚
)

551  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

554  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

555 
	}
}

558 
ngx_buf_t
 *

559 
	$ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

561 
size_t
 
Àn
;

562 
ngx_buf_t
 *
b
;

564 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

565 i‡(
b
 =
NULL
) {

566  
NULL
;

569 
b
->
mem‹y
 = 1;

570 
b
->
œ°_buf
 = 1;

572 
	`ngx_hâp_˛ón_hódî
(
r
);

574 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

575 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("application/json") - 1;

576 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "application/json");

577 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

579 i‡(
˘x
 =
NULL
) {

580 
b
->
pos
 = (
u_ch¨
 *Ë"{}" 
CRLF
;

581 
b
->
œ°
 = b->
pos
 + ("{}" 
CRLF
) - 1;

583 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

585  
b
;

588 
Àn
 = ("{ \"img\" : "

589 "{ \"width\": , \"height\": , \"ty≥\": \"j≥g\" } }" 
CRLF
) - 1

590 + 2 * 
NGX_SIZE_T_LEN
;

592 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

593 i‡(
b
->
pos
 =
NULL
) {

594  
NULL
;

597 
b
->
œ°
 = 
	`ngx_•rötf
(b->
pos
,

601 " \"ty≥\": \"%s\" } }" 
CRLF
,

602 
˘x
->
width
, ctx->
height
,

603 
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1].
d©a
 + 6);

605 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

607  
b
;

608 
	}
}

611 
ngx_buf_t
 *

612 
	$ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

614 
ngx_buf_t
 *
b
;

616 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

617 i‡(
b
 =
NULL
) {

618  
NULL
;

621 
b
->
pos
 = 
˘x
->
image
;

622 
b
->
œ°
 = 
˘x
->last;

623 
b
->
mem‹y
 = 1;

624 
b
->
œ°_buf
 = 1;

626 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

628  
b
;

629 
	}
}

633 
	$ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

635 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

637 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

638 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

641 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

642 
	}
}

645 
ngx_öt_t


646 
	$ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

648 
u_ch¨
 *
p
, *
œ°
;

649 
size_t
 
Àn
, 
≠p
;

650 
ngx_uöt_t
 
width
, 
height
;

652 
p
 = 
˘x
->
image
;

654 
˘x
->
ty≥
) {

656 
NGX_HTTP_IMAGE_JPEG
:

658 
p
 += 2;

659 
œ°
 = 
˘x
->
image
 + ctx->
Àngth
 - 10;

660 
width
 = 0;

661 
height
 = 0;

662 
≠p
 = 0;

664 
p
 < 
œ°
) {

666 i‡(
p
[0] == 0xff &&Ö[1] != 0xff) {

668 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

669 "JPEG: %02xd %02xd", 
p
[0],Ö[1]);

671 
p
++;

673 i‡((*
p
 == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3

674 || *
p
 == 0xc9 || *p == 0xca || *p == 0xcb)

675 && (
width
 =0 || 
height
 == 0))

677 
width
 = 
p
[6] * 256 +Ö[7];

678 
height
 = 
p
[4] * 256 +Ö[5];

681 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

682 "JPEG: %02xd %02xd", 
p
[1],Ö[2]);

684 
Àn
 = 
p
[1] * 256 +Ö[2];

686 i‡(*
p
 >= 0xe1 && *p <= 0xef) {

688 
≠p
 +
Àn
;

691 
p
 +
Àn
;

696 
p
++;

699 i‡(
width
 =0 || 
height
 == 0) {

700  
NGX_DECLINED
;

703 i‡(
˘x
->
Àngth
 / 20 < 
≠p
) {

705 
˘x
->
f‹˚
 = 1;

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

707 "≠∞d©®size: %uz", 
≠p
);

712 
NGX_HTTP_IMAGE_GIF
:

714 i‡(
˘x
->
Àngth
 < 10) {

715  
NGX_DECLINED
;

718 
width
 = 
p
[7] * 256 +Ö[6];

719 
height
 = 
p
[9] * 256 +Ö[8];

723 
NGX_HTTP_IMAGE_PNG
:

725 i‡(
˘x
->
Àngth
 < 24) {

726  
NGX_DECLINED
;

729 
width
 = 
p
[18] * 256 +Ö[19];

730 
height
 = 
p
[22] * 256 +Ö[23];

736  
NGX_DECLINED
;

739 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

740 "imagêsize: %d x %d", 
width
, 
height
);

742 
˘x
->
width
 = width;

743 
˘x
->
height
 = height;

745  
NGX_OK
;

746 
	}
}

749 
ngx_buf_t
 *

750 
	$ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

752 
sx
, 
sy
, 
dx
, 
dy
, 
ox
, 
oy
, 
ax
, 
ay
, 
size
,

753 
cﬁ‹s
, 
∑Àâe
, 
å™•¨ít
, 
sh¨≥n
,

754 
ªd
, 
gªí
, 
blue
, 
t
;

755 
u_ch¨
 *
out
;

756 
ngx_buf_t
 *
b
;

757 
ngx_uöt_t
 
ªsize
;

758 
gdImagePå
 
§c
, 
d°
;

759 
ngx_poﬁ_˛ónup_t
 *
˛n
;

760 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

762 
§c
 = 
	`ngx_hâp_image_sour˚
(
r
, 
˘x
);

764 i‡(
§c
 =
NULL
) {

765  
NULL
;

768 
sx
 = 
	`gdImageSX
(
§c
);

769 
sy
 = 
	`gdImageSY
(
§c
);

771 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

773 i‡(!
˘x
->
f‹˚


774 && 
˘x
->
™gÀ
 == 0

775 && (
ngx_uöt_t
Ë
sx
 <
˘x
->
max_width


776 && (
ngx_uöt_t
Ë
sy
 <
˘x
->
max_height
)

778 
	`gdImageDe°roy
(
§c
);

779  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

782 
cﬁ‹s
 = 
	`gdImageCﬁ‹sTŸÆ
(
§c
);

784 i‡(
cﬁ‹s
 && 
c⁄f
->
å™•¨ícy
) {

785 
å™•¨ít
 = 
	`gdImageGëTøn•¨ít
(
§c
);

787 i‡(
å™•¨ít
 != -1) {

788 
∑Àâe
 = 
cﬁ‹s
;

789 
ªd
 = 
	`gdImageRed
(
§c
, 
å™•¨ít
);

790 
gªí
 = 
	`gdImageGªí
(
§c
, 
å™•¨ít
);

791 
blue
 = 
	`gdImageBlue
(
§c
, 
å™•¨ít
);

793 
å™•¨ít
;

797 
∑Àâe
 = 0;

798 
å™•¨ít
 = -1;

799 
ªd
 = 0;

800 
gªí
 = 0;

801 
blue
 = 0;

803 
å™•¨ít
:

805 
	`gdImageCﬁ‹Tøn•¨ít
(
§c
, -1);

807 
dx
 = 
sx
;

808 
dy
 = 
sy
;

810 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_RESIZE
) {

812 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

813 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

814 
dy
 = dy ? dy : 1;

815 
dx
 = 
˘x
->
max_width
;

818 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

819 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

820 
dx
 = dx ? dx : 1;

821 
dy
 = 
˘x
->
max_height
;

824 
ªsize
 = 1;

826 } i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

828 
ªsize
 = 0;

832 
ªsize
 = 0;

834 i‡((Ë
dx
 / 
dy
 < (Ë
˘x
->
max_width
 / ctx->
max_height
) {

835 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

836 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

837 
dy
 = dy ? dy : 1;

838 
dx
 = 
˘x
->
max_width
;

839 
ªsize
 = 1;

843 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

844 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

845 
dx
 = dx ? dx : 1;

846 
dy
 = 
˘x
->
max_height
;

847 
ªsize
 = 1;

852 i‡(
ªsize
) {

853 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

854 i‡(
d°
 =
NULL
) {

855 
	`gdImageDe°roy
(
§c
);

856  
NULL
;

859 i‡(
cﬁ‹s
 == 0) {

860 
	`gdImageSaveAÕha
(
d°
, 1);

861 
	`gdImageAÕhaBÀndög
(
d°
, 0);

864 
	`gdImageC›yReßm∂ed
(
d°
, 
§c
, 0, 0, 0, 0, 
dx
, 
dy
, 
sx
, 
sy
);

866 i‡(
cﬁ‹s
) {

867 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

870 
	`gdImageDe°roy
(
§c
);

873 
d°
 = 
§c
;

876 i‡(
˘x
->
™gÀ
) {

877 
§c
 = 
d°
;

879 
ax
 = (
dx
 % 2 == 0) ? 1 : 0;

880 
ay
 = (
dy
 % 2 == 0) ? 1 : 0;

882 
˘x
->
™gÀ
) {

886 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dy
, 
dx
, 
∑Àâe
);

887 i‡(
d°
 =
NULL
) {

888 
	`gdImageDe°roy
(
§c
);

889  
NULL
;

891 i‡(
˘x
->
™gÀ
 == 90) {

892 
ox
 = 
dy
 / 2 + 
ay
;

893 
oy
 = 
dx
 / 2 - 
ax
;

896 
ox
 = 
dy
 / 2 - 
ay
;

897 
oy
 = 
dx
 / 2 + 
ax
;

900 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
ox
, 
oy
, 0, 0,

901 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

902 
	`gdImageDe°roy
(
§c
);

904 
t
 = 
dx
;

905 
dx
 = 
dy
;

906 
dy
 = 
t
;

910 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

911 i‡(
d°
 =
NULL
) {

912 
	`gdImageDe°roy
(
§c
);

913  
NULL
;

915 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
dx
 / 2 - 
ax
, 
dy
 / 2 - 
ay
, 0, 0,

916 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

917 
	`gdImageDe°roy
(
§c
);

922 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_CROP
) {

924 
§c
 = 
d°
;

926 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

927 
ox
 = 
dx
 - 
˘x
->
max_width
;

930 
ox
 = 0;

933 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

934 
oy
 = 
dy
 - 
˘x
->
max_height
;

937 
oy
 = 0;

940 i‡(
ox
 || 
oy
) {

942 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
 - 
ox
, 
dy
 - 
oy
, 
cﬁ‹s
);

944 i‡(
d°
 =
NULL
) {

945 
	`gdImageDe°roy
(
§c
);

946  
NULL
;

949 
ox
 /= 2;

950 
oy
 /= 2;

952 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

954 
dx
, 
dy
, 
ox
, 
oy
);

956 i‡(
cﬁ‹s
 == 0) {

957 
	`gdImageSaveAÕha
(
d°
, 1);

958 
	`gdImageAÕhaBÀndög
(
d°
, 0);

961 
	`gdImageC›y
(
d°
, 
§c
, 0, 0, 
ox
, 
oy
, 
dx
 - ox, 
dy
 - oy);

963 i‡(
cﬁ‹s
) {

964 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

967 
	`gdImageDe°roy
(
§c
);

971 i‡(
å™•¨ít
 !-1 && 
cﬁ‹s
) {

972 
	`gdImageCﬁ‹Tøn•¨ít
(
d°
, 
	`gdImageCﬁ‹Exa˘
(d°, 
ªd
, 
gªí
, 
blue
));

975 
sh¨≥n
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
shcv
, conf->sharpen);

976 i‡(
sh¨≥n
 > 0) {

977 
	`gdImageSh¨≥n
(
d°
, 
sh¨≥n
);

980 
	`gdImageI¡îœ˚
(
d°
, (Ë
c⁄f
->
öãæa˚
);

982 
out
 = 
	`ngx_hâp_image_out
(
r
, 
˘x
->
ty≥
, 
d°
, &
size
);

984 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

985 "image: %d x %d %d", 
sx
, 
sy
, 
cﬁ‹s
);

987 
	`gdImageDe°roy
(
d°
);

988 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
image
);

990 i‡(
out
 =
NULL
) {

991  
NULL
;

994 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

995 i‡(
˛n
 =
NULL
) {

996 
	`gdFªe
(
out
);

997  
NULL
;

1000 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1001 i‡(
b
 =
NULL
) {

1002 
	`gdFªe
(
out
);

1003  
NULL
;

1006 
˛n
->
h™dÀr
 = 
ngx_hâp_image_˛ónup
;

1007 
˛n
->
d©a
 = 
out
;

1009 
b
->
pos
 = 
out
;

1010 
b
->
œ°
 = 
out
 + 
size
;

1011 
b
->
mem‹y
 = 1;

1012 
b
->
œ°_buf
 = 1;

1014 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

1016  
b
;

1017 
	}
}

1020 
gdImagePå


1021 
	$ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

1023 *
Áûed
;

1024 
gdImagePå
 
img
;

1026 
img
 = 
NULL
;

1028 
˘x
->
ty≥
) {

1030 
NGX_HTTP_IMAGE_JPEG
:

1031 
img
 = 
	`gdImageCª©eFromJ≥gPå
(
˘x
->
Àngth
, ctx->
image
);

1032 
Áûed
 = "gdImageCreateFromJpegPtr() failed";

1035 
NGX_HTTP_IMAGE_GIF
:

1036 
img
 = 
	`gdImageCª©eFromGifPå
(
˘x
->
Àngth
, ctx->
image
);

1037 
Áûed
 = "gdImageCreateFromGifPtr() failed";

1040 
NGX_HTTP_IMAGE_PNG
:

1041 
img
 = 
	`gdImageCª©eFromPngPå
(
˘x
->
Àngth
, ctx->
image
);

1042 
Áûed
 = "gdImageCreateFromPngPtr() failed";

1046 
Áûed
 = "unknown imageÅype";

1050 i‡(
img
 =
NULL
) {

1051 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1054  
img
;

1055 
	}
}

1058 
gdImagePå


1059 
	$ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
, 
cﬁ‹s
)

1061 
gdImagePå
 
img
;

1063 i‡(
cﬁ‹s
 == 0) {

1064 
img
 = 
	`gdImageCª©eTrueCﬁ‹
(
w
, 
h
);

1066 i‡(
img
 =
NULL
) {

1067 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1069  
NULL
;

1073 
img
 = 
	`gdImageCª©e
(
w
, 
h
);

1075 i‡(
img
 =
NULL
) {

1076 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1078  
NULL
;

1082  
img
;

1083 
	}
}

1086 
u_ch¨
 *

1087 
	$ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
, 
gdImagePå
 
img
,

1088 *
size
)

1090 *
Áûed
;

1091 
u_ch¨
 *
out
;

1092 
ngx_öt_t
 
jq
;

1093 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1095 
out
 = 
NULL
;

1097 
ty≥
) {

1099 
NGX_HTTP_IMAGE_JPEG
:

1100 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

1102 
jq
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
jqcv
, c⁄f->
j≥g_quÆôy
);

1103 i‡(
jq
 <= 0) {

1104  
NULL
;

1107 
out
 = 
	`gdImageJ≥gPå
(
img
, 
size
, 
jq
);

1108 
Áûed
 = "gdImageJpegPtr() failed";

1111 
NGX_HTTP_IMAGE_GIF
:

1112 
out
 = 
	`gdImageGifPå
(
img
, 
size
);

1113 
Áûed
 = "gdImageGifPtr() failed";

1116 
NGX_HTTP_IMAGE_PNG
:

1117 
out
 = 
	`gdImagePngPå
(
img
, 
size
);

1118 
Áûed
 = "gdImagePngPtr() failed";

1122 
Áûed
 = "unknown imageÅype";

1126 i‡(
out
 =
NULL
) {

1127 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1130  
out
;

1131 
	}
}

1135 
	$ngx_hâp_image_˛ónup
(*
d©a
)

1137 
	`gdFªe
(
d©a
);

1138 
	}
}

1141 
ngx_uöt_t


1142 
	$ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

1143 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
)

1145 
ngx_°r_t
 
vÆ
;

1147 i‡(
cv
 =
NULL
) {

1148  
v
;

1151 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1155  
	`ngx_hâp_image_fûãr_vÆue
(&
vÆ
);

1156 
	}
}

1159 
ngx_uöt_t


1160 
	$ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
)

1162 
ngx_öt_t
 
n
;

1164 i‡(
vÆue
->
Àn
 =1 && vÆue->
d©a
[0] == '-') {

1165  (
ngx_uöt_t
) -1;

1168 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

1170 i‡(
n
 > 0) {

1171  (
ngx_uöt_t
Ë
n
;

1175 
	}
}

1179 
	$ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1181 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1183 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_image_fûãr_c⁄f_t
));

1184 i‡(
c⁄f
 =
NULL
) {

1185  
NULL
;

1201 
c⁄f
->
fûãr
 = 
NGX_CONF_UNSET_UINT
;

1202 
c⁄f
->
j≥g_quÆôy
 = 
NGX_CONF_UNSET_UINT
;

1203 
c⁄f
->
sh¨≥n
 = 
NGX_CONF_UNSET_UINT
;

1204 
c⁄f
->
å™•¨ícy
 = 
NGX_CONF_UNSET
;

1205 
c⁄f
->
öãæa˚
 = 
NGX_CONF_UNSET
;

1206 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1208  
c⁄f
;

1209 
	}
}

1213 
	$ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1215 
ngx_hâp_image_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1216 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

1218 i‡(
c⁄f
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1220 i‡(
¥ev
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1221 
c⁄f
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1224 
c⁄f
->
fûãr
 = 
¥ev
->filter;

1225 
c⁄f
->
width
 = 
¥ev
->width;

1226 
c⁄f
->
height
 = 
¥ev
->height;

1227 
c⁄f
->
™gÀ
 = 
¥ev
->angle;

1228 
c⁄f
->
wcv
 = 
¥ev
->wcv;

1229 
c⁄f
->
hcv
 = 
¥ev
->hcv;

1230 
c⁄f
->
acv
 = 
¥ev
->acv;

1234 i‡(
c⁄f
->
j≥g_quÆôy
 =
NGX_CONF_UNSET_UINT
) {

1237 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
j≥g_quÆôy
, 
¥ev
->jpeg_quality, 75);

1239 i‡(
c⁄f
->
jqcv
 =
NULL
) {

1240 
c⁄f
->
jqcv
 = 
¥ev
->jqcv;

1244 i‡(
c⁄f
->
sh¨≥n
 =
NGX_CONF_UNSET_UINT
) {

1245 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
sh¨≥n
, 
¥ev
->sharpen, 0);

1247 i‡(
c⁄f
->
shcv
 =
NULL
) {

1248 
c⁄f
->
shcv
 = 
¥ev
->shcv;

1252 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
å™•¨ícy
, 
¥ev
->transparency, 1);

1254 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öãæa˚
, 
¥ev
->interlace, 0);

1256 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1259  
NGX_CONF_OK
;

1260 
	}
}

1264 
	$ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1266 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1268 
ngx_°r_t
 *
vÆue
;

1269 
ngx_öt_t
 
n
;

1270 
ngx_uöt_t
 
i
;

1271 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1272 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1274 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1276 
i
 = 1;

1278 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1279 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1280 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1282 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "test") == 0) {

1283 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_TEST
;

1285 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "size") == 0) {

1286 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_SIZE
;

1289 
Áûed
;

1292  
NGX_CONF_OK
;

1294 } i‡(
cf
->
¨gs
->
√…s
 == 3) {

1296 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "rotate") == 0) {

1297 i‡(
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_RESIZE


1298 && 
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_CROP
)

1300 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_ROTATE
;

1303 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1305 
ccv
.
cf
 = cf;

1306 
ccv
.
vÆue
 = &vÆue[++
i
];

1307 
ccv
.
com∂ex_vÆue
 = &
cv
;

1309 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1310  
NGX_CONF_ERROR
;

1313 i‡(
cv
.
Àngths
 =
NULL
) {

1314 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1316 i‡(
n
 != 90 &&Ç != 180 &&Ç != 270) {

1317 
Áûed
;

1320 
imcf
->
™gÀ
 = (
ngx_uöt_t
Ë
n
;

1323 
imcf
->
acv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1324 (
ngx_hâp_com∂ex_vÆue_t
));

1325 i‡(
imcf
->
acv
 =
NULL
) {

1326  
NGX_CONF_ERROR
;

1329 *
imcf
->
acv
 = 
cv
;

1332  
NGX_CONF_OK
;

1335 
Áûed
;

1339 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "resize") == 0) {

1340 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_RESIZE
;

1342 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "crop") == 0) {

1343 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_CROP
;

1346 
Áûed
;

1349 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1351 
ccv
.
cf
 = cf;

1352 
ccv
.
vÆue
 = &vÆue[++
i
];

1353 
ccv
.
com∂ex_vÆue
 = &
cv
;

1355 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1356  
NGX_CONF_ERROR
;

1359 i‡(
cv
.
Àngths
 =
NULL
) {

1360 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1362 i‡(
n
 == 0) {

1363 
Áûed
;

1366 
imcf
->
width
 = (
ngx_uöt_t
Ë
n
;

1369 
imcf
->
wcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1370 i‡(
imcf
->
wcv
 =
NULL
) {

1371  
NGX_CONF_ERROR
;

1374 *
imcf
->
wcv
 = 
cv
;

1377 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1379 
ccv
.
cf
 = cf;

1380 
ccv
.
vÆue
 = &vÆue[++
i
];

1381 
ccv
.
com∂ex_vÆue
 = &
cv
;

1383 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1384  
NGX_CONF_ERROR
;

1387 i‡(
cv
.
Àngths
 =
NULL
) {

1388 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1390 i‡(
n
 == 0) {

1391 
Áûed
;

1394 
imcf
->
height
 = (
ngx_uöt_t
Ë
n
;

1397 
imcf
->
hcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1398 i‡(
imcf
->
hcv
 =
NULL
) {

1399  
NGX_CONF_ERROR
;

1402 *
imcf
->
hcv
 = 
cv
;

1405  
NGX_CONF_OK
;

1407 
Áûed
:

1409 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

1410 &
vÆue
[
i
]);

1412  
NGX_CONF_ERROR
;

1413 
	}
}

1417 
	$ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1418 *
c⁄f
)

1420 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1422 
ngx_°r_t
 *
vÆue
;

1423 
ngx_öt_t
 
n
;

1424 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1425 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1427 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1429 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1431 
ccv
.
cf
 = cf;

1432 
ccv
.
vÆue
 = &value[1];

1433 
ccv
.
com∂ex_vÆue
 = &
cv
;

1435 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1436  
NGX_CONF_ERROR
;

1439 i‡(
cv
.
Àngths
 =
NULL
) {

1440 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1442 i‡(
n
 <= 0) {

1443 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1444 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1445  
NGX_CONF_ERROR
;

1448 
imcf
->
j≥g_quÆôy
 = (
ngx_uöt_t
Ë
n
;

1451 
imcf
->
jqcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1452 i‡(
imcf
->
jqcv
 =
NULL
) {

1453  
NGX_CONF_ERROR
;

1456 *
imcf
->
jqcv
 = 
cv
;

1459  
NGX_CONF_OK
;

1460 
	}
}

1464 
	$ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1465 *
c⁄f
)

1467 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1469 
ngx_°r_t
 *
vÆue
;

1470 
ngx_öt_t
 
n
;

1471 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1472 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1474 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1476 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1478 
ccv
.
cf
 = cf;

1479 
ccv
.
vÆue
 = &value[1];

1480 
ccv
.
com∂ex_vÆue
 = &
cv
;

1482 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1483  
NGX_CONF_ERROR
;

1486 i‡(
cv
.
Àngths
 =
NULL
) {

1487 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1489 i‡(
n
 < 0) {

1490 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1491 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1492  
NGX_CONF_ERROR
;

1495 
imcf
->
sh¨≥n
 = (
ngx_uöt_t
Ë
n
;

1498 
imcf
->
shcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1499 i‡(
imcf
->
shcv
 =
NULL
) {

1500  
NGX_CONF_ERROR
;

1503 *
imcf
->
shcv
 = 
cv
;

1506  
NGX_CONF_OK
;

1507 
	}
}

1510 
ngx_öt_t


1511 
	$ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1513 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1514 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_image_hódî_fûãr
;

1516 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1517 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_image_body_fûãr
;

1519  
NGX_OK
;

1520 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	m«me
;

15 
ngx_¨øy_t
 *
	mÀngths
;

16 
ngx_¨øy_t
 *
	mvÆues
;

17 } 
	tngx_hâp_ödex_t
;

21 
ngx_¨øy_t
 *
	mödi˚s
;

22 
size_t
 
	mmax_ödex_Àn
;

23 } 
	tngx_hâp_ödex_loc_c⁄f_t
;

26 
	#NGX_HTTP_DEFAULT_INDEX
 "ödex.html"

	)

29 
ngx_öt_t
 
ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
);

31 
ngx_öt_t
 
ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
);

34 
ngx_öt_t
 
ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_ödex_comm™ds
[] = {

44 { 
ngx_°rög
("index"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

46 
ngx_hâp_ödex_£t_ödex
,

47 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
NULL
 },

51 
ngx_nuŒ_comm™d


55 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ödex_moduÀ_˘x
 = {

56 
NULL
,

57 
ngx_hâp_ödex_öô
,

59 
NULL
,

60 
NULL
,

62 
NULL
,

63 
NULL
,

65 
ngx_hâp_ödex_¸óã_loc_c⁄f
,

66 
ngx_hâp_ödex_mîge_loc_c⁄f


70 
ngx_moduÀ_t
 
	gngx_hâp_ödex_moduÀ
 = {

71 
NGX_MODULE_V1
,

72 &
ngx_hâp_ödex_moduÀ_˘x
,

73 
ngx_hâp_ödex_comm™ds
,

74 
NGX_HTTP_MODULE
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NGX_MODULE_V1_PADDING


96 
ngx_öt_t


97 
	$ngx_hâp_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

99 
u_ch¨
 *
p
, *
«me
;

100 
size_t
 
Àn
, 
roŸ
, 
ª£rve
, 
Æloˇãd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_°r_t
 
∑th
, 
uri
;

103 
ngx_uöt_t
 
i
, 
dú_ã°ed
;

104 
ngx_hâp_ödex_t
 *
ödex
;

105 
ngx_›í_fûe_öfo_t
 
of
;

106 
ngx_hâp_s¸ùt_code_±
 
code
;

107 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

108 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

109 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
;

110 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

112 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

113  
NGX_DECLINED
;

116 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

117  
NGX_DECLINED
;

120 
ûcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ödex_moduÀ
);

121 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

123 
Æloˇãd
 = 0;

124 
roŸ
 = 0;

125 
dú_ã°ed
 = 0;

126 
«me
 = 
NULL
;

128 
∑th
.
d©a
 = 
NULL
;

130 
ödex
 = 
ûcf
->
ödi˚s
->
ñts
;

131 
i
 = 0; i < 
ûcf
->
ödi˚s
->
√…s
; i++) {

133 i‡(
ödex
[
i
].
Àngths
 =
NULL
) {

135 i‡(
ödex
[
i
].
«me
.
d©a
[0] == '/') {

136  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
ödex
[
i
].
«me
, &r->
¨gs
);

139 
ª£rve
 = 
ûcf
->
max_ödex_Àn
;

140 
Àn
 = 
ödex
[
i
].
«me
.len;

143 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

145 
e
.
ù
 = 
ödex
[
i
].
Àngths
->
ñts
;

146 
e
.
ªque°
 = 
r
;

147 
e
.
Êushed
 = 1;

150 
Àn
 = 1;

152 *(
uöçå_t
 *Ë
e
.
ù
) {

153 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

154 
Àn
 +
	`lcode
(&
e
);

159 
ª£rve
 = 
Àn
 + 16;

162 i‡(
ª£rve
 > 
Æloˇãd
) {

164 
«me
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
ª£rve
);

165 i‡(
«me
 =
NULL
) {

166  
NGX_ERROR
;

169 
Æloˇãd
 = 
∑th
.
d©a
 +Ö©h.
Àn
 - 
«me
;

172 i‡(
ödex
[
i
].
vÆues
 =
NULL
) {

176 
	`ngx_mem˝y
(
«me
, 
ödex
[
i
].«me.
d©a
, index[i].«me.
Àn
);

178 
∑th
.
Àn
 = (
«me
 + 
ödex
[
i
].«me.À¿- 1Ë-Ö©h.
d©a
;

181 
e
.
ù
 = 
ödex
[
i
].
vÆues
->
ñts
;

182 
e
.
pos
 = 
«me
;

184 *(
uöçå_t
 *Ë
e
.
ù
) {

185 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

186 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

189 i‡(*
«me
 == '/') {

190 
uri
.
Àn
 =Üen - 1;

191 
uri
.
d©a
 = 
«me
;

192  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

195 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

197 *
e
.
pos
 = '\0';

200 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 "›í index \"%V\"", &
∑th
);

203 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

205 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

206 
of
.
dúe˘io
 = 
˛cf
->directio;

207 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

208 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

209 
of
.
ã°_⁄ly
 = 1;

210 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

211 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

213 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

214  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

217 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

218 !
NGX_OK
)

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

221 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

223 i‡(
of
.
îr
 == 0) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 #i‡(
NGX_HAVE_OPENAT
)

228 i‡(
of
.
îr
 =
NGX_EMLINK


229 || 
of
.
îr
 =
NGX_ELOOP
)

231  
NGX_HTTP_FORBIDDEN
;

235 i‡(
of
.
îr
 =
NGX_ENOTDIR


236 || 
of
.
îr
 =
NGX_ENAMETOOLONG


237 || 
of
.
îr
 =
NGX_EACCES
)

239  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
∑th
.
d©a
, 
of
.
îr
);

242 i‡(!
dú_ã°ed
) {

243 
rc
 = 
	`ngx_hâp_ödex_ã°_dú
(
r
, 
˛cf
, 
∑th
.
d©a
, 
«me
 - 1);

245 i‡(
rc
 !
NGX_OK
) {

246  
rc
;

249 
dú_ã°ed
 = 1;

252 i‡(
of
.
îr
 =
NGX_ENOENT
) {

256 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

257 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

259  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

262 
uri
.
Àn
 = 
r
->uri.len +Üen - 1;

264 i‡(!
˛cf
->
Æüs
) {

265 
uri
.
d©a
 = 
∑th
.d©®+ 
roŸ
;

268 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

269 i‡(
uri
.
d©a
 =
NULL
) {

270  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

273 
p
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

274 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 - 1);

277  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

280  
NGX_DECLINED
;

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

286 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
)

288 
u_ch¨
 
c
;

289 
ngx_°r_t
 
dú
;

290 
ngx_›í_fûe_öfo_t
 
of
;

292 
c
 = *
œ°
;

293 i‡(
c
 !'/' || 
∑th
 =
œ°
) {

295 
c
 = *(++
œ°
);

297 *
œ°
 = '\0';

299 
dú
.
Àn
 = 
œ°
 - 
∑th
;

300 
dú
.
d©a
 = 
∑th
;

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

303 "hâ∞ödex check dú: \"%V\"", &
dú
);

305 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

307 
of
.
ã°_dú
 = 1;

308 
of
.
ã°_⁄ly
 = 1;

309 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

310 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

312 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
dú
, &
of
Ë!
NGX_OK
) {

313  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

316 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
dú
, &
of
, 
r
->
poﬁ
)

317 !
NGX_OK
)

319 i‡(
of
.
îr
) {

321 #i‡(
NGX_HAVE_OPENAT
)

322 i‡(
of
.
îr
 =
NGX_EMLINK


323 || 
of
.
îr
 =
NGX_ELOOP
)

325  
NGX_HTTP_FORBIDDEN
;

329 i‡(
of
.
îr
 =
NGX_ENOENT
) {

330 *
œ°
 = 
c
;

331  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
dú
.
d©a
, 
NGX_ENOENT
);

334 i‡(
of
.
îr
 =
NGX_EACCES
) {

336 *
œ°
 = 
c
;

344  
NGX_OK
;

347 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

348 "%†\"%s\" faûed", 
of
.
Áûed
, 
dú
.
d©a
);

351  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

354 *
œ°
 = 
c
;

356 i‡(
of
.
is_dú
) {

357  
NGX_OK
;

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "\"%s\" i†nŸá dúe˘‹y", 
dú
.
d©a
);

363  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

369 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
)

371 i‡(
îr
 =
NGX_EACCES
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

373 "\"%s\" i†f‹biddí", 
fûe
);

375  
NGX_HTTP_FORBIDDEN
;

378 i‡(
˛cf
->
log_nŸ_found
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

380 "\"%s\" i†nŸ found", 
fûe
);

383  
NGX_HTTP_NOT_FOUND
;

384 
	}
}

388 
	$ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

390 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
;

392 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_ödex_loc_c⁄f_t
));

393 i‡(
c⁄f
 =
NULL
) {

394  
NULL
;

397 
c⁄f
->
ödi˚s
 = 
NULL
;

398 
c⁄f
->
max_ödex_Àn
 = 0;

400  
c⁄f
;

401 
	}
}

405 
	$ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

407 
ngx_hâp_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

408 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

410 
ngx_hâp_ödex_t
 *
ödex
;

412 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

413 
c⁄f
->
ödi˚s
 = 
¥ev
->indices;

414 
c⁄f
->
max_ödex_Àn
 = 
¥ev
->max_index_len;

417 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

418 
c⁄f
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ödex_t
));

419 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

420  
NGX_CONF_ERROR
;

423 
ödex
 = 
	`ngx_¨øy_push
(
c⁄f
->
ödi˚s
);

424 i‡(
ödex
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
ödex
->
«me
.
Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

429 
ödex
->
«me
.
d©a
 = (
u_ch¨
 *Ë
NGX_HTTP_DEFAULT_INDEX
;

430 
ödex
->
Àngths
 = 
NULL
;

431 
ödex
->
vÆues
 = 
NULL
;

433 
c⁄f
->
max_ödex_Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

435  
NGX_CONF_OK
;

438  
NGX_CONF_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

445 
ngx_hâp_h™dÀr_±
 *
h
;

446 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

448 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

450 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

451 i‡(
h
 =
NULL
) {

452  
NGX_ERROR
;

455 *
h
 = 
ngx_hâp_ödex_h™dÀr
;

457  
NGX_OK
;

458 
	}
}

464 
	$ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

466 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
 = 
c⁄f
;

468 
ngx_°r_t
 *
vÆue
;

469 
ngx_uöt_t
 
i
, 
n
;

470 
ngx_hâp_ödex_t
 *
ödex
;

471 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

473 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

474 
ûcf
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_ödex_t
));

475 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

476  
NGX_CONF_ERROR
;

480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

482 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

484 i‡(
vÆue
[
i
].
d©a
[0] ='/' && i !
cf
->
¨gs
->
√…s
 - 1) {

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

490 i‡(
vÆue
[
i
].
Àn
 == 0) {

491 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

493 &
vÆue
[1]);

494  
NGX_CONF_ERROR
;

497 
ödex
 = 
	`ngx_¨øy_push
(
ûcf
->
ödi˚s
);

498 i‡(
ödex
 =
NULL
) {

499  
NGX_CONF_ERROR
;

502 
ödex
->
«me
.
Àn
 = 
vÆue
[
i
].len;

503 
ödex
->
«me
.
d©a
 = 
vÆue
[
i
].data;

504 
ödex
->
Àngths
 = 
NULL
;

505 
ödex
->
vÆues
 = 
NULL
;

507 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[
i
]);

509 i‡(
n
 == 0) {

510 i‡(
ûcf
->
max_ödex_Àn
 < 
ödex
->
«me
.
Àn
) {

511 
ûcf
->
max_ödex_Àn
 = 
ödex
->
«me
.
Àn
;

514 i‡(
ödex
->
«me
.
d©a
[0] == '/') {

519 
ödex
->
«me
.
Àn
++;

524 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

526 
sc
.
cf
 = cf;

527 
sc
.
sour˚
 = &
vÆue
[
i
];

528 
sc
.
Àngths
 = &
ödex
->lengths;

529 
sc
.
vÆues
 = &
ödex
->values;

530 
sc
.
v¨übÀs
 = 
n
;

531 
sc
.
com∂ëe_Àngths
 = 1;

532 
sc
.
com∂ëe_vÆues
 = 1;

534 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

535  
NGX_CONF_ERROR
;

539  
NGX_CONF_OK
;

540 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_limit_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mÀn
;

16 
u_sh‹t
 
	mc⁄n
;

17 
u_ch¨
 
	md©a
[1];

18 } 
	tngx_hâp_limô_c⁄n_node_t
;

22 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

23 
ngx_rbåì_node_t
 *
	mnode
;

24 } 
	tngx_hâp_limô_c⁄n_˛ónup_t
;

28 
ngx_rbåì_t
 *
	mrbåì
;

29 
ngx_öt_t
 
	mödex
;

30 
ngx_°r_t
 
	mv¨
;

31 } 
	tngx_hâp_limô_c⁄n_˘x_t
;

35 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

36 
ngx_uöt_t
 
	mc⁄n
;

37 } 
	tngx_hâp_limô_c⁄n_limô_t
;

41 
ngx_¨øy_t
 
	mlimôs
;

42 
ngx_uöt_t
 
	mlog_Àvñ
;

43 
ngx_uöt_t
 
	m°©us_code
;

44 } 
	tngx_hâp_limô_c⁄n_c⁄f_t
;

47 
ngx_rbåì_node_t
 *
ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
,

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
, 
uöt32_t
 
hash
);

49 
ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
);

50 
ngx_ölöe
 
ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
);

52 *
ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

59 *
ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

60 *
c⁄f
);

61 
ngx_öt_t
 
ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
);

64 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_limô_z⁄e
 = {

65 
ngx_c⁄f_dïªˇãd
, "limit_zone", "limit_conn_zone"

69 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_c⁄n_log_Àvñs
[] = {

70 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

71 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

72 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

73 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

74 { 
ngx_nuŒ_°rög
, 0 }

78 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_c⁄n_°©us_bounds
 = {

79 
ngx_c⁄f_check_num_bounds
, 400, 599

83 
ngx_comm™d_t
 
	gngx_hâp_limô_c⁄n_comm™ds
[] = {

85 { 
ngx_°rög
("limit_conn_zone"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

87 
ngx_hâp_limô_c⁄n_z⁄e
,

90 
NULL
 },

92 { 
ngx_°rög
("limit_zone"),

93 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

94 
ngx_hâp_limô_z⁄e
,

97 
NULL
 },

99 { 
ngx_°rög
("limit_conn"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

101 
ngx_hâp_limô_c⁄n
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
NULL
 },

106 { 
ngx_°rög
("limit_conn_log_level"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_íum_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
log_Àvñ
),

111 &
ngx_hâp_limô_c⁄n_log_Àvñs
 },

113 { 
ngx_°rög
("limit_conn_status"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_num_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
°©us_code
),

118 &
ngx_hâp_limô_c⁄n_°©us_bounds
 },

120 
ngx_nuŒ_comm™d


124 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ_˘x
 = {

125 
NULL
,

126 
ngx_hâp_limô_c⁄n_öô
,

128 
NULL
,

129 
NULL
,

131 
NULL
,

132 
NULL
,

134 
ngx_hâp_limô_c⁄n_¸óã_c⁄f
,

135 
ngx_hâp_limô_c⁄n_mîge_c⁄f


139 
ngx_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ
 = {

140 
NGX_MODULE_V1
,

141 &
ngx_hâp_limô_c⁄n_moduÀ_˘x
,

142 
ngx_hâp_limô_c⁄n_comm™ds
,

143 
NGX_HTTP_MODULE
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NGX_MODULE_V1_PADDING


155 
ngx_öt_t


156 
	$ngx_hâp_limô_c⁄n_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

158 
size_t
 
Àn
, 
n
;

159 
uöt32_t
 
hash
;

160 
ngx_uöt_t
 
i
;

161 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

162 
ngx_rbåì_node_t
 *
node
;

163 
ngx_poﬁ_˛ónup_t
 *
˛n
;

164 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

165 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

166 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

167 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
;

168 
ngx_hâp_limô_c⁄n_limô_t
 *
limôs
;

169 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
;

171 i‡(
r
->
maö
->
limô_c⁄n_£t
) {

172  
NGX_DECLINED
;

175 
lccf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_c⁄n_moduÀ
);

176 
limôs
 = 
lccf
->limôs.
ñts
;

178 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

179 
˘x
 = 
limôs
[
i
].
shm_z⁄e
->
d©a
;

181 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

183 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

187 
Àn
 = 
vv
->len;

189 i‡(
Àn
 == 0) {

193 i‡(
Àn
 > 255) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

197 &
˘x
->
v¨
, 
vv
);

201 
r
->
maö
->
limô_c⁄n_£t
 = 1;

203 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

205 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
limôs
[
i
].
shm_z⁄e
->
shm
.
addr
;

207 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

209 
node
 = 
	`ngx_hâp_limô_c⁄n_lookup
(
˘x
->
rbåì
, 
vv
, 
hash
);

211 i‡(
node
 =
NULL
) {

213 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

214 + 
	`off£tof
(
ngx_hâp_limô_c⁄n_node_t
, 
d©a
)

215 + 
Àn
;

217 
node
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
n
);

219 i‡(
node
 =
NULL
) {

220 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

221 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

222  
lccf
->
°©us_code
;

225 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

227 
node
->
key
 = 
hash
;

228 
lc
->
Àn
 = (
u_ch¨
)Üen;

229 
lc
->
c⁄n
 = 1;

230 
	`ngx_mem˝y
(
lc
->
d©a
, 
vv
->d©a, 
Àn
);

232 
	`ngx_rbåì_ö£π
(
˘x
->
rbåì
, 
node
);

236 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

238 i‡((
ngx_uöt_t
Ë
lc
->
c⁄n
 >
limôs
[
i
].conn) {

240 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

242 
	`ngx_log_îr‹
(
lccf
->
log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

244 &
limôs
[
i
].
shm_z⁄e
->
shm
.
«me
);

246 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

247  
lccf
->
°©us_code
;

250 
lc
->
c⁄n
++;

253 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

254 "limô c⁄n: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

256 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

258 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
,

259 (
ngx_hâp_limô_c⁄n_˛ónup_t
));

260 i‡(
˛n
 =
NULL
) {

261  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

264 
˛n
->
h™dÀr
 = 
ngx_hâp_limô_c⁄n_˛ónup
;

265 
lc˛n
 = 
˛n
->
d©a
;

267 
lc˛n
->
shm_z⁄e
 = 
limôs
[
i
].shm_zone;

268 
lc˛n
->
node
 =Çode;

271  
NGX_DECLINED
;

272 
	}
}

276 
	$ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

277 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

279 
ngx_rbåì_node_t
 **
p
;

280 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
, *
l˙t
;

284 i‡(
node
->
key
 < 
ãmp
->key) {

286 
p
 = &
ãmp
->
À·
;

288 } i‡(
node
->
key
 > 
ãmp
->key) {

290 
p
 = &
ãmp
->
right
;

294 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

295 
l˙t
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
ãmp
->
cﬁ‹
;

297 
p
 = (
	`ngx_memn2cmp
(
l˙
->
d©a
, 
l˙t
->d©a,Ü˙->
Àn
,Ücnt->len) < 0)

298 ? &
ãmp
->
À·
 : &ãmp->
right
;

301 i‡(*
p
 =
£¡öñ
) {

305 
ãmp
 = *
p
;

308 *
p
 = 
node
;

309 
node
->
∑ª¡
 = 
ãmp
;

310 
node
->
À·
 = 
£¡öñ
;

311 
node
->
right
 = 
£¡öñ
;

312 
	`ngx_rbt_ªd
(
node
);

313 
	}
}

316 
ngx_rbåì_node_t
 *

317 
	$ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
,

318 
uöt32_t
 
hash
)

320 
ngx_öt_t
 
rc
;

321 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

322 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
;

324 
node
 = 
rbåì
->
roŸ
;

325 
£¡öñ
 = 
rbåì
->sentinel;

327 
node
 !
£¡öñ
) {

329 i‡(
hash
 < 
node
->
key
) {

330 
node
 =Çode->
À·
;

334 i‡(
hash
 > 
node
->
key
) {

335 
node
 =Çode->
right
;

341 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

343 
rc
 = 
	`ngx_memn2cmp
(
vv
->
d©a
, 
l˙
->data,

344 (
size_t
Ë
vv
->
Àn
, (size_tË
l˙
->len);

345 i‡(
rc
 == 0) {

346  
node
;

349 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

352  
NULL
;

353 
	}
}

357 
	$ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
)

359 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
 = 
d©a
;

361 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

362 
ngx_rbåì_node_t
 *
node
;

363 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

364 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

366 
˘x
 = 
lc˛n
->
shm_z⁄e
->
d©a
;

367 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lc˛n
->
shm_z⁄e
->
shm
.
addr
;

368 
node
 = 
lc˛n
->node;

369 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

371 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

373 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
lc˛n
->
shm_z⁄e
->
shm
.
log
, 0,

374 "limô c⁄¿˛ónup: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

376 
lc
->
c⁄n
--;

378 i‡(
lc
->
c⁄n
 == 0) {

379 
	`ngx_rbåì_dñëe
(
˘x
->
rbåì
, 
node
);

380 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
node
);

383 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

384 
	}
}

387 
ngx_ölöe
 

388 
	$ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
)

390 
ngx_poﬁ_˛ónup_t
 *
˛n
;

392 
˛n
 = 
poﬁ
->
˛ónup
;

394 
˛n
 && c ->
h™dÀr
 =
ngx_hâp_limô_c⁄n_˛ónup
) {

395 
	`ngx_hâp_limô_c⁄n_˛ónup
(
˛n
->
d©a
);

396 
˛n
 = c ->
√xt
;

399 
poﬁ
->
˛ónup
 = 
˛n
;

400 
	}
}

403 
ngx_öt_t


404 
	$ngx_hâp_limô_c⁄n_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

406 
ngx_hâp_limô_c⁄n_˘x_t
 *
o˘x
 = 
d©a
;

408 
size_t
 
Àn
;

409 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

410 
ngx_rbåì_node_t
 *
£¡öñ
;

411 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

413 
˘x
 = 
shm_z⁄e
->
d©a
;

415 i‡(
o˘x
) {

416 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

417 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

420 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

421  
NGX_ERROR
;

424 
˘x
->
rbåì
 = 
o˘x
->rbtree;

426  
NGX_OK
;

429 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

431 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

432 
˘x
->
rbåì
 = 
shpoﬁ
->
d©a
;

434  
NGX_OK
;

437 
˘x
->
rbåì
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_t
));

438 i‡(
˘x
->
rbåì
 =
NULL
) {

439  
NGX_ERROR
;

442 
shpoﬁ
->
d©a
 = 
˘x
->
rbåì
;

444 
£¡öñ
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_node_t
));

445 i‡(
£¡öñ
 =
NULL
) {

446  
NGX_ERROR
;

449 
	`ngx_rbåì_öô
(
˘x
->
rbåì
, 
£¡öñ
,

450 
ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
);

452 
Àn
 = (" i¿limô_c⁄n_z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

454 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

455 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

456  
NGX_ERROR
;

459 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " inÜimit_conn_zone \"%V\"%Z",

460 &
shm_z⁄e
->
shm
.
«me
);

462  
NGX_OK
;

463 
	}
}

467 
	$ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

469 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
;

471 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_c⁄f_t
));

472 i‡(
c⁄f
 =
NULL
) {

473  
NULL
;

482 
c⁄f
->
log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

483 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

485  
c⁄f
;

486 
	}
}

490 
	$ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

492 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

493 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
 = 
chûd
;

495 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

496 
c⁄f
->
limôs
 = 
¥ev
->limits;

499 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
log_Àvñ
, 
¥ev
->log_Àvñ, 
NGX_LOG_ERR
);

500 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

501 
NGX_HTTP_SERVICE_UNAVAILABLE
);

503  
NGX_CONF_OK
;

504 
	}
}

508 
	$ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

510 
u_ch¨
 *
p
;

511 
ssize_t
 
size
;

512 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

513 
ngx_uöt_t
 
i
;

514 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

515 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

517 
vÆue
 = 
cf
->
¨gs
->
ñts
;

519 
˘x
 = 
NULL
;

520 
size
 = 0;

521 
«me
.
Àn
 = 0;

523 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

525 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

527 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

529 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

531 i‡(
p
 =
NULL
) {

532 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

533 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

534  
NGX_CONF_ERROR
;

537 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

539 
s
.
d©a
 = 
p
 + 1;

540 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

542 
size
 = 
	`ngx_∑r£_size
(&
s
);

544 i‡(
size
 =
NGX_ERROR
) {

545 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

546 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

547  
NGX_CONF_ERROR
;

550 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

551 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

552 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

553  
NGX_CONF_ERROR
;

559 i‡(
vÆue
[
i
].
d©a
[0] == '$') {

561 
vÆue
[
i
].
Àn
--;

562 
vÆue
[
i
].
d©a
++;

564 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

565 i‡(
˘x
 =
NULL
) {

566  
NGX_CONF_ERROR
;

569 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[
i
]);

570 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

571  
NGX_CONF_ERROR
;

574 
˘x
->
v¨
 = 
vÆue
[
i
];

579 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

580 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

581  
NGX_CONF_ERROR
;

584 i‡(
«me
.
Àn
 == 0) {

585 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

587 &
cmd
->
«me
);

588  
NGX_CONF_ERROR
;

591 i‡(
˘x
 =
NULL
) {

592 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

594 &
cmd
->
«me
, &name);

595  
NGX_CONF_ERROR
;

598 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

599 &
ngx_hâp_limô_c⁄n_moduÀ
);

600 i‡(
shm_z⁄e
 =
NULL
) {

601  
NGX_CONF_ERROR
;

604 i‡(
shm_z⁄e
->
d©a
) {

605 
˘x
 = 
shm_z⁄e
->
d©a
;

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

609 &
cmd
->
«me
, &«me, &
˘x
->
v¨
);

610  
NGX_CONF_ERROR
;

613 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

614 
shm_z⁄e
->
d©a
 = 
˘x
;

616  
NGX_CONF_OK
;

617 
	}
}

621 
	$ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

623 
ssize_t
 
n
;

624 
ngx_°r_t
 *
vÆue
;

625 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

626 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

628 
	`ngx_c⁄f_dïªˇãd
(
cf
, &
ngx_c⁄f_dïªˇãd_limô_z⁄e
, 
NULL
);

630 
vÆue
 = 
cf
->
¨gs
->
ñts
;

632 i‡(
vÆue
[2].
d©a
[0] != '$') {

633 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

634 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[2]);

635  
NGX_CONF_ERROR
;

638 
vÆue
[2].
Àn
--;

639 
vÆue
[2].
d©a
++;

641 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

642 i‡(
˘x
 =
NULL
) {

643  
NGX_CONF_ERROR
;

646 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[2]);

647 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

648  
NGX_CONF_ERROR
;

651 
˘x
->
v¨
 = 
vÆue
[2];

653 
n
 = 
	`ngx_∑r£_size
(&
vÆue
[3]);

655 i‡(
n
 =
NGX_ERROR
) {

656 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

657 "övÆid sizêo‡limô_z⁄ê\"%V\"", &
vÆue
[3]);

658  
NGX_CONF_ERROR
;

661 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

662 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

663 "limô_z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[1]);

664  
NGX_CONF_ERROR
;

668 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 
n
,

669 &
ngx_hâp_limô_c⁄n_moduÀ
);

670 i‡(
shm_z⁄e
 =
NULL
) {

671  
NGX_CONF_ERROR
;

674 i‡(
shm_z⁄e
->
d©a
) {

675 
˘x
 = 
shm_z⁄e
->
d©a
;

677 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

679 &
vÆue
[1], &
˘x
->
v¨
);

680  
NGX_CONF_ERROR
;

683 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

684 
shm_z⁄e
->
d©a
 = 
˘x
;

686  
NGX_CONF_OK
;

687 
	}
}

691 
	$ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

693 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

694 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
 = 
c⁄f
;

695 
ngx_hâp_limô_c⁄n_limô_t
 *
limô
, *
limôs
;

697 
ngx_°r_t
 *
vÆue
;

698 
ngx_öt_t
 
n
;

699 
ngx_uöt_t
 
i
;

701 
vÆue
 = 
cf
->
¨gs
->
ñts
;

703 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

704 &
ngx_hâp_limô_c⁄n_moduÀ
);

705 i‡(
shm_z⁄e
 =
NULL
) {

706  
NGX_CONF_ERROR
;

709 
limôs
 = 
lccf
->limôs.
ñts
;

711 i‡(
limôs
 =
NULL
) {

712 i‡(
	`ngx_¨øy_öô
(&
lccf
->
limôs
, 
cf
->
poﬁ
, 1,

713 (
ngx_hâp_limô_c⁄n_limô_t
))

714 !
NGX_OK
)

716  
NGX_CONF_ERROR
;

720 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

721 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

726 
n
 = 
	`ngx_©oi
(
vÆue
[2].
d©a
, vÆue[2].
Àn
);

727 i‡(
n
 <= 0) {

728 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

729 "övÆidÇumbî o‡c⁄√˘i⁄†\"%V\"", &
vÆue
[2]);

730  
NGX_CONF_ERROR
;

733 i‡(
n
 > 65535) {

734 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

736  
NGX_CONF_ERROR
;

739 
limô
 = 
	`ngx_¨øy_push
(&
lccf
->
limôs
);

740 i‡(
limô
 =
NULL
) {

741  
NGX_CONF_ERROR
;

744 
limô
->
c⁄n
 = 
n
;

745 
limô
->
shm_z⁄e
 = shm_zone;

747  
NGX_CONF_OK
;

748 
	}
}

751 
ngx_öt_t


752 
	$ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
)

754 
ngx_hâp_h™dÀr_±
 *
h
;

755 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

757 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

759 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

760 i‡(
h
 =
NULL
) {

761  
NGX_ERROR
;

764 *
h
 = 
ngx_hâp_limô_c⁄n_h™dÀr
;

766  
NGX_OK
;

767 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_limit_req_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mdummy
;

16 
u_sh‹t
 
	mÀn
;

17 
ngx_queue_t
 
	mqueue
;

18 
ngx_m£c_t
 
	mœ°
;

20 
ngx_uöt_t
 
	mex˚ss
;

21 
ngx_uöt_t
 
	mcou¡
;

22 
u_ch¨
 
	md©a
[1];

23 } 
	tngx_hâp_limô_ªq_node_t
;

27 
ngx_rbåì_t
 
	mrbåì
;

28 
ngx_rbåì_node_t
 
	m£¡öñ
;

29 
ngx_queue_t
 
	mqueue
;

30 } 
	tngx_hâp_limô_ªq_sh˘x_t
;

34 
ngx_hâp_limô_ªq_sh˘x_t
 *
	msh
;

35 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

37 
ngx_uöt_t
 
	møã
;

38 
ngx_öt_t
 
	mödex
;

39 
ngx_°r_t
 
	mv¨
;

40 
ngx_hâp_limô_ªq_node_t
 *
	mnode
;

41 } 
	tngx_hâp_limô_ªq_˘x_t
;

45 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

47 
ngx_uöt_t
 
	mbur°
;

48 
ngx_uöt_t
 
	mnodñay
;

49 } 
	tngx_hâp_limô_ªq_limô_t
;

53 
ngx_¨øy_t
 
	mlimôs
;

54 
ngx_uöt_t
 
	mlimô_log_Àvñ
;

55 
ngx_uöt_t
 
	mdñay_log_Àvñ
;

56 
ngx_uöt_t
 
	m°©us_code
;

57 } 
	tngx_hâp_limô_ªq_c⁄f_t
;

60 
ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
);

61 
ngx_öt_t
 
ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
,

62 
ngx_uöt_t
 
hash
, 
u_ch¨
 *
d©a
, 
size_t
 
Àn
,Çgx_uöt_à*
ï
,

63 
ngx_uöt_t
 
accou¡
);

64 
ngx_m£c_t
 
ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
,

65 
ngx_uöt_t
 
n
,Çgx_uöt_à*
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
);

66 
ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
,

67 
ngx_uöt_t
 
n
);

69 *
ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

70 *
ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

71 *
chûd
);

72 *
ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 
ngx_öt_t
 
ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
);

79 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_ªq_log_Àvñs
[] = {

80 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

81 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

82 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

83 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

84 { 
ngx_nuŒ_°rög
, 0 }

88 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_ªq_°©us_bounds
 = {

89 
ngx_c⁄f_check_num_bounds
, 400, 599

93 
ngx_comm™d_t
 
	gngx_hâp_limô_ªq_comm™ds
[] = {

95 { 
ngx_°rög
("limit_req_zone"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

97 
ngx_hâp_limô_ªq_z⁄e
,

100 
NULL
 },

102 { 
ngx_°rög
("limit_req"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

104 
ngx_hâp_limô_ªq
,

105 
NGX_HTTP_LOC_CONF_OFFSET
,

107 
NULL
 },

109 { 
ngx_°rög
("limit_req_log_level"),

110 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

111 
ngx_c⁄f_£t_íum_¶Ÿ
,

112 
NGX_HTTP_LOC_CONF_OFFSET
,

113 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
limô_log_Àvñ
),

114 &
ngx_hâp_limô_ªq_log_Àvñs
 },

116 { 
ngx_°rög
("limit_req_status"),

117 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

118 
ngx_c⁄f_£t_num_¶Ÿ
,

119 
NGX_HTTP_LOC_CONF_OFFSET
,

120 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
°©us_code
),

121 &
ngx_hâp_limô_ªq_°©us_bounds
 },

123 
ngx_nuŒ_comm™d


127 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ_˘x
 = {

128 
NULL
,

129 
ngx_hâp_limô_ªq_öô
,

131 
NULL
,

132 
NULL
,

134 
NULL
,

135 
NULL
,

137 
ngx_hâp_limô_ªq_¸óã_c⁄f
,

138 
ngx_hâp_limô_ªq_mîge_c⁄f


142 
ngx_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ
 = {

143 
NGX_MODULE_V1
,

144 &
ngx_hâp_limô_ªq_moduÀ_˘x
,

145 
ngx_hâp_limô_ªq_comm™ds
,

146 
NGX_HTTP_MODULE
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NULL
,

154 
NGX_MODULE_V1_PADDING


158 
ngx_öt_t


159 
	$ngx_hâp_limô_ªq_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

161 
size_t
 
Àn
;

162 
uöt32_t
 
hash
;

163 
ngx_öt_t
 
rc
;

164 
ngx_uöt_t
 
n
, 
ex˚ss
;

165 
ngx_m£c_t
 
dñay
;

166 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

167 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

168 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
;

169 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

171 i‡(
r
->
maö
->
limô_ªq_£t
) {

172  
NGX_DECLINED
;

175 
Ãcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_ªq_moduÀ
);

176 
limôs
 = 
Ãcf
->limôs.
ñts
;

178 
ex˚ss
 = 0;

180 
rc
 = 
NGX_DECLINED
;

182 #i‡(
NGX_SUPPRESS_WARN
)

183 
limô
 = 
NULL
;

186 
n
 = 0;Ç < 
Ãcf
->
limôs
.
√…s
;Ç++) {

188 
limô
 = &
limôs
[
n
];

190 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

192 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

194 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

198 
Àn
 = 
vv
->len;

200 i‡(
Àn
 == 0) {

204 i‡(
Àn
 > 65535) {

205 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

208 &
˘x
->
v¨
, 
vv
);

212 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

214 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

216 
rc
 = 
	`ngx_hâp_limô_ªq_lookup
(
limô
, 
hash
, 
vv
->
d©a
, 
Àn
, &
ex˚ss
,

217 (
n
 =
Ãcf
->
limôs
.
√…s
 - 1));

219 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

221 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

223 
n
, 
rc
, 
ex˚ss
 / 1000,Éxcess % 1000);

225 i‡(
rc
 !
NGX_AGAIN
) {

230 i‡(
rc
 =
NGX_DECLINED
) {

231  
NGX_DECLINED
;

234 
r
->
maö
->
limô_ªq_£t
 = 1;

236 i‡(
rc
 =
NGX_BUSY
 ||Ñ¯=
NGX_ERROR
) {

238 i‡(
rc
 =
NGX_BUSY
) {

239 
	`ngx_log_îr‹
(
Ãcf
->
limô_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241 
ex˚ss
 / 1000,Éxcess % 1000,

242 &
limô
->
shm_z⁄e
->
shm
.
«me
);

245 
n
--) {

246 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

248 i‡(
˘x
->
node
 =
NULL
) {

252 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

254 
˘x
->
node
->
cou¡
--;

256 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

258 
˘x
->
node
 = 
NULL
;

261  
Ãcf
->
°©us_code
;

266 i‡(
rc
 =
NGX_AGAIN
) {

267 
ex˚ss
 = 0;

270 
dñay
 = 
	`ngx_hâp_limô_ªq_accou¡
(
limôs
, 
n
, &
ex˚ss
, &
limô
);

272 i‡(!
dñay
) {

273  
NGX_DECLINED
;

276 
	`ngx_log_îr‹
(
Ãcf
->
dñay_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
ex˚ss
 / 1000,Éx˚s†% 1000, &
limô
->
shm_z⁄e
->
shm
.
«me
);

280 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

281  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

284 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

285 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_limô_ªq_dñay
;

286 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
wrôe
, 
dñay
);

288  
NGX_AGAIN
;

289 
	}
}

293 
	$ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
)

295 
ngx_evít_t
 *
wev
;

297 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

300 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

302 i‡(!
wev
->
timedout
) {

304 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

305 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

311 
wev
->
timedout
 = 0;

313 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

314 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

318 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

319 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

321 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

322 
	}
}

326 
	$ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

327 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

329 
ngx_rbåì_node_t
 **
p
;

330 
ngx_hâp_limô_ªq_node_t
 *
Ãn
, *
Ã¡
;

334 i‡(
node
->
key
 < 
ãmp
->key) {

336 
p
 = &
ãmp
->
À·
;

338 } i‡(
node
->
key
 > 
ãmp
->key) {

340 
p
 = &
ãmp
->
right
;

344 
Ãn
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

345 
Ã¡
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
ãmp
->
cﬁ‹
;

347 
p
 = (
	`ngx_memn2cmp
(
Ãn
->
d©a
, 
Ã¡
->d©a,Ü∫->
Àn
,Ürnt->len) < 0)

348 ? &
ãmp
->
À·
 : &ãmp->
right
;

351 i‡(*
p
 =
£¡öñ
) {

355 
ãmp
 = *
p
;

358 *
p
 = 
node
;

359 
node
->
∑ª¡
 = 
ãmp
;

360 
node
->
À·
 = 
£¡öñ
;

361 
node
->
right
 = 
£¡öñ
;

362 
	`ngx_rbt_ªd
(
node
);

363 
	}
}

366 
ngx_öt_t


367 
	$ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
, 
ngx_uöt_t
 
hash
,

368 
u_ch¨
 *
d©a
, 
size_t
 
Àn
, 
ngx_uöt_t
 *
ï
,Çgx_uöt_à
accou¡
)

370 
size_t
 
size
;

371 
ngx_öt_t
 
rc
, 
ex˚ss
;

372 
ngx_time_t
 *
ç
;

373 
ngx_m£c_t
 
now
;

374 
ngx_m£c_öt_t
 
ms
;

375 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

376 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

377 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

379 
ç
 = 
	`ngx_timeofday
();

380 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

382 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

384 
node
 = 
˘x
->
sh
->
rbåì
.
roŸ
;

385 
£¡öñ
 = 
˘x
->
sh
->
rbåì
.sentinel;

387 
node
 !
£¡öñ
) {

389 i‡(
hash
 < 
node
->
key
) {

390 
node
 =Çode->
À·
;

394 i‡(
hash
 > 
node
->
key
) {

395 
node
 =Çode->
right
;

401 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

403 
rc
 = 
	`ngx_memn2cmp
(
d©a
, 
Ã
->d©a, 
Àn
, (
size_t
)Ür->len);

405 i‡(
rc
 == 0) {

406 
	`ngx_queue_ªmove
(&
Ã
->
queue
);

407 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

409 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

411 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

413 i‡(
ex˚ss
 < 0) {

414 
ex˚ss
 = 0;

417 *
ï
 = 
ex˚ss
;

419 i‡((
ngx_uöt_t
Ë
ex˚ss
 > 
limô
->
bur°
) {

420  
NGX_BUSY
;

423 i‡(
accou¡
) {

424 
Ã
->
ex˚ss
 =Éxcess;

425 
Ã
->
œ°
 = 
now
;

426  
NGX_OK
;

429 
Ã
->
cou¡
++;

431 
˘x
->
node
 = 
Ã
;

433  
NGX_AGAIN
;

436 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

439 *
ï
 = 0;

441 
size
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

442 + 
	`off£tof
(
ngx_hâp_limô_ªq_node_t
, 
d©a
)

443 + 
Àn
;

445 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 1);

447 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

449 i‡(
node
 =
NULL
) {

450 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 0);

452 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

453 i‡(
node
 =
NULL
) {

454 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

455 "couldÇŸáŒoˇãÇode%s", 
˘x
->
shpoﬁ
->
log_˘x
);

456  
NGX_ERROR
;

460 
node
->
key
 = 
hash
;

462 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

464 
Ã
->
Àn
 = (
u_ch¨
)Üen;

465 
Ã
->
ex˚ss
 = 0;

467 
	`ngx_mem˝y
(
Ã
->
d©a
, d©a, 
Àn
);

469 
	`ngx_rbåì_ö£π
(&
˘x
->
sh
->
rbåì
, 
node
);

471 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

473 i‡(
accou¡
) {

474 
Ã
->
œ°
 = 
now
;

475 
Ã
->
cou¡
 = 0;

476  
NGX_OK
;

479 
Ã
->
œ°
 = 0;

480 
Ã
->
cou¡
 = 1;

482 
˘x
->
node
 = 
Ã
;

484  
NGX_AGAIN
;

485 
	}
}

488 
ngx_m£c_t


489 
	$ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
, 
ngx_uöt_t
 
n
,

490 
ngx_uöt_t
 *
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
)

492 
ngx_öt_t
 
ex˚ss
;

493 
ngx_time_t
 *
ç
;

494 
ngx_m£c_t
 
now
, 
dñay
, 
max_dñay
;

495 
ngx_m£c_öt_t
 
ms
;

496 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

497 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

499 
ex˚ss
 = *
ï
;

501 i‡(
ex˚ss
 =0 || (*
limô
)->
nodñay
) {

502 
max_dñay
 = 0;

505 
˘x
 = (*
limô
)->
shm_z⁄e
->
d©a
;

506 
max_dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

509 
n
--) {

510 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

511 
Ã
 = 
˘x
->
node
;

513 i‡(
Ã
 =
NULL
) {

517 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

519 
ç
 = 
	`ngx_timeofday
();

521 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

522 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

524 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

526 i‡(
ex˚ss
 < 0) {

527 
ex˚ss
 = 0;

530 
Ã
->
œ°
 = 
now
;

531 
Ã
->
ex˚ss
 =Éxcess;

532 
Ã
->
cou¡
--;

534 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

536 
˘x
->
node
 = 
NULL
;

538 i‡(
limôs
[
n
].
nodñay
) {

542 
dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

544 i‡(
dñay
 > 
max_dñay
) {

545 
max_dñay
 = 
dñay
;

546 *
ï
 = 
ex˚ss
;

547 *
limô
 = &
limôs
[
n
];

551  
max_dñay
;

552 
	}
}

556 
	$ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
, 
ngx_uöt_t
 
n
)

558 
ngx_öt_t
 
ex˚ss
;

559 
ngx_time_t
 *
ç
;

560 
ngx_m£c_t
 
now
;

561 
ngx_queue_t
 *
q
;

562 
ngx_m£c_öt_t
 
ms
;

563 
ngx_rbåì_node_t
 *
node
;

564 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

566 
ç
 = 
	`ngx_timeofday
();

568 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

576 
n
 < 3) {

578 i‡(
	`ngx_queue_em±y
(&
˘x
->
sh
->
queue
)) {

582 
q
 = 
	`ngx_queue_œ°
(&
˘x
->
sh
->
queue
);

584 
Ã
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_limô_ªq_node_t
, 
queue
);

586 i‡(
Ã
->
cou¡
) {

596 i‡(
n
++ != 0) {

598 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

599 
ms
 = 
	`ngx_abs
(ms);

601 i‡(
ms
 < 60000) {

605 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000;

607 i‡(
ex˚ss
 > 0) {

612 
	`ngx_queue_ªmove
(
q
);

614 
node
 = (
ngx_rbåì_node_t
 *)

615 ((
u_ch¨
 *Ë
Ã
 - 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
));

617 
	`ngx_rbåì_dñëe
(&
˘x
->
sh
->
rbåì
, 
node
);

619 
	`ngx_¶ab_‰ì_locked
(
˘x
->
shpoﬁ
, 
node
);

621 
	}
}

624 
ngx_öt_t


625 
	$ngx_hâp_limô_ªq_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

627 
ngx_hâp_limô_ªq_˘x_t
 *
o˘x
 = 
d©a
;

629 
size_t
 
Àn
;

630 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

632 
˘x
 = 
shm_z⁄e
->
d©a
;

634 i‡(
o˘x
) {

635 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

636 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

639 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

640  
NGX_ERROR
;

643 
˘x
->
sh
 = 
o˘x
->sh;

644 
˘x
->
shpoﬁ
 = 
o˘x
->shpool;

646  
NGX_OK
;

649 
˘x
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

651 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

652 
˘x
->
sh
 = ctx->
shpoﬁ
->
d©a
;

654  
NGX_OK
;

657 
˘x
->
sh
 = 
	`ngx_¶ab_Æloc
(˘x->
shpoﬁ
, (
ngx_hâp_limô_ªq_sh˘x_t
));

658 i‡(
˘x
->
sh
 =
NULL
) {

659  
NGX_ERROR
;

662 
˘x
->
shpoﬁ
->
d©a
 = ctx->
sh
;

664 
	`ngx_rbåì_öô
(&
˘x
->
sh
->
rbåì
, &˘x->sh->
£¡öñ
,

665 
ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
);

667 
	`ngx_queue_öô
(&
˘x
->
sh
->
queue
);

669 
Àn
 = (" i¿limô_ªq z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

671 
˘x
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(˘x->shpoﬁ, 
Àn
);

672 i‡(
˘x
->
shpoﬁ
->
log_˘x
 =
NULL
) {

673  
NGX_ERROR
;

676 
	`ngx_•rötf
(
˘x
->
shpoﬁ
->
log_˘x
, " inÜimit_req zone \"%V\"%Z",

677 &
shm_z⁄e
->
shm
.
«me
);

679 
˘x
->
shpoﬁ
->
log_nomem
 = 0;

681  
NGX_OK
;

682 
	}
}

686 
	$ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

688 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
;

690 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_c⁄f_t
));

691 i‡(
c⁄f
 =
NULL
) {

692  
NULL
;

701 
c⁄f
->
limô_log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

702 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

704  
c⁄f
;

705 
	}
}

709 
	$ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

711 
ngx_hâp_limô_ªq_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

712 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
 = 
chûd
;

714 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

715 
c⁄f
->
limôs
 = 
¥ev
->limits;

718 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
limô_log_Àvñ
, 
¥ev
->limit_log_level,

719 
NGX_LOG_ERR
);

721 
c⁄f
->
dñay_log_Àvñ
 = (c⁄f->
limô_log_Àvñ
 =
NGX_LOG_INFO
) ?

722 
NGX_LOG_INFO
 : 
c⁄f
->
limô_log_Àvñ
 + 1;

724 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

725 
NGX_HTTP_SERVICE_UNAVAILABLE
);

727  
NGX_CONF_OK
;

728 
	}
}

732 
	$ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

734 
u_ch¨
 *
p
;

735 
size_t
 
Àn
;

736 
ssize_t
 
size
;

737 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

738 
ngx_öt_t
 
øã
, 
sˇÀ
;

739 
ngx_uöt_t
 
i
;

740 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

741 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

743 
vÆue
 = 
cf
->
¨gs
->
ñts
;

745 
˘x
 = 
NULL
;

746 
size
 = 0;

747 
øã
 = 1;

748 
sˇÀ
 = 1;

749 
«me
.
Àn
 = 0;

751 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

753 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

755 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

757 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

759 i‡(
p
 =
NULL
) {

760 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

761 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

762  
NGX_CONF_ERROR
;

765 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

767 
s
.
d©a
 = 
p
 + 1;

768 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

770 
size
 = 
	`ngx_∑r£_size
(&
s
);

772 i‡(
size
 =
NGX_ERROR
) {

773 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

774 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

775  
NGX_CONF_ERROR
;

778 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

779 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

780 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

781  
NGX_CONF_ERROR
;

787 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rate=", 5) == 0) {

789 
Àn
 = 
vÆue
[
i
].len;

790 
p
 = 
vÆue
[
i
].
d©a
 + 
Àn
 - 3;

792 i‡(
	`ngx_°∫cmp
(
p
, "r/s", 3) == 0) {

793 
sˇÀ
 = 1;

794 
Àn
 -= 3;

796 } i‡(
	`ngx_°∫cmp
(
p
, "r/m", 3) == 0) {

797 
sˇÀ
 = 60;

798 
Àn
 -= 3;

801 
øã
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 5, 
Àn
 - 5);

802 i‡(
øã
 <= 0) {

803 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

804 "övÆidÑ©ê\"%V\"", &
vÆue
[
i
]);

805  
NGX_CONF_ERROR
;

811 i‡(
vÆue
[
i
].
d©a
[0] == '$') {

813 
vÆue
[
i
].
Àn
--;

814 
vÆue
[
i
].
d©a
++;

816 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_˘x_t
));

817 i‡(
˘x
 =
NULL
) {

818  
NGX_CONF_ERROR
;

821 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[
i
]);

822 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

823  
NGX_CONF_ERROR
;

826 
˘x
->
v¨
 = 
vÆue
[
i
];

831 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

832 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

833  
NGX_CONF_ERROR
;

836 i‡(
«me
.
Àn
 == 0) {

837 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

839 &
cmd
->
«me
);

840  
NGX_CONF_ERROR
;

843 i‡(
˘x
 =
NULL
) {

844 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

846 &
cmd
->
«me
, &name);

847  
NGX_CONF_ERROR
;

850 
˘x
->
øã
 =Ñ©ê* 1000 / 
sˇÀ
;

852 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

853 &
ngx_hâp_limô_ªq_moduÀ
);

854 i‡(
shm_z⁄e
 =
NULL
) {

855  
NGX_CONF_ERROR
;

858 i‡(
shm_z⁄e
->
d©a
) {

859 
˘x
 = 
shm_z⁄e
->
d©a
;

861 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

863 &
cmd
->
«me
, &«me, &
˘x
->
v¨
);

864  
NGX_CONF_ERROR
;

867 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_ªq_öô_z⁄e
;

868 
shm_z⁄e
->
d©a
 = 
˘x
;

870  
NGX_CONF_OK
;

871 
	}
}

875 
	$ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

877 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
 = 
c⁄f
;

879 
ngx_öt_t
 
bur°
;

880 
ngx_°r_t
 *
vÆue
, 
s
;

881 
ngx_uöt_t
 
i
, 
nodñay
;

882 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

883 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

885 
vÆue
 = 
cf
->
¨gs
->
ñts
;

887 
shm_z⁄e
 = 
NULL
;

888 
bur°
 = 0;

889 
nodñay
 = 0;

891 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

893 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

895 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

896 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

898 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
s
, 0,

899 &
ngx_hâp_limô_ªq_moduÀ
);

900 i‡(
shm_z⁄e
 =
NULL
) {

901  
NGX_CONF_ERROR
;

907 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "burst=", 6) == 0) {

909 
bur°
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 6, vÆue[i].
Àn
 - 6);

910 i‡(
bur°
 <= 0) {

911 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

912 "övÆid bur°Ñ©ê\"%V\"", &
vÆue
[
i
]);

913  
NGX_CONF_ERROR
;

919 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "nodelay") == 0) {

920 
nodñay
 = 1;

924 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

925 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

926  
NGX_CONF_ERROR
;

929 i‡(
shm_z⁄e
 =
NULL
) {

930 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

932 &
cmd
->
«me
);

933  
NGX_CONF_ERROR
;

936 i‡(
shm_z⁄e
->
d©a
 =
NULL
) {

937 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

939 &
shm_z⁄e
->
shm
.
«me
);

940  
NGX_CONF_ERROR
;

943 
limôs
 = 
Ãcf
->limôs.
ñts
;

945 i‡(
limôs
 =
NULL
) {

946 i‡(
	`ngx_¨øy_öô
(&
Ãcf
->
limôs
, 
cf
->
poﬁ
, 1,

947 (
ngx_hâp_limô_ªq_limô_t
))

948 !
NGX_OK
)

950  
NGX_CONF_ERROR
;

954 
i
 = 0; i < 
Ãcf
->
limôs
.
√…s
; i++) {

955 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

960 
limô
 = 
	`ngx_¨øy_push
(&
Ãcf
->
limôs
);

961 i‡(
limô
 =
NULL
) {

962  
NGX_CONF_ERROR
;

965 
limô
->
shm_z⁄e
 = shm_zone;

966 
limô
->
bur°
 = burst * 1000;

967 
limô
->
nodñay
 =Çodelay;

969  
NGX_CONF_OK
;

970 
	}
}

973 
ngx_öt_t


974 
	$ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
)

976 
ngx_hâp_h™dÀr_±
 *
h
;

977 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

979 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

981 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

982 i‡(
h
 =
NULL
) {

983  
NGX_ERROR
;

986 *
h
 = 
ngx_hâp_limô_ªq_h™dÀr
;

988  
NGX_OK
;

989 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_log_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 #i‡(
NGX_ZLIB
)

13 
	~<zlib.h
>

17 
ngx_hâp_log_›_s
 
	tngx_hâp_log_›_t
;

19 
	gu_ch¨
 *(*
	tngx_hâp_log_›_run_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
, 
	tu_ch¨
 *
	tbuf
,

20 
	tngx_hâp_log_›_t
 *
	t›
);

22 
	$size_t
 (*
	tngx_hâp_log_›_gëÀn_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tuöçå_t
 
	td©a
);

26 
	sngx_hâp_log_›_s
 {

27 
size_t
 
Àn
;

28 
ngx_hâp_log_›_gëÀn_±
 
gëÀn
;

29 
ngx_hâp_log_›_run_±
 
run
;

30 
uöçå_t
 
d©a
;

35 
ngx_°r_t
 
«me
;

36 
ngx_¨øy_t
 *
Êushes
;

37 
ngx_¨øy_t
 *
›s
;

38 } 
	tngx_hâp_log_fmt_t
;

42 
ngx_¨øy_t
 
f‹m©s
;

43 
ngx_uöt_t
 
comböed_u£d
;

44 } 
	tngx_hâp_log_maö_c⁄f_t
;

48 
u_ch¨
 *
°¨t
;

49 
u_ch¨
 *
pos
;

50 
u_ch¨
 *
œ°
;

52 
ngx_evít_t
 *
evít
;

53 
ngx_m£c_t
 
Êush
;

54 
ngx_öt_t
 
gzù
;

55 } 
	tngx_hâp_log_buf_t
;

59 
ngx_¨øy_t
 *
Àngths
;

60 
ngx_¨øy_t
 *
vÆues
;

61 } 
	tngx_hâp_log_s¸ùt_t
;

65 
ngx_›í_fûe_t
 *
fûe
;

66 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
;

67 
time_t
 
disk_fuŒ_time
;

68 
time_t
 
îr‹_log_time
;

69 
ngx_hâp_log_fmt_t
 *
f‹m©
;

70 } 
	tngx_hâp_log_t
;

74 
ngx_¨øy_t
 *
logs
;

76 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

77 
time_t
 
›í_fûe_ˇche_vÆid
;

78 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

80 
ngx_uöt_t
 
off
;

81 } 
	tngx_hâp_log_loc_c⁄f_t
;

85 
ngx_°r_t
 
«me
;

86 
size_t
 
Àn
;

87 
ngx_hâp_log_›_run_±
 
run
;

88 } 
	tngx_hâp_log_v¨_t
;

91 
	`ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
,

92 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

93 
ssize_t
 
	`ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
);

96 #i‡(
NGX_ZLIB
)

97 
ssize_t
 
	`ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
,

98 
ngx_öt_t
 
Àvñ
, 
ngx_log_t
 *
log
);

100 *
	`ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

101 
	`ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
);

104 
	`ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
);

105 
	`ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
);

107 
u_ch¨
 *
	`ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

108 
ngx_hâp_log_›_t
 *
›
);

109 
u_ch¨
 *
	`ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

110 
ngx_hâp_log_›_t
 *
›
);

111 
u_ch¨
 *
	`ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

112 
ngx_hâp_log_›_t
 *
›
);

113 
u_ch¨
 *
	`ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

114 
ngx_hâp_log_›_t
 *
›
);

115 
u_ch¨
 *
	`ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

116 
ngx_hâp_log_›_t
 *
›
);

117 
u_ch¨
 *
	`ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

118 
ngx_hâp_log_›_t
 *
›
);

119 
u_ch¨
 *
	`ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

120 
ngx_hâp_log_›_t
 *
›
);

121 
u_ch¨
 *
	`ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

122 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
);

123 
u_ch¨
 *
	`ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

124 
ngx_hâp_log_›_t
 *
›
);

126 
ngx_öt_t
 
	`ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
,

127 
ngx_hâp_log_›_t
 *
›
, 
ngx_°r_t
 *
vÆue
);

128 
size_t
 
	`ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

129 
uöçå_t
 
d©a
);

130 
u_ch¨
 *
	`ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

131 
ngx_hâp_log_›_t
 *
›
);

132 
uöçå_t
 
	`ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

135 *
	`ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

136 *
	`ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

137 *
	`ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

138 *
chûd
);

139 *
	`ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

140 *
c⁄f
);

141 *
	`ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

142 *
c⁄f
);

143 *
	`ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
,

144 
ngx_¨øy_t
 *
Êushes
,Çgx_¨øy_à*
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
);

145 *
	`ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

146 *
c⁄f
);

147 
ngx_öt_t
 
	`ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
);

150 
ngx_comm™d_t
 
ngx_hâp_log_comm™ds
[] = {

152 { 
	`ngx_°rög
("log_format"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

154 
ngx_hâp_log_£t_f‹m©
,

155 
NGX_HTTP_MAIN_CONF_OFFSET
,

157 
NULL
 },

159 { 
	`ngx_°rög
("access_log"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


161 |
NGX_HTTP_LMT_CONF
|
NGX_CONF_1MORE
,

162 
ngx_hâp_log_£t_log
,

163 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
NULL
 },

167 { 
	`ngx_°rög
("open_log_file_cache"),

168 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

169 
ngx_hâp_log_›í_fûe_ˇche
,

170 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
NULL
 },

174 
ngx_nuŒ_comm™d


175 
	}
};

178 
ngx_hâp_moduÀ_t
 
	gngx_hâp_log_moduÀ_˘x
 = {

179 
NULL
,

180 
ngx_hâp_log_öô
,

182 
ngx_hâp_log_¸óã_maö_c⁄f
,

183 
NULL
,

185 
NULL
,

186 
NULL
,

188 
ngx_hâp_log_¸óã_loc_c⁄f
,

189 
ngx_hâp_log_mîge_loc_c⁄f


193 
ngx_moduÀ_t
 
	gngx_hâp_log_moduÀ
 = {

194 
NGX_MODULE_V1
,

195 &
ngx_hâp_log_moduÀ_˘x
,

196 
ngx_hâp_log_comm™ds
,

197 
NGX_HTTP_MODULE
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NGX_MODULE_V1_PADDING


209 
ngx_°r_t
 
	gngx_hâp_ac˚ss_log
 = 
ngx_°rög
(
NGX_HTTP_LOG_PATH
);

212 
ngx_°r_t
 
	gngx_hâp_comböed_fmt
 =

213 
ngx_°rög
("$remote_addr - $remote_user [$time_local] "

218 
ngx_hâp_log_v¨_t
 
	gngx_hâp_log_v¨s
[] = {

219 { 
ngx_°rög
("pùe"), 1, 
ngx_hâp_log_pùe
 },

220 { 
ngx_°rög
("time_local"), ("28/Sep/1970:12:00:00 +0600") - 1,

221 
ngx_hâp_log_time
 },

222 { 
ngx_°rög
("time_iso8601"), ("1970-09-28T12:00:00+06:00") - 1,

223 
ngx_hâp_log_iso8601
 },

224 { 
ngx_°rög
("m£c"), 
NGX_TIME_T_LEN
 + 4, 
ngx_hâp_log_m£c
 },

225 { 
ngx_°rög
("ªque°_time"), 
NGX_TIME_T_LEN
 + 4,

226 
ngx_hâp_log_ªque°_time
 },

227 { 
ngx_°rög
("°©us"), 
NGX_INT_T_LEN
, 
ngx_hâp_log_°©us
 },

228 { 
ngx_°rög
("byãs_£¡"), 
NGX_OFF_T_LEN
, 
ngx_hâp_log_byãs_£¡
 },

229 { 
ngx_°rög
("body_byãs_£¡"), 
NGX_OFF_T_LEN
,

230 
ngx_hâp_log_body_byãs_£¡
 },

231 { 
ngx_°rög
("ªque°_Àngth"), 
NGX_SIZE_T_LEN
,

232 
ngx_hâp_log_ªque°_Àngth
 },

234 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

238 
ngx_öt_t


239 
	$ngx_hâp_log_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

241 
u_ch¨
 *
löe
, *
p
;

242 
size_t
 
Àn
;

243 
ngx_uöt_t
 
i
, 
l
;

244 
ngx_hâp_log_t
 *
log
;

245 
ngx_hâp_log_›_t
 *
›
;

246 
ngx_hâp_log_buf_t
 *
buf„r
;

247 
ngx_hâp_log_loc_c⁄f_t
 *
lcf
;

249 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

252 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

254 i‡(
lcf
->
off
) {

255  
NGX_OK
;

258 
log
 = 
lcf
->
logs
->
ñts
;

259 
l
 = 0;Ü < 
lcf
->
logs
->
√…s
;Ü++) {

261 i‡(
	`ngx_time
(Ë=
log
[
l
].
disk_fuŒ_time
) {

272 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
log
[
l
].
f‹m©
->
Êushes
);

274 
Àn
 = 0;

275 
›
 = 
log
[
l
].
f‹m©
->
›s
->
ñts
;

276 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

277 i‡(
›
[
i
].
Àn
 == 0) {

278 
Àn
 +
›
[
i
].
	`gëÀn
(
r
, op[i].
d©a
);

281 
Àn
 +
›
[
i
].len;

285 
Àn
 +
NGX_LINEFEED_SIZE
;

287 
buf„r
 = 
log
[
l
].
fûe
 ?Üog[l].fûe->
d©a
 : 
NULL
;

289 i‡(
buf„r
) {

291 i‡(
Àn
 > (
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

293 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
buf„r
->
°¨t
,

294 
buf„r
->
pos
 - buf„r->
°¨t
);

296 
buf„r
->
pos
 = buf„r->
°¨t
;

299 i‡(
Àn
 <(
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

301 
p
 = 
buf„r
->
pos
;

303 i‡(
buf„r
->
evít
 && 
p
 =buf„r->
°¨t
) {

304 
	`ngx_add_timî
(
buf„r
->
evít
, buf„r->
Êush
);

307 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

308 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

311 
	`ngx_löe„ed
(
p
);

313 
buf„r
->
pos
 = 
p
;

318 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

319 
	`ngx_dñ_timî
(
buf„r
->
evít
);

323 
löe
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

324 i‡(
löe
 =
NULL
) {

325  
NGX_ERROR
;

328 
p
 = 
löe
;

330 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

331 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

334 
	`ngx_löe„ed
(
p
);

336 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
löe
, 
p
 -Üine);

339  
NGX_OK
;

340 
	}
}

344 
	$ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
, 
u_ch¨
 *
buf
,

345 
size_t
 
Àn
)

347 
u_ch¨
 *
«me
;

348 
time_t
 
now
;

349 
ssize_t
 
n
;

350 
ngx_îr_t
 
îr
;

351 #i‡(
NGX_ZLIB
)

352 
ngx_hâp_log_buf_t
 *
buf„r
;

355 i‡(
log
->
s¸ùt
 =
NULL
) {

356 
«me
 = 
log
->
fûe
->«me.
d©a
;

358 #i‡(
NGX_ZLIB
)

359 
buf„r
 = 
log
->
fûe
->
d©a
;

361 i‡(
buf„r
 && buf„r->
gzù
) {

362 
n
 = 
	`ngx_hâp_log_gzù
(
log
->
fûe
->
fd
, 
buf
, 
Àn
, 
buf„r
->
gzù
,

363 
r
->
c⁄√˘i⁄
->
log
);

365 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

368 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

372 
«me
 = 
NULL
;

373 
n
 = 
	`ngx_hâp_log_s¸ùt_wrôe
(
r
, 
log
->
s¸ùt
, &
«me
, 
buf
, 
Àn
);

376 i‡(
n
 =(
ssize_t
Ë
Àn
) {

380 
now
 = 
	`ngx_time
();

382 i‡(
n
 == -1) {

383 
îr
 = 
ngx_î∫o
;

385 i‡(
îr
 =
NGX_ENOSPC
) {

386 
log
->
disk_fuŒ_time
 = 
now
;

389 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

390 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

391 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

393 
log
->
îr‹_log_time
 = 
now
;

399 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

400 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

401 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

402 
«me
, 
n
, 
Àn
);

404 
log
->
îr‹_log_time
 = 
now
;

406 
	}
}

409 
ssize_t


410 
	$ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
,

411 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
)

413 
size_t
 
roŸ
;

414 
ssize_t
 
n
;

415 
ngx_°r_t
 
log
, 
∑th
;

416 
ngx_›í_fûe_öfo_t
 
of
;

417 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
;

418 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

420 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

422 i‡(!
r
->
roŸ_ã°ed
) {

426 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

428  
Àn
;

431 
∑th
.
d©a
[
roŸ
] = '\0';

433 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

435 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

436 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

437 
of
.
ã°_dú
 = 1;

438 
of
.
ã°_⁄ly
 = 1;

439 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

440 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

442 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

444  
Àn
;

447 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

448 !
NGX_OK
)

450 i‡(
of
.
îr
 == 0) {

452  
Àn
;

455 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

456 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

459  
Àn
;

462 i‡(!
of
.
is_dú
) {

463 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ENOTDIR
,

464 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

467  
Àn
;

471 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
log
, 
s¸ùt
->
Àngths
->
ñts
, 1,

472 
s¸ùt
->
vÆues
->
ñts
)

473 =
NULL
)

476  
Àn
;

479 
log
.
d©a
[log.
Àn
 - 1] = '\0';

480 *
«me
 = 
log
.
d©a
;

482 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

483 "hâ∞log \"%s\"", 
log
.
d©a
);

485 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

487 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

489 
of
.
log
 = 1;

490 
of
.
vÆid
 = 
Œcf
->
›í_fûe_ˇche_vÆid
;

491 
of
.
mö_u£s
 = 
Œcf
->
›í_fûe_ˇche_mö_u£s
;

492 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

494 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
log
, &
of
Ë!
NGX_OK
) {

496  
Àn
;

499 i‡(
	`ngx_›í_ˇched_fûe
(
Œcf
->
›í_fûe_ˇche
, &
log
, &
of
, 
r
->
poﬁ
)

500 !
NGX_OK
)

502 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

503 "%†\"%s\" faûed", 
of
.
Áûed
, 
log
.
d©a
);

505  
Àn
;

508 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

509 "hâ∞log #%d", 
of
.
fd
);

511 
n
 = 
	`ngx_wrôe_fd
(
of
.
fd
, 
buf
, 
Àn
);

513  
n
;

514 
	}
}

517 #i‡(
NGX_ZLIB
)

519 
ssize_t


520 
	$ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
, 
ngx_öt_t
 
Àvñ
,

521 
ngx_log_t
 *
log
)

523 
rc
, 
wbôs
, 
memÀvñ
;

524 
u_ch¨
 *
out
;

525 
size_t
 
size
;

526 
ssize_t
 
n
;

527 
z_°ªam
 
z°ªam
;

528 
ngx_îr_t
 
îr
;

529 
ngx_poﬁ_t
 *
poﬁ
;

531 
wbôs
 = 
MAX_WBITS
;

532 
memÀvñ
 = 
MAX_MEM_LEVEL
 - 1;

534 (
ssize_t
Ë
Àn
 < ((1 << (
wbôs
 - 1)) - 262)) {

535 
wbôs
--;

536 
memÀvñ
--;

544 
size
 = 
Àn
 + ((len + 7) >> 3) + ((len + 63) >> 6) + 5 + 18;

546 
	`ngx_memzîo
(&
z°ªam
, (
z_°ªam
));

548 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(256, 
log
);

549 i‡(
poﬁ
 =
NULL
) {

551  
Àn
;

554 
poﬁ
->
log
 =Üog;

556 
z°ªam
.
zÆloc
 = 
ngx_hâp_log_gzù_Æloc
;

557 
z°ªam
.
z‰ì
 = 
ngx_hâp_log_gzù_‰ì
;

558 
z°ªam
.
›aque
 = 
poﬁ
;

560 
out
 = 
	`ngx_≤Æloc
(
poﬁ
, 
size
);

561 i‡(
out
 =
NULL
) {

562 
d⁄e
;

565 
z°ªam
.
√xt_ö
 = 
buf
;

566 
z°ªam
.
avaû_ö
 = 
Àn
;

567 
z°ªam
.
√xt_out
 = 
out
;

568 
z°ªam
.
avaû_out
 = 
size
;

570 
rc
 = 
	`deÊ©eInô2
(&
z°ªam
, (Ë
Àvñ
, 
Z_DEFLATED
, 
wbôs
 + 16, 
memÀvñ
,

571 
Z_DEFAULT_STRATEGY
);

573 i‡(
rc
 !
Z_OK
) {

574 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eInô2(ËÁûed: %d", 
rc
);

575 
d⁄e
;

578 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

580 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

581 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
);

583 
rc
 = 
	`deÊ©e
(&
z°ªam
, 
Z_FINISH
);

585 i‡(
rc
 !
Z_STREAM_END
) {

586 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

587 "deÊ©e(Z_FINISHËÁûed: %d", 
rc
);

588 
d⁄e
;

591 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

593 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

594 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
,

595 
rc
);

597 
size
 -
z°ªam
.
avaû_out
;

599 
rc
 = 
	`deÊ©eEnd
(&
z°ªam
);

601 i‡(
rc
 !
Z_OK
) {

602 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eEnd(ËÁûed: %d", 
rc
);

603 
d⁄e
;

606 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
out
, 
size
);

608 i‡(
n
 !(
ssize_t
Ë
size
) {

609 
îr
 = (
n
 =-1Ë? 
ngx_î∫o
 : 0;

611 
	`ngx_de°roy_poﬁ
(
poﬁ
);

613 
	`ngx_£t_î∫o
(
îr
);

617 
d⁄e
:

619 
	`ngx_de°roy_poﬁ
(
poﬁ
);

622  
Àn
;

623 
	}
}

627 
	$ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

629 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

631 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

632 "gzùáŒoc:Ç:%ud s:%ud", 
ôems
, 
size
);

634  
	`ngx_∑Œoc
(
poﬁ
, 
ôems
 * 
size
);

635 
	}
}

639 
	$ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
)

642 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

644 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0, "gzù fªe: %p", 
addªss
);

646 
	}
}

652 
	$ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
)

654 
size_t
 
Àn
;

655 
ssize_t
 
n
;

656 
ngx_hâp_log_buf_t
 *
buf„r
;

658 
buf„r
 = 
fûe
->
d©a
;

660 
Àn
 = 
buf„r
->
pos
 - buf„r->
°¨t
;

662 i‡(
Àn
 == 0) {

666 #i‡(
NGX_ZLIB
)

667 i‡(
buf„r
->
gzù
) {

668 
n
 = 
	`ngx_hâp_log_gzù
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
, buf„r->
gzù
, 
log
);

670 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

673 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

676 i‡(
n
 == -1) {

677 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

678 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

679 
fûe
->
«me
.
d©a
);

681 } i‡((
size_t
Ë
n
 !
Àn
) {

682 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

683 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

684 
fûe
->
«me
.
d©a
, 
n
, 
Àn
);

687 
buf„r
->
pos
 = buf„r->
°¨t
;

689 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

690 
	`ngx_dñ_timî
(
buf„r
->
evít
);

692 
	}
}

696 
	$ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
)

698 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

701 
	`ngx_hâp_log_Êush
(
ev
->
d©a
,Év->
log
);

702 
	}
}

705 
u_ch¨
 *

706 
	$ngx_hâp_log_c›y_sh‹t
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

707 
ngx_hâp_log_›_t
 *
›
)

709 
size_t
 
Àn
;

710 
uöçå_t
 
d©a
;

712 
Àn
 = 
›
->len;

713 
d©a
 = 
›
->data;

715 
Àn
--) {

716 *
buf
++ = (
u_ch¨
Ë(
d©a
 & 0xff);

717 
d©a
 >>= 8;

720  
buf
;

721 
	}
}

724 
u_ch¨
 *

725 
	$ngx_hâp_log_c›y_l⁄g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

726 
ngx_hâp_log_›_t
 *
›
)

728  
	`ngx_˝ymem
(
buf
, (
u_ch¨
 *Ë
›
->
d©a
, op->
Àn
);

729 
	}
}

732 
u_ch¨
 *

733 
	$ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

735 i‡(
r
->
pùñöe
) {

736 *
buf
 = 'p';

738 *
buf
 = '.';

741  
buf
 + 1;

742 
	}
}

745 
u_ch¨
 *

746 
	$ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

748  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_time
.
d©a
,

749 
ngx_ˇched_hâp_log_time
.
Àn
);

750 
	}
}

752 
u_ch¨
 *

753 
	$ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

755  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

756 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

757 
	}
}

759 
u_ch¨
 *

760 
	$ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

762 
ngx_time_t
 *
ç
;

764 
ç
 = 
	`ngx_timeofday
();

766  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
);

767 
	}
}

770 
u_ch¨
 *

771 
	$ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

772 
ngx_hâp_log_›_t
 *
›
)

774 
ngx_time_t
 *
ç
;

775 
ngx_m£c_öt_t
 
ms
;

777 
ç
 = 
	`ngx_timeofday
();

779 
ms
 = (
ngx_m£c_öt_t
)

780 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

781 
ms
 = 
	`ngx_max
(ms, 0);

783  
	`ngx_•rötf
(
buf
, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000);

784 
	}
}

787 
u_ch¨
 *

788 
	$ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

790 
ngx_uöt_t
 
°©us
;

792 i‡(
r
->
îr_°©us
) {

793 
°©us
 = 
r
->
îr_°©us
;

795 } i‡(
r
->
hódîs_out
.
°©us
) {

796 
°©us
 = 
r
->
hódîs_out
.status;

798 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

799 
°©us
 = 9;

802 
°©us
 = 0;

805  
	`ngx_•rötf
(
buf
, "%03ui", 
°©us
);

806 
	}
}

809 
u_ch¨
 *

810 
	$ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

811 
ngx_hâp_log_›_t
 *
›
)

813  
	`ngx_•rötf
(
buf
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
);

814 
	}
}

822 
u_ch¨
 *

823 
	$ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

824 
ngx_hâp_log_›_t
 *
›
)

826 
off_t
 
Àngth
;

828 
Àngth
 = 
r
->
c⁄√˘i⁄
->
£¡
 -Ñ->
hódî_size
;

830 i‡(
Àngth
 > 0) {

831  
	`ngx_•rötf
(
buf
, "%O", 
Àngth
);

834 *
buf
 = '0';

836  
buf
 + 1;

837 
	}
}

840 
u_ch¨
 *

841 
	$ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

842 
ngx_hâp_log_›_t
 *
›
)

844  
	`ngx_•rötf
(
buf
, "%O", 
r
->
ªque°_Àngth
);

845 
	}
}

848 
ngx_öt_t


849 
	$ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_log_›_t
 *
›
,

850 
ngx_°r_t
 *
vÆue
)

852 
ngx_öt_t
 
ödex
;

854 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

855 i‡(
ödex
 =
NGX_ERROR
) {

856  
NGX_ERROR
;

859 
›
->
Àn
 = 0;

860 
›
->
gëÀn
 = 
ngx_hâp_log_v¨übÀ_gëÀn
;

861 
›
->
run
 = 
ngx_hâp_log_v¨übÀ
;

862 
›
->
d©a
 = 
ödex
;

864  
NGX_OK
;

865 
	}
}

868 
size_t


869 
	$ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

871 
uöçå_t
 
Àn
;

872 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

874 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

876 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

880 
Àn
 = 
	`ngx_hâp_log_esˇ≥
(
NULL
, 
vÆue
->
d©a
, value->len);

882 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

884  
vÆue
->
Àn
 +Üen * 3;

885 
	}
}

888 
u_ch¨
 *

889 
	$ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

891 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

893 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

895 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

896 *
buf
 = '-';

897  
buf
 + 1;

900 i‡(
vÆue
->
esˇ≥
 == 0) {

901  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

904  (
u_ch¨
 *Ë
	`ngx_hâp_log_esˇ≥
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

906 
	}
}

909 
uöçå_t


910 
	$ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

912 
ngx_uöt_t
 
n
;

913 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

915 
uöt32_t
 
esˇ≥
[] = {

934 i‡(
d°
 =
NULL
) {

938 
n
 = 0;

940 
size
) {

941 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

942 
n
++;

944 
§c
++;

945 
size
--;

948  (
uöçå_t
Ë
n
;

951 
size
) {

952 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

953 *
d°
++ = '\\';

954 *
d°
++ = 'x';

955 *
d°
++ = 
hex
[*
§c
 >> 4];

956 *
d°
++ = 
hex
[*
§c
 & 0xf];

957 
§c
++;

960 *
d°
++ = *
§c
++;

962 
size
--;

965  (
uöçå_t
Ë
d°
;

966 
	}
}

970 
	$ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

972 
ngx_hâp_log_maö_c⁄f_t
 *
c⁄f
;

974 
ngx_hâp_log_fmt_t
 *
fmt
;

976 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_maö_c⁄f_t
));

977 i‡(
c⁄f
 =
NULL
) {

978  
NULL
;

981 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
f‹m©s
, 
cf
->
poﬁ
, 4, (
ngx_hâp_log_fmt_t
))

982 !
NGX_OK
)

984  
NULL
;

987 
fmt
 = 
	`ngx_¨øy_push
(&
c⁄f
->
f‹m©s
);

988 i‡(
fmt
 =
NULL
) {

989  
NULL
;

992 
	`ngx_°r_£t
(&
fmt
->
«me
, "combined");

994 
fmt
->
Êushes
 = 
NULL
;

996 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

997 i‡(
fmt
->
›s
 =
NULL
) {

998  
NULL
;

1001  
c⁄f
;

1002 
	}
}

1006 
	$ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1008 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
;

1010 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_loc_c⁄f_t
));

1011 i‡(
c⁄f
 =
NULL
) {

1012  
NULL
;

1015 
c⁄f
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1017  
c⁄f
;

1018 
	}
}

1022 
	$ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1024 
ngx_hâp_log_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1025 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1027 
ngx_hâp_log_t
 *
log
;

1028 
ngx_hâp_log_fmt_t
 *
fmt
;

1029 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1031 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1033 
c⁄f
->
›í_fûe_ˇche
 = 
¥ev
->open_file_cache;

1034 
c⁄f
->
›í_fûe_ˇche_vÆid
 = 
¥ev
->open_file_cache_valid;

1035 
c⁄f
->
›í_fûe_ˇche_mö_u£s
 = 
¥ev
->open_file_cache_min_uses;

1037 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1038 
c⁄f
->
›í_fûe_ˇche
 = 
NULL
;

1042 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1043  
NGX_CONF_OK
;

1046 
c⁄f
->
logs
 = 
¥ev
->logs;

1047 
c⁄f
->
off
 = 
¥ev
->off;

1049 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1050  
NGX_CONF_OK
;

1053 
c⁄f
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1054 i‡(
c⁄f
->
logs
 =
NULL
) {

1055  
NGX_CONF_ERROR
;

1058 
log
 = 
	`ngx_¨øy_push
(
c⁄f
->
logs
);

1059 i‡(
log
 =
NULL
) {

1060  
NGX_CONF_ERROR
;

1063 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
ngx_hâp_ac˚ss_log
);

1064 i‡(
log
->
fûe
 =
NULL
) {

1065  
NGX_CONF_ERROR
;

1068 
log
->
s¸ùt
 = 
NULL
;

1069 
log
->
disk_fuŒ_time
 = 0;

1070 
log
->
îr‹_log_time
 = 0;

1072 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1073 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1076 
log
->
f‹m©
 = &
fmt
[0];

1077 
lmcf
->
comböed_u£d
 = 1;

1079  
NGX_CONF_OK
;

1080 
	}
}

1084 
	$ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1086 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1088 
ssize_t
 
size
;

1089 
ngx_öt_t
 
gzù
;

1090 
ngx_uöt_t
 
i
, 
n
;

1091 
ngx_m£c_t
 
Êush
;

1092 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

1093 
ngx_hâp_log_t
 *
log
;

1094 
ngx_hâp_log_buf_t
 *
buf„r
;

1095 
ngx_hâp_log_fmt_t
 *
fmt
;

1096 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1097 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1099 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1101 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1102 
Œcf
->
off
 = 1;

1103 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1104  
NGX_CONF_OK
;

1107 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1108 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

1109  
NGX_CONF_ERROR
;

1112 i‡(
Œcf
->
logs
 =
NULL
) {

1113 
Œcf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1114 i‡(
Œcf
->
logs
 =
NULL
) {

1115  
NGX_CONF_ERROR
;

1119 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1121 
log
 = 
	`ngx_¨øy_push
(
Œcf
->
logs
);

1122 i‡(
log
 =
NULL
) {

1123  
NGX_CONF_ERROR
;

1126 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

1128 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1130 i‡(
n
 == 0) {

1131 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

1132 i‡(
log
->
fûe
 =
NULL
) {

1133  
NGX_CONF_ERROR
;

1137 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

1138  
NGX_CONF_ERROR
;

1141 
log
->
s¸ùt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_s¸ùt_t
));

1142 i‡(
log
->
s¸ùt
 =
NULL
) {

1143  
NGX_CONF_ERROR
;

1146 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1148 
sc
.
cf
 = cf;

1149 
sc
.
sour˚
 = &
vÆue
[1];

1150 
sc
.
Àngths
 = &
log
->
s¸ùt
->lengths;

1151 
sc
.
vÆues
 = &
log
->
s¸ùt
->values;

1152 
sc
.
v¨übÀs
 = 
n
;

1153 
sc
.
com∂ëe_Àngths
 = 1;

1154 
sc
.
com∂ëe_vÆues
 = 1;

1156 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1157  
NGX_CONF_ERROR
;

1161 i‡(
cf
->
¨gs
->
√…s
 >= 3) {

1162 
«me
 = 
vÆue
[2];

1164 i‡(
	`ngx_°rcmp
(
«me
.
d©a
, "combined") == 0) {

1165 
lmcf
->
comböed_u£d
 = 1;

1169 
	`ngx_°r_£t
(&
«me
, "combined");

1170 
lmcf
->
comböed_u£d
 = 1;

1173 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1174 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1175 i‡(
fmt
[
i
].
«me
.
Àn
 ==Çame.len

1176 && 
	`ngx_°rˇ£cmp
(
fmt
[
i
].
«me
.
d©a
,Çame.data) == 0)

1178 
log
->
f‹m©
 = &
fmt
[
i
];

1183 i‡(
log
->
f‹m©
 =
NULL
) {

1184 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1185 "unknow¿log f‹m© \"%V\"", &
«me
);

1186  
NGX_CONF_ERROR
;

1189 
size
 = 0;

1190 
Êush
 = 0;

1191 
gzù
 = 0;

1193 
i
 = 3; i < 
cf
->
¨gs
->
√…s
; i++) {

1195 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "buffer=", 7) == 0) {

1196 
s
.
Àn
 = 
vÆue
[
i
].len - 7;

1197 
s
.
d©a
 = 
vÆue
[
i
].data + 7;

1199 
size
 = 
	`ngx_∑r£_size
(&
s
);

1201 i‡(
size
 =
NGX_ERROR
 || size == 0) {

1202 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1203 "övÆid buf„∏sizê\"%V\"", &
s
);

1204  
NGX_CONF_ERROR
;

1210 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "flush=", 6) == 0) {

1211 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1212 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1214 
Êush
 = 
	`ngx_∑r£_time
(&
s
, 0);

1216 i‡(
Êush
 =(
ngx_m£c_t
Ë
NGX_ERROR
 || flush == 0) {

1217 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1218 "övÆid flushÅimê\"%V\"", &
s
);

1219  
NGX_CONF_ERROR
;

1225 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "gzip", 4) == 0

1226 && (
vÆue
[
i
].
Àn
 =4 || vÆue[i].
d©a
[4] == '='))

1228 #i‡(
NGX_ZLIB
)

1229 i‡(
size
 == 0) {

1230 
size
 = 64 * 1024;

1233 i‡(
vÆue
[
i
].
Àn
 == 4) {

1234 
gzù
 = 
Z_BEST_SPEED
;

1238 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

1239 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

1241 
gzù
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

1243 i‡(
gzù
 < 1 || gzip > 9) {

1244 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1245 "övÆid com¥essi⁄Üevñ \"%V\"", &
s
);

1246  
NGX_CONF_ERROR
;

1252 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1254  
NGX_CONF_ERROR
;

1258 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1259 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1260  
NGX_CONF_ERROR
;

1263 i‡(
Êush
 && 
size
 == 0) {

1264 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1266 &
vÆue
[1]);

1267  
NGX_CONF_ERROR
;

1270 i‡(
size
) {

1272 i‡(
log
->
s¸ùt
) {

1273 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1275  
NGX_CONF_ERROR
;

1278 i‡(
log
->
fûe
->
d©a
) {

1279 
buf„r
 = 
log
->
fûe
->
d©a
;

1281 i‡(
buf„r
->
œ°
 - buf„r->
°¨t
 !
size


1282 || 
buf„r
->
Êush
 != flush

1283 || 
buf„r
->
gzù
 != gzip)

1285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1288 &
vÆue
[1]);

1289  
NGX_CONF_ERROR
;

1292  
NGX_CONF_OK
;

1295 
buf„r
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_buf_t
));

1296 i‡(
buf„r
 =
NULL
) {

1297  
NGX_CONF_ERROR
;

1300 
buf„r
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

1301 i‡(
buf„r
->
°¨t
 =
NULL
) {

1302  
NGX_CONF_ERROR
;

1305 
buf„r
->
pos
 = buf„r->
°¨t
;

1306 
buf„r
->
œ°
 = buf„r->
°¨t
 + 
size
;

1308 i‡(
Êush
) {

1309 
buf„r
->
evít
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

1310 i‡(
buf„r
->
evít
 =
NULL
) {

1311  
NGX_CONF_ERROR
;

1314 
buf„r
->
evít
->
d©a
 = 
log
->
fûe
;

1315 
buf„r
->
evít
->
h™dÀr
 = 
ngx_hâp_log_Êush_h™dÀr
;

1316 
buf„r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

1318 
buf„r
->
Êush
 = flush;

1321 
buf„r
->
gzù
 = gzip;

1323 
log
->
fûe
->
Êush
 = 
ngx_hâp_log_Êush
;

1324 
log
->
fûe
->
d©a
 = 
buf„r
;

1327  
NGX_CONF_OK
;

1328 
	}
}

1332 
	$ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1334 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

1336 
ngx_°r_t
 *
vÆue
;

1337 
ngx_uöt_t
 
i
;

1338 
ngx_hâp_log_fmt_t
 *
fmt
;

1340 i‡(
cf
->
cmd_ty≥
 !
NGX_HTTP_MAIN_CONF
) {

1341 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1346 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1348 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1349 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1350 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len

1351 && 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

1353 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1355 &
vÆue
[1]);

1356  
NGX_CONF_ERROR
;

1360 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

1361 i‡(
fmt
 =
NULL
) {

1362  
NGX_CONF_ERROR
;

1365 
fmt
->
«me
 = 
vÆue
[1];

1367 
fmt
->
Êushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_öt_t
));

1368 i‡(
fmt
->
Êushes
 =
NULL
) {

1369  
NGX_CONF_ERROR
;

1372 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1373 i‡(
fmt
->
›s
 =
NULL
) {

1374  
NGX_CONF_ERROR
;

1377  
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
fmt
->
Êushes
, fmt->
›s
, cf->
¨gs
, 2);

1378 
	}
}

1382 
	$ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
Êushes
,

1383 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
)

1385 
u_ch¨
 *
d©a
, *
p
, 
ch
;

1386 
size_t
 
i
, 
Àn
;

1387 
ngx_°r_t
 *
vÆue
, 
v¨
;

1388 
ngx_öt_t
 *
Êush
;

1389 
ngx_uöt_t
 
bøckë
;

1390 
ngx_hâp_log_›_t
 *
›
;

1391 
ngx_hâp_log_v¨_t
 *
v
;

1393 
vÆue
 = 
¨gs
->
ñts
;

1395  ; 
s
 < 
¨gs
->
√…s
; s++) {

1397 
i
 = 0;

1399 
i
 < 
vÆue
[
s
].
Àn
) {

1401 
›
 = 
	`ngx_¨øy_push
(
›s
);

1402 i‡(
›
 =
NULL
) {

1403  
NGX_CONF_ERROR
;

1406 
d©a
 = &
vÆue
[
s
].d©a[
i
];

1408 i‡(
vÆue
[
s
].
d©a
[
i
] == '$') {

1410 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1411 
övÆid
;

1414 i‡(
vÆue
[
s
].
d©a
[
i
] == '{') {

1415 
bøckë
 = 1;

1417 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1418 
övÆid
;

1421 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1424 
bøckë
 = 0;

1425 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1428 
v¨
.
Àn
 = 0; 
i
 < 
vÆue
[
s
].len; i++, var.len++) {

1429 
ch
 = 
vÆue
[
s
].
d©a
[
i
];

1431 i‡(
ch
 ='}' && 
bøckë
) {

1432 
i
++;

1433 
bøckë
 = 0;

1437 i‡((
ch
 >= 'A' && ch <= 'Z')

1438 || (
ch
 >= 'a' && ch <= 'z')

1439 || (
ch
 >= '0' && ch <= '9')

1440 || 
ch
 == '_')

1448 i‡(
bøckë
) {

1449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1451 "v¨übÀ i†missög", &
v¨
);

1452  
NGX_CONF_ERROR
;

1455 i‡(
v¨
.
Àn
 == 0) {

1456 
övÆid
;

1459 
v
 = 
ngx_hâp_log_v¨s
; v->
«me
.
Àn
; v++) {

1461 i‡(
v
->
«me
.
Àn
 =
v¨
.len

1462 && 
	`ngx_°∫cmp
(
v
->
«me
.
d©a
, 
v¨
.d©a, v¨.
Àn
) == 0)

1464 
›
->
Àn
 = 
v
->len;

1465 
›
->
gëÀn
 = 
NULL
;

1466 
›
->
run
 = 
v
->run;

1467 
›
->
d©a
 = 0;

1469 
found
;

1473 i‡(
	`ngx_hâp_log_v¨übÀ_compûe
(
cf
, 
›
, &
v¨
Ë!
NGX_OK
) {

1474  
NGX_CONF_ERROR
;

1477 i‡(
Êushes
) {

1479 
Êush
 = 
	`ngx_¨øy_push
(
Êushes
);

1480 i‡(
Êush
 =
NULL
) {

1481  
NGX_CONF_ERROR
;

1484 *
Êush
 = 
›
->
d©a
;

1487 
found
:

1492 
i
++;

1494 
i
 < 
vÆue
[
s
].
Àn
 && vÆue[s].
d©a
[i] != '$') {

1495 
i
++;

1498 
Àn
 = &
vÆue
[
s
].
d©a
[
i
] - data;

1500 i‡(
Àn
) {

1502 
›
->
Àn
 =Üen;

1503 
›
->
gëÀn
 = 
NULL
;

1505 i‡(
Àn
 <(
uöçå_t
)) {

1506 
›
->
run
 = 
ngx_hâp_log_c›y_sh‹t
;

1507 
›
->
d©a
 = 0;

1509 
Àn
--) {

1510 
›
->
d©a
 <<= 8;

1511 
›
->
d©a
 |d©a[
Àn
];

1515 
›
->
run
 = 
ngx_hâp_log_c›y_l⁄g
;

1517 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1518 i‡(
p
 =
NULL
) {

1519  
NGX_CONF_ERROR
;

1522 
	`ngx_mem˝y
(
p
, 
d©a
, 
Àn
);

1523 
›
->
d©a
 = (
uöçå_t
Ë
p
;

1529  
NGX_CONF_OK
;

1531 
övÆid
:

1533 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

1535  
NGX_CONF_ERROR
;

1536 
	}
}

1540 
	$ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1542 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1544 
time_t
 
öa˘ive
, 
vÆid
;

1545 
ngx_°r_t
 *
vÆue
, 
s
;

1546 
ngx_öt_t
 
max
, 
mö_u£s
;

1547 
ngx_uöt_t
 
i
;

1549 i‡(
Œcf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

1553 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1555 
max
 = 0;

1556 
öa˘ive
 = 10;

1557 
vÆid
 = 60;

1558 
mö_u£s
 = 1;

1560 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1562 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

1564 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

1565 i‡(
max
 =
NGX_ERROR
) {

1566 
Áûed
;

1572 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1574 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1575 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1577 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1578 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1579 
Áûed
;

1585 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "min_uses=", 9) == 0) {

1587 
mö_u£s
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 9, vÆue[i].
Àn
 - 9);

1588 i‡(
mö_u£s
 =
NGX_ERROR
) {

1589 
Áûed
;

1595 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "valid=", 6) == 0) {

1597 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1598 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1600 
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

1601 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1602 
Áûed
;

1608 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1610 
Œcf
->
›í_fûe_ˇche
 = 
NULL
;

1615 
Áûed
:

1617 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1619 &
vÆue
[
i
]);

1620  
NGX_CONF_ERROR
;

1623 i‡(
Œcf
->
›í_fûe_ˇche
 =
NULL
) {

1624  
NGX_CONF_OK
;

1627 i‡(
max
 == 0) {

1628 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1630  
NGX_CONF_ERROR
;

1633 
Œcf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

1635 i‡(
Œcf
->
›í_fûe_ˇche
) {

1637 
Œcf
->
›í_fûe_ˇche_vÆid
 = 
vÆid
;

1638 
Œcf
->
›í_fûe_ˇche_mö_u£s
 = 
mö_u£s
;

1640  
NGX_CONF_OK
;

1643  
NGX_CONF_ERROR
;

1644 
	}
}

1647 
ngx_öt_t


1648 
	$ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
)

1650 
ngx_°r_t
 *
vÆue
;

1651 
ngx_¨øy_t
 
a
;

1652 
ngx_hâp_h™dÀr_±
 *
h
;

1653 
ngx_hâp_log_fmt_t
 *
fmt
;

1654 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1655 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1657 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1659 i‡(
lmcf
->
comböed_u£d
) {

1660 i‡(
	`ngx_¨øy_öô
(&
a
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

1661  
NGX_ERROR
;

1664 
vÆue
 = 
	`ngx_¨øy_push
(&
a
);

1665 i‡(
vÆue
 =
NULL
) {

1666  
NGX_ERROR
;

1669 *
vÆue
 = 
ngx_hâp_comböed_fmt
;

1670 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1672 i‡(
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
NULL
, 
fmt
->
›s
, &
a
, 0)

1673 !
NGX_CONF_OK
)

1675  
NGX_ERROR
;

1679 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1681 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
);

1682 i‡(
h
 =
NULL
) {

1683  
NGX_ERROR
;

1686 *
h
 = 
ngx_hâp_log_h™dÀr
;

1688  
NGX_OK
;

1689 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_map_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mhash_max_size
;

15 
ngx_uöt_t
 
	mhash_buckë_size
;

16 } 
	tngx_hâp_m≠_c⁄f_t
;

20 
ngx_hash_keys_¨øys_t
 
	mkeys
;

22 
ngx_¨øy_t
 *
	mvÆues_hash
;

23 
ngx_¨øy_t
 
	mv¨_vÆues
;

24 #i‡(
NGX_PCRE
)

25 
ngx_¨øy_t
 
	mªgexes
;

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

29 
ngx_c⁄f_t
 *
	mcf
;

30 
ngx_uöt_t
 
	mho°«mes
;

31 } 
	tngx_hâp_m≠_c⁄f_˘x_t
;

35 
ngx_hâp_m≠_t
 
	mm≠
;

36 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

38 
ngx_uöt_t
 
	mho°«mes
;

39 } 
	tngx_hâp_m≠_˘x_t
;

42 
ngx_libc_cde˛
 
ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

43 c⁄° *
two
);

44 *
ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

46 *
ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

49 
ngx_comm™d_t
 
	gngx_hâp_m≠_comm™ds
[] = {

51 { 
ngx_°rög
("map"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

53 
ngx_hâp_m≠_block
,

54 
NGX_HTTP_MAIN_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("map_hash_max_size"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

61 
NGX_HTTP_MAIN_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_max_size
),

63 
NULL
 },

65 { 
ngx_°rög
("map_hash_bucket_size"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

68 
NGX_HTTP_MAIN_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_buckë_size
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_m≠_moduÀ_˘x
 = {

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_m≠_¸óã_c⁄f
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL


91 
ngx_moduÀ_t
 
	gngx_hâp_m≠_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_m≠_moduÀ_˘x
,

94 
ngx_hâp_m≠_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_m≠_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

109 
uöçå_t
 
d©a
)

111 
ngx_hâp_m≠_˘x_t
 *
m≠
 = (ngx_hâp_m≠_˘x_à*Ë
d©a
;

113 
ngx_°r_t
 
vÆ
;

114 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

119 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
m≠
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

120  
NGX_ERROR
;

123 i‡(
m≠
->
ho°«mes
 && 
vÆ
.
Àn
 > 0 && vÆ.
d©a
[val.len - 1] == '.') {

124 
vÆ
.
Àn
--;

127 
vÆue
 = 
	`ngx_hâp_m≠_föd
(
r
, &
m≠
->m≠, &
vÆ
);

129 i‡(
vÆue
 =
NULL
) {

130 
vÆue
 = 
m≠
->
deÁu…_vÆue
;

133 i‡(!
vÆue
->
vÆid
) {

134 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, (
uöçå_t
ËvÆue->
d©a
);

136 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

137 
vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

141 *
v
 = *
vÆue
;

143 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

144 "hâ∞m≠: \"%v\" \"%v\"", &
vÆ
, 
v
);

146  
NGX_OK
;

147 
	}
}

151 
	$ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_hâp_m≠_c⁄f_t
 *
mcf
;

155 
mcf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_c⁄f_t
));

156 i‡(
mcf
 =
NULL
) {

157  
NULL
;

160 
mcf
->
hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

161 
mcf
->
hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

163  
mcf
;

164 
	}
}

168 
	$ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

170 
ngx_hâp_m≠_c⁄f_t
 *
mcf
 = 
c⁄f
;

172 *
rv
;

173 
ngx_°r_t
 *
vÆue
, 
«me
;

174 
ngx_c⁄f_t
 
ßve
;

175 
ngx_poﬁ_t
 *
poﬁ
;

176 
ngx_hash_öô_t
 
hash
;

177 
ngx_hâp_m≠_˘x_t
 *
m≠
;

178 
ngx_hâp_v¨übÀ_t
 *
v¨
;

179 
ngx_hâp_m≠_c⁄f_˘x_t
 
˘x
;

180 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

182 i‡(
mcf
->
hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

183 
mcf
->
hash_max_size
 = 2048;

186 i‡(
mcf
->
hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

187 
mcf
->
hash_buckë_size
 = 
ngx_ˇchñöe_size
;

190 
mcf
->
hash_buckë_size
 = 
	`ngx_Æign
(mcf->hash_bucket_size,

191 
ngx_ˇchñöe_size
);

194 
m≠
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_˘x_t
));

195 i‡(
m≠
 =
NULL
) {

196  
NGX_CONF_ERROR
;

199 
vÆue
 = 
cf
->
¨gs
->
ñts
;

201 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

203 
ccv
.
cf
 = cf;

204 
ccv
.
vÆue
 = &value[1];

205 
ccv
.
com∂ex_vÆue
 = &
m≠
->
vÆue
;

207 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

208  
NGX_CONF_ERROR
;

211 
«me
 = 
vÆue
[2];

213 i‡(
«me
.
d©a
[0] != '$') {

214 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

215 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

216  
NGX_CONF_ERROR
;

219 
«me
.
Àn
--;

220 
«me
.
d©a
++;

222 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

223 i‡(
v¨
 =
NULL
) {

224  
NGX_CONF_ERROR
;

227 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_m≠_v¨übÀ
;

228 
v¨
->
d©a
 = (
uöçå_t
Ë
m≠
;

230 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

231 i‡(
poﬁ
 =
NULL
) {

232  
NGX_CONF_ERROR
;

235 
˘x
.
keys
.
poﬁ
 = 
cf
->pool;

236 
˘x
.
keys
.
ãmp_poﬁ
 = 
poﬁ
;

238 i‡(
	`ngx_hash_keys_¨øy_öô
(&
˘x
.
keys
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

239 
	`ngx_de°roy_poﬁ
(
poﬁ
);

240  
NGX_CONF_ERROR
;

243 
˘x
.
vÆues_hash
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_¨øy_t
Ë* ctx.
keys
.
hsize
);

244 i‡(
˘x
.
vÆues_hash
 =
NULL
) {

245 
	`ngx_de°roy_poﬁ
(
poﬁ
);

246  
NGX_CONF_ERROR
;

249 i‡(
	`ngx_¨øy_öô
(&
˘x
.
v¨_vÆues
, 
cf
->
poﬁ
, 2,

250 (
ngx_hâp_v¨übÀ_vÆue_t
))

251 !
NGX_OK
)

253 
	`ngx_de°roy_poﬁ
(
poﬁ
);

254  
NGX_CONF_ERROR
;

257 #i‡(
NGX_PCRE
)

258 i‡(
	`ngx_¨øy_öô
(&
˘x
.
ªgexes
, 
cf
->
poﬁ
, 2, (
ngx_hâp_m≠_ªgex_t
))

259 !
NGX_OK
)

261 
	`ngx_de°roy_poﬁ
(
poﬁ
);

262  
NGX_CONF_ERROR
;

266 
˘x
.
deÁu…_vÆue
 = 
NULL
;

267 
˘x
.
cf
 = &
ßve
;

268 
˘x
.
ho°«mes
 = 0;

270 
ßve
 = *
cf
;

271 
cf
->
poﬁ
 =Öool;

272 
cf
->
˘x
 = &ctx;

273 
cf
->
h™dÀr
 = 
ngx_hâp_m≠
;

274 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
ßve
;

280 i‡(
rv
 !
NGX_CONF_OK
) {

281 
	`ngx_de°roy_poﬁ
(
poﬁ
);

282  
rv
;

285 
m≠
->
deÁu…_vÆue
 = 
˘x
.default_value ? ctx.default_value:

286 &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

288 
m≠
->
ho°«mes
 = 
˘x
.hostnames;

290 
hash
.
key
 = 
ngx_hash_key_lc
;

291 
hash
.
max_size
 = 
mcf
->
hash_max_size
;

292 
hash
.
buckë_size
 = 
mcf
->
hash_buckë_size
;

293 
hash
.
«me
 = "map_hash";

294 
hash
.
poﬁ
 = 
cf
->pool;

296 i‡(
˘x
.
keys
.keys.
√…s
) {

297 
hash
.hash = &
m≠
->map.hash.hash;

298 
hash
.
ãmp_poﬁ
 = 
NULL
;

300 i‡(
	`ngx_hash_öô
(&
hash
, 
˘x
.
keys
.keys.
ñts
, ctx.keys.keys.
√…s
)

301 !
NGX_OK
)

303 
	`ngx_de°roy_poﬁ
(
poﬁ
);

304  
NGX_CONF_ERROR
;

308 i‡(
˘x
.
keys
.
dns_wc_hód
.
√…s
) {

310 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_hód
.
ñts
,

311 (
size_t
Ë
˘x
.
keys
.
dns_wc_hód
.
√…s
,

312 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

314 
hash
.hash = 
NULL
;

315 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

317 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_hód
.
ñts
,

318 
˘x
.
keys
.
dns_wc_hód
.
√…s
)

319 !
NGX_OK
)

321 
	`ngx_de°roy_poﬁ
(
poﬁ
);

322  
NGX_CONF_ERROR
;

325 
m≠
->m≠.
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

328 i‡(
˘x
.
keys
.
dns_wc_èû
.
√…s
) {

330 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_èû
.
ñts
,

331 (
size_t
Ë
˘x
.
keys
.
dns_wc_èû
.
√…s
,

332 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

334 
hash
.hash = 
NULL
;

335 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

337 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_èû
.
ñts
,

338 
˘x
.
keys
.
dns_wc_èû
.
√…s
)

339 !
NGX_OK
)

341 
	`ngx_de°roy_poﬁ
(
poﬁ
);

342  
NGX_CONF_ERROR
;

345 
m≠
->m≠.
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

348 #i‡(
NGX_PCRE
)

350 i‡(
˘x
.
ªgexes
.
√…s
) {

351 
m≠
->m≠.
ªgex
 = 
˘x
.
ªgexes
.
ñts
;

352 
m≠
->m≠.
ƒegex
 = 
˘x
.
ªgexes
.
√…s
;

357 
	`ngx_de°roy_poﬁ
(
poﬁ
);

359  
rv
;

360 
	}
}

363 
ngx_libc_cde˛


364 
	$ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

366 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

368 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

369 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

371  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

372 
	}
}

376 
	$ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

378 
ngx_öt_t
 
rc
, 
ödex
;

379 
ngx_°r_t
 *
vÆue
, 
«me
;

380 
ngx_uöt_t
 
i
, 
key
;

381 
ngx_hâp_m≠_c⁄f_˘x_t
 *
˘x
;

382 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨
, **
vp
;

384 
˘x
 = 
cf
->ctx;

386 
vÆue
 = 
cf
->
¨gs
->
ñts
;

388 i‡(
cf
->
¨gs
->
√…s
 == 1

389 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "hostnames") == 0)

391 
˘x
->
ho°«mes
 = 1;

392  
NGX_CONF_OK
;

394 } i‡(
cf
->
¨gs
->
√…s
 != 2) {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

397  
NGX_CONF_ERROR
;

400 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

401  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

404 i‡(
vÆue
[1].
d©a
[0] == '$') {

405 
«me
 = 
vÆue
[1];

406 
«me
.
Àn
--;

407 
«me
.
d©a
++;

409 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
˘x
->
cf
, &
«me
);

410 i‡(
ödex
 =
NGX_ERROR
) {

411  
NGX_CONF_ERROR
;

414 
v¨
 = 
˘x
->
v¨_vÆues
.
ñts
;

416 
i
 = 0; i < 
˘x
->
v¨_vÆues
.
√…s
; i++) {

417 i‡(
ödex
 =(
öçå_t
Ë
v¨
[
i
].
d©a
) {

418 
v¨
 = &v¨[
i
];

419 
found
;

423 
v¨
 = 
	`ngx_¨øy_push
(&
˘x
->
v¨_vÆues
);

424 i‡(
v¨
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
v¨
->
vÆid
 = 0;

429 
v¨
->
no_ˇchóbÀ
 = 0;

430 
v¨
->
nŸ_found
 = 0;

431 
v¨
->
Àn
 = 0;

432 
v¨
->
d©a
 = (
u_ch¨
 *Ë(
öçå_t
Ë
ödex
;

434 
found
;

437 
key
 = 0;

439 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

440 
key
 = 
	`ngx_hash
(key, 
vÆue
[1].
d©a
[
i
]);

443 
key
 %
˘x
->
keys
.
hsize
;

445 
vp
 = 
˘x
->
vÆues_hash
[
key
].
ñts
;

447 i‡(
vp
) {

448 
i
 = 0; i < 
˘x
->
vÆues_hash
[
key
].
√…s
; i++) {

449 i‡(
vÆue
[1].
Àn
 !(
size_t
Ë
vp
[
i
]->len) {

453 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, 
vp
[
i
]->d©a, vÆue[1].
Àn
) == 0) {

454 
v¨
 = 
vp
[
i
];

455 
found
;

460 i‡(
	`ngx_¨øy_öô
(&
˘x
->
vÆues_hash
[
key
], 
cf
->
poﬁ
, 4,

461 (
ngx_hâp_v¨übÀ_vÆue_t
 *))

462 !
NGX_OK
)

464  
NGX_CONF_ERROR
;

468 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

469 i‡(
v¨
 =
NULL
) {

470  
NGX_CONF_ERROR
;

473 
v¨
->
Àn
 = 
vÆue
[1].len;

474 
v¨
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
keys
.
poﬁ
, &
vÆue
[1]);

475 i‡(
v¨
->
d©a
 =
NULL
) {

476  
NGX_CONF_ERROR
;

479 
v¨
->
vÆid
 = 1;

480 
v¨
->
no_ˇchóbÀ
 = 0;

481 
v¨
->
nŸ_found
 = 0;

483 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
vÆues_hash
[
key
]);

484 i‡(
vp
 =
NULL
) {

485  
NGX_CONF_ERROR
;

488 *
vp
 = 
v¨
;

490 
found
:

492 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

494 i‡(
˘x
->
deÁu…_vÆue
) {

495 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

497  
NGX_CONF_ERROR
;

500 
˘x
->
deÁu…_vÆue
 = 
v¨
;

502  
NGX_CONF_OK
;

505 #i‡(
NGX_PCRE
)

507 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '~') {

508 
ngx_ªgex_compûe_t
 
rc
;

509 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

510 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

512 
ªgex
 = 
	`ngx_¨øy_push
(&
˘x
->
ªgexes
);

513 i‡(
ªgex
 =
NULL
) {

514  
NGX_CONF_ERROR
;

517 
vÆue
[0].
Àn
--;

518 
vÆue
[0].
d©a
++;

520 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

522 i‡(
vÆue
[0].
d©a
[0] == '*') {

523 
vÆue
[0].
Àn
--;

524 
vÆue
[0].
d©a
++;

525 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

528 
rc
.
∑âîn
 = 
vÆue
[0];

529 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

530 
rc
.
îr
.
d©a
 = 
îr°r
;

532 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
˘x
->
cf
, &
rc
);

533 i‡(
ªgex
->ªgex =
NULL
) {

534  
NGX_CONF_ERROR
;

537 
ªgex
->
vÆue
 = 
v¨
;

539  
NGX_CONF_OK
;

544 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '\\') {

545 
vÆue
[0].
Àn
--;

546 
vÆue
[0].
d©a
++;

549 
rc
 = 
	`ngx_hash_add_key
(&
˘x
->
keys
, &
vÆue
[0], 
v¨
,

550 (
˘x
->
ho°«mes
Ë? 
NGX_HASH_WILDCARD_KEY
 : 0);

552 i‡(
rc
 =
NGX_OK
) {

553  
NGX_CONF_OK
;

556 i‡(
rc
 =
NGX_DECLINED
) {

557 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

558 "övÆid ho°«mê‹ wûdˇrd \"%V\"", &
vÆue
[0]);

561 i‡(
rc
 =
NGX_BUSY
) {

562 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

563 "c⁄Êi˘ögÖ¨amëî \"%V\"", &
vÆue
[0]);

566  
NGX_CONF_ERROR
;

567 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_memcached_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

15 
ngx_öt_t
 
	mödex
;

16 
ngx_uöt_t
 
	mgzù_Êag
;

17 } 
	tngx_hâp_memˇched_loc_c⁄f_t
;

21 
size_t
 
	mª°
;

22 
ngx_hâp_ªque°_t
 *
	mªque°
;

23 
ngx_°r_t
 
	mkey
;

24 } 
	tngx_hâp_memˇched_˘x_t
;

27 
ngx_öt_t
 
ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t
 
ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

30 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr_öô
(*
d©a
);

31 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
);

32 
ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

33 
ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_öt_t
 
rc
);

36 *
ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

37 *
ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

38 *
∑ª¡
, *
chûd
);

40 *
ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
c⁄f
);

44 
ngx_c⁄f_bômask_t
 
	gngx_hâp_memˇched_√xt_up°ªam_masks
[] = {

45 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

46 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

47 { 
ngx_°rög
("övÆid_ª•⁄£"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

48 { 
ngx_°rög
("nŸ_found"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

49 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

50 { 
ngx_nuŒ_°rög
, 0 }

54 
ngx_comm™d_t
 
	gngx_hâp_memˇched_comm™ds
[] = {

56 { 
ngx_°rög
("memcached_pass"),

57 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_hâp_memˇched_∑ss
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
NULL
 },

63 { 
ngx_°rög
("memcached_bind"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

68 
NULL
 },

70 { 
ngx_°rög
("memcached_connect_timeout"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_m£c_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

75 
NULL
 },

77 { 
ngx_°rög
("memcached_send_timeout"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_m£c_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

82 
NULL
 },

84 { 
ngx_°rög
("memcached_buffer_size"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_size_¶Ÿ
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

88 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

89 
NULL
 },

91 { 
ngx_°rög
("memcached_read_timeout"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_m£c_¶Ÿ
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

96 
NULL
 },

98 { 
ngx_°rög
("memcached_next_upstream"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

100 
ngx_c⁄f_£t_bômask_¶Ÿ
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

103 &
ngx_hâp_memˇched_√xt_up°ªam_masks
 },

105 { 
ngx_°rög
("memcached_gzip_flag"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_c⁄f_£t_num_¶Ÿ
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
gzù_Êag
),

110 
NULL
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ_˘x
 = {

117 
NULL
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
NULL
,

124 
NULL
,

126 
ngx_hâp_memˇched_¸óã_loc_c⁄f
,

127 
ngx_hâp_memˇched_mîge_loc_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_memˇched_moduÀ_˘x
,

134 
ngx_hâp_memˇched_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_°r_t
 
	gngx_hâp_memˇched_key
 = 
ngx_°rög
("memcached_key");

150 
	#NGX_HTTP_MEMCACHED_END
 ((
ngx_hâp_memˇched_íd
Ë- 1)

	)

151 
u_ch¨
 
	gngx_hâp_memˇched_íd
[] = 
CRLF
 "END" CRLF;

154 
ngx_öt_t


155 
	$ngx_hâp_memˇched_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

157 
ngx_öt_t
 
rc
;

158 
ngx_hâp_up°ªam_t
 *
u
;

159 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

160 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

162 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

163  
NGX_HTTP_NOT_ALLOWED
;

166 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

168 i‡(
rc
 !
NGX_OK
) {

169  
rc
;

172 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

173  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

176 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

177  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

180 
u
 = 
r
->
up°ªam
;

182 
	`ngx_°r_£t
(&
u
->
schema
, "memcached://");

183 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_memˇched_moduÀ
;

185 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

187 
u
->
c⁄f
 = &
mlcf
->
up°ªam
;

189 
u
->
¸óã_ªque°
 = 
ngx_hâp_memˇched_¸óã_ªque°
;

190 
u
->
ªöô_ªque°
 = 
ngx_hâp_memˇched_ªöô_ªque°
;

191 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_memˇched_¥o˚ss_hódî
;

192 
u
->
ab‹t_ªque°
 = 
ngx_hâp_memˇched_ab‹t_ªque°
;

193 
u
->
föÆize_ªque°
 = 
ngx_hâp_memˇched_föÆize_ªque°
;

195 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_memˇched_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

200 
˘x
->
ªque°
 = 
r
;

202 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_memˇched_moduÀ
);

204 
u
->
öput_fûãr_öô
 = 
ngx_hâp_memˇched_fûãr_öô
;

205 
u
->
öput_fûãr
 = 
ngx_hâp_memˇched_fûãr
;

206 
u
->
öput_fûãr_˘x
 = 
˘x
;

208 
r
->
maö
->
cou¡
++;

210 
	`ngx_hâp_up°ªam_öô
(
r
);

212  
NGX_DONE
;

213 
	}
}

216 
ngx_öt_t


217 
	$ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

219 
size_t
 
Àn
;

220 
uöçå_t
 
esˇ≥
;

221 
ngx_buf_t
 *
b
;

222 
ngx_chaö_t
 *
˛
;

223 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

224 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

225 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

227 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

229 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
mlcf
->
ödex
);

231 i‡(
vv
 =
NULL
 || vv->
nŸ_found
 || vv->
Àn
 == 0) {

232 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

234  
NGX_ERROR
;

237 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vv
->
d©a
, vv->
Àn
, 
NGX_ESCAPE_MEMCACHED
);

239 
Àn
 = ("gë "Ë- 1 + 
vv
->À¿+ 
esˇ≥
 + (
CRLF
) - 1;

241 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

242 i‡(
b
 =
NULL
) {

243  
NGX_ERROR
;

246 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

247 i‡(
˛
 =
NULL
) {

248  
NGX_ERROR
;

251 
˛
->
buf
 = 
b
;

252 
˛
->
√xt
 = 
NULL
;

254 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

256 *
b
->
œ°
++ = 'g'; *b->last++ = 'e'; *b->last++ = 't'; *b->last++ = ' ';

258 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

260 
˘x
->
key
.
d©a
 = 
b
->
œ°
;

262 i‡(
esˇ≥
 == 0) {

263 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vv
->
d©a
, vv->
Àn
);

266 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
(b->œ°, 
vv
->
d©a
, vv->
Àn
,

267 
NGX_ESCAPE_MEMCACHED
);

270 
˘x
->
key
.
Àn
 = 
b
->
œ°
 - ctx->key.
d©a
;

272 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

273 "hâ∞memˇchedÑeque°: \"%V\"", &
˘x
->
key
);

275 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

277  
NGX_OK
;

278 
	}
}

281 
ngx_öt_t


282 
	$ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

284  
NGX_OK
;

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

291 
u_ch¨
 *
p
, *
°¨t
;

292 
ngx_°r_t
 
löe
;

293 
ngx_uöt_t
 
Êags
;

294 
ngx_èbÀ_ñt_t
 *
h
;

295 
ngx_hâp_up°ªam_t
 *
u
;

296 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

297 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

299 
u
 = 
r
->
up°ªam
;

301 
p
 = 
u
->
buf„r
.
pos
;Ö < u->buf„r.
œ°
;Ö++) {

302 i‡(*
p
 =
LF
) {

303 
found
;

307  
NGX_AGAIN
;

309 
found
:

311 
löe
.
d©a
 = 
u
->
buf„r
.
pos
;

312 
löe
.
Àn
 = 
p
 - 
u
->
buf„r
.
pos
;

314 i‡(
löe
.
Àn
 =0 || *(
p
 - 1Ë!
CR
) {

315 
no_vÆid
;

318 *
p
 = '\0';

319 
löe
.
Àn
--;

321 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

322 "memˇched: \"%V\"", &
löe
);

324 
p
 = 
u
->
buf„r
.
pos
;

326 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

327 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

329 i‡(
	`ngx_°∫cmp
(
p
, "VALUE ", ("VALUE ") - 1) == 0) {

331 
p
 += ("VALUE ") - 1;

333 i‡(
	`ngx_°∫cmp
(
p
, 
˘x
->
key
.
d©a
, ctx->key.
Àn
) != 0) {

334 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

337 &
löe
, &
˘x
->
key
);

339  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

342 
p
 +
˘x
->
key
.
Àn
;

344 i‡(*
p
++ != ' ') {

345 
no_vÆid
;

350 
°¨t
 = 
p
;

352 *
p
) {

353 i‡(*
p
++ == ' ') {

354 i‡(
mlcf
->
gzù_Êag
) {

355 
Êags
;

357 
Àngth
;

362 
no_vÆid
;

364 
Êags
:

366 
Êags
 = 
	`ngx_©oi
(
°¨t
, 
p
 - start - 1);

368 i‡(
Êags
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

369 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

372 &
löe
, &
˘x
->
key
);

373  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

376 i‡(
Êags
 & 
mlcf
->
gzù_Êag
) {

377 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

378 i‡(
h
 =
NULL
) {

379  
NGX_ERROR
;

382 
h
->
hash
 = 1;

383 
h
->
key
.
Àn
 = ("Content-Encoding") - 1;

384 
h
->
key
.
d©a
 = (
u_ch¨
 *) "Content-Encoding";

385 
h
->
vÆue
.
Àn
 = ("gzip") - 1;

386 
h
->
vÆue
.
d©a
 = (
u_ch¨
 *) "gzip";

388 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

391 
Àngth
:

393 
°¨t
 = 
p
;

394 
p
 = 
löe
.
d©a
 +Üöe.
Àn
;

396 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
°¨t
, 
p
 - start);

397 i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

401 &
löe
, &
˘x
->
key
);

402  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

405 
u
->
hódîs_ö
.
°©us_n
 = 200;

406 
u
->
°©e
->
°©us
 = 200;

407 
u
->
buf„r
.
pos
 = 
p
 + (
CRLF
) - 1;

409  
NGX_OK
;

412 i‡(
	`ngx_°rcmp
(
p
, "END\x0d") == 0) {

413 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

414 "key: \"%V\" wa†nŸ found by memˇched", &
˘x
->
key
);

416 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

417 
u
->
hódîs_ö
.
°©us_n
 = 404;

418 
u
->
°©e
->
°©us
 = 404;

419 
u
->
buf„r
.
pos
 = 
p
 + ("END" 
CRLF
) - 1;

420 
u
->
kì∑live
 = 1;

422  
NGX_OK
;

425 
no_vÆid
:

427 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

428 "memˇched síàövÆidÑe•⁄£: \"%V\"", &
löe
);

430  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

431 
	}
}

434 
ngx_öt_t


435 
	$ngx_hâp_memˇched_fûãr_öô
(*
d©a
)

437 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

439 
ngx_hâp_up°ªam_t
 *
u
;

441 
u
 = 
˘x
->
ªque°
->
up°ªam
;

443 i‡(
u
->
hódîs_ö
.
°©us_n
 != 404) {

444 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
 + 
NGX_HTTP_MEMCACHED_END
;

445 
˘x
->
ª°
 = 
NGX_HTTP_MEMCACHED_END
;

448 
u
->
Àngth
 = 0;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

458 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

460 
u_ch¨
 *
œ°
;

461 
ngx_buf_t
 *
b
;

462 
ngx_chaö_t
 *
˛
, **
Œ
;

463 
ngx_hâp_up°ªam_t
 *
u
;

465 
u
 = 
˘x
->
ªque°
->
up°ªam
;

466 
b
 = &
u
->
buf„r
;

468 i‡(
u
->
Àngth
 =(
ssize_t
Ë
˘x
->
ª°
) {

470 i‡(
	`ngx_°∫cmp
(
b
->
œ°
,

471 
ngx_hâp_memˇched_íd
 + 
NGX_HTTP_MEMCACHED_END
 - 
˘x
->
ª°
,

472 
byãs
)

475 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

478 
u
->
Àngth
 = 0;

479 
˘x
->
ª°
 = 0;

481  
NGX_OK
;

484 
u
->
Àngth
 -
byãs
;

485 
˘x
->
ª°
 -
byãs
;

487 i‡(
u
->
Àngth
 == 0) {

488 
u
->
kì∑live
 = 1;

491  
NGX_OK
;

494 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

495 
Œ
 = &
˛
->
√xt
;

498 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
˘x
->
ªque°
->
poﬁ
, &
u
->
‰ì_bufs
);

499 i‡(
˛
 =
NULL
) {

500  
NGX_ERROR
;

503 
˛
->
buf
->
Êush
 = 1;

504 
˛
->
buf
->
mem‹y
 = 1;

506 *
Œ
 = 
˛
;

508 
œ°
 = 
b
->last;

509 
˛
->
buf
->
pos
 = 
œ°
;

510 
b
->
œ°
 +
byãs
;

511 
˛
->
buf
->
œ°
 = 
b
->last;

512 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

514 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

516 
byãs
, 
b
->
œ°
 - b->
pos
, 
u
->
Àngth
, 
˘x
->
ª°
);

518 i‡(
byãs
 <(
ssize_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
)) {

519 
u
->
Àngth
 -
byãs
;

520  
NGX_OK
;

523 
œ°
 +(
size_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
);

525 i‡(
	`ngx_°∫cmp
(
œ°
, 
ngx_hâp_memˇched_íd
, 
b
->last -Üast) != 0) {

526 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

529 
b
->
œ°
 =Üast;

530 
˛
->
buf
->
œ°
 =Üast;

531 
u
->
Àngth
 = 0;

532 
˘x
->
ª°
 = 0;

534  
NGX_OK
;

537 
˘x
->
ª°
 -
b
->
œ°
 -Üast;

538 
b
->
œ°
 =Üast;

539 
˛
->
buf
->
œ°
 =Üast;

540 
u
->
Àngth
 = 
˘x
->
ª°
;

542 i‡(
u
->
Àngth
 == 0) {

543 
u
->
kì∑live
 = 1;

546  
NGX_OK
;

547 
	}
}

551 
	$ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

553 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

556 
	}
}

560 
	$ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

562 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

565 
	}
}

569 
	$ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

571 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
;

573 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_memˇched_loc_c⁄f_t
));

574 i‡(
c⁄f
 =
NULL
) {

575  
NULL
;

588 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

589 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

590 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

591 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

593 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

596 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

597 
c⁄f
->
up°ªam
.
buf„rög
 = 0;

598 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 0;

599 
c⁄f
->
up°ªam
.
£nd_low©
 = 0;

600 
c⁄f
->
up°ªam
.
bufs
.
num
 = 0;

601 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 0;

602 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 0;

603 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 0;

604 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 1;

605 
c⁄f
->
up°ªam
.
öãr˚±_404
 = 1;

606 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 0;

607 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 0;

609 
c⁄f
->
ödex
 = 
NGX_CONF_UNSET
;

610 
c⁄f
->
gzù_Êag
 = 
NGX_CONF_UNSET_UINT
;

612  
c⁄f
;

613 
	}
}

617 
	$ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

619 
ngx_hâp_memˇched_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

620 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

622 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

623 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

625 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

626 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

628 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

629 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

631 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

632 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

634 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

635 
¥ev
->
up°ªam
.
buf„r_size
,

636 (
size_t
Ë
ngx_∑gesize
);

638 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

639 
¥ev
->
up°ªam
.
√xt_up°ªam
,

640 (
NGX_CONF_BITMASK_SET


641 |
NGX_HTTP_UPSTREAM_FT_ERROR


642 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

644 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

645 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


646 |
NGX_HTTP_UPSTREAM_FT_OFF
;

649 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

650 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

653 i‡(
c⁄f
->
ödex
 =
NGX_CONF_UNSET
) {

654 
c⁄f
->
ödex
 = 
¥ev
->index;

657 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_Êag
, 
¥ev
->gzip_flag, 0);

659  
NGX_CONF_OK
;

660 
	}
}

664 
	$ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

666 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
 = 
c⁄f
;

668 
ngx_°r_t
 *
vÆue
;

669 
ngx_uæ_t
 
u
;

670 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

672 i‡(
mlcf
->
up°ªam
.upstream) {

676 
vÆue
 = 
cf
->
¨gs
->
ñts
;

678 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

680 
u
.
uæ
 = 
vÆue
[1];

681 
u
.
no_ªsﬁve
 = 1;

683 
mlcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

684 i‡(
mlcf
->
up°ªam
.up°ªam =
NULL
) {

685  
NGX_CONF_ERROR
;

688 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

690 
˛cf
->
h™dÀr
 = 
ngx_hâp_memˇched_h™dÀr
;

692 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

693 
˛cf
->
auto_ªdúe˘
 = 1;

696 
mlcf
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_memˇched_key
);

698 i‡(
mlcf
->
ödex
 =
NGX_ERROR
) {

699  
NGX_CONF_ERROR
;

702  
NGX_CONF_OK
;

703 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_mp4_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_MP4_TRAK_ATOM
 0

	)

13 
	#NGX_HTTP_MP4_TKHD_ATOM
 1

	)

14 
	#NGX_HTTP_MP4_MDIA_ATOM
 2

	)

15 
	#NGX_HTTP_MP4_MDHD_ATOM
 3

	)

16 
	#NGX_HTTP_MP4_HDLR_ATOM
 4

	)

17 
	#NGX_HTTP_MP4_MINF_ATOM
 5

	)

18 
	#NGX_HTTP_MP4_VMHD_ATOM
 6

	)

19 
	#NGX_HTTP_MP4_SMHD_ATOM
 7

	)

20 
	#NGX_HTTP_MP4_DINF_ATOM
 8

	)

21 
	#NGX_HTTP_MP4_STBL_ATOM
 9

	)

22 
	#NGX_HTTP_MP4_STSD_ATOM
 10

	)

23 
	#NGX_HTTP_MP4_STTS_ATOM
 11

	)

24 
	#NGX_HTTP_MP4_STTS_DATA
 12

	)

25 
	#NGX_HTTP_MP4_STSS_ATOM
 13

	)

26 
	#NGX_HTTP_MP4_STSS_DATA
 14

	)

27 
	#NGX_HTTP_MP4_CTTS_ATOM
 15

	)

28 
	#NGX_HTTP_MP4_CTTS_DATA
 16

	)

29 
	#NGX_HTTP_MP4_STSC_ATOM
 17

	)

30 
	#NGX_HTTP_MP4_STSC_START
 18

	)

31 
	#NGX_HTTP_MP4_STSC_DATA
 19

	)

32 
	#NGX_HTTP_MP4_STSC_END
 20

	)

33 
	#NGX_HTTP_MP4_STSZ_ATOM
 21

	)

34 
	#NGX_HTTP_MP4_STSZ_DATA
 22

	)

35 
	#NGX_HTTP_MP4_STCO_ATOM
 23

	)

36 
	#NGX_HTTP_MP4_STCO_DATA
 24

	)

37 
	#NGX_HTTP_MP4_CO64_ATOM
 25

	)

38 
	#NGX_HTTP_MP4_CO64_DATA
 26

	)

40 
	#NGX_HTTP_MP4_LAST_ATOM
 
NGX_HTTP_MP4_CO64_DATA


	)

44 
size_t
 
	mbuf„r_size
;

45 
size_t
 
	mmax_buf„r_size
;

46 } 
	tngx_hâp_mp4_c⁄f_t
;

50 
u_ch¨
 
	mchunk
[4];

51 
u_ch¨
 
	mßm∂es
[4];

52 
u_ch¨
 
	mid
[4];

53 } 
	tngx_mp4_°sc_íåy_t
;

57 
uöt32_t
 
	mtimesˇÀ
;

58 
uöt32_t
 
	mtime_to_ßm∂e_íåõs
;

59 
uöt32_t
 
	mßm∂e_to_chunk_íåõs
;

60 
uöt32_t
 
	msync_ßm∂es_íåõs
;

61 
uöt32_t
 
	mcomposôi⁄_off£t_íåõs
;

62 
uöt32_t
 
	mßm∂e_sizes_íåõs
;

63 
uöt32_t
 
	mchunks
;

65 
ngx_uöt_t
 
	m°¨t_ßm∂e
;

66 
ngx_uöt_t
 
	míd_ßm∂e
;

67 
ngx_uöt_t
 
	m°¨t_chunk
;

68 
ngx_uöt_t
 
	míd_chunk
;

69 
ngx_uöt_t
 
	m°¨t_chunk_ßm∂es
;

70 
ngx_uöt_t
 
	míd_chunk_ßm∂es
;

71 
uöt64_t
 
	m°¨t_chunk_ßm∂es_size
;

72 
uöt64_t
 
	míd_chunk_ßm∂es_size
;

73 
off_t
 
	m°¨t_off£t
;

74 
off_t
 
	míd_off£t
;

76 
size_t
 
	mtkhd_size
;

77 
size_t
 
	mmdhd_size
;

78 
size_t
 
	mhdÃ_size
;

79 
size_t
 
	mvmhd_size
;

80 
size_t
 
	msmhd_size
;

81 
size_t
 
	mdöf_size
;

82 
size_t
 
	msize
;

84 
ngx_chaö_t
 
	mout
[
NGX_HTTP_MP4_LAST_ATOM
 + 1];

86 
ngx_buf_t
 
	måak_©om_buf
;

87 
ngx_buf_t
 
	mtkhd_©om_buf
;

88 
ngx_buf_t
 
	mmdü_©om_buf
;

89 
ngx_buf_t
 
	mmdhd_©om_buf
;

90 
ngx_buf_t
 
	mhdÃ_©om_buf
;

91 
ngx_buf_t
 
	mmöf_©om_buf
;

92 
ngx_buf_t
 
	mvmhd_©om_buf
;

93 
ngx_buf_t
 
	msmhd_©om_buf
;

94 
ngx_buf_t
 
	mdöf_©om_buf
;

95 
ngx_buf_t
 
	m°bl_©om_buf
;

96 
ngx_buf_t
 
	m°sd_©om_buf
;

97 
ngx_buf_t
 
	m°ts_©om_buf
;

98 
ngx_buf_t
 
	m°ts_d©a_buf
;

99 
ngx_buf_t
 
	m°ss_©om_buf
;

100 
ngx_buf_t
 
	m°ss_d©a_buf
;

101 
ngx_buf_t
 
	m˘ts_©om_buf
;

102 
ngx_buf_t
 
	m˘ts_d©a_buf
;

103 
ngx_buf_t
 
	m°sc_©om_buf
;

104 
ngx_buf_t
 
	m°sc_°¨t_chunk_buf
;

105 
ngx_buf_t
 
	m°sc_íd_chunk_buf
;

106 
ngx_buf_t
 
	m°sc_d©a_buf
;

107 
ngx_buf_t
 
	m°sz_©om_buf
;

108 
ngx_buf_t
 
	m°sz_d©a_buf
;

109 
ngx_buf_t
 
	m°co_©om_buf
;

110 
ngx_buf_t
 
	m°co_d©a_buf
;

111 
ngx_buf_t
 
	mco64_©om_buf
;

112 
ngx_buf_t
 
	mco64_d©a_buf
;

114 
ngx_mp4_°sc_íåy_t
 
	m°sc_°¨t_chunk_íåy
;

115 
ngx_mp4_°sc_íåy_t
 
	m°sc_íd_chunk_íåy
;

116 } 
	tngx_hâp_mp4_åak_t
;

120 
ngx_fûe_t
 
	mfûe
;

122 
u_ch¨
 *
	mbuf„r
;

123 
u_ch¨
 *
	mbuf„r_°¨t
;

124 
u_ch¨
 *
	mbuf„r_pos
;

125 
u_ch¨
 *
	mbuf„r_íd
;

126 
size_t
 
	mbuf„r_size
;

128 
off_t
 
	moff£t
;

129 
off_t
 
	míd
;

130 
off_t
 
	mc⁄ã¡_Àngth
;

131 
ngx_uöt_t
 
	m°¨t
;

132 
ngx_uöt_t
 
	mÀngth
;

133 
uöt32_t
 
	mtimesˇÀ
;

134 
ngx_hâp_ªque°_t
 *
	mªque°
;

135 
ngx_¨øy_t
 
	måak
;

136 
ngx_hâp_mp4_åak_t
 
	måaks
[2];

138 
size_t
 
	m·yp_size
;

139 
size_t
 
	mmoov_size
;

141 
ngx_chaö_t
 *
	mout
;

142 
ngx_chaö_t
 
	m·yp_©om
;

143 
ngx_chaö_t
 
	mmoov_©om
;

144 
ngx_chaö_t
 
	mmvhd_©om
;

145 
ngx_chaö_t
 
	mmd©_©om
;

146 
ngx_chaö_t
 
	mmd©_d©a
;

148 
ngx_buf_t
 
	m·yp_©om_buf
;

149 
ngx_buf_t
 
	mmoov_©om_buf
;

150 
ngx_buf_t
 
	mmvhd_©om_buf
;

151 
ngx_buf_t
 
	mmd©_©om_buf
;

152 
ngx_buf_t
 
	mmd©_d©a_buf
;

154 
u_ch¨
 
	mmoov_©om_hódî
[8];

155 
u_ch¨
 
	mmd©_©om_hódî
[16];

156 } 
	tngx_hâp_mp4_fûe_t
;

160 *
	m«me
;

161 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_mp4_fûe_t
 *
	mmp4
,

162 
uöt64_t
 
	m©om_d©a_size
);

163 } 
	tngx_hâp_mp4_©om_h™dÀr_t
;

166 
	#ngx_mp4_©om_hódî
(
mp4
Ë(mp4->
buf„r_pos
 - 8)

	)

167 
	#ngx_mp4_©om_d©a
(
mp4
Ëmp4->
buf„r_pos


	)

168 
	#ngx_mp4_©om_d©a_size
(
t
Ë(
uöt64_t
Ë(—Ë- 8)

	)

171 
	#ngx_mp4_©om_√xt
(
mp4
, 
n
) \

172 
mp4
->
buf„r_pos
 +(
size_t
Ë
n
; \

173 
mp4
->
off£t
 +
n


	)

176 
	#ngx_mp4_£t_©om_«me
(
p
, 
n1
, 
n2
, 
n3
, 
n4
) \

177 ((
u_ch¨
 *Ë(
p
))[4] = 
n1
; \

178 ((
u_ch¨
 *Ë(
p
))[5] = 
n2
; \

179 ((
u_ch¨
 *Ë(
p
))[6] = 
n3
; \

180 ((
u_ch¨
 *Ë(
p
))[7] = 
n4


	)

182 
	#ngx_mp4_gë_32vÆue
(
p
) \

183 –((
uöt32_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 24) \

184 + ( ((
u_ch¨
 *Ë(
p
))[1] << 16) \

185 + ( ((
u_ch¨
 *Ë(
p
))[2] << 8) \

186 + ( ((
u_ch¨
 *Ë(
p
))[3]Ë)

	)

188 
	#ngx_mp4_£t_32vÆue
(
p
, 
n
) \

189 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
n
) >> 24); \

190 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
n
) >> 16); \

191 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
n
) >> 8); \

192 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë(
n
)

	)

194 
	#ngx_mp4_gë_64vÆue
(
p
) \

195 –((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 56) \

196 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[1] << 48) \

197 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[2] << 40) \

198 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[3] << 32) \

199 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[4] << 24) \

200 + ( ((
u_ch¨
 *Ë(
p
))[5] << 16) \

201 + ( ((
u_ch¨
 *Ë(
p
))[6] << 8) \

202 + ( ((
u_ch¨
 *Ë(
p
))[7]Ë)

	)

204 
	#ngx_mp4_£t_64vÆue
(
p
, 
n
) \

205 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 56); \

206 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 48); \

207 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 40); \

208 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 32); \

209 ((
u_ch¨
 *Ë(
p
))[4] = (u_ch¨Ë–(
n
) >> 24); \

210 ((
u_ch¨
 *Ë(
p
))[5] = (u_ch¨Ë–(
n
) >> 16); \

211 ((
u_ch¨
 *Ë(
p
))[6] = (u_ch¨Ë–(
n
) >> 8); \

212 ((
u_ch¨
 *Ë(
p
))[7] = (u_ch¨Ë(
n
)

	)

214 
	#ngx_mp4_œ°_åak
(
mp4
) \

215 &((
ngx_hâp_mp4_åak_t
 *Ë
mp4
->
åak
.
ñts
)[mp4->åak.
√…s
 - 1]

	)

218 
ngx_öt_t
 
ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

220 
ngx_öt_t
 
ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
);

221 
ngx_öt_t
 
ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

222 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
);

223 
ngx_öt_t
 
ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
);

224 
ngx_öt_t
 
ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

225 
uöt64_t
 
©om_d©a_size
);

226 
ngx_öt_t
 
ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

227 
uöt64_t
 
©om_d©a_size
);

228 
ngx_öt_t
 
ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

229 
uöt64_t
 
©om_d©a_size
);

230 
size_t
 
ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

231 
off_t
 
°¨t_off£t
, off_à
íd_off£t
);

232 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

233 
uöt64_t
 
©om_d©a_size
);

234 
ngx_öt_t
 
ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

235 
uöt64_t
 
©om_d©a_size
);

236 
ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

237 
ngx_hâp_mp4_åak_t
 *
åak
);

238 
ngx_öt_t
 
ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

239 
uöt64_t
 
©om_d©a_size
);

240 
ngx_öt_t
 
ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

241 
uöt64_t
 
©om_d©a_size
);

242 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

243 
uöt64_t
 
©om_d©a_size
);

244 
ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

245 
ngx_hâp_mp4_åak_t
 *
åak
);

246 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

247 
uöt64_t
 
©om_d©a_size
);

248 
ngx_öt_t
 
ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

249 
uöt64_t
 
©om_d©a_size
);

250 
ngx_öt_t
 
ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

251 
uöt64_t
 
©om_d©a_size
);

252 
ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

253 
ngx_hâp_mp4_åak_t
 *
åak
);

254 
ngx_öt_t
 
ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

255 
uöt64_t
 
©om_d©a_size
);

256 
ngx_öt_t
 
ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

257 
uöt64_t
 
©om_d©a_size
);

258 
ngx_öt_t
 
ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

259 
uöt64_t
 
©om_d©a_size
);

260 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

261 
uöt64_t
 
©om_d©a_size
);

262 
ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

263 
ngx_hâp_mp4_åak_t
 *
åak
);

264 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

265 
uöt64_t
 
©om_d©a_size
);

266 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

267 
uöt64_t
 
©om_d©a_size
);

268 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

269 
ngx_hâp_mp4_åak_t
 *
åak
);

270 
ngx_öt_t
 
ngx_hâp_mp4_¸›_°ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

271 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

272 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

273 
uöt64_t
 
©om_d©a_size
);

274 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

275 
ngx_hâp_mp4_åak_t
 *
åak
);

276 
ngx_hâp_mp4_¸›_°ss_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

277 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

278 
ngx_öt_t
 
ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

279 
uöt64_t
 
©om_d©a_size
);

280 
ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

281 
ngx_hâp_mp4_åak_t
 *
åak
);

282 
ngx_hâp_mp4_¸›_˘ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

283 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

284 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

285 
uöt64_t
 
©om_d©a_size
);

286 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

287 
ngx_hâp_mp4_åak_t
 *
åak
);

288 
ngx_öt_t
 
ngx_hâp_mp4_¸›_°sc_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

289 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

290 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

291 
uöt64_t
 
©om_d©a_size
);

292 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

293 
ngx_hâp_mp4_åak_t
 *
åak
);

294 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

295 
uöt64_t
 
©om_d©a_size
);

296 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

297 
ngx_hâp_mp4_åak_t
 *
åak
);

298 
ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

299 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
);

300 
ngx_öt_t
 
ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

301 
uöt64_t
 
©om_d©a_size
);

302 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

303 
ngx_hâp_mp4_åak_t
 *
åak
);

304 
ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

305 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
);

307 *
ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

308 *
ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

309 *
ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

312 
ngx_comm™d_t
 
	gngx_hâp_mp4_comm™ds
[] = {

314 { 
ngx_°rög
("mp4"),

315 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

316 
ngx_hâp_mp4
,

319 
NULL
 },

321 { 
ngx_°rög
("mp4_buffer_size"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

323 
ngx_c⁄f_£t_size_¶Ÿ
,

324 
NGX_HTTP_LOC_CONF_OFFSET
,

325 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
buf„r_size
),

326 
NULL
 },

328 { 
ngx_°rög
("mp4_max_buffer_size"),

329 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

330 
ngx_c⁄f_£t_size_¶Ÿ
,

331 
NGX_HTTP_LOC_CONF_OFFSET
,

332 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
max_buf„r_size
),

333 
NULL
 },

335 
ngx_nuŒ_comm™d


339 
ngx_hâp_moduÀ_t
 
	gngx_hâp_mp4_moduÀ_˘x
 = {

340 
NULL
,

341 
NULL
,

343 
NULL
,

344 
NULL
,

346 
NULL
,

347 
NULL
,

349 
ngx_hâp_mp4_¸óã_c⁄f
,

350 
ngx_hâp_mp4_mîge_c⁄f


354 
ngx_moduÀ_t
 
	gngx_hâp_mp4_moduÀ
 = {

355 
NGX_MODULE_V1
,

356 &
ngx_hâp_mp4_moduÀ_˘x
,

357 
ngx_hâp_mp4_comm™ds
,

358 
NGX_HTTP_MODULE
,

359 
NULL
,

360 
NULL
,

361 
NULL
,

362 
NULL
,

363 
NULL
,

364 
NULL
,

365 
NULL
,

366 
NGX_MODULE_V1_PADDING


370 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_©oms
[] = {

371 { "·yp", 
ngx_hâp_mp4_ªad_·yp_©om
 },

372 { "moov", 
ngx_hâp_mp4_ªad_moov_©om
 },

373 { "md©", 
ngx_hâp_mp4_ªad_md©_©om
 },

374 { 
NULL
, NULL }

377 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_moov_©oms
[] = {

378 { "mvhd", 
ngx_hâp_mp4_ªad_mvhd_©om
 },

379 { "åak", 
ngx_hâp_mp4_ªad_åak_©om
 },

380 { "cmov", 
ngx_hâp_mp4_ªad_cmov_©om
 },

381 { 
NULL
, NULL }

384 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_åak_©oms
[] = {

385 { "tkhd", 
ngx_hâp_mp4_ªad_tkhd_©om
 },

386 { "mdü", 
ngx_hâp_mp4_ªad_mdü_©om
 },

387 { 
NULL
, NULL }

390 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_mdü_©oms
[] = {

391 { "mdhd", 
ngx_hâp_mp4_ªad_mdhd_©om
 },

392 { "hdÃ", 
ngx_hâp_mp4_ªad_hdÃ_©om
 },

393 { "möf", 
ngx_hâp_mp4_ªad_möf_©om
 },

394 { 
NULL
, NULL }

397 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_möf_©oms
[] = {

398 { "vmhd", 
ngx_hâp_mp4_ªad_vmhd_©om
 },

399 { "smhd", 
ngx_hâp_mp4_ªad_smhd_©om
 },

400 { "döf", 
ngx_hâp_mp4_ªad_döf_©om
 },

401 { "°bl", 
ngx_hâp_mp4_ªad_°bl_©om
 },

402 { 
NULL
, NULL }

405 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_°bl_©oms
[] = {

406 { "°sd", 
ngx_hâp_mp4_ªad_°sd_©om
 },

407 { "°ts", 
ngx_hâp_mp4_ªad_°ts_©om
 },

408 { "°ss", 
ngx_hâp_mp4_ªad_°ss_©om
 },

409 { "˘ts", 
ngx_hâp_mp4_ªad_˘ts_©om
 },

410 { "°sc", 
ngx_hâp_mp4_ªad_°sc_©om
 },

411 { "°sz", 
ngx_hâp_mp4_ªad_°sz_©om
 },

412 { "°co", 
ngx_hâp_mp4_ªad_°co_©om
 },

413 { "co64", 
ngx_hâp_mp4_ªad_co64_©om
 },

414 { 
NULL
, NULL }

418 
ngx_öt_t


419 
	$ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

421 
u_ch¨
 *
œ°
;

422 
size_t
 
roŸ
;

423 
ngx_öt_t
 
rc
, 
°¨t
, 
íd
;

424 
ngx_uöt_t
 
Àvñ
, 
Àngth
;

425 
ngx_°r_t
 
∑th
, 
vÆue
;

426 
ngx_log_t
 *
log
;

427 
ngx_buf_t
 *
b
;

428 
ngx_chaö_t
 
out
;

429 
ngx_hâp_mp4_fûe_t
 *
mp4
;

430 
ngx_›í_fûe_öfo_t
 
of
;

431 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

433 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

434  
NGX_HTTP_NOT_ALLOWED
;

437 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

438  
NGX_DECLINED
;

441 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

443 i‡(
rc
 !
NGX_OK
) {

444  
rc
;

447 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

448 i‡(
œ°
 =
NULL
) {

449  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

452 
log
 = 
r
->
c⁄√˘i⁄
->log;

454 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

456 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

457 "hâ∞mp4 fûíame: \"%V\"", &
∑th
);

459 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

461 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

463 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

464 
of
.
dúe˘io
 = 
NGX_MAX_OFF_T_VALUE
;

465 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

466 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

467 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

468 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

470 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

471  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

474 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

475 !
NGX_OK
)

477 
of
.
îr
) {

480  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

482 
NGX_ENOENT
:

483 
NGX_ENOTDIR
:

484 
NGX_ENAMETOOLONG
:

486 
Àvñ
 = 
NGX_LOG_ERR
;

487 
rc
 = 
NGX_HTTP_NOT_FOUND
;

490 
NGX_EACCES
:

491 #i‡(
NGX_HAVE_OPENAT
)

492 
NGX_EMLINK
:

493 
NGX_ELOOP
:

496 
Àvñ
 = 
NGX_LOG_ERR
;

497 
rc
 = 
NGX_HTTP_FORBIDDEN
;

502 
Àvñ
 = 
NGX_LOG_CRIT
;

503 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

507 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

508 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

509 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

512  
rc
;

515 i‡(!
of
.
is_fûe
) {

517 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

518 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

519 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

522  
NGX_DECLINED
;

525 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

526 
r
->
Ælow_ønges
 = 1;

528 
°¨t
 = -1;

529 
Àngth
 = 0;

530 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

531 
mp4
 = 
NULL
;

532 
b
 = 
NULL
;

534 i‡(
r
->
¨gs
.
Àn
) {

536 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

544 
	`ngx_£t_î∫o
(0);

545 
°¨t
 = (Ë(
	`°πod
((*Ë
vÆue
.
d©a
, 
NULL
) * 1000);

547 i‡(
ngx_î∫o
 != 0) {

548 
°¨t
 = -1;

552 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"íd", 3, &
vÆue
Ë=
NGX_OK
) {

554 
	`ngx_£t_î∫o
(0);

555 
íd
 = (Ë(
	`°πod
((*Ë
vÆue
.
d©a
, 
NULL
) * 1000);

557 i‡(
ngx_î∫o
 != 0) {

558 
íd
 = -1;

561 i‡(
íd
 > 0) {

562 i‡(
°¨t
 < 0) {

563 
°¨t
 = 0;

566 i‡(
íd
 > 
°¨t
) {

567 
Àngth
 = 
íd
 - 
°¨t
;

573 i‡(
°¨t
 >= 0) {

574 
r
->
sögÀ_ønge
 = 1;

576 
mp4
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_mp4_fûe_t
));

577 i‡(
mp4
 =
NULL
) {

578  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

581 
mp4
->
fûe
.
fd
 = 
of
.fd;

582 
mp4
->
fûe
.
«me
 = 
∑th
;

583 
mp4
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

584 
mp4
->
íd
 = 
of
.
size
;

585 
mp4
->
°¨t
 = (
ngx_uöt_t
) start;

586 
mp4
->
Àngth
 =Üength;

587 
mp4
->
ªque°
 = 
r
;

589 
	`ngx_hâp_mp4_¥o˚ss
(
mp4
)) {

591 
NGX_DECLINED
:

592 i‡(
mp4
->
buf„r
) {

593 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

596 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

597 
mp4
 = 
NULL
;

601 
NGX_OK
:

602 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
mp4
->
c⁄ã¡_Àngth
;

606 i‡(
mp4
->
buf„r
) {

607 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

610 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

612  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

616 
log
->
a˘i⁄
 = "sending mp4Åo client";

618 i‡(
˛cf
->
dúe˘io
 <
of
.
size
) {

625 i‡(
	`ngx_dúe˘io_⁄
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

627 
ngx_dúe˘io_⁄_n
 " \"%s\" faûed", 
∑th
.
d©a
);

630 
of
.
is_dúe˘io
 = 1;

632 i‡(
mp4
) {

633 
mp4
->
fûe
.
dúe˘io
 = 1;

637 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

638 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

640 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

641  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

644 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

645  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

648 i‡(
mp4
 =
NULL
) {

649 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

650 i‡(
b
 =
NULL
) {

651  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

654 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

655 i‡(
b
->
fûe
 =
NULL
) {

656  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

660 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

662 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

663  
rc
;

666 i‡(
mp4
) {

667  
	`ngx_hâp_ouçut_fûãr
(
r
, 
mp4
->
out
);

670 
b
->
fûe_pos
 = 0;

671 
b
->
fûe_œ°
 = 
of
.
size
;

673 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

674 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

675 
b
->
œ°_ö_chaö
 = 1;

677 
b
->
fûe
->
fd
 = 
of
.fd;

678 
b
->
fûe
->
«me
 = 
∑th
;

679 
b
->
fûe
->
log
 =Üog;

680 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

682 
out
.
buf
 = 
b
;

683 
out
.
√xt
 = 
NULL
;

685  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

686 
	}
}

689 
ngx_öt_t


690 
	$ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
)

692 
off_t
 
°¨t_off£t
, 
íd_off£t
, 
adju°mít
;

693 
ngx_öt_t
 
rc
;

694 
ngx_uöt_t
 
i
, 
j
;

695 
ngx_chaö_t
 **
¥ev
;

696 
ngx_hâp_mp4_åak_t
 *
åak
;

697 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

699 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

700 "mp4 sèπ:%ui,Üígth:%ui", 
mp4
->
°¨t
, mp4->
Àngth
);

702 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

704 
mp4
->
buf„r_size
 = 
c⁄f
->buffer_size;

706 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_©oms
, mp4->
íd
);

707 i‡(
rc
 !
NGX_OK
) {

708  
rc
;

711 i‡(
mp4
->
åak
.
√…s
 == 0) {

712 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

714 
mp4
->
fûe
.
«me
.
d©a
);

715  
NGX_ERROR
;

718 i‡(
mp4
->
md©_©om
.
buf
 =
NULL
) {

719 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

721 
mp4
->
fûe
.
«me
.
d©a
);

722  
NGX_ERROR
;

725 
¥ev
 = &
mp4
->
out
;

727 i‡(
mp4
->
·yp_©om
.
buf
) {

728 *
¥ev
 = &
mp4
->
·yp_©om
;

729 
¥ev
 = &
mp4
->
·yp_©om
.
√xt
;

732 *
¥ev
 = &
mp4
->
moov_©om
;

733 
¥ev
 = &
mp4
->
moov_©om
.
√xt
;

735 i‡(
mp4
->
mvhd_©om
.
buf
) {

736 
mp4
->
moov_size
 +mp4->
mvhd_©om_buf
.
œ°
 - mp4->mvhd_©om_buf.
pos
;

737 *
¥ev
 = &
mp4
->
mvhd_©om
;

738 
¥ev
 = &
mp4
->
mvhd_©om
.
√xt
;

741 
°¨t_off£t
 = 
mp4
->
íd
;

742 
íd_off£t
 = 0;

743 
åak
 = 
mp4
->åak.
ñts
;

745 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

747 i‡(
	`ngx_hâp_mp4_upd©e_°ts_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

748  
NGX_ERROR
;

751 i‡(
	`ngx_hâp_mp4_upd©e_°ss_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

752  
NGX_ERROR
;

755 
	`ngx_hâp_mp4_upd©e_˘ts_©om
(
mp4
, &
åak
[
i
]);

757 i‡(
	`ngx_hâp_mp4_upd©e_°sc_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

758  
NGX_ERROR
;

761 i‡(
	`ngx_hâp_mp4_upd©e_°sz_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

762  
NGX_ERROR
;

765 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

766 i‡(
	`ngx_hâp_mp4_upd©e_co64_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

767  
NGX_ERROR
;

771 i‡(
	`ngx_hâp_mp4_upd©e_°co_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

772  
NGX_ERROR
;

776 
	`ngx_hâp_mp4_upd©e_°bl_©om
(
mp4
, &
åak
[
i
]);

777 
	`ngx_hâp_mp4_upd©e_möf_©om
(
mp4
, &
åak
[
i
]);

778 
åak
[
i
].
size
 +åak[i].
mdhd_size
;

779 
åak
[
i
].
size
 +åak[i].
hdÃ_size
;

780 
	`ngx_hâp_mp4_upd©e_mdü_©om
(
mp4
, &
åak
[
i
]);

781 
åak
[
i
].
size
 +åak[i].
tkhd_size
;

782 
	`ngx_hâp_mp4_upd©e_åak_©om
(
mp4
, &
åak
[
i
]);

784 
mp4
->
moov_size
 +
åak
[
i
].
size
;

786 i‡(
°¨t_off£t
 > 
åak
[
i
].start_offset) {

787 
°¨t_off£t
 = 
åak
[
i
].start_offset;

790 i‡(
íd_off£t
 < 
åak
[
i
].end_offset) {

791 
íd_off£t
 = 
åak
[
i
].end_offset;

794 *
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
];

795 
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
√xt
;

797 
j
 = 0; j < 
NGX_HTTP_MP4_LAST_ATOM
 + 1; j++) {

798 i‡(
åak
[
i
].
out
[
j
].
buf
) {

799 *
¥ev
 = &
åak
[
i
].
out
[
j
];

800 
¥ev
 = &
åak
[
i
].
out
[
j
].
√xt
;

805 i‡(
íd_off£t
 < 
°¨t_off£t
) {

806 
íd_off£t
 = 
°¨t_off£t
;

809 
mp4
->
moov_size
 += 8;

811 
	`ngx_mp4_£t_32vÆue
(
mp4
->
moov_©om_hódî
, mp4->
moov_size
);

812 
	`ngx_mp4_£t_©om_«me
(
mp4
->
moov_©om_hódî
, 'm', 'o', 'o', 'v');

813 
mp4
->
c⁄ã¡_Àngth
 +mp4->
moov_size
;

815 *
¥ev
 = &
mp4
->
md©_©om
;

817 i‡(
°¨t_off£t
 > 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
) {

818 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

820 
mp4
->
fûe
.
«me
.
d©a
);

821  
NGX_ERROR
;

824 
adju°mít
 = 
mp4
->
·yp_size
 + mp4->
moov_size


825 + 
	`ngx_hâp_mp4_upd©e_md©_©om
(
mp4
, 
°¨t_off£t
, 
íd_off£t
)

826 - 
°¨t_off£t
;

828 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

829 "mp4ádju°mít:%O", 
adju°mít
);

831 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

832 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

833 
	`ngx_hâp_mp4_adju°_co64_©om
(
mp4
, &
åak
[
i
], 
adju°mít
);

835 
	`ngx_hâp_mp4_adju°_°co_©om
(
mp4
, &
åak
[
i
], (
öt32_t
Ë
adju°mít
);

839  
NGX_OK
;

840 
	}
}

844 
u_ch¨
 
	msize
[4];

845 
u_ch¨
 
	m«me
[4];

846 } 
	tngx_mp4_©om_hódî_t
;

849 
u_ch¨
 
	msize
[4];

850 
u_ch¨
 
	m«me
[4];

851 
u_ch¨
 
	msize64
[8];

852 } 
	tngx_mp4_©om_hódî64_t
;

855 
ngx_öt_t


856 
	$ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

857 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
)

859 
off_t
 
íd
;

860 
size_t
 
©om_hódî_size
;

861 
u_ch¨
 *
©om_hódî
, *
©om_«me
;

862 
uöt64_t
 
©om_size
;

863 
ngx_öt_t
 
rc
;

864 
ngx_uöt_t
 
n
;

866 
íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

868 
mp4
->
off£t
 < 
íd
) {

870 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
uöt32_t
)Ë!
NGX_OK
) {

871  
NGX_ERROR
;

874 
©om_hódî
 = 
mp4
->
buf„r_pos
;

875 
©om_size
 = 
	`ngx_mp4_gë_32vÆue
(
©om_hódî
);

876 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

878 i‡(
©om_size
 == 0) {

879 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

881  
NGX_OK
;

884 i‡(
©om_size
 < (
ngx_mp4_©om_hódî_t
)) {

886 i‡(
©om_size
 == 1) {

888 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî64_t
))

889 !
NGX_OK
)

891  
NGX_ERROR
;

895 
©om_hódî
 = 
mp4
->
buf„r_pos
;

896 
©om_size
 = 
	`ngx_mp4_gë_64vÆue
(
©om_hódî
 + 8);

897 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

900 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

902 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

903  
NGX_ERROR
;

907 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî_t
)Ë!
NGX_OK
) {

908  
NGX_ERROR
;

911 
©om_hódî
 = 
mp4
->
buf„r_pos
;

912 
©om_«me
 = 
©om_hódî
 + (
uöt32_t
);

914 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

916 4, 
©om_«me
, 
mp4
->
off£t
, 
©om_size
);

918 i‡(
©om_size
 > (
uöt64_t
Ë(
NGX_MAX_OFF_T_VALUE
 - 
mp4
->
off£t
)

919 || 
mp4
->
off£t
 + (
off_t
Ë
©om_size
 > 
íd
)

921 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

923 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

924  
NGX_ERROR
;

927 
n
 = 0; 
©om
[n].
«me
;Ç++) {

929 i‡(
	`ngx_°∫cmp
(
©om_«me
, 
©om
[
n
].
«me
, 4) == 0) {

931 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_hódî_size
);

933 
rc
 = 
©om
[
n
].
	`h™dÀr
(
mp4
, 
©om_size
 - 
©om_hódî_size
);

934 i‡(
rc
 !
NGX_OK
) {

935  
rc
;

938 
√xt
;

942 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_size
);

944 
√xt
:

948  
NGX_OK
;

949 
	}
}

952 
ngx_öt_t


953 
	$ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
)

955 
ssize_t
 
n
;

957 i‡(
mp4
->
buf„r_pos
 + 
size
 <mp4->
buf„r_íd
) {

958  
NGX_OK
;

961 i‡(
mp4
->
off£t
 + (
off_t
Ëmp4->
buf„r_size
 > mp4->
íd
) {

962 
mp4
->
buf„r_size
 = (
size_t
Ë(mp4->
íd
 - mp4->
off£t
);

965 i‡(
mp4
->
buf„r_size
 < 
size
) {

966 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

967 "\"%s\" mp4 fûêåunˇãd", 
mp4
->
fûe
.
«me
.
d©a
);

968  
NGX_ERROR
;

971 i‡(
mp4
->
buf„r
 =
NULL
) {

972 
mp4
->
buf„r
 = 
	`ngx_∑Œoc
(mp4->
ªque°
->
poﬁ
, mp4->
buf„r_size
);

973 i‡(
mp4
->
buf„r
 =
NULL
) {

974  
NGX_ERROR
;

977 
mp4
->
buf„r_°¨t
 = mp4->
buf„r
;

980 
n
 = 
	`ngx_ªad_fûe
(&
mp4
->
fûe
, mp4->
buf„r_°¨t
, mp4->
buf„r_size
,

981 
mp4
->
off£t
);

983 i‡(
n
 =
NGX_ERROR
) {

984  
NGX_ERROR
;

987 i‡((
size_t
Ë
n
 !
mp4
->
buf„r_size
) {

988 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
mp4
->
fûe
.
log
, 0,

989 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

990 
n
, 
mp4
->
buf„r_size
, mp4->
fûe
.
«me
.
d©a
);

991  
NGX_ERROR
;

994 
mp4
->
buf„r_pos
 = mp4->
buf„r_°¨t
;

995 
mp4
->
buf„r_íd
 = mp4->
buf„r_°¨t
 + mp4->
buf„r_size
;

997  
NGX_OK
;

998 
	}
}

1001 
ngx_öt_t


1002 
	$ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1004 
u_ch¨
 *
·yp_©om
;

1005 
size_t
 
©om_size
;

1006 
ngx_buf_t
 *
©om
;

1008 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 ftypátom");

1010 i‡(
©om_d©a_size
 > 1024

1011 || 
	`ngx_mp4_©om_d©a
(
mp4
Ë+ (
size_t
Ë
©om_d©a_size
 > mp4->
buf„r_íd
)

1013 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1015 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1016  
NGX_ERROR
;

1019 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1021 
·yp_©om
 = 
	`ngx_∑Œoc
(
mp4
->
ªque°
->
poﬁ
, 
©om_size
);

1022 i‡(
·yp_©om
 =
NULL
) {

1023  
NGX_ERROR
;

1026 
	`ngx_mp4_£t_32vÆue
(
·yp_©om
, 
©om_size
);

1027 
	`ngx_mp4_£t_©om_«me
(
·yp_©om
, 'f', 't', 'y', 'p');

1033 
	`ngx_mem˝y
(
·yp_©om
 + (
ngx_mp4_©om_hódî_t
),

1034 
	`ngx_mp4_©om_d©a
(
mp4
), (
size_t
Ë
©om_d©a_size
);

1036 
©om
 = &
mp4
->
·yp_©om_buf
;

1037 
©om
->
ãmp‹¨y
 = 1;

1038 
©om
->
pos
 = 
·yp_©om
;

1039 
©om
->
œ°
 = 
·yp_©om
 + 
©om_size
;

1041 
mp4
->
·yp_©om
.
buf
 = 
©om
;

1042 
mp4
->
·yp_size
 = 
©om_size
;

1043 
mp4
->
c⁄ã¡_Àngth
 = 
©om_size
;

1045 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1047  
NGX_OK
;

1048 
	}
}

1055 
	#NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 (4 * 1024)

	)

1057 
ngx_öt_t


1058 
	$ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1060 
ngx_öt_t
 
rc
;

1061 
ngx_uöt_t
 
no_md©
;

1062 
ngx_buf_t
 *
©om
;

1063 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

1065 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom");

1067 
no_md©
 = (
mp4
->
md©_©om
.
buf
 =
NULL
);

1069 i‡(
no_md©
 && 
mp4
->
°¨t
 =0 && mp4->
Àngth
 == 0) {

1074  
NGX_DECLINED
;

1077 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

1079 i‡(
©om_d©a_size
 > 
mp4
->
buf„r_size
) {

1081 i‡(
©om_d©a_size
 > 
c⁄f
->
max_buf„r_size
) {

1082 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1085 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1086  
NGX_ERROR
;

1089 
	`ngx_p‰ì
(
mp4
->
ªque°
->
poﬁ
, mp4->
buf„r
);

1090 
mp4
->
buf„r
 = 
NULL
;

1091 
mp4
->
buf„r_pos
 = 
NULL
;

1092 
mp4
->
buf„r_íd
 = 
NULL
;

1094 
mp4
->
buf„r_size
 = (
size_t
Ë
©om_d©a_size


1095 + 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 * 
no_md©
;

1098 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
size_t
Ë
©om_d©a_size
Ë!
NGX_OK
) {

1099  
NGX_ERROR
;

1102 
mp4
->
åak
.
ñts
 = &mp4->
åaks
;

1103 
mp4
->
åak
.
size
 = (
ngx_hâp_mp4_åak_t
);

1104 
mp4
->
åak
.
«Œoc
 = 2;

1105 
mp4
->
åak
.
poﬁ
 = mp4->
ªque°
->pool;

1107 
©om
 = &
mp4
->
moov_©om_buf
;

1108 
©om
->
ãmp‹¨y
 = 1;

1109 
©om
->
pos
 = 
mp4
->
moov_©om_hódî
;

1110 
©om
->
œ°
 = 
mp4
->
moov_©om_hódî
 + 8;

1112 
mp4
->
moov_©om
.
buf
 = &mp4->
moov_©om_buf
;

1114 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_moov_©oms
, 
©om_d©a_size
);

1116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom done");

1118 i‡(
no_md©
) {

1119 
mp4
->
buf„r_°¨t
 = mp4->
buf„r_pos
;

1120 
mp4
->
buf„r_size
 = 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
;

1122 i‡(
mp4
->
buf„r_°¨t
 + mp4->
buf„r_size
 > mp4->
buf„r_íd
) {

1123 
mp4
->
buf„r
 = 
NULL
;

1124 
mp4
->
buf„r_pos
 = 
NULL
;

1125 
mp4
->
buf„r_íd
 = 
NULL
;

1130 
mp4
->
off£t
 = mp4->
íd
;

1133  
rc
;

1134 
	}
}

1137 
ngx_öt_t


1138 
	$ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1140 
ngx_buf_t
 *
d©a
;

1142 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdatátom");

1144 
d©a
 = &
mp4
->
md©_d©a_buf
;

1145 
d©a
->
fûe
 = &
mp4
->file;

1146 
d©a
->
ö_fûe
 = 1;

1147 
d©a
->
œ°_buf
 = 1;

1148 
d©a
->
œ°_ö_chaö
 = 1;

1149 
d©a
->
fûe_œ°
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1151 
mp4
->
md©_©om
.
buf
 = &mp4->
md©_©om_buf
;

1152 
mp4
->
md©_©om
.
√xt
 = &mp4->
md©_d©a
;

1153 
mp4
->
md©_d©a
.
buf
 = 
d©a
;

1155 i‡(
mp4
->
åak
.
√…s
) {

1157 
mp4
->
off£t
 = mp4->
íd
;

1160 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1163  
NGX_OK
;

1164 
	}
}

1167 
size_t


1168 
	$ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
off_t
 
°¨t_off£t
,

1169 
off_t
 
íd_off£t
)

1171 
off_t
 
©om_d©a_size
;

1172 
u_ch¨
 *
©om_hódî
;

1173 
uöt32_t
 
©om_hódî_size
;

1174 
uöt64_t
 
©om_size
;

1175 
ngx_buf_t
 *
©om
;

1177 
©om_d©a_size
 = 
íd_off£t
 - 
°¨t_off£t
;

1178 
mp4
->
md©_d©a
.
buf
->
fûe_pos
 = 
°¨t_off£t
;

1179 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
 = 
íd_off£t
;

1181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1182 "md©Çew off£à@%O:%O", 
°¨t_off£t
, 
©om_d©a_size
);

1184 
©om_hódî
 = 
mp4
->
md©_©om_hódî
;

1186 i‡((
uöt64_t
Ë
©om_d©a_size
 > (uint64_t) 0xffffffff) {

1187 
©om_size
 = 1;

1188 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

1189 
	`ngx_mp4_£t_64vÆue
(
©om_hódî
 + (
ngx_mp4_©om_hódî_t
),

1190 (
ngx_mp4_©om_hódî64_t
Ë+ 
©om_d©a_size
);

1192 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ 
©om_d©a_size
;

1193 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

1196 
mp4
->
c⁄ã¡_Àngth
 +
©om_hódî_size
 + 
©om_d©a_size
;

1198 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1199 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'a', 't');

1201 
©om
 = &
mp4
->
md©_©om_buf
;

1202 
©om
->
ãmp‹¨y
 = 1;

1203 
©om
->
pos
 = 
©om_hódî
;

1204 
©om
->
œ°
 = 
©om_hódî
 + 
©om_hódî_size
;

1206  
©om_hódî_size
;

1207 
	}
}

1211 
u_ch¨
 
	msize
[4];

1212 
u_ch¨
 
	m«me
[4];

1213 
u_ch¨
 
	mvîsi⁄
[1];

1214 
u_ch¨
 
	mÊags
[3];

1215 
u_ch¨
 
	m¸óti⁄_time
[4];

1216 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1217 
u_ch¨
 
	mtimesˇÀ
[4];

1218 
u_ch¨
 
	mduøti⁄
[4];

1219 
u_ch¨
 
	møã
[4];

1220 
u_ch¨
 
	mvﬁume
[2];

1221 
u_ch¨
 
	mª£rved
[10];

1222 
u_ch¨
 
	mm©rix
[36];

1223 
u_ch¨
 
	m¥evõw_time
[4];

1224 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1225 
u_ch¨
 
	mpo°î_time
[4];

1226 
u_ch¨
 
	m£À˘i⁄_time
[4];

1227 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1228 
u_ch¨
 
	mcuºít_time
[4];

1229 
u_ch¨
 
	m√xt_åack_id
[4];

1230 } 
	tngx_mp4_mvhd_©om_t
;

1233 
u_ch¨
 
	msize
[4];

1234 
u_ch¨
 
	m«me
[4];

1235 
u_ch¨
 
	mvîsi⁄
[1];

1236 
u_ch¨
 
	mÊags
[3];

1237 
u_ch¨
 
	m¸óti⁄_time
[8];

1238 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1239 
u_ch¨
 
	mtimesˇÀ
[4];

1240 
u_ch¨
 
	mduøti⁄
[8];

1241 
u_ch¨
 
	møã
[4];

1242 
u_ch¨
 
	mvﬁume
[2];

1243 
u_ch¨
 
	mª£rved
[10];

1244 
u_ch¨
 
	mm©rix
[36];

1245 
u_ch¨
 
	m¥evõw_time
[4];

1246 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1247 
u_ch¨
 
	mpo°î_time
[4];

1248 
u_ch¨
 
	m£À˘i⁄_time
[4];

1249 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1250 
u_ch¨
 
	mcuºít_time
[4];

1251 
u_ch¨
 
	m√xt_åack_id
[4];

1252 } 
	tngx_mp4_mvhd64_©om_t
;

1255 
ngx_öt_t


1256 
	$ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1258 
u_ch¨
 *
©om_hódî
;

1259 
size_t
 
©om_size
;

1260 
uöt32_t
 
timesˇÀ
;

1261 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1262 
ngx_buf_t
 *
©om
;

1263 
ngx_mp4_mvhd_©om_t
 *
mvhd_©om
;

1264 
ngx_mp4_mvhd64_©om_t
 *
mvhd64_©om
;

1266 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mvhdátom");

1268 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1269 
mvhd_©om
 = (
ngx_mp4_mvhd_©om_t
 *Ë
©om_hódî
;

1270 
mvhd64_©om
 = (
ngx_mp4_mvhd64_©om_t
 *Ë
©om_hódî
;

1271 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'v', 'h', 'd');

1273 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd_©om_t
Ë> 
©om_d©a_size
) {

1274 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1275 "\"%s\" mp4 mvhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1276  
NGX_ERROR
;

1279 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1281 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->timescale);

1282 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->duration);

1287 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd64_©om_t
Ë> 
©om_d©a_size
) {

1288 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1290 
mp4
->
fûe
.
«me
.
d©a
);

1291  
NGX_ERROR
;

1294 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd64_©om
->timescale);

1295 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mvhd64_©om
->duration);

1298 
mp4
->
timesˇÀ
 =Åimescale;

1300 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1302 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1304 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1306 i‡(
duøti⁄
 < 
°¨t_time
) {

1307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1309 
mp4
->
fûe
.
«me
.
d©a
);

1310  
NGX_ERROR
;

1313 
duøti⁄
 -
°¨t_time
;

1315 i‡(
mp4
->
Àngth
) {

1316 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * 
timesˇÀ
 / 1000;

1318 i‡(
duøti⁄
 > 
Àngth_time
) {

1319 
duøti⁄
 = 
Àngth_time
;

1323 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1325 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1327 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1328 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
size
, 
©om_size
);

1330 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1331 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
duøti⁄
, duration);

1334 
	`ngx_mp4_£t_64vÆue
(
mvhd64_©om
->
duøti⁄
, duration);

1337 
©om
 = &
mp4
->
mvhd_©om_buf
;

1338 
©om
->
ãmp‹¨y
 = 1;

1339 
©om
->
pos
 = 
©om_hódî
;

1340 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1342 
mp4
->
mvhd_©om
.
buf
 = 
©om
;

1344 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1346  
NGX_OK
;

1347 
	}
}

1350 
ngx_öt_t


1351 
	$ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1353 
u_ch¨
 *
©om_hódî
, *
©om_íd
;

1354 
off_t
 
©om_fûe_íd
;

1355 
ngx_öt_t
 
rc
;

1356 
ngx_buf_t
 *
©om
;

1357 
ngx_hâp_mp4_åak_t
 *
åak
;

1359 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Årakátom");

1361 
åak
 = 
	`ngx_¨øy_push
(&
mp4
->trak);

1362 i‡(
åak
 =
NULL
) {

1363  
NGX_ERROR
;

1366 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1368 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1369 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 't', 'r', 'a', 'k');

1371 
©om
 = &
åak
->
åak_©om_buf
;

1372 
©om
->
ãmp‹¨y
 = 1;

1373 
©om
->
pos
 = 
©om_hódî
;

1374 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1376 
åak
->
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
buf
 = 
©om
;

1378 
©om_íd
 = 
mp4
->
buf„r_pos
 + (
size_t
Ë
©om_d©a_size
;

1379 
©om_fûe_íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1381 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_åak_©oms
, 
©om_d©a_size
);

1383 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1384 "mp4Åøkátom: %i", 
rc
);

1386 i‡(
rc
 =
NGX_DECLINED
) {

1388 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1389 
mp4
->
åak
.
√…s
--;

1390 
mp4
->
buf„r_pos
 = 
©om_íd
;

1391 
mp4
->
off£t
 = 
©om_fûe_íd
;

1392  
NGX_OK
;

1395  
rc
;

1396 
	}
}

1400 
	$ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1401 
ngx_hâp_mp4_åak_t
 *
åak
)

1403 
ngx_buf_t
 *
©om
;

1405 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1406 
©om
 = &
åak
->
åak_©om_buf
;

1407 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1408 
	}
}

1411 
ngx_öt_t


1412 
	$ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1414 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1416 
mp4
->
fûe
.
«me
.
d©a
);

1418  
NGX_ERROR
;

1419 
	}
}

1423 
u_ch¨
 
	msize
[4];

1424 
u_ch¨
 
	m«me
[4];

1425 
u_ch¨
 
	mvîsi⁄
[1];

1426 
u_ch¨
 
	mÊags
[3];

1427 
u_ch¨
 
	m¸óti⁄_time
[4];

1428 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1429 
u_ch¨
 
	måack_id
[4];

1430 
u_ch¨
 
	mª£rved1
[4];

1431 
u_ch¨
 
	mduøti⁄
[4];

1432 
u_ch¨
 
	mª£rved2
[8];

1433 
u_ch¨
 
	mœyî
[2];

1434 
u_ch¨
 
	mgroup
[2];

1435 
u_ch¨
 
	mvﬁume
[2];

1436 
u_ch¨
 
	mªvîved3
[2];

1437 
u_ch¨
 
	mm©rix
[36];

1438 
u_ch¨
 
	mwidth
[4];

1439 
u_ch¨
 
	mheigth
[4];

1440 } 
	tngx_mp4_tkhd_©om_t
;

1443 
u_ch¨
 
	msize
[4];

1444 
u_ch¨
 
	m«me
[4];

1445 
u_ch¨
 
	mvîsi⁄
[1];

1446 
u_ch¨
 
	mÊags
[3];

1447 
u_ch¨
 
	m¸óti⁄_time
[8];

1448 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1449 
u_ch¨
 
	måack_id
[4];

1450 
u_ch¨
 
	mª£rved1
[4];

1451 
u_ch¨
 
	mduøti⁄
[8];

1452 
u_ch¨
 
	mª£rved2
[8];

1453 
u_ch¨
 
	mœyî
[2];

1454 
u_ch¨
 
	mgroup
[2];

1455 
u_ch¨
 
	mvﬁume
[2];

1456 
u_ch¨
 
	mªvîved3
[2];

1457 
u_ch¨
 
	mm©rix
[36];

1458 
u_ch¨
 
	mwidth
[4];

1459 
u_ch¨
 
	mheigth
[4];

1460 } 
	tngx_mp4_tkhd64_©om_t
;

1463 
ngx_öt_t


1464 
	$ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1466 
u_ch¨
 *
©om_hódî
;

1467 
size_t
 
©om_size
;

1468 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1469 
ngx_buf_t
 *
©om
;

1470 
ngx_hâp_mp4_åak_t
 *
åak
;

1471 
ngx_mp4_tkhd_©om_t
 *
tkhd_©om
;

1472 
ngx_mp4_tkhd64_©om_t
 *
tkhd64_©om
;

1474 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Åkhdátom");

1476 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1477 
tkhd_©om
 = (
ngx_mp4_tkhd_©om_t
 *Ë
©om_hódî
;

1478 
tkhd64_©om
 = (
ngx_mp4_tkhd64_©om_t
 *Ë
©om_hódî
;

1479 
	`ngx_mp4_£t_©om_«me
(
tkhd_©om
, 't', 'k', 'h', 'd');

1481 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd_©om_t
Ë> 
©om_d©a_size
) {

1482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1483 "\"%s\" mp4ÅkhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1484  
NGX_ERROR
;

1487 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1489 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
tkhd_©om
->duration);

1494 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd64_©om_t
Ë> 
©om_d©a_size
) {

1495 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1497 
mp4
->
fûe
.
«me
.
d©a
);

1498  
NGX_ERROR
;

1501 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
tkhd64_©om
->duration);

1504 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1506 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1508 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * mp4->
timesˇÀ
 / 1000;

1510 i‡(
duøti⁄
 <
°¨t_time
) {

1511 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1513  
NGX_DECLINED
;

1516 
duøti⁄
 -
°¨t_time
;

1518 i‡(
mp4
->
Àngth
) {

1519 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * mp4->
timesˇÀ
 / 1000;

1521 i‡(
duøti⁄
 > 
Àngth_time
) {

1522 
duøti⁄
 = 
Àngth_time
;

1526 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1528 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1530 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1532 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1533 
åak
->
tkhd_size
 = 
©om_size
;

1535 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
size
, 
©om_size
);

1537 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1538 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
duøti⁄
, duration);

1541 
	`ngx_mp4_£t_64vÆue
(
tkhd64_©om
->
duøti⁄
, duration);

1544 
©om
 = &
åak
->
tkhd_©om_buf
;

1545 
©om
->
ãmp‹¨y
 = 1;

1546 
©om
->
pos
 = 
©om_hódî
;

1547 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1549 
åak
->
out
[
NGX_HTTP_MP4_TKHD_ATOM
].
buf
 = 
©om
;

1551 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1553  
NGX_OK
;

1554 
	}
}

1557 
ngx_öt_t


1558 
	$ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1560 
u_ch¨
 *
©om_hódî
;

1561 
ngx_buf_t
 *
©om
;

1562 
ngx_hâp_mp4_åak_t
 *
åak
;

1564 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process mdiaátom");

1566 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1567 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'i', 'a');

1569 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1571 
©om
 = &
åak
->
mdü_©om_buf
;

1572 
©om
->
ãmp‹¨y
 = 1;

1573 
©om
->
pos
 = 
©om_hódî
;

1574 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1576 
åak
->
out
[
NGX_HTTP_MP4_MDIA_ATOM
].
buf
 = 
©om
;

1578  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_mdü_©oms
, 
©om_d©a_size
);

1579 
	}
}

1583 
	$ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1584 
ngx_hâp_mp4_åak_t
 *
åak
)

1586 
ngx_buf_t
 *
©om
;

1588 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1589 
©om
 = &
åak
->
mdü_©om_buf
;

1590 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1591 
	}
}

1595 
u_ch¨
 
	msize
[4];

1596 
u_ch¨
 
	m«me
[4];

1597 
u_ch¨
 
	mvîsi⁄
[1];

1598 
u_ch¨
 
	mÊags
[3];

1599 
u_ch¨
 
	m¸óti⁄_time
[4];

1600 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1601 
u_ch¨
 
	mtimesˇÀ
[4];

1602 
u_ch¨
 
	mduøti⁄
[4];

1603 
u_ch¨
 
	mœnguage
[2];

1604 
u_ch¨
 
	mquÆôy
[2];

1605 } 
	tngx_mp4_mdhd_©om_t
;

1608 
u_ch¨
 
	msize
[4];

1609 
u_ch¨
 
	m«me
[4];

1610 
u_ch¨
 
	mvîsi⁄
[1];

1611 
u_ch¨
 
	mÊags
[3];

1612 
u_ch¨
 
	m¸óti⁄_time
[8];

1613 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1614 
u_ch¨
 
	mtimesˇÀ
[4];

1615 
u_ch¨
 
	mduøti⁄
[8];

1616 
u_ch¨
 
	mœnguage
[2];

1617 
u_ch¨
 
	mquÆôy
[2];

1618 } 
	tngx_mp4_mdhd64_©om_t
;

1621 
ngx_öt_t


1622 
	$ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1624 
u_ch¨
 *
©om_hódî
;

1625 
size_t
 
©om_size
;

1626 
uöt32_t
 
timesˇÀ
;

1627 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1628 
ngx_buf_t
 *
©om
;

1629 
ngx_hâp_mp4_åak_t
 *
åak
;

1630 
ngx_mp4_mdhd_©om_t
 *
mdhd_©om
;

1631 
ngx_mp4_mdhd64_©om_t
 *
mdhd64_©om
;

1633 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdhdátom");

1635 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1636 
mdhd_©om
 = (
ngx_mp4_mdhd_©om_t
 *Ë
©om_hódî
;

1637 
mdhd64_©om
 = (
ngx_mp4_mdhd64_©om_t
 *Ë
©om_hódî
;

1638 
	`ngx_mp4_£t_©om_«me
(
mdhd_©om
, 'm', 'd', 'h', 'd');

1640 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd_©om_t
Ë> 
©om_d©a_size
) {

1641 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1642 "\"%s\" mp4 mdhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1643  
NGX_ERROR
;

1646 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1648 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->timescale);

1649 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->duration);

1654 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd64_©om_t
Ë> 
©om_d©a_size
) {

1655 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1657 
mp4
->
fûe
.
«me
.
d©a
);

1658  
NGX_ERROR
;

1661 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd64_©om
->timescale);

1662 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mdhd64_©om
->duration);

1665 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1667 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1669 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1671 i‡(
duøti⁄
 <
°¨t_time
) {

1672 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1674  
NGX_DECLINED
;

1677 
duøti⁄
 -
°¨t_time
;

1679 i‡(
mp4
->
Àngth
) {

1680 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * 
timesˇÀ
 / 1000;

1682 i‡(
duøti⁄
 > 
Àngth_time
) {

1683 
duøti⁄
 = 
Àngth_time
;

1687 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1689 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1691 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1693 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1694 
åak
->
mdhd_size
 = 
©om_size
;

1695 
åak
->
timesˇÀ
 =Åimescale;

1697 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
size
, 
©om_size
);

1699 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1700 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
duøti⁄
, duration);

1703 
	`ngx_mp4_£t_64vÆue
(
mdhd64_©om
->
duøti⁄
, duration);

1706 
©om
 = &
åak
->
mdhd_©om_buf
;

1707 
©om
->
ãmp‹¨y
 = 1;

1708 
©om
->
pos
 = 
©om_hódî
;

1709 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1711 
åak
->
out
[
NGX_HTTP_MP4_MDHD_ATOM
].
buf
 = 
©om
;

1713 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1715  
NGX_OK
;

1716 
	}
}

1719 
ngx_öt_t


1720 
	$ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1722 
u_ch¨
 *
©om_hódî
;

1723 
size_t
 
©om_size
;

1724 
ngx_buf_t
 *
©om
;

1725 
ngx_hâp_mp4_åak_t
 *
åak
;

1727 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 hdlrátom");

1729 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1730 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1731 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1732 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'h', 'd', 'l', 'r');

1734 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1736 
©om
 = &
åak
->
hdÃ_©om_buf
;

1737 
©om
->
ãmp‹¨y
 = 1;

1738 
©om
->
pos
 = 
©om_hódî
;

1739 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1741 
åak
->
hdÃ_size
 = 
©om_size
;

1742 
åak
->
out
[
NGX_HTTP_MP4_HDLR_ATOM
].
buf
 = 
©om
;

1744 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1746  
NGX_OK
;

1747 
	}
}

1750 
ngx_öt_t


1751 
	$ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1753 
u_ch¨
 *
©om_hódî
;

1754 
ngx_buf_t
 *
©om
;

1755 
ngx_hâp_mp4_åak_t
 *
åak
;

1757 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process minfátom");

1759 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1760 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'i', 'n', 'f');

1762 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1764 
©om
 = &
åak
->
möf_©om_buf
;

1765 
©om
->
ãmp‹¨y
 = 1;

1766 
©om
->
pos
 = 
©om_hódî
;

1767 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1769 
åak
->
out
[
NGX_HTTP_MP4_MINF_ATOM
].
buf
 = 
©om
;

1771  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_möf_©oms
, 
©om_d©a_size
);

1772 
	}
}

1776 
	$ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1777 
ngx_hâp_mp4_åak_t
 *
åak
)

1779 
ngx_buf_t
 *
©om
;

1781 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
)

1782 + 
åak
->
vmhd_size


1783 + 
åak
->
smhd_size


1784 + 
åak
->
döf_size
;

1785 
©om
 = &
åak
->
möf_©om_buf
;

1786 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1787 
	}
}

1790 
ngx_öt_t


1791 
	$ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1793 
u_ch¨
 *
©om_hódî
;

1794 
size_t
 
©om_size
;

1795 
ngx_buf_t
 *
©om
;

1796 
ngx_hâp_mp4_åak_t
 *
åak
;

1798 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 vmhdátom");

1800 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1801 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1802 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1803 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'v', 'm', 'h', 'd');

1805 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1807 
©om
 = &
åak
->
vmhd_©om_buf
;

1808 
©om
->
ãmp‹¨y
 = 1;

1809 
©om
->
pos
 = 
©om_hódî
;

1810 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1812 
åak
->
vmhd_size
 +
©om_size
;

1813 
åak
->
out
[
NGX_HTTP_MP4_VMHD_ATOM
].
buf
 = 
©om
;

1815 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1817  
NGX_OK
;

1818 
	}
}

1821 
ngx_öt_t


1822 
	$ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1824 
u_ch¨
 *
©om_hódî
;

1825 
size_t
 
©om_size
;

1826 
ngx_buf_t
 *
©om
;

1827 
ngx_hâp_mp4_åak_t
 *
åak
;

1829 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 smhdátom");

1831 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1832 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1833 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1834 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 'm', 'h', 'd');

1836 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1838 
©om
 = &
åak
->
smhd_©om_buf
;

1839 
©om
->
ãmp‹¨y
 = 1;

1840 
©om
->
pos
 = 
©om_hódî
;

1841 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1843 
åak
->
vmhd_size
 +
©om_size
;

1844 
åak
->
out
[
NGX_HTTP_MP4_SMHD_ATOM
].
buf
 = 
©om
;

1846 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1848  
NGX_OK
;

1849 
	}
}

1852 
ngx_öt_t


1853 
	$ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1855 
u_ch¨
 *
©om_hódî
;

1856 
size_t
 
©om_size
;

1857 
ngx_buf_t
 *
©om
;

1858 
ngx_hâp_mp4_åak_t
 *
åak
;

1860 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 dinfátom");

1862 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1863 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1864 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1865 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'd', 'i', 'n', 'f');

1867 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1869 
©om
 = &
åak
->
döf_©om_buf
;

1870 
©om
->
ãmp‹¨y
 = 1;

1871 
©om
->
pos
 = 
©om_hódî
;

1872 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1874 
åak
->
döf_size
 +
©om_size
;

1875 
åak
->
out
[
NGX_HTTP_MP4_DINF_ATOM
].
buf
 = 
©om
;

1877 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1879  
NGX_OK
;

1880 
	}
}

1883 
ngx_öt_t


1884 
	$ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1886 
u_ch¨
 *
©om_hódî
;

1887 
ngx_buf_t
 *
©om
;

1888 
ngx_hâp_mp4_åak_t
 *
åak
;

1890 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process stblátom");

1892 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1893 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 't', 'b', 'l');

1895 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1897 
©om
 = &
åak
->
°bl_©om_buf
;

1898 
©om
->
ãmp‹¨y
 = 1;

1899 
©om
->
pos
 = 
©om_hódî
;

1900 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1902 
åak
->
out
[
NGX_HTTP_MP4_STBL_ATOM
].
buf
 = 
©om
;

1904  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_°bl_©oms
, 
©om_d©a_size
);

1905 
	}
}

1909 
	$ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1910 
ngx_hâp_mp4_åak_t
 *
åak
)

1912 
ngx_buf_t
 *
©om
;

1914 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1915 
©om
 = &
åak
->
°bl_©om_buf
;

1916 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1917 
	}
}

1921 
u_ch¨
 
	msize
[4];

1922 
u_ch¨
 
	m«me
[4];

1923 
u_ch¨
 
	mvîsi⁄
[1];

1924 
u_ch¨
 
	mÊags
[3];

1925 
u_ch¨
 
	míåõs
[4];

1927 
u_ch¨
 
	mmedü_size
[4];

1928 
u_ch¨
 
	mmedü_«me
[4];

1929 } 
	tngx_mp4_°sd_©om_t
;

1932 
ngx_öt_t


1933 
	$ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1935 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
;

1936 
size_t
 
©om_size
;

1937 
ngx_buf_t
 *
©om
;

1938 
ngx_mp4_°sd_©om_t
 *
°sd_©om
;

1939 
ngx_hâp_mp4_åak_t
 *
åak
;

1943 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stsdátom");

1945 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1946 
°sd_©om
 = (
ngx_mp4_°sd_©om_t
 *Ë
©om_hódî
;

1947 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1948 
©om_èbÀ
 = 
©om_hódî
 + 
©om_size
;

1949 
	`ngx_mp4_£t_32vÆue
(
°sd_©om
->
size
, 
©om_size
);

1950 
	`ngx_mp4_£t_©om_«me
(
°sd_©om
, 's', 't', 's', 'd');

1952 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sd_©om_t
Ë> 
©om_d©a_size
) {

1953 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1954 "\"%s\" mp4 stsdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1955  
NGX_ERROR
;

1958 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1960 
	`ngx_mp4_gë_32vÆue
(
°sd_©om
->
íåõs
),

1961 4, 
°sd_©om
->
medü_«me
);

1963 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1965 
©om
 = &
åak
->
°sd_©om_buf
;

1966 
©om
->
ãmp‹¨y
 = 1;

1967 
©om
->
pos
 = 
©om_hódî
;

1968 
©om
->
œ°
 = 
©om_èbÀ
;

1970 
åak
->
out
[
NGX_HTTP_MP4_STSD_ATOM
].
buf
 = 
©om
;

1971 
åak
->
size
 +
©om_size
;

1973 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1975  
NGX_OK
;

1976 
	}
}

1980 
u_ch¨
 
	msize
[4];

1981 
u_ch¨
 
	m«me
[4];

1982 
u_ch¨
 
	mvîsi⁄
[1];

1983 
u_ch¨
 
	mÊags
[3];

1984 
u_ch¨
 
	míåõs
[4];

1985 } 
	tngx_mp4_°ts_©om_t
;

1988 
u_ch¨
 
	mcou¡
[4];

1989 
u_ch¨
 
	mduøti⁄
[4];

1990 } 
	tngx_mp4_°ts_íåy_t
;

1993 
ngx_öt_t


1994 
	$ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1996 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

1997 
uöt32_t
 
íåõs
;

1998 
ngx_buf_t
 *
©om
, *
d©a
;

1999 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

2000 
ngx_hâp_mp4_åak_t
 *
åak
;

2004 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 sttsátom");

2006 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2007 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om_hódî
;

2008 
	`ngx_mp4_£t_©om_«me
(
°ts_©om
, 's', 't', 't', 's');

2010 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
Ë> 
©om_d©a_size
) {

2011 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2012 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2013  
NGX_ERROR
;

2016 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ts_©om
->entries);

2018 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2019 "mp4Åime-to-ßm∂êíåõs:%uD", 
íåõs
);

2021 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
)

2022 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
Ë> 
©om_d©a_size
)

2024 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2025 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2026  
NGX_ERROR
;

2029 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°ts_©om_t
);

2030 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
);

2032 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2033 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

2035 
©om
 = &
åak
->
°ts_©om_buf
;

2036 
©om
->
ãmp‹¨y
 = 1;

2037 
©om
->
pos
 = 
©om_hódî
;

2038 
©om
->
œ°
 = 
©om_èbÀ
;

2040 
d©a
 = &
åak
->
°ts_d©a_buf
;

2041 
d©a
->
ãmp‹¨y
 = 1;

2042 
d©a
->
pos
 = 
©om_èbÀ
;

2043 
d©a
->
œ°
 = 
©om_íd
;

2045 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
 = 
©om
;

2046 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
 = 
d©a
;

2048 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2050  
NGX_OK
;

2051 
	}
}

2054 
ngx_öt_t


2055 
	$ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2056 
ngx_hâp_mp4_åak_t
 *
åak
)

2058 
size_t
 
©om_size
;

2059 
ngx_buf_t
 *
©om
, *
d©a
;

2060 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

2067 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2070 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

2072 i‡(
d©a
 =
NULL
) {

2073 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2075 
mp4
->
fûe
.
«me
.
d©a
);

2076  
NGX_ERROR
;

2079 i‡(
	`ngx_hâp_mp4_¸›_°ts_d©a
(
mp4
, 
åak
, 1Ë!
NGX_OK
) {

2080  
NGX_ERROR
;

2083 i‡(
	`ngx_hâp_mp4_¸›_°ts_d©a
(
mp4
, 
åak
, 0Ë!
NGX_OK
) {

2084  
NGX_ERROR
;

2087 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2088 "time-to-ßm∂êíåõs:%uD", 
åak
->
time_to_ßm∂e_íåõs
);

2090 
©om_size
 = (
ngx_mp4_°ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2091 
åak
->
size
 +
©om_size
;

2093 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
;

2094 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om
->
pos
;

2095 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
size
, 
©om_size
);

2096 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
íåõs
, 
åak
->
time_to_ßm∂e_íåõs
);

2098  
NGX_OK
;

2099 
	}
}

2102 
ngx_öt_t


2103 
	$ngx_hâp_mp4_¸›_°ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2104 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2106 
uöt32_t
 
cou¡
, 
duøti⁄
, 
ª°
;

2107 
uöt64_t
 
°¨t_time
;

2108 
ngx_buf_t
 *
d©a
;

2109 
ngx_uöt_t
 
°¨t_ßm∂e
, 
íåõs
, 
°¨t_£c
;

2110 
ngx_mp4_°ts_íåy_t
 *
íåy
, *
íd
;

2112 i‡(
°¨t
) {

2113 
°¨t_£c
 = 
mp4
->
°¨t
;

2115 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2116 "mp4 sâ†¸› sèπ_time:%ui", 
°¨t_£c
);

2118 } i‡(
mp4
->
Àngth
) {

2119 
°¨t_£c
 = 
mp4
->
Àngth
;

2121 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2122 "mp4 sâ†¸›Énd_time:%ui", 
°¨t_£c
);

2125  
NGX_OK
;

2128 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

2130 
°¨t_time
 = (
uöt64_t
Ë
°¨t_£c
 * 
åak
->
timesˇÀ
 / 1000;

2132 
íåõs
 = 
åak
->
time_to_ßm∂e_íåõs
;

2133 
°¨t_ßm∂e
 = 0;

2134 
íåy
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
pos
;

2135 
íd
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
œ°
;

2137 
íåy
 < 
íd
) {

2138 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2139 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->duration);

2141 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2143 
°¨t_time
, 
cou¡
, 
duøti⁄
);

2145 i‡(
°¨t_time
 < (
uöt64_t
Ë
cou¡
 * 
duøti⁄
) {

2146 
°¨t_ßm∂e
 +(
ngx_uöt_t
Ë(
°¨t_time
 / 
duøti⁄
);

2147 
ª°
 = (
uöt32_t
Ë(
°¨t_time
 / 
duøti⁄
);

2148 
found
;

2151 
°¨t_ßm∂e
 +
cou¡
;

2152 
°¨t_time
 -
cou¡
 * 
duøti⁄
;

2153 
íåõs
--;

2154 
íåy
++;

2157 i‡(
°¨t
) {

2158 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2160 
mp4
->
fûe
.
«me
.
d©a
);

2162  
NGX_ERROR
;

2165 
åak
->
íd_ßm∂e
 =Åøk->
°¨t_ßm∂e
 + start_sample;

2167 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2168 "íd_ßm∂e:%ui", 
åak
->
íd_ßm∂e
);

2170  
NGX_OK
;

2173 
found
:

2175 i‡(
°¨t
) {

2176 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, cou¡ - 
ª°
);

2177 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2178 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

2179 
åak
->
°¨t_ßm∂e
 = start_sample;

2181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2183 
åak
->
°¨t_ßm∂e
, 
cou¡
 - 
ª°
);

2186 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, 
ª°
);

2187 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2188 
åak
->
time_to_ßm∂e_íåõs
 -
íåõs
 - 1;

2189 
åak
->
íd_ßm∂e
 =Åøk->
°¨t_ßm∂e
 + start_sample;

2191 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2193 
åak
->
íd_ßm∂e
, 
ª°
);

2196  
NGX_OK
;

2197 
	}
}

2201 
u_ch¨
 
	msize
[4];

2202 
u_ch¨
 
	m«me
[4];

2203 
u_ch¨
 
	mvîsi⁄
[1];

2204 
u_ch¨
 
	mÊags
[3];

2205 
u_ch¨
 
	míåõs
[4];

2206 } 
	tngx_hâp_mp4_°ss_©om_t
;

2209 
ngx_öt_t


2210 
	$ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2212 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2213 
uöt32_t
 
íåõs
;

2214 
ngx_buf_t
 *
©om
, *
d©a
;

2215 
ngx_hâp_mp4_åak_t
 *
åak
;

2216 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2220 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stssátom");

2222 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2223 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om_hódî
;

2224 
	`ngx_mp4_£t_©om_«me
(
°ss_©om
, 's', 't', 's', 's');

2226 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
Ë> 
©om_d©a_size
) {

2227 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2228 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2229  
NGX_ERROR
;

2232 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ss_©om
->entries);

2234 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2235 "syn¯ßm∂êíåõs:%uD", 
íåõs
);

2237 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2238 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2240 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_hâp_mp4_°ss_©om_t
);

2242 
©om
 = &
åak
->
°ss_©om_buf
;

2243 
©om
->
ãmp‹¨y
 = 1;

2244 
©om
->
pos
 = 
©om_hódî
;

2245 
©om
->
œ°
 = 
©om_èbÀ
;

2247 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
)

2248 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2250 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2251 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2252  
NGX_ERROR
;

2255 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2257 
d©a
 = &
åak
->
°ss_d©a_buf
;

2258 
d©a
->
ãmp‹¨y
 = 1;

2259 
d©a
->
pos
 = 
©om_èbÀ
;

2260 
d©a
->
œ°
 = 
©om_íd
;

2262 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
 = 
©om
;

2263 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
d©a
;

2265 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2267  
NGX_OK
;

2268 
	}
}

2271 
ngx_öt_t


2272 
	$ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2273 
ngx_hâp_mp4_åak_t
 *
åak
)

2275 
size_t
 
©om_size
;

2276 
uöt32_t
 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2277 
ngx_buf_t
 *
©om
, *
d©a
;

2278 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2286 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2289 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2291 i‡(
d©a
 =
NULL
) {

2292  
NGX_OK
;

2295 
	`ngx_hâp_mp4_¸›_°ss_d©a
(
mp4
, 
åak
, 1);

2296 
	`ngx_hâp_mp4_¸›_°ss_d©a
(
mp4
, 
åak
, 0);

2298 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2299 "syn¯ßm∂êíåõs:%uD", 
åak
->
sync_ßm∂es_íåõs
);

2301 i‡(
åak
->
sync_ßm∂es_íåõs
) {

2302 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2303 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2305 
°¨t_ßm∂e
 = 
åak
->start_sample;

2307 
íåy
 < 
íd
) {

2308 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2309 
ßm∂e
 -
°¨t_ßm∂e
;

2310 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
ßm∂e
);

2311 
íåy
++;

2315 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
NULL
;

2318 
©om_size
 = (
ngx_hâp_mp4_°ss_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2319 
åak
->
size
 +
©om_size
;

2321 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
;

2322 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om
->
pos
;

2324 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
size
, 
©om_size
);

2325 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
íåõs
, 
åak
->
sync_ßm∂es_íåõs
);

2327  
NGX_OK
;

2328 
	}
}

2332 
	$ngx_hâp_mp4_¸›_°ss_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2333 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2335 
uöt32_t
 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2336 
ngx_buf_t
 *
d©a
;

2337 
ngx_uöt_t
 
íåõs
;

2341 i‡(
°¨t
) {

2342 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2344 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2345 "mp4 sts†¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2347 } i‡(
mp4
->
Àngth
) {

2348 
°¨t_ßm∂e
 = 
åak
->
íd_ßm∂e
 + 1;

2350 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2351 "mp4 sts†¸›Énd_ßm∂e:%uD", 
°¨t_ßm∂e
);

2357 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2359 
íåõs
 = 
åak
->
sync_ßm∂es_íåõs
;

2360 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2361 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2363 
íåy
 < 
íd
) {

2364 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2366 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2367 "sync:%uD", 
ßm∂e
);

2369 i‡(
ßm∂e
 >
°¨t_ßm∂e
) {

2370 
found
;

2373 
íåõs
--;

2374 
íåy
++;

2377 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2380 
found
:

2382 i‡(
°¨t
) {

2383 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2384 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2387 
d©a
->
œ°
 = (
u_ch¨
 *Ë
íåy
;

2388 
åak
->
sync_ßm∂es_íåõs
 -
íåõs
;

2390 
	}
}

2394 
u_ch¨
 
	msize
[4];

2395 
u_ch¨
 
	m«me
[4];

2396 
u_ch¨
 
	mvîsi⁄
[1];

2397 
u_ch¨
 
	mÊags
[3];

2398 
u_ch¨
 
	míåõs
[4];

2399 } 
	tngx_mp4_˘ts_©om_t
;

2402 
u_ch¨
 
	mcou¡
[4];

2403 
u_ch¨
 
	moff£t
[4];

2404 } 
	tngx_mp4_˘ts_íåy_t
;

2407 
ngx_öt_t


2408 
	$ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2410 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2411 
uöt32_t
 
íåõs
;

2412 
ngx_buf_t
 *
©om
, *
d©a
;

2413 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2414 
ngx_hâp_mp4_åak_t
 *
åak
;

2418 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 cttsátom");

2420 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2421 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om_hódî
;

2422 
	`ngx_mp4_£t_©om_«me
(
˘ts_©om
, 'c', 't', 't', 's');

2424 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
Ë> 
©om_d©a_size
) {

2425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2426 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2427  
NGX_ERROR
;

2430 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
˘ts_©om
->entries);

2432 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2433 "composôi⁄ off£àíåõs:%uD", 
íåõs
);

2435 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2436 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2438 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_˘ts_©om_t
);

2440 
©om
 = &
åak
->
˘ts_©om_buf
;

2441 
©om
->
ãmp‹¨y
 = 1;

2442 
©om
->
pos
 = 
©om_hódî
;

2443 
©om
->
œ°
 = 
©om_èbÀ
;

2445 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
)

2446 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
Ë> 
©om_d©a_size
)

2448 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2449 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2450  
NGX_ERROR
;

2453 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
);

2455 
d©a
 = &
åak
->
˘ts_d©a_buf
;

2456 
d©a
->
ãmp‹¨y
 = 1;

2457 
d©a
->
pos
 = 
©om_èbÀ
;

2458 
d©a
->
œ°
 = 
©om_íd
;

2460 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
©om
;

2461 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
d©a
;

2463 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2465  
NGX_OK
;

2466 
	}
}

2470 
	$ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2471 
ngx_hâp_mp4_åak_t
 *
åak
)

2473 
size_t
 
©om_size
;

2474 
ngx_buf_t
 *
©om
, *
d©a
;

2475 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2483 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2486 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2488 i‡(
d©a
 =
NULL
) {

2492 
	`ngx_hâp_mp4_¸›_˘ts_d©a
(
mp4
, 
åak
, 1);

2493 
	`ngx_hâp_mp4_¸›_˘ts_d©a
(
mp4
, 
åak
, 0);

2495 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2497 
åak
->
composôi⁄_off£t_íåõs
);

2499 i‡(
åak
->
composôi⁄_off£t_íåõs
 == 0) {

2500 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
NULL
;

2501 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
NULL
;

2505 
©om_size
 = (
ngx_mp4_˘ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2506 
åak
->
size
 +
©om_size
;

2508 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
;

2509 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om
->
pos
;

2511 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
size
, 
©om_size
);

2512 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
íåõs
, 
åak
->
composôi⁄_off£t_íåõs
);

2515 
	}
}

2519 
	$ngx_hâp_mp4_¸›_˘ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2520 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2522 
uöt32_t
 
cou¡
, 
°¨t_ßm∂e
, 
ª°
;

2523 
ngx_buf_t
 *
d©a
;

2524 
ngx_uöt_t
 
íåõs
;

2525 
ngx_mp4_˘ts_íåy_t
 *
íåy
, *
íd
;

2529 i‡(
°¨t
) {

2530 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2532 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2533 "mp4 câ†¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2535 } i‡(
mp4
->
Àngth
) {

2536 
°¨t_ßm∂e
 = 
åak
->
íd_ßm∂e
 -Årak->start_sample + 1;

2538 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2539 "mp4 câ†¸›Énd_ßm∂e:%uD", 
°¨t_ßm∂e
);

2545 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2547 
íåõs
 = 
åak
->
composôi⁄_off£t_íåõs
;

2548 
íåy
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
pos
;

2549 
íd
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
œ°
;

2551 
íåy
 < 
íd
) {

2552 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2554 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2556 
°¨t_ßm∂e
, 
cou¡
, 
	`ngx_mp4_gë_32vÆue
(
íåy
->
off£t
));

2558 i‡(
°¨t_ßm∂e
 <
cou¡
) {

2559 
ª°
 = 
°¨t_ßm∂e
 - 1;

2560 
found
;

2563 
°¨t_ßm∂e
 -
cou¡
;

2564 
íåõs
--;

2565 
íåy
++;

2568 i‡(
°¨t
) {

2569 
d©a
->
pos
 = (
u_ch¨
 *Ë
íd
;

2570 
åak
->
composôi⁄_off£t_íåõs
 = 0;

2575 
found
:

2577 i‡(
°¨t
) {

2578 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, cou¡ - 
ª°
);

2579 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2580 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2583 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, 
ª°
);

2584 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2585 
åak
->
composôi⁄_off£t_íåõs
 -
íåõs
 - 1;

2587 
	}
}

2591 
u_ch¨
 
	msize
[4];

2592 
u_ch¨
 
	m«me
[4];

2593 
u_ch¨
 
	mvîsi⁄
[1];

2594 
u_ch¨
 
	mÊags
[3];

2595 
u_ch¨
 
	míåõs
[4];

2596 } 
	tngx_mp4_°sc_©om_t
;

2599 
ngx_öt_t


2600 
	$ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2602 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2603 
uöt32_t
 
íåõs
;

2604 
ngx_buf_t
 *
©om
, *
d©a
;

2605 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2606 
ngx_hâp_mp4_åak_t
 *
åak
;

2610 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stscátom");

2612 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2613 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om_hódî
;

2614 
	`ngx_mp4_£t_©om_«me
(
°sc_©om
, 's', 't', 's', 'c');

2616 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
Ë> 
©om_d©a_size
) {

2617 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2618 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2619  
NGX_ERROR
;

2622 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sc_©om
->entries);

2624 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2625 "ßm∂e-to-chunkÉ¡rõs:%uD", 
íåõs
);

2627 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
)

2628 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
Ë> 
©om_d©a_size
)

2630 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2631 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2632  
NGX_ERROR
;

2635 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sc_©om_t
);

2636 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2638 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2639 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2641 
©om
 = &
åak
->
°sc_©om_buf
;

2642 
©om
->
ãmp‹¨y
 = 1;

2643 
©om
->
pos
 = 
©om_hódî
;

2644 
©om
->
œ°
 = 
©om_èbÀ
;

2646 
d©a
 = &
åak
->
°sc_d©a_buf
;

2647 
d©a
->
ãmp‹¨y
 = 1;

2648 
d©a
->
pos
 = 
©om_èbÀ
;

2649 
d©a
->
œ°
 = 
©om_íd
;

2651 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
 = 
©om
;

2652 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
 = 
d©a
;

2654 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2656  
NGX_OK
;

2657 
	}
}

2660 
ngx_öt_t


2661 
	$ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2662 
ngx_hâp_mp4_åak_t
 *
åak
)

2664 
size_t
 
©om_size
;

2665 
uöt32_t
 
chunk
;

2666 
ngx_buf_t
 *
©om
, *
d©a
;

2667 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2668 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
íd
;

2676 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2679 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2681 i‡(
d©a
 =
NULL
) {

2682 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2684 
mp4
->
fûe
.
«me
.
d©a
);

2685  
NGX_ERROR
;

2688 i‡(
åak
->
ßm∂e_to_chunk_íåõs
 == 0) {

2689 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2691 
mp4
->
fûe
.
«me
.
d©a
);

2692  
NGX_ERROR
;

2695 i‡(
	`ngx_hâp_mp4_¸›_°sc_d©a
(
mp4
, 
åak
, 1Ë!
NGX_OK
) {

2696  
NGX_ERROR
;

2699 i‡(
	`ngx_hâp_mp4_¸›_°sc_d©a
(
mp4
, 
åak
, 0Ë!
NGX_OK
) {

2700  
NGX_ERROR
;

2703 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2705 
åak
->
ßm∂e_to_chunk_íåõs
);

2707 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2708 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2710 
íåy
 < 
íd
) {

2711 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2712 
chunk
 -
åak
->
°¨t_chunk
;

2713 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, chunk);

2714 
íåy
++;

2717 
©om_size
 = (
ngx_mp4_°sc_©om_t
)

2718 + 
åak
->
ßm∂e_to_chunk_íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2720 
åak
->
size
 +
©om_size
;

2722 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
;

2723 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om
->
pos
;

2725 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
size
, 
©om_size
);

2726 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
íåõs
, 
åak
->
ßm∂e_to_chunk_íåõs
);

2728  
NGX_OK
;

2729 
	}
}

2732 
ngx_öt_t


2733 
	$ngx_hâp_mp4_¸›_°sc_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2734 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2736 
uöt32_t
 
°¨t_ßm∂e
, 
chunk
, 
ßm∂es
, 
id
, 
√xt_chunk
, 
n
,

2737 
¥ev_ßm∂es
;

2738 
ngx_buf_t
 *
d©a
, *
buf
;

2739 
ngx_uöt_t
 
íåõs
, 
èrgë_chunk
, 
chunk_ßm∂es
;

2740 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
íd
, *
fú°
;

2742 
íåõs
 = 
åak
->
ßm∂e_to_chunk_íåõs
 - 1;

2744 i‡(
°¨t
) {

2745 
°¨t_ßm∂e
 = (
uöt32_t
Ë
åak
->start_sample;

2747 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2748 "mp4 sts¯¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2750 } i‡(
mp4
->
Àngth
) {

2751 
°¨t_ßm∂e
 = (
uöt32_t
Ë(
åak
->
íd_ßm∂e
 -Årak->start_sample);

2752 
ßm∂es
 = 0;

2754 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_START
].
buf
;

2756 i‡(
d©a
) {

2757 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2758 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2759 
íåõs
--;

2761 i‡(
ßm∂es
 > 
°¨t_ßm∂e
) {

2762 
ßm∂es
 = 
°¨t_ßm∂e
;

2763 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, samples);

2766 
°¨t_ßm∂e
 -
ßm∂es
;

2769 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2771 
°¨t_ßm∂e
, 
ßm∂es
);

2774  
NGX_OK
;

2777 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2779 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2780 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2782 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2783 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2784 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2785 
¥ev_ßm∂es
 = 0;

2786 
íåy
++;

2788 
íåy
 < 
íd
) {

2790 
√xt_chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->
chunk
);

2792 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2795 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
, 
id
);

2797 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2799 i‡(
°¨t_ßm∂e
 < 
n
) {

2800 
found
;

2803 
°¨t_ßm∂e
 -
n
;

2805 
¥ev_ßm∂es
 = 
ßm∂es
;

2806 
chunk
 = 
√xt_chunk
;

2807 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2808 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2809 
íåõs
--;

2810 
íåy
++;

2813 
√xt_chunk
 = 
åak
->
chunks
 + 1;

2815 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2817 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
);

2819 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2821 i‡(
°¨t_ßm∂e
 > 
n
) {

2822 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2824 
°¨t
 ? "°¨t" : "íd", 
mp4
->
fûe
.
«me
.
d©a
);

2825  
NGX_ERROR
;

2828 
found
:

2830 
íåõs
++;

2831 
íåy
--;

2833 i‡(
ßm∂es
 == 0) {

2834 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2836 
mp4
->
fûe
.
«me
.
d©a
);

2837  
NGX_ERROR
;

2840 
èrgë_chunk
 = 
chunk
 - 1;

2841 
èrgë_chunk
 +
°¨t_ßm∂e
 / 
ßm∂es
;

2842 
chunk_ßm∂es
 = 
°¨t_ßm∂e
 % 
ßm∂es
;

2844 i‡(
°¨t
) {

2845 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2847 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2848 
åak
->
°¨t_chunk
 = 
èrgë_chunk
;

2849 
åak
->
°¨t_chunk_ßm∂es
 = 
chunk_ßm∂es
;

2851 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 
åak
->
°¨t_chunk
 + 1);

2853 
ßm∂es
 -
chunk_ßm∂es
;

2855 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2857 
åak
->
°¨t_chunk
,Åøk->
°¨t_chunk_ßm∂es
);

2860 i‡(
°¨t_ßm∂e
) {

2861 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2862 
åak
->
ßm∂e_to_chunk_íåõs
 -
íåõs
 - 1;

2863 
åak
->
íd_chunk_ßm∂es
 = 
ßm∂es
;

2866 
d©a
->
œ°
 = (
u_ch¨
 *Ë
íåy
;

2867 
åak
->
ßm∂e_to_chunk_íåõs
 -
íåõs
;

2868 
åak
->
íd_chunk_ßm∂es
 = 
¥ev_ßm∂es
;

2871 i‡(
chunk_ßm∂es
) {

2872 
åak
->
íd_chunk
 = 
èrgë_chunk
 + 1;

2873 
åak
->
íd_chunk_ßm∂es
 = 
chunk_ßm∂es
;

2876 
åak
->
íd_chunk
 = 
èrgë_chunk
;

2879 
ßm∂es
 = 
chunk_ßm∂es
;

2880 
√xt_chunk
 = 
chunk
 + 1;

2882 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2884 
åak
->
íd_chunk
,Åøk->
íd_chunk_ßm∂es
);

2887 i‡(
chunk_ßm∂es
 && 
√xt_chunk
 - 
èrgë_chunk
 == 2) {

2889 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, samples);

2891 } i‡(
chunk_ßm∂es
 && 
°¨t
) {

2893 
fú°
 = &
åak
->
°sc_°¨t_chunk_íåy
;

2894 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 1);

2895 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, samples);

2896 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2898 
buf
 = &
åak
->
°sc_°¨t_chunk_buf
;

2899 
buf
->
ãmp‹¨y
 = 1;

2900 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2901 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2903 
åak
->
out
[
NGX_HTTP_MP4_STSC_START
].
buf
 = buf;

2905 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 
åak
->
°¨t_chunk
 + 2);

2907 
åak
->
ßm∂e_to_chunk_íåõs
++;

2909 } i‡(
chunk_ßm∂es
) {

2911 
fú°
 = &
åak
->
°sc_íd_chunk_íåy
;

2912 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
);

2913 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, samples);

2914 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2916 
buf
 = &
åak
->
°sc_íd_chunk_buf
;

2917 
buf
->
ãmp‹¨y
 = 1;

2918 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2919 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2921 
åak
->
out
[
NGX_HTTP_MP4_STSC_END
].
buf
 = buf;

2923 
åak
->
ßm∂e_to_chunk_íåõs
++;

2926  
NGX_OK
;

2927 
	}
}

2931 
u_ch¨
 
	msize
[4];

2932 
u_ch¨
 
	m«me
[4];

2933 
u_ch¨
 
	mvîsi⁄
[1];

2934 
u_ch¨
 
	mÊags
[3];

2935 
u_ch¨
 
	munif‹m_size
[4];

2936 
u_ch¨
 
	míåõs
[4];

2937 } 
	tngx_mp4_°sz_©om_t
;

2940 
ngx_öt_t


2941 
	$ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2943 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2944 
size_t
 
©om_size
;

2945 
uöt32_t
 
íåõs
, 
size
;

2946 
ngx_buf_t
 *
©om
, *
d©a
;

2947 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2948 
ngx_hâp_mp4_åak_t
 *
åak
;

2952 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stszátom");

2954 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2955 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om_hódî
;

2956 
	`ngx_mp4_£t_©om_«me
(
°sz_©om
, 's', 't', 's', 'z');

2958 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
Ë> 
©om_d©a_size
) {

2959 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2960 "\"%s\" mp4 stszátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2961  
NGX_ERROR
;

2964 
size
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->
unif‹m_size
);

2965 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->entries);

2967 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2968 "ßm∂êunif‹m size:%uD,É¡rõs:%uD", 
size
, 
íåõs
);

2970 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2971 
åak
->
ßm∂e_sizes_íåõs
 = 
íåõs
;

2973 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sz_©om_t
);

2975 
©om
 = &
åak
->
°sz_©om_buf
;

2976 
©om
->
ãmp‹¨y
 = 1;

2977 
©om
->
pos
 = 
©om_hódî
;

2978 
©om
->
œ°
 = 
©om_èbÀ
;

2980 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
 = 
©om
;

2982 i‡(
size
 == 0) {

2983 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
)

2984 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2986 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2988 
mp4
->
fûe
.
«me
.
d©a
);

2989  
NGX_ERROR
;

2992 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2994 
d©a
 = &
åak
->
°sz_d©a_buf
;

2995 
d©a
->
ãmp‹¨y
 = 1;

2996 
d©a
->
pos
 = 
©om_èbÀ
;

2997 
d©a
->
œ°
 = 
©om_íd
;

2999 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
 = 
d©a
;

3004 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

3005 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

3006 
åak
->
size
 +
©om_size
;

3009 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3011  
NGX_OK
;

3012 
	}
}

3015 
ngx_öt_t


3016 
	$ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3017 
ngx_hâp_mp4_åak_t
 *
åak
)

3019 
size_t
 
©om_size
;

3020 
uöt32_t
 *
pos
, *
íd
, 
íåõs
;

3021 
ngx_buf_t
 *
©om
, *
d©a
;

3022 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

3030 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3033 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
;

3035 i‡(
d©a
) {

3036 
íåõs
 = 
åak
->
ßm∂e_sizes_íåõs
;

3038 i‡(
åak
->
°¨t_ßm∂e
 > 
íåõs
) {

3039 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3041 
mp4
->
fûe
.
«me
.
d©a
);

3042  
NGX_ERROR
;

3045 
íåõs
 -
åak
->
°¨t_ßm∂e
;

3046 
d©a
->
pos
 +
åak
->
°¨t_ßm∂e
 * (
uöt32_t
);

3047 
íd
 = (
uöt32_t
 *Ë
d©a
->
pos
;

3049 
pos
 = 
íd
 - 
åak
->
°¨t_chunk_ßm∂es
;Öos <Énd;Öos++) {

3050 
åak
->
°¨t_chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

3053 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3055 
åak
->
°¨t_chunk_ßm∂es_size
);

3057 i‡(
mp4
->
Àngth
) {

3058 i‡(
åak
->
íd_ßm∂e
 -Åøk->
°¨t_ßm∂e
 > 
íåõs
) {

3059 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3061 
mp4
->
fûe
.
«me
.
d©a
);

3062  
NGX_ERROR
;

3065 
íåõs
 = 
åak
->
íd_ßm∂e
 -Åøk->
°¨t_ßm∂e
;

3066 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt32_t
);

3067 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

3069 
pos
 = 
íd
 - 
åak
->
íd_chunk_ßm∂es
;Öos <Énd;Öos++) {

3070 
åak
->
íd_chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

3073 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3075 
åak
->
íd_chunk_ßm∂es_size
);

3078 
©om_size
 = (
ngx_mp4_°sz_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3079 
åak
->
size
 +
©om_size
;

3081 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
;

3082 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om
->
pos
;

3084 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
size
, 
©om_size
);

3085 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
íåõs
,Éntries);

3088  
NGX_OK
;

3089 
	}
}

3093 
u_ch¨
 
	msize
[4];

3094 
u_ch¨
 
	m«me
[4];

3095 
u_ch¨
 
	mvîsi⁄
[1];

3096 
u_ch¨
 
	mÊags
[3];

3097 
u_ch¨
 
	míåõs
[4];

3098 } 
	tngx_mp4_°co_©om_t
;

3101 
ngx_öt_t


3102 
	$ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

3104 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

3105 
uöt32_t
 
íåõs
;

3106 
ngx_buf_t
 *
©om
, *
d©a
;

3107 
ngx_mp4_°co_©om_t
 *
°co_©om
;

3108 
ngx_hâp_mp4_åak_t
 *
åak
;

3112 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stcoátom");

3114 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

3115 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om_hódî
;

3116 
	`ngx_mp4_£t_©om_«me
(
°co_©om
, 's', 't', 'c', 'o');

3118 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
Ë> 
©om_d©a_size
) {

3119 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3120 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3121  
NGX_ERROR
;

3124 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°co_©om
->entries);

3126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

3128 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
)

3129 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

3131 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3132 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3133  
NGX_ERROR
;

3136 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°co_©om_t
);

3137 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

3139 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

3140 
åak
->
chunks
 = 
íåõs
;

3142 
©om
 = &
åak
->
°co_©om_buf
;

3143 
©om
->
ãmp‹¨y
 = 1;

3144 
©om
->
pos
 = 
©om_hódî
;

3145 
©om
->
œ°
 = 
©om_èbÀ
;

3147 
d©a
 = &
åak
->
°co_d©a_buf
;

3148 
d©a
->
ãmp‹¨y
 = 1;

3149 
d©a
->
pos
 = 
©om_èbÀ
;

3150 
d©a
->
œ°
 = 
©om_íd
;

3152 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
 = 
©om
;

3153 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
 = 
d©a
;

3155 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3157  
NGX_OK
;

3158 
	}
}

3161 
ngx_öt_t


3162 
	$ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3163 
ngx_hâp_mp4_åak_t
 *
åak
)

3165 
size_t
 
©om_size
;

3166 
uöt32_t
 
íåõs
;

3167 
ngx_buf_t
 *
©om
, *
d©a
;

3168 
ngx_mp4_°co_©om_t
 *
°co_©om
;

3176 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3179 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

3181 i‡(
d©a
 =
NULL
) {

3182 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3184 
mp4
->
fûe
.
«me
.
d©a
);

3185  
NGX_ERROR
;

3188 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

3189 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3191 
mp4
->
fûe
.
«me
.
d©a
);

3192  
NGX_ERROR
;

3195 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt32_t
);

3197 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_32vÆue
(
d©a
->
pos
);

3198 
åak
->
°¨t_off£t
 +åak->
°¨t_chunk_ßm∂es_size
;

3199 
	`ngx_mp4_£t_32vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

3201 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3202 "°¨àchunk off£t:%O", 
åak
->
°¨t_off£t
);

3204 i‡(
mp4
->
Àngth
) {

3206 i‡(
åak
->
íd_chunk
 >Åøk->
chunks
) {

3207 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3209 
mp4
->
fûe
.
«me
.
d©a
);

3210  
NGX_ERROR
;

3213 
íåõs
 = 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
;

3214 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt32_t
);

3216 i‡(
íåõs
) {

3217 
åak
->
íd_off£t
 =

3218 
	`ngx_mp4_gë_32vÆue
(
d©a
->
œ°
 - (
uöt32_t
));

3219 
åak
->
íd_off£t
 +åak->
íd_chunk_ßm∂es_size
;

3221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3222 "íd chunk off£t:%O", 
åak
->
íd_off£t
);

3226 
íåõs
 = 
åak
->
chunks
 -Åøk->
°¨t_chunk
;

3227 
åak
->
íd_off£t
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
;

3230 i‡(
íåõs
 == 0) {

3231 
åak
->
°¨t_off£t
 = 
mp4
->
íd
;

3232 
åak
->
íd_off£t
 = 0;

3235 
©om_size
 = (
ngx_mp4_°co_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3236 
åak
->
size
 +
©om_size
;

3238 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
;

3239 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om
->
pos
;

3241 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
size
, 
©om_size
);

3242 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
íåõs
,Éntries);

3244  
NGX_OK
;

3245 
	}
}

3249 
	$ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3250 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
)

3252 
uöt32_t
 
off£t
, *
íåy
, *
íd
;

3253 
ngx_buf_t
 *
d©a
;

3260 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3263 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

3264 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

3265 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

3267 
íåy
 < 
íd
) {

3268 
off£t
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

3269 
off£t
 +
adju°mít
;

3270 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
off£t
);

3271 
íåy
++;

3273 
	}
}

3277 
u_ch¨
 
	msize
[4];

3278 
u_ch¨
 
	m«me
[4];

3279 
u_ch¨
 
	mvîsi⁄
[1];

3280 
u_ch¨
 
	mÊags
[3];

3281 
u_ch¨
 
	míåõs
[4];

3282 } 
	tngx_mp4_co64_©om_t
;

3285 
ngx_öt_t


3286 
	$ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

3288 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

3289 
uöt32_t
 
íåõs
;

3290 
ngx_buf_t
 *
©om
, *
d©a
;

3291 
ngx_mp4_co64_©om_t
 *
co64_©om
;

3292 
ngx_hâp_mp4_åak_t
 *
åak
;

3296 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 co64átom");

3298 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

3299 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om_hódî
;

3300 
	`ngx_mp4_£t_©om_«me
(
co64_©om
, 'c', 'o', '6', '4');

3302 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
Ë> 
©om_d©a_size
) {

3303 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3304 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3305  
NGX_ERROR
;

3308 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
co64_©om
->entries);

3310 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

3312 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
)

3313 + 
íåõs
 * (
uöt64_t
Ë> 
©om_d©a_size
)

3315 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3316 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3317  
NGX_ERROR
;

3320 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_co64_©om_t
);

3321 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt64_t
);

3323 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

3324 
åak
->
chunks
 = 
íåõs
;

3326 
©om
 = &
åak
->
co64_©om_buf
;

3327 
©om
->
ãmp‹¨y
 = 1;

3328 
©om
->
pos
 = 
©om_hódî
;

3329 
©om
->
œ°
 = 
©om_èbÀ
;

3331 
d©a
 = &
åak
->
co64_d©a_buf
;

3332 
d©a
->
ãmp‹¨y
 = 1;

3333 
d©a
->
pos
 = 
©om_èbÀ
;

3334 
d©a
->
œ°
 = 
©om_íd
;

3336 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
 = 
©om
;

3337 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
 = 
d©a
;

3339 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3341  
NGX_OK
;

3342 
	}
}

3345 
ngx_öt_t


3346 
	$ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3347 
ngx_hâp_mp4_åak_t
 *
åak
)

3349 
size_t
 
©om_size
;

3350 
uöt64_t
 
íåõs
;

3351 
ngx_buf_t
 *
©om
, *
d©a
;

3352 
ngx_mp4_co64_©om_t
 *
co64_©om
;

3360 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3363 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

3365 i‡(
d©a
 =
NULL
) {

3366 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3368 
mp4
->
fûe
.
«me
.
d©a
);

3369  
NGX_ERROR
;

3372 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

3373 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3375 
mp4
->
fûe
.
«me
.
d©a
);

3376  
NGX_ERROR
;

3379 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt64_t
);

3381 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_64vÆue
(
d©a
->
pos
);

3382 
åak
->
°¨t_off£t
 +åak->
°¨t_chunk_ßm∂es_size
;

3383 
	`ngx_mp4_£t_64vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

3385 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3386 "°¨àchunk off£t:%O", 
åak
->
°¨t_off£t
);

3388 i‡(
mp4
->
Àngth
) {

3390 i‡(
åak
->
íd_chunk
 >Åøk->
chunks
) {

3391 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3393 
mp4
->
fûe
.
«me
.
d©a
);

3394  
NGX_ERROR
;

3397 
íåõs
 = 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
;

3398 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt64_t
);

3400 i‡(
íåõs
) {

3401 
åak
->
íd_off£t
 =

3402 
	`ngx_mp4_gë_64vÆue
(
d©a
->
œ°
 - (
uöt64_t
));

3403 
åak
->
íd_off£t
 +åak->
íd_chunk_ßm∂es_size
;

3405 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3406 "íd chunk off£t:%O", 
åak
->
íd_off£t
);

3410 
íåõs
 = 
åak
->
chunks
 -Åøk->
°¨t_chunk
;

3411 
åak
->
íd_off£t
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
;

3414 i‡(
íåõs
 == 0) {

3415 
åak
->
°¨t_off£t
 = 
mp4
->
íd
;

3416 
åak
->
íd_off£t
 = 0;

3419 
©om_size
 = (
ngx_mp4_co64_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3420 
åak
->
size
 +
©om_size
;

3422 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
;

3423 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om
->
pos
;

3425 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
size
, 
©om_size
);

3426 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
íåõs
,Éntries);

3428  
NGX_OK
;

3429 
	}
}

3433 
	$ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3434 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
)

3436 
uöt64_t
 
off£t
, *
íåy
, *
íd
;

3437 
ngx_buf_t
 *
d©a
;

3444 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3447 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

3448 
íåy
 = (
uöt64_t
 *Ë
d©a
->
pos
;

3449 
íd
 = (
uöt64_t
 *Ë
d©a
->
œ°
;

3451 
íåy
 < 
íd
) {

3452 
off£t
 = 
	`ngx_mp4_gë_64vÆue
(
íåy
);

3453 
off£t
 +
adju°mít
;

3454 
	`ngx_mp4_£t_64vÆue
(
íåy
, 
off£t
);

3455 
íåy
++;

3457 
	}
}

3461 
	$ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3463 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3465 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3466 
˛cf
->
h™dÀr
 = 
ngx_hâp_mp4_h™dÀr
;

3468  
NGX_CONF_OK
;

3469 
	}
}

3473 
	$ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3475 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

3477 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_mp4_c⁄f_t
));

3478 i‡(
c⁄f
 =
NULL
) {

3479  
NULL
;

3482 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3483 
c⁄f
->
max_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3485  
c⁄f
;

3486 
	}
}

3490 
	$ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3492 
ngx_hâp_mp4_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3493 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
 = 
chûd
;

3495 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size, 512 * 1024);

3496 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_buf„r_size
, 
¥ev
->max_buffer_size,

3499  
NGX_CONF_OK
;

3500 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_not_modified_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_uöt_t
 
ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_uöt_t
 
ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

16 
ngx_èbÀ_ñt_t
 *
hódî
);

17 
ngx_öt_t
 
ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

20 
ngx_hâp_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
 = {

21 
NULL
,

22 
ngx_hâp_nŸ_modifõd_fûãr_öô
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL
,

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
,

38 
NULL
,

39 
NGX_HTTP_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_öt_t


55 
	$ngx_hâp_nŸ_modifõd_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

57 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


58 || 
r
 !r->
maö


59 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

61  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

64 i‡(
r
->
hódîs_ö
.
if_unmodifõd_sö˚


65 && !
	`ngx_hâp_ã°_if_unmodifõd
(
r
))

67  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

68 
NGX_HTTP_PRECONDITION_FAILED
);

71 i‡(
r
->
hódîs_ö
.
if_m©ch


72 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_m©ch
))

74  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

75 
NGX_HTTP_PRECONDITION_FAILED
);

78 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚
 ||Ñ->hódîs_ö.
if_n⁄e_m©ch
) {

80 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚


81 && 
	`ngx_hâp_ã°_if_modifõd
(
r
))

83  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

86 i‡(
r
->
hódîs_ö
.
if_n⁄e_m©ch


87 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_n⁄e_m©ch
))

89  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

94 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_NOT_MODIFIED
;

95 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

96 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

97 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

98 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

100 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög
) {

101 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

102 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

105  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

109 
	}
}

112 
ngx_uöt_t


113 
	$ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
)

115 
time_t
 
iums
;

117 
iums
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
d©a
,

118 
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
Àn
);

120 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

121 "hâ∞iums:%dÜm:%d", 
iums
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

123 i‡(
iums
 >
r
->
hódîs_out
.
œ°_modifõd_time
) {

128 
	}
}

131 
ngx_uöt_t


132 
	$ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
)

134 
time_t
 
ims
;

135 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

137 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

139 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_OFF
) {

143 
ims
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
d©a
,

144 
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
Àn
);

146 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

147 "hâ∞ims:%dÜm:%d", 
ims
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

149 i‡(
ims
 =
r
->
hódîs_out
.
œ°_modifõd_time
) {

153 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_EXACT


154 || 
ims
 < 
r
->
hódîs_out
.
œ°_modifõd_time
)

160 
	}
}

163 
ngx_uöt_t


164 
	$ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
hódî
)

166 
u_ch¨
 *
°¨t
, *
íd
, 
ch
;

167 
ngx_°r_t
 *
ëag
, *
li°
;

169 
li°
 = &
hódî
->
vÆue
;

171 i‡(
li°
->
Àn
 =1 &&Üi°->
d©a
[0] == '*') {

175 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

179 
ëag
 = &
r
->
hódîs_out
.ëag->
vÆue
;

181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

182 "hâ∞im:\"%V\"Éèg:%V", 
li°
, 
ëag
);

184 
°¨t
 = 
li°
->
d©a
;

185 
íd
 = 
li°
->
d©a
 +Üi°->
Àn
;

187 
°¨t
 < 
íd
) {

189 i‡(
ëag
->
Àn
 > (
size_t
Ë(
íd
 - 
°¨t
)) {

193 i‡(
	`ngx_°∫cmp
(
°¨t
, 
ëag
->
d©a
,Éèg->
Àn
) != 0) {

194 
skù
;

197 
°¨t
 +
ëag
->
Àn
;

199 
°¨t
 < 
íd
) {

200 
ch
 = *
°¨t
;

202 i‡(
ch
 == ' ' || ch == '\t') {

203 
°¨t
++;

210 i‡(
°¨t
 =
íd
 || *start == ',') {

214 
skù
:

216 
°¨t
 < 
íd
 && *start != ',') { start++; }

217 
°¨t
 < 
íd
) {

218 
ch
 = *
°¨t
;

220 i‡(
ch
 == ' ' || ch == '\t' || ch == ',') {

221 
°¨t
++;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

237 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_nŸ_modifõd_hódî_fûãr
;

239  
NGX_OK
;

240 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_¥oxy_ªwrôe_s
 
	tngx_hâp_¥oxy_ªwrôe_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_¥oxy_ªwrôe_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tsize_t
 
	t¥efix
, size_à
	tÀn
,

17 
	tngx_hâp_¥oxy_ªwrôe_t
 *
	t¥
);

19 
	sngx_hâp_¥oxy_ªwrôe_s
 {

20 
ngx_hâp_¥oxy_ªwrôe_±
 
h™dÀr
;

23 
ngx_hâp_com∂ex_vÆue_t
 
com∂ex
;

24 #i‡(
NGX_PCRE
)

25 
ngx_hâp_ªgex_t
 *
ªgex
;

27 } 
∑âîn
;

29 
ngx_hâp_com∂ex_vÆue_t
 
ª∂a˚mít
;

34 
ngx_°r_t
 
key_°¨t
;

35 
ngx_°r_t
 
schema
;

36 
ngx_°r_t
 
ho°_hódî
;

37 
ngx_°r_t
 
p‹t
;

38 
ngx_°r_t
 
uri
;

39 } 
	tngx_hâp_¥oxy_v¨s_t
;

43 
ngx_hâp_up°ªam_c⁄f_t
 
up°ªam
;

45 
ngx_¨øy_t
 *
Êushes
;

46 
ngx_¨øy_t
 *
body_£t_Àn
;

47 
ngx_¨øy_t
 *
body_£t
;

48 
ngx_¨øy_t
 *
hódîs_£t_Àn
;

49 
ngx_¨øy_t
 *
hódîs_£t
;

50 
ngx_hash_t
 
hódîs_£t_hash
;

52 
ngx_¨øy_t
 *
hódîs_sour˚
;

54 
ngx_¨øy_t
 *
¥oxy_Àngths
;

55 
ngx_¨øy_t
 *
¥oxy_vÆues
;

57 
ngx_¨øy_t
 *
ªdúe˘s
;

58 
ngx_¨øy_t
 *
cookõ_domaös
;

59 
ngx_¨øy_t
 *
cookõ_∑ths
;

61 
ngx_°r_t
 
body_sour˚
;

63 
ngx_°r_t
 
mëhod
;

64 
ngx_°r_t
 
loˇti⁄
;

65 
ngx_°r_t
 
uæ
;

67 #i‡(
NGX_HTTP_CACHE
)

68 
ngx_hâp_com∂ex_vÆue_t
 
ˇche_key
;

71 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

73 
ngx_Êag_t
 
ªdúe˘
;

75 
ngx_uöt_t
 
hâp_vîsi⁄
;

77 
ngx_uöt_t
 
hódîs_hash_max_size
;

78 
ngx_uöt_t
 
hódîs_hash_buckë_size
;

80 #i‡(
NGX_HTTP_SSL
)

81 
ngx_uöt_t
 
s¶
;

82 
ngx_uöt_t
 
s¶_¥Ÿocﬁs
;

83 
ngx_°r_t
 
s¶_cùhîs
;

85 } 
	tngx_hâp_¥oxy_loc_c⁄f_t
;

89 
ngx_hâp_°©us_t
 
°©us
;

90 
ngx_hâp_chunked_t
 
chunked
;

91 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

92 
off_t
 
öã∫Æ_body_Àngth
;

94 
ngx_uöt_t
 
hód
;

95 } 
	tngx_hâp_¥oxy_˘x_t
;

98 
ngx_öt_t
 
	`ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_hâp_¥oxy_˘x_t
 *
˘x
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

100 #i‡(
NGX_HTTP_CACHE
)

101 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

103 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

104 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

105 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

106 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

107 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
);

108 
ngx_öt_t
 
	`ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
,

109 
ngx_buf_t
 *
buf
);

110 
ngx_öt_t
 
	`ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
,

111 
ngx_buf_t
 *
buf
);

112 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
,

113 
ssize_t
 
byãs
);

114 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
,

115 
ssize_t
 
byãs
);

116 
	`ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

117 
	`ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_öt_t
 
rc
);

120 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

121 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

122 
ngx_öt_t
 
	`ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

124 
ngx_öt_t


125 
	`ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

126 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

127 
ngx_öt_t


128 
	`ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

130 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

132 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

133 
ngx_èbÀ_ñt_t
 *
h
);

134 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

135 
ngx_èbÀ_ñt_t
 *
h
, 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
);

136 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
,

137 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
);

139 
ngx_öt_t
 
	`ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

140 *
	`ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

141 *
	`ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

142 *
∑ª¡
, *
chûd
);

143 
ngx_öt_t
 
	`ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
,

144 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_¥oxy_loc_c⁄f_à*
¥ev
);

146 *
	`ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

147 *
c⁄f
);

148 *
	`ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

149 *
c⁄f
);

150 *
	`ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

151 *
c⁄f
);

152 *
	`ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

153 *
c⁄f
);

154 *
	`ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

155 *
c⁄f
);

156 #i‡(
NGX_HTTP_CACHE
)

157 *
	`ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

158 *
c⁄f
);

159 *
	`ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

160 *
c⁄f
);

163 *
	`ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

165 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
,

166 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

168 #i‡(
NGX_HTTP_SSL
)

169 
ngx_öt_t
 
	`ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

170 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

172 
	`ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
);

175 
ngx_c⁄f_po°_t
 
ngx_hâp_¥oxy_low©_po°
 =

176 { 
ngx_hâp_¥oxy_low©_check
 
	}
};

179 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_√xt_up°ªam_masks
[] = {

180 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

181 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

182 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

183 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

184 { 
ngx_°rög
("hâp_502"), 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

185 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

186 { 
ngx_°rög
("hâp_504"), 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

187 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

188 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

189 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

190 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

191 { 
ngx_nuŒ_°rög
, 0 }

195 #i‡(
NGX_HTTP_SSL
)

197 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_s¶_¥Ÿocﬁs
[] = {

198 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

199 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

200 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

201 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

202 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

203 { 
ngx_nuŒ_°rög
, 0 }

209 
ngx_c⁄f_íum_t
 
	gngx_hâp_¥oxy_hâp_vîsi⁄
[] = {

210 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

211 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

212 { 
ngx_nuŒ_°rög
, 0 }

216 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
;

219 
ngx_comm™d_t
 
	gngx_hâp_¥oxy_comm™ds
[] = {

221 { 
ngx_°rög
("proxy_pass"),

222 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

223 
ngx_hâp_¥oxy_∑ss
,

224 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
NULL
 },

228 { 
ngx_°rög
("proxy_redirect"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

230 
ngx_hâp_¥oxy_ªdúe˘
,

231 
NGX_HTTP_LOC_CONF_OFFSET
,

233 
NULL
 },

235 { 
ngx_°rög
("proxy_cookie_domain"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

237 
ngx_hâp_¥oxy_cookõ_domaö
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

240 
NULL
 },

242 { 
ngx_°rög
("proxy_cookie_path"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

244 
ngx_hâp_¥oxy_cookõ_∑th
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

247 
NULL
 },

249 { 
ngx_°rög
("proxy_store"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

251 
ngx_hâp_¥oxy_°‹e
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

254 
NULL
 },

256 { 
ngx_°rög
("proxy_store_access"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

258 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

261 
NULL
 },

263 { 
ngx_°rög
("proxy_buffering"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

265 
ngx_c⁄f_£t_Êag_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

268 
NULL
 },

270 { 
ngx_°rög
("proxy_ignore_client_abort"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

272 
ngx_c⁄f_£t_Êag_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

275 
NULL
 },

277 { 
ngx_°rög
("proxy_bind"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

279 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

282 
NULL
 },

284 { 
ngx_°rög
("proxy_connect_timeout"),

285 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

286 
ngx_c⁄f_£t_m£c_¶Ÿ
,

287 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

289 
NULL
 },

291 { 
ngx_°rög
("proxy_send_timeout"),

292 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

293 
ngx_c⁄f_£t_m£c_¶Ÿ
,

294 
NGX_HTTP_LOC_CONF_OFFSET
,

295 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

296 
NULL
 },

298 { 
ngx_°rög
("proxy_send_lowat"),

299 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

300 
ngx_c⁄f_£t_size_¶Ÿ
,

301 
NGX_HTTP_LOC_CONF_OFFSET
,

302 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

303 &
ngx_hâp_¥oxy_low©_po°
 },

305 { 
ngx_°rög
("proxy_intercept_errors"),

306 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

307 
ngx_c⁄f_£t_Êag_¶Ÿ
,

308 
NGX_HTTP_LOC_CONF_OFFSET
,

309 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

310 
NULL
 },

312 { 
ngx_°rög
("proxy_set_header"),

313 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

314 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

315 
NGX_HTTP_LOC_CONF_OFFSET
,

316 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_sour˚
),

317 
NULL
 },

319 { 
ngx_°rög
("proxy_headers_hash_max_size"),

320 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

321 
ngx_c⁄f_£t_num_¶Ÿ
,

322 
NGX_HTTP_LOC_CONF_OFFSET
,

323 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_max_size
),

324 
NULL
 },

326 { 
ngx_°rög
("proxy_headers_hash_bucket_size"),

327 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

328 
ngx_c⁄f_£t_num_¶Ÿ
,

329 
NGX_HTTP_LOC_CONF_OFFSET
,

330 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_buckë_size
),

331 
NULL
 },

333 { 
ngx_°rög
("proxy_set_body"),

334 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

335 
ngx_c⁄f_£t_°r_¶Ÿ
,

336 
NGX_HTTP_LOC_CONF_OFFSET
,

337 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
body_sour˚
),

338 
NULL
 },

340 { 
ngx_°rög
("proxy_method"),

341 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

342 
ngx_c⁄f_£t_°r_¶Ÿ
,

343 
NGX_HTTP_LOC_CONF_OFFSET
,

344 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
mëhod
),

345 
NULL
 },

347 { 
ngx_°rög
("proxy_pass_request_headers"),

348 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

349 
ngx_c⁄f_£t_Êag_¶Ÿ
,

350 
NGX_HTTP_LOC_CONF_OFFSET
,

351 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

352 
NULL
 },

354 { 
ngx_°rög
("proxy_pass_request_body"),

355 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

356 
ngx_c⁄f_£t_Êag_¶Ÿ
,

357 
NGX_HTTP_LOC_CONF_OFFSET
,

358 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

359 
NULL
 },

361 { 
ngx_°rög
("proxy_buffer_size"),

362 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

363 
ngx_c⁄f_£t_size_¶Ÿ
,

364 
NGX_HTTP_LOC_CONF_OFFSET
,

365 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

366 
NULL
 },

368 { 
ngx_°rög
("proxy_read_timeout"),

369 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

370 
ngx_c⁄f_£t_m£c_¶Ÿ
,

371 
NGX_HTTP_LOC_CONF_OFFSET
,

372 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

373 
NULL
 },

375 { 
ngx_°rög
("proxy_buffers"),

376 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

377 
ngx_c⁄f_£t_bufs_¶Ÿ
,

378 
NGX_HTTP_LOC_CONF_OFFSET
,

379 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
bufs
),

380 
NULL
 },

382 { 
ngx_°rög
("proxy_busy_buffers_size"),

383 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

384 
ngx_c⁄f_£t_size_¶Ÿ
,

385 
NGX_HTTP_LOC_CONF_OFFSET
,

386 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

387 
NULL
 },

389 #i‡(
NGX_HTTP_CACHE
)

391 { 
ngx_°rög
("proxy_cache"),

392 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

393 
ngx_hâp_¥oxy_ˇche
,

394 
NGX_HTTP_LOC_CONF_OFFSET
,

396 
NULL
 },

398 { 
ngx_°rög
("proxy_cache_key"),

399 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

400 
ngx_hâp_¥oxy_ˇche_key
,

401 
NGX_HTTP_LOC_CONF_OFFSET
,

403 
NULL
 },

405 { 
ngx_°rög
("proxy_cache_path"),

406 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

407 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

410 &
ngx_hâp_¥oxy_moduÀ
 },

412 { 
ngx_°rög
("proxy_cache_bypass"),

413 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

414 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

415 
NGX_HTTP_LOC_CONF_OFFSET
,

416 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

417 
NULL
 },

419 { 
ngx_°rög
("proxy_no_cache"),

420 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

421 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

422 
NGX_HTTP_LOC_CONF_OFFSET
,

423 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

424 
NULL
 },

426 { 
ngx_°rög
("proxy_cache_valid"),

427 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

428 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

429 
NGX_HTTP_LOC_CONF_OFFSET
,

430 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

431 
NULL
 },

433 { 
ngx_°rög
("proxy_cache_min_uses"),

434 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

435 
ngx_c⁄f_£t_num_¶Ÿ
,

436 
NGX_HTTP_LOC_CONF_OFFSET
,

437 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

438 
NULL
 },

440 { 
ngx_°rög
("proxy_cache_use_stale"),

441 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

442 
ngx_c⁄f_£t_bômask_¶Ÿ
,

443 
NGX_HTTP_LOC_CONF_OFFSET
,

444 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

445 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

447 { 
ngx_°rög
("proxy_cache_methods"),

448 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

449 
ngx_c⁄f_£t_bômask_¶Ÿ
,

450 
NGX_HTTP_LOC_CONF_OFFSET
,

451 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

452 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

454 { 
ngx_°rög
("proxy_cache_lock"),

455 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

456 
ngx_c⁄f_£t_Êag_¶Ÿ
,

457 
NGX_HTTP_LOC_CONF_OFFSET
,

458 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

459 
NULL
 },

461 { 
ngx_°rög
("proxy_cache_lock_timeout"),

462 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

463 
ngx_c⁄f_£t_m£c_¶Ÿ
,

464 
NGX_HTTP_LOC_CONF_OFFSET
,

465 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

466 
NULL
 },

468 { 
ngx_°rög
("proxy_cache_revalidate"),

469 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

470 
ngx_c⁄f_£t_Êag_¶Ÿ
,

471 
NGX_HTTP_LOC_CONF_OFFSET
,

472 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

473 
NULL
 },

477 { 
ngx_°rög
("proxy_temp_path"),

478 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

479 
ngx_c⁄f_£t_∑th_¶Ÿ
,

480 
NGX_HTTP_LOC_CONF_OFFSET
,

481 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

482 
NULL
 },

484 { 
ngx_°rög
("proxy_max_temp_file_size"),

485 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

486 
ngx_c⁄f_£t_size_¶Ÿ
,

487 
NGX_HTTP_LOC_CONF_OFFSET
,

488 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

489 
NULL
 },

491 { 
ngx_°rög
("proxy_temp_file_write_size"),

492 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

493 
ngx_c⁄f_£t_size_¶Ÿ
,

494 
NGX_HTTP_LOC_CONF_OFFSET
,

495 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

496 
NULL
 },

498 { 
ngx_°rög
("proxy_next_upstream"),

499 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

500 
ngx_c⁄f_£t_bômask_¶Ÿ
,

501 
NGX_HTTP_LOC_CONF_OFFSET
,

502 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

503 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

505 { 
ngx_°rög
("proxy_pass_header"),

506 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

507 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

508 
NGX_HTTP_LOC_CONF_OFFSET
,

509 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

510 
NULL
 },

512 { 
ngx_°rög
("proxy_hide_header"),

513 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

514 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

515 
NGX_HTTP_LOC_CONF_OFFSET
,

516 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

517 
NULL
 },

519 { 
ngx_°rög
("proxy_ignore_headers"),

520 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

521 
ngx_c⁄f_£t_bômask_¶Ÿ
,

522 
NGX_HTTP_LOC_CONF_OFFSET
,

523 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

524 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

526 { 
ngx_°rög
("proxy_http_version"),

527 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

528 
ngx_c⁄f_£t_íum_¶Ÿ
,

529 
NGX_HTTP_LOC_CONF_OFFSET
,

530 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hâp_vîsi⁄
),

531 &
ngx_hâp_¥oxy_hâp_vîsi⁄
 },

533 #i‡(
NGX_HTTP_SSL
)

535 { 
ngx_°rög
("proxy_ssl_session_reuse"),

536 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

537 
ngx_c⁄f_£t_Êag_¶Ÿ
,

538 
NGX_HTTP_LOC_CONF_OFFSET
,

539 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

540 
NULL
 },

542 { 
ngx_°rög
("proxy_ssl_protocols"),

543 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

544 
ngx_c⁄f_£t_bômask_¶Ÿ
,

545 
NGX_HTTP_LOC_CONF_OFFSET
,

546 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

547 &
ngx_hâp_¥oxy_s¶_¥Ÿocﬁs
 },

549 { 
ngx_°rög
("proxy_ssl_ciphers"),

550 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

551 
ngx_c⁄f_£t_°r_¶Ÿ
,

552 
NGX_HTTP_LOC_CONF_OFFSET
,

553 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_cùhîs
),

554 
NULL
 },

558 
ngx_nuŒ_comm™d


562 
ngx_hâp_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ_˘x
 = {

563 
ngx_hâp_¥oxy_add_v¨übÀs
,

564 
NULL
,

566 
NULL
,

567 
NULL
,

569 
NULL
,

570 
NULL
,

572 
ngx_hâp_¥oxy_¸óã_loc_c⁄f
,

573 
ngx_hâp_¥oxy_mîge_loc_c⁄f


577 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
 = {

578 
NGX_MODULE_V1
,

579 &
ngx_hâp_¥oxy_moduÀ_˘x
,

580 
ngx_hâp_¥oxy_comm™ds
,

581 
NGX_HTTP_MODULE
,

582 
NULL
,

583 
NULL
,

584 
NULL
,

585 
NULL
,

586 
NULL
,

587 
NULL
,

588 
NULL
,

589 
NGX_MODULE_V1_PADDING


593 
	gngx_hâp_¥oxy_vîsi⁄
[] = " HTTP/1.0" 
CRLF
;

594 
	gngx_hâp_¥oxy_vîsi⁄_11
[] = " HTTP/1.1" 
CRLF
;

597 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_hódîs
[] = {

598 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

599 { 
ngx_°rög
("Connection"),Çgx_string("close") },

600 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

601 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("") },

602 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

603 { 
ngx_°rög
("Expect"),Çgx_string("") },

604 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

605 { 
ngx_nuŒ_°rög
,Çgx_null_string }

609 
ngx_°r_t
 
	gngx_hâp_¥oxy_hide_hódîs
[] = {

610 
ngx_°rög
("Date"),

611 
ngx_°rög
("Server"),

612 
ngx_°rög
("X-Pad"),

613 
ngx_°rög
("X-Accel-Expires"),

614 
ngx_°rög
("X-Accel-Redirect"),

615 
ngx_°rög
("X-Accel-Limit-Rate"),

616 
ngx_°rög
("X-Accel-Buffering"),

617 
ngx_°rög
("X-Accel-Charset"),

618 
ngx_nuŒ_°rög


622 #i‡(
NGX_HTTP_CACHE
)

624 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_ˇche_hódîs
[] = {

625 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

626 { 
ngx_°rög
("Connection"),Çgx_string("close") },

627 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

628 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("") },

629 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

630 { 
ngx_°rög
("Expect"),Çgx_string("") },

631 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

632 { 
ngx_°rög
("If-Modified-Since"),

633 
ngx_°rög
("$upstream_cache_last_modified") },

634 { 
ngx_°rög
("If-Unmodified-Since"),Çgx_string("") },

635 { 
ngx_°rög
("If-None-Match"),Çgx_string("") },

636 { 
ngx_°rög
("If-Match"),Çgx_string("") },

637 { 
ngx_°rög
("Range"),Çgx_string("") },

638 { 
ngx_°rög
("If-Range"),Çgx_string("") },

639 { 
ngx_nuŒ_°rög
,Çgx_null_string }

645 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_¥oxy_v¨s
[] = {

647 { 
ngx_°rög
("¥oxy_ho°"), 
NULL
, 
ngx_hâp_¥oxy_ho°_v¨übÀ
, 0,

648 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

650 { 
ngx_°rög
("¥oxy_p‹t"), 
NULL
, 
ngx_hâp_¥oxy_p‹t_v¨übÀ
, 0,

651 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

653 { 
ngx_°rög
("¥oxy_add_x_f‹w¨ded_f‹"), 
NULL
,

654 
ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

657 { 
ngx_°rög
("¥oxy_add_vü"), 
NULL
, NULL, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

660 { 
ngx_°rög
("¥oxy_öã∫Æ_body_Àngth"), 
NULL
,

661 
ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
, 0,

662 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

664 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

668 
ngx_∑th_öô_t
 
	gngx_hâp_¥oxy_ãmp_∑th
 = {

669 
ngx_°rög
(
NGX_HTTP_PROXY_TEMP_PATH
), { 1, 2, 0 }

673 
ngx_öt_t


674 
	$ngx_hâp_¥oxy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

676 
ngx_öt_t
 
rc
;

677 
ngx_hâp_up°ªam_t
 *
u
;

678 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

679 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

681 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

682  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

685 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_¥oxy_˘x_t
));

686 i‡(
˘x
 =
NULL
) {

687  
NGX_ERROR
;

690 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_¥oxy_moduÀ
);

692 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

694 
u
 = 
r
->
up°ªam
;

696 i‡(
∂cf
->
¥oxy_Àngths
 =
NULL
) {

697 
˘x
->
v¨s
 = 
∂cf
->vars;

698 
u
->
schema
 = 
∂cf
->
v¨s
.schema;

699 #i‡(
NGX_HTTP_SSL
)

700 
u
->
s¶
 = (
∂cf
->
up°ªam
.s¶ !
NULL
);

704 i‡(
	`ngx_hâp_¥oxy_evÆ
(
r
, 
˘x
, 
∂cf
Ë!
NGX_OK
) {

705  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

709 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_moduÀ
;

711 
u
->
c⁄f
 = &
∂cf
->
up°ªam
;

713 #i‡(
NGX_HTTP_CACHE
)

714 
u
->
¸óã_key
 = 
ngx_hâp_¥oxy_¸óã_key
;

716 
u
->
¸óã_ªque°
 = 
ngx_hâp_¥oxy_¸óã_ªque°
;

717 
u
->
ªöô_ªque°
 = 
ngx_hâp_¥oxy_ªöô_ªque°
;

718 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

719 
u
->
ab‹t_ªque°
 = 
ngx_hâp_¥oxy_ab‹t_ªque°
;

720 
u
->
föÆize_ªque°
 = 
ngx_hâp_¥oxy_föÆize_ªque°
;

721 
r
->
°©e
 = 0;

723 i‡(
∂cf
->
ªdúe˘s
) {

724 
u
->
ªwrôe_ªdúe˘
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘
;

727 i‡(
∂cf
->
cookõ_domaös
 ||Ölcf->
cookõ_∑ths
) {

728 
u
->
ªwrôe_cookõ
 = 
ngx_hâp_¥oxy_ªwrôe_cookõ
;

731 
u
->
buf„rög
 = 
∂cf
->
up°ªam
.buffering;

733 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

734 i‡(
u
->
pùe
 =
NULL
) {

735  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

738 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

739 
u
->
pùe
->
öput_˘x
 = 
r
;

741 
u
->
öput_fûãr_öô
 = 
ngx_hâp_¥oxy_öput_fûãr_öô
;

742 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

743 
u
->
öput_fûãr_˘x
 = 
r
;

745 
u
->
ac˚l
 = 1;

747 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

749 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

750  
rc
;

753  
NGX_DONE
;

754 
	}
}

757 
ngx_öt_t


758 
	$ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_¥oxy_˘x_t
 *
˘x
,

759 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

761 
u_ch¨
 *
p
;

762 
size_t
 
add
;

763 
u_sh‹t
 
p‹t
;

764 
ngx_°r_t
 
¥oxy
;

765 
ngx_uæ_t
 
uæ
;

766 
ngx_hâp_up°ªam_t
 *
u
;

768 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
¥oxy
, 
∂cf
->
¥oxy_Àngths
->
ñts
, 0,

769 
∂cf
->
¥oxy_vÆues
->
ñts
)

770 =
NULL
)

772  
NGX_ERROR
;

775 i‡(
¥oxy
.
Àn
 > 7

776 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

778 
add
 = 7;

779 
p‹t
 = 80;

781 #i‡(
NGX_HTTP_SSL
)

783 } i‡(
¥oxy
.
Àn
 > 8

784 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "https://", 8) == 0)

786 
add
 = 8;

787 
p‹t
 = 443;

788 
r
->
up°ªam
->
s¶
 = 1;

793 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

794 "övÆid URLÖªfix i¿\"%V\"", &
¥oxy
);

795  
NGX_ERROR
;

798 
u
 = 
r
->
up°ªam
;

800 
u
->
schema
.
Àn
 = 
add
;

801 
u
->
schema
.
d©a
 = 
¥oxy
.data;

803 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

805 
uæ
.uæ.
Àn
 = 
¥oxy
.À¿- 
add
;

806 
uæ
.uæ.
d©a
 = 
¥oxy
.d©®+ 
add
;

807 
uæ
.
deÁu…_p‹t
 = 
p‹t
;

808 
uæ
.
uri_∑π
 = 1;

809 
uæ
.
no_ªsﬁve
 = 1;

811 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

812 i‡(
uæ
.
îr
) {

813 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

814 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

817  
NGX_ERROR
;

820 i‡(
uæ
.
uri
.
Àn
) {

821 i‡(
uæ
.
uri
.
d©a
[0] == '?') {

822 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uæ
.
uri
.
Àn
 + 1);

823 i‡(
p
 =
NULL
) {

824  
NGX_ERROR
;

827 *
p
++ = '/';

828 
	`ngx_mem˝y
(
p
, 
uæ
.
uri
.
d©a
, uæ.uri.
Àn
);

830 
uæ
.
uri
.
Àn
++;

831 
uæ
.
uri
.
d©a
 = 
p
 - 1;

835 
˘x
->
v¨s
.
key_°¨t
 = 
u
->
schema
;

837 
	`ngx_hâp_¥oxy_£t_v¨s
(&
uæ
, &
˘x
->
v¨s
);

839 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

840 i‡(
u
->
ªsﬁved
 =
NULL
) {

841  
NGX_ERROR
;

844 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

845 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

846 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

847 
u
->
ªsﬁved
->
«ddrs
 = 1;

848 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

851 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

852 
u
->
ªsﬁved
->
p‹t
 = (
ö_p‹t_t
Ë(
uæ
.
no_p‹t
 ?Öort : url.port);

853 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

856  
NGX_OK
;

857 
	}
}

860 #i‡(
NGX_HTTP_CACHE
)

862 
ngx_öt_t


863 
	$ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

865 
size_t
 
Àn
, 
loc_Àn
;

866 
u_ch¨
 *
p
;

867 
uöçå_t
 
esˇ≥
;

868 
ngx_°r_t
 *
key
;

869 
ngx_hâp_up°ªam_t
 *
u
;

870 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

871 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

873 
u
 = 
r
->
up°ªam
;

875 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

877 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

879 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

880 i‡(
key
 =
NULL
) {

881  
NGX_ERROR
;

884 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

886 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∂cf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

887  
NGX_ERROR
;

890  
NGX_OK
;

893 *
key
 = 
˘x
->
v¨s
.
key_°¨t
;

895 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

896 i‡(
key
 =
NULL
) {

897  
NGX_ERROR
;

900 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

902 *
key
 = 
˘x
->
v¨s
.
uri
;

903 
u
->
uri
 = 
˘x
->
v¨s
.uri;

905  
NGX_OK
;

907 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

909 *
key
 = 
r
->
u≈¨£d_uri
;

910 
u
->
uri
 = 
r
->
u≈¨£d_uri
;

912  
NGX_OK
;

915 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
Ë? 
∂cf
->
loˇti⁄
.len : 0;

917 i‡(
r
->
quŸed_uri
 ||Ñ->
öã∫Æ
) {

918 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

919 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

921 
esˇ≥
 = 0;

924 
Àn
 = 
˘x
->
v¨s
.
uri
.À¿+ 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


925 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

927 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

928 i‡(
p
 =
NULL
) {

929  
NGX_ERROR
;

932 
key
->
d©a
 = 
p
;

934 i‡(
r
->
vÆid_loˇti⁄
) {

935 
p
 = 
	`ngx_c›y
’, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

938 i‡(
esˇ≥
) {

939 
	`ngx_esˇ≥_uri
(
p
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

940 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

941 
p
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

944 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
 + 
loc_Àn
,Ñ->uri.
Àn
 -Üoc_len);

947 i‡(
r
->
¨gs
.
Àn
 > 0) {

948 *
p
++ = '?';

949 
p
 = 
	`ngx_c›y
’, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

952 
key
->
Àn
 = 
p
 - key->
d©a
;

953 
u
->
uri
 = *
key
;

955  
NGX_OK
;

956 
	}
}

961 
ngx_öt_t


962 
	$ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

964 
size_t
 
Àn
, 
uri_Àn
, 
loc_Àn
, 
body_Àn
;

965 
uöçå_t
 
esˇ≥
;

966 
ngx_buf_t
 *
b
;

967 
ngx_°r_t
 
mëhod
;

968 
ngx_uöt_t
 
i
, 
u≈¨£d_uri
;

969 
ngx_chaö_t
 *
˛
, *
body
;

970 
ngx_li°_∑π_t
 *
∑π
;

971 
ngx_èbÀ_ñt_t
 *
hódî
;

972 
ngx_hâp_up°ªam_t
 *
u
;

973 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

974 
ngx_hâp_s¸ùt_code_±
 
code
;

975 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

976 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

977 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

979 
u
 = 
r
->
up°ªam
;

981 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

983 i‡(
u
->
mëhod
.
Àn
) {

985 
mëhod
 = 
u
->method;

986 
mëhod
.
Àn
++;

988 } i‡(
∂cf
->
mëhod
.
Àn
) {

989 
mëhod
 = 
∂cf
->method;

992 
mëhod
 = 
r
->
mëhod_«me
;

993 
mëhod
.
Àn
++;

996 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

998 i‡(
mëhod
.
Àn
 == 5

999 && 
	`ngx_°∫ˇ£cmp
(
mëhod
.
d©a
, (
u_ch¨
 *) "HEAD ", 5) == 0)

1001 
˘x
->
hód
 = 1;

1004 
Àn
 = 
mëhod
.À¿+ (
ngx_hâp_¥oxy_vîsi⁄
Ë- 1 + (
CRLF
) - 1;

1006 
esˇ≥
 = 0;

1007 
loc_Àn
 = 0;

1008 
u≈¨£d_uri
 = 0;

1010 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1011 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
;

1013 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

1015 
u≈¨£d_uri
 = 1;

1016 
uri_Àn
 = 
r
->
u≈¨£d_uri
.
Àn
;

1019 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
) ?

1020 
∂cf
->
loˇti⁄
.
Àn
 : 0;

1022 i‡(
r
->
quŸed_uri
 ||Ñ->
•a˚_ö_uri
 ||Ñ->
öã∫Æ
) {

1023 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1024 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1027 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
 + 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


1028 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

1031 i‡(
uri_Àn
 == 0) {

1032 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1034  
NGX_ERROR
;

1037 
Àn
 +
uri_Àn
;

1039 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1041 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∂cf
->
Êushes
);

1043 i‡(
∂cf
->
body_£t_Àn
) {

1044 
À
.
ù
 = 
∂cf
->
body_£t_Àn
->
ñts
;

1045 
À
.
ªque°
 = 
r
;

1046 
À
.
Êushed
 = 1;

1047 
body_Àn
 = 0;

1049 *(
uöçå_t
 *Ë
À
.
ù
) {

1050 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1051 
body_Àn
 +
	`lcode
(&
À
);

1054 
˘x
->
öã∫Æ_body_Àngth
 = 
body_Àn
;

1055 
Àn
 +
body_Àn
;

1058 
˘x
->
öã∫Æ_body_Àngth
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1061 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

1062 
À
.
ªque°
 = 
r
;

1063 
À
.
Êushed
 = 1;

1065 *(
uöçå_t
 *Ë
À
.
ù
) {

1066 *(
uöçå_t
 *Ë
À
.
ù
) {

1067 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1068 
Àn
 +
	`lcode
(&
À
);

1070 
À
.
ù
 +(
uöçå_t
);

1074 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1075 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1076 
hódî
 = 
∑π
->
ñts
;

1078 
i
 = 0; ; i++) {

1080 i‡(
i
 >
∑π
->
√…s
) {

1081 i‡(
∑π
->
√xt
 =
NULL
) {

1085 
∑π
 =Ö¨t->
√xt
;

1086 
hódî
 = 
∑π
->
ñts
;

1087 
i
 = 0;

1090 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

1091 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1096 
Àn
 +
hódî
[
i
].
key
.len + (": ") - 1

1097 + 
hódî
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

1102 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

1103 i‡(
b
 =
NULL
) {

1104  
NGX_ERROR
;

1107 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1108 i‡(
˛
 =
NULL
) {

1109  
NGX_ERROR
;

1112 
˛
->
buf
 = 
b
;

1117 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
mëhod
.
d©a
, mëhod.
Àn
);

1119 
u
->
uri
.
d©a
 = 
b
->
œ°
;

1121 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1122 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1124 } i‡(
u≈¨£d_uri
) {

1125 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

1128 i‡(
r
->
vÆid_loˇti⁄
) {

1129 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1132 i‡(
esˇ≥
) {

1133 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1134 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1135 
b
->
œ°
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1138 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1139 
r
->
uri
.
Àn
 - 
loc_Àn
);

1142 i‡(
r
->
¨gs
.
Àn
 > 0) {

1143 *
b
->
œ°
++ = '?';

1144 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1148 
u
->
uri
.
Àn
 = 
b
->
œ°
 - u->uri.
d©a
;

1150 i‡(
∂cf
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_11
) {

1151 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄_11
,

1152 (
ngx_hâp_¥oxy_vîsi⁄_11
) - 1);

1155 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄
,

1156 (
ngx_hâp_¥oxy_vîsi⁄
) - 1);

1159 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1161 
e
.
ù
 = 
∂cf
->
hódîs_£t
->
ñts
;

1162 
e
.
pos
 = 
b
->
œ°
;

1163 
e
.
ªque°
 = 
r
;

1164 
e
.
Êushed
 = 1;

1166 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

1168 *(
uöçå_t
 *Ë
À
.
ù
) {

1169 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1172 (Ë
	`lcode
(&
À
);

1174 i‡(*(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
) {

1176 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1177 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1180 
e
.
skù
 = (
Àn
 =(
CRLF
) - 1) ? 1 : 0;

1183 
e
.
skù
 = 0;

1186 
À
.
ù
 +(
uöçå_t
);

1188 *(
uöçå_t
 *Ë
e
.
ù
) {

1189 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1190 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1192 
e
.
ù
 +(
uöçå_t
);

1195 
b
->
œ°
 = 
e
.
pos
;

1198 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1199 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1200 
hódî
 = 
∑π
->
ñts
;

1202 
i
 = 0; ; i++) {

1204 i‡(
i
 >
∑π
->
√…s
) {

1205 i‡(
∑π
->
√xt
 =
NULL
) {

1209 
∑π
 =Ö¨t->
√xt
;

1210 
hódî
 = 
∑π
->
ñts
;

1211 
i
 = 0;

1214 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

1215 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1220 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1222 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

1224 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
,

1225 
hódî
[
i
].
vÆue
.
Àn
);

1227 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1229 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1231 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

1237 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1239 i‡(
∂cf
->
body_£t
) {

1240 
e
.
ù
 = 
∂cf
->
body_£t
->
ñts
;

1241 
e
.
pos
 = 
b
->
œ°
;

1243 *(
uöçå_t
 *Ë
e
.
ù
) {

1244 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1245 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1248 
b
->
œ°
 = 
e
.
pos
;

1251 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1253 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1255 i‡(
∂cf
->
body_£t
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body
) {

1257 
body
 = 
u
->
ªque°_bufs
;

1258 
u
->
ªque°_bufs
 = 
˛
;

1260 
body
) {

1261 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1262 i‡(
b
 =
NULL
) {

1263  
NGX_ERROR
;

1266 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1268 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1269 i‡(
˛
->
√xt
 =
NULL
) {

1270  
NGX_ERROR
;

1273 
˛
 = cl->
√xt
;

1274 
˛
->
buf
 = 
b
;

1276 
body
 = body->
√xt
;

1280 
u
->
ªque°_bufs
 = 
˛
;

1283 
b
->
Êush
 = 1;

1284 
˛
->
√xt
 = 
NULL
;

1286  
NGX_OK
;

1287 
	}
}

1290 
ngx_öt_t


1291 
	$ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1293 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1295 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1297 i‡(
˘x
 =
NULL
) {

1298  
NGX_OK
;

1301 
˘x
->
°©us
.
code
 = 0;

1302 
˘x
->
°©us
.
cou¡
 = 0;

1303 
˘x
->
°©us
.
°¨t
 = 
NULL
;

1304 
˘x
->
°©us
.
íd
 = 
NULL
;

1305 
˘x
->
chunked
.
°©e
 = 0;

1307 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

1308 
r
->
up°ªam
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

1309 
r
->
up°ªam
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

1310 
r
->
°©e
 = 0;

1312  
NGX_OK
;

1313 
	}
}

1316 
ngx_öt_t


1317 
	$ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1319 
size_t
 
Àn
;

1320 
ngx_öt_t
 
rc
;

1321 
ngx_hâp_up°ªam_t
 *
u
;

1322 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1324 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1326 i‡(
˘x
 =
NULL
) {

1327  
NGX_ERROR
;

1330 
u
 = 
r
->
up°ªam
;

1332 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, &
˘x
->
°©us
);

1334 i‡(
rc
 =
NGX_AGAIN
) {

1335  
rc
;

1338 i‡(
rc
 =
NGX_ERROR
) {

1340 #i‡(
NGX_HTTP_CACHE
)

1342 i‡(
r
->
ˇche
) {

1343 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1344  
NGX_OK
;

1349 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1353 i‡(
u
->
ac˚l
) {

1354  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1358 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1359 
u
->
°©e
->
°©us
 = 
NGX_HTTP_OK
;

1360 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1362  
NGX_OK
;

1365 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1366 
u
->
°©e
->
°©us
 = 
˘x
->°©us.
code
;

1369 
u
->
hódîs_ö
.
°©us_n
 = 
˘x
->
°©us
.
code
;

1371 
Àn
 = 
˘x
->
°©us
.
íd
 - ctx->°©us.
°¨t
;

1372 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1374 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1375 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1376  
NGX_ERROR
;

1379 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
˘x
->
°©us
.
°¨t
, 
Àn
);

1381 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1383 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1385 i‡(
˘x
->
°©us
.
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

1386 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1389 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_hódî
;

1391  
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
r
);

1392 
	}
}

1395 
ngx_öt_t


1396 
	$ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1398 
ngx_öt_t
 
rc
;

1399 
ngx_èbÀ_ñt_t
 *
h
;

1400 
ngx_hâp_up°ªam_t
 *
u
;

1401 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1402 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1403 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1405 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1409 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1411 i‡(
rc
 =
NGX_OK
) {

1415 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1416 i‡(
h
 =
NULL
) {

1417  
NGX_ERROR
;

1420 
h
->
hash
 = 
r
->
hódî_hash
;

1422 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1423 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1425 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1426 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1 + h->key.len);

1427 i‡(
h
->
key
.
d©a
 =
NULL
) {

1428  
NGX_ERROR
;

1431 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1432 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1434 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1435 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1436 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1437 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1439 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1440 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1443 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1446 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1447 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1449 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1450  
NGX_ERROR
;

1453 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1455 &
h
->
key
, &h->
vÆue
);

1460 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1464 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1472 i‡(
r
->
up°ªam
->
hódîs_ö
.
£rvî
 =
NULL
) {

1473 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1474 i‡(
h
 =
NULL
) {

1475  
NGX_ERROR
;

1478 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash(ngx_hash(

1479 
	`ngx_hash
('s', 'e'), 'r'), 'v'), 'e'), 'r');

1481 
	`ngx_°r_£t
(&
h
->
key
, "Server");

1482 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1483 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "server";

1486 i‡(
r
->
up°ªam
->
hódîs_ö
.
d©e
 =
NULL
) {

1487 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1488 i‡(
h
 =
NULL
) {

1489  
NGX_ERROR
;

1492 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash('d', 'a'), 't'), 'e');

1494 
	`ngx_°r_£t
(&
h
->
key
, "Date");

1495 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1496 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "date";

1501 
u
 = 
r
->
up°ªam
;

1503 i‡(
u
->
hódîs_ö
.
chunked
) {

1504 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1512 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1514 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1515 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1516 || 
˘x
->
hód


1517 || (!
u
->
hódîs_ö
.
chunked


1518 && 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0))

1520 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1523 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1524 
u
->
kì∑live
 = 0;

1526 i‡(
r
->
hódîs_ö
.
upgøde
) {

1527 
u
->
upgøde
 = 1;

1531  
NGX_OK
;

1534 i‡(
rc
 =
NGX_AGAIN
) {

1535  
NGX_AGAIN
;

1540 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1543  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1545 
	}
}

1548 
ngx_öt_t


1549 
	$ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
)

1551 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1552 
ngx_hâp_up°ªam_t
 *
u
;

1553 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1555 
u
 = 
r
->
up°ªam
;

1556 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1558 i‡(
˘x
 =
NULL
) {

1559  
NGX_ERROR
;

1562 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1564 
u
->
hódîs_ö
.
°©us_n
, 
˘x
->
hód
, u->hódîs_ö.
chunked
,

1565 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1569 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1570 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1571 || 
˘x
->
hód
)

1576 
u
->
pùe
->
Àngth
 = 0;

1577 
u
->
Àngth
 = 0;

1578 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1580 } i‡(
u
->
hódîs_ö
.
chunked
) {

1583 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_chunked_fûãr
;

1584 
u
->
pùe
->
Àngth
 = 3;

1586 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
;

1587 
u
->
Àngth
 = 1;

1589 } i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

1592 
u
->
pùe
->
Àngth
 = 0;

1593 
u
->
Àngth
 = 0;

1594 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1599 
u
->
pùe
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1600 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1603  
NGX_OK
;

1604 
	}
}

1607 
ngx_öt_t


1608 
	$ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1610 
ngx_buf_t
 *
b
;

1611 
ngx_chaö_t
 *
˛
;

1612 
ngx_hâp_ªque°_t
 *
r
;

1614 i‡(
buf
->
pos
 =buf->
œ°
) {

1615  
NGX_OK
;

1618 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

1619 i‡(
˛
 =
NULL
) {

1620  
NGX_ERROR
;

1623 
b
 = 
˛
->
buf
;

1625 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

1626 
b
->
shadow
 = 
buf
;

1627 
b
->
èg
 = 
p
->tag;

1628 
b
->
œ°_shadow
 = 1;

1629 
b
->
ªcy˛ed
 = 1;

1630 
buf
->
shadow
 = 
b
;

1632 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

1634 i‡(
p
->
ö
) {

1635 *
p
->
œ°_ö
 = 
˛
;

1637 
p
->
ö
 = 
˛
;

1639 
p
->
œ°_ö
 = &
˛
->
√xt
;

1641 i‡(
p
->
Àngth
 == -1) {

1642  
NGX_OK
;

1645 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

1647 i‡(
p
->
Àngth
 == 0) {

1648 
r
 = 
p
->
öput_˘x
;

1649 
p
->
up°ªam_d⁄e
 = 1;

1650 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1652 } i‡(
p
->
Àngth
 < 0) {

1653 
r
 = 
p
->
öput_˘x
;

1654 
p
->
up°ªam_d⁄e
 = 1;

1656 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1661  
NGX_OK
;

1662 
	}
}

1665 
ngx_öt_t


1666 
	$ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1668 
ngx_öt_t
 
rc
;

1669 
ngx_buf_t
 *
b
, **
¥ev
;

1670 
ngx_chaö_t
 *
˛
;

1671 
ngx_hâp_ªque°_t
 *
r
;

1672 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1674 i‡(
buf
->
pos
 =buf->
œ°
) {

1675  
NGX_OK
;

1678 
r
 = 
p
->
öput_˘x
;

1679 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1681 i‡(
˘x
 =
NULL
) {

1682  
NGX_ERROR
;

1685 
b
 = 
NULL
;

1686 
¥ev
 = &
buf
->
shadow
;

1690 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

1692 i‡(
rc
 =
NGX_OK
) {

1696 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

1697 i‡(
˛
 =
NULL
) {

1698  
NGX_ERROR
;

1701 
b
 = 
˛
->
buf
;

1703 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1705 
b
->
pos
 = 
buf
->pos;

1706 
b
->
°¨t
 = 
buf
->start;

1707 
b
->
íd
 = 
buf
->end;

1708 
b
->
èg
 = 
p
->tag;

1709 
b
->
ãmp‹¨y
 = 1;

1710 
b
->
ªcy˛ed
 = 1;

1712 *
¥ev
 = 
b
;

1713 
¥ev
 = &
b
->
shadow
;

1715 i‡(
p
->
ö
) {

1716 *
p
->
œ°_ö
 = 
˛
;

1718 
p
->
ö
 = 
˛
;

1720 
p
->
œ°_ö
 = &
˛
->
√xt
;

1722  
b
->
num
 = 
buf
->num;

1724 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1725 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

1727 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

1729 
buf
->
pos
 +(
size_t
Ë
˘x
->
chunked
.
size
;

1730 
b
->
œ°
 = 
buf
->
pos
;

1731 
˘x
->
chunked
.
size
 = 0;

1736 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

1737 
buf
->
pos
 = buf->
œ°
;

1738 
b
->
œ°
 = 
buf
->last;

1743 i‡(
rc
 =
NGX_DONE
) {

1747 
p
->
up°ªam_d⁄e
 = 1;

1748 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1753 i‡(
rc
 =
NGX_AGAIN
) {

1757 
p
->
Àngth
 = 
˘x
->
chunked
.length;

1764 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1767  
NGX_ERROR
;

1770 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1772 
˘x
->
chunked
.
°©e
, 
p
->
Àngth
);

1774 i‡(
b
) {

1775 
b
->
shadow
 = 
buf
;

1776 
b
->
œ°_shadow
 = 1;

1778 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1779 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

1781  
NGX_OK
;

1786 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

1787  
NGX_ERROR
;

1790  
NGX_OK
;

1791 
	}
}

1794 
ngx_öt_t


1795 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

1797 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1799 
ngx_buf_t
 *
b
;

1800 
ngx_chaö_t
 *
˛
, **
Œ
;

1801 
ngx_hâp_up°ªam_t
 *
u
;

1803 
u
 = 
r
->
up°ªam
;

1805 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

1806 
Œ
 = &
˛
->
√xt
;

1809 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

1810 i‡(
˛
 =
NULL
) {

1811  
NGX_ERROR
;

1814 *
Œ
 = 
˛
;

1816 
˛
->
buf
->
Êush
 = 1;

1817 
˛
->
buf
->
mem‹y
 = 1;

1819 
b
 = &
u
->
buf„r
;

1821 
˛
->
buf
->
pos
 = 
b
->
œ°
;

1822 
b
->
œ°
 +
byãs
;

1823 
˛
->
buf
->
œ°
 = 
b
->last;

1824 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1826 i‡(
u
->
Àngth
 == -1) {

1827  
NGX_OK
;

1830 
u
->
Àngth
 -
byãs
;

1832 i‡(
u
->
Àngth
 == 0) {

1833 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1836  
NGX_OK
;

1837 
	}
}

1840 
ngx_öt_t


1841 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

1843 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1845 
ngx_öt_t
 
rc
;

1846 
ngx_buf_t
 *
b
, *
buf
;

1847 
ngx_chaö_t
 *
˛
, **
Œ
;

1848 
ngx_hâp_up°ªam_t
 *
u
;

1849 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1851 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1853 i‡(
˘x
 =
NULL
) {

1854  
NGX_ERROR
;

1857 
u
 = 
r
->
up°ªam
;

1858 
buf
 = &
u
->
buf„r
;

1860 
buf
->
pos
 = buf->
œ°
;

1861 
buf
->
œ°
 +
byãs
;

1863 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

1864 
Œ
 = &
˛
->
√xt
;

1869 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

1871 i‡(
rc
 =
NGX_OK
) {

1875 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

1876 i‡(
˛
 =
NULL
) {

1877  
NGX_ERROR
;

1880 *
Œ
 = 
˛
;

1881 
Œ
 = &
˛
->
√xt
;

1883 
b
 = 
˛
->
buf
;

1885 
b
->
Êush
 = 1;

1886 
b
->
mem‹y
 = 1;

1888 
b
->
pos
 = 
buf
->pos;

1889 
b
->
èg
 = 
u
->
ouçut
.tag;

1891 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

1892 
buf
->
pos
 +(
size_t
Ë
˘x
->
chunked
.
size
;

1893 
b
->
œ°
 = 
buf
->
pos
;

1894 
˘x
->
chunked
.
size
 = 0;

1897 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

1898 
buf
->
pos
 = buf->
œ°
;

1899 
b
->
œ°
 = 
buf
->last;

1902 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1904 
b
->
pos
, b->
œ°
 - b->pos);

1909 i‡(
rc
 =
NGX_DONE
) {

1913 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1914 
u
->
Àngth
 = 0;

1919 i‡(
rc
 =
NGX_AGAIN
) {

1925 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1928  
NGX_ERROR
;

1933 i‡(
r
->
subªque°_ö_mem‹y
) {

1935 
˛
 = 
u
->
out_bufs
;

1937 i‡(
˛
) {

1938 
buf
->
pos
 = 
˛
->buf->pos;

1941 
buf
->
œ°
 = buf->
pos
;

1943 
˛
 = 
u
->
out_bufs
; cl; c»˛->
√xt
) {

1944 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1946 
˛
->
buf
->
pos
, cl->buf->
œ°
, 
	`ngx_buf_size
(cl->buf));

1948 i‡(
buf
->
œ°
 =
˛
->buf->
pos
) {

1949 
buf
->
œ°
 = 
˛
->buf->last;

1953 
buf
->
œ°
 = 
	`ngx_movemem
(buf->œ°, 
˛
->buf->
pos
,

1954 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

1956 
˛
->
buf
->
pos
 = buf->
œ°
 - (cl->buf->last - cl->buf->pos);

1957 
˛
->
buf
->
œ°
 = buf->last;

1961  
NGX_OK
;

1962 
	}
}

1966 
	$ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1968 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1972 
	}
}

1976 
	$ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1978 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1982 
	}
}

1985 
ngx_öt_t


1986 
	$ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1987 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1989 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1991 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1993 i‡(
˘x
 =
NULL
) {

1994 
v
->
nŸ_found
 = 1;

1995  
NGX_OK
;

1998 
v
->
Àn
 = 
˘x
->
v¨s
.
ho°_hódî
.len;

1999 
v
->
vÆid
 = 1;

2000 
v
->
no_ˇchóbÀ
 = 0;

2001 
v
->
nŸ_found
 = 0;

2002 
v
->
d©a
 = 
˘x
->
v¨s
.
ho°_hódî
.data;

2004  
NGX_OK
;

2005 
	}
}

2008 
ngx_öt_t


2009 
	$ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2010 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2012 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2014 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2016 i‡(
˘x
 =
NULL
) {

2017 
v
->
nŸ_found
 = 1;

2018  
NGX_OK
;

2021 
v
->
Àn
 = 
˘x
->
v¨s
.
p‹t
.len;

2022 
v
->
vÆid
 = 1;

2023 
v
->
no_ˇchóbÀ
 = 0;

2024 
v
->
nŸ_found
 = 0;

2025 
v
->
d©a
 = 
˘x
->
v¨s
.
p‹t
.data;

2027  
NGX_OK
;

2028 
	}
}

2031 
ngx_öt_t


2032 
	$ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2033 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2035 
size_t
 
Àn
;

2036 
u_ch¨
 *
p
;

2037 
ngx_uöt_t
 
i
, 
n
;

2038 
ngx_èbÀ_ñt_t
 **
h
;

2040 
v
->
vÆid
 = 1;

2041 
v
->
no_ˇchóbÀ
 = 0;

2042 
v
->
nŸ_found
 = 0;

2044 
n
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
√…s
;

2045 
h
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
ñts
;

2047 
Àn
 = 0;

2049 
i
 = 0; i < 
n
; i++) {

2050 
Àn
 +
h
[
i
]->
vÆue
.len + (", ") - 1;

2053 i‡(
Àn
 == 0) {

2054 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2055 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

2056  
NGX_OK
;

2059 
Àn
 +
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2061 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2062 i‡(
p
 =
NULL
) {

2063  
NGX_ERROR
;

2066 
v
->
Àn
 =Üen;

2067 
v
->
d©a
 = 
p
;

2069 
i
 = 0; i < 
n
; i++) {

2070 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

2071 *
p
++ = ','; *p++ = ' ';

2074 
	`ngx_mem˝y
(
p
, 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,Ñ->c⁄√˘i⁄->addr_ãxt.
Àn
);

2076  
NGX_OK
;

2077 
	}
}

2080 
ngx_öt_t


2081 
	$ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2082 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2084 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2086 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2088 i‡(
˘x
 =
NULL
 || ctx->
öã∫Æ_body_Àngth
 < 0) {

2089 
v
->
nŸ_found
 = 1;

2090  
NGX_OK
;

2093 
v
->
vÆid
 = 1;

2094 
v
->
no_ˇchóbÀ
 = 0;

2095 
v
->
nŸ_found
 = 0;

2097 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

2099 i‡(
v
->
d©a
 =
NULL
) {

2100  
NGX_ERROR
;

2103 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%O", 
˘x
->
öã∫Æ_body_Àngth
) - v->data;

2105  
NGX_OK
;

2106 
	}
}

2109 
ngx_öt_t


2110 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2111 
size_t
 
¥efix
)

2113 
size_t
 
Àn
;

2114 
ngx_öt_t
 
rc
;

2115 
ngx_uöt_t
 
i
;

2116 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2117 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2119 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2121 
¥
 = 
∂cf
->
ªdúe˘s
->
ñts
;

2123 i‡(
¥
 =
NULL
) {

2124  
NGX_DECLINED
;

2127 
Àn
 = 
h
->
vÆue
.À¿- 
¥efix
;

2129 
i
 = 0; i < 
∂cf
->
ªdúe˘s
->
√…s
; i++) {

2130 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2132 i‡(
rc
 !
NGX_DECLINED
) {

2133  
rc
;

2137  
NGX_DECLINED
;

2138 
	}
}

2141 
ngx_öt_t


2142 
	$ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
)

2144 
size_t
 
¥efix
;

2145 
u_ch¨
 *
p
;

2146 
ngx_öt_t
 
rc
, 
rv
;

2147 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2149 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
h
->
vÆue
.
d©a
, ';');

2150 i‡(
p
 =
NULL
) {

2151  
NGX_DECLINED
;

2154 
¥efix
 = 
p
 + 1 - 
h
->
vÆue
.
d©a
;

2156 
rv
 = 
NGX_DECLINED
;

2158 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2160 i‡(
∂cf
->
cookõ_domaös
) {

2161 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "domain=", 7 - 1);

2163 i‡(
p
) {

2164 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 7,

2165 
∂cf
->
cookõ_domaös
);

2166 i‡(
rc
 =
NGX_ERROR
) {

2167  
NGX_ERROR
;

2170 i‡(
rc
 !
NGX_DECLINED
) {

2171 
rv
 = 
rc
;

2176 i‡(
∂cf
->
cookõ_∑ths
) {

2177 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "path=", 5 - 1);

2179 i‡(
p
) {

2180 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 5,

2181 
∂cf
->
cookõ_∑ths
);

2182 i‡(
rc
 =
NGX_ERROR
) {

2183  
NGX_ERROR
;

2186 i‡(
rc
 !
NGX_DECLINED
) {

2187 
rv
 = 
rc
;

2192  
rv
;

2193 
	}
}

2196 
ngx_öt_t


2197 
	$ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2198 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
)

2200 
size_t
 
Àn
, 
¥efix
;

2201 
u_ch¨
 *
p
;

2202 
ngx_öt_t
 
rc
;

2203 
ngx_uöt_t
 
i
;

2204 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2206 
¥efix
 = 
vÆue
 - 
h
->vÆue.
d©a
;

2208 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
, ';');

2210 
Àn
 = 
p
 ? (
size_t
Ë’ - 
vÆue
Ë: (
h
->vÆue.À¿- 
¥efix
);

2212 
¥
 = 
ªwrôes
->
ñts
;

2214 
i
 = 0; i < 
ªwrôes
->
√…s
; i++) {

2215 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2217 i‡(
rc
 !
NGX_DECLINED
) {

2218  
rc
;

2222  
NGX_DECLINED
;

2223 
	}
}

2226 
ngx_öt_t


2227 
	$ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2228 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2230 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2232 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2233  
NGX_ERROR
;

2236 i‡(
∑âîn
.
Àn
 >Üen

2237 || 
	`ngx_r°∫cmp
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
∑âîn
.data,

2238 
∑âîn
.
Àn
) != 0)

2240  
NGX_DECLINED
;

2243 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2244  
NGX_ERROR
;

2247  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
∑âîn
.
Àn
, &
ª∂a˚mít
);

2248 
	}
}

2251 #i‡(
NGX_PCRE
)

2253 
ngx_öt_t


2254 
	$ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2255 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2257 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2259 
∑âîn
.
Àn
 =Üen;

2260 
∑âîn
.
d©a
 = 
h
->
vÆue
.d©®+ 
¥efix
;

2262 i‡(
	`ngx_hâp_ªgex_exec
(
r
, 
¥
->
∑âîn
.
ªgex
, &∑âînË!
NGX_OK
) {

2263  
NGX_DECLINED
;

2266 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2267  
NGX_ERROR
;

2270 i‡(
¥efix
 =0 && 
h
->
vÆue
.
Àn
 ==Üen) {

2271 
h
->
vÆue
 = 
ª∂a˚mít
;

2272  
NGX_OK
;

2275  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2276 
	}
}

2281 
ngx_öt_t


2282 
	$ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2283 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2285 
u_ch¨
 *
p
;

2286 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2288 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2289  
NGX_ERROR
;

2292 
p
 = 
h
->
vÆue
.
d©a
 + 
¥efix
;

2294 i‡(
p
[0] == '.') {

2295 
p
++;

2296 
¥efix
++;

2297 
Àn
--;

2300 i‡(
∑âîn
.
Àn
 !À¿|| 
	`ngx_r°∫ˇ£cmp
’©ã∫.
d©a
, 
p
,Üen) != 0) {

2301  
NGX_DECLINED
;

2304 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2305  
NGX_ERROR
;

2308  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2309 
	}
}

2312 
ngx_öt_t


2313 
	$ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
,

2314 
size_t
 
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
)

2316 
u_ch¨
 *
p
, *
d©a
;

2317 
size_t
 
√w_Àn
;

2319 
√w_Àn
 = 
ª∂a˚mít
->
Àn
 + 
h
->
vÆue
.len -Üen;

2321 i‡(
ª∂a˚mít
->
Àn
 >Üen) {

2323 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
√w_Àn
);

2324 i‡(
d©a
 =
NULL
) {

2325  
NGX_ERROR
;

2328 
p
 = 
	`ngx_c›y
(
d©a
, 
h
->
vÆue
.d©a, 
¥efix
);

2329 
p
 = 
	`ngx_c›y
’, 
ª∂a˚mít
->
d©a
,Ñïœ˚mít->
Àn
);

2331 
	`ngx_mem˝y
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2332 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
);

2334 
h
->
vÆue
.
d©a
 = data;

2337 
p
 = 
	`ngx_c›y
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
ª∂a˚mít
->data,

2338 
ª∂a˚mít
->
Àn
);

2340 
	`ngx_memmove
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2341 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
);

2344 
h
->
vÆue
.
Àn
 = 
√w_Àn
;

2346  
NGX_OK
;

2347 
	}
}

2350 
ngx_öt_t


2351 
	$ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2353 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2355 
v
 = 
ngx_hâp_¥oxy_v¨s
; v->
«me
.
Àn
; v++) {

2356 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2357 i‡(
v¨
 =
NULL
) {

2358  
NGX_ERROR
;

2361 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2362 
v¨
->
d©a
 = 
v
->data;

2365  
NGX_OK
;

2366 
	}
}

2370 
	$ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2372 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
;

2374 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_loc_c⁄f_t
));

2375 i‡(
c⁄f
 =
NULL
) {

2376  
NULL
;

2408 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2409 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2410 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2411 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2413 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2415 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2416 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2417 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2419 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2420 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2422 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2423 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2424 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2426 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2427 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2429 #i‡(
NGX_HTTP_CACHE
)

2430 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

2431 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2432 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2433 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2434 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2435 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2436 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2437 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

2440 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2441 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2443 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2444 #i‡(
NGX_HTTP_SSL
)

2445 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

2449 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2451 
c⁄f
->
ªdúe˘
 = 
NGX_CONF_UNSET
;

2452 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2454 
c⁄f
->
cookõ_domaös
 = 
NGX_CONF_UNSET_PTR
;

2455 
c⁄f
->
cookõ_∑ths
 = 
NGX_CONF_UNSET_PTR
;

2457 
c⁄f
->
hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

2459 
c⁄f
->
hódîs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

2460 
c⁄f
->
hódîs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

2462 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "proxy");

2464  
c⁄f
;

2465 
	}
}

2469 
	$ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2471 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2472 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2474 
u_ch¨
 *
p
;

2475 
size_t
 
size
;

2476 
ngx_hash_öô_t
 
hash
;

2477 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2478 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2479 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2481 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

2482 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2483 
¥ev
->
up°ªam
.
°‹e
, 0);

2485 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

2486 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2487 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2491 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2492 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2494 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2495 
¥ev
->
up°ªam
.
buf„rög
, 1);

2497 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2498 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2500 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2501 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2503 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2504 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2506 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2507 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2509 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2510 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2512 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2513 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2515 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2516 
¥ev
->
up°ªam
.
buf„r_size
,

2517 (
size_t
Ë
ngx_∑gesize
);

2519 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2520 8, 
ngx_∑gesize
);

2522 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2523 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2525  
NGX_CONF_ERROR
;

2529 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2530 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2531 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2535 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2536 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2537 
NGX_CONF_UNSET_SIZE
);

2539 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2540 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2542 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2543 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2546 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2547 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2552  
NGX_CONF_ERROR
;

2555 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2556 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2558 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2562  
NGX_CONF_ERROR
;

2566 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2567 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2568 
NGX_CONF_UNSET_SIZE
);

2570 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2571 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2573 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2574 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2577 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2578 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2583  
NGX_CONF_ERROR
;

2586 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2587 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2588 
NGX_CONF_UNSET_SIZE
);

2590 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2591 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2593 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2594 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2597 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2598 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2600 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2606  
NGX_CONF_ERROR
;

2610 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2611 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2612 
NGX_CONF_BITMASK_SET
);

2615 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2616 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2617 (
NGX_CONF_BITMASK_SET


2618 |
NGX_HTTP_UPSTREAM_FT_ERROR


2619 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2621 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2622 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2623 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2626 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2627 
¥ev
->
up°ªam
.
ãmp_∑th
,

2628 &
ngx_hâp_¥oxy_ãmp_∑th
)

2629 !
NGX_OK
)

2631  
NGX_CONF_ERROR
;

2635 #i‡(
NGX_HTTP_CACHE
)

2637 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2638 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

2640 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

2641 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2643 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

2645 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2647 &
shm_z⁄e
->
shm
.
«me
);

2649  
NGX_CONF_ERROR
;

2652 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2653 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2655 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2656 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2657 (
NGX_CONF_BITMASK_SET


2658 |
NGX_HTTP_UPSTREAM_FT_OFF
));

2660 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2661 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


2662 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2665 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2666 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

2669 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

2670 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

2673 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

2675 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

2676 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

2678 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

2679 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

2681 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

2682 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

2684 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

2685 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

2688 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

2689 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

2691 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

2692 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

2694 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

2695 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

2699 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
mëhod
, 
¥ev
->method, "");

2701 i‡(
c⁄f
->
mëhod
.
Àn


2702 && 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
 - 1] != ' ')

2704 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
] = ' ';

2705 
c⁄f
->
mëhod
.
Àn
++;

2708 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

2709 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

2710 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

2711 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

2713 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

2714 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

2716 #i‡(
NGX_HTTP_SSL
)

2717 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

2718 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

2720 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

2721 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3


2722 |
NGX_SSL_TLSv1
|
NGX_SSL_TLSv1_1


2723 |
NGX_SSL_TLSv1_2
));

2725 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers,

2728 i‡(
c⁄f
->
s¶
 && 
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

2729  
NGX_CONF_ERROR
;

2733 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªdúe˘
, 
¥ev
->redirect, 1);

2735 i‡(
c⁄f
->
ªdúe˘
) {

2737 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

2738 
c⁄f
->
ªdúe˘s
 = 
¥ev
->redirects;

2741 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
 && c⁄f->
uæ
.
d©a
) {

2743 
c⁄f
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

2744 (
ngx_hâp_¥oxy_ªwrôe_t
));

2745 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

2746  
NGX_CONF_ERROR
;

2749 
¥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ªdúe˘s
);

2750 i‡(
¥
 =
NULL
) {

2751  
NGX_CONF_ERROR
;

2754 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
,

2755 (
ngx_hâp_com∂ex_vÆue_t
));

2757 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

2759 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

2761 i‡(
c⁄f
->
v¨s
.
uri
.
Àn
) {

2762 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
c⁄f
->
uæ
;

2763 
¥
->
ª∂a˚mít
.
vÆue
 = 
c⁄f
->
loˇti⁄
;

2766 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
c⁄f
->
uæ
.len

2769 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

2770 i‡(
p
 =
NULL
) {

2771  
NGX_CONF_ERROR
;

2774 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

2776 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
uæ
.
d©a
, c⁄f->uæ.
Àn
);

2777 *
p
 = '/';

2779 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

2784 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_domaös
, 
¥ev
->cookõ_domaös, 
NULL
);

2786 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_∑ths
, 
¥ev
->cookõ_∑ths, 
NULL
);

2788 #i‡(
NGX_HTTP_SSL
)

2789 i‡(
c⁄f
->
up°ªam
.
s¶
 =
NULL
) {

2790 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

2794 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hâp_vîsi⁄
, 
¥ev
->http_version,

2795 
NGX_HTTP_VERSION_10
);

2797 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_max_size
,

2798 
¥ev
->
hódîs_hash_max_size
, 512);

2800 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_buckë_size
,

2801 
¥ev
->
hódîs_hash_buckë_size
, 64);

2803 
c⁄f
->
hódîs_hash_buckë_size
 = 
	`ngx_Æign
(conf->headers_hash_bucket_size,

2804 
ngx_ˇchñöe_size
);

2806 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

2807 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

2808 
hash
.
«me
 = "proxy_headers_hash";

2810 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

2811 &
¥ev
->
up°ªam
, 
ngx_hâp_¥oxy_hide_hódîs
, &
hash
)

2812 !
NGX_OK
)

2814  
NGX_CONF_ERROR
;

2817 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

2818 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

2819 
c⁄f
->
v¨s
 = 
¥ev
->vars;

2822 i‡(
c⁄f
->
¥oxy_Àngths
 =
NULL
) {

2823 
c⁄f
->
¥oxy_Àngths
 = 
¥ev
->proxy_lengths;

2824 
c⁄f
->
¥oxy_vÆues
 = 
¥ev
->proxy_values;

2827 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
¥oxy_Àngths
) {

2828 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2829 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

2830 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

2831 
c⁄f
->
loˇti⁄
 = 
¥ev
->location;

2835 i‡(
c⁄f
->
body_sour˚
.
d©a
 =
NULL
) {

2836 
c⁄f
->
body_sour˚
 = 
¥ev
->body_source;

2837 
c⁄f
->
body_£t_Àn
 = 
¥ev
->body_set_len;

2838 
c⁄f
->
body_£t
 = 
¥ev
->body_set;

2841 i‡(
c⁄f
->
body_sour˚
.
d©a
 && c⁄f->
body_£t_Àn
 =
NULL
) {

2843 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2845 
sc
.
cf
 = cf;

2846 
sc
.
sour˚
 = &
c⁄f
->
body_sour˚
;

2847 
sc
.
Êushes
 = &
c⁄f
->flushes;

2848 
sc
.
Àngths
 = &
c⁄f
->
body_£t_Àn
;

2849 
sc
.
vÆues
 = &
c⁄f
->
body_£t
;

2850 
sc
.
com∂ëe_Àngths
 = 1;

2851 
sc
.
com∂ëe_vÆues
 = 1;

2853 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2854  
NGX_CONF_ERROR
;

2858 i‡(
	`ngx_hâp_¥oxy_mîge_hódîs
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

2859  
NGX_CONF_ERROR
;

2862  
NGX_CONF_OK
;

2863 
	}
}

2866 
ngx_öt_t


2867 
	$ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,

2868 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
)

2870 
u_ch¨
 *
p
;

2871 
size_t
 
size
;

2872 
uöçå_t
 *
code
;

2873 
ngx_uöt_t
 
i
;

2874 
ngx_¨øy_t
 
hódîs_«mes
, 
hódîs_mîged
;

2875 
ngx_keyvÆ_t
 *
§c
, *
s
, *
h
;

2876 
ngx_hash_key_t
 *
hk
;

2877 
ngx_hash_öô_t
 
hash
;

2878 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2879 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

2881 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2882 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

2883 
c⁄f
->
hódîs_£t_Àn
 = 
¥ev
->headers_set_len;

2884 
c⁄f
->
hódîs_£t
 = 
¥ev
->headers_set;

2885 
c⁄f
->
hódîs_£t_hash
 = 
¥ev
->headers_set_hash;

2886 
c⁄f
->
hódîs_sour˚
 = 
¥ev
->headers_source;

2889 i‡(
c⁄f
->
hódîs_£t_hash
.
buckës


2890 #i‡(
NGX_HTTP_CACHE
)

2891 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
Ë=(
¥ev
->upstream.cache == NULL))

2895  
NGX_OK
;

2899 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

2900 !
NGX_OK
)

2902  
NGX_ERROR
;

2905 i‡(
	`ngx_¨øy_öô
(&
hódîs_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

2906 !
NGX_OK
)

2908  
NGX_ERROR
;

2911 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2912 
c⁄f
->
hódîs_sour˚
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

2913 (
ngx_keyvÆ_t
));

2914 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2915  
NGX_ERROR
;

2919 
c⁄f
->
hódîs_£t_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

2920 i‡(
c⁄f
->
hódîs_£t_Àn
 =
NULL
) {

2921  
NGX_ERROR
;

2924 
c⁄f
->
hódîs_£t
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

2925 i‡(
c⁄f
->
hódîs_£t
 =
NULL
) {

2926  
NGX_ERROR
;

2930 #i‡(
NGX_HTTP_CACHE
)

2932 
h
 = 
c⁄f
->
up°ªam
.
ˇche
 ? 
ngx_hâp_¥oxy_ˇche_hódîs
:

2933 
ngx_hâp_¥oxy_hódîs
;

2936 
h
 = 
ngx_hâp_¥oxy_hódîs
;

2940 
§c
 = 
c⁄f
->
hódîs_sour˚
->
ñts
;

2941 
i
 = 0; i < 
c⁄f
->
hódîs_sour˚
->
√…s
; i++) {

2943 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

2944 i‡(
s
 =
NULL
) {

2945  
NGX_ERROR
;

2948 *
s
 = 
§c
[
i
];

2951 
h
->
key
.
Àn
) {

2953 
§c
 = 
hódîs_mîged
.
ñts
;

2954 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

2955 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

2956 
√xt
;

2960 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

2961 i‡(
s
 =
NULL
) {

2962  
NGX_ERROR
;

2965 *
s
 = *
h
;

2967 
√xt
:

2969 
h
++;

2973 
§c
 = 
hódîs_mîged
.
ñts
;

2974 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

2976 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

2977 i‡(
hk
 =
NULL
) {

2978  
NGX_ERROR
;

2981 
hk
->
key
 = 
§c
[
i
].key;

2982 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2983 
hk
->
vÆue
 = (*) 1;

2985 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

2989 i‡(
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
§c
[
i
].
vÆue
) == 0) {

2990 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

2991 (
ngx_hâp_s¸ùt_c›y_code_t
));

2992 i‡(
c›y
 =
NULL
) {

2993  
NGX_ERROR
;

2996 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

2997 
ngx_hâp_s¸ùt_c›y_Àn_code
;

2998 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

2999 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

3002 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3003 + 
§c
[
i
].
key
.
Àn
 + (": ") - 1

3004 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1

3005 + (
uöçå_t
) - 1)

3006 & ~((
uöçå_t
) - 1);

3008 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3009 i‡(
c›y
 =
NULL
) {

3010  
NGX_ERROR
;

3013 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3014 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

3015 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

3017 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3019 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3020 *
p
++ = ':'; *p++ = ' ';

3021 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
vÆue
.
d©a
, src[i].vÆue.
Àn
);

3022 *
p
++ = 
CR
; *∞
LF
;

3025 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

3026 (
ngx_hâp_s¸ùt_c›y_code_t
));

3027 i‡(
c›y
 =
NULL
) {

3028  
NGX_ERROR
;

3031 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3032 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3033 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3036 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3037 + 
§c
[
i
].
key
.
Àn
 + (": "Ë- 1 + (
uöçå_t
) - 1)

3038 & ~((
uöçå_t
) - 1);

3040 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3041 i‡(
c›y
 =
NULL
) {

3042  
NGX_ERROR
;

3045 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3046 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3048 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3049 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3050 *
p
++ = ':'; *p = ' ';

3053 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3055 
sc
.
cf
 = cf;

3056 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

3057 
sc
.
Êushes
 = &
c⁄f
->flushes;

3058 
sc
.
Àngths
 = &
c⁄f
->
hódîs_£t_Àn
;

3059 
sc
.
vÆues
 = &
c⁄f
->
hódîs_£t
;

3061 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3062  
NGX_ERROR
;

3066 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

3067 (
ngx_hâp_s¸ùt_c›y_code_t
));

3068 i‡(
c›y
 =
NULL
) {

3069  
NGX_ERROR
;

3072 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3073 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3074 
c›y
->
Àn
 = (
CRLF
) - 1;

3077 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3078 + (
CRLF
Ë- 1 + (
uöçå_t
) - 1)

3079 & ~((
uöçå_t
) - 1);

3081 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3082 i‡(
c›y
 =
NULL
) {

3083  
NGX_ERROR
;

3086 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3087 
c›y
->
Àn
 = (
CRLF
) - 1;

3089 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3090 *
p
++ = 
CR
; *∞
LF
;

3093 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

3094 i‡(
code
 =
NULL
) {

3095  
NGX_ERROR
;

3098 *
code
 = (
uöçå_t
Ë
NULL
;

3100 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, (
uöçå_t
));

3101 i‡(
code
 =
NULL
) {

3102  
NGX_ERROR
;

3105 *
code
 = (
uöçå_t
Ë
NULL
;

3108 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

3109 i‡(
code
 =
NULL
) {

3110  
NGX_ERROR
;

3113 *
code
 = (
uöçå_t
Ë
NULL
;

3116 
hash
.hash = &
c⁄f
->
hódîs_£t_hash
;

3117 
hash
.
key
 = 
ngx_hash_key_lc
;

3118 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3119 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3120 
hash
.
«me
 = "proxy_headers_hash";

3121 
hash
.
poﬁ
 = 
cf
->pool;

3122 
hash
.
ãmp_poﬁ
 = 
NULL
;

3124  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

3125 
	}
}

3129 
	$ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3131 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3133 
size_t
 
add
;

3134 
u_sh‹t
 
p‹t
;

3135 
ngx_°r_t
 *
vÆue
, *
uæ
;

3136 
ngx_uæ_t
 
u
;

3137 
ngx_uöt_t
 
n
;

3138 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3139 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3141 i‡(
∂cf
->
up°ªam
.up°ªam ||Ölcf->
¥oxy_Àngths
) {

3145 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3147 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3149 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

3150 
˛cf
->
auto_ªdúe˘
 = 1;

3153 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3155 
uæ
 = &
vÆue
[1];

3157 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3159 i‡(
n
) {

3161 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3163 
sc
.
cf
 = cf;

3164 
sc
.
sour˚
 = 
uæ
;

3165 
sc
.
Àngths
 = &
∂cf
->
¥oxy_Àngths
;

3166 
sc
.
vÆues
 = &
∂cf
->
¥oxy_vÆues
;

3167 
sc
.
v¨übÀs
 = 
n
;

3168 
sc
.
com∂ëe_Àngths
 = 1;

3169 
sc
.
com∂ëe_vÆues
 = 1;

3171 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3172  
NGX_CONF_ERROR
;

3175 #i‡(
NGX_HTTP_SSL
)

3176 
∂cf
->
s¶
 = 1;

3179  
NGX_CONF_OK
;

3182 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "http://", 7) == 0) {

3183 
add
 = 7;

3184 
p‹t
 = 80;

3186 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "https://", 8) == 0) {

3188 #i‡(
NGX_HTTP_SSL
)

3189 
∂cf
->
s¶
 = 1;

3191 
add
 = 8;

3192 
p‹t
 = 443;

3194 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3196  
NGX_CONF_ERROR
;

3200 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalid URLÖrefix");

3201  
NGX_CONF_ERROR
;

3204 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3206 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

3207 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

3208 
u
.
deÁu…_p‹t
 = 
p‹t
;

3209 
u
.
uri_∑π
 = 1;

3210 
u
.
no_ªsﬁve
 = 1;

3212 
∂cf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3213 i‡(
∂cf
->
up°ªam
.up°ªam =
NULL
) {

3214  
NGX_CONF_ERROR
;

3217 
∂cf
->
v¨s
.
schema
.
Àn
 = 
add
;

3218 
∂cf
->
v¨s
.
schema
.
d©a
 = 
uæ
->data;

3219 
∂cf
->
v¨s
.
key_°¨t
 =Ölcf->v¨s.
schema
;

3221 
	`ngx_hâp_¥oxy_£t_v¨s
(&
u
, &
∂cf
->
v¨s
);

3223 
∂cf
->
loˇti⁄
 = 
˛cf
->
«me
;

3225 i‡(
˛cf
->
«med


3226 #i‡(
NGX_PCRE
)

3227 || 
˛cf
->
ªgex


3229 || 
˛cf
->
n⁄ame
)

3231 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3232 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3238  
NGX_CONF_ERROR
;

3241 
∂cf
->
loˇti⁄
.
Àn
 = 0;

3244 
∂cf
->
uæ
 = *url;

3246  
NGX_CONF_OK
;

3247 
	}
}

3251 
	$ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3253 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3255 
u_ch¨
 *
p
;

3256 
ngx_°r_t
 *
vÆue
;

3257 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3258 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3260 i‡(
∂cf
->
ªdúe˘
 == 0) {

3261  
NGX_CONF_OK
;

3264 
∂cf
->
ªdúe˘
 = 1;

3266 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3268 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3269 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3270 
∂cf
->
ªdúe˘
 = 0;

3271 
∂cf
->
ªdúe˘s
 = 
NULL
;

3272  
NGX_CONF_OK
;

3275 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "false") == 0) {

3276 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

3278 
∂cf
->
ªdúe˘
 = 0;

3279 
∂cf
->
ªdúe˘s
 = 
NULL
;

3280  
NGX_CONF_OK
;

3283 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") != 0) {

3284 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3285 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3286  
NGX_CONF_ERROR
;

3290 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3291 
∂cf
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3292 (
ngx_hâp_¥oxy_ªwrôe_t
));

3293 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3294  
NGX_CONF_ERROR
;

3298 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
ªdúe˘s
);

3299 i‡(
¥
 =
NULL
) {

3300  
NGX_CONF_ERROR
;

3303 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") == 0) {

3304 i‡(
∂cf
->
¥oxy_Àngths
) {

3305 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3308  
NGX_CONF_ERROR
;

3311 i‡(
∂cf
->
uæ
.
d©a
 =
NULL
) {

3312 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3315  
NGX_CONF_ERROR
;

3318 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3320 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
, (
ngx_hâp_com∂ex_vÆue_t
));

3322 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

3324 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3325 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
∂cf
->
uæ
;

3326 
¥
->
ª∂a˚mít
.
vÆue
 = 
∂cf
->
loˇti⁄
;

3329 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
∂cf
->
uæ
.len + ("/") - 1;

3331 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

3332 i‡(
p
 =
NULL
) {

3333  
NGX_CONF_ERROR
;

3336 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

3338 
p
 = 
	`ngx_˝ymem
’, 
∂cf
->
uæ
.
d©a
,Ölcf->uæ.
Àn
);

3339 *
p
 = '/';

3341 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

3344  
NGX_CONF_OK
;

3348 i‡(
vÆue
[1].
d©a
[0] == '~') {

3349 
vÆue
[1].
Àn
--;

3350 
vÆue
[1].
d©a
++;

3352 i‡(
vÆue
[1].
d©a
[0] == '*') {

3353 
vÆue
[1].
Àn
--;

3354 
vÆue
[1].
d©a
++;

3356 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3357  
NGX_CONF_ERROR
;

3361 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3362  
NGX_CONF_ERROR
;

3368 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3370 
ccv
.
cf
 = cf;

3371 
ccv
.
vÆue
 = &value[1];

3372 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3374 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3375  
NGX_CONF_ERROR
;

3378 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3382 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3384 
ccv
.
cf
 = cf;

3385 
ccv
.
vÆue
 = &value[2];

3386 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3388 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3389  
NGX_CONF_ERROR
;

3392  
NGX_CONF_OK
;

3393 
	}
}

3397 
	$ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3399 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3401 
ngx_°r_t
 *
vÆue
;

3402 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3403 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3405 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3406  
NGX_CONF_OK
;

3409 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3411 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3413 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3414 
∂cf
->
cookõ_domaös
 = 
NULL
;

3415  
NGX_CONF_OK
;

3418 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3419 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3420  
NGX_CONF_ERROR
;

3423 i‡(
∂cf
->
cookõ_domaös
 =
NGX_CONF_UNSET_PTR
) {

3424 
∂cf
->
cookõ_domaös
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3425 (
ngx_hâp_¥oxy_ªwrôe_t
));

3426 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3427  
NGX_CONF_ERROR
;

3431 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_domaös
);

3432 i‡(
¥
 =
NULL
) {

3433  
NGX_CONF_ERROR
;

3436 i‡(
vÆue
[1].
d©a
[0] == '~') {

3437 
vÆue
[1].
Àn
--;

3438 
vÆue
[1].
d©a
++;

3440 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3441  
NGX_CONF_ERROR
;

3446 i‡(
vÆue
[1].
d©a
[0] == '.') {

3447 
vÆue
[1].
Àn
--;

3448 
vÆue
[1].
d©a
++;

3451 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3453 
ccv
.
cf
 = cf;

3454 
ccv
.
vÆue
 = &value[1];

3455 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3457 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3458  
NGX_CONF_ERROR
;

3461 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
;

3463 i‡(
vÆue
[2].
d©a
[0] == '.') {

3464 
vÆue
[2].
Àn
--;

3465 
vÆue
[2].
d©a
++;

3469 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3471 
ccv
.
cf
 = cf;

3472 
ccv
.
vÆue
 = &value[2];

3473 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3475 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3476  
NGX_CONF_ERROR
;

3479  
NGX_CONF_OK
;

3480 
	}
}

3484 
	$ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3486 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3488 
ngx_°r_t
 *
vÆue
;

3489 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3490 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3492 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3493  
NGX_CONF_OK
;

3496 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3498 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3500 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3501 
∂cf
->
cookõ_∑ths
 = 
NULL
;

3502  
NGX_CONF_OK
;

3505 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3506 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3507  
NGX_CONF_ERROR
;

3510 i‡(
∂cf
->
cookõ_∑ths
 =
NGX_CONF_UNSET_PTR
) {

3511 
∂cf
->
cookõ_∑ths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3512 (
ngx_hâp_¥oxy_ªwrôe_t
));

3513 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3514  
NGX_CONF_ERROR
;

3518 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_∑ths
);

3519 i‡(
¥
 =
NULL
) {

3520  
NGX_CONF_ERROR
;

3523 i‡(
vÆue
[1].
d©a
[0] == '~') {

3524 
vÆue
[1].
Àn
--;

3525 
vÆue
[1].
d©a
++;

3527 i‡(
vÆue
[1].
d©a
[0] == '*') {

3528 
vÆue
[1].
Àn
--;

3529 
vÆue
[1].
d©a
++;

3531 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3532  
NGX_CONF_ERROR
;

3536 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3537  
NGX_CONF_ERROR
;

3543 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3545 
ccv
.
cf
 = cf;

3546 
ccv
.
vÆue
 = &value[1];

3547 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3549 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3550  
NGX_CONF_ERROR
;

3553 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3556 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3558 
ccv
.
cf
 = cf;

3559 
ccv
.
vÆue
 = &value[2];

3560 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3562 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3563  
NGX_CONF_ERROR
;

3566  
NGX_CONF_OK
;

3567 
	}
}

3570 
ngx_öt_t


3571 
	$ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
,

3572 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3574 #i‡(
NGX_PCRE
)

3575 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3576 
ngx_ªgex_compûe_t
 
rc
;

3578 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3580 
rc
.
∑âîn
 = *
ªgex
;

3581 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3582 
rc
.
îr
.
d©a
 = 
îr°r
;

3584 i‡(
ˇ£Àss
) {

3585 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3588 
¥
->
∑âîn
.
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3589 i‡(
¥
->
∑âîn
.
ªgex
 =
NULL
) {

3590  
NGX_ERROR
;

3593 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
;

3595  
NGX_OK
;

3599 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3600 "usögÑegex \"%V\"Ñequúe†PCREÜibøry", 
ªgex
);

3601  
NGX_ERROR
;

3604 
	}
}

3608 
	$ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3610 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3612 
ngx_°r_t
 *
vÆue
;

3613 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3615 i‡(
∂cf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


3616 || 
∂cf
->
up°ªam
.
°‹e_Àngths
)

3621 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3623 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3624 
∂cf
->
up°ªam
.
°‹e
 = 0;

3625  
NGX_CONF_OK
;

3628 #i‡(
NGX_HTTP_CACHE
)

3630 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


3631 && 
∂cf
->
up°ªam
.
ˇche
 !
NULL
)

3638 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

3639 
∂cf
->
up°ªam
.
°‹e
 = 1;

3640  
NGX_CONF_OK
;

3644 
vÆue
[1].
Àn
++;

3646 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3648 
sc
.
cf
 = cf;

3649 
sc
.
sour˚
 = &
vÆue
[1];

3650 
sc
.
Àngths
 = &
∂cf
->
up°ªam
.
°‹e_Àngths
;

3651 
sc
.
vÆues
 = &
∂cf
->
up°ªam
.
°‹e_vÆues
;

3652 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

3653 
sc
.
com∂ëe_Àngths
 = 1;

3654 
sc
.
com∂ëe_vÆues
 = 1;

3656 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3657  
NGX_CONF_ERROR
;

3660  
NGX_CONF_OK
;

3661 
	}
}

3664 #i‡(
NGX_HTTP_CACHE
)

3667 
	$ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3669 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3671 
ngx_°r_t
 *
vÆue
;

3673 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3675 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

3679 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3680 
∂cf
->
up°ªam
.
ˇche
 = 
NULL
;

3681  
NGX_CONF_OK
;

3684 i‡(
∂cf
->
up°ªam
.
°‹e
 > 0 ||Ölcf->up°ªam.
°‹e_Àngths
) {

3688 
∂cf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

3689 &
ngx_hâp_¥oxy_moduÀ
);

3690 i‡(
∂cf
->
up°ªam
.
ˇche
 =
NULL
) {

3691  
NGX_CONF_ERROR
;

3694  
NGX_CONF_OK
;

3695 
	}
}

3699 
	$ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3701 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3703 
ngx_°r_t
 *
vÆue
;

3704 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3706 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3708 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

3712 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3714 
ccv
.
cf
 = cf;

3715 
ccv
.
vÆue
 = &value[1];

3716 
ccv
.
com∂ex_vÆue
 = &
∂cf
->
ˇche_key
;

3718 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3719  
NGX_CONF_ERROR
;

3722  
NGX_CONF_OK
;

3723 
	}
}

3729 
	$ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3731 #i‡(
NGX_FREEBSD
)

3732 
ssize_t
 *
≈
 = 
d©a
;

3734 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3735 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3738 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3740  
NGX_CONF_ERROR
;

3743 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3744 
ssize_t
 *
≈
 = 
d©a
;

3746 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3749 *
≈
 = 0;

3753  
NGX_CONF_OK
;

3754 
	}
}

3757 #i‡(
NGX_HTTP_SSL
)

3759 
ngx_öt_t


3760 
	$ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

3762 
ngx_poﬁ_˛ónup_t
 *
˛n
;

3764 
∂cf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

3765 i‡(
∂cf
->
up°ªam
.
s¶
 =
NULL
) {

3766  
NGX_ERROR
;

3769 
∂cf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

3771 i‡(
	`ngx_s¶_¸óã
(
∂cf
->
up°ªam
.
s¶
,Ölcf->
s¶_¥Ÿocﬁs
, 
NULL
)

3772 !
NGX_OK
)

3774  
NGX_ERROR
;

3777 i‡(
	`SSL_CTX_£t_cùhî_li°
(
∂cf
->
up°ªam
.
s¶
->
˘x
,

3778 (c⁄° *Ë
∂cf
->
s¶_cùhîs
.
d©a
)

3781 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

3783 &
∂cf
->
s¶_cùhîs
);

3784  
NGX_ERROR
;

3787 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

3788 i‡(
˛n
 =
NULL
) {

3789  
NGX_ERROR
;

3792 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

3793 
˛n
->
d©a
 = 
∂cf
->
up°ªam
.
s¶
;

3795  
NGX_OK
;

3796 
	}
}

3802 
	$ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
)

3804 i‡(
u
->
Ámûy
 !
AF_UNIX
) {

3806 i‡(
u
->
no_p‹t
 || u->
p‹t
 =u->
deÁu…_p‹t
) {

3808 
v
->
ho°_hódî
 = 
u
->
ho°
;

3810 i‡(
u
->
deÁu…_p‹t
 == 80) {

3811 
	`ngx_°r_£t
(&
v
->
p‹t
, "80");

3814 
	`ngx_°r_£t
(&
v
->
p‹t
, "443");

3818 
v
->
ho°_hódî
.
Àn
 = 
u
->
ho°
.À¿+ 1 + u->
p‹t_ãxt
.len;

3819 
v
->
ho°_hódî
.
d©a
 = 
u
->
ho°
.data;

3820 
v
->
p‹t
 = 
u
->
p‹t_ãxt
;

3823 
v
->
key_°¨t
.
Àn
 +v->
ho°_hódî
.len;

3826 
	`ngx_°r_£t
(&
v
->
ho°_hódî
, "localhost");

3827 
	`ngx_°r_nuŒ
(&
v
->
p‹t
);

3828 
v
->
key_°¨t
.
Àn
 +("unix:"Ë- 1 + 
u
->
ho°
.len + 1;

3831 
v
->
uri
 = 
u
->uri;

3832 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_random_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_øndom_ödex_loc_c⁄f_t
;

18 
	#NGX_HTTP_RANDOM_INDEX_PREALLOCATE
 50

	)

21 
ngx_öt_t
 
ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

23 
ngx_öt_t
 
ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

29 
ngx_comm™d_t
 
	gngx_hâp_øndom_ödex_comm™ds
[] = {

31 { 
ngx_°rög
("random_index"),

32 
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

33 
ngx_c⁄f_£t_Êag_¶Ÿ
,

34 
NGX_HTTP_LOC_CONF_OFFSET
,

35 
off£tof
(
ngx_hâp_øndom_ödex_loc_c⁄f_t
, 
íabÀ
),

36 
NULL
 },

38 
ngx_nuŒ_comm™d


42 
ngx_hâp_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ_˘x
 = {

43 
NULL
,

44 
ngx_hâp_øndom_ödex_öô
,

46 
NULL
,

47 
NULL
,

49 
NULL
,

50 
NULL
,

52 
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
,

53 
ngx_hâp_øndom_ödex_mîge_loc_c⁄f


57 
ngx_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_hâp_øndom_ödex_moduÀ_˘x
,

60 
ngx_hâp_øndom_ödex_comm™ds
,

61 
NGX_HTTP_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


73 
ngx_öt_t


74 
	$ngx_hâp_øndom_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

76 
u_ch¨
 *
œ°
, *
fûíame
;

77 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

78 
ngx_îr_t
 
îr
;

79 
ngx_öt_t
 
rc
;

80 
ngx_°r_t
 
∑th
, 
uri
, *
«me
;

81 
ngx_dú_t
 
dú
;

82 
ngx_uöt_t
 
n
, 
Àvñ
;

83 
ngx_¨øy_t
 
«mes
;

84 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
æcf
;

86 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

87  
NGX_DECLINED
;

90 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

91  
NGX_DECLINED
;

94 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_øndom_ödex_moduÀ
);

96 i‡(!
æcf
->
íabÀ
) {

97  
NGX_DECLINED
;

100 #i‡(
NGX_HAVE_D_TYPE
)

101 
Àn
 = 
NGX_DIR_MASK_LEN
;

103 
Àn
 = 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

106 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Àn
);

107 i‡(
œ°
 =
NULL
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

111 
Æloˇãd
 = 
∑th
.
Àn
;

113 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
 - 1;

114 
∑th
.
d©a
[∑th.
Àn
] = '\0';

116 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

117 "hâ∞øndom index: \"%s\"", 
∑th
.
d©a
);

119 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 =
NGX_ENOENT


123 || 
îr
 =
NGX_ENOTDIR


124 || 
îr
 =
NGX_ENAMETOOLONG
)

126 
Àvñ
 = 
NGX_LOG_ERR
;

127 
rc
 = 
NGX_HTTP_NOT_FOUND
;

129 } i‡(
îr
 =
NGX_EACCES
) {

130 
Àvñ
 = 
NGX_LOG_ERR
;

131 
rc
 = 
NGX_HTTP_FORBIDDEN
;

134 
Àvñ
 = 
NGX_LOG_CRIT
;

135 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

138 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

139 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

141  
rc
;

144 i‡(
	`ngx_¨øy_öô
(&
«mes
, 
r
->
poﬁ
, 32, (
ngx_°r_t
)Ë!
NGX_OK
) {

145  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

148 
fûíame
 = 
∑th
.
d©a
;

149 
fûíame
[
∑th
.
Àn
] = '/';

152 
	`ngx_£t_î∫o
(0);

154 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

155 
îr
 = 
ngx_î∫o
;

157 i‡(
îr
 !
NGX_ENOMOREFILES
) {

158 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

159 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

160  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

167 "hâ∞øndom index fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

169 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

173 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

175 i‡(
dú
.
ty≥
 =0 || 
	`ngx_de_is_lök
(&dir)) {

179 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

180 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

181 + 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

183 
fûíame
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

184 i‡(
fûíame
 =
NULL
) {

185  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

188 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

189 *
œ°
++ = '/';

192 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

194 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

195 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 !
NGX_ENOENT
) {

198 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

199 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

200  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

203 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

204 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

205 
ngx_de_lök_öfo_n
 " \"%s\" failed",

206 
fûíame
);

207  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

212 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

216 
«me
 = 
	`ngx_¨øy_push
(&
«mes
);

217 i‡(
«me
 =
NULL
) {

218  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

221 
«me
->
Àn
 =Üen;

223 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

224 i‡(
«me
->
d©a
 =
NULL
) {

225  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

228 
	`ngx_mem˝y
(
«me
->
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
);

231 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

232 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

233 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

236 
n
 = 
«mes
.
√…s
;

238 i‡(
n
 == 0) {

239  
NGX_DECLINED
;

242 
«me
 = 
«mes
.
ñts
;

244 
n
 = (
ngx_uöt_t
Ë(((
uöt64_t
Ë
	`ngx_øndom
() *Ç) / 0x80000000);

246 
uri
.
Àn
 = 
r
->uri.À¿+ 
«me
[
n
].len;

248 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

249 i‡(
uri
.
d©a
 =
NULL
) {

250  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

253 
œ°
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

254 
	`ngx_mem˝y
(
œ°
, 
«me
[
n
].
d©a
,Çame[n].
Àn
);

256  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
,

262 
ngx_°r_t
 *
«me
)

264 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

266 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

270 
	}
}

274 
	$ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

276 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
;

278 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_øndom_ödex_loc_c⁄f_t
));

279 i‡(
c⁄f
 =
NULL
) {

280  
NULL
;

283 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

285  
c⁄f
;

286 
	}
}

290 
	$ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

292 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

293 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

295 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

297  
NGX_CONF_OK
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

304 
ngx_hâp_h™dÀr_±
 *
h
;

305 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

307 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

309 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

310 i‡(
h
 =
NULL
) {

311  
NGX_ERROR
;

314 *
h
 = 
ngx_hâp_øndom_ödex_h™dÀr
;

316  
NGX_OK
;

317 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_range_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

49 
off_t
 
	m°¨t
;

50 
off_t
 
	míd
;

51 
ngx_°r_t
 
	mc⁄ã¡_ønge
;

52 } 
	tngx_hâp_ønge_t
;

56 
off_t
 
	moff£t
;

57 
ngx_°r_t
 
	mbound¨y_hódî
;

58 
ngx_¨øy_t
 
	mønges
;

59 } 
	tngx_hâp_ønge_fûãr_˘x_t
;

62 
ngx_öt_t
 
ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_uöt_t
 
ønges
);

64 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

68 
ngx_öt_t
 
ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

71 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

73 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

76 
ngx_öt_t
 
ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_öt_t
 
ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

80 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
 = {

81 
NULL
,

82 
ngx_hâp_ønge_hódî_fûãr_öô
,

84 
NULL
,

85 
NULL
,

87 
NULL
,

88 
NULL
,

90 
NULL
,

91 
NULL
,

95 
ngx_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ
 = {

96 
NGX_MODULE_V1
,

97 &
ngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
,

98 
NULL
,

99 
NGX_HTTP_MODULE
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NGX_MODULE_V1_PADDING


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_ønge_body_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL
,

126 
ngx_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_ønge_body_fûãr_moduÀ_˘x
,

129 
NULL
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

143 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

146 
ngx_öt_t


147 
	$ngx_hâp_ønge_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

149 
time_t
 
if_ønge_time
;

150 
ngx_°r_t
 *
if_ønge
, *
ëag
;

151 
ngx_uöt_t
 
ønges
;

152 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

153 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

155 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10


156 || 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


157 || 
r
 !r->
maö


158 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1

159 || !
r
->
Ælow_ønges
)

161  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

164 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

166 i‡(
˛cf
->
max_ønges
 == 0) {

167  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

170 i‡(
r
->
hódîs_ö
.
ønge
 =
NULL


171 || 
r
->
hódîs_ö
.
ønge
->
vÆue
.
Àn
 < 7

172 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
,

173 (
u_ch¨
 *) "bytes=", 6)

176 
√xt_fûãr
;

179 i‡(
r
->
hódîs_ö
.
if_ønge
) {

181 
if_ønge
 = &
r
->
hódîs_ö
.if_ønge->
vÆue
;

183 i‡(
if_ønge
->
Àn
 >2 && if_ønge->
d©a
[if_range->len - 1] == '"') {

185 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

186 
√xt_fûãr
;

189 
ëag
 = &
r
->
hódîs_out
.ëag->
vÆue
;

191 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

192 "hâ∞ú:%VÉèg:%V", 
if_ønge
, 
ëag
);

194 i‡(
if_ønge
->
Àn
 !
ëag
->len

195 || 
	`ngx_°∫cmp
(
if_ønge
->
d©a
, 
ëag
->d©a,Éèg->
Àn
) != 0)

197 
√xt_fûãr
;

200 
∑r£
;

203 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

204 
√xt_fûãr
;

207 
if_ønge_time
 = 
	`ngx_hâp_∑r£_time
(
if_ønge
->
d©a
, if_ønge->
Àn
);

209 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

211 
if_ønge_time
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

213 i‡(
if_ønge_time
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

214 
√xt_fûãr
;

218 
∑r£
:

220 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ønge_fûãr_˘x_t
));

221 i‡(
˘x
 =
NULL
) {

222  
NGX_ERROR
;

225 i‡(
	`ngx_¨øy_öô
(&
˘x
->
ønges
, 
r
->
poﬁ
, 1, (
ngx_hâp_ønge_t
))

226 !
NGX_OK
)

228  
NGX_ERROR
;

231 
ønges
 = 
r
->
sögÀ_ønge
 ? 1 : 
˛cf
->
max_ønges
;

233 
	`ngx_hâp_ønge_∑r£
(
r
, 
˘x
, 
ønges
)) {

235 
NGX_OK
:

236 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

238 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_PARTIAL_CONTENT
;

239 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

241 i‡(
˘x
->
ønges
.
√…s
 == 1) {

242  
	`ngx_hâp_ønge_sögÀ∑π_hódî
(
r
, 
˘x
);

245  
	`ngx_hâp_ønge_mu…ù¨t_hódî
(
r
, 
˘x
);

247 
NGX_HTTP_RANGE_NOT_SATISFIABLE
:

248  
	`ngx_hâp_ønge_nŸ_ßtisfübÀ
(
r
);

250 
NGX_ERROR
:

251  
NGX_ERROR
;

257 
√xt_fûãr
:

259 
r
->
hódîs_out
.
ac˚±_ønges
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

260 i‡(
r
->
hódîs_out
.
ac˚±_ønges
 =
NULL
) {

261  
NGX_ERROR
;

264 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 1;

265 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
key
, "Accept-Ranges");

266 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
vÆue
, "bytes");

268  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
,

274 
ngx_uöt_t
 
ønges
)

276 
u_ch¨
 *
p
;

277 
off_t
 
°¨t
, 
íd
, 
size
, 
c⁄ã¡_Àngth
;

278 
ngx_uöt_t
 
suffix
;

279 
ngx_hâp_ønge_t
 *
ønge
;

281 
p
 = 
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
 + 6;

282 
size
 = 0;

283 
c⁄ã¡_Àngth
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

286 
°¨t
 = 0;

287 
íd
 = 0;

288 
suffix
 = 0;

290 *
p
 == ' ') {Ö++; }

292 i‡(*
p
 != '-') {

293 i‡(*
p
 < '0' || *p > '9') {

294  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

297 *
p
 >= '0' && *p <= '9') {

298 
°¨t
 = sèπ * 10 + *
p
++ - '0';

301 *
p
 == ' ') {Ö++; }

303 i‡(*
p
++ != '-') {

304  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

307 *
p
 == ' ') {Ö++; }

309 i‡(*
p
 == ',' || *p == '\0') {

310 
íd
 = 
c⁄ã¡_Àngth
;

311 
found
;

315 
suffix
 = 1;

316 
p
++;

319 i‡(*
p
 < '0' || *p > '9') {

320  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

323 *
p
 >= '0' && *p <= '9') {

324 
íd
 =Énd * 10 + *
p
++ - '0';

327 *
p
 == ' ') {Ö++; }

329 i‡(*
p
 != ',' && *p != '\0') {

330  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

333 i‡(
suffix
) {

334 
°¨t
 = 
c⁄ã¡_Àngth
 - 
íd
;

335 
íd
 = 
c⁄ã¡_Àngth
 - 1;

338 i‡(
íd
 >
c⁄ã¡_Àngth
) {

339 
íd
 = 
c⁄ã¡_Àngth
;

342 
íd
++;

345 
found
:

347 i‡(
°¨t
 < 
íd
) {

348 
ønge
 = 
	`ngx_¨øy_push
(&
˘x
->
ønges
);

349 i‡(
ønge
 =
NULL
) {

350  
NGX_ERROR
;

353 
ønge
->
°¨t
 = start;

354 
ønge
->
íd
 =Énd;

356 
size
 +
íd
 - 
°¨t
;

358 i‡(
ønges
-- == 0) {

359  
NGX_DECLINED
;

363 i‡(*
p
++ != ',') {

368 i‡(
˘x
->
ønges
.
√…s
 == 0) {

369  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

372 i‡(
size
 > 
c⁄ã¡_Àngth
) {

373  
NGX_DECLINED
;

376  
NGX_OK
;

377 
	}
}

380 
ngx_öt_t


381 
	$ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

382 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

384 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

385 
ngx_hâp_ønge_t
 *
ønge
;

387 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

388 i‡(
c⁄ã¡_ønge
 =
NULL
) {

389  
NGX_ERROR
;

392 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

394 
c⁄ã¡_ønge
->
hash
 = 1;

395 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

397 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

398 ("byã†-/"Ë- 1 + 3 * 
NGX_OFF_T_LEN
);

399 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

400  
NGX_ERROR
;

405 
ønge
 = 
˘x
->
ønges
.
ñts
;

407 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

409 
ønge
->
°¨t
,Ñ™ge->
íd
 - 1,

410 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

411 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

413 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ønge
->
íd
 -Ñ™ge->
°¨t
;

415 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

416 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

417 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

420  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

421 
	}
}

424 
ngx_öt_t


425 
	$ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

426 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

428 
size_t
 
Àn
;

429 
ngx_uöt_t
 
i
;

430 
ngx_hâp_ønge_t
 *
ønge
;

431 
ngx_©omic_uöt_t
 
bound¨y
;

433 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


434 + (
CRLF
 "Content-Type: ") - 1

435 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


436 + (
CRLF
 "Content-Range: bytes ") - 1;

438 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


439 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

441 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

444 
˘x
->
bound¨y_hódî
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

445 i‡(
˘x
->
bound¨y_hódî
.
d©a
 =
NULL
) {

446  
NGX_ERROR
;

449 
bound¨y
 = 
	`ngx_√xt_ãmp_numbî
(0);

459 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


460 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

462 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

463 
CRLF
 "--%0muA" CRLF

464 "C⁄ã¡-Ty≥: %V; ch¨£t=%V" 
CRLF


466 
bound¨y
,

467 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
,

468 &
r
->
hódîs_out
.
ch¨£t
)

469 - 
˘x
->
bound¨y_hódî
.
d©a
;

471 } i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

472 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

473 
CRLF
 "--%0muA" CRLF

474 "C⁄ã¡-Ty≥: %V" 
CRLF


476 
bound¨y
,

477 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
)

478 - 
˘x
->
bound¨y_hódî
.
d©a
;

481 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

482 
CRLF
 "--%0muA" CRLF

484 
bound¨y
)

485 - 
˘x
->
bound¨y_hódî
.
d©a
;

488 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =

489 
	`ngx_≤Æloc
(
r
->
poﬁ
,

491 + 
NGX_ATOMIC_T_LEN
);

493 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =
NULL
) {

494  
NGX_ERROR
;

497 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

501 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =

502 
	`ngx_•rötf
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

504 
bound¨y
)

505 - 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
;

507 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

509 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

513 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
 + ("--" CRLF) - 1;

515 
ønge
 = 
˘x
->
ønges
.
ñts
;

516 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

520 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =

521 
	`ngx_≤Æloc
(
r
->
poﬁ
, 3 * 
NGX_OFF_T_LEN
 + 2 + 4);

523 i‡(
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =
NULL
) {

524  
NGX_ERROR
;

527 
ønge
[
i
].
c⁄ã¡_ønge
.
Àn
 = 
	`ngx_•rötf
‘™ge[i].c⁄ã¡_ønge.
d©a
,

528 "%O-%O/%O" 
CRLF
 CRLF,

529 
ønge
[
i
].
°¨t
,Ñ™ge[i].
íd
 - 1,

530 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

531 - 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

533 
Àn
 +
˘x
->
bound¨y_hódî
.À¿+ 
ønge
[
i
].
c⁄ã¡_ønge
.len

534 + (
size_t
Ë(
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
);

537 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

539 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

540 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

541 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

544  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

545 
	}
}

548 
ngx_öt_t


549 
	$ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
)

551 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

553 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

555 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

556 i‡(
c⁄ã¡_ønge
 =
NULL
) {

557  
NGX_ERROR
;

560 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

562 
c⁄ã¡_ønge
->
hash
 = 1;

563 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

565 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

566 ("byã†*/"Ë- 1 + 
NGX_OFF_T_LEN
);

567 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

568  
NGX_ERROR
;

571 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

573 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

574 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

576 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

578  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

579 
	}
}

582 
ngx_öt_t


583 
	$ngx_hâp_ønge_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

585 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

587 i‡(
ö
 =
NULL
) {

588  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

591 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

593 i‡(
˘x
 =
NULL
) {

594  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

597 i‡(
˘x
->
ønges
.
√…s
 == 1) {

598  
	`ngx_hâp_ønge_sögÀ∑π_body
(
r
, 
˘x
, 
ö
);

605 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

606  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

609 i‡(
	`ngx_hâp_ønge_ã°_ovîœµed
(
r
, 
˘x
, 
ö
Ë!
NGX_OK
) {

610  
NGX_ERROR
;

613  
	`ngx_hâp_ønge_mu…ù¨t_body
(
r
, 
˘x
, 
ö
);

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

619 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

621 
off_t
 
°¨t
, 
œ°
;

622 
ngx_buf_t
 *
buf
;

623 
ngx_uöt_t
 
i
;

624 
ngx_hâp_ønge_t
 *
ønge
;

626 i‡(
˘x
->
off£t
) {

627 
ovîœµed
;

630 
buf
 = 
ö
->buf;

632 i‡(!
buf
->
œ°_buf
) {

633 
°¨t
 = 
˘x
->
off£t
;

634 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

636 
ønge
 = 
˘x
->
ønges
.
ñts
;

637 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

638 i‡(
°¨t
 > 
ønge
[
i
].°¨à|| 
œ°
 <Ñ™ge[i].
íd
) {

639 
ovîœµed
;

644 
˘x
->
off£t
 = 
	`ngx_buf_size
(
buf
);

646  
NGX_OK
;

648 
ovîœµed
:

650 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

653  
NGX_ERROR
;

654 
	}
}

657 
ngx_öt_t


658 
	$ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

659 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

661 
off_t
 
°¨t
, 
œ°
;

662 
ngx_buf_t
 *
buf
;

663 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

664 
ngx_hâp_ønge_t
 *
ønge
;

666 
out
 = 
NULL
;

667 
Œ
 = &
out
;

668 
ønge
 = 
˘x
->
ønges
.
ñts
;

670 
˛
 = 
ö
; cl; c»˛->
√xt
) {

672 
buf
 = 
˛
->buf;

674 
°¨t
 = 
˘x
->
off£t
;

675 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

677 
˘x
->
off£t
 = 
œ°
;

679 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

680 "hâ∞øngêbody buf: %O-%O", 
°¨t
, 
œ°
);

682 i‡(
	`ngx_buf_•ecül
(
buf
)) {

683 *
Œ
 = 
˛
;

684 
Œ
 = &
˛
->
√xt
;

688 i‡(
ønge
->
íd
 <
°¨t
 ||Ñ™ge->°¨à>
œ°
) {

690 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

693 i‡(
buf
->
ö_fûe
) {

694 
buf
->
fûe_pos
 = buf->
fûe_œ°
;

697 
buf
->
pos
 = buf->
œ°
;

698 
buf
->
sync
 = 1;

703 i‡(
ønge
->
°¨t
 > start) {

705 i‡(
buf
->
ö_fûe
) {

706 
buf
->
fûe_pos
 +
ønge
->
°¨t
 - start;

709 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

710 
buf
->
pos
 +(
size_t
Ë(
ønge
->
°¨t
 - start);

714 i‡(
ønge
->
íd
 <
œ°
) {

716 i‡(
buf
->
ö_fûe
) {

717 
buf
->
fûe_œ°
 -
œ°
 - 
ønge
->
íd
;

720 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

721 
buf
->
œ°
 -(
size_t
Ë÷a° - 
ønge
->
íd
);

724 
buf
->
œ°_buf
 = 1;

725 *
Œ
 = 
˛
;

726 
˛
->
√xt
 = 
NULL
;

731 *
Œ
 = 
˛
;

732 
Œ
 = &
˛
->
√xt
;

735 i‡(
out
 =
NULL
) {

736  
NGX_OK
;

739  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

740 
	}
}

743 
ngx_öt_t


744 
	$ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

745 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

747 
ngx_buf_t
 *
b
, *
buf
;

748 
ngx_uöt_t
 
i
;

749 
ngx_chaö_t
 *
out
, *
h˛
, *
r˛
, *
d˛
, **
Œ
;

750 
ngx_hâp_ønge_t
 *
ønge
;

752 
Œ
 = &
out
;

753 
buf
 = 
ö
->buf;

754 
ønge
 = 
˘x
->
ønges
.
ñts
;

756 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

766 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

767 i‡(
b
 =
NULL
) {

768  
NGX_ERROR
;

771 
b
->
mem‹y
 = 1;

772 
b
->
pos
 = 
˘x
->
bound¨y_hódî
.
d©a
;

773 
b
->
œ°
 = 
˘x
->
bound¨y_hódî
.
d©a
 + ctx->bound¨y_hódî.
Àn
;

775 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

776 i‡(
h˛
 =
NULL
) {

777  
NGX_ERROR
;

780 
h˛
->
buf
 = 
b
;

785 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

786 i‡(
b
 =
NULL
) {

787  
NGX_ERROR
;

790 
b
->
ãmp‹¨y
 = 1;

791 
b
->
pos
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

792 
b
->
œ°
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 +Ñ™ge[i].c⁄ã¡_ønge.
Àn
;

794 
r˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

795 i‡(
r˛
 =
NULL
) {

796  
NGX_ERROR
;

799 
r˛
->
buf
 = 
b
;

804 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

805 i‡(
b
 =
NULL
) {

806  
NGX_ERROR
;

809 
b
->
ö_fûe
 = 
buf
->in_file;

810 
b
->
ãmp‹¨y
 = 
buf
->temporary;

811 
b
->
mem‹y
 = 
buf
->memory;

812 
b
->
mm≠
 = 
buf
->mmap;

813 
b
->
fûe
 = 
buf
->file;

815 i‡(
buf
->
ö_fûe
) {

816 
b
->
fûe_pos
 = 
buf
->fûe_po†+ 
ønge
[
i
].
°¨t
;

817 
b
->
fûe_œ°
 = 
buf
->
fûe_pos
 + 
ønge
[
i
].
íd
;

820 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

821 
b
->
pos
 = 
buf
->po†+ (
size_t
Ë
ønge
[
i
].
°¨t
;

822 
b
->
œ°
 = 
buf
->
pos
 + (
size_t
Ë
ønge
[
i
].
íd
;

825 
d˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

826 i‡(
d˛
 =
NULL
) {

827  
NGX_ERROR
;

830 
d˛
->
buf
 = 
b
;

832 *
Œ
 = 
h˛
;

833 
h˛
->
√xt
 = 
r˛
;

834 
r˛
->
√xt
 = 
d˛
;

835 
Œ
 = &
d˛
->
√xt
;

840 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

841 i‡(
b
 =
NULL
) {

842  
NGX_ERROR
;

845 
b
->
ãmp‹¨y
 = 1;

846 
b
->
œ°_buf
 = 1;

848 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


849 + ("--" 
CRLF
) - 1);

850 i‡(
b
->
pos
 =
NULL
) {

851  
NGX_ERROR
;

854 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
bound¨y_hódî
.
d©a
,

855 (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
);

856 *
b
->
œ°
++ = '-'; *b->last++ = '-';

857 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

859 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

860 i‡(
h˛
 =
NULL
) {

861  
NGX_ERROR
;

864 
h˛
->
buf
 = 
b
;

865 
h˛
->
√xt
 = 
NULL
;

867 *
Œ
 = 
h˛
;

869  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

870 
	}
}

873 
ngx_öt_t


874 
	$ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

876 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

877 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ønge_hódî_fûãr
;

879  
NGX_OK
;

880 
	}
}

883 
ngx_öt_t


884 
	$ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

886 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

887 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ønge_body_fûãr
;

889  
NGX_OK
;

890 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_realip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REALIP_XREALIP
 0

	)

14 
	#NGX_HTTP_REALIP_XFWD
 1

	)

15 
	#NGX_HTTP_REALIP_HEADER
 2

	)

16 
	#NGX_HTTP_REALIP_PROXY
 3

	)

20 
ngx_¨øy_t
 *
	m‰om
;

21 
ngx_uöt_t
 
	mty≥
;

22 
ngx_uöt_t
 
	mhash
;

23 
ngx_°r_t
 
	mhódî
;

24 
ngx_Êag_t
 
	mªcursive
;

25 } 
	tngx_hâp_ªÆù_loc_c⁄f_t
;

29 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

30 
sockaddr
 *
	msockaddr
;

31 
sockÀn_t
 
	msockÀn
;

32 
ngx_°r_t
 
	maddr_ãxt
;

33 } 
	tngx_hâp_ªÆù_˘x_t
;

36 
ngx_öt_t
 
ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
,

38 
ngx_addr_t
 *
addr
);

39 
ngx_hâp_ªÆù_˛ónup
(*
d©a
);

40 *
ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
c⁄f
);

42 *
ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

43 *
ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

45 *
∑ª¡
, *
chûd
);

46 
ngx_öt_t
 
ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
);

49 
ngx_comm™d_t
 
	gngx_hâp_ªÆù_comm™ds
[] = {

51 { 
ngx_°rög
("set_real_ip_from"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

53 
ngx_hâp_ªÆù_‰om
,

54 
NGX_HTTP_LOC_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("real_ip_header"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_hâp_ªÆù
,

61 
NGX_HTTP_LOC_CONF_OFFSET
,

63 
NULL
 },

65 { 
ngx_°rög
("real_ip_recursive"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

67 
ngx_c⁄f_£t_Êag_¶Ÿ
,

68 
NGX_HTTP_LOC_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_ªÆù_loc_c⁄f_t
, 
ªcursive
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


77 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ_˘x
 = {

78 
NULL
,

79 
ngx_hâp_ªÆù_öô
,

81 
NULL
,

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_hâp_ªÆù_¸óã_loc_c⁄f
,

88 
ngx_hâp_ªÆù_mîge_loc_c⁄f


92 
ngx_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_hâp_ªÆù_moduÀ_˘x
,

95 
ngx_hâp_ªÆù_comm™ds
,

96 
NGX_HTTP_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
ngx_öt_t


109 
	$ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

111 
u_ch¨
 *
p
;

112 
size_t
 
Àn
;

113 
ngx_°r_t
 *
vÆue
;

114 
ngx_uöt_t
 
i
, 
hash
;

115 
ngx_addr_t
 
addr
;

116 
ngx_¨øy_t
 *
xfwd
;

117 
ngx_li°_∑π_t
 *
∑π
;

118 
ngx_èbÀ_ñt_t
 *
hódî
;

119 
ngx_c⁄√˘i⁄_t
 *
c
;

120 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

121 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
;

123 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

125 i‡(
˘x
) {

126  
NGX_DECLINED
;

129 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

131 i‡(
æcf
->
‰om
 =
NULL
) {

132  
NGX_DECLINED
;

135 
æcf
->
ty≥
) {

137 
NGX_HTTP_REALIP_XREALIP
:

139 i‡(
r
->
hódîs_ö
.
x_ªÆ_ù
 =
NULL
) {

140  
NGX_DECLINED
;

143 
vÆue
 = &
r
->
hódîs_ö
.
x_ªÆ_ù
->value;

144 
xfwd
 = 
NULL
;

148 
NGX_HTTP_REALIP_XFWD
:

150 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

152 i‡(
xfwd
->
ñts
 =
NULL
) {

153  
NGX_DECLINED
;

156 
vÆue
 = 
NULL
;

160 
NGX_HTTP_REALIP_PROXY
:

162 
vÆue
 = &
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
;

164 i‡(
vÆue
->
Àn
 == 0) {

165  
NGX_DECLINED
;

168 
xfwd
 = 
NULL
;

174 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

175 
hódî
 = 
∑π
->
ñts
;

177 
hash
 = 
æcf
->hash;

178 
Àn
 = 
æcf
->
hódî
.len;

179 
p
 = 
æcf
->
hódî
.
d©a
;

181 
i
 = 0; ; i++) {

183 i‡(
i
 >
∑π
->
√…s
) {

184 i‡(
∑π
->
√xt
 =
NULL
) {

188 
∑π
 =Ö¨t->
√xt
;

189 
hódî
 = 
∑π
->
ñts
;

190 
i
 = 0;

193 i‡(
hash
 =
hódî
[
i
].hash

194 && 
Àn
 =
hódî
[
i
].
key
.len

195 && 
	`ngx_°∫cmp
(
p
, 
hódî
[
i
].
lowˇ£_key
, 
Àn
) == 0)

197 
vÆue
 = &
hódî
[
i
].value;

198 
xfwd
 = 
NULL
;

200 
found
;

204  
NGX_DECLINED
;

207 
found
:

209 
c
 = 
r
->
c⁄√˘i⁄
;

211 
addr
.
sockaddr
 = 
c
->sockaddr;

212 
addr
.
sockÀn
 = 
c
->socklen;

215 i‡(
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
vÆue
, 
æcf
->
‰om
,

216 
æcf
->
ªcursive
)

217 !
NGX_DECLINED
)

219  
	`ngx_hâp_ªÆù_£t_addr
(
r
, &
addr
);

222  
NGX_DECLINED
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
)

229 
size_t
 
Àn
;

230 
u_ch¨
 *
p
;

231 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

232 
ngx_c⁄√˘i⁄_t
 *
c
;

233 
ngx_poﬁ_˛ónup_t
 *
˛n
;

234 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

236 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, (
ngx_hâp_ªÆù_˘x_t
));

237 i‡(
˛n
 =
NULL
) {

238  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

241 
˘x
 = 
˛n
->
d©a
;

242 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ªÆù_moduÀ
);

244 
c
 = 
r
->
c⁄√˘i⁄
;

246 
Àn
 = 
	`ngx_sock_¡›
(
addr
->
sockaddr
,áddr->
sockÀn
, 
ãxt
,

247 
NGX_SOCKADDR_STRLEN
, 0);

248 i‡(
Àn
 == 0) {

249  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

252 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
);

253 i‡(
p
 =
NULL
) {

254  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

257 
	`ngx_mem˝y
(
p
, 
ãxt
, 
Àn
);

259 
˛n
->
h™dÀr
 = 
ngx_hâp_ªÆù_˛ónup
;

261 
˘x
->
c⁄√˘i⁄
 = 
c
;

262 
˘x
->
sockaddr
 = 
c
->sockaddr;

263 
˘x
->
sockÀn
 = 
c
->socklen;

264 
˘x
->
addr_ãxt
 = 
c
->addr_text;

266 
c
->
sockaddr
 = 
addr
->sockaddr;

267 
c
->
sockÀn
 = 
addr
->socklen;

268 
c
->
addr_ãxt
.
Àn
 =Üen;

269 
c
->
addr_ãxt
.
d©a
 = 
p
;

271  
NGX_DECLINED
;

272 
	}
}

276 
	$ngx_hâp_ªÆù_˛ónup
(*
d©a
)

278 
ngx_hâp_ªÆù_˘x_t
 *
˘x
 = 
d©a
;

280 
ngx_c⁄√˘i⁄_t
 *
c
;

282 
c
 = 
˘x
->
c⁄√˘i⁄
;

284 
c
->
sockaddr
 = 
˘x
->sockaddr;

285 
c
->
sockÀn
 = 
˘x
->socklen;

286 
c
->
addr_ãxt
 = 
˘x
->addr_text;

287 
	}
}

291 
	$ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

293 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

295 
ngx_öt_t
 
rc
;

296 
ngx_°r_t
 *
vÆue
;

297 
ngx_cidr_t
 *
cidr
;

299 
vÆue
 = 
cf
->
¨gs
->
ñts
;

301 i‡(
æcf
->
‰om
 =
NULL
) {

302 
æcf
->
‰om
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

303 (
ngx_cidr_t
));

304 i‡(
æcf
->
‰om
 =
NULL
) {

305  
NGX_CONF_ERROR
;

309 
cidr
 = 
	`ngx_¨øy_push
(
æcf
->
‰om
);

310 i‡(
cidr
 =
NULL
) {

311  
NGX_CONF_ERROR
;

314 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

316 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

317 
cidr
->
Ámûy
 = 
AF_UNIX
;

318  
NGX_CONF_OK
;

323 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], 
cidr
);

325 i‡(
rc
 =
NGX_ERROR
) {

326 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

327 &
vÆue
[1]);

328  
NGX_CONF_ERROR
;

331 i‡(
rc
 =
NGX_DONE
) {

332 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

333 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

336  
NGX_CONF_OK
;

337 
	}
}

341 
	$ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

343 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

345 
ngx_°r_t
 *
vÆue
;

347 
vÆue
 = 
cf
->
¨gs
->
ñts
;

349 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Real-IP") == 0) {

350 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XREALIP
;

351  
NGX_CONF_OK
;

354 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Forwarded-For") == 0) {

355 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XFWD
;

356  
NGX_CONF_OK
;

359 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "proxy_protocol") == 0) {

360 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_PROXY
;

361  
NGX_CONF_OK
;

364 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_HEADER
;

365 
æcf
->
hash
 = 
	`ngx_hash_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

366 
æcf
->
hódî
 = 
vÆue
[1];

368  
NGX_CONF_OK
;

369 
	}
}

373 
	$ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

375 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
;

377 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªÆù_loc_c⁄f_t
));

378 i‡(
c⁄f
 =
NULL
) {

379  
NULL
;

390 
c⁄f
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

391 
c⁄f
->
ªcursive
 = 
NGX_CONF_UNSET
;

393  
c⁄f
;

394 
	}
}

398 
	$ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

400 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

401 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

403 i‡(
c⁄f
->
‰om
 =
NULL
) {

404 
c⁄f
->
‰om
 = 
¥ev
->from;

407 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥
, 
¥ev
->ty≥, 
NGX_HTTP_REALIP_XREALIP
);

408 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive
, 
¥ev
->recursive, 0);

410 i‡(
c⁄f
->
hódî
.
Àn
 == 0) {

411 
c⁄f
->
hash
 = 
¥ev
->hash;

412 
c⁄f
->
hódî
 = 
¥ev
->header;

415  
NGX_CONF_OK
;

416 
	}
}

419 
ngx_öt_t


420 
	$ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
)

422 
ngx_hâp_h™dÀr_±
 *
h
;

423 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

425 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

427 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
);

428 i‡(
h
 =
NULL
) {

429  
NGX_ERROR
;

432 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

434 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

435 i‡(
h
 =
NULL
) {

436  
NGX_ERROR
;

439 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

441  
NGX_OK
;

442 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_referer_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REFERER_NO_URI_PART
 ((*Ë4)

	)

17 
ngx_hash_comböed_t
 
	mhash
;

19 #i‡(
NGX_PCRE
)

20 
ngx_¨øy_t
 *
	mªgex
;

21 
ngx_¨øy_t
 *
	m£rvî_«me_ªgex
;

24 
ngx_Êag_t
 
	mno_ª„ªr
;

25 
ngx_Êag_t
 
	mblocked_ª„ªr
;

26 
ngx_Êag_t
 
	m£rvî_«mes
;

28 
ngx_hash_keys_¨øys_t
 *
	mkeys
;

30 
ngx_uöt_t
 
	mª„ªr_hash_max_size
;

31 
ngx_uöt_t
 
	mª„ªr_hash_buckë_size
;

32 } 
	tngx_hâp_ª„ªr_c⁄f_t
;

35 * 
ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 * 
ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

38 *
ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 
ngx_öt_t
 
ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hash_keys_¨øys_t
 *
keys
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
);

42 
ngx_öt_t
 
ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_°r_t
 *
«me
);

44 #i‡(
NGX_PCRE
)

45 
ngx_öt_t
 
ngx_hâp_add_ªgex_£rvî_«me
(
ngx_c⁄f_t
 *
cf
,

46 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_hâp_ªgex_t
 *
ªgex
);

48 
ngx_libc_cde˛
 
ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
,

49 c⁄° *
two
);

52 
ngx_comm™d_t
 
	gngx_hâp_ª„ªr_comm™ds
[] = {

54 { 
ngx_°rög
("valid_referers"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

56 
ngx_hâp_vÆid_ª„ªrs
,

57 
NGX_HTTP_LOC_CONF_OFFSET
,

59 
NULL
 },

61 { 
ngx_°rög
("referer_hash_max_size"),

62 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

64 
NGX_HTTP_LOC_CONF_OFFSET
,

65 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_max_size
),

66 
NULL
 },

68 { 
ngx_°rög
("referer_hash_bucket_size"),

69 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

71 
NGX_HTTP_LOC_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_buckë_size
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL
,

89 
ngx_hâp_ª„ªr_¸óã_c⁄f
,

90 
ngx_hâp_ª„ªr_mîge_c⁄f


94 
ngx_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_hâp_ª„ªr_moduÀ_˘x
,

97 
ngx_hâp_ª„ªr_comm™ds
,

98 
NGX_HTTP_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


110 
ngx_öt_t


111 
	$ngx_hâp_ª„ªr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

112 
uöçå_t
 
d©a
)

114 
u_ch¨
 *
p
, *
ªf
, *
œ°
;

115 
size_t
 
Àn
;

116 
ngx_°r_t
 *
uri
;

117 
ngx_uöt_t
 
i
, 
key
;

118 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
;

119 
u_ch¨
 
buf
[256];

120 #i‡(
NGX_PCRE
)

121 
ngx_öt_t
 
rc
;

122 
ngx_°r_t
 
ª„ªr
;

125 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ª„ªr_moduÀ
);

127 i‡(
æcf
->
hash
.hash.
buckës
 =
NULL


128 && 
æcf
->
hash
.
wc_hód
 =
NULL


129 && 
æcf
->
hash
.
wc_èû
 =
NULL


130 #i‡(
NGX_PCRE
)

131 && 
æcf
->
ªgex
 =
NULL


132 && 
æcf
->
£rvî_«me_ªgex
 =
NULL


136 
vÆid
;

139 i‡(
r
->
hódîs_ö
.
ª„ªr
 =
NULL
) {

140 i‡(
æcf
->
no_ª„ªr
) {

141 
vÆid
;

144 
övÆid
;

147 
Àn
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.len;

148 
ªf
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.
d©a
;

150 i‡(
Àn
 >= ("http://i.ru") - 1) {

151 
œ°
 = 
ªf
 + 
Àn
;

153 i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "http://", 7) == 0) {

154 
ªf
 += 7;

155 
Àn
 -= 7;

156 
vÆid_scheme
;

158 } i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "https://", 8) == 0) {

159 
ªf
 += 8;

160 
Àn
 -= 8;

161 
vÆid_scheme
;

165 i‡(
æcf
->
blocked_ª„ªr
) {

166 
vÆid
;

169 
övÆid
;

171 
vÆid_scheme
:

173 
i
 = 0;

174 
key
 = 0;

176 
p
 = 
ªf
;Ö < 
œ°
;Ö++) {

177 i‡(*
p
 == '/' || *p == ':') {

181 i‡(
i
 == 256) {

182 
övÆid
;

185 
buf
[
i
] = 
	`ngx_tﬁowî
(*
p
);

186 
key
 = 
	`ngx_hash
(key, 
buf
[
i
++]);

189 
uri
 = 
	`ngx_hash_föd_comböed
(&
æcf
->
hash
, 
key
, 
buf
, 
p
 - 
ªf
);

191 i‡(
uri
) {

192 
uri
;

195 #i‡(
NGX_PCRE
)

197 i‡(
æcf
->
£rvî_«me_ªgex
) {

198 
ª„ªr
.
Àn
 = 
p
 - 
ªf
;

199 
ª„ªr
.
d©a
 = 
buf
;

201 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
£rvî_«me_ªgex
, &
ª„ªr
,

202 
r
->
c⁄√˘i⁄
->
log
);

204 i‡(
rc
 =
NGX_OK
) {

205 
vÆid
;

208 i‡(
rc
 =
NGX_ERROR
) {

209  
rc
;

215 i‡(
æcf
->
ªgex
) {

216 
ª„ªr
.
Àn
 =Üen;

217 
ª„ªr
.
d©a
 = 
ªf
;

219 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
ªgex
, &
ª„ªr
, 
r
->
c⁄√˘i⁄
->
log
);

221 i‡(
rc
 =
NGX_OK
) {

222 
vÆid
;

225 i‡(
rc
 =
NGX_ERROR
) {

226  
rc
;

234 
övÆid
:

236 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

238  
NGX_OK
;

240 
uri
:

242  ; 
p
 < 
œ°
;Ö++) {

243 i‡(*
p
 == '/') {

248 
Àn
 = 
œ°
 - 
p
;

250 i‡(
uri
 =
NGX_HTTP_REFERER_NO_URI_PART
) {

251 
vÆid
;

254 i‡(
Àn
 < 
uri
->À¿|| 
	`ngx_°∫cmp
(uri->
d©a
, 
p
, uri->len) != 0) {

255 
övÆid
;

258 
vÆid
:

260 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

262  
NGX_OK
;

263 
	}
}

267 
	$ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

269 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
;

271 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ª„ªr_c⁄f_t
));

272 i‡(
c⁄f
 =
NULL
) {

273  
NULL
;

284 #i‡(
NGX_PCRE
)

285 
c⁄f
->
ªgex
 = 
NGX_CONF_UNSET_PTR
;

286 
c⁄f
->
£rvî_«me_ªgex
 = 
NGX_CONF_UNSET_PTR
;

289 
c⁄f
->
no_ª„ªr
 = 
NGX_CONF_UNSET
;

290 
c⁄f
->
blocked_ª„ªr
 = 
NGX_CONF_UNSET
;

291 
c⁄f
->
ª„ªr_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

292 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

294  
c⁄f
;

295 
	}
}

299 
	$ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

301 
ngx_hâp_ª„ªr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

302 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
 = 
chûd
;

304 
ngx_uöt_t
 
n
;

305 
ngx_hash_öô_t
 
hash
;

306 
ngx_hâp_£rvî_«me_t
 *
¢
;

307 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

309 i‡(
c⁄f
->
keys
 =
NULL
) {

310 
c⁄f
->
hash
 = 
¥ev
->hash;

312 #i‡(
NGX_PCRE
)

313 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

314 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£rvî_«me_ªgex
,

315 
¥ev
->
£rvî_«me_ªgex
, 
NULL
);

317 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_ª„ªr
, 
¥ev
->no_referer, 0);

318 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
blocked_ª„ªr
, 
¥ev
->blocked_referer, 0);

319 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

320 
¥ev
->
ª„ªr_hash_max_size
, 2048);

321 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

322 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

324  
NGX_CONF_OK
;

327 i‡(
c⁄f
->
£rvî_«mes
 == 1) {

328 
cscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

330 
¢
 = 
cscf
->
£rvî_«mes
.
ñts
;

331 
n
 = 0;Ç < 
cscf
->
£rvî_«mes
.
√…s
;Ç++) {

333 #i‡(
NGX_PCRE
)

334 i‡(
¢
[
n
].
ªgex
) {

336 i‡(
	`ngx_hâp_add_ªgex_£rvî_«me
(
cf
, 
c⁄f
, 
¢
[
n
].
ªgex
)

337 !
NGX_OK
)

339  
NGX_CONF_ERROR
;

346 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
c⁄f
->
keys
, &
¢
[
n
].
«me
, 
NULL
)

347 !
NGX_OK
)

349  
NGX_CONF_ERROR
;

354 i‡((
c⁄f
->
no_ª„ªr
 =1 || c⁄f->
blocked_ª„ªr
 == 1)

355 && 
c⁄f
->
keys
->keys.
√…s
 == 0

356 && 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
 == 0

357 && 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
 == 0)

359 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

363  
NGX_CONF_ERROR
;

366 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

367 
¥ev
->
ª„ªr_hash_max_size
, 2048);

368 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

369 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

370 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
	`ngx_Æign
(conf->referer_hash_bucket_size,

371 
ngx_ˇchñöe_size
);

373 
hash
.
key
 = 
ngx_hash_key_lc
;

374 
hash
.
max_size
 = 
c⁄f
->
ª„ªr_hash_max_size
;

375 
hash
.
buckë_size
 = 
c⁄f
->
ª„ªr_hash_buckë_size
;

376 
hash
.
«me
 = "referer_hash";

377 
hash
.
poﬁ
 = 
cf
->pool;

379 i‡(
c⁄f
->
keys
->keys.
√…s
) {

380 
hash
.hash = &
c⁄f
->hash.hash;

381 
hash
.
ãmp_poﬁ
 = 
NULL
;

383 i‡(
	`ngx_hash_öô
(&
hash
, 
c⁄f
->
keys
->keys.
ñts
, c⁄f->keys->keys.
√…s
)

384 !
NGX_OK
)

386  
NGX_CONF_ERROR
;

390 i‡(
c⁄f
->
keys
->
dns_wc_hód
.
√…s
) {

392 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

393 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_hód
.
√…s
,

394 (
ngx_hash_key_t
),

395 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

397 
hash
.hash = 
NULL
;

398 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

400 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

401 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
)

402 !
NGX_OK
)

404  
NGX_CONF_ERROR
;

407 
c⁄f
->
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

410 i‡(
c⁄f
->
keys
->
dns_wc_èû
.
√…s
) {

412 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

413 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_èû
.
√…s
,

414 (
ngx_hash_key_t
),

415 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

417 
hash
.hash = 
NULL
;

418 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

420 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

421 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
)

422 !
NGX_OK
)

424  
NGX_CONF_ERROR
;

427 
c⁄f
->
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

430 #i‡(
NGX_PCRE
)

431 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

432 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£rvî_«me_ªgex
, 
¥ev
->server_name_regex,

433 
NULL
);

436 i‡(
c⁄f
->
no_ª„ªr
 =
NGX_CONF_UNSET
) {

437 
c⁄f
->
no_ª„ªr
 = 0;

440 i‡(
c⁄f
->
blocked_ª„ªr
 =
NGX_CONF_UNSET
) {

441 
c⁄f
->
blocked_ª„ªr
 = 0;

444 
c⁄f
->
keys
 = 
NULL
;

446  
NGX_CONF_OK
;

447 
	}
}

451 
	$ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

453 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
 = 
c⁄f
;

455 
u_ch¨
 *
p
;

456 
ngx_°r_t
 *
vÆue
, 
uri
, 
«me
;

457 
ngx_uöt_t
 
i
;

458 
ngx_hâp_v¨übÀ_t
 *
v¨
;

460 
	`ngx_°r_£t
(&
«me
, "invalid_referer");

462 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

463 i‡(
v¨
 =
NULL
) {

464  
NGX_CONF_ERROR
;

467 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_ª„ªr_v¨übÀ
;

469 i‡(
æcf
->
keys
 =
NULL
) {

470 
æcf
->
keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
, (
ngx_hash_keys_¨øys_t
));

471 i‡(
æcf
->
keys
 =
NULL
) {

472  
NGX_CONF_ERROR
;

475 
æcf
->
keys
->
poﬁ
 = 
cf
->pool;

476 
æcf
->
keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

478 i‡(
	`ngx_hash_keys_¨øy_öô
(
æcf
->
keys
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

479  
NGX_CONF_ERROR
;

483 
vÆue
 = 
cf
->
¨gs
->
ñts
;

485 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

486 i‡(
vÆue
[
i
].
Àn
 == 0) {

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

488 "övÆidÑe„ª∏\"%V\"", &
vÆue
[
i
]);

489  
NGX_CONF_ERROR
;

492 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

493 
æcf
->
no_ª„ªr
 = 1;

497 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "blocked") == 0) {

498 
æcf
->
blocked_ª„ªr
 = 1;

502 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "server_names") == 0) {

503 
æcf
->
£rvî_«mes
 = 1;

507 i‡(
vÆue
[
i
].
d©a
[0] == '~') {

508 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
vÆue
[
i
]Ë!
NGX_OK
) {

509  
NGX_CONF_ERROR
;

515 
	`ngx_°r_nuŒ
(&
uri
);

517 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/');

519 i‡(
p
) {

520 
uri
.
Àn
 = (
vÆue
[
i
].
d©a
 + vÆue[i].ÀnË- 
p
;

521 
uri
.
d©a
 = 
p
;

522 
vÆue
[
i
].
Àn
 = 
p
 - vÆue[i].
d©a
;

525 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
vÆue
[
i
], &
uri
Ë!
NGX_OK
) {

526  
NGX_CONF_ERROR
;

530  
NGX_CONF_OK
;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

536 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
)

538 
ngx_öt_t
 
rc
;

539 
ngx_°r_t
 *
u
;

541 i‡(
uri
 =
NULL
 || uri->
Àn
 == 0) {

542 
u
 = 
NGX_HTTP_REFERER_NO_URI_PART
;

545 
u
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

546 i‡(
u
 =
NULL
) {

547  
NGX_ERROR
;

550 *
u
 = *
uri
;

553 
rc
 = 
	`ngx_hash_add_key
(
keys
, 
vÆue
, 
u
, 
NGX_HASH_WILDCARD_KEY
);

555 i‡(
rc
 =
NGX_OK
) {

556  
NGX_OK
;

559 i‡(
rc
 =
NGX_DECLINED
) {

560 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

561 "övÆid ho°«mê‹ wûdˇrd \"%V\"", 
vÆue
);

564 i‡(
rc
 =
NGX_BUSY
) {

565 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

566 "c⁄Êi˘ögÖ¨amëî \"%V\"", 
vÆue
);

569  
NGX_ERROR
;

570 
	}
}

573 
ngx_öt_t


574 
	$ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

575 
ngx_°r_t
 *
«me
)

577 #i‡(
NGX_PCRE
)

578 
ngx_ªgex_ñt_t
 *
ª
;

579 
ngx_ªgex_compûe_t
 
rc
;

580 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

582 i‡(
«me
->
Àn
 == 1) {

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "em±yÑegex i¿\"%V\"", 
«me
);

584  
NGX_ERROR
;

587 i‡(
æcf
->
ªgex
 =
NGX_CONF_UNSET_PTR
) {

588 
æcf
->
ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_ªgex_ñt_t
));

589 i‡(
æcf
->
ªgex
 =
NULL
) {

590  
NGX_ERROR
;

594 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
ªgex
);

595 i‡(
ª
 =
NULL
) {

596  
NGX_ERROR
;

599 
«me
->
Àn
--;

600 
«me
->
d©a
++;

602 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

604 
rc
.
∑âîn
 = *
«me
;

605 
rc
.
poﬁ
 = 
cf
->pool;

606 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

607 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

608 
rc
.
îr
.
d©a
 = 
îr°r
;

610 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

611 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

612  
NGX_ERROR
;

615 
ª
->
ªgex
 = 
rc
.regex;

616 
ª
->
«me
 =Çame->
d©a
;

618  
NGX_OK
;

622 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

624 
«me
);

626  
NGX_ERROR
;

629 
	}
}

632 #i‡(
NGX_PCRE
)

634 
ngx_öt_t


635 
	$ngx_hâp_add_ªgex_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

636 
ngx_hâp_ªgex_t
 *
ªgex
)

638 
ngx_ªgex_ñt_t
 *
ª
;

640 i‡(
æcf
->
£rvî_«me_ªgex
 =
NGX_CONF_UNSET_PTR
) {

641 
æcf
->
£rvî_«me_ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

642 (
ngx_ªgex_ñt_t
));

643 i‡(
æcf
->
£rvî_«me_ªgex
 =
NULL
) {

644  
NGX_ERROR
;

648 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
£rvî_«me_ªgex
);

649 i‡(
ª
 =
NULL
) {

650  
NGX_ERROR
;

653 
ª
->
ªgex
 =Ñegex->regex;

654 
ª
->
«me
 = 
ªgex
->«me.
d©a
;

656  
NGX_OK
;

657 
	}
}

662 
ngx_libc_cde˛


663 
	$ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

665 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

667 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

668 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

670  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

671 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_rewrite_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mcodes
;

16 
ngx_uöt_t
 
	m°ack_size
;

18 
ngx_Êag_t
 
	mlog
;

19 
ngx_Êag_t
 
	munöôülized_v¨übÀ_w¨n
;

20 } 
	tngx_hâp_ªwrôe_loc_c⁄f_t
;

23 *
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

25 *
∑ª¡
, *
chûd
);

26 
ngx_öt_t
 
ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

31 *
c⁄f
);

32 *
ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

34 * 
ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
,

35 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
);

36 *
ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

38 *
ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 * 
ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

44 
ngx_comm™d_t
 
	gngx_hâp_ªwrôe_comm™ds
[] = {

46 { 
ngx_°rög
("rewrite"),

47 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


48 |
NGX_CONF_TAKE23
,

49 
ngx_hâp_ªwrôe
,

50 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
NULL
 },

54 { 
ngx_°rög
("return"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


56 |
NGX_CONF_TAKE12
,

57 
ngx_hâp_ªwrôe_ªtu∫
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("break"),

63 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


64 |
NGX_CONF_NOARGS
,

65 
ngx_hâp_ªwrôe_bªak
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
NULL
 },

70 { 
ngx_°rög
("if"),

71 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

72 
ngx_hâp_ªwrôe_if
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

75 
NULL
 },

77 { 
ngx_°rög
("set"),

78 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


79 |
NGX_CONF_TAKE2
,

80 
ngx_hâp_ªwrôe_£t
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("rewrite_log"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


87 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
log
),

91 
NULL
 },

93 { 
ngx_°rög
("uninitialized_variable_warn"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


95 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

96 
ngx_c⁄f_£t_Êag_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
unöôülized_v¨übÀ_w¨n
),

99 
NULL
 },

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_ªwrôe_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
,

116 
ngx_hâp_ªwrôe_mîge_loc_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_ªwrôe_moduÀ_˘x
,

123 
ngx_hâp_ªwrôe_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_hâp_ªwrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

139 
ngx_öt_t
 
ödex
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

141 
ngx_hâp_s¸ùt_ígöe_t
 *
e
;

142 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

143 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

144 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

146 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

148 
ödex
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

150 i‡(
r
->
pha£_h™dÀr
 =
ödex
 &&Ñ->
loc_c⁄f
 =
cscf
->
˘x
->loc_conf) {

152  
NGX_DECLINED
;

155 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

157 i‡(
æcf
->
codes
 =
NULL
) {

158  
NGX_DECLINED
;

161 
e
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_s¸ùt_ígöe_t
));

162 i‡(
e
 =
NULL
) {

163  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

166 
e
->
•
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

167 
æcf
->
°ack_size
 * (
ngx_hâp_v¨übÀ_vÆue_t
));

168 i‡(
e
->
•
 =
NULL
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
e
->
ù
 = 
æcf
->
codes
->
ñts
;

173 
e
->
ªque°
 = 
r
;

174 
e
->
quŸe
 = 1;

175 
e
->
log
 = 
æcf
->log;

176 
e
->
°©us
 = 
NGX_DECLINED
;

178 *(
uöçå_t
 *Ë
e
->
ù
) {

179 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
->
ù
;

180 
	`code
(
e
);

183 i‡(
e
->
°©us
 < 
NGX_HTTP_BAD_REQUEST
) {

184  
e
->
°©us
;

187 i‡(
r
->
îr_°©us
 == 0) {

188  
e
->
°©us
;

191  
r
->
îr_°©us
;

192 
	}
}

195 
ngx_öt_t


196 
	$ngx_hâp_ªwrôe_v¨
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

197 
uöçå_t
 
d©a
)

199 
ngx_hâp_v¨übÀ_t
 *
v¨
;

200 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

201 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

203 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

205 i‡(
æcf
->
unöôülized_v¨übÀ_w¨n
 == 0) {

206 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

207  
NGX_OK
;

210 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

212 
v¨
 = 
cmcf
->
v¨übÀs
.
ñts
;

220 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

221 "usög unöôülized \"%V\" v¨übÀ", &
v¨
[
d©a
].
«me
);

223 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

225  
NGX_OK
;

226 
	}
}

230 
	$ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

232 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
;

234 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªwrôe_loc_c⁄f_t
));

235 i‡(
c⁄f
 =
NULL
) {

236  
NULL
;

239 
c⁄f
->
°ack_size
 = 
NGX_CONF_UNSET_UINT
;

240 
c⁄f
->
log
 = 
NGX_CONF_UNSET
;

241 
c⁄f
->
unöôülized_v¨übÀ_w¨n
 = 
NGX_CONF_UNSET
;

243  
c⁄f
;

244 
	}
}

248 
	$ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

250 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

251 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

253 
uöçå_t
 *
code
;

255 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log
, 
¥ev
->log, 0);

256 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
unöôülized_v¨übÀ_w¨n
,

257 
¥ev
->
unöôülized_v¨übÀ_w¨n
, 1);

258 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ack_size
, 
¥ev
->stack_size, 10);

260 i‡(
c⁄f
->
codes
 =
NULL
) {

261  
NGX_CONF_OK
;

264 i‡(
c⁄f
->
codes
 =
¥ev
->codes) {

265  
NGX_CONF_OK
;

268 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
codes
, (
uöçå_t
));

269 i‡(
code
 =
NULL
) {

270  
NGX_CONF_ERROR
;

273 *
code
 = (
uöçå_t
Ë
NULL
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_hâp_h™dÀr_±
 *
h
;

283 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

285 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

287 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
);

288 i‡(
h
 =
NULL
) {

289  
NGX_ERROR
;

292 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

294 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
);

295 i‡(
h
 =
NULL
) {

296  
NGX_ERROR
;

299 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

301  
NGX_OK
;

302 
	}
}

306 
	$ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

308 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

310 
ngx_°r_t
 *
vÆue
;

311 
ngx_uöt_t
 
œ°
;

312 
ngx_ªgex_compûe_t
 
rc
;

313 
ngx_hâp_s¸ùt_code_±
 *
code
;

314 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

315 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

316 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
ªgex_íd
;

317 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

319 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

320 (
ngx_hâp_s¸ùt_ªgex_code_t
));

321 i‡(
ªgex
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

327 
vÆue
 = 
cf
->
¨gs
->
ñts
;

329 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

331 
rc
.
∑âîn
 = 
vÆue
[1];

332 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

333 
rc
.
îr
.
d©a
 = 
îr°r
;

337 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

338 i‡(
ªgex
->ªgex =
NULL
) {

339  
NGX_CONF_ERROR
;

342 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

343 
ªgex
->
uri
 = 1;

344 
ªgex
->
«me
 = 
vÆue
[1];

346 i‡(
vÆue
[2].
d©a
[vÆue[2].
Àn
 - 1] == '?') {

349 
vÆue
[2].
Àn
--;

352 
ªgex
->
add_¨gs
 = 1;

355 
œ°
 = 0;

357 i‡(
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "http://", ("http://") - 1) == 0

358 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "https://", ("https://") - 1) == 0

359 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "$scheme", ("$scheme") - 1) == 0)

361 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

362 
ªgex
->
ªdúe˘
 = 1;

363 
œ°
 = 1;

366 i‡(
cf
->
¨gs
->
√…s
 == 4) {

367 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "last") == 0) {

368 
œ°
 = 1;

370 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "break") == 0) {

371 
ªgex
->
bªak_cy˛e
 = 1;

372 
œ°
 = 1;

374 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "redirect") == 0) {

375 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

376 
ªgex
->
ªdúe˘
 = 1;

377 
œ°
 = 1;

379 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "permanent") == 0) {

380 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_PERMANENTLY
;

381 
ªgex
->
ªdúe˘
 = 1;

382 
œ°
 = 1;

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

386 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

387  
NGX_CONF_ERROR
;

391 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

393 
sc
.
cf
 = cf;

394 
sc
.
sour˚
 = &
vÆue
[2];

395 
sc
.
Àngths
 = &
ªgex
->lengths;

396 
sc
.
vÆues
 = &
lcf
->
codes
;

397 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[2]);

398 
sc
.
maö
 = 
ªgex
;

399 
sc
.
com∂ëe_Àngths
 = 1;

400 
sc
.
compûe_¨gs
 = !
ªgex
->
ªdúe˘
;

402 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

403  
NGX_CONF_ERROR
;

406 
ªgex
 = 
sc
.
maö
;

408 
ªgex
->
size
 = 
sc
.size;

409 
ªgex
->
¨gs
 = 
sc
.args;

411 i‡(
sc
.
v¨übÀs
 =0 && !sc.
dup_ˇ±uª
) {

412 
ªgex
->
Àngths
 = 
NULL
;

415 
ªgex_íd
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
,

416 (
ngx_hâp_s¸ùt_ªgex_íd_code_t
),

417 &
ªgex
);

418 i‡(
ªgex_íd
 =
NULL
) {

419  
NGX_CONF_ERROR
;

422 
ªgex_íd
->
code
 = 
ngx_hâp_s¸ùt_ªgex_íd_code
;

423 
ªgex_íd
->
uri
 = 
ªgex
->uri;

424 
ªgex_íd
->
¨gs
 = 
ªgex
->args;

425 
ªgex_íd
->
add_¨gs
 = 
ªgex
->add_args;

426 
ªgex_íd
->
ªdúe˘
 = 
ªgex
->redirect;

428 i‡(
œ°
) {

429 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
, (
uöçå_t
), &
ªgex
);

430 i‡(
code
 =
NULL
) {

431  
NGX_CONF_ERROR
;

434 *
code
 = 
NULL
;

437 
ªgex
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


438 - (
u_ch¨
 *Ë
ªgex
;

440  
NGX_CONF_OK
;

441 
	}
}

445 
	$ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

447 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

449 
u_ch¨
 *
p
;

450 
ngx_°r_t
 *
vÆue
, *
v
;

451 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
ªt
;

452 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

454 
ªt
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

455 (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

456 i‡(
ªt
 =
NULL
) {

457  
NGX_CONF_ERROR
;

460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

462 
	`ngx_memzîo
(
ªt
, (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

464 
ªt
->
code
 = 
ngx_hâp_s¸ùt_ªtu∫_code
;

466 
p
 = 
vÆue
[1].
d©a
;

468 
ªt
->
°©us
 = 
	`ngx_©oi
(
p
, 
vÆue
[1].
Àn
);

470 i‡(
ªt
->
°©us
 =(
uöçå_t
Ë
NGX_ERROR
) {

472 i‡(
cf
->
¨gs
->
√…s
 == 2

473 && (
	`ngx_°∫cmp
(
p
, "http://", ("http://") - 1) == 0

474 || 
	`ngx_°∫cmp
(
p
, "https://", ("https://") - 1) == 0

475 || 
	`ngx_°∫cmp
(
p
, "$scheme", ("$scheme") - 1) == 0))

477 
ªt
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

478 
v
 = &
vÆue
[1];

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

482 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

483  
NGX_CONF_ERROR
;

488 i‡(
ªt
->
°©us
 > 999) {

489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

490 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

491  
NGX_CONF_ERROR
;

494 i‡(
cf
->
¨gs
->
√…s
 == 2) {

495  
NGX_CONF_OK
;

498 
v
 = &
vÆue
[2];

501 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

503 
ccv
.
cf
 = cf;

504 
ccv
.
vÆue
 = 
v
;

505 
ccv
.
com∂ex_vÆue
 = &
ªt
->
ãxt
;

507 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

508  
NGX_CONF_ERROR
;

511  
NGX_CONF_OK
;

512 
	}
}

516 
	$ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

518 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

520 
ngx_hâp_s¸ùt_code_±
 *
code
;

522 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
, (
uöçå_t
));

523 i‡(
code
 =
NULL
) {

524  
NGX_CONF_ERROR
;

527 *
code
 = 
ngx_hâp_s¸ùt_bªak_code
;

529  
NGX_CONF_OK
;

530 
	}
}

534 
	$ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

536 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

538 *
mc⁄f
;

539 *
rv
;

540 
u_ch¨
 *
ñts
;

541 
ngx_uöt_t
 
i
;

542 
ngx_c⁄f_t
 
ßve
;

543 
ngx_hâp_moduÀ_t
 *
moduÀ
;

544 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

546 
ngx_hâp_s¸ùt_if_code_t
 *
if_code
;

547 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
∆cf
;

549 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

550 i‡(
˘x
 =
NULL
) {

551  
NGX_CONF_ERROR
;

554 
p˘x
 = 
cf
->
˘x
;

555 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

556 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

558 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

559 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

560  
NGX_CONF_ERROR
;

563 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

564 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

568 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

570 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

572 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

573 i‡(
mc⁄f
 =
NULL
) {

574  
NGX_CONF_ERROR
;

577 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

581 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

583 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

584 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

585 
˛cf
->
«me
 = 
p˛cf
->name;

586 
˛cf
->
n⁄ame
 = 1;

588 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

589  
NGX_CONF_ERROR
;

592 i‡(
	`ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
cf
, 
lcf
Ë!
NGX_CONF_OK
) {

593  
NGX_CONF_ERROR
;

596 
if_code
 = 
	`ngx_¨øy_push_n
(
lcf
->
codes
, (
ngx_hâp_s¸ùt_if_code_t
));

597 i‡(
if_code
 =
NULL
) {

598  
NGX_CONF_ERROR
;

601 
if_code
->
code
 = 
ngx_hâp_s¸ùt_if_code
;

603 
ñts
 = 
lcf
->
codes
->elts;

608 
∆cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_ªwrôe_moduÀ
.
˘x_ödex
];

609 
∆cf
->
codes
 = 
lcf
->codes;

612 
ßve
 = *
cf
;

613 
cf
->
˘x
 = ctx;

615 i‡(
p˛cf
->
«me
.
Àn
 == 0) {

616 
if_code
->
loc_c⁄f
 = 
NULL
;

617 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SIF_CONF
;

620 
if_code
->
loc_c⁄f
 = 
˘x
->loc_conf;

621 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LIF_CONF
;

624 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

626 *
cf
 = 
ßve
;

628 i‡(
rv
 !
NGX_CONF_OK
) {

629  
rv
;

633 i‡(
ñts
 !
lcf
->
codes
->elts) {

634 
if_code
 = (
ngx_hâp_s¸ùt_if_code_t
 *)

635 ((
u_ch¨
 *Ë
if_code
 + ((u_ch¨ *Ë
lcf
->
codes
->
ñts
 -Élts));

638 
if_code
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


639 - (
u_ch¨
 *Ë
if_code
;

643 
∆cf
->
codes
 = 
NULL
;

645  
NGX_CONF_OK
;

646 
	}
}

650 
	$ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
)

652 
u_ch¨
 *
p
;

653 
size_t
 
Àn
;

654 
ngx_°r_t
 *
vÆue
;

655 
ngx_uöt_t
 
cur
, 
œ°
;

656 
ngx_ªgex_compûe_t
 
rc
;

657 
ngx_hâp_s¸ùt_code_±
 *
code
;

658 
ngx_hâp_s¸ùt_fûe_code_t
 *
f›
;

659 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

660 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

662 
vÆue
 = 
cf
->
¨gs
->
ñts
;

663 
œ°
 = 
cf
->
¨gs
->
√…s
 - 1;

665 i‡(
vÆue
[1].
Àn
 < 1 || vÆue[1].
d©a
[0] != '(') {

666 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

667 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[1]);

668  
NGX_CONF_ERROR
;

671 i‡(
vÆue
[1].
Àn
 == 1) {

672 
cur
 = 2;

675 
cur
 = 1;

676 
vÆue
[1].
Àn
--;

677 
vÆue
[1].
d©a
++;

680 i‡(
vÆue
[
œ°
].
Àn
 < 1 || vÆue[œ°].
d©a
[value[last].len - 1] != ')') {

681 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

682 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
œ°
]);

683  
NGX_CONF_ERROR
;

686 i‡(
vÆue
[
œ°
].
Àn
 == 1) {

687 
œ°
--;

690 
vÆue
[
œ°
].
Àn
--;

691 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

694 
Àn
 = 
vÆue
[
cur
].len;

695 
p
 = 
vÆue
[
cur
].
d©a
;

697 i‡(
Àn
 > 1 && 
p
[0] == '$') {

699 i‡(
cur
 !
œ°
 && cur + 2 !=Üast) {

700 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

701 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

702  
NGX_CONF_ERROR
;

705 i‡(
	`ngx_hâp_ªwrôe_v¨übÀ
(
cf
, 
lcf
, &
vÆue
[
cur
]Ë!
NGX_CONF_OK
) {

706  
NGX_CONF_ERROR
;

709 i‡(
cur
 =
œ°
) {

710  
NGX_CONF_OK
;

713 
cur
++;

715 
Àn
 = 
vÆue
[
cur
].len;

716 
p
 = 
vÆue
[
cur
].
d©a
;

718 i‡(
Àn
 =1 && 
p
[0] == '=') {

720 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

721  
NGX_CONF_ERROR
;

724 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

725 (
uöçå_t
));

726 i‡(
code
 =
NULL
) {

727  
NGX_CONF_ERROR
;

730 *
code
 = 
ngx_hâp_s¸ùt_equÆ_code
;

732  
NGX_CONF_OK
;

735 i‡(
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '=') {

737 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

738  
NGX_CONF_ERROR
;

741 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

742 (
uöçå_t
));

743 i‡(
code
 =
NULL
) {

744  
NGX_CONF_ERROR
;

747 *
code
 = 
ngx_hâp_s¸ùt_nŸ_equÆ_code
;

748  
NGX_CONF_OK
;

751 i‡((
Àn
 =1 && 
p
[0] == '~')

752 || (
Àn
 =2 && 
p
[0] == '~' &&Ö[1] == '*')

753 || (
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '~')

754 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '~' &&Ö[2] == '*'))

756 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

757 (
ngx_hâp_s¸ùt_ªgex_code_t
));

758 i‡(
ªgex
 =
NULL
) {

759  
NGX_CONF_ERROR
;

762 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

764 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

766 
rc
.
∑âîn
 = 
vÆue
[
œ°
];

767 
rc
.
›ti⁄s
 = (
p
[
Àn
 - 1] ='*'Ë? 
NGX_REGEX_CASELESS
 : 0;

768 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

769 
rc
.
îr
.
d©a
 = 
îr°r
;

771 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

772 i‡(
ªgex
->ªgex =
NULL
) {

773  
NGX_CONF_ERROR
;

776 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

777 
ªgex
->
√xt
 = (
ngx_hâp_s¸ùt_ªgex_code_t
);

778 
ªgex
->
ã°
 = 1;

779 i‡(
p
[0] == '!') {

780 
ªgex
->
√g©ive_ã°
 = 1;

782 
ªgex
->
«me
 = 
vÆue
[
œ°
];

784  
NGX_CONF_OK
;

787 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

788 "u√x≥˘ed \"%V\" i¿c⁄dôi⁄", &
vÆue
[
cur
]);

789  
NGX_CONF_ERROR
;

791 } i‡((
Àn
 =2 && 
p
[0] == '-')

792 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '-'))

794 i‡(
cur
 + 1 !
œ°
) {

795 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

796 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

797  
NGX_CONF_ERROR
;

800 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

801 
vÆue
[
œ°
].
Àn
++;

803 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

804  
NGX_CONF_ERROR
;

807 
f›
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

808 (
ngx_hâp_s¸ùt_fûe_code_t
));

809 i‡(
f›
 =
NULL
) {

810  
NGX_CONF_ERROR
;

813 
f›
->
code
 = 
ngx_hâp_s¸ùt_fûe_code
;

815 i‡(
p
[1] == 'f') {

816 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_∂aö
;

817  
NGX_CONF_OK
;

820 i‡(
p
[1] == 'd') {

821 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_dú
;

822  
NGX_CONF_OK
;

825 i‡(
p
[1] == 'e') {

826 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exi°s
;

827  
NGX_CONF_OK
;

830 i‡(
p
[1] == 'x') {

831 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exec
;

832  
NGX_CONF_OK
;

835 i‡(
p
[0] == '!') {

836 i‡(
p
[2] == 'f') {

837 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
;

838  
NGX_CONF_OK
;

841 i‡(
p
[2] == 'd') {

842 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_dú
;

843  
NGX_CONF_OK
;

846 i‡(
p
[2] == 'e') {

847 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
;

848  
NGX_CONF_OK
;

851 i‡(
p
[2] == 'x') {

852 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exec
;

853  
NGX_CONF_OK
;

857 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

858 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

859  
NGX_CONF_ERROR
;

862 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

863 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

865  
NGX_CONF_ERROR
;

866 
	}
}

870 
	$ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

871 
ngx_°r_t
 *
vÆue
)

873 
ngx_öt_t
 
ödex
;

874 
ngx_hâp_s¸ùt_v¨_code_t
 *
v¨_code
;

876 
vÆue
->
Àn
--;

877 
vÆue
->
d©a
++;

879 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

881 i‡(
ödex
 =
NGX_ERROR
) {

882  
NGX_CONF_ERROR
;

885 
v¨_code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

886 (
ngx_hâp_s¸ùt_v¨_code_t
));

887 i‡(
v¨_code
 =
NULL
) {

888  
NGX_CONF_ERROR
;

891 
v¨_code
->
code
 = 
ngx_hâp_s¸ùt_v¨_code
;

892 
v¨_code
->
ödex
 = index;

894  
NGX_CONF_OK
;

895 
	}
}

899 
	$ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

901 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

903 
ngx_öt_t
 
ödex
;

904 
ngx_°r_t
 *
vÆue
;

905 
ngx_hâp_v¨übÀ_t
 *
v
;

906 
ngx_hâp_s¸ùt_v¨_code_t
 *
vcode
;

907 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
vhcode
;

909 
vÆue
 = 
cf
->
¨gs
->
ñts
;

911 i‡(
vÆue
[1].
d©a
[0] != '$') {

912 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

913 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

914  
NGX_CONF_ERROR
;

917 
vÆue
[1].
Àn
--;

918 
vÆue
[1].
d©a
++;

920 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

921 i‡(
v
 =
NULL
) {

922  
NGX_CONF_ERROR
;

925 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

926 i‡(
ödex
 =
NGX_ERROR
) {

927  
NGX_CONF_ERROR
;

930 i‡(
v
->
gë_h™dÀr
 =
NULL


931 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "http_", 5) != 0

932 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "sent_http_", 10) != 0

933 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "upstream_http_", 14) != 0)

935 
v
->
gë_h™dÀr
 = 
ngx_hâp_ªwrôe_v¨
;

936 
v
->
d©a
 = 
ödex
;

939 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[2]Ë!
NGX_CONF_OK
) {

940  
NGX_CONF_ERROR
;

943 i‡(
v
->
£t_h™dÀr
) {

944 
vhcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

945 (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
));

946 i‡(
vhcode
 =
NULL
) {

947  
NGX_CONF_ERROR
;

950 
vhcode
->
code
 = 
ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
;

951 
vhcode
->
h™dÀr
 = 
v
->
£t_h™dÀr
;

952 
vhcode
->
d©a
 = 
v
->data;

954  
NGX_CONF_OK
;

957 
vcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

958 (
ngx_hâp_s¸ùt_v¨_code_t
));

959 i‡(
vcode
 =
NULL
) {

960  
NGX_CONF_ERROR
;

963 
vcode
->
code
 = 
ngx_hâp_s¸ùt_£t_v¨_code
;

964 
vcode
->
ödex
 = (
uöçå_t
) index;

966  
NGX_CONF_OK
;

967 
	}
}

971 
	$ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

972 
ngx_°r_t
 *
vÆue
)

974 
ngx_öt_t
 
n
;

975 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

976 
ngx_hâp_s¸ùt_vÆue_code_t
 *
vÆ
;

977 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
com∂ex
;

979 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
vÆue
);

981 i‡(
n
 == 0) {

982 
vÆ
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

983 (
ngx_hâp_s¸ùt_vÆue_code_t
));

984 i‡(
vÆ
 =
NULL
) {

985  
NGX_CONF_ERROR
;

988 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

990 i‡(
n
 =
NGX_ERROR
) {

991 
n
 = 0;

994 
vÆ
->
code
 = 
ngx_hâp_s¸ùt_vÆue_code
;

995 
vÆ
->
vÆue
 = (
uöçå_t
Ë
n
;

996 
vÆ
->
ãxt_Àn
 = (
uöçå_t
Ë
vÆue
->
Àn
;

997 
vÆ
->
ãxt_d©a
 = (
uöçå_t
Ë
vÆue
->
d©a
;

999  
NGX_CONF_OK
;

1002 
com∂ex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

1003 (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
));

1004 i‡(
com∂ex
 =
NULL
) {

1005  
NGX_CONF_ERROR
;

1008 
com∂ex
->
code
 = 
ngx_hâp_s¸ùt_com∂ex_vÆue_code
;

1009 
com∂ex
->
Àngths
 = 
NULL
;

1011 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1013 
sc
.
cf
 = cf;

1014 
sc
.
sour˚
 = 
vÆue
;

1015 
sc
.
Àngths
 = &
com∂ex
->lengths;

1016 
sc
.
vÆues
 = &
lcf
->
codes
;

1017 
sc
.
v¨übÀs
 = 
n
;

1018 
sc
.
com∂ëe_Àngths
 = 1;

1020 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1021  
NGX_CONF_ERROR
;

1024  
NGX_CONF_OK
;

1025 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_scgi_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

17 
ngx_¨øy_t
 *
	mÊushes
;

18 
ngx_¨øy_t
 *
	m∑øms_Àn
;

19 
ngx_¨øy_t
 *
	m∑øms
;

20 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_hash_t
 
	mhódîs_hash
;

23 
ngx_uöt_t
 
	mhódî_∑øms
;

25 
ngx_¨øy_t
 *
	mscgi_Àngths
;

26 
ngx_¨øy_t
 *
	mscgi_vÆues
;

28 #i‡(
NGX_HTTP_CACHE
)

29 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

31 } 
	tngx_hâp_scgi_loc_c⁄f_t
;

34 
ngx_öt_t
 
ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
);

36 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

38 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

40 
ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

41 
ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 *
ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

45 *
chûd
);

46 
ngx_öt_t
 
ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_scgi_loc_c⁄f_à*
¥ev
);

49 *
ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

50 *
ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

53 #i‡(
NGX_HTTP_CACHE
)

54 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

55 *
ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

62 
ngx_c⁄f_bômask_t
 
	gngx_hâp_scgi_√xt_up°ªam_masks
[] = {

63 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

64 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

65 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

66 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

67 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

68 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

69 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

70 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

71 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

72 { 
ngx_nuŒ_°rög
, 0 }

76 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
;

79 
ngx_comm™d_t
 
	gngx_hâp_scgi_comm™ds
[] = {

81 { 
ngx_°rög
("scgi_pass"),

82 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

83 
ngx_hâp_scgi_∑ss
,

84 
NGX_HTTP_LOC_CONF_OFFSET
,

86 
NULL
 },

88 { 
ngx_°rög
("scgi_store"),

89 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_hâp_scgi_°‹e
,

91 
NGX_HTTP_LOC_CONF_OFFSET
,

93 
NULL
 },

95 { 
ngx_°rög
("scgi_store_access"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

97 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

98 
NGX_HTTP_LOC_CONF_OFFSET
,

99 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

100 
NULL
 },

102 { 
ngx_°rög
("scgi_buffering"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

104 
ngx_c⁄f_£t_Êag_¶Ÿ
,

105 
NGX_HTTP_LOC_CONF_OFFSET
,

106 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

107 
NULL
 },

109 { 
ngx_°rög
("scgi_ignore_client_abort"),

110 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

111 
ngx_c⁄f_£t_Êag_¶Ÿ
,

112 
NGX_HTTP_LOC_CONF_OFFSET
,

113 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

114 
NULL
 },

116 { 
ngx_°rög
("scgi_bind"),

117 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

118 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

119 
NGX_HTTP_LOC_CONF_OFFSET
,

120 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

121 
NULL
 },

123 { 
ngx_°rög
("scgi_connect_timeout"),

124 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

125 
ngx_c⁄f_£t_m£c_¶Ÿ
,

126 
NGX_HTTP_LOC_CONF_OFFSET
,

127 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

128 
NULL
 },

130 { 
ngx_°rög
("scgi_send_timeout"),

131 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

132 
ngx_c⁄f_£t_m£c_¶Ÿ
,

133 
NGX_HTTP_LOC_CONF_OFFSET
,

134 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

135 
NULL
 },

137 { 
ngx_°rög
("scgi_buffer_size"),

138 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

139 
ngx_c⁄f_£t_size_¶Ÿ
,

140 
NGX_HTTP_LOC_CONF_OFFSET
,

141 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

142 
NULL
 },

144 { 
ngx_°rög
("scgi_pass_request_headers"),

145 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

146 
ngx_c⁄f_£t_Êag_¶Ÿ
,

147 
NGX_HTTP_LOC_CONF_OFFSET
,

148 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

149 
NULL
 },

151 { 
ngx_°rög
("scgi_pass_request_body"),

152 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

153 
ngx_c⁄f_£t_Êag_¶Ÿ
,

154 
NGX_HTTP_LOC_CONF_OFFSET
,

155 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

156 
NULL
 },

158 { 
ngx_°rög
("scgi_intercept_errors"),

159 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

160 
ngx_c⁄f_£t_Êag_¶Ÿ
,

161 
NGX_HTTP_LOC_CONF_OFFSET
,

162 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

163 
NULL
 },

165 { 
ngx_°rög
("scgi_read_timeout"),

166 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

167 
ngx_c⁄f_£t_m£c_¶Ÿ
,

168 
NGX_HTTP_LOC_CONF_OFFSET
,

169 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

170 
NULL
 },

172 { 
ngx_°rög
("scgi_buffers"),

173 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

174 
ngx_c⁄f_£t_bufs_¶Ÿ
,

175 
NGX_HTTP_LOC_CONF_OFFSET
,

176 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

177 
NULL
 },

179 { 
ngx_°rög
("scgi_busy_buffers_size"),

180 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

181 
ngx_c⁄f_£t_size_¶Ÿ
,

182 
NGX_HTTP_LOC_CONF_OFFSET
,

183 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

184 
NULL
 },

186 #i‡(
NGX_HTTP_CACHE
)

188 { 
ngx_°rög
("scgi_cache"),

189 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

190 
ngx_hâp_scgi_ˇche
,

191 
NGX_HTTP_LOC_CONF_OFFSET
,

193 
NULL
 },

195 { 
ngx_°rög
("scgi_cache_key"),

196 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

197 
ngx_hâp_scgi_ˇche_key
,

198 
NGX_HTTP_LOC_CONF_OFFSET
,

200 
NULL
 },

202 { 
ngx_°rög
("scgi_cache_path"),

203 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

204 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

207 &
ngx_hâp_scgi_moduÀ
 },

209 { 
ngx_°rög
("scgi_cache_bypass"),

210 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

211 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

212 
NGX_HTTP_LOC_CONF_OFFSET
,

213 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

214 
NULL
 },

216 { 
ngx_°rög
("scgi_no_cache"),

217 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

218 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

219 
NGX_HTTP_LOC_CONF_OFFSET
,

220 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

221 
NULL
 },

223 { 
ngx_°rög
("scgi_cache_valid"),

224 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

225 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

226 
NGX_HTTP_LOC_CONF_OFFSET
,

227 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

228 
NULL
 },

230 { 
ngx_°rög
("scgi_cache_min_uses"),

231 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

232 
ngx_c⁄f_£t_num_¶Ÿ
,

233 
NGX_HTTP_LOC_CONF_OFFSET
,

234 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

235 
NULL
 },

237 { 
ngx_°rög
("scgi_cache_use_stale"),

238 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

239 
ngx_c⁄f_£t_bômask_¶Ÿ
,

240 
NGX_HTTP_LOC_CONF_OFFSET
,

241 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

242 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

244 { 
ngx_°rög
("scgi_cache_methods"),

245 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

246 
ngx_c⁄f_£t_bômask_¶Ÿ
,

247 
NGX_HTTP_LOC_CONF_OFFSET
,

248 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

249 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

251 { 
ngx_°rög
("scgi_cache_lock"),

252 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

253 
ngx_c⁄f_£t_Êag_¶Ÿ
,

254 
NGX_HTTP_LOC_CONF_OFFSET
,

255 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

256 
NULL
 },

258 { 
ngx_°rög
("scgi_cache_lock_timeout"),

259 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

260 
ngx_c⁄f_£t_m£c_¶Ÿ
,

261 
NGX_HTTP_LOC_CONF_OFFSET
,

262 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

263 
NULL
 },

265 { 
ngx_°rög
("scgi_cache_revalidate"),

266 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

267 
ngx_c⁄f_£t_Êag_¶Ÿ
,

268 
NGX_HTTP_LOC_CONF_OFFSET
,

269 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

270 
NULL
 },

274 { 
ngx_°rög
("scgi_temp_path"),

275 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

276 
ngx_c⁄f_£t_∑th_¶Ÿ
,

277 
NGX_HTTP_LOC_CONF_OFFSET
,

278 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

279 
NULL
 },

281 { 
ngx_°rög
("scgi_max_temp_file_size"),

282 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

283 
ngx_c⁄f_£t_size_¶Ÿ
,

284 
NGX_HTTP_LOC_CONF_OFFSET
,

285 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

286 
NULL
 },

288 { 
ngx_°rög
("scgi_temp_file_write_size"),

289 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

290 
ngx_c⁄f_£t_size_¶Ÿ
,

291 
NGX_HTTP_LOC_CONF_OFFSET
,

292 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

293 
NULL
 },

295 { 
ngx_°rög
("scgi_next_upstream"),

296 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

297 
ngx_c⁄f_£t_bômask_¶Ÿ
,

298 
NGX_HTTP_LOC_CONF_OFFSET
,

299 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

300 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

302 { 
ngx_°rög
("scgi_param"),

303 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

304 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

305 
NGX_HTTP_LOC_CONF_OFFSET
,

306 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
∑øms_sour˚
),

307 
NULL
 },

309 { 
ngx_°rög
("scgi_pass_header"),

310 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

311 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

312 
NGX_HTTP_LOC_CONF_OFFSET
,

313 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

314 
NULL
 },

316 { 
ngx_°rög
("scgi_hide_header"),

317 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

318 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

319 
NGX_HTTP_LOC_CONF_OFFSET
,

320 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

321 
NULL
 },

323 { 
ngx_°rög
("scgi_ignore_headers"),

324 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

325 
ngx_c⁄f_£t_bômask_¶Ÿ
,

326 
NGX_HTTP_LOC_CONF_OFFSET
,

327 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

328 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

330 
ngx_nuŒ_comm™d


334 
ngx_hâp_moduÀ_t
 
	gngx_hâp_scgi_moduÀ_˘x
 = {

335 
NULL
,

336 
NULL
,

338 
NULL
,

339 
NULL
,

341 
NULL
,

342 
NULL
,

344 
ngx_hâp_scgi_¸óã_loc_c⁄f
,

345 
ngx_hâp_scgi_mîge_loc_c⁄f


349 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
 = {

350 
NGX_MODULE_V1
,

351 &
ngx_hâp_scgi_moduÀ_˘x
,

352 
ngx_hâp_scgi_comm™ds
,

353 
NGX_HTTP_MODULE
,

354 
NULL
,

355 
NULL
,

356 
NULL
,

357 
NULL
,

358 
NULL
,

359 
NULL
,

360 
NULL
,

361 
NGX_MODULE_V1_PADDING


365 
ngx_°r_t
 
	gngx_hâp_scgi_hide_hódîs
[] = {

366 
ngx_°rög
("Status"),

367 
ngx_°rög
("X-Accel-Expires"),

368 
ngx_°rög
("X-Accel-Redirect"),

369 
ngx_°rög
("X-Accel-Limit-Rate"),

370 
ngx_°rög
("X-Accel-Buffering"),

371 
ngx_°rög
("X-Accel-Charset"),

372 
ngx_nuŒ_°rög


376 #i‡(
NGX_HTTP_CACHE
)

378 
ngx_keyvÆ_t
 
	gngx_hâp_scgi_ˇche_hódîs
[] = {

379 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

380 
ngx_°rög
("$upstream_cache_last_modified") },

381 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

382 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

383 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

384 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

385 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

386 { 
ngx_nuŒ_°rög
,Çgx_null_string }

392 
ngx_∑th_öô_t
 
	gngx_hâp_scgi_ãmp_∑th
 = {

393 
ngx_°rög
(
NGX_HTTP_SCGI_TEMP_PATH
), { 1, 2, 0 }

397 
ngx_öt_t


398 
	$ngx_hâp_scgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

400 
ngx_öt_t
 
rc
;

401 
ngx_hâp_°©us_t
 *
°©us
;

402 
ngx_hâp_up°ªam_t
 *
u
;

403 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

405 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

406  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

409 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

410 i‡(
°©us
 =
NULL
) {

411  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

414 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_scgi_moduÀ
);

416 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

418 i‡(
scf
->
scgi_Àngths
) {

419 i‡(
	`ngx_hâp_scgi_evÆ
(
r
, 
scf
Ë!
NGX_OK
) {

420  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

424 
u
 = 
r
->
up°ªam
;

426 
	`ngx_°r_£t
(&
u
->
schema
, "scgi://");

427 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_scgi_moduÀ
;

429 
u
->
c⁄f
 = &
scf
->
up°ªam
;

431 #i‡(
NGX_HTTP_CACHE
)

432 
u
->
¸óã_key
 = 
ngx_hâp_scgi_¸óã_key
;

434 
u
->
¸óã_ªque°
 = 
ngx_hâp_scgi_¸óã_ªque°
;

435 
u
->
ªöô_ªque°
 = 
ngx_hâp_scgi_ªöô_ªque°
;

436 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

437 
u
->
ab‹t_ªque°
 = 
ngx_hâp_scgi_ab‹t_ªque°
;

438 
u
->
föÆize_ªque°
 = 
ngx_hâp_scgi_föÆize_ªque°
;

439 
r
->
°©e
 = 0;

441 
u
->
buf„rög
 = 
scf
->
up°ªam
.buffering;

443 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

444 i‡(
u
->
pùe
 =
NULL
) {

445  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

448 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

449 
u
->
pùe
->
öput_˘x
 = 
r
;

451 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

453 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

454  
rc
;

457  
NGX_DONE
;

458 
	}
}

461 
ngx_öt_t


462 
	$ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_scgi_loc_c⁄f_t
 * 
scf
)

464 
ngx_uæ_t
 
uæ
;

465 
ngx_hâp_up°ªam_t
 *
u
;

467 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

469 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
scf
->
scgi_Àngths
->
ñts
, 0,

470 
scf
->
scgi_vÆues
->
ñts
)

471 =
NULL
)

473  
NGX_ERROR
;

476 
uæ
.
no_ªsﬁve
 = 1;

478 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

479 i‡(
uæ
.
îr
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

481 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

484  
NGX_ERROR
;

487 
u
 = 
r
->
up°ªam
;

489 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

490 i‡(
u
->
ªsﬁved
 =
NULL
) {

491  
NGX_ERROR
;

494 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

495 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

496 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

497 
u
->
ªsﬁved
->
«ddrs
 = 1;

498 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

501 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

502 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

503 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

506  
NGX_OK
;

507 
	}
}

510 #i‡(
NGX_HTTP_CACHE
)

512 
ngx_öt_t


513 
	$ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

515 
ngx_°r_t
 *
key
;

516 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

518 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

519 i‡(
key
 =
NULL
) {

520  
NGX_ERROR
;

523 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

525 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
scf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

526  
NGX_ERROR
;

529  
NGX_OK
;

530 
	}
}

535 
ngx_öt_t


536 
	$ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

538 
off_t
 
c⁄ã¡_Àngth_n
;

539 
u_ch¨
 
ch
, *
key
, *
vÆ
, *
lowˇ£_key
;

540 
size_t
 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
Æloˇãd
;

541 
ngx_buf_t
 *
b
;

542 
ngx_°r_t
 
c⁄ã¡_Àngth
;

543 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

544 
ngx_chaö_t
 *
˛
, *
body
;

545 
ngx_li°_∑π_t
 *
∑π
;

546 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

547 
ngx_hâp_s¸ùt_code_±
 
code
;

548 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

549 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

550 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

551 
u_ch¨
 
buf„r
[
NGX_OFF_T_LEN
];

553 
c⁄ã¡_Àngth_n
 = 0;

554 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

556 
body
) {

557 
c⁄ã¡_Àngth_n
 +
	`ngx_buf_size
(
body
->
buf
);

558 
body
 = body->
√xt
;

561 
c⁄ã¡_Àngth
.
d©a
 = 
buf„r
;

562 
c⁄ã¡_Àngth
.
Àn
 = 
	`ngx_•rötf
(
buf„r
, "%O", 
c⁄ã¡_Àngth_n
) - buffer;

564 
Àn
 = ("CONTENT_LENGTH"Ë+ 
c⁄ã¡_Àngth
.len + 1;

566 
hódî_∑øms
 = 0;

567 
ign‹ed
 = 
NULL
;

569 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

571 i‡(
scf
->
∑øms_Àn
) {

572 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

574 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
scf
->
Êushes
);

575 
À
.
Êushed
 = 1;

577 
À
.
ù
 = 
scf
->
∑øms_Àn
->
ñts
;

578 
À
.
ªque°
 = 
r
;

580 *(
uöçå_t
 *Ë
À
.
ù
) {

582 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

583 
key_Àn
 = 
	`lcode
(&
À
);

585 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

586 
skù_em±y
 = 
	`lcode
(&
À
);

588 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

589 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

591 
À
.
ù
 +(
uöçå_t
);

593 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

597 
Àn
 +
key_Àn
 + 
vÆ_Àn
 + 1;

601 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

603 
Æloˇãd
 = 0;

604 
lowˇ£_key
 = 
NULL
;

606 i‡(
scf
->
hódî_∑øms
) {

607 
n
 = 0;

608 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

610 
∑π
) {

611 
n
 +
∑π
->
√…s
;

612 
∑π
 =Ö¨t->
√xt
;

615 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

616 i‡(
ign‹ed
 =
NULL
) {

617  
NGX_ERROR
;

621 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

622 
hódî
 = 
∑π
->
ñts
;

624 
i
 = 0; ; i++) {

626 i‡(
i
 >
∑π
->
√…s
) {

627 i‡(
∑π
->
√xt
 =
NULL
) {

631 
∑π
 =Ö¨t->
√xt
;

632 
hódî
 = 
∑π
->
ñts
;

633 
i
 = 0;

636 i‡(
scf
->
hódî_∑øms
) {

637 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

638 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

639 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

640 i‡(
lowˇ£_key
 =
NULL
) {

641  
NGX_ERROR
;

645 
hash
 = 0;

647 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

648 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

650 i‡(
ch
 >= 'A' && ch <= 'Z') {

651 
ch
 |= 0x20;

653 } i‡(
ch
 == '-') {

654 
ch
 = '_';

657 
hash
 = 
	`ngx_hash
(hash, 
ch
);

658 
lowˇ£_key
[
n
] = 
ch
;

661 i‡(
	`ngx_hash_föd
(&
scf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

662 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

667 
Àn
 +("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len + 1

668 + 
hódî
[
i
].
vÆue
.
Àn
 + 1;

674 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
 + 1 + 
Àn
 + 1);

675 i‡(
b
 =
NULL
) {

676  
NGX_ERROR
;

679 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

680 i‡(
˛
 =
NULL
) {

681  
NGX_ERROR
;

684 
˛
->
buf
 = 
b
;

686 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%ui:CONTENT_LENGTH%Z%V%Z",

687 
Àn
, &
c⁄ã¡_Àngth
);

689 i‡(
scf
->
∑øms_Àn
) {

690 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

692 
e
.
ù
 = 
scf
->
∑øms
->
ñts
;

693 
e
.
pos
 = 
b
->
œ°
;

694 
e
.
ªque°
 = 
r
;

695 
e
.
Êushed
 = 1;

697 
À
.
ù
 = 
scf
->
∑øms_Àn
->
ñts
;

699 *(
uöçå_t
 *Ë
À
.
ù
) {

701 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

702 
	`lcode
(&
À
);

704 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

705 
skù_em±y
 = 
	`lcode
(&
À
);

707 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

708 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

710 
À
.
ù
 +(
uöçå_t
);

712 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

713 
e
.
skù
 = 1;

715 *(
uöçå_t
 *Ë
e
.
ù
) {

716 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

717 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

719 
e
.
ù
 +(
uöçå_t
);

721 
e
.
skù
 = 0;

726 #i‡(
NGX_DEBUG
)

727 
key
 = 
e
.
pos
;

729 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

730 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

732 #i‡(
NGX_DEBUG
)

733 
vÆ
 = 
e
.
pos
;

735 *(
uöçå_t
 *Ë
e
.
ù
) {

736 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

737 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

739 *
e
.
pos
++ = '\0';

740 
e
.
ù
 +(
uöçå_t
);

742 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

743 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

746 
b
->
œ°
 = 
e
.
pos
;

749 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

751 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

752 
hódî
 = 
∑π
->
ñts
;

754 
i
 = 0; ; i++) {

756 i‡(
i
 >
∑π
->
√…s
) {

757 i‡(
∑π
->
√xt
 =
NULL
) {

761 
∑π
 =Ö¨t->
√xt
;

762 
hódî
 = 
∑π
->
ñts
;

763 
i
 = 0;

766 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

767 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

768 
√xt
;

772 
key
 = 
b
->
œ°
;

773 
b
->
œ°
 = 
	`ngx_˝ymem
(
key
, "HTTP_", ("HTTP_") - 1);

775 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

776 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

778 i‡(
ch
 >= 'a' && ch <= 'z') {

779 
ch
 &= ~0x20;

781 } i‡(
ch
 == '-') {

782 
ch
 = '_';

785 *
b
->
œ°
++ = 
ch
;

788 *
b
->
œ°
++ = (
u_ch¨
) 0;

790 
vÆ
 = 
b
->
œ°
;

791 
b
->
œ°
 = 
	`ngx_c›y
(
vÆ
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

792 *
b
->
œ°
++ = (
u_ch¨
) 0;

794 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

795 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

797 
√xt
:

803 *
b
->
œ°
++ = (
u_ch¨
) ',';

805 i‡(
scf
->
up°ªam
.
∑ss_ªque°_body
) {

806 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

807 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

809 
body
) {

810 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

811 i‡(
b
 =
NULL
) {

812  
NGX_ERROR
;

815 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

817 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

818 i‡(
˛
->
√xt
 =
NULL
) {

819  
NGX_ERROR
;

822 
˛
 = cl->
√xt
;

823 
˛
->
buf
 = 
b
;

825 
body
 = body->
√xt
;

829 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

832 
˛
->
√xt
 = 
NULL
;

834  
NGX_OK
;

835 
	}
}

838 
ngx_öt_t


839 
	$ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

841 
ngx_hâp_°©us_t
 *
°©us
;

843 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

845 i‡(
°©us
 =
NULL
) {

846  
NGX_OK
;

849 
°©us
->
code
 = 0;

850 
°©us
->
cou¡
 = 0;

851 
°©us
->
°¨t
 = 
NULL
;

852 
°©us
->
íd
 = 
NULL
;

854 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

855 
r
->
°©e
 = 0;

857  
NGX_OK
;

858 
	}
}

861 
ngx_öt_t


862 
	$ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

864 
size_t
 
Àn
;

865 
ngx_öt_t
 
rc
;

866 
ngx_hâp_°©us_t
 *
°©us
;

867 
ngx_hâp_up°ªam_t
 *
u
;

869 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

871 i‡(
°©us
 =
NULL
) {

872  
NGX_ERROR
;

875 
u
 = 
r
->
up°ªam
;

877 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

879 i‡(
rc
 =
NGX_AGAIN
) {

880  
rc
;

883 i‡(
rc
 =
NGX_ERROR
) {

884 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

885  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

888 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

889 
u
->
°©e
->
°©us
 = sètus->
code
;

892 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

894 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

895 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

897 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

898 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

899  
NGX_ERROR
;

902 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

904 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

906 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

908 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

910  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

911 
	}
}

914 
ngx_öt_t


915 
	$ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

917 
ngx_°r_t
 *
°©us_löe
;

918 
ngx_öt_t
 
rc
, 
°©us
;

919 
ngx_èbÀ_ñt_t
 *
h
;

920 
ngx_hâp_up°ªam_t
 *
u
;

921 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

922 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

924 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

928 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

930 i‡(
rc
 =
NGX_OK
) {

934 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

935 i‡(
h
 =
NULL
) {

936  
NGX_ERROR
;

939 
h
->
hash
 = 
r
->
hódî_hash
;

941 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

942 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

944 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

945 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

946 + 
h
->
key
.
Àn
);

947 i‡(
h
->
key
.
d©a
 =
NULL
) {

948  
NGX_ERROR
;

951 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

952 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

954 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

955 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

956 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

957 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

959 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

960 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

963 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

966 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

967 
h
->
lowˇ£_key
, h->
key
.
Àn
);

969 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

970  
NGX_ERROR
;

973 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

974 "hâ∞scgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

979 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

983 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

986 
u
 = 
r
->
up°ªam
;

988 i‡(
u
->
hódîs_ö
.
°©us_n
) {

989 
d⁄e
;

992 i‡(
u
->
hódîs_ö
.
°©us
) {

993 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

995 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

996 i‡(
°©us
 =
NGX_ERROR
) {

997 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

999 
°©us_löe
);

1000  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1003 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1004 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1006 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1007 
u
->
hódîs_ö
.
°©us_n
 = 302;

1008 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1012 
u
->
hódîs_ö
.
°©us_n
 = 200;

1013 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1016 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1017 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1020 
d⁄e
:

1022 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1023 && 
r
->
hódîs_ö
.
upgøde
)

1025 
u
->
upgøde
 = 1;

1028  
NGX_OK
;

1031 i‡(
rc
 =
NGX_AGAIN
) {

1032  
NGX_AGAIN
;

1037 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1040  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1042 
	}
}

1046 
	$ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1048 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1052 
	}
}

1056 
	$ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1058 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1062 
	}
}

1066 
	$ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1068 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
;

1070 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_loc_c⁄f_t
));

1071 i‡(
c⁄f
 =
NULL
) {

1072  
NULL
;

1075 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1076 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1077 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1078 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1080 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1082 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1083 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1084 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1086 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1087 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1089 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1090 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1091 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1093 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1094 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1096 #i‡(
NGX_HTTP_CACHE
)

1097 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1098 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1099 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1100 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1101 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1102 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1103 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1104 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

1107 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1108 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1110 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1113 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1115 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1117 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "scgi");

1119  
c⁄f
;

1120 
	}
}

1124 
	$ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1126 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1127 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1129 
size_t
 
size
;

1130 
ngx_hash_öô_t
 
hash
;

1131 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1133 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1134 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1136 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1137 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1138 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1142 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1143 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1145 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1146 
¥ev
->
up°ªam
.
buf„rög
, 1);

1148 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1149 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1151 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1152 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1154 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1155 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1157 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1158 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1160 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1161 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1163 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1164 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1166 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1167 
¥ev
->
up°ªam
.
buf„r_size
,

1168 (
size_t
Ë
ngx_∑gesize
);

1171 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1172 8, 
ngx_∑gesize
);

1174 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1175 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1177  
NGX_CONF_ERROR
;

1181 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1182 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1183 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1187 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1188 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1189 
NGX_CONF_UNSET_SIZE
);

1191 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1192 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1194 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1195 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1198 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1199 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1204  
NGX_CONF_ERROR
;

1207 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1208 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1210 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1214  
NGX_CONF_ERROR
;

1218 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1219 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1220 
NGX_CONF_UNSET_SIZE
);

1222 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1223 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1225 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1226 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1229 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1230 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1235  
NGX_CONF_ERROR
;

1239 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1240 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1241 
NGX_CONF_UNSET_SIZE
);

1243 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1244 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1246 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1247 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1250 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1251 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1252 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1258  
NGX_CONF_ERROR
;

1262 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1263 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1264 
NGX_CONF_BITMASK_SET
);

1267 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1268 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1269 (
NGX_CONF_BITMASK_SET


1270 |
NGX_HTTP_UPSTREAM_FT_ERROR


1271 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1273 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1274 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1275 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1278 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1279 
¥ev
->
up°ªam
.
ãmp_∑th
,

1280 &
ngx_hâp_scgi_ãmp_∑th
)

1281 !
NGX_OK
)

1283  
NGX_CONF_ERROR
;

1286 #i‡(
NGX_HTTP_CACHE
)

1288 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1289 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1291 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1292 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1294 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1296 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1298 &
shm_z⁄e
->
shm
.
«me
);

1300  
NGX_CONF_ERROR
;

1303 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1304 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1306 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1307 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1308 (
NGX_CONF_BITMASK_SET


1309 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1311 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1312 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1313 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1316 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1317 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1320 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1321 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1324 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1326 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1327 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1329 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1330 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1332 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1333 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1335 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1336 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1339 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1340 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1342 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1343 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1345 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

1346 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

1350 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1351 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1352 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1353 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1355 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1356 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1358 
hash
.
max_size
 = 512;

1359 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1360 
hash
.
«me
 = "scgi_hide_headers_hash";

1362 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1363 &
¥ev
->
up°ªam
, 
ngx_hâp_scgi_hide_hódîs
, &
hash
)

1364 !
NGX_OK
)

1366  
NGX_CONF_ERROR
;

1369 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1370 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1373 i‡(
c⁄f
->
scgi_Àngths
 =
NULL
) {

1374 
c⁄f
->
scgi_Àngths
 = 
¥ev
->scgi_lengths;

1375 
c⁄f
->
scgi_vÆues
 = 
¥ev
->scgi_values;

1378 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
scgi_Àngths
) {

1379 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1380 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1381 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1385 i‡(
	`ngx_hâp_scgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1386  
NGX_CONF_ERROR
;

1389  
NGX_CONF_OK
;

1390 
	}
}

1393 
ngx_öt_t


1394 
	$ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,

1395 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
)

1397 
u_ch¨
 *
p
;

1398 
size_t
 
size
;

1399 
uöçå_t
 *
code
;

1400 
ngx_uöt_t
 
i
, 
n§c
;

1401 
ngx_¨øy_t
 
hódîs_«mes
;

1402 #i‡(
NGX_HTTP_CACHE
)

1403 
ngx_¨øy_t
 
∑øms_mîged
;

1405 
ngx_hash_key_t
 *
hk
;

1406 
ngx_hash_öô_t
 
hash
;

1407 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

1408 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1409 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1411 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1412 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1414 i‡(
¥ev
->
hódîs_hash
.
buckës


1415 #i‡(
NGX_HTTP_CACHE
)

1416 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1417 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

1421 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1422 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1423 
c⁄f
->
∑øms
 = 
¥ev
->params;

1424 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1425 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1427  
NGX_OK
;

1431 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1432 #i‡(
NGX_HTTP_CACHE
)

1433 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1437 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1438  
NGX_OK
;

1441 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1442 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1443  
NGX_ERROR
;

1446 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1447 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1448  
NGX_ERROR
;

1451 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1452 !
NGX_OK
)

1454  
NGX_ERROR
;

1457 i‡(
c⁄f
->
∑øms_sour˚
) {

1458 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1459 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1462 
§c
 = 
NULL
;

1463 
n§c
 = 0;

1466 #i‡(
NGX_HTTP_CACHE
)

1468 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1469 
ngx_keyvÆ_t
 *
h
;

1470 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

1472 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1473 (
ngx_hâp_up°ªam_∑øm_t
))

1474 !
NGX_OK
)

1476  
NGX_ERROR
;

1479 
i
 = 0; i < 
n§c
; i++) {

1481 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1482 i‡(
s
 =
NULL
) {

1483  
NGX_ERROR
;

1486 *
s
 = 
§c
[
i
];

1489 
h
 = 
ngx_hâp_scgi_ˇche_hódîs
;

1491 
h
->
key
.
Àn
) {

1493 
§c
 = 
∑øms_mîged
.
ñts
;

1494 
n§c
 = 
∑øms_mîged
.
√…s
;

1496 
i
 = 0; i < 
n§c
; i++) {

1497 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1498 
√xt
;

1502 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1503 i‡(
s
 =
NULL
) {

1504  
NGX_ERROR
;

1507 
s
->
key
 = 
h
->key;

1508 
s
->
vÆue
 = 
h
->value;

1509 
s
->
skù_em±y
 = 1;

1511 
√xt
:

1513 
h
++;

1516 
§c
 = 
∑øms_mîged
.
ñts
;

1517 
n§c
 = 
∑øms_mîged
.
√…s
;

1522 
i
 = 0; i < 
n§c
; i++) {

1524 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1525 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1527 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1528 i‡(
hk
 =
NULL
) {

1529  
NGX_ERROR
;

1532 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1533 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1534 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1535 
hk
->
vÆue
 = (*) 1;

1537 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1542 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1543 (
ngx_hâp_s¸ùt_c›y_code_t
));

1544 i‡(
c›y
 =
NULL
) {

1545  
NGX_ERROR
;

1548 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1549 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1551 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1552 (
ngx_hâp_s¸ùt_c›y_code_t
));

1553 i‡(
c›y
 =
NULL
) {

1554  
NGX_ERROR
;

1557 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1558 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1561 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1562 + 
§c
[
i
].
key
.
Àn
 + 1 + (
uöçå_t
) - 1)

1563 & ~((
uöçå_t
) - 1);

1565 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1566 i‡(
c›y
 =
NULL
) {

1567  
NGX_ERROR
;

1570 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1571 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1573 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1574 (Ë
	`ngx_˝y°∫
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
 + 1);

1577 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1579 
sc
.
cf
 = cf;

1580 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1581 
sc
.
Êushes
 = &
c⁄f
->flushes;

1582 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1583 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1585 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1586  
NGX_ERROR
;

1589 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1590 i‡(
code
 =
NULL
) {

1591  
NGX_ERROR
;

1594 *
code
 = (
uöçå_t
Ë
NULL
;

1597 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1598 i‡(
code
 =
NULL
) {

1599  
NGX_ERROR
;

1602 *
code
 = (
uöçå_t
Ë
NULL
;

1605 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1606 i‡(
code
 =
NULL
) {

1607  
NGX_ERROR
;

1610 *
code
 = (
uöçå_t
Ë
NULL
;

1612 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1613 i‡(
code
 =
NULL
) {

1614  
NGX_ERROR
;

1617 *
code
 = (
uöçå_t
Ë
NULL
;

1619 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1621 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1622 
hash
.
key
 = 
ngx_hash_key_lc
;

1623 
hash
.
max_size
 = 512;

1624 
hash
.
buckë_size
 = 64;

1625 
hash
.
«me
 = "scgi_params_hash";

1626 
hash
.
poﬁ
 = 
cf
->pool;

1627 
hash
.
ãmp_poﬁ
 = 
NULL
;

1629  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1630 
	}
}

1634 
	$ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1636 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1638 
ngx_uæ_t
 
u
;

1639 
ngx_°r_t
 *
vÆue
, *
uæ
;

1640 
ngx_uöt_t
 
n
;

1641 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1642 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1644 i‡(
scf
->
up°ªam
.up°ªam || scf->
scgi_Àngths
) {

1648 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1649 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1651 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1653 
uæ
 = &
vÆue
[1];

1655 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1657 i‡(
n
) {

1659 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1661 
sc
.
cf
 = cf;

1662 
sc
.
sour˚
 = 
uæ
;

1663 
sc
.
Àngths
 = &
scf
->
scgi_Àngths
;

1664 
sc
.
vÆues
 = &
scf
->
scgi_vÆues
;

1665 
sc
.
v¨übÀs
 = 
n
;

1666 
sc
.
com∂ëe_Àngths
 = 1;

1667 
sc
.
com∂ëe_vÆues
 = 1;

1669 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1670  
NGX_CONF_ERROR
;

1673  
NGX_CONF_OK
;

1676 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1678 
u
.
uæ
 = 
vÆue
[1];

1679 
u
.
no_ªsﬁve
 = 1;

1681 
scf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1682 i‡(
scf
->
up°ªam
.up°ªam =
NULL
) {

1683  
NGX_CONF_ERROR
;

1686 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1687 
˛cf
->
auto_ªdúe˘
 = 1;

1690  
NGX_CONF_OK
;

1691 
	}
}

1695 
	$ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1697 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1699 
ngx_°r_t
 *
vÆue
;

1700 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1702 i‡(
scf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || scf->up°ªam.
°‹e_Àngths
) {

1706 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1708 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1709 
scf
->
up°ªam
.
°‹e
 = 0;

1710  
NGX_CONF_OK
;

1713 #i‡(
NGX_HTTP_CACHE
)

1715 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1716 && 
scf
->
up°ªam
.
ˇche
 !
NULL
)

1723 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1724 
scf
->
up°ªam
.
°‹e
 = 1;

1725  
NGX_CONF_OK
;

1729 
vÆue
[1].
Àn
++;

1731 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1733 
sc
.
cf
 = cf;

1734 
sc
.
sour˚
 = &
vÆue
[1];

1735 
sc
.
Àngths
 = &
scf
->
up°ªam
.
°‹e_Àngths
;

1736 
sc
.
vÆues
 = &
scf
->
up°ªam
.
°‹e_vÆues
;

1737 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1738 
sc
.
com∂ëe_Àngths
 = 1;

1739 
sc
.
com∂ëe_vÆues
 = 1;

1741 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1742  
NGX_CONF_ERROR
;

1745  
NGX_CONF_OK
;

1746 
	}
}

1749 #i‡(
NGX_HTTP_CACHE
)

1752 
	$ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1754 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1756 
ngx_°r_t
 *
vÆue
;

1758 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1760 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1764 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1765 
scf
->
up°ªam
.
ˇche
 = 
NULL
;

1766  
NGX_CONF_OK
;

1769 i‡(
scf
->
up°ªam
.
°‹e
 > 0 || scf->up°ªam.
°‹e_Àngths
) {

1773 
scf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1774 &
ngx_hâp_scgi_moduÀ
);

1775 i‡(
scf
->
up°ªam
.
ˇche
 =
NULL
) {

1776  
NGX_CONF_ERROR
;

1779  
NGX_CONF_OK
;

1780 
	}
}

1784 
	$ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1786 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1788 
ngx_°r_t
 *
vÆue
;

1789 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1791 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1793 i‡(
scf
->
ˇche_key
.
vÆue
.
d©a
) {

1797 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1799 
ccv
.
cf
 = cf;

1800 
ccv
.
vÆue
 = &value[1];

1801 
ccv
.
com∂ex_vÆue
 = &
scf
->
ˇche_key
;

1803 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1804  
NGX_CONF_ERROR
;

1807  
NGX_CONF_OK
;

1808 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_secure_link_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

15 
ngx_hâp_com∂ex_vÆue_t
 *
	mv¨übÀ
;

16 
ngx_hâp_com∂ex_vÆue_t
 *
	mmd5
;

17 
ngx_°r_t
 
	m£¸ë
;

18 } 
	tngx_hâp_£cuª_lök_c⁄f_t
;

22 
ngx_°r_t
 
	mexpúes
;

23 } 
	tngx_hâp_£cuª_lök_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

28 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 *
ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 
ngx_öt_t
 
ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

37 
ngx_comm™d_t
 
	gngx_hâp_£cuª_lök_comm™ds
[] = {

39 { 
ngx_°rög
("secure_link"),

40 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

41 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

42 
NGX_HTTP_LOC_CONF_OFFSET
,

43 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
v¨übÀ
),

44 
NULL
 },

46 { 
ngx_°rög
("secure_link_md5"),

47 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

48 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

49 
NGX_HTTP_LOC_CONF_OFFSET
,

50 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
md5
),

51 
NULL
 },

53 { 
ngx_°rög
("secure_link_secret"),

54 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_°r_¶Ÿ
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
£¸ë
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ_˘x
 = {

65 
ngx_hâp_£cuª_lök_add_v¨übÀs
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_£cuª_lök_¸óã_c⁄f
,

75 
ngx_hâp_£cuª_lök_mîge_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_£cuª_lök_moduÀ_˘x
,

82 
ngx_hâp_£cuª_lök_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_«me
 = 
ngx_°rög
("secure_link");

96 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_expúes_«me
 =

97 
ngx_°rög
("secure_link_expires");

100 
ngx_öt_t


101 
	$ngx_hâp_£cuª_lök_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

104 
u_ch¨
 *
p
, *
œ°
;

105 
ngx_°r_t
 
vÆ
, 
hash
;

106 
time_t
 
expúes
;

107 
ngx_md5_t
 
md5
;

108 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

109 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

110 
u_ch¨
 
hash_buf
[16], 
md5_buf
[16];

112 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

114 i‡(
c⁄f
->
£¸ë
.
d©a
) {

115  
	`ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
r
, 
c⁄f
, 
v
, 
d©a
);

118 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 || c⁄f->
md5
 == NULL) {

119 
nŸ_found
;

122 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
v¨übÀ
, &
vÆ
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 "£cuªÜök: \"%V\"", &
vÆ
);

129 
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

131 
p
 = 
	`ngx_°æchr
(
vÆ
.
d©a
, 
œ°
, ',');

132 
expúes
 = 0;

134 i‡(
p
) {

135 
vÆ
.
Àn
 = 
p
++ - vÆ.
d©a
;

137 
expúes
 = 
	`ngx_©Ÿm
(
p
, 
œ°
 -Ö);

138 i‡(
expúes
 <= 0) {

139 
nŸ_found
;

142 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_£cuª_lök_˘x_t
));

143 i‡(
˘x
 =
NULL
) {

144  
NGX_ERROR
;

147 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_£cuª_lök_moduÀ
);

149 
˘x
->
expúes
.
Àn
 = 
œ°
 - 
p
;

150 
˘x
->
expúes
.
d©a
 = 
p
;

153 i‡(
vÆ
.
Àn
 > 24) {

154 
nŸ_found
;

157 
hash
.
Àn
 = 16;

158 
hash
.
d©a
 = 
hash_buf
;

160 i‡(
	`ngx_decode_ba£64uæ
(&
hash
, &
vÆ
Ë!
NGX_OK
) {

161 
nŸ_found
;

164 i‡(
hash
.
Àn
 != 16) {

165 
nŸ_found
;

168 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
md5
, &
vÆ
Ë!
NGX_OK
) {

169  
NGX_ERROR
;

172 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

173 "£cuªÜök md5: \"%V\"", &
vÆ
);

175 
	`ngx_md5_öô
(&
md5
);

176 
	`ngx_md5_upd©e
(&
md5
, 
vÆ
.
d©a
, vÆ.
Àn
);

177 
	`ngx_md5_föÆ
(
md5_buf
, &
md5
);

179 i‡(
	`ngx_memcmp
(
hash_buf
, 
md5_buf
, 16) != 0) {

180 
nŸ_found
;

183 
v
->
d©a
 = (
u_ch¨
 *Ë((
expúes
 &&Éxpúe†< 
	`ngx_time
()) ? "0" : "1");

184 
v
->
Àn
 = 1;

185 
v
->
vÆid
 = 1;

186 
v
->
no_ˇchóbÀ
 = 0;

187 
v
->
nŸ_found
 = 0;

189  
NGX_OK
;

191 
nŸ_found
:

193 
v
->
nŸ_found
 = 1;

195  
NGX_OK
;

196 
	}
}

199 
ngx_öt_t


200 
	$ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

201 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

202 
uöçå_t
 
d©a
)

204 
u_ch¨
 *
p
, *
°¨t
, *
íd
, *
œ°
;

205 
size_t
 
Àn
;

206 
ngx_öt_t
 
n
;

207 
ngx_uöt_t
 
i
;

208 
ngx_md5_t
 
md5
;

209 
u_ch¨
 
hash
[16];

211 
p
 = &
r
->
u≈¨£d_uri
.
d©a
[1];

212 
œ°
 = 
r
->
u≈¨£d_uri
.
d©a
 +Ñ->u≈¨£d_uri.
Àn
;

214 
p
 < 
œ°
) {

215 i‡(*
p
++ == '/') {

216 
°¨t
 = 
p
;

217 
md5_°¨t
;

221 
nŸ_found
;

223 
md5_°¨t
:

225 
p
 < 
œ°
) {

226 i‡(*
p
++ == '/') {

227 
íd
 = 
p
 - 1;

228 
uæ_°¨t
;

232 
nŸ_found
;

234 
uæ_°¨t
:

236 
Àn
 = 
œ°
 - 
p
;

238 i‡(
íd
 - 
°¨t
 !32 || 
Àn
 == 0) {

239 
nŸ_found
;

242 
	`ngx_md5_öô
(&
md5
);

243 
	`ngx_md5_upd©e
(&
md5
, 
p
, 
Àn
);

244 
	`ngx_md5_upd©e
(&
md5
, 
c⁄f
->
£¸ë
.
d©a
, c⁄f->£¸ë.
Àn
);

245 
	`ngx_md5_föÆ
(
hash
, &
md5
);

247 
i
 = 0; i < 16; i++) {

248 
n
 = 
	`ngx_hextoi
(&
°¨t
[2 * 
i
], 2);

249 i‡(
n
 =
NGX_ERROR
 ||Ç !
hash
[
i
]) {

250 
nŸ_found
;

254 
v
->
Àn
 =Üen;

255 
v
->
vÆid
 = 1;

256 
v
->
no_ˇchóbÀ
 = 0;

257 
v
->
nŸ_found
 = 0;

258 
v
->
d©a
 = 
p
;

260  
NGX_OK
;

262 
nŸ_found
:

264 
v
->
nŸ_found
 = 1;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

272 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

274 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

276 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

278 i‡(
˘x
) {

279 
v
->
Àn
 = 
˘x
->
expúes
.len;

280 
v
->
vÆid
 = 1;

281 
v
->
no_ˇchóbÀ
 = 0;

282 
v
->
nŸ_found
 = 0;

283 
v
->
d©a
 = 
˘x
->
expúes
.data;

286 
v
->
nŸ_found
 = 1;

289  
NGX_OK
;

290 
	}
}

294 
	$ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

296 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

298 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_£cuª_lök_c⁄f_t
));

299 i‡(
c⁄f
 =
NULL
) {

300  
NULL
;

311  
c⁄f
;

312 
	}
}

316 
	$ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

318 
ngx_hâp_£cuª_lök_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

319 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
 = 
chûd
;

321 i‡(
c⁄f
->
£¸ë
.
d©a
) {

322 i‡(
c⁄f
->
v¨übÀ
 || c⁄f->
md5
) {

323 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

326  
NGX_CONF_ERROR
;

329  
NGX_CONF_OK
;

332 i‡(
c⁄f
->
v¨übÀ
 =
NULL
) {

333 
c⁄f
->
v¨übÀ
 = 
¥ev
->variable;

336 i‡(
c⁄f
->
md5
 =
NULL
) {

337 
c⁄f
->
md5
 = 
¥ev
->md5;

340 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 && c⁄f->
md5
 == NULL) {

341 
c⁄f
->
£¸ë
 = 
¥ev
->secret;

344  
NGX_CONF_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

351 
ngx_hâp_v¨übÀ_t
 *
v¨
;

353 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_«me
, 0);

354 i‡(
v¨
 =
NULL
) {

355  
NGX_ERROR
;

358 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_v¨übÀ
;

360 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_expúes_«me
, 0);

361 i‡(
v¨
 =
NULL
) {

362  
NGX_ERROR
;

365 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
;

367  
NGX_OK
;

368 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_split_clients_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	m≥r˚¡
;

15 
ngx_hâp_v¨übÀ_vÆue_t
 
	mvÆue
;

16 } 
	tngx_hâp_•lô_˛õ¡s_∑π_t
;

20 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

21 
ngx_¨øy_t
 
	m∑πs
;

22 } 
	tngx_hâp_•lô_˛õ¡s_˘x_t
;

25 *
ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

28 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_hâp_•lô_˛õ¡s_comm™ds
[] = {

32 { 
ngx_°rög
("split_clients"),

33 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

34 
ngx_c⁄f_•lô_˛õ¡s_block
,

35 
NGX_HTTP_MAIN_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL


58 
ngx_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_hâp_•lô_˛õ¡s_moduÀ_˘x
,

61 
ngx_hâp_•lô_˛õ¡s_comm™ds
,

62 
NGX_HTTP_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_hâp_•lô_˛õ¡s_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

78 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
 = (ngx_hâp_•lô_˛õ¡s_˘x_à*Ë
d©a
;

80 
uöt32_t
 
hash
;

81 
ngx_°r_t
 
vÆ
;

82 
ngx_uöt_t
 
i
;

83 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

85 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

87 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

88  
NGX_OK
;

91 
hash
 = 
	`ngx_murmur_hash2
(
vÆ
.
d©a
, vÆ.
Àn
);

93 
∑π
 = 
˘x
->
∑πs
.
ñts
;

95 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

98 "hâ∞•lô: %uD %uD", 
hash
, 
∑π
[
i
].
≥r˚¡
);

100 i‡(
hash
 < 
∑π
[
i
].
≥r˚¡
 ||Öart[i].percent == 0) {

101 *
v
 = 
∑π
[
i
].
vÆue
;

102  
NGX_OK
;

106  
NGX_OK
;

107 
	}
}

111 
	$ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

113 *
rv
;

114 
uöt32_t
 
sum
, 
œ°
;

115 
ngx_°r_t
 *
vÆue
, 
«me
;

116 
ngx_uöt_t
 
i
;

117 
ngx_c⁄f_t
 
ßve
;

118 
ngx_hâp_v¨übÀ_t
 *
v¨
;

119 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

120 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

121 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

123 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•lô_˛õ¡s_˘x_t
));

124 i‡(
˘x
 =
NULL
) {

125  
NGX_CONF_ERROR
;

128 
vÆue
 = 
cf
->
¨gs
->
ñts
;

130 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

132 
ccv
.
cf
 = cf;

133 
ccv
.
vÆue
 = &value[1];

134 
ccv
.
com∂ex_vÆue
 = &
˘x
->
vÆue
;

136 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

137  
NGX_CONF_ERROR
;

140 
«me
 = 
vÆue
[2];

142 i‡(
«me
.
d©a
[0] != '$') {

143 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

144 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

145  
NGX_CONF_ERROR
;

148 
«me
.
Àn
--;

149 
«me
.
d©a
++;

151 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

152 i‡(
v¨
 =
NULL
) {

153  
NGX_CONF_ERROR
;

156 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s_v¨übÀ
;

157 
v¨
->
d©a
 = (
uöçå_t
Ë
˘x
;

159 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑πs
, 
cf
->
poﬁ
, 2,

160 (
ngx_hâp_•lô_˛õ¡s_∑π_t
))

161 !
NGX_OK
)

163  
NGX_CONF_ERROR
;

166 
ßve
 = *
cf
;

167 
cf
->
˘x
 = ctx;

168 
cf
->
h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s
;

169 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

171 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

173 *
cf
 = 
ßve
;

175 i‡(
rv
 !
NGX_CONF_OK
) {

176  
rv
;

179 
sum
 = 0;

180 
œ°
 = 0;

181 
∑π
 = 
˘x
->
∑πs
.
ñts
;

183 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

184 
sum
 = 
∑π
[
i
].
≥r˚¡
 ? sum +Öart[i].percent : 10000;

185 i‡(
sum
 > 10000) {

186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

188  
NGX_CONF_ERROR
;

191 i‡(
∑π
[
i
].
≥r˚¡
) {

192 
œ°
 +
∑π
[
i
].
≥r˚¡
 * (
uöt64_t
) 0xffffffff / 10000;

193 
∑π
[
i
].
≥r˚¡
 = 
œ°
;

197  
rv
;

198 
	}
}

202 
	$ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

204 
ngx_öt_t
 
n
;

205 
ngx_°r_t
 *
vÆue
;

206 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

207 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

209 
˘x
 = 
cf
->ctx;

210 
vÆue
 = 
cf
->
¨gs
->
ñts
;

212 
∑π
 = 
	`ngx_¨øy_push
(&
˘x
->
∑πs
);

213 i‡(
∑π
 =
NULL
) {

214  
NGX_CONF_ERROR
;

217 i‡(
vÆue
[0].
Àn
 =1 && vÆue[0].
d©a
[0] == '*') {

218 
∑π
->
≥r˚¡
 = 0;

221 i‡(
vÆue
[0].
Àn
 =0 || vÆue[0].
d©a
[value[0].len - 1] != '%') {

222 
övÆid
;

225 
n
 = 
	`ngx_©oÂ
(
vÆue
[0].
d©a
, vÆue[0].
Àn
 - 1, 2);

226 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

227 
övÆid
;

230 
∑π
->
≥r˚¡
 = (
uöt32_t
Ë
n
;

233 
∑π
->
vÆue
.
Àn
 = value[1].len;

234 
∑π
->
vÆue
.
vÆid
 = 1;

235 
∑π
->
vÆue
.
no_ˇchóbÀ
 = 0;

236 
∑π
->
vÆue
.
nŸ_found
 = 0;

237 
∑π
->
vÆue
.
d©a
 = value[1].data;

239  
NGX_CONF_OK
;

241 
övÆid
:

243 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

244 "övÆidÖî˚¡ vÆuê\"%V\"", &
vÆue
[0]);

245  
NGX_CONF_ERROR
;

246 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssi_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_SSI_ERROR
 1

	)

14 
	#NGX_HTTP_SSI_DATE_LEN
 2048

	)

16 
	#NGX_HTTP_SSI_ADD_PREFIX
 1

	)

17 
	#NGX_HTTP_SSI_ADD_ZERO
 2

	)

21 
ngx_Êag_t
 
	míabÀ
;

22 
ngx_Êag_t
 
	msûít_îr‹s
;

23 
ngx_Êag_t
 
	mign‹e_ªcy˛ed_buf„rs
;

24 
ngx_Êag_t
 
	mœ°_modifõd
;

26 
ngx_hash_t
 
	mty≥s
;

28 
size_t
 
	mmö_fûe_chunk
;

29 
size_t
 
	mvÆue_Àn
;

31 
ngx_¨øy_t
 *
	mty≥s_keys
;

32 } 
	tngx_hâp_ssi_loc_c⁄f_t
;

36 
ngx_°r_t
 
	m«me
;

37 
ngx_uöt_t
 
	mkey
;

38 
ngx_°r_t
 
	mvÆue
;

39 } 
	tngx_hâp_ssi_v¨_t
;

43 
ngx_°r_t
 
	m«me
;

44 
ngx_chaö_t
 *
	mbufs
;

45 
ngx_uöt_t
 
	mcou¡
;

46 } 
	tngx_hâp_ssi_block_t
;

50 
	mssi_°¨t_°©e
 = 0,

51 
	mssi_èg_°©e
,

52 
	mssi_commít0_°©e
,

53 
	mssi_commít1_°©e
,

54 
	mssi_sh¨p_°©e
,

55 
	mssi_¥ecomm™d_°©e
,

56 
	mssi_comm™d_°©e
,

57 
	mssi_¥ï¨am_°©e
,

58 
	mssi_∑øm_°©e
,

59 
	mssi_¥ìquÆ_°©e
,

60 
	mssi_¥evÆue_°©e
,

61 
	mssi_doubÀ_quŸed_vÆue_°©e
,

62 
	mssi_quŸed_vÆue_°©e
,

63 
	mssi_quŸed_symbﬁ_°©e
,

64 
	mssi_po°∑øm_°©e
,

65 
	mssi_commít_íd0_°©e
,

66 
	mssi_commít_íd1_°©e
,

67 
	mssi_îr‹_°©e
,

68 
	mssi_îr‹_íd0_°©e
,

69 
	mssi_îr‹_íd1_°©e


70 } 
	tngx_hâp_ssi_°©e_e
;

73 
ngx_öt_t
 
ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ssi_˘x_t
 *
˘x
);

75 
ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_ssi_˘x_t
 *
˘x
);

77 
ngx_öt_t
 
ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_ssi_˘x_t
 *
˘x
);

79 
ngx_°r_t
 *
ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

81 
ngx_öt_t
 
ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
);

83 
ngx_öt_t
 
ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_°r_t
 *
∑âîn
,Çgx_°r_à*
°r
);

86 
ngx_öt_t
 
ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

88 
ngx_öt_t
 
ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

89 
ngx_öt_t
 
rc
);

90 
ngx_öt_t
 
ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

91 
ngx_öt_t
 
rc
);

92 
ngx_öt_t
 
ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

94 
ngx_öt_t
 
ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

96 
ngx_öt_t
 
ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

98 
ngx_öt_t
 
ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

100 
ngx_öt_t
 
ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

102 
ngx_öt_t
 
ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

104 
ngx_öt_t
 
ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

106 
ngx_öt_t
 
ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

109 
ngx_öt_t
 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

110 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
);

112 
ngx_öt_t
 
ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

113 *
ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

114 *
ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

115 *
ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 
ngx_öt_t
 
ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

121 
ngx_comm™d_t
 
	gngx_hâp_ssi_fûãr_comm™ds
[] = {

123 { 
ngx_°rög
("ssi"),

124 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


125 |
NGX_CONF_FLAG
,

126 
ngx_c⁄f_£t_Êag_¶Ÿ
,

127 
NGX_HTTP_LOC_CONF_OFFSET
,

128 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
íabÀ
),

129 
NULL
 },

131 { 
ngx_°rög
("ssi_silent_errors"),

132 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

133 
ngx_c⁄f_£t_Êag_¶Ÿ
,

134 
NGX_HTTP_LOC_CONF_OFFSET
,

135 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
sûít_îr‹s
),

136 
NULL
 },

138 { 
ngx_°rög
("ssi_ignore_recycled_buffers"),

139 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

140 
ngx_c⁄f_£t_Êag_¶Ÿ
,

141 
NGX_HTTP_LOC_CONF_OFFSET
,

142 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ign‹e_ªcy˛ed_buf„rs
),

143 
NULL
 },

145 { 
ngx_°rög
("ssi_min_file_chunk"),

146 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

147 
ngx_c⁄f_£t_size_¶Ÿ
,

148 
NGX_HTTP_LOC_CONF_OFFSET
,

149 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
mö_fûe_chunk
),

150 
NULL
 },

152 { 
ngx_°rög
("ssi_value_length"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

154 
ngx_c⁄f_£t_size_¶Ÿ
,

155 
NGX_HTTP_LOC_CONF_OFFSET
,

156 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
vÆue_Àn
),

157 
NULL
 },

159 { 
ngx_°rög
("ssi_types"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

161 
ngx_hâp_ty≥s_¶Ÿ
,

162 
NGX_HTTP_LOC_CONF_OFFSET
,

163 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ty≥s_keys
),

164 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

166 { 
ngx_°rög
("ssi_last_modified"),

167 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

168 
ngx_c⁄f_£t_Êag_¶Ÿ
,

169 
NGX_HTTP_LOC_CONF_OFFSET
,

170 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
œ°_modifõd
),

171 
NULL
 },

173 
ngx_nuŒ_comm™d


178 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ_˘x
 = {

179 
ngx_hâp_ssi_¥ec⁄figuøti⁄
,

180 
ngx_hâp_ssi_fûãr_öô
,

182 
ngx_hâp_ssi_¸óã_maö_c⁄f
,

183 
ngx_hâp_ssi_öô_maö_c⁄f
,

185 
NULL
,

186 
NULL
,

188 
ngx_hâp_ssi_¸óã_loc_c⁄f
,

189 
ngx_hâp_ssi_mîge_loc_c⁄f


193 
ngx_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ
 = {

194 
NGX_MODULE_V1
,

195 &
ngx_hâp_ssi_fûãr_moduÀ_˘x
,

196 
ngx_hâp_ssi_fûãr_comm™ds
,

197 
NGX_HTTP_MODULE
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NGX_MODULE_V1_PADDING


209 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

210 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

213 
u_ch¨
 
	gngx_hâp_ssi_°rög
[] = "<!--";

215 
ngx_°r_t
 
	gngx_hâp_ssi_n⁄e
 = 
ngx_°rög
("(none)");

216 
ngx_°r_t
 
	gngx_hâp_ssi_timefmt
 = 
ngx_°rög
("%A, %d-%b-%Y %H:%M:%S %Z");

217 
ngx_°r_t
 
	gngx_hâp_ssi_nuŒ_°rög
 = 
ngx_nuŒ_°rög
;

220 
	#NGX_HTTP_SSI_INCLUDE_VIRTUAL
 0

	)

221 
	#NGX_HTTP_SSI_INCLUDE_FILE
 1

	)

222 
	#NGX_HTTP_SSI_INCLUDE_WAIT
 2

	)

223 
	#NGX_HTTP_SSI_INCLUDE_SET
 3

	)

224 
	#NGX_HTTP_SSI_INCLUDE_STUB
 4

	)

226 
	#NGX_HTTP_SSI_ECHO_VAR
 0

	)

227 
	#NGX_HTTP_SSI_ECHO_DEFAULT
 1

	)

228 
	#NGX_HTTP_SSI_ECHO_ENCODING
 2

	)

230 
	#NGX_HTTP_SSI_CONFIG_ERRMSG
 0

	)

231 
	#NGX_HTTP_SSI_CONFIG_TIMEFMT
 1

	)

233 
	#NGX_HTTP_SSI_SET_VAR
 0

	)

234 
	#NGX_HTTP_SSI_SET_VALUE
 1

	)

236 
	#NGX_HTTP_SSI_IF_EXPR
 0

	)

238 
	#NGX_HTTP_SSI_BLOCK_NAME
 0

	)

241 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_ö˛ude_∑øms
[] = {

242 { 
ngx_°rög
("vútuÆ"), 
NGX_HTTP_SSI_INCLUDE_VIRTUAL
, 0, 0 },

243 { 
ngx_°rög
("fûe"), 
NGX_HTTP_SSI_INCLUDE_FILE
, 0, 0 },

244 { 
ngx_°rög
("waô"), 
NGX_HTTP_SSI_INCLUDE_WAIT
, 0, 0 },

245 { 
ngx_°rög
("£t"), 
NGX_HTTP_SSI_INCLUDE_SET
, 0, 0 },

246 { 
ngx_°rög
("°ub"), 
NGX_HTTP_SSI_INCLUDE_STUB
, 0, 0 },

247 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

251 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_echo_∑øms
[] = {

252 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_ECHO_VAR
, 1, 0 },

253 { 
ngx_°rög
("deÁu…"), 
NGX_HTTP_SSI_ECHO_DEFAULT
, 0, 0 },

254 { 
ngx_°rög
("ícodög"), 
NGX_HTTP_SSI_ECHO_ENCODING
, 0, 0 },

255 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

259 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_c⁄fig_∑øms
[] = {

260 { 
ngx_°rög
("îrmsg"), 
NGX_HTTP_SSI_CONFIG_ERRMSG
, 0, 0 },

261 { 
ngx_°rög
("timefmt"), 
NGX_HTTP_SSI_CONFIG_TIMEFMT
, 0, 0 },

262 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

266 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_£t_∑øms
[] = {

267 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_SET_VAR
, 1, 0 },

268 { 
ngx_°rög
("vÆue"), 
NGX_HTTP_SSI_SET_VALUE
, 1, 0 },

269 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

273 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_if_∑øms
[] = {

274 { 
ngx_°rög
("ex¥"), 
NGX_HTTP_SSI_IF_EXPR
, 1, 0 },

275 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

279 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_block_∑øms
[] = {

280 { 
ngx_°rög
("«me"), 
NGX_HTTP_SSI_BLOCK_NAME
, 1, 0 },

281 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

285 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_no_∑øms
[] = {

286 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

290 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_ssi_comm™ds
[] = {

291 { 
ngx_°rög
("ö˛ude"), 
ngx_hâp_ssi_ö˛ude
,

292 
ngx_hâp_ssi_ö˛ude_∑øms
, 0, 0, 1 },

293 { 
ngx_°rög
("echo"), 
ngx_hâp_ssi_echo
,

294 
ngx_hâp_ssi_echo_∑øms
, 0, 0, 0 },

295 { 
ngx_°rög
("c⁄fig"), 
ngx_hâp_ssi_c⁄fig
,

296 
ngx_hâp_ssi_c⁄fig_∑øms
, 0, 0, 0 },

297 { 
ngx_°rög
("£t"), 
ngx_hâp_ssi_£t
, 
ngx_hâp_ssi_£t_∑øms
, 0, 0, 0 },

299 { 
ngx_°rög
("if"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
, 0, 0, 0 },

300 { 
ngx_°rög
("ñif"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
,

301 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

302 { 
ngx_°rög
("ñ£"), 
ngx_hâp_ssi_ñ£
, 
ngx_hâp_ssi_no_∑øms
,

303 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

304 { 
ngx_°rög
("ídif"), 
ngx_hâp_ssi_ídif
, 
ngx_hâp_ssi_no_∑øms
,

305 
NGX_HTTP_SSI_COND_ELSE
, 0, 0 },

307 { 
ngx_°rög
("block"), 
ngx_hâp_ssi_block
,

308 
ngx_hâp_ssi_block_∑øms
, 0, 0, 0 },

309 { 
ngx_°rög
("ídblock"), 
ngx_hâp_ssi_ídblock
,

310 
ngx_hâp_ssi_no_∑øms
, 0, 1, 0 },

312 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

316 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_ssi_v¨s
[] = {

318 { 
ngx_°rög
("d©e_loˇl"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 0,

319 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

321 { 
ngx_°rög
("d©e_gmt"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 1,

322 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

324 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

329 
ngx_öt_t


330 
	$ngx_hâp_ssi_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

332 
ngx_hâp_ssi_˘x_t
 *
˘x
;

333 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

335 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

337 i‡(!
¶cf
->
íabÀ


338 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

339 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

341  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

344 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ssi_˘x_t
));

345 i‡(
˘x
 =
NULL
) {

346  
NGX_ERROR
;

349 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ssi_fûãr_moduÀ
);

352 
˘x
->
vÆue_Àn
 = 
¶cf
->value_len;

353 
˘x
->
œ°_out
 = &˘x->
out
;

355 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

356 
˘x
->
ouçut
 = 1;

358 
˘x
->
∑øms
.
ñts
 = ctx->
∑øms_¨øy
;

359 
˘x
->
∑øms
.
size
 = (
ngx_èbÀ_ñt_t
);

360 
˘x
->
∑øms
.
«Œoc
 = 
NGX_HTTP_SSI_PARAMS_N
;

361 
˘x
->
∑øms
.
poﬁ
 = 
r
->pool;

363 
˘x
->
timefmt
 = 
ngx_hâp_ssi_timefmt
;

364 
	`ngx_°r_£t
(&
˘x
->
îrmsg
,

367 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

369 i‡(
r
 =r->
maö
) {

370 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

371 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

372 
	`ngx_hâp_˛ór_ëag
(
r
);

374 i‡(!
¶cf
->
œ°_modifõd
) {

375 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

379  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_hâp_ssi_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

386 
size_t
 
Àn
;

387 
ngx_öt_t
 
rc
;

388 
ngx_buf_t
 *
b
;

389 
ngx_uöt_t
 
i
, 
ödex
;

390 
ngx_chaö_t
 *
˛
, **
Œ
;

391 
ngx_èbÀ_ñt_t
 *
∑øm
;

392 
ngx_hâp_ssi_˘x_t
 *
˘x
, *
m˘x
;

393 
ngx_hâp_ssi_block_t
 *
bl
;

394 
ngx_hâp_ssi_∑øm_t
 *
¥m
;

395 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

396 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

397 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

398 
ngx_°r_t
 *
∑øms
[
NGX_HTTP_SSI_MAX_PARAMS
 + 1];

400 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

402 i‡(
˘x
 =
NULL


403 || (
ö
 =
NULL


404 && 
˘x
->
buf
 =
NULL


405 && 
˘x
->
ö
 =
NULL


406 && 
˘x
->
busy
 =
NULL
))

408  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

413 i‡(
ö
) {

414 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

415  
NGX_ERROR
;

419 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

420 "hâ∞ssòfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

422 i‡(
˘x
->
waô
) {

424 i‡(
r
 !r->
c⁄√˘i⁄
->
d©a
) {

425 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

427 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

429  
NGX_AGAIN
;

432 i‡(
˘x
->
waô
->
d⁄e
) {

433 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

435 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

437 
˘x
->
waô
 = 
NULL
;

440 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

442 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

444  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

448 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

450 
˘x
->
ö
 || ctx->
buf
) {

452 i‡(
˘x
->
buf
 =
NULL
) {

453 
˘x
->
buf
 = ctx->
ö
->buf;

454 
˘x
->
ö
 = ctx->ö->
√xt
;

455 
˘x
->
pos
 = ctx->
buf
->pos;

458 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

459 
˘x
->
c›y_°¨t
 = ctx->
pos
;

460 
˘x
->
c›y_íd
 = ctx->
pos
;

463 
b
 = 
NULL
;

465 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

467 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

468 "ßved: %d sèã: %d", 
˘x
->
ßved
, ctx->
°©e
);

470 
rc
 = 
	`ngx_hâp_ssi_∑r£
(
r
, 
˘x
);

472 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

474 
rc
, 
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

476 i‡(
rc
 =
NGX_ERROR
) {

477  
rc
;

480 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

482 i‡(
˘x
->
ouçut
) {

484 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

485 "ßved: %d", 
˘x
->
ßved
);

487 i‡(
˘x
->
ßved
) {

489 i‡(
˘x
->
‰ì
) {

490 
˛
 = 
˘x
->
‰ì
;

491 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

492 
b
 = 
˛
->
buf
;

493 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

496 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

497 i‡(
b
 =
NULL
) {

498  
NGX_ERROR
;

501 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

502 i‡(
˛
 =
NULL
) {

503  
NGX_ERROR
;

506 
˛
->
buf
 = 
b
;

509 
b
->
mem‹y
 = 1;

510 
b
->
pos
 = 
ngx_hâp_ssi_°rög
;

511 
b
->
œ°
 = 
ngx_hâp_ssi_°rög
 + 
˘x
->
ßved
;

513 *
˘x
->
œ°_out
 = 
˛
;

514 
˘x
->
œ°_out
 = &
˛
->
√xt
;

516 
˘x
->
ßved
 = 0;

519 i‡(
˘x
->
‰ì
) {

520 
˛
 = 
˘x
->
‰ì
;

521 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

522 
b
 = 
˛
->
buf
;

525 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

526 i‡(
b
 =
NULL
) {

527  
NGX_ERROR
;

530 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

531 i‡(
˛
 =
NULL
) {

532  
NGX_ERROR
;

535 
˛
->
buf
 = 
b
;

538 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

540 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

541 
b
->
œ°
 = 
˘x
->
c›y_íd
;

542 
b
->
shadow
 = 
NULL
;

543 
b
->
œ°_buf
 = 0;

544 
b
->
ªcy˛ed
 = 0;

546 i‡(
b
->
ö_fûe
) {

547 i‡(
¶cf
->
mö_fûe_chunk
 < (
size_t
Ë(
b
->
œ°
 - b->
pos
))

549 
b
->
fûe_œ°
 = b->
fûe_pos


550 + (
b
->
œ°
 - 
˘x
->
buf
->
pos
);

551 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

554 
b
->
ö_fûe
 = 0;

558 
˛
->
√xt
 = 
NULL
;

559 *
˘x
->
œ°_out
 = 
˛
;

560 
˘x
->
œ°_out
 = &
˛
->
√xt
;

563 i‡(
˘x
->
block


564 && 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
))

566 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

567 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
));

569 i‡(
b
 =
NULL
) {

570  
NGX_ERROR
;

573 i‡(
˘x
->
ßved
) {

574 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
ngx_hâp_ssi_°rög
,

575 
˘x
->
ßved
);

578 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
c›y_°¨t
,

579 
˘x
->
c›y_íd
 - ctx->
c›y_°¨t
);

581 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

582 i‡(
˛
 =
NULL
) {

583  
NGX_ERROR
;

586 
˛
->
buf
 = 
b
;

587 
˛
->
√xt
 = 
NULL
;

589 
b
 = 
NULL
;

591 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

592 
ngx_hâp_ssi_fûãr_moduÀ
);

593 
bl
 = 
m˘x
->
blocks
->
ñts
;

594 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

595 *
Œ
;

596 
Œ
 = &(*Œ)->
√xt
)

601 *
Œ
 = 
˛
;

604 
˘x
->
ßved
 = 0;

608 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

609 
˘x
->
c›y_°¨t
 = ctx->
pos
;

610 
˘x
->
c›y_íd
 = ctx->
pos
;

613 
˘x
->
c›y_°¨t
 = 
NULL
;

614 
˘x
->
c›y_íd
 = 
NULL
;

617 i‡(
rc
 =
NGX_AGAIN
) {

622 
b
 = 
NULL
;

624 i‡(
rc
 =
NGX_OK
) {

626 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
,

627 
ngx_hâp_ssi_fûãr_moduÀ
);

629 
cmd
 = 
	`ngx_hash_föd
(&
smcf
->
hash
, 
˘x
->
key
, ctx->
comm™d
.
d©a
,

630 
˘x
->
comm™d
.
Àn
);

632 i‡(
cmd
 =
NULL
) {

633 i‡(
˘x
->
ouçut
) {

634 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

636 &
˘x
->
comm™d
);

637 
ssi_îr‹
;

643 i‡(!
˘x
->
ouçut
 && !
cmd
->
block
) {

645 i‡(
˘x
->
block
) {

649 
Àn
 = 5 + 
˘x
->
comm™d
.len + 4;

651 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

652 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

653 
Àn
 +1 + 
∑øm
[
i
].
key
.len + 2

654 + 
∑øm
[
i
].
vÆue
.
Àn
 + 1;

657 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

659 i‡(
b
 =
NULL
) {

660  
NGX_ERROR
;

663 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

664 i‡(
˛
 =
NULL
) {

665  
NGX_ERROR
;

668 
˛
->
buf
 = 
b
;

669 
˛
->
√xt
 = 
NULL
;

671 *
b
->
œ°
++ = '<';

672 *
b
->
œ°
++ = '!';

673 *
b
->
œ°
++ = '-';

674 *
b
->
œ°
++ = '-';

675 *
b
->
œ°
++ = '#';

677 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
comm™d
.
d©a
,

678 
˘x
->
comm™d
.
Àn
);

680 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

681 *
b
->
œ°
++ = ' ';

682 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
key
.
d©a
,

683 
∑øm
[
i
].
key
.
Àn
);

684 *
b
->
œ°
++ = '=';

685 *
b
->
œ°
++ = '"';

686 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
vÆue
.
d©a
,

687 
∑øm
[
i
].
vÆue
.
Àn
);

688 *
b
->
œ°
++ = '"';

691 *
b
->
œ°
++ = ' ';

692 *
b
->
œ°
++ = '-';

693 *
b
->
œ°
++ = '-';

694 *
b
->
œ°
++ = '>';

696 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

697 
ngx_hâp_ssi_fûãr_moduÀ
);

698 
bl
 = 
m˘x
->
blocks
->
ñts
;

699 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

700 *
Œ
;

701 
Œ
 = &(*Œ)->
√xt
)

706 *
Œ
 = 
˛
;

708 
b
 = 
NULL
;

713 i‡(
cmd
->
c⁄dôi⁄Æ
 == 0) {

718 i‡(
cmd
->
c⁄dôi⁄Æ


719 && (
˘x
->
c⁄dôi⁄Æ
 == 0

720 || 
˘x
->
c⁄dôi⁄Æ
 > 
cmd
->conditional))

722 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

724 &
˘x
->
comm™d
);

725 
ssi_îr‹
;

728 i‡(
˘x
->
∑øms
.
√…s
 > 
NGX_HTTP_SSI_MAX_PARAMS
) {

729 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

731 &
˘x
->
comm™d
);

732 
ssi_îr‹
;

735 
	`ngx_memzîo
(
∑øms
,

736 (
NGX_HTTP_SSI_MAX_PARAMS
 + 1Ë* (
ngx_°r_t
 *));

738 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

740 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

742 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

744 i‡(
∑øm
[
i
].
key
.
Àn
 !
¥m
->
«me
.len

745 || 
	`ngx_°∫cmp
(
∑øm
[
i
].
key
.
d©a
, 
¥m
->
«me
.data,

746 
¥m
->
«me
.
Àn
) != 0)

751 i‡(!
¥m
->
mu…ùÀ
) {

752 i‡(
∑øms
[
¥m
->
ödex
]) {

753 
	`ngx_log_îr‹
(
NGX_LOG_ERR
,

754 
r
->
c⁄√˘i⁄
->
log
, 0,

757 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

759 
ssi_îr‹
;

762 
∑øms
[
¥m
->
ödex
] = &
∑øm
[
i
].
vÆue
;

767 
ödex
 = 
¥m
->ödex; 
∑øms
[index]; index++) {

771 
∑øms
[
ödex
] = &
∑øm
[
i
].
vÆue
;

776 i‡(
¥m
->
«me
.
Àn
 == 0) {

777 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

780 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

782 
ssi_îr‹
;

786 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

787 i‡(
¥m
->
m™d©‹y
 && 
∑øms
[¥m->
ödex
] == 0) {

788 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

791 &
¥m
->
«me
, &
˘x
->
comm™d
);

793 
ssi_îr‹
;

797 i‡(
cmd
->
Êush
 && 
˘x
->
out
) {

799 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

802 i‡(
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

803  
NGX_ERROR
;

807 
rc
 = 
cmd
->
	`h™dÀr
(
r
, 
˘x
, 
∑øms
);

809 i‡(
rc
 =
NGX_OK
) {

813 i‡(
rc
 =
NGX_DONE
 ||Ñ¯=
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

814 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

815  
rc
;

822 
ssi_îr‹
:

824 i‡(
¶cf
->
sûít_îr‹s
) {

828 i‡(
˘x
->
‰ì
) {

829 
˛
 = 
˘x
->
‰ì
;

830 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

831 
b
 = 
˛
->
buf
;

832 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

835 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

836 i‡(
b
 =
NULL
) {

837  
NGX_ERROR
;

840 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

841 i‡(
˛
 =
NULL
) {

842  
NGX_ERROR
;

845 
˛
->
buf
 = 
b
;

848 
b
->
mem‹y
 = 1;

849 
b
->
pos
 = 
˘x
->
îrmsg
.
d©a
;

850 
b
->
œ°
 = 
˘x
->
îrmsg
.
d©a
 + ctx->îrmsg.
Àn
;

852 
˛
->
√xt
 = 
NULL
;

853 *
˘x
->
œ°_out
 = 
˛
;

854 
˘x
->
œ°_out
 = &
˛
->
√xt
;

859 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

860 i‡(
b
 =
NULL
) {

861 i‡(
˘x
->
‰ì
) {

862 
˛
 = 
˘x
->
‰ì
;

863 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

864 
b
 = 
˛
->
buf
;

865 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

868 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

869 i‡(
b
 =
NULL
) {

870  
NGX_ERROR
;

873 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

874 i‡(
˛
 =
NULL
) {

875  
NGX_ERROR
;

878 
˛
->
buf
 = 
b
;

881 
b
->
sync
 = 1;

883 
˛
->
√xt
 = 
NULL
;

884 *
˘x
->
œ°_out
 = 
˛
;

885 
˘x
->
œ°_out
 = &
˛
->
√xt
;

888 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

889 
b
->
shadow
 = 
˘x
->
buf
;

891 i‡(
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 == 0) {

892 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

896 
˘x
->
buf
 = 
NULL
;

898 
˘x
->
ßved
 = ctx->
looked
;

901 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

902  
NGX_OK
;

905  
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
);

906 
	}
}

909 
ngx_öt_t


910 
	$ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

912 
ngx_öt_t
 
rc
;

913 
ngx_buf_t
 *
b
;

914 
ngx_chaö_t
 *
˛
;

917 
b
 = 
NULL
;

918 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

919 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

920 "ssòout: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

921 i‡(
˛
->
buf
 =
b
) {

922 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

924 
	`ngx_debug_poöt
();

925  
NGX_ERROR
;

927 
b
 = 
˛
->
buf
;

931 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

933 i‡(
˘x
->
busy
 =
NULL
) {

934 
˘x
->
busy
 = ctx->
out
;

937 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

938 
˛
->
√xt
 = 
˘x
->
out
;

941 
˘x
->
out
 = 
NULL
;

942 
˘x
->
œ°_out
 = &˘x->
out
;

944 
˘x
->
busy
) {

946 
˛
 = 
˘x
->
busy
;

947 
b
 = 
˛
->
buf
;

949 i‡(
	`ngx_buf_size
(
b
) != 0) {

953 i‡(
b
->
shadow
) {

954 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

957 
˘x
->
busy
 = 
˛
->
√xt
;

959 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

962 
˛
->
√xt
 = 
˘x
->
‰ì
;

963 
˘x
->
‰ì
 = 
˛
;

967 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

969  
rc
;

970 
	}
}

974 
	$ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

976 i‡(
˘x
->
ö
 || ctx->
buf
) {

977 
r
->
buf„ªd
 |
NGX_HTTP_SSI_BUFFERED
;

980 
r
->
buf„ªd
 &~
NGX_HTTP_SSI_BUFFERED
;

982 
	}
}

985 
ngx_öt_t


986 
	$ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

988 
u_ch¨
 *
p
, *
vÆue
, *
œ°
, *
c›y_íd
, 
ch
;

989 
size_t
 
looked
;

990 
ngx_hâp_ssi_°©e_e
 
°©e
;

992 
°©e
 = 
˘x
->state;

993 
looked
 = 
˘x
->looked;

994 
œ°
 = 
˘x
->
buf
->last;

995 
c›y_íd
 = 
˘x
->copy_end;

997 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

999 
ch
 = *
p
;

1001 i‡(
°©e
 =
ssi_°¨t_°©e
) {

1006 i‡(
ch
 == '<') {

1007 
c›y_íd
 = 
p
;

1008 
looked
 = 1;

1009 
°©e
 = 
ssi_èg_°©e
;

1011 
èg_°¨ãd
;

1014 i‡(++
p
 =
œ°
) {

1018 
ch
 = *
p
;

1021 
˘x
->
°©e
 = state;

1022 
˘x
->
pos
 = 
p
;

1023 
˘x
->
looked
 =Üooked;

1024 
˘x
->
c›y_íd
 = 
p
;

1026 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

1027 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1030  
NGX_AGAIN
;

1032 
èg_°¨ãd
:

1037 
°©e
) {

1039 
ssi_°¨t_°©e
:

1043 
ssi_èg_°©e
:

1044 
ch
) {

1046 
looked
 = 2;

1047 
°©e
 = 
ssi_commít0_°©e
;

1051 
c›y_íd
 = 
p
;

1055 
c›y_íd
 = 
p
;

1056 
looked
 = 0;

1057 
°©e
 = 
ssi_°¨t_°©e
;

1063 
ssi_commít0_°©e
:

1064 
ch
) {

1066 
looked
 = 3;

1067 
°©e
 = 
ssi_commít1_°©e
;

1071 
c›y_íd
 = 
p
;

1072 
looked
 = 1;

1073 
°©e
 = 
ssi_èg_°©e
;

1077 
c›y_íd
 = 
p
;

1078 
looked
 = 0;

1079 
°©e
 = 
ssi_°¨t_°©e
;

1085 
ssi_commít1_°©e
:

1086 
ch
) {

1088 
looked
 = 4;

1089 
°©e
 = 
ssi_sh¨p_°©e
;

1093 
c›y_íd
 = 
p
;

1094 
looked
 = 1;

1095 
°©e
 = 
ssi_èg_°©e
;

1099 
c›y_íd
 = 
p
;

1100 
looked
 = 0;

1101 
°©e
 = 
ssi_°¨t_°©e
;

1107 
ssi_sh¨p_°©e
:

1108 
ch
) {

1110 i‡(
p
 - 
˘x
->
pos
 < 4) {

1111 
˘x
->
ßved
 = 0;

1113 
looked
 = 0;

1114 
°©e
 = 
ssi_¥ecomm™d_°©e
;

1118 
c›y_íd
 = 
p
;

1119 
looked
 = 1;

1120 
°©e
 = 
ssi_èg_°©e
;

1124 
c›y_íd
 = 
p
;

1125 
looked
 = 0;

1126 
°©e
 = 
ssi_°¨t_°©e
;

1132 
ssi_¥ecomm™d_°©e
:

1133 
ch
) {

1135 
CR
:

1136 
LF
:

1141 
˘x
->
comm™d
.
Àn
 = 1;

1142 
˘x
->
comm™d
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1143 
NGX_HTTP_SSI_COMMAND_LEN
);

1144 i‡(
˘x
->
comm™d
.
d©a
 =
NULL
) {

1145  
NGX_ERROR
;

1148 
˘x
->
comm™d
.
d©a
[0] = 
ch
;

1150 
˘x
->
key
 = 0;

1151 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1153 
˘x
->
∑øms
.
√…s
 = 0;

1155 
°©e
 = 
ssi_comm™d_°©e
;

1161 
ssi_comm™d_°©e
:

1162 
ch
) {

1164 
CR
:

1165 
LF
:

1167 
°©e
 = 
ssi_¥ï¨am_°©e
;

1171 
°©e
 = 
ssi_commít_íd0_°©e
;

1175 i‡(
˘x
->
comm™d
.
Àn
 =
NGX_HTTP_SSI_COMMAND_LEN
) {

1176 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1178 &
˘x
->
comm™d
, 
ch
);

1180 
°©e
 = 
ssi_îr‹_°©e
;

1184 
˘x
->
comm™d
.
d©a
[˘x->comm™d.
Àn
++] = 
ch
;

1185 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1190 
ssi_¥ï¨am_°©e
:

1191 
ch
) {

1193 
CR
:

1194 
LF
:

1199 
°©e
 = 
ssi_commít_íd0_°©e
;

1203 
˘x
->
∑øm
 = 
	`ngx_¨øy_push
(&˘x->
∑øms
);

1204 i‡(
˘x
->
∑øm
 =
NULL
) {

1205  
NGX_ERROR
;

1208 
˘x
->
∑øm
->
key
.
Àn
 = 1;

1209 
˘x
->
∑øm
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1210 
NGX_HTTP_SSI_PARAM_LEN
);

1211 i‡(
˘x
->
∑øm
->
key
.
d©a
 =
NULL
) {

1212  
NGX_ERROR
;

1215 
˘x
->
∑øm
->
key
.
d©a
[0] = 
ch
;

1217 
˘x
->
∑øm
->
vÆue
.
Àn
 = 0;

1219 i‡(
˘x
->
vÆue_buf
 =
NULL
) {

1220 
˘x
->
∑øm
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1221 
˘x
->
vÆue_Àn
 + 1);

1222 i‡(
˘x
->
∑øm
->
vÆue
.
d©a
 =
NULL
) {

1223  
NGX_ERROR
;

1227 
˘x
->
∑øm
->
vÆue
.
d©a
 = ctx->
vÆue_buf
;

1230 
°©e
 = 
ssi_∑øm_°©e
;

1236 
ssi_∑øm_°©e
:

1237 
ch
) {

1239 
CR
:

1240 
LF
:

1242 
°©e
 = 
ssi_¥ìquÆ_°©e
;

1246 
°©e
 = 
ssi_¥evÆue_°©e
;

1250 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1252 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1253 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1255 &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1259 i‡(
˘x
->
∑øm
->
key
.
Àn
 =
NGX_HTTP_SSI_PARAM_LEN
) {

1260 
°©e
 = 
ssi_îr‹_°©e
;

1261 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1264 &
˘x
->
∑øm
->
key
, 
ch
, &˘x->
comm™d
);

1268 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1273 
ssi_¥ìquÆ_°©e
:

1274 
ch
) {

1276 
CR
:

1277 
LF
:

1282 
°©e
 = 
ssi_¥evÆue_°©e
;

1286 i‡(
ch
 == '-') {

1287 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1289 
°©e
 = 
ssi_îr‹_°©e
;

1292 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1295 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1301 
ssi_¥evÆue_°©e
:

1302 
ch
) {

1304 
CR
:

1305 
LF
:

1310 
°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1314 
°©e
 = 
ssi_quŸed_vÆue_°©e
;

1318 i‡(
ch
 == '-') {

1319 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1321 
°©e
 = 
ssi_îr‹_°©e
;

1324 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1327 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1333 
ssi_doubÀ_quŸed_vÆue_°©e
:

1334 
ch
) {

1336 
°©e
 = 
ssi_po°∑øm_°©e
;

1340 
˘x
->
ßved_°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1341 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1346 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1347 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1350 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1351 &
˘x
->
comm™d
);

1352 
°©e
 = 
ssi_îr‹_°©e
;

1356 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1361 
ssi_quŸed_vÆue_°©e
:

1362 
ch
) {

1364 
°©e
 = 
ssi_po°∑øm_°©e
;

1368 
˘x
->
ßved_°©e
 = 
ssi_quŸed_vÆue_°©e
;

1369 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1374 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1375 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1378 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1379 &
˘x
->
comm™d
);

1380 
°©e
 = 
ssi_îr‹_°©e
;

1384 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1389 
ssi_quŸed_symbﬁ_°©e
:

1390 
°©e
 = 
˘x
->
ßved_°©e
;

1392 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1393 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1396 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1397 &
˘x
->
comm™d
);

1398 
°©e
 = 
ssi_îr‹_°©e
;

1402 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1406 
ssi_po°∑øm_°©e
:

1408 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 + 1 < ctx->
vÆue_Àn
 / 2) {

1409 
vÆue
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
∑øm
->vÆue.
Àn
 + 1);

1410 i‡(
vÆue
 =
NULL
) {

1411  
NGX_ERROR
;

1414 
	`ngx_mem˝y
(
vÆue
, 
˘x
->
∑øm
->vÆue.
d©a
,

1415 
˘x
->
∑øm
->
vÆue
.
Àn
);

1417 
˘x
->
vÆue_buf
 = ctx->
∑øm
->
vÆue
.
d©a
;

1418 
˘x
->
∑øm
->
vÆue
.
d©a
 = value;

1421 
˘x
->
vÆue_buf
 = 
NULL
;

1424 
ch
) {

1426 
CR
:

1427 
LF
:

1429 
°©e
 = 
ssi_¥ï¨am_°©e
;

1433 
°©e
 = 
ssi_commít_íd0_°©e
;

1437 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1440 
ch
, &
˘x
->
∑øm
->
vÆue
, &˘x->∑øm->
key
,

1441 &
˘x
->
comm™d
);

1442 
°©e
 = 
ssi_îr‹_°©e
;

1448 
ssi_commít_íd0_°©e
:

1449 
ch
) {

1451 
°©e
 = 
ssi_commít_íd1_°©e
;

1455 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1457 
ch
, &
˘x
->
comm™d
);

1458 
°©e
 = 
ssi_îr‹_°©e
;

1464 
ssi_commít_íd1_°©e
:

1465 
ch
) {

1467 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1468 
˘x
->
pos
 = 
p
 + 1;

1469 
˘x
->
looked
 =Üooked;

1470 
˘x
->
c›y_íd
 = copy_end;

1472 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1473 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1476  
NGX_OK
;

1479 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1481 
ch
, &
˘x
->
comm™d
);

1482 
°©e
 = 
ssi_îr‹_°©e
;

1488 
ssi_îr‹_°©e
:

1489 
ch
) {

1491 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1500 
ssi_îr‹_íd0_°©e
:

1501 
ch
) {

1503 
°©e
 = 
ssi_îr‹_íd1_°©e
;

1507 
°©e
 = 
ssi_îr‹_°©e
;

1513 
ssi_îr‹_íd1_°©e
:

1514 
ch
) {

1516 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1517 
˘x
->
pos
 = 
p
 + 1;

1518 
˘x
->
looked
 =Üooked;

1519 
˘x
->
c›y_íd
 = copy_end;

1521 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1522 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1525  
NGX_HTTP_SSI_ERROR
;

1528 
°©e
 = 
ssi_îr‹_°©e
;

1536 
˘x
->
°©e
 = state;

1537 
˘x
->
pos
 = 
p
;

1538 
˘x
->
looked
 =Üooked;

1540 
˘x
->
c›y_íd
 = (
°©e
 =
ssi_°¨t_°©e
Ë? 
p
 : copy_end;

1542 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

1543 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1546  
NGX_AGAIN
;

1547 
	}
}

1550 
ngx_°r_t
 *

1551 
	$ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

1552 
ngx_uöt_t
 
key
)

1554 
ngx_uöt_t
 
i
;

1555 
ngx_li°_∑π_t
 *
∑π
;

1556 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1557 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1559 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1561 #i‡(
NGX_PCRE
)

1563 
ngx_°r_t
 *
vÆue
;

1565 i‡(
key
 >= '0' && key <= '9') {

1566 
i
 = 
key
 - '0';

1568 i‡(
i
 < 
˘x
->
nˇ±uªs
) {

1569 
vÆue
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_°r_t
));

1570 i‡(
vÆue
 =
NULL
) {

1571  
NULL
;

1574 
i
 *= 2;

1576 
vÆue
->
d©a
 = 
˘x
->
ˇ±uªs_d©a
 + ctx->
ˇ±uªs
[
i
];

1577 
vÆue
->
Àn
 = 
˘x
->
ˇ±uªs
[
i
 + 1] - ctx->captures[i];

1579  
vÆue
;

1585 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1586  
NULL
;

1589 
∑π
 = &
˘x
->
v¨übÀs
->part;

1590 
v¨
 = 
∑π
->
ñts
;

1592 
i
 = 0; ; i++) {

1594 i‡(
i
 >
∑π
->
√…s
) {

1595 i‡(
∑π
->
√xt
 =
NULL
) {

1599 
∑π
 =Ö¨t->
√xt
;

1600 
v¨
 = 
∑π
->
ñts
;

1601 
i
 = 0;

1604 i‡(
«me
->
Àn
 !
v¨
[
i
].name.len) {

1608 i‡(
key
 !
v¨
[
i
].key) {

1612 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
v¨
[
i
].«me.d©a,Çame->
Àn
) == 0) {

1613  &
v¨
[
i
].
vÆue
;

1617  
NULL
;

1618 
	}
}

1621 
ngx_öt_t


1622 
	$ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1623 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
)

1625 
u_ch¨
 
ch
, *
p
, **
vÆue
, *
d©a
, *
∑π_d©a
;

1626 
size_t
 *
size
, 
Àn
, 
¥efix
, 
∑π_Àn
;

1627 
ngx_°r_t
 
v¨
, *
vÆ
;

1628 
ngx_öt_t
 
key
;

1629 
ngx_uöt_t
 
i
, 
n
, 
bøckë
, 
quŸed
;

1630 
ngx_¨øy_t
 
Àngths
, 
vÆues
;

1631 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1633 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ãxt
);

1635 i‡(
n
 == 0) {

1637 
d©a
 = 
ãxt
->data;

1638 
p
 = 
d©a
;

1640 i‡((
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
Ë&& 
ãxt
->
d©a
[0] != '/') {

1642 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1643 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1648 i‡(
¥efix
) {

1649 
Àn
 = 
¥efix
 + 
ãxt
->len;

1651 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1652 i‡(
d©a
 =
NULL
) {

1653  
NGX_ERROR
;

1656 
p
 = 
	`ngx_c›y
(
d©a
, 
r
->
uri
.d©a, 
¥efix
);

1660 
quŸed
 = 0;

1662 
i
 = 0; i < 
ãxt
->
Àn
; i++) {

1663 
ch
 = 
ãxt
->
d©a
[
i
];

1665 i‡(!
quŸed
) {

1667 i‡(
ch
 == '\\') {

1668 
quŸed
 = 1;

1673 
quŸed
 = 0;

1675 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1676 *
p
++ = '\\';

1680 *
p
++ = 
ch
;

1683 
ãxt
->
Àn
 = 
p
 - 
d©a
;

1684 
ãxt
->
d©a
 = data;

1686  
NGX_OK
;

1689 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
r
->
poﬁ
, 8, (
size_t
 *)Ë!
NGX_OK
) {

1690  
NGX_ERROR
;

1693 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
r
->
poﬁ
, 8, (
u_ch¨
 *)Ë!
NGX_OK
) {

1694  
NGX_ERROR
;

1697 
Àn
 = 0;

1698 
i
 = 0;

1700 
i
 < 
ãxt
->
Àn
) {

1702 i‡(
ãxt
->
d©a
[
i
] == '$') {

1704 
v¨
.
Àn
 = 0;

1706 i‡(++
i
 =
ãxt
->
Àn
) {

1707 
övÆid_v¨übÀ
;

1710 i‡(
ãxt
->
d©a
[
i
] == '{') {

1711 
bøckë
 = 1;

1713 i‡(++
i
 =
ãxt
->
Àn
) {

1714 
övÆid_v¨übÀ
;

1717 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1720 
bøckë
 = 0;

1721 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1724  ; 
i
 < 
ãxt
->
Àn
; i++, 
v¨
.len++) {

1725 
ch
 = 
ãxt
->
d©a
[
i
];

1727 i‡(
ch
 ='}' && 
bøckë
) {

1728 
i
++;

1729 
bøckë
 = 0;

1733 i‡((
ch
 >= 'A' && ch <= 'Z')

1734 || (
ch
 >= 'a' && ch <= 'z')

1735 || (
ch
 >= '0' && ch <= '9')

1736 || 
ch
 == '_')

1744 i‡(
bøckë
) {

1745 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1747 "v¨übÀ i†missög", &
v¨
);

1748  
NGX_HTTP_SSI_ERROR
;

1751 i‡(
v¨
.
Àn
 == 0) {

1752 
övÆid_v¨übÀ
;

1755 
key
 = 
	`ngx_hash_°æow
(
v¨
.
d©a
, v¨.d©a, v¨.
Àn
);

1757 
vÆ
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1759 i‡(
vÆ
 =
NULL
) {

1760 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1761 i‡(
vv
 =
NULL
) {

1762  
NGX_ERROR
;

1765 i‡(
vv
->
nŸ_found
) {

1769 
∑π_d©a
 = 
vv
->
d©a
;

1770 
∑π_Àn
 = 
vv
->
Àn
;

1773 
∑π_d©a
 = 
vÆ
->
d©a
;

1774 
∑π_Àn
 = 
vÆ
->
Àn
;

1778 
∑π_d©a
 = &
ãxt
->
d©a
[
i
];

1779 
quŸed
 = 0;

1781 
p
 = 
∑π_d©a
; 
i
 < 
ãxt
->
Àn
; i++) {

1782 
ch
 = 
ãxt
->
d©a
[
i
];

1784 i‡(!
quŸed
) {

1786 i‡(
ch
 == '\\') {

1787 
quŸed
 = 1;

1791 i‡(
ch
 == '$') {

1796 
quŸed
 = 0;

1798 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1799 *
p
++ = '\\';

1803 *
p
++ = 
ch
;

1806 
∑π_Àn
 = 
p
 - 
∑π_d©a
;

1809 
Àn
 +
∑π_Àn
;

1811 
size
 = 
	`ngx_¨øy_push
(&
Àngths
);

1812 i‡(
size
 =
NULL
) {

1813  
NGX_ERROR
;

1816 *
size
 = 
∑π_Àn
;

1818 
vÆue
 = 
	`ngx_¨øy_push
(&
vÆues
);

1819 i‡(
vÆue
 =
NULL
) {

1820  
NGX_ERROR
;

1823 *
vÆue
 = 
∑π_d©a
;

1826 
¥efix
 = 0;

1828 
size
 = 
Àngths
.
ñts
;

1829 
vÆue
 = 
vÆues
.
ñts
;

1831 i‡(
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
) {

1832 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1833 i‡(
size
[
i
] != 0) {

1834 i‡(*
vÆue
[
i
] != '/') {

1835 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1836 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1837 
Àn
 +
¥efix
;

1848 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
 + ((
Êags
 & 
NGX_HTTP_SSI_ADD_ZERO
) ? 1 : 0));

1849 i‡(
p
 =
NULL
) {

1850  
NGX_ERROR
;

1853 
ãxt
->
Àn
 =Üen;

1854 
ãxt
->
d©a
 = 
p
;

1856 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
, 
¥efix
);

1858 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1859 
p
 = 
	`ngx_c›y
’, 
vÆue
[
i
], 
size
[i]);

1862  
NGX_OK
;

1864 
övÆid_v¨übÀ
:

1866 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1867 "övÆid v¨übÀÇamêö \"%V\"", 
ãxt
);

1869  
NGX_HTTP_SSI_ERROR
;

1870 
	}
}

1873 
ngx_öt_t


1874 
	$ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑âîn
,

1875 
ngx_°r_t
 *
°r
)

1877 #i‡(
NGX_PCRE
)

1878 
rc
, *
ˇ±uªs
;

1879 
u_ch¨
 *
p
, 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1880 
size_t
 
size
;

1881 
ngx_öt_t
 
key
;

1882 
ngx_°r_t
 *
vv
, 
«me
, 
vÆue
;

1883 
ngx_uöt_t
 
i
, 
n
;

1884 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1885 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1886 
ngx_ªgex_compûe_t
 
rgc
;

1888 
	`ngx_memzîo
(&
rgc
, (
ngx_ªgex_compûe_t
));

1890 
rgc
.
∑âîn
 = *pattern;

1891 
rgc
.
poﬁ
 = 
r
->pool;

1892 
rgc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

1893 
rgc
.
îr
.
d©a
 = 
îr°r
;

1895 i‡(
	`ngx_ªgex_compûe
(&
rgc
Ë!
NGX_OK
) {

1896 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "%V", &
rgc
.
îr
);

1897  
NGX_HTTP_SSI_ERROR
;

1900 
n
 = (
rgc
.
ˇ±uªs
 + 1) * 3;

1902 
ˇ±uªs
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * ());

1903 i‡(
ˇ±uªs
 =
NULL
) {

1904  
NGX_ERROR
;

1907 
rc
 = 
	`ngx_ªgex_exec
(
rgc
.
ªgex
, 
°r
, 
ˇ±uªs
, 
n
);

1909 i‡(
rc
 < 
NGX_REGEX_NO_MATCHED
) {

1910 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1911 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

1912 
rc
, 
°r
, 
∑âîn
);

1913  
NGX_HTTP_SSI_ERROR
;

1916 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1917  
NGX_DECLINED
;

1920 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1922 
˘x
->
nˇ±uªs
 = 
rc
;

1923 
˘x
->
ˇ±uªs
 = captures;

1924 
˘x
->
ˇ±uªs_d©a
 = 
°r
->
d©a
;

1926 i‡(
rgc
.
«med_ˇ±uªs
 > 0) {

1928 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1929 
˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

1930 (
ngx_hâp_ssi_v¨_t
));

1931 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1932  
NGX_ERROR
;

1936 
size
 = 
rgc
.
«me_size
;

1937 
p
 = 
rgc
.
«mes
;

1939 
i
 = 0; i < (
ngx_uöt_t
Ë
rgc
.
«med_ˇ±uªs
; i++, 
p
 +
size
) {

1941 
«me
.
d©a
 = &
p
[2];

1942 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1944 
n
 = 2 * ((
p
[0] << 8) +Ö[1]);

1946 
vÆue
.
d©a
 = &
°r
->d©a[
ˇ±uªs
[
n
]];

1947 
vÆue
.
Àn
 = 
ˇ±uªs
[
n
 + 1] - captures[n];

1949 
key
 = 
	`ngx_hash_°æow
(
«me
.
d©a
,Çame.d©a,Çame.
Àn
);

1951 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
«me
, 
key
);

1953 i‡(
vv
) {

1954 *
vv
 = 
vÆue
;

1958 
v¨
 = 
	`ngx_li°_push
(
˘x
->
v¨übÀs
);

1959 i‡(
v¨
 =
NULL
) {

1960  
NGX_ERROR
;

1963 
v¨
->
«me
 =Çame;

1964 
v¨
->
key
 = key;

1965 
v¨
->
vÆue
 = value;

1969  
NGX_OK
;

1973 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1975 
∑âîn
);

1976  
NGX_HTTP_SSI_ERROR
;

1979 
	}
}

1982 
ngx_öt_t


1983 
	$ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1984 
ngx_°r_t
 **
∑øms
)

1986 
ngx_öt_t
 
rc
, 
key
;

1987 
ngx_°r_t
 *
uri
, *
fûe
, *
waô
, *
£t
, *
°ub
, 
¨gs
;

1988 
ngx_buf_t
 *
b
;

1989 
ngx_uöt_t
 
Êags
, 
i
;

1990 
ngx_chaö_t
 *
˛
, *
é
, **
Œ
, *
out
;

1991 
ngx_hâp_ªque°_t
 *
§
;

1992 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1993 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

1994 
ngx_hâp_ssi_block_t
 *
bl
;

1995 
ngx_hâp_po°_subªque°_t
 *
p§
;

1997 
uri
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_VIRTUAL
];

1998 
fûe
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_FILE
];

1999 
waô
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_WAIT
];

2000 
£t
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_SET
];

2001 
°ub
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_STUB
];

2003 i‡(
uri
 && 
fûe
) {

2004 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2006 
uri
, 
fûe
);

2007  
NGX_HTTP_SSI_ERROR
;

2010 i‡(
uri
 =
NULL
 && 
fûe
 == NULL) {

2011 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2013  
NGX_HTTP_SSI_ERROR
;

2016 i‡(
£t
 && 
°ub
) {

2017 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2020  
NGX_HTTP_SSI_ERROR
;

2023 i‡(
waô
) {

2024 i‡(
uri
 =
NULL
) {

2025 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2026 "\"waô\" c™nŸ bêu£d wôh fûe=\"%V\"", 
fûe
);

2027  
NGX_HTTP_SSI_ERROR
;

2030 i‡(
waô
->
Àn
 == 2

2031 && 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "no", 2) == 0)

2033 
waô
 = 
NULL
;

2035 } i‡(
waô
->
Àn
 != 3

2036 || 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "yes", 3) != 0)

2038 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2040 
waô
);

2041  
NGX_HTTP_SSI_ERROR
;

2045 i‡(
uri
 =
NULL
) {

2046 
uri
 = 
fûe
;

2047 
waô
 = (
ngx_°r_t
 *) -1;

2050 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
uri
, 
NGX_HTTP_SSI_ADD_PREFIX
);

2052 i‡(
rc
 !
NGX_OK
) {

2053  
rc
;

2056 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2057 "ssòö˛ude: \"%V\"", 
uri
);

2059 
	`ngx_°r_nuŒ
(&
¨gs
);

2060 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2062 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2063  
NGX_HTTP_SSI_ERROR
;

2066 
p§
 = 
NULL
;

2068 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2070 i‡(
°ub
) {

2071 i‡(
m˘x
->
blocks
) {

2072 
bl
 = 
m˘x
->
blocks
->
ñts
;

2073 
i
 = 0; i < 
m˘x
->
blocks
->
√…s
; i++) {

2074 i‡(
°ub
->
Àn
 =
bl
[
i
].
«me
.len

2075 && 
	`ngx_°∫cmp
(
°ub
->
d©a
, 
bl
[
i
].
«me
.d©a, stub->
Àn
) == 0)

2077 
found
;

2082 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2083 "\"°ub\"=\"%V\" f‹ \"ö˛ude\"ÇŸ found", 
°ub
);

2084  
NGX_HTTP_SSI_ERROR
;

2086 
found
:

2088 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2089 i‡(
p§
 =
NULL
) {

2090  
NGX_ERROR
;

2093 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_°ub_ouçut
;

2095 i‡(
bl
[
i
].
cou¡
++) {

2097 
out
 = 
NULL
;

2098 
Œ
 = &
out
;

2100 
é
 = 
bl
[
i
].
bufs
;Ål;Å»é->
√xt
) {

2102 i‡(
˘x
->
‰ì
) {

2103 
˛
 = 
˘x
->
‰ì
;

2104 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

2105 
b
 = 
˛
->
buf
;

2108 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

2109 i‡(
b
 =
NULL
) {

2110  
NGX_ERROR
;

2113 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2114 i‡(
˛
 =
NULL
) {

2115  
NGX_ERROR
;

2118 
˛
->
buf
 = 
b
;

2121 
	`ngx_mem˝y
(
b
, 
é
->
buf
, (
ngx_buf_t
));

2123 
b
->
pos
 = b->
°¨t
;

2125 *
Œ
 = 
˛
;

2126 
˛
->
√xt
 = 
NULL
;

2127 
Œ
 = &
˛
->
√xt
;

2130 
p§
->
d©a
 = 
out
;

2133 
p§
->
d©a
 = 
bl
[
i
].
bufs
;

2137 i‡(
waô
) {

2138 
Êags
 |
NGX_HTTP_SUBREQUEST_WAITED
;

2141 i‡(
£t
) {

2142 
key
 = 
	`ngx_hash_°æow
(
£t
->
d©a
, së->d©a, së->
Àn
);

2144 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2145 i‡(
p§
 =
NULL
) {

2146  
NGX_ERROR
;

2149 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_£t_v¨übÀ
;

2150 
p§
->
d©a
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
£t
, 
key
);

2152 i‡(
p§
->
d©a
 =
NULL
) {

2154 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2155 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2156 (
ngx_hâp_ssi_v¨_t
));

2157 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2158  
NGX_ERROR
;

2162 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2163 i‡(
v¨
 =
NULL
) {

2164  
NGX_ERROR
;

2167 
v¨
->
«me
 = *
£t
;

2168 
v¨
->
key
 = key;

2169 
v¨
->
vÆue
 = 
ngx_hâp_ssi_nuŒ_°rög
;

2170 
p§
->
d©a
 = &
v¨
->
vÆue
;

2173 
Êags
 |
NGX_HTTP_SUBREQUEST_IN_MEMORY
|
NGX_HTTP_SUBREQUEST_WAITED
;

2176 i‡(
	`ngx_hâp_subªque°
(
r
, 
uri
, &
¨gs
, &
§
, 
p§
, 
Êags
Ë!
NGX_OK
) {

2177  
NGX_HTTP_SSI_ERROR
;

2180 i‡(
waô
 =
NULL
 && 
£t
 == NULL) {

2181  
NGX_OK
;

2184 i‡(
˘x
->
waô
 =
NULL
) {

2185 
˘x
->
waô
 = 
§
;

2187  
NGX_AGAIN
;

2190 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2194  
NGX_OK
;

2195 
	}
}

2198 
ngx_öt_t


2199 
	$ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2201 
ngx_chaö_t
 *
out
;

2203 i‡(
rc
 =
NGX_ERROR
 || 
r
->
c⁄√˘i⁄
->
îr‹
 ||Ñ->
ªque°_ouçut
) {

2204  
rc
;

2207 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2208 "ssò°ub ouçut: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2210 
out
 = 
d©a
;

2212 i‡(!
r
->
hódî_£¡
) {

2213 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =

2214 
r
->
∑ª¡
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

2215 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 =Ñ->
∑ª¡
->headers_out.content_type;

2217 i‡(
	`ngx_hâp_£nd_hódî
(
r
Ë=
NGX_ERROR
) {

2218  
NGX_ERROR
;

2222  
	`ngx_hâp_ouçut_fûãr
(
r
, 
out
);

2223 
	}
}

2226 
ngx_öt_t


2227 
	$ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2229 
ngx_°r_t
 *
vÆue
 = 
d©a
;

2231 i‡(
r
->
up°ªam
) {

2232 
vÆue
->
Àn
 = 
r
->
up°ªam
->
buf„r
.
œ°
 -Ñ->up°ªam->buf„r.
pos
;

2233 
vÆue
->
d©a
 = 
r
->
up°ªam
->
buf„r
.
pos
;

2236  
rc
;

2237 
	}
}

2240 
ngx_öt_t


2241 
	$ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2242 
ngx_°r_t
 **
∑øms
)

2244 
u_ch¨
 *
p
;

2245 
uöçå_t
 
Àn
;

2246 
ngx_öt_t
 
key
;

2247 
ngx_buf_t
 *
b
;

2248 
ngx_°r_t
 *
v¨
, *
vÆue
, *
íc
, 
ãxt
;

2249 
ngx_chaö_t
 *
˛
;

2250 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2252 
v¨
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_VAR
];

2254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2255 "ssòechÿ\"%V\"", 
v¨
);

2257 
key
 = 
	`ngx_hash_°æow
(
v¨
->
d©a
, v¨->d©a, v¨->
Àn
);

2259 
vÆue
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2261 i‡(
vÆue
 =
NULL
) {

2262 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2264 i‡(
vv
 =
NULL
) {

2265  
NGX_HTTP_SSI_ERROR
;

2268 i‡(!
vv
->
nŸ_found
) {

2269 
ãxt
.
d©a
 = 
vv
->data;

2270 
ãxt
.
Àn
 = 
vv
->len;

2271 
vÆue
 = &
ãxt
;

2275 i‡(
vÆue
 =
NULL
) {

2276 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_DEFAULT
];

2278 i‡(
vÆue
 =
NULL
) {

2279 
vÆue
 = &
ngx_hâp_ssi_n⁄e
;

2281 } i‡(
vÆue
->
Àn
 == 0) {

2282  
NGX_OK
;

2286 i‡(
vÆue
->
Àn
 == 0) {

2287  
NGX_OK
;

2291 
íc
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_ENCODING
];

2293 i‡(
íc
) {

2294 i‡(
íc
->
Àn
 =4 && 
	`ngx_°∫cmp
”nc->
d©a
, "none", 4) == 0) {

2296 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_NO_ENCODING
;

2298 } i‡(
íc
->
Àn
 =3 && 
	`ngx_°∫cmp
”nc->
d©a
, "url", 3) == 0) {

2300 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_URL_ENCODING
;

2302 } i‡(
íc
->
Àn
 =6 && 
	`ngx_°∫cmp
”nc->
d©a
, "entity", 6) == 0) {

2304 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

2307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2309 
íc
);

2313 
p
 = 
vÆue
->
d©a
;

2315 
˘x
->
ícodög
) {

2317 
NGX_HTTP_SSI_URL_ENCODING
:

2318 
Àn
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vÆue
->
d©a
, value->len,

2319 
NGX_ESCAPE_HTML
);

2321 i‡(
Àn
) {

2322 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2323 i‡(
p
 =
NULL
) {

2324  
NGX_HTTP_SSI_ERROR
;

2327 (Ë
	`ngx_esˇ≥_uri
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
, 
NGX_ESCAPE_HTML
);

2330 
Àn
 +
vÆue
->len;

2333 
NGX_HTTP_SSI_ENTITY_ENCODING
:

2334 
Àn
 = 
	`ngx_esˇ≥_html
(
NULL
, 
vÆue
->
d©a
, value->len);

2336 i‡(
Àn
) {

2337 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2338 i‡(
p
 =
NULL
) {

2339  
NGX_HTTP_SSI_ERROR
;

2342 (Ë
	`ngx_esˇ≥_html
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

2345 
Àn
 +
vÆue
->len;

2349 
Àn
 = 
vÆue
->len;

2353 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2354 i‡(
b
 =
NULL
) {

2355  
NGX_HTTP_SSI_ERROR
;

2358 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2359 i‡(
˛
 =
NULL
) {

2360  
NGX_HTTP_SSI_ERROR
;

2363 
b
->
mem‹y
 = 1;

2364 
b
->
pos
 = 
p
;

2365 
b
->
œ°
 = 
p
 + 
Àn
;

2367 
˛
->
buf
 = 
b
;

2368 
˛
->
√xt
 = 
NULL
;

2369 *
˘x
->
œ°_out
 = 
˛
;

2370 
˘x
->
œ°_out
 = &
˛
->
√xt
;

2372  
NGX_OK
;

2373 
	}
}

2376 
ngx_öt_t


2377 
	$ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2378 
ngx_°r_t
 **
∑øms
)

2380 
ngx_°r_t
 *
vÆue
;

2382 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_TIMEFMT
];

2384 i‡(
vÆue
) {

2385 
˘x
->
timefmt
.
Àn
 = 
vÆue
->len;

2386 
˘x
->
timefmt
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 + 1);

2387 i‡(
˘x
->
timefmt
.
d©a
 =
NULL
) {

2388  
NGX_HTTP_SSI_ERROR
;

2391 
	`ngx_˝y°∫
(
˘x
->
timefmt
.
d©a
, 
vÆue
->d©a, vÆue->
Àn
 + 1);

2394 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_ERRMSG
];

2396 i‡(
vÆue
) {

2397 
˘x
->
îrmsg
 = *
vÆue
;

2400  
NGX_OK
;

2401 
	}
}

2404 
ngx_öt_t


2405 
	$ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2406 
ngx_°r_t
 **
∑øms
)

2408 
ngx_öt_t
 
key
, 
rc
;

2409 
ngx_°r_t
 *
«me
, *
vÆue
, *
vv
;

2410 
ngx_hâp_ssi_v¨_t
 *
v¨
;

2411 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2413 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2415 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2416 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2417 (
ngx_hâp_ssi_v¨_t
));

2418 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2419  
NGX_ERROR
;

2423 
«me
 = 
∑øms
[
NGX_HTTP_SSI_SET_VAR
];

2424 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_SET_VALUE
];

2426 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2427 "ssò£à\"%V\" \"%V\"", 
«me
, 
vÆue
);

2429 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
vÆue
, 0);

2431 i‡(
rc
 !
NGX_OK
) {

2432  
rc
;

2435 
key
 = 
	`ngx_hash_°æow
(
«me
->
d©a
,Çame->d©a,Çame->
Àn
);

2437 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
«me
, 
key
);

2439 i‡(
vv
) {

2440 *
vv
 = *
vÆue
;

2441  
NGX_OK
;

2444 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2445 i‡(
v¨
 =
NULL
) {

2446  
NGX_ERROR
;

2449 
v¨
->
«me
 = *name;

2450 
v¨
->
key
 = key;

2451 
v¨
->
vÆue
 = *value;

2453 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2454 "£t: \"%V\"=\"%V\"", 
«me
, 
vÆue
);

2456  
NGX_OK
;

2457 
	}
}

2460 
ngx_öt_t


2461 
	$ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2462 
ngx_°r_t
 **
∑øms
)

2464 
u_ch¨
 *
p
, *
œ°
;

2465 
ngx_°r_t
 *
ex¥
, 
À·
, 
right
;

2466 
ngx_öt_t
 
rc
;

2467 
ngx_uöt_t
 
√g©ive
, 
n‹egex
, 
Êags
;

2469 i‡(
˘x
->
comm™d
.
Àn
 == 2) {

2470 i‡(
˘x
->
c⁄dôi⁄Æ
) {

2471 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2473  
NGX_HTTP_SSI_ERROR
;

2477 i‡(
˘x
->
ouçut_cho£n
) {

2478 
˘x
->
ouçut
 = 0;

2479  
NGX_OK
;

2482 
ex¥
 = 
∑øms
[
NGX_HTTP_SSI_IF_EXPR
];

2484 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2485 "ssòi‡ex¥=\"%V\"", 
ex¥
);

2487 
À·
.
d©a
 = 
ex¥
->data;

2488 
œ°
 = 
ex¥
->
d©a
 +Éx¥->
Àn
;

2490 
p
 = 
À·
.
d©a
;Ö < 
œ°
;Ö++) {

2491 i‡(*
p
 >= 'A' && *p <= 'Z') {

2492 *
p
 |= 0x20;

2496 i‡((*
p
 >= 'a' && *p <= 'z')

2497 || (*
p
 >= '0' && *p <= '9')

2498 || *
p
 == '$' || *p == '{' || *p == '}' || *p == '_'

2499 || *
p
 == '"' || *p == '\'')

2507 
À·
.
Àn
 = 
p
 -Üe·.
d©a
;

2509 
p
 < 
œ°
 && *p == ' ') {

2510 
p
++;

2513 
Êags
 = 0;

2515 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2516 "À·: \"%V\"", &
À·
);

2518 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
À·
, 
Êags
);

2520 i‡(
rc
 !
NGX_OK
) {

2521  
rc
;

2524 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2525 "evÆuãdÜe·: \"%V\"", &
À·
);

2527 i‡(
p
 =
œ°
) {

2528 i‡(
À·
.
Àn
) {

2529 
˘x
->
ouçut
 = 1;

2530 
˘x
->
ouçut_cho£n
 = 1;

2533 
˘x
->
ouçut
 = 0;

2536 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2538  
NGX_OK
;

2541 i‡(
p
 < 
œ°
 && *p == '=') {

2542 
√g©ive
 = 0;

2543 
p
++;

2545 } i‡(
p
 + 1 < 
œ°
 && *p == '!' && *(p + 1) == '=') {

2546 
√g©ive
 = 1;

2547 
p
 += 2;

2550 
övÆid_ex¥essi⁄
;

2553 
p
 < 
œ°
 && *p == ' ') {

2554 
p
++;

2557 i‡(
p
 < 
œ°
 - 1 && *p == '/') {

2558 i‡(*(
œ°
 - 1) != '/') {

2559 
övÆid_ex¥essi⁄
;

2562 
n‹egex
 = 0;

2563 
Êags
 = 
NGX_HTTP_SSI_ADD_ZERO
;

2564 
œ°
--;

2565 
p
++;

2568 
n‹egex
 = 1;

2569 
Êags
 = 0;

2571 i‡(
p
 < 
œ°
 - 1 &&Ö[0] == '\\' &&Ö[1] == '/') {

2572 
p
++;

2576 
right
.
Àn
 = 
œ°
 - 
p
;

2577 
right
.
d©a
 = 
p
;

2579 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2580 "right: \"%V\"", &
right
);

2582 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
right
, 
Êags
);

2584 i‡(
rc
 !
NGX_OK
) {

2585  
rc
;

2588 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2589 "evÆuãdÑight: \"%V\"", &
right
);

2591 i‡(
n‹egex
) {

2592 i‡(
À·
.
Àn
 !
right
.len) {

2593 
rc
 = -1;

2596 
rc
 = 
	`ngx_°∫cmp
(
À·
.
d©a
, 
right
.d©a,Ñight.
Àn
);

2600 
right
.
d©a
[right.
Àn
] = '\0';

2602 
rc
 = 
	`ngx_hâp_ssi_ªgex_m©ch
(
r
, &
right
, &
À·
);

2604 i‡(
rc
 =
NGX_OK
) {

2605 
rc
 = 0;

2606 } i‡(
rc
 =
NGX_DECLINED
) {

2607 
rc
 = -1;

2609  
rc
;

2613 i‡((
rc
 =0 && !
√g©ive
) || (rc != 0 &&Çegative)) {

2614 
˘x
->
ouçut
 = 1;

2615 
˘x
->
ouçut_cho£n
 = 1;

2618 
˘x
->
ouçut
 = 0;

2621 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2623  
NGX_OK
;

2625 
övÆid_ex¥essi⁄
:

2627 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2628 "övÆidÉx¥essi⁄ i¿\"%V\"", 
ex¥
);

2630  
NGX_HTTP_SSI_ERROR
;

2631 
	}
}

2634 
ngx_öt_t


2635 
	$ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2636 
ngx_°r_t
 **
∑øms
)

2638 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2641 i‡(
˘x
->
ouçut_cho£n
) {

2642 
˘x
->
ouçut
 = 0;

2644 
˘x
->
ouçut
 = 1;

2647 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_ELSE
;

2649  
NGX_OK
;

2650 
	}
}

2653 
ngx_öt_t


2654 
	$ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2655 
ngx_°r_t
 **
∑øms
)

2657 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2660 
˘x
->
ouçut
 = 1;

2661 
˘x
->
ouçut_cho£n
 = 0;

2662 
˘x
->
c⁄dôi⁄Æ
 = 0;

2664  
NGX_OK
;

2665 
	}
}

2668 
ngx_öt_t


2669 
	$ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2670 
ngx_°r_t
 **
∑øms
)

2672 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2673 
ngx_hâp_ssi_block_t
 *
bl
;

2675 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2678 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2680 i‡(
m˘x
->
blocks
 =
NULL
) {

2681 
m˘x
->
blocks
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 4,

2682 (
ngx_hâp_ssi_block_t
));

2683 i‡(
m˘x
->
blocks
 =
NULL
) {

2684  
NGX_HTTP_SSI_ERROR
;

2688 
bl
 = 
	`ngx_¨øy_push
(
m˘x
->
blocks
);

2689 i‡(
bl
 =
NULL
) {

2690  
NGX_HTTP_SSI_ERROR
;

2693 
bl
->
«me
 = *
∑øms
[
NGX_HTTP_SSI_BLOCK_NAME
];

2694 
bl
->
bufs
 = 
NULL
;

2695 
bl
->
cou¡
 = 0;

2697 
˘x
->
ouçut
 = 0;

2698 
˘x
->
block
 = 1;

2700  
NGX_OK
;

2701 
	}
}

2704 
ngx_öt_t


2705 
	$ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2706 
ngx_°r_t
 **
∑øms
)

2708 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2711 
˘x
->
ouçut
 = 1;

2712 
˘x
->
block
 = 0;

2714  
NGX_OK
;

2715 
	}
}

2718 
ngx_öt_t


2719 
	$ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2720 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
)

2722 
ngx_hâp_ssi_˘x_t
 *
˘x
;

2723 
ngx_time_t
 *
ç
;

2724 
ngx_°r_t
 *
timefmt
;

2725 
tm
Åm;

2726 
buf
[
NGX_HTTP_SSI_DATE_LEN
];

2728 
v
->
vÆid
 = 1;

2729 
v
->
no_ˇchóbÀ
 = 0;

2730 
v
->
nŸ_found
 = 0;

2732 
ç
 = 
	`ngx_timeofday
();

2734 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2736 
timefmt
 = 
˘x
 ? &˘x->timefmà: &
ngx_hâp_ssi_timefmt
;

2738 i‡(
timefmt
->
Àn
 == ("%s") - 1

2739 && 
timefmt
->
d©a
[0] == '%' &&Åimefmt->data[1] == 's')

2741 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
);

2742 i‡(
v
->
d©a
 =
NULL
) {

2743  
NGX_ERROR
;

2746 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%T", 
ç
->
£c
) - v->data;

2748  
NGX_OK
;

2751 i‡(
gmt
) {

2752 
	`ngx_libc_gmtime
(
ç
->
£c
, &
tm
);

2754 
	`ngx_libc_loˇ…ime
(
ç
->
£c
, &
tm
);

2757 
v
->
Àn
 = 
	`°r·ime
(
buf
, 
NGX_HTTP_SSI_DATE_LEN
,

2758 (*Ë
timefmt
->
d©a
, &
tm
);

2759 i‡(
v
->
Àn
 == 0) {

2760  
NGX_ERROR
;

2763 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2764 i‡(
v
->
d©a
 =
NULL
) {

2765  
NGX_ERROR
;

2768 
	`ngx_mem˝y
(
v
->
d©a
, 
buf
, v->
Àn
);

2770  
NGX_OK
;

2771 
	}
}

2774 
ngx_öt_t


2775 
	$ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2777 
ngx_öt_t
 
rc
;

2778 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2779 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

2780 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2782 
v
 = 
ngx_hâp_ssi_v¨s
; v->
«me
.
Àn
; v++) {

2783 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2784 i‡(
v¨
 =
NULL
) {

2785  
NGX_ERROR
;

2788 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2789 
v¨
->
d©a
 = 
v
->data;

2792 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2794 
cmd
 = 
ngx_hâp_ssi_comm™ds
; cmd->
«me
.
Àn
; cmd++) {

2795 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
cmd
->
«me
, cmd,

2796 
NGX_HASH_READONLY_KEY
);

2798 i‡(
rc
 =
NGX_OK
) {

2802 i‡(
rc
 =
NGX_BUSY
) {

2803 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2804 "c⁄Êi˘ög SSI comm™d \"%V\"", &
cmd
->
«me
);

2807  
NGX_ERROR
;

2810  
NGX_OK
;

2811 
	}
}

2815 
	$ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2817 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2819 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_maö_c⁄f_t
));

2820 i‡(
smcf
 =
NULL
) {

2821  
NULL
;

2824 
smcf
->
comm™ds
.
poﬁ
 = 
cf
->pool;

2825 
smcf
->
comm™ds
.
ãmp_poﬁ
 = 
cf
->temp_pool;

2827 i‡(
	`ngx_hash_keys_¨øy_öô
(&
smcf
->
comm™ds
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

2828  
NULL
;

2831  
smcf
;

2832 
	}
}

2836 
	$ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

2838 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

2840 
ngx_hash_öô_t
 
hash
;

2842 
hash
.hash = &
smcf
->hash;

2843 
hash
.
key
 = 
ngx_hash_key
;

2844 
hash
.
max_size
 = 1024;

2845 
hash
.
buckë_size
 = 
ngx_ˇchñöe_size
;

2846 
hash
.
«me
 = "ssi_command_hash";

2847 
hash
.
poﬁ
 = 
cf
->pool;

2848 
hash
.
ãmp_poﬁ
 = 
NULL
;

2850 i‡(
	`ngx_hash_öô
(&
hash
, 
smcf
->
comm™ds
.
keys
.
ñts
,

2851 
smcf
->
comm™ds
.
keys
.
√…s
)

2852 !
NGX_OK
)

2854  
NGX_CONF_ERROR
;

2857  
NGX_CONF_OK
;

2858 
	}
}

2862 
	$ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2864 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

2866 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_loc_c⁄f_t
));

2867 i‡(
¶cf
 =
NULL
) {

2868  
NULL
;

2878 
¶cf
->
íabÀ
 = 
NGX_CONF_UNSET
;

2879 
¶cf
->
sûít_îr‹s
 = 
NGX_CONF_UNSET
;

2880 
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 = 
NGX_CONF_UNSET
;

2881 
¶cf
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

2883 
¶cf
->
mö_fûe_chunk
 = 
NGX_CONF_UNSET_SIZE
;

2884 
¶cf
->
vÆue_Àn
 = 
NGX_CONF_UNSET_SIZE
;

2886  
¶cf
;

2887 
	}
}

2891 
	$ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2893 
ngx_hâp_ssi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2894 
ngx_hâp_ssi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2896 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

2897 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sûít_îr‹s
, 
¥ev
->silent_errors, 0);

2898 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_ªcy˛ed_buf„rs
,

2899 
¥ev
->
ign‹e_ªcy˛ed_buf„rs
, 0);

2900 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

2902 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
mö_fûe_chunk
, 
¥ev
->min_file_chunk, 1024);

2903 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
vÆue_Àn
, 
¥ev
->value_len, 255);

2905 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

2906 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

2907 
ngx_hâp_html_deÁu…_ty≥s
)

2908 !
NGX_OK
)

2910  
NGX_CONF_ERROR
;

2913  
NGX_CONF_OK
;

2914 
	}
}

2917 
ngx_öt_t


2918 
	$ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

2920 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

2921 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ssi_hódî_fûãr
;

2923 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

2924 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ssi_body_fûãr
;

2926  
NGX_OK
;

2927 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssi_filter_module.h

8 #i‚de‡
_NGX_HTTP_SSI_FILTER_H_INCLUDED_


9 
	#_NGX_HTTP_SSI_FILTER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_SSI_MAX_PARAMS
 16

	)

19 
	#NGX_HTTP_SSI_COMMAND_LEN
 32

	)

20 
	#NGX_HTTP_SSI_PARAM_LEN
 32

	)

21 
	#NGX_HTTP_SSI_PARAMS_N
 4

	)

24 
	#NGX_HTTP_SSI_COND_IF
 1

	)

25 
	#NGX_HTTP_SSI_COND_ELSE
 2

	)

28 
	#NGX_HTTP_SSI_NO_ENCODING
 0

	)

29 
	#NGX_HTTP_SSI_URL_ENCODING
 1

	)

30 
	#NGX_HTTP_SSI_ENTITY_ENCODING
 2

	)

34 
ngx_hash_t
 
	mhash
;

35 
ngx_hash_keys_¨øys_t
 
	mcomm™ds
;

36 } 
	tngx_hâp_ssi_maö_c⁄f_t
;

40 
ngx_buf_t
 *
	mbuf
;

42 
u_ch¨
 *
	mpos
;

43 
u_ch¨
 *
	mc›y_°¨t
;

44 
u_ch¨
 *
	mc›y_íd
;

46 
ngx_uöt_t
 
	mkey
;

47 
ngx_°r_t
 
	mcomm™d
;

48 
ngx_¨øy_t
 
	m∑øms
;

49 
ngx_èbÀ_ñt_t
 *
	m∑øm
;

50 
ngx_èbÀ_ñt_t
 
	m∑øms_¨øy
[
NGX_HTTP_SSI_PARAMS_N
];

52 
ngx_chaö_t
 *
	mö
;

53 
ngx_chaö_t
 *
	mout
;

54 
ngx_chaö_t
 **
	mœ°_out
;

55 
ngx_chaö_t
 *
	mbusy
;

56 
ngx_chaö_t
 *
	m‰ì
;

58 
ngx_uöt_t
 
	m°©e
;

59 
ngx_uöt_t
 
	mßved_°©e
;

60 
size_t
 
	mßved
;

61 
size_t
 
	mlooked
;

63 
size_t
 
	mvÆue_Àn
;

65 
ngx_li°_t
 *
	mv¨übÀs
;

66 
ngx_¨øy_t
 *
	mblocks
;

68 #i‡(
NGX_PCRE
)

69 
ngx_uöt_t
 
	mnˇ±uªs
;

70 *
	mˇ±uªs
;

71 
u_ch¨
 *
	mˇ±uªs_d©a
;

74 
	mc⁄dôi⁄Æ
:2;

75 
	mícodög
:2;

76 
	mblock
:1;

77 
	mouçut
:1;

78 
	mouçut_cho£n
:1;

80 
ngx_hâp_ªque°_t
 *
	mwaô
;

81 *
	mvÆue_buf
;

82 
ngx_°r_t
 
	mtimefmt
;

83 
ngx_°r_t
 
	mîrmsg
;

84 } 
	tngx_hâp_ssi_˘x_t
;

87 
	$ngx_öt_t
 (*
	tngx_hâp_ssi_comm™d_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

88 
	tngx_hâp_ssi_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 **);

92 
ngx_°r_t
 
«me
;

93 
ngx_uöt_t
 
ödex
;

95 
m™d©‹y
:1;

96 
mu…ùÀ
:1;

97 } 
	tngx_hâp_ssi_∑øm_t
;

101 
ngx_°r_t
 
«me
;

102 
ngx_hâp_ssi_comm™d_±
 
h™dÀr
;

103 
ngx_hâp_ssi_∑øm_t
 *
∑øms
;

105 
c⁄dôi⁄Æ
:2;

106 
block
:1;

107 
Êush
:1;

108 } 
	tngx_hâp_ssi_comm™d_t
;

111 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	$ngx_öt_t
 (*
	tngx_s¶_v¨übÀ_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
,

14 
	tngx_poﬁ_t
 *
	tpoﬁ
, 
	tngx_°r_t
 *
	ts
);

17 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

18 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

20 
	#NGX_HTTP_NPN_ADVERTISE
 "\x08hâp/1.1"

	)

23 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


24 
	`ngx_hâp_s¶_Æ≤_£À˘
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

25 c⁄° **
out
, *
ouéí
,

26 c⁄° *
ö
, 
öÀn
, *
¨g
);

29 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


30 
	`ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

31 c⁄° **
out
, *
ouéí
, *
¨g
);

34 
ngx_öt_t
 
	`ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

36 
ngx_öt_t
 
	`ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

39 
ngx_öt_t
 
	`ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

40 *
	`ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

41 *
	`ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

42 *
∑ª¡
, *
chûd
);

44 *
	`ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

45 *
c⁄f
);

46 *
	`ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

49 
ngx_öt_t
 
	`ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
);

52 
ngx_c⁄f_bômask_t
 
ngx_hâp_s¶_¥Ÿocﬁs
[] = {

53 { 
	`ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

54 { 
	`ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

55 { 
	`ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

56 { 
	`ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

57 { 
	`ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

58 { 
ngx_nuŒ_°rög
, 0 }

59 
	}
};

62 
ngx_c⁄f_íum_t
 
	gngx_hâp_s¶_vîify
[] = {

63 { 
ngx_°rög
("off"), 0 },

64 { 
ngx_°rög
("on"), 1 },

65 { 
ngx_°rög
("optional"), 2 },

66 { 
ngx_°rög
("optional_no_ca"), 3 },

67 { 
ngx_nuŒ_°rög
, 0 }

71 
ngx_comm™d_t
 
	gngx_hâp_s¶_comm™ds
[] = {

73 { 
ngx_°rög
("ssl"),

74 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

75 
ngx_hâp_s¶_íabÀ
,

76 
NGX_HTTP_SRV_CONF_OFFSET
,

77 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
íabÀ
),

78 
NULL
 },

80 { 
ngx_°rög
("ssl_certificate"),

81 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_c⁄f_£t_°r_¶Ÿ
,

83 
NGX_HTTP_SRV_CONF_OFFSET
,

84 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã
),

85 
NULL
 },

87 { 
ngx_°rög
("ssl_certificate_key"),

88 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

89 
ngx_c⁄f_£t_°r_¶Ÿ
,

90 
NGX_HTTP_SRV_CONF_OFFSET
,

91 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã_key
),

92 
NULL
 },

94 { 
ngx_°rög
("ssl_dhparam"),

95 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

96 
ngx_c⁄f_£t_°r_¶Ÿ
,

97 
NGX_HTTP_SRV_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
dh∑øm
),

99 
NULL
 },

101 { 
ngx_°rög
("ssl_ecdh_curve"),

102 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

103 
ngx_c⁄f_£t_°r_¶Ÿ
,

104 
NGX_HTTP_SRV_CONF_OFFSET
,

105 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
ecdh_curve
),

106 
NULL
 },

108 { 
ngx_°rög
("ssl_protocols"),

109 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

110 
ngx_c⁄f_£t_bômask_¶Ÿ
,

111 
NGX_HTTP_SRV_CONF_OFFSET
,

112 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥Ÿocﬁs
),

113 &
ngx_hâp_s¶_¥Ÿocﬁs
 },

115 { 
ngx_°rög
("ssl_ciphers"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

117 
ngx_c⁄f_£t_°r_¶Ÿ
,

118 
NGX_HTTP_SRV_CONF_OFFSET
,

119 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
cùhîs
),

120 
NULL
 },

122 { 
ngx_°rög
("ssl_buffer_size"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

124 
ngx_c⁄f_£t_size_¶Ÿ
,

125 
NGX_HTTP_SRV_CONF_OFFSET
,

126 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
buf„r_size
),

127 
NULL
 },

129 { 
ngx_°rög
("ssl_verify_client"),

130 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

131 
ngx_c⁄f_£t_íum_¶Ÿ
,

132 
NGX_HTTP_SRV_CONF_OFFSET
,

133 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify
),

134 &
ngx_hâp_s¶_vîify
 },

136 { 
ngx_°rög
("ssl_verify_depth"),

137 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

138 
ngx_c⁄f_£t_num_¶Ÿ
,

139 
NGX_HTTP_SRV_CONF_OFFSET
,

140 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify_dïth
),

141 
NULL
 },

143 { 
ngx_°rög
("ssl_client_certificate"),

144 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

145 
ngx_c⁄f_£t_°r_¶Ÿ
,

146 
NGX_HTTP_SRV_CONF_OFFSET
,

147 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

148 
NULL
 },

150 { 
ngx_°rög
("ssl_trusted_certificate"),

151 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

152 
ngx_c⁄f_£t_°r_¶Ÿ
,

153 
NGX_HTTP_SRV_CONF_OFFSET
,

154 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
åu°ed_˚πifiˇã
),

155 
NULL
 },

157 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

158 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

159 
ngx_c⁄f_£t_Êag_¶Ÿ
,

160 
NGX_HTTP_SRV_CONF_OFFSET
,

161 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

162 
NULL
 },

164 { 
ngx_°rög
("ssl_session_cache"),

165 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE12
,

166 
ngx_hâp_s¶_£ssi⁄_ˇche
,

167 
NGX_HTTP_SRV_CONF_OFFSET
,

169 
NULL
 },

171 { 
ngx_°rög
("ssl_session_tickets"),

172 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

173 
ngx_c⁄f_£t_Êag_¶Ÿ
,

174 
NGX_HTTP_SRV_CONF_OFFSET
,

175 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_tickës
),

176 
NULL
 },

178 { 
ngx_°rög
("ssl_session_ticket_key"),

179 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

180 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

181 
NGX_HTTP_SRV_CONF_OFFSET
,

182 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_tickë_keys
),

183 
NULL
 },

185 { 
ngx_°rög
("ssl_session_timeout"),

186 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

187 
ngx_c⁄f_£t_£c_¶Ÿ
,

188 
NGX_HTTP_SRV_CONF_OFFSET
,

189 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_timeout
),

190 
NULL
 },

192 { 
ngx_°rög
("ssl_crl"),

193 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

194 
ngx_c⁄f_£t_°r_¶Ÿ
,

195 
NGX_HTTP_SRV_CONF_OFFSET
,

196 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¸l
),

197 
NULL
 },

199 { 
ngx_°rög
("ssl_stapling"),

200 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

201 
ngx_c⁄f_£t_Êag_¶Ÿ
,

202 
NGX_HTTP_SRV_CONF_OFFSET
,

203 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög
),

204 
NULL
 },

206 { 
ngx_°rög
("ssl_stapling_file"),

207 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

208 
ngx_c⁄f_£t_°r_¶Ÿ
,

209 
NGX_HTTP_SRV_CONF_OFFSET
,

210 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_fûe
),

211 
NULL
 },

213 { 
ngx_°rög
("ssl_stapling_responder"),

214 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

215 
ngx_c⁄f_£t_°r_¶Ÿ
,

216 
NGX_HTTP_SRV_CONF_OFFSET
,

217 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_ª•⁄dî
),

218 
NULL
 },

220 { 
ngx_°rög
("ssl_stapling_verify"),

221 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

222 
ngx_c⁄f_£t_Êag_¶Ÿ
,

223 
NGX_HTTP_SRV_CONF_OFFSET
,

224 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_vîify
),

225 
NULL
 },

227 
ngx_nuŒ_comm™d


231 
ngx_hâp_moduÀ_t
 
	gngx_hâp_s¶_moduÀ_˘x
 = {

232 
ngx_hâp_s¶_add_v¨übÀs
,

233 
ngx_hâp_s¶_öô
,

235 
NULL
,

236 
NULL
,

238 
ngx_hâp_s¶_¸óã_§v_c⁄f
,

239 
ngx_hâp_s¶_mîge_§v_c⁄f
,

241 
NULL
,

242 
NULL


246 
ngx_moduÀ_t
 
	gngx_hâp_s¶_moduÀ
 = {

247 
NGX_MODULE_V1
,

248 &
ngx_hâp_s¶_moduÀ_˘x
,

249 
ngx_hâp_s¶_comm™ds
,

250 
NGX_HTTP_MODULE
,

251 
NULL
,

252 
NULL
,

253 
NULL
,

254 
NULL
,

255 
NULL
,

256 
NULL
,

257 
NULL
,

258 
NGX_MODULE_V1_PADDING


262 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_s¶_v¨s
[] = {

264 { 
ngx_°rög
("s¶_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

265 (
uöçå_t
Ë
ngx_s¶_gë_¥Ÿocﬁ
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

267 { 
ngx_°rög
("s¶_cùhî"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

268 (
uöçå_t
Ë
ngx_s¶_gë_cùhî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

270 { 
ngx_°rög
("s¶_£ssi⁄_id"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

271 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_id
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

273 { 
ngx_°rög
("s¶_£ssi⁄_ªu£d"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

274 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_ªu£d
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

276 { 
ngx_°rög
("s¶_˛õ¡_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

277 (
uöçå_t
Ë
ngx_s¶_gë_˚πifiˇã
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

279 { 
ngx_°rög
("s¶_˛õ¡_øw_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

280 (
uöçå_t
Ë
ngx_s¶_gë_øw_˚πifiˇã
,

281 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

283 { 
ngx_°rög
("s¶_˛õ¡_s_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

284 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

286 { 
ngx_°rög
("s¶_˛õ¡_i_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

287 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

289 { 
ngx_°rög
("s¶_˛õ¡_£rül"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

290 (
uöçå_t
Ë
ngx_s¶_gë_£rül_numbî
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

292 { 
ngx_°rög
("s¶_˛õ¡_vîify"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

293 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_vîify
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

295 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

299 
ngx_°r_t
 
	gngx_hâp_s¶_£ss_id_˘x
 = 
ngx_°rög
("HTTP");

302 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


305 
	$ngx_hâp_s¶_Æ≤_£À˘
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, c⁄° **
out
,

306 *
ouéí
, c⁄° *
ö
, 
öÀn
,

307 *
¨g
)

309 
§vÀn
;

310 *
§v
;

311 #i‡(
NGX_DEBUG
)

312 
i
;

314 #i‡(
NGX_HTTP_SPDY
)

315 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

317 #i‡(
NGX_HTTP_SPDY
 || 
NGX_DEBUG
)

318 
ngx_c⁄√˘i⁄_t
 *
c
;

320 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

323 #i‡(
NGX_DEBUG
)

324 
i
 = 0; i < 
öÀn
; i +
ö
[i] + 1) {

325 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

326 "SSL ALPN suµ‹ãd by clõ¡: %*s", 
ö
[
i
], &in[i + 1]);

330 #i‡(
NGX_HTTP_SPDY
)

331 
hc
 = 
c
->
d©a
;

333 i‡(
hc
->
addr_c⁄f
->
•dy
) {

334 
§v
 = (*Ë
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
;

335 
§vÀn
 = (
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
) - 1;

340 
§v
 = (*Ë
NGX_HTTP_NPN_ADVERTISE
;

341 
§vÀn
 = (
NGX_HTTP_NPN_ADVERTISE
) - 1;

344 i‡(
	`SSL_£À˘_√xt_¥Ÿo
((**Ë
out
, 
ouéí
, 
§v
, 
§vÀn
,

345 
ö
, 
öÀn
)

346 !
OPENSSL_NPN_NEGOTIATED
)

348  
SSL_TLSEXT_ERR_NOACK
;

351 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

352 "SSL ALPN sñe˘ed: %*s", *
ouéí
, *
out
);

354  
SSL_TLSEXT_ERR_OK
;

355 
	}
}

360 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


363 
	$ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

364 c⁄° **
out
, *
ouéí
, *
¨g
)

366 #i‡(
NGX_HTTP_SPDY
 || 
NGX_DEBUG
)

367 
ngx_c⁄√˘i⁄_t
 *
c
;

369 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

370 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "SSL NPNádvertised");

373 #i‡(
NGX_HTTP_SPDY
)

375 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

377 
hc
 = 
c
->
d©a
;

379 i‡(
hc
->
addr_c⁄f
->
•dy
) {

380 *
out
 = (*Ë
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
;

381 *
ouéí
 = (
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
) - 1;

383  
SSL_TLSEXT_ERR_OK
;

388 *
out
 = (*Ë
NGX_HTTP_NPN_ADVERTISE
;

389 *
ouéí
 = (
NGX_HTTP_NPN_ADVERTISE
) - 1;

391  
SSL_TLSEXT_ERR_OK
;

392 
	}
}

397 
ngx_öt_t


398 
	$ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

399 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

401 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

403 
size_t
 
Àn
;

404 
ngx_°r_t
 
s
;

406 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

408 (Ë
	`h™dÀr
(
r
->
c⁄√˘i⁄
, 
NULL
, &
s
);

410 
v
->
d©a
 = 
s
.data;

412 
Àn
 = 0; 
v
->
d©a
[len];Üen++) { }

414 
v
->
Àn
 =Üen;

415 
v
->
vÆid
 = 1;

416 
v
->
no_ˇchóbÀ
 = 0;

417 
v
->
nŸ_found
 = 0;

419  
NGX_OK
;

422 
v
->
nŸ_found
 = 1;

424  
NGX_OK
;

425 
	}
}

428 
ngx_öt_t


429 
	$ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

430 
uöçå_t
 
d©a
)

432 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

434 
ngx_°r_t
 
s
;

436 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

438 i‡(
	`h™dÀr
(
r
->
c⁄√˘i⁄
,Ñ->
poﬁ
, &
s
Ë!
NGX_OK
) {

439  
NGX_ERROR
;

442 
v
->
Àn
 = 
s
.len;

443 
v
->
d©a
 = 
s
.data;

445 i‡(
v
->
Àn
) {

446 
v
->
vÆid
 = 1;

447 
v
->
no_ˇchóbÀ
 = 0;

448 
v
->
nŸ_found
 = 0;

450  
NGX_OK
;

454 
v
->
nŸ_found
 = 1;

456  
NGX_OK
;

457 
	}
}

460 
ngx_öt_t


461 
	$ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

463 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

465 
v
 = 
ngx_hâp_s¶_v¨s
; v->
«me
.
Àn
; v++) {

466 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

467 i‡(
v¨
 =
NULL
) {

468  
NGX_ERROR
;

471 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

472 
v¨
->
d©a
 = 
v
->data;

475  
NGX_OK
;

476 
	}
}

480 
	$ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

482 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

484 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_s¶_§v_c⁄f_t
));

485 i‡(
sscf
 =
NULL
) {

486  
NULL
;

506 
sscf
->
íabÀ
 = 
NGX_CONF_UNSET
;

507 
sscf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

508 
sscf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

509 
sscf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

510 
sscf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

511 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

512 
sscf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

513 
sscf
->
£ssi⁄_tickës
 = 
NGX_CONF_UNSET
;

514 
sscf
->
£ssi⁄_tickë_keys
 = 
NGX_CONF_UNSET_PTR
;

515 
sscf
->
°≠lög
 = 
NGX_CONF_UNSET
;

516 
sscf
->
°≠lög_vîify
 = 
NGX_CONF_UNSET
;

518  
sscf
;

519 
	}
}

523 
	$ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

525 
ngx_hâp_s¶_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

526 
ngx_hâp_s¶_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

528 
ngx_poﬁ_˛ónup_t
 *
˛n
;

530 i‡(
c⁄f
->
íabÀ
 =
NGX_CONF_UNSET
) {

531 i‡(
¥ev
->
íabÀ
 =
NGX_CONF_UNSET
) {

532 
c⁄f
->
íabÀ
 = 0;

535 
c⁄f
->
íabÀ
 = 
¥ev
->enable;

536 
c⁄f
->
fûe
 = 
¥ev
->file;

537 
c⁄f
->
löe
 = 
¥ev
->line;

541 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

542 
¥ev
->
£ssi⁄_timeout
, 300);

544 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

545 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

547 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

548 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


549 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

551 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

552 
NGX_SSL_BUFSIZE
);

554 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

555 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

557 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

558 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

560 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

562 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
, 
¥ev
->client_certificate,

564 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
åu°ed_˚πifiˇã
,

565 
¥ev
->
åu°ed_˚πifiˇã
, "");

566 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

568 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

569 
NGX_DEFAULT_ECDH_CURVE
);

571 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

573 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög
, 
¥ev
->stapling, 0);

574 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög_vîify
, 
¥ev
->stapling_verify, 0);

575 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_fûe
, 
¥ev
->stapling_file, "");

576 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_ª•⁄dî
,

577 
¥ev
->
°≠lög_ª•⁄dî
, "");

579 
c⁄f
->
s¶
.
log
 = 
cf
->log;

581 i‡(
c⁄f
->
íabÀ
) {

583 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

584 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

587 
c⁄f
->
fûe
, c⁄f->
löe
);

588  
NGX_CONF_ERROR
;

591 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

592 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

595 
c⁄f
->
fûe
, c⁄f->
löe
);

596  
NGX_CONF_ERROR
;

601 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

602  
NGX_CONF_OK
;

605 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

606 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

608 "f‹ cîtifiˇã \"%V\"", &
c⁄f
->
˚πifiˇã
);

609  
NGX_CONF_ERROR
;

613 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, c⁄fË!
NGX_OK
) {

614  
NGX_CONF_ERROR
;

617 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


619 i‡(
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
c⁄f
->
s¶
.
˘x
,

620 
ngx_hâp_s¶_£rvî«me
)

623 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

631 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


632 
	`SSL_CTX_£t_Æ≤_£À˘_cb
(
c⁄f
->
s¶
.
˘x
, 
ngx_hâp_s¶_Æ≤_£À˘
, 
NULL
);

635 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


636 
	`SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
c⁄f
->
s¶
.
˘x
,

637 
ngx_hâp_s¶_≈n_advîti£d
, 
NULL
);

640 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

641 i‡(
˛n
 =
NULL
) {

642  
NGX_CONF_ERROR
;

645 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

646 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

648 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

649 &
c⁄f
->
˚πifiˇã_key
)

650 !
NGX_OK
)

652  
NGX_CONF_ERROR
;

655 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

656 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

659 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

661 &
c⁄f
->
cùhîs
);

662  
NGX_CONF_ERROR
;

665 
c⁄f
->
s¶
.
buf„r_size
 = conf->buffer_size;

667 i‡(
c⁄f
->
vîify
) {

669 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

670 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

672  
NGX_CONF_ERROR
;

675 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

676 &
c⁄f
->
˛õ¡_˚πifiˇã
,

677 
c⁄f
->
vîify_dïth
)

678 !
NGX_OK
)

680  
NGX_CONF_ERROR
;

684 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

685 &
c⁄f
->
åu°ed_˚πifiˇã
,

686 
c⁄f
->
vîify_dïth
)

687 !
NGX_OK
)

689  
NGX_CONF_ERROR
;

692 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

693  
NGX_CONF_ERROR
;

696 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

697 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

701 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

703 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

704  
NGX_CONF_ERROR
;

707 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

708  
NGX_CONF_ERROR
;

711 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

712 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

714 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

715 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

718 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_hâp_s¶_£ss_id_˘x
,

719 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

720 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

721 !
NGX_OK
)

723  
NGX_CONF_ERROR
;

726 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_tickës
, 
¥ev
->session_tickets, 1);

728 #ifde‡
SSL_OP_NO_TICKET


729 i‡(!
c⁄f
->
£ssi⁄_tickës
) {

730 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_NO_TICKET
);

734 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£ssi⁄_tickë_keys
,

735 
¥ev
->
£ssi⁄_tickë_keys
, 
NULL
);

737 i‡(
	`ngx_s¶_£ssi⁄_tickë_keys
(
cf
, &
c⁄f
->
s¶
, c⁄f->
£ssi⁄_tickë_keys
)

738 !
NGX_OK
)

740  
NGX_CONF_ERROR
;

743 i‡(
c⁄f
->
°≠lög
) {

745 i‡(
	`ngx_s¶_°≠lög
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
°≠lög_fûe
,

746 &
c⁄f
->
°≠lög_ª•⁄dî
, c⁄f->
°≠lög_vîify
)

747 !
NGX_OK
)

749  
NGX_CONF_ERROR
;

754  
NGX_CONF_OK
;

755 
	}
}

759 
	$ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

761 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

763 *
rv
;

765 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

767 i‡(
rv
 !
NGX_CONF_OK
) {

768  
rv
;

771 
sscf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

772 
sscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

774  
NGX_CONF_OK
;

775 
	}
}

779 
	$ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

781 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

783 
size_t
 
Àn
;

784 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

785 
ngx_öt_t
 
n
;

786 
ngx_uöt_t
 
i
, 
j
;

788 
vÆue
 = 
cf
->
¨gs
->
ñts
;

790 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

792 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

793 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

797 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

798 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

802 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

803 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

807 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

808 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

811 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

812 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

814 i‡(
n
 =
NGX_ERROR
) {

815 
övÆid
;

818 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

823 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

824 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

827 
Àn
 = 0;

829 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

830 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

834 
Àn
++;

837 i‡(
Àn
 == 0) {

838 
övÆid
;

841 
«me
.
Àn
 =Üen;

842 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

844 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

845 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

847 
n
 = 
	`ngx_∑r£_size
(&
size
);

849 i‡(
n
 =
NGX_ERROR
) {

850 
övÆid
;

853 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

854 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

856 &
vÆue
[
i
]);

858  
NGX_CONF_ERROR
;

861 
sscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

862 &
ngx_hâp_s¶_moduÀ
);

863 i‡(
sscf
->
shm_z⁄e
 =
NULL
) {

864  
NGX_CONF_ERROR
;

867 
sscf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

872 
övÆid
;

875 i‡(
sscf
->
shm_z⁄e
 && sscf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

876 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

879  
NGX_CONF_OK
;

881 
övÆid
:

883 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

884 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

886  
NGX_CONF_ERROR
;

887 
	}
}

890 
ngx_öt_t


891 
	$ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
)

893 
ngx_uöt_t
 
s
;

894 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

895 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

896 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

897 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

899 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

900 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

902 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

904 
sscf
 = 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
ngx_hâp_s¶_moduÀ
.
˘x_ödex
];

906 i‡(
sscf
->
s¶
.
˘x
 =
NULL
 || !sscf->
°≠lög
) {

910 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

912 i‡(
	`ngx_s¶_°≠lög_ªsﬁvî
(
cf
, &
sscf
->
s¶
, 
˛cf
->
ªsﬁvî
,

913 
˛cf
->
ªsﬁvî_timeout
)

914 !
NGX_OK
)

916  
NGX_ERROR
;

920  
NGX_OK
;

921 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssl_module.h

8 #i‚de‡
_NGX_HTTP_SSL_H_INCLUDED_


9 
	#_NGX_HTTP_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
ngx_Êag_t
 
	míabÀ
;

20 
ngx_s¶_t
 
	ms¶
;

22 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

24 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

26 
ngx_uöt_t
 
	mvîify
;

27 
ngx_uöt_t
 
	mvîify_dïth
;

29 
size_t
 
	mbuf„r_size
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

39 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

40 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

41 
ngx_°r_t
 
	m¸l
;

43 
ngx_°r_t
 
	mcùhîs
;

45 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

47 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

48 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

50 
ngx_Êag_t
 
	m°≠lög
;

51 
ngx_Êag_t
 
	m°≠lög_vîify
;

52 
ngx_°r_t
 
	m°≠lög_fûe
;

53 
ngx_°r_t
 
	m°≠lög_ª•⁄dî
;

55 
u_ch¨
 *
	mfûe
;

56 
ngx_uöt_t
 
	mlöe
;

57 } 
	tngx_hâp_s¶_§v_c⁄f_t
;

60 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

17 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ_˘x
 = {

18 
NULL
,

19 
ngx_hâp_°©ic_öô
,

21 
NULL
,

22 
NULL
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL


32 
ngx_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 &
ngx_hâp_°©ic_moduÀ_˘x
,

35 
NULL
,

36 
NGX_HTTP_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


48 
ngx_öt_t


49 
	$ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

51 
u_ch¨
 *
œ°
, *
loˇti⁄
;

52 
size_t
 
roŸ
, 
Àn
;

53 
ngx_°r_t
 
∑th
;

54 
ngx_öt_t
 
rc
;

55 
ngx_uöt_t
 
Àvñ
;

56 
ngx_log_t
 *
log
;

57 
ngx_buf_t
 *
b
;

58 
ngx_chaö_t
 
out
;

59 
ngx_›í_fûe_öfo_t
 
of
;

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

62 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

63  
NGX_HTTP_NOT_ALLOWED
;

66 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

67  
NGX_DECLINED
;

70 
log
 = 
r
->
c⁄√˘i⁄
->log;

77 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

78 i‡(
œ°
 =
NULL
) {

79  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

82 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

84 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

85 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

87 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

89 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

91 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

92 
of
.
dúe˘io
 = 
˛cf
->directio;

93 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

94 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

95 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

96 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

98 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

99  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

102 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

103 !
NGX_OK
)

105 
of
.
îr
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

110 
NGX_ENOENT
:

111 
NGX_ENOTDIR
:

112 
NGX_ENAMETOOLONG
:

114 
Àvñ
 = 
NGX_LOG_ERR
;

115 
rc
 = 
NGX_HTTP_NOT_FOUND
;

118 
NGX_EACCES
:

119 #i‡(
NGX_HAVE_OPENAT
)

120 
NGX_EMLINK
:

121 
NGX_ELOOP
:

124 
Àvñ
 = 
NGX_LOG_ERR
;

125 
rc
 = 
NGX_HTTP_FORBIDDEN
;

130 
Àvñ
 = 
NGX_LOG_CRIT
;

131 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

135 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

136 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

137 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

140  
rc
;

143 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

145 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

147 i‡(
of
.
is_dú
) {

149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

151 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

153 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

154 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

155  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

158 
Àn
 = 
r
->
uri
.len + 1;

160 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
 && 
r
->
¨gs
.
Àn
 == 0) {

161 
loˇti⁄
 = 
∑th
.
d©a
 + 
˛cf
->
roŸ
.
Àn
;

163 *
œ°
 = '/';

166 i‡(
r
->
¨gs
.
Àn
) {

167 
Àn
 +
r
->
¨gs
.len + 1;

170 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

171 i‡(
loˇti⁄
 =
NULL
) {

172  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

175 
œ°
 = 
	`ngx_c›y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

177 *
œ°
 = '/';

179 i‡(
r
->
¨gs
.
Àn
) {

180 *++
œ°
 = '?';

181 
	`ngx_mem˝y
(++
œ°
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

190 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

191 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

193  
NGX_HTTP_MOVED_PERMANENTLY
;

196 #i‡!(
NGX_WIN32
)

198 i‡(!
of
.
is_fûe
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

200 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

202  
NGX_HTTP_NOT_FOUND
;

207 i‡(
r
->
mëhod
 & 
NGX_HTTP_POST
) {

208  
NGX_HTTP_NOT_ALLOWED
;

211 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

213 i‡(
rc
 !
NGX_OK
) {

214  
rc
;

217 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

219 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

220 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

221 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

223 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

228  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

231 i‡(
r
 !r->
maö
 && 
of
.
size
 == 0) {

232  
	`ngx_hâp_£nd_hódî
(
r
);

235 
r
->
Ælow_ønges
 = 1;

239 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

240 i‡(
b
 =
NULL
) {

241  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

244 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

245 i‡(
b
->
fûe
 =
NULL
) {

246  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

249 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

251 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

252  
rc
;

255 
b
->
fûe_pos
 = 0;

256 
b
->
fûe_œ°
 = 
of
.
size
;

258 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

259 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

260 
b
->
œ°_ö_chaö
 = 1;

262 
b
->
fûe
->
fd
 = 
of
.fd;

263 
b
->
fûe
->
«me
 = 
∑th
;

264 
b
->
fûe
->
log
 =Üog;

265 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

267 
out
.
buf
 = 
b
;

268 
out
.
√xt
 = 
NULL
;

270  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

271 
	}
}

274 
ngx_öt_t


275 
	$ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

277 
ngx_hâp_h™dÀr_±
 *
h
;

278 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

280 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

282 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

283 i‡(
h
 =
NULL
) {

284  
NGX_ERROR
;

287 *
h
 = 
ngx_hâp_°©ic_h™dÀr
;

289  
NGX_OK
;

290 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_stub_status_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

15 
ngx_öt_t
 
ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

17 *
ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

18 *
c⁄f
);

20 
ngx_comm™d_t
 
	gngx_hâp_°©us_comm™ds
[] = {

22 { 
ngx_°rög
("stub_status"),

23 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

24 
ngx_hâp_£t_°©us
,

27 
NULL
 },

29 
ngx_nuŒ_comm™d


34 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ_˘x
 = {

35 
ngx_hâp_°ub_°©us_add_v¨übÀs
,

36 
NULL
,

38 
NULL
,

39 
NULL
,

41 
NULL
,

42 
NULL
,

44 
NULL
,

45 
NULL


49 
ngx_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ
 = {

50 
NGX_MODULE_V1
,

51 &
ngx_hâp_°ub_°©us_moduÀ_˘x
,

52 
ngx_hâp_°©us_comm™ds
,

53 
NGX_HTTP_MODULE
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NGX_MODULE_V1_PADDING


65 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_°ub_°©us_v¨s
[] = {

67 { 
ngx_°rög
("c⁄√˘i⁄s_a˘ive"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

68 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

70 { 
ngx_°rög
("c⁄√˘i⁄s_ªadög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

71 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

73 { 
ngx_°rög
("c⁄√˘i⁄s_wrôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

74 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

76 { 
ngx_°rög
("c⁄√˘i⁄s_waôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

77 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

79 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

83 
ngx_öt_t
 
	$ngx_hâp_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

85 
size_t
 
size
;

86 
ngx_öt_t
 
rc
;

87 
ngx_buf_t
 *
b
;

88 
ngx_chaö_t
 
out
;

89 
ngx_©omic_öt_t
 
≠
, 
hn
, 
ac
, 
rq
, 
rd
, 
wr
, 
wa
;

91 i‡(
r
->
mëhod
 !
NGX_HTTP_GET
 &&Ñ->mëhod !
NGX_HTTP_HEAD
) {

92  
NGX_HTTP_NOT_ALLOWED
;

95 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

97 i‡(
rc
 !
NGX_OK
) {

98  
rc
;

101 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/plain") - 1;

102 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

103 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

105 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

106 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

108 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

110 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

111  
rc
;

115 
size
 = ("A˘ivêc⁄√˘i⁄s: \n"Ë+ 
NGX_ATOMIC_T_LEN


117 + 6 + 3 * 
NGX_ATOMIC_T_LEN


118 + ("Ródög: Wrôög: Waôög: \n"Ë+ 3 * 
NGX_ATOMIC_T_LEN
;

120 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

121 i‡(
b
 =
NULL
) {

122  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

125 
out
.
buf
 = 
b
;

126 
out
.
√xt
 = 
NULL
;

128 
≠
 = *
ngx_°©_ac˚±ed
;

129 
hn
 = *
ngx_°©_h™dÀd
;

130 
ac
 = *
ngx_°©_a˘ive
;

131 
rq
 = *
ngx_°©_ªque°s
;

132 
rd
 = *
ngx_°©_ªadög
;

133 
wr
 = *
ngx_°©_wrôög
;

134 
wa
 = *
ngx_°©_waôög
;

136 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "A˘ivêc⁄√˘i⁄s: %uA \n", 
ac
);

138 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "serveráccepts handledÑequests\n",

141 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %uA %uA %uA \n", 
≠
, 
hn
, 
rq
);

143 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "Reading: %uA Writing: %uA Waiting: %uA \n",

144 
rd
, 
wr
, 
wa
);

146 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

147 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

149 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

150 
b
->
œ°_ö_chaö
 = 1;

152 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

154 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

155  
rc
;

158  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

159 
	}
}

162 
ngx_öt_t


163 
	$ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

164 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

166 
u_ch¨
 *
p
;

167 
ngx_©omic_öt_t
 
vÆue
;

169 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

170 i‡(
p
 =
NULL
) {

171  
NGX_ERROR
;

174 
d©a
) {

176 
vÆue
 = *
ngx_°©_a˘ive
;

180 
vÆue
 = *
ngx_°©_ªadög
;

184 
vÆue
 = *
ngx_°©_wrôög
;

188 
vÆue
 = *
ngx_°©_waôög
;

193 
vÆue
 = 0;

197 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
vÆue
) -Ö;

198 
v
->
vÆid
 = 1;

199 
v
->
no_ˇchóbÀ
 = 0;

200 
v
->
nŸ_found
 = 0;

201 
v
->
d©a
 = 
p
;

203  
NGX_OK
;

204 
	}
}

207 
ngx_öt_t


208 
	$ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

210 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

212 
v
 = 
ngx_hâp_°ub_°©us_v¨s
; v->
«me
.
Àn
; v++) {

213 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

214 i‡(
v¨
 =
NULL
) {

215  
NGX_ERROR
;

218 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

219 
v¨
->
d©a
 = 
v
->data;

222  
NGX_OK
;

223 
	}
}

226 *
	$ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

228 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

230 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

231 
˛cf
->
h™dÀr
 = 
ngx_hâp_°©us_h™dÀr
;

233  
NGX_CONF_OK
;

234 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_sub_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mm©ch
;

15 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

17 
ngx_hash_t
 
	mty≥s
;

19 
ngx_Êag_t
 
	m⁄˚
;

20 
ngx_Êag_t
 
	mœ°_modifõd
;

22 
ngx_¨øy_t
 *
	mty≥s_keys
;

23 } 
	tngx_hâp_sub_loc_c⁄f_t
;

27 
	msub_°¨t_°©e
 = 0,

28 
	msub_m©ch_°©e
,

29 } 
	tngx_hâp_sub_°©e_e
;

33 
ngx_°r_t
 
	mm©ch
;

34 
ngx_°r_t
 
	mßved
;

35 
ngx_°r_t
 
	mlooked
;

37 
ngx_uöt_t
 
	m⁄˚
;

39 
ngx_buf_t
 *
	mbuf
;

41 
u_ch¨
 *
	mpos
;

42 
u_ch¨
 *
	mc›y_°¨t
;

43 
u_ch¨
 *
	mc›y_íd
;

45 
ngx_chaö_t
 *
	mö
;

46 
ngx_chaö_t
 *
	mout
;

47 
ngx_chaö_t
 **
	mœ°_out
;

48 
ngx_chaö_t
 *
	mbusy
;

49 
ngx_chaö_t
 *
	m‰ì
;

51 
ngx_°r_t
 
	msub
;

53 
ngx_uöt_t
 
	m°©e
;

54 } 
	tngx_hâp_sub_˘x_t
;

57 
ngx_öt_t
 
ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_hâp_sub_˘x_t
 *
˘x
);

59 
ngx_öt_t
 
ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_sub_˘x_t
 *
˘x
);

62 * 
ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

65 *
ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

66 *
∑ª¡
, *
chûd
);

67 
ngx_öt_t
 
ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

70 
ngx_comm™d_t
 
	gngx_hâp_sub_fûãr_comm™ds
[] = {

72 { 
ngx_°rög
("sub_filter"),

73 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

74 
ngx_hâp_sub_fûãr
,

75 
NGX_HTTP_LOC_CONF_OFFSET
,

77 
NULL
 },

79 { 
ngx_°rög
("sub_filter_types"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

81 
ngx_hâp_ty≥s_¶Ÿ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
ty≥s_keys
),

84 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

86 { 
ngx_°rög
("sub_filter_once"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
⁄˚
),

91 
NULL
 },

93 { 
ngx_°rög
("sub_filter_last_modified"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

95 
ngx_c⁄f_£t_Êag_¶Ÿ
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
œ°_modifõd
),

98 
NULL
 },

100 
ngx_nuŒ_comm™d


104 
ngx_hâp_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ_˘x
 = {

105 
NULL
,

106 
ngx_hâp_sub_fûãr_öô
,

108 
NULL
,

109 
NULL
,

111 
NULL
,

112 
NULL
,

114 
ngx_hâp_sub_¸óã_c⁄f
,

115 
ngx_hâp_sub_mîge_c⁄f


119 
ngx_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ
 = {

120 
NGX_MODULE_V1
,

121 &
ngx_hâp_sub_fûãr_moduÀ_˘x
,

122 
ngx_hâp_sub_fûãr_comm™ds
,

123 
NGX_HTTP_MODULE
,

124 
NULL
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NGX_MODULE_V1_PADDING


135 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

136 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

139 
ngx_öt_t


140 
	$ngx_hâp_sub_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

142 
ngx_hâp_sub_˘x_t
 *
˘x
;

143 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

145 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

147 i‡(
¶cf
->
m©ch
.
Àn
 == 0

148 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

149 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

151  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

154 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_sub_˘x_t
));

155 i‡(
˘x
 =
NULL
) {

156  
NGX_ERROR
;

159 
˘x
->
ßved
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

160 i‡(
˘x
->
ßved
.
d©a
 =
NULL
) {

161  
NGX_ERROR
;

164 
˘x
->
looked
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

165 i‡(
˘x
->
looked
.
d©a
 =
NULL
) {

166  
NGX_ERROR
;

169 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_sub_fûãr_moduÀ
);

171 
˘x
->
m©ch
 = 
¶cf
->match;

172 
˘x
->
œ°_out
 = &˘x->
out
;

174 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

176 i‡(
r
 =r->
maö
) {

177 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

178 
	`ngx_hâp_˛ór_ëag
(
r
);

180 i‡(!
¶cf
->
œ°_modifõd
) {

181 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

185  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

186 
	}
}

189 
ngx_öt_t


190 
	$ngx_hâp_sub_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

192 
ngx_öt_t
 
rc
;

193 
ngx_buf_t
 *
b
;

194 
ngx_chaö_t
 *
˛
;

195 
ngx_hâp_sub_˘x_t
 *
˘x
;

196 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

198 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

200 i‡(
˘x
 =
NULL
) {

201  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

204 i‡((
ö
 =
NULL


205 && 
˘x
->
buf
 =
NULL


206 && 
˘x
->
ö
 =
NULL


207 && 
˘x
->
busy
 =
NULL
))

209  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

212 i‡(
˘x
->
⁄˚
 && (˘x->
buf
 =
NULL
 || ctx->
ö
 == NULL)) {

214 i‡(
˘x
->
busy
) {

215 i‡(
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

216  
NGX_ERROR
;

220  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

225 i‡(
ö
) {

226 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

227  
NGX_ERROR
;

231 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

232 "hâ∞sub fûã∏\"%V\"", &
r
->
uri
);

234 
˘x
->
ö
 || ctx->
buf
) {

236 i‡(
˘x
->
buf
 =
NULL
) {

237 
˘x
->
buf
 = ctx->
ö
->buf;

238 
˘x
->
ö
 = ctx->ö->
√xt
;

239 
˘x
->
pos
 = ctx->
buf
->pos;

242 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

243 
˘x
->
c›y_°¨t
 = ctx->
pos
;

244 
˘x
->
c›y_íd
 = ctx->
pos
;

247 
b
 = 
NULL
;

249 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

251 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

252 "ßved: \"%V\" sèã: %d", &
˘x
->
ßved
, ctx->
°©e
);

254 
rc
 = 
	`ngx_hâp_sub_∑r£
(
r
, 
˘x
);

256 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

258 
rc
, &
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

260 i‡(
rc
 =
NGX_ERROR
) {

261  
rc
;

264 i‡(
˘x
->
ßved
.
Àn
) {

266 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

267 "ßved: \"%V\"", &
˘x
->
ßved
);

269 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

270 i‡(
˛
 =
NULL
) {

271  
NGX_ERROR
;

274 
b
 = 
˛
->
buf
;

276 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

278 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
ßved
.
Àn
);

279 i‡(
b
->
pos
 =
NULL
) {

280  
NGX_ERROR
;

283 
	`ngx_mem˝y
(
b
->
pos
, 
˘x
->
ßved
.
d©a
, ctx->ßved.
Àn
);

284 
b
->
œ°
 = b->
pos
 + 
˘x
->
ßved
.
Àn
;

285 
b
->
mem‹y
 = 1;

287 *
˘x
->
œ°_out
 = 
˛
;

288 
˘x
->
œ°_out
 = &
˛
->
√xt
;

290 
˘x
->
ßved
.
Àn
 = 0;

293 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

295 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

296 i‡(
˛
 =
NULL
) {

297  
NGX_ERROR
;

300 
b
 = 
˛
->
buf
;

302 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

304 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

305 
b
->
œ°
 = 
˘x
->
c›y_íd
;

306 
b
->
shadow
 = 
NULL
;

307 
b
->
œ°_buf
 = 0;

308 
b
->
ªcy˛ed
 = 0;

310 i‡(
b
->
ö_fûe
) {

311 
b
->
fûe_œ°
 = b->
fûe_pos
 + (b->
œ°
 - 
˘x
->
buf
->
pos
);

312 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

315 *
˘x
->
œ°_out
 = 
˛
;

316 
˘x
->
œ°_out
 = &
˛
->
√xt
;

319 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

320 
˘x
->
c›y_°¨t
 = ctx->
pos
;

321 
˘x
->
c›y_íd
 = ctx->
pos
;

324 
˘x
->
c›y_°¨t
 = 
NULL
;

325 
˘x
->
c›y_íd
 = 
NULL
;

328 i‡(
˘x
->
looked
.
Àn
 > (
size_t
Ë(˘x->
pos
 - ctx->
buf
->pos)) {

329 
˘x
->
ßved
.
Àn
 = ctx->
looked
.À¿- (˘x->
pos
 - ctx->
buf
->pos);

330 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->ßved.
Àn
);

333 i‡(
rc
 =
NGX_AGAIN
) {

340 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

341 i‡(
˛
 =
NULL
) {

342  
NGX_ERROR
;

345 
b
 = 
˛
->
buf
;

347 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

349 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

351 i‡(
˘x
->
sub
.
d©a
 =
NULL
) {

353 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¶cf
->
vÆue
, &
˘x
->
sub
)

354 !
NGX_OK
)

356  
NGX_ERROR
;

360 i‡(
˘x
->
sub
.
Àn
) {

361 
b
->
mem‹y
 = 1;

362 
b
->
pos
 = 
˘x
->
sub
.
d©a
;

363 
b
->
œ°
 = 
˘x
->
sub
.
d©a
 + ctx->sub.
Àn
;

366 
b
->
sync
 = 1;

369 *
˘x
->
œ°_out
 = 
˛
;

370 
˘x
->
œ°_out
 = &
˛
->
√xt
;

372 
˘x
->
⁄˚
 = 
¶cf
->once;

377 i‡(
˘x
->
buf
->
œ°_buf
 && ctx->
looked
.
Àn
) {

378 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

379 i‡(
˛
 =
NULL
) {

380  
NGX_ERROR
;

383 
b
 = 
˛
->
buf
;

385 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

387 
b
->
pos
 = 
˘x
->
looked
.
d©a
;

388 
b
->
œ°
 = b->
pos
 + 
˘x
->
looked
.
Àn
;

389 
b
->
mem‹y
 = 1;

391 *
˘x
->
œ°_out
 = 
˛
;

392 
˘x
->
œ°_out
 = &
˛
->
√xt
;

394 
˘x
->
looked
.
Àn
 = 0;

397 i‡(
˘x
->
buf
->
œ°_buf
 || ctx->buf->
Êush


398 || 
	`ngx_buf_ö_mem‹y
(
˘x
->
buf
))

400 i‡(
b
 =
NULL
) {

401 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

402 i‡(
˛
 =
NULL
) {

403  
NGX_ERROR
;

406 
b
 = 
˛
->
buf
;

408 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

410 
b
->
sync
 = 1;

412 *
˘x
->
œ°_out
 = 
˛
;

413 
˘x
->
œ°_out
 = &
˛
->
√xt
;

416 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

417 
b
->
Êush
 = 
˘x
->
buf
->flush;

418 
b
->
shadow
 = 
˘x
->
buf
;

420 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

423 
˘x
->
buf
 = 
NULL
;

425 
˘x
->
ßved
.
Àn
 = ctx->
looked
.len;

426 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->looked.
Àn
);

429 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

430  
NGX_OK
;

433  
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
);

434 
	}
}

437 
ngx_öt_t


438 
	$ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

440 
ngx_öt_t
 
rc
;

441 
ngx_buf_t
 *
b
;

442 
ngx_chaö_t
 *
˛
;

445 
b
 = 
NULL
;

446 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

447 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

448 "sub out: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

449 i‡(
˛
->
buf
 =
b
) {

450 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

452 
	`ngx_debug_poöt
();

453  
NGX_ERROR
;

455 
b
 = 
˛
->
buf
;

459 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

461 i‡(
˘x
->
busy
 =
NULL
) {

462 
˘x
->
busy
 = ctx->
out
;

465 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

466 
˛
->
√xt
 = 
˘x
->
out
;

469 
˘x
->
out
 = 
NULL
;

470 
˘x
->
œ°_out
 = &˘x->
out
;

472 
˘x
->
busy
) {

474 
˛
 = 
˘x
->
busy
;

475 
b
 = 
˛
->
buf
;

477 i‡(
	`ngx_buf_size
(
b
) != 0) {

481 i‡(
b
->
shadow
) {

482 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

485 
˘x
->
busy
 = 
˛
->
√xt
;

487 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

490 
˛
->
√xt
 = 
˘x
->
‰ì
;

491 
˘x
->
‰ì
 = 
˛
;

495 i‡(
˘x
->
ö
 || ctx->
buf
) {

496 
r
->
buf„ªd
 |
NGX_HTTP_SUB_BUFFERED
;

499 
r
->
buf„ªd
 &~
NGX_HTTP_SUB_BUFFERED
;

502  
rc
;

503 
	}
}

506 
ngx_öt_t


507 
	$ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

509 
u_ch¨
 *
p
, *
œ°
, *
c›y_íd
, 
ch
, 
m©ch
;

510 
size_t
 
looked
, 
i
;

511 
ngx_hâp_sub_°©e_e
 
°©e
;

513 i‡(
˘x
->
⁄˚
) {

514 
˘x
->
c›y_°¨t
 = ctx->
pos
;

515 
˘x
->
c›y_íd
 = ctx->
buf
->
œ°
;

516 
˘x
->
pos
 = ctx->
buf
->
œ°
;

517 
˘x
->
looked
.
Àn
 = 0;

519 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "once");

521  
NGX_AGAIN
;

524 
°©e
 = 
˘x
->state;

525 
looked
 = 
˘x
->looked.
Àn
;

526 
œ°
 = 
˘x
->
buf
->last;

527 
c›y_íd
 = 
˘x
->copy_end;

529 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

531 
ch
 = *
p
;

532 
ch
 = 
	`ngx_tﬁowî
(ch);

534 i‡(
°©e
 =
sub_°¨t_°©e
) {

538 
m©ch
 = 
˘x
->m©ch.
d©a
[0];

541 i‡(
ch
 =
m©ch
) {

542 
c›y_íd
 = 
p
;

543 
˘x
->
looked
.
d©a
[0] = *
p
;

544 
looked
 = 1;

545 
°©e
 = 
sub_m©ch_°©e
;

547 
m©ch_°¨ãd
;

550 i‡(++
p
 =
œ°
) {

554 
ch
 = *
p
;

555 
ch
 = 
	`ngx_tﬁowî
(ch);

558 
˘x
->
°©e
 = state;

559 
˘x
->
pos
 = 
p
;

560 
˘x
->
looked
.
Àn
 =Üooked;

561 
˘x
->
c›y_íd
 = 
p
;

563 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

564 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

567  
NGX_AGAIN
;

569 
m©ch_°¨ãd
:

576 i‡(
ch
 =
˘x
->
m©ch
.
d©a
[
looked
]) {

577 
˘x
->
looked
.
d©a
[looked] = *
p
;

578 
looked
++;

580 i‡(
looked
 =
˘x
->
m©ch
.
Àn
) {

582 
˘x
->
°©e
 = 
sub_°¨t_°©e
;

583 
˘x
->
pos
 = 
p
 + 1;

584 
˘x
->
looked
.
Àn
 = 0;

585 
˘x
->
ßved
.
Àn
 = 0;

586 
˘x
->
c›y_íd
 = copy_end;

588 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

589 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

592  
NGX_OK
;

601 
˘x
->
looked
.
d©a
[looked] = *
p
;

602 
looked
++;

604 
i
 = 1; i < 
looked
; i++) {

605 i‡(
	`ngx_°∫ˇ£cmp
(
˘x
->
looked
.
d©a
 + 
i
,

606 
˘x
->
m©ch
.
d©a
, 
looked
 - 
i
)

613 i‡(
i
 < 
looked
) {

614 i‡(
˘x
->
ßved
.
Àn
 > 
i
) {

615 
˘x
->
ßved
.
Àn
 = 
i
;

618 i‡((
size_t
Ë(
p
 + 1 - 
˘x
->
buf
->
pos
Ë>
looked
 - 
i
) {

619 
c›y_íd
 = 
p
 + 1 - (
looked
 - 
i
);

622 
	`ngx_memmove
(
˘x
->
looked
.
d©a
, ctx->looked.d©®+ 
i
,Üooked - i);

623 
looked
 =Üooked - 
i
;

626 
c›y_íd
 = 
p
;

627 
looked
 = 0;

628 
°©e
 = 
sub_°¨t_°©e
;

631 i‡(
˘x
->
ßved
.
Àn
) {

632 
p
++;

633 
out
;

638 
˘x
->
ßved
.
Àn
 = 0;

640 
out
:

642 
˘x
->
°©e
 = state;

643 
˘x
->
pos
 = 
p
;

644 
˘x
->
looked
.
Àn
 =Üooked;

646 
˘x
->
c›y_íd
 = (
°©e
 =
sub_°¨t_°©e
Ë? 
p
 : copy_end;

648 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

649 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

652  
NGX_AGAIN
;

653 
	}
}

657 
	$ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

659 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
 = 
c⁄f
;

661 
ngx_°r_t
 *
vÆue
;

662 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

664 i‡(
¶cf
->
m©ch
.
d©a
) {

668 
vÆue
 = 
cf
->
¨gs
->
ñts
;

670 
	`ngx_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

672 
¶cf
->
m©ch
 = 
vÆue
[1];

674 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

676 
ccv
.
cf
 = cf;

677 
ccv
.
vÆue
 = &value[2];

678 
ccv
.
com∂ex_vÆue
 = &
¶cf
->
vÆue
;

680 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

681  
NGX_CONF_ERROR
;

684  
NGX_CONF_OK
;

685 
	}
}

689 
	$ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

691 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

693 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_loc_c⁄f_t
));

694 i‡(
¶cf
 =
NULL
) {

695  
NULL
;

706 
¶cf
->
⁄˚
 = 
NGX_CONF_UNSET
;

707 
¶cf
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

709  
¶cf
;

710 
	}
}

714 
	$ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

716 
ngx_hâp_sub_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

717 
ngx_hâp_sub_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

719 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
⁄˚
, 
¥ev
->once, 1);

720 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
m©ch
, 
¥ev
->match, "");

721 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

723 i‡(
c⁄f
->
vÆue
.vÆue.
d©a
 =
NULL
) {

724 
c⁄f
->
vÆue
 = 
¥ev
->value;

727 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

728 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

729 
ngx_hâp_html_deÁu…_ty≥s
)

730 !
NGX_OK
)

732  
NGX_CONF_ERROR
;

735  
NGX_CONF_OK
;

736 
	}
}

739 
ngx_öt_t


740 
	$ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

742 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

743 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_sub_hódî_fûãr
;

745 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

746 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_sub_body_fûãr
;

748  
NGX_OK
;

749 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_upstream_ip_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

17 
ngx_uöt_t
 
	mhash
;

19 
u_ch¨
 
	maddæí
;

20 
u_ch¨
 *
	maddr
;

22 
u_ch¨
 
	måõs
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 } 
	tngx_hâp_up°ªam_ù_hash_≥î_d©a_t
;

28 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

31 *
d©a
);

32 *
ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

36 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_ù_hash_comm™ds
[] = {

38 { 
ngx_°rög
("ip_hash"),

39 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

40 
ngx_hâp_up°ªam_ù_hash
,

43 
NULL
 },

45 
ngx_nuŒ_comm™d


49 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ_˘x
 = {

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
NULL
,

57 
NULL
,

59 
NULL
,

60 
NULL


64 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ
 = {

65 
NGX_MODULE_V1
,

66 &
ngx_hâp_up°ªam_ù_hash_moduÀ_˘x
,

67 
ngx_hâp_up°ªam_ù_hash_comm™ds
,

68 
NGX_HTTP_MODULE
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NGX_MODULE_V1_PADDING


80 
u_ch¨
 
	gngx_hâp_up°ªam_ù_hash_p£udo_addr
[3];

83 
ngx_öt_t


84 
	$ngx_hâp_up°ªam_öô_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

86 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

87  
NGX_ERROR
;

90 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_ù_hash_≥î
;

92  
NGX_OK
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

100 
sockaddr_ö
 *
sö
;

101 #i‡(
NGX_HAVE_INET6
)

102 
sockaddr_ö6
 *
sö6
;

104 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
;

106 
ùhp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
));

107 i‡(
ùhp
 =
NULL
) {

108  
NGX_ERROR
;

111 
r
->
up°ªam
->
≥î
.
d©a
 = &
ùhp
->
ºp
;

113 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

114  
NGX_ERROR
;

117 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_ù_hash_≥î
;

119 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

121 
AF_INET
:

122 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

123 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
.
s_addr
;

124 
ùhp
->
addæí
 = 3;

127 #i‡(
NGX_HAVE_INET6
)

128 
AF_INET6
:

129 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

130 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö6
->
sö6_addr
.
s6_addr
;

131 
ùhp
->
addæí
 = 16;

136 
ùhp
->
addr
 = 
ngx_hâp_up°ªam_ù_hash_p£udo_addr
;

137 
ùhp
->
addæí
 = 3;

140 
ùhp
->
hash
 = 89;

141 
ùhp
->
åõs
 = 0;

142 
ùhp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

144  
NGX_OK
;

145 
	}
}

148 
ngx_öt_t


149 
	$ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

151 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
 = 
d©a
;

153 
time_t
 
now
;

154 
ngx_öt_t
 
w
;

155 
uöçå_t
 
m
;

156 
ngx_uöt_t
 
i
, 
n
, 
p
, 
hash
;

157 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

159 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

160 "gë i∞hashÖìr,Åry: %ui", 
pc
->
åõs
);

164 i‡(
ùhp
->
åõs
 > 20 || iphp->
ºp
.
≥îs
->
sögÀ
) {

165  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

168 
now
 = 
	`ngx_time
();

170 
pc
->
ˇched
 = 0;

171 
pc
->
c⁄√˘i⁄
 = 
NULL
;

173 
hash
 = 
ùhp
->hash;

177 
i
 = 0; i < (
ngx_uöt_t
Ë
ùhp
->
addæí
; i++) {

178 
hash
 = (hash * 113 + 
ùhp
->
addr
[
i
]) % 6271;

181 i‡(!
ùhp
->
ºp
.
≥îs
->
weighãd
) {

182 
p
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
numbî
;

185 
w
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
tŸÆ_weight
;

187 
i
 = 0; i < 
ùhp
->
ºp
.
≥îs
->
numbî
; i++) {

188 
w
 -
ùhp
->
ºp
.
≥îs
->
≥î
[
i
].
weight
;

189 i‡(
w
 < 0) {

194 
p
 = 
i
;

197 
n
 = 
p
 / (8 * (
uöçå_t
));

198 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

200 i‡(
ùhp
->
ºp
.
åõd
[
n
] & 
m
) {

201 
√xt
;

204 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

205 "gë i∞hashÖìr, hash: %uò%04XA", 
p
, 
m
);

207 
≥î
 = &
ùhp
->
ºp
.
≥îs
->≥î[
p
];

211 i‡(
≥î
->
down
) {

212 
√xt_åy
;

215 i‡(
≥î
->
max_Áûs


216 && 
≥î
->
Áûs
 >≥î->
max_Áûs


217 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

219 
√xt_åy
;

224 
√xt_åy
:

226 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

230 
pc
->
åõs
--;

232 
√xt
:

234 i‡(++
ùhp
->
åõs
 >= 20) {

235  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

239 
ùhp
->
ºp
.
cuºít
 = 
p
;

241 
pc
->
sockaddr
 = 
≥î
->sockaddr;

242 
pc
->
sockÀn
 = 
≥î
->socklen;

243 
pc
->
«me
 = &
≥î
->name;

245 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

246 
≥î
->
checked
 = 
now
;

251 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

252 
ùhp
->
hash
 = hash;

254  
NGX_OK
;

255 
	}
}

259 
	$ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

261 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

263 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

265 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

266 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

270 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_ù_hash
;

272 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


273 |
NGX_HTTP_UPSTREAM_WEIGHT


274 |
NGX_HTTP_UPSTREAM_MAX_FAILS


275 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


276 |
NGX_HTTP_UPSTREAM_DOWN
;

278  
NGX_CONF_OK
;

279 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_upstream_keepalive_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mmax_ˇched
;

16 
ngx_queue_t
 
	mˇche
;

17 
ngx_queue_t
 
	m‰ì
;

19 
ngx_hâp_up°ªam_öô_±
 
	m‹igöÆ_öô_up°ªam
;

20 
ngx_hâp_up°ªam_öô_≥î_±
 
	m‹igöÆ_öô_≥î
;

22 } 
	tngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
;

26 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

28 
ngx_hâp_up°ªam_t
 *
	mup°ªam
;

30 *
	md©a
;

32 
ngx_evít_gë_≥î_±
 
	m‹igöÆ_gë_≥î
;

33 
ngx_evít_‰ì_≥î_±
 
	m‹igöÆ_‰ì_≥î
;

35 #i‡(
NGX_HTTP_SSL
)

36 
ngx_evít_£t_≥î_£ssi⁄_±
 
	m‹igöÆ_£t_£ssi⁄
;

37 
ngx_evít_ßve_≥î_£ssi⁄_±
 
	m‹igöÆ_ßve_£ssi⁄
;

40 } 
	tngx_hâp_up°ªam_kì∑live_≥î_d©a_t
;

44 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

46 
ngx_queue_t
 
	mqueue
;

47 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

49 
sockÀn_t
 
	msockÀn
;

50 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

52 } 
	tngx_hâp_up°ªam_kì∑live_ˇche_t
;

55 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

57 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

58 *
d©a
);

59 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

60 *
d©a
, 
ngx_uöt_t
 
°©e
);

62 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

63 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

64 
ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 #i‡(
NGX_HTTP_SSL
)

68 
ngx_öt_t
 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(

69 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

70 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

71 *
d©a
);

74 *
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

75 *
ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

76 *
c⁄f
);

79 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_kì∑live_comm™ds
[] = {

81 { 
ngx_°rög
("keepalive"),

82 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE12
,

83 
ngx_hâp_up°ªam_kì∑live
,

84 
NGX_HTTP_SRV_CONF_OFFSET
,

86 
NULL
 },

88 
ngx_nuŒ_comm™d


92 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ_˘x
 = {

93 
NULL
,

94 
NULL
,

96 
NULL
,

97 
NULL
,

99 
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
,

100 
NULL
,

102 
NULL
,

103 
NULL


107 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_hâp_up°ªam_kì∑live_moduÀ_˘x
,

110 
ngx_hâp_up°ªam_kì∑live_comm™ds
,

111 
NGX_HTTP_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


123 
ngx_öt_t


124 
	$ngx_hâp_up°ªam_öô_kì∑live
(
ngx_c⁄f_t
 *
cf
,

125 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

127 
ngx_uöt_t
 
i
;

128 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

129 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ˇched
;

131 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

134 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

135 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

137 i‡(
kcf
->
	`‹igöÆ_öô_up°ªam
(
cf
, 
us
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

141 
kcf
->
‹igöÆ_öô_≥î
 = 
us
->
≥î
.
öô
;

143 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_kì∑live_≥î
;

147 
ˇched
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

148 (
ngx_hâp_up°ªam_kì∑live_ˇche_t
Ë* 
kcf
->
max_ˇched
);

149 i‡(
ˇched
 =
NULL
) {

150  
NGX_ERROR
;

153 
	`ngx_queue_öô
(&
kcf
->
ˇche
);

154 
	`ngx_queue_öô
(&
kcf
->
‰ì
);

156 
i
 = 0; i < 
kcf
->
max_ˇched
; i++) {

157 
	`ngx_queue_ö£π_hód
(&
kcf
->
‰ì
, &
ˇched
[
i
].
queue
);

158 
ˇched
[
i
].
c⁄f
 = 
kcf
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

167 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

169 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
;

170 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

172 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

175 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

176 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

178 
kp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
));

179 i‡(
kp
 =
NULL
) {

180  
NGX_ERROR
;

183 i‡(
kcf
->
	`‹igöÆ_öô_≥î
(
r
, 
us
Ë!
NGX_OK
) {

184  
NGX_ERROR
;

187 
kp
->
c⁄f
 = 
kcf
;

188 
kp
->
up°ªam
 = 
r
->upstream;

189 
kp
->
d©a
 = 
r
->
up°ªam
->
≥î
.data;

190 
kp
->
‹igöÆ_gë_≥î
 = 
r
->
up°ªam
->
≥î
.
gë
;

191 
kp
->
‹igöÆ_‰ì_≥î
 = 
r
->
up°ªam
->
≥î
.
‰ì
;

193 
r
->
up°ªam
->
≥î
.
d©a
 = 
kp
;

194 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_kì∑live_≥î
;

195 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
;

197 #i‡(
NGX_HTTP_SSL
)

198 
kp
->
‹igöÆ_£t_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
;

199 
kp
->
‹igöÆ_ßve_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
;

200 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
;

201 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
;

204  
NGX_OK
;

205 
	}
}

208 
ngx_öt_t


209 
	$ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

211 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

212 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

214 
ngx_öt_t
 
rc
;

215 
ngx_queue_t
 *
q
, *
ˇche
;

216 
ngx_c⁄√˘i⁄_t
 *
c
;

218 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

223 
rc
 = 
kp
->
	`‹igöÆ_gë_≥î
(
pc
, kp->
d©a
);

225 i‡(
rc
 !
NGX_OK
) {

226  
rc
;

231 
ˇche
 = &
kp
->
c⁄f
->cache;

233 
q
 = 
	`ngx_queue_hód
(
ˇche
);

234 
q
 !
	`ngx_queue_£¡öñ
(
ˇche
);

235 
q
 = 
	`ngx_queue_√xt
(q))

237 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

238 
c
 = 
ôem
->
c⁄√˘i⁄
;

240 i‡(
	`ngx_memn2cmp
((
u_ch¨
 *Ë&
ôem
->
sockaddr
, (u_ch¨ *Ë
pc
->sockaddr,

241 
ôem
->
sockÀn
, 
pc
->socklen)

244 
	`ngx_queue_ªmove
(
q
);

245 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
‰ì
, 
q
);

247 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

248 "gë kì∑livê≥î: usög c⁄√˘i⁄ %p", 
c
);

250 
c
->
idÀ
 = 0;

251 
c
->
log
 = 
pc
->log;

252 
c
->
ªad
->
log
 = 
pc
->log;

253 
c
->
wrôe
->
log
 = 
pc
->log;

254 
c
->
poﬁ
->
log
 = 
pc
->log;

256 
pc
->
c⁄√˘i⁄
 = 
c
;

257 
pc
->
ˇched
 = 1;

259  
NGX_DONE
;

263  
NGX_OK
;

264 
	}
}

268 
	$ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

269 
ngx_uöt_t
 
°©e
)

271 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

272 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

274 
ngx_queue_t
 *
q
;

275 
ngx_c⁄√˘i⁄_t
 *
c
;

276 
ngx_hâp_up°ªam_t
 *
u
;

278 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

283 
u
 = 
kp
->
up°ªam
;

284 
c
 = 
pc
->
c⁄√˘i⁄
;

286 i‡(
°©e
 & 
NGX_PEER_FAILED


287 || 
c
 =
NULL


288 || 
c
->
ªad
->
eof


289 || 
c
->
ªad
->
îr‹


290 || 
c
->
ªad
->
timedout


291 || 
c
->
wrôe
->
îr‹


292 || 
c
->
wrôe
->
timedout
)

294 
övÆid
;

297 i‡(!
u
->
kì∑live
) {

298 
övÆid
;

301 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

302 
övÆid
;

305 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

306 "‰ì kì∑livê≥î: savög c⁄√˘i⁄ %p", 
c
);

308 i‡(
	`ngx_queue_em±y
(&
kp
->
c⁄f
->
‰ì
)) {

310 
q
 = 
	`ngx_queue_œ°
(&
kp
->
c⁄f
->
ˇche
);

311 
	`ngx_queue_ªmove
(
q
);

313 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

315 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
ôem
->
c⁄√˘i⁄
);

318 
q
 = 
	`ngx_queue_hód
(&
kp
->
c⁄f
->
‰ì
);

319 
	`ngx_queue_ªmove
(
q
);

321 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

324 
ôem
->
c⁄√˘i⁄
 = 
c
;

325 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
ˇche
, 
q
);

327 
pc
->
c⁄√˘i⁄
 = 
NULL
;

329 i‡(
c
->
ªad
->
timî_£t
) {

330 
	`ngx_dñ_timî
(
c
->
ªad
);

332 i‡(
c
->
wrôe
->
timî_£t
) {

333 
	`ngx_dñ_timî
(
c
->
wrôe
);

336 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
;

337 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
;

339 
c
->
d©a
 = 
ôem
;

340 
c
->
idÀ
 = 1;

341 
c
->
log
 = 
ngx_cy˛e
->log;

342 
c
->
ªad
->
log
 = 
ngx_cy˛e
->log;

343 
c
->
wrôe
->
log
 = 
ngx_cy˛e
->log;

344 
c
->
poﬁ
->
log
 = 
ngx_cy˛e
->log;

346 
ôem
->
sockÀn
 = 
pc
->socklen;

347 
	`ngx_mem˝y
(&
ôem
->
sockaddr
, 
pc
->sockaddr,Öc->
sockÀn
);

349 i‡(
c
->
ªad
->
ªady
) {

350 
	`ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
c
->
ªad
);

353 
övÆid
:

355 
kp
->
	`‹igöÆ_‰ì_≥î
(
pc
, kp->
d©a
, 
°©e
);

356 
	}
}

360 
	$ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

362 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

364 
	}
}

368 
	$ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
)

370 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

371 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

373 
n
;

374 
buf
[1];

375 
ngx_c⁄√˘i⁄_t
 *
c
;

377 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

380 
c
 = 
ev
->
d©a
;

382 i‡(
c
->
˛o£
) {

383 
˛o£
;

386 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

388 i‡(
n
 =-1 && 
ngx_sockë_î∫o
 =
NGX_EAGAIN
) {

391 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

392 
˛o£
;

398 
˛o£
:

400 
ôem
 = 
c
->
d©a
;

401 
c⁄f
 = 
ôem
->conf;

403 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
c
);

405 
	`ngx_queue_ªmove
(&
ôem
->
queue
);

406 
	`ngx_queue_ö£π_hód
(&
c⁄f
->
‰ì
, &
ôem
->
queue
);

407 
	}
}

411 
	$ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
)

414 #i‡(
NGX_HTTP_SSL
)

416 i‡(
c
->
s¶
) {

417 
c
->
s¶
->
no_waô_shutdown
 = 1;

418 
c
->
s¶
->
no_£nd_shutdown
 = 1;

420 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

421 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£
;

428 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

429 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

430 
	}
}

433 #i‡(
NGX_HTTP_SSL
)

435 
ngx_öt_t


436 
	$ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

438 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

440  
kp
->
	`‹igöÆ_£t_£ssi⁄
(
pc
, kp->
d©a
);

441 
	}
}

445 
	$ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

447 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

449 
kp
->
	`‹igöÆ_ßve_£ssi⁄
(
pc
, kp->
d©a
);

451 
	}
}

457 
	$ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

459 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

461 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

462 (
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
));

463 i‡(
c⁄f
 =
NULL
) {

464  
NULL
;

474 
c⁄f
->
max_ˇched
 = 1;

476  
c⁄f
;

477 
	}
}

481 
	$ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

483 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

484 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
 = 
c⁄f
;

486 
ngx_öt_t
 
n
;

487 
ngx_°r_t
 *
vÆue
;

488 
ngx_uöt_t
 
i
;

490 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

492 i‡(
kcf
->
‹igöÆ_öô_up°ªam
) {

496 
kcf
->
‹igöÆ_öô_up°ªam
 = 
uscf
->
≥î
.
öô_up°ªam


497 ? 
uscf
->
≥î
.
öô_up°ªam


498 : 
ngx_hâp_up°ªam_öô_round_robö
;

500 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_kì∑live
;

504 
vÆue
 = 
cf
->
¨gs
->
ñts
;

506 
n
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

508 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

509 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

511 &
vÆue
[1], &
cmd
->
«me
);

512  
NGX_CONF_ERROR
;

515 
kcf
->
max_ˇched
 = 
n
;

517 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

519 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "single") == 0) {

520 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

525 
övÆid
;

528  
NGX_CONF_OK
;

530 
övÆid
:

532 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

533 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

535  
NGX_CONF_ERROR
;

536 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_upstream_least_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 *
	mc⁄ns
;

15 } 
	tngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
;

20 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

22 
ngx_uöt_t
 *
	mc⁄ns
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 
ngx_evít_‰ì_≥î_±
 
	m‰ì_º_≥î
;

26 } 
	tngx_hâp_up°ªam_lc_≥î_d©a_t
;

29 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

31 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(

32 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

33 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

34 *
d©a
, 
ngx_uöt_t
 
°©e
);

35 *
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

37 *
c⁄f
);

40 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
[] = {

42 { 
ngx_°rög
("least_conn"),

43 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

44 
ngx_hâp_up°ªam_Àa°_c⁄n
,

47 
NULL
 },

49 
ngx_nuŒ_comm™d


53 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
 = {

54 
NULL
,

55 
NULL
,

57 
NULL
,

58 
NULL
,

60 
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
,

61 
NULL
,

63 
NULL
,

64 
NULL


68 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
 = {

69 
NGX_MODULE_V1
,

70 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
,

71 
ngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
,

72 
NGX_HTTP_MODULE
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NGX_MODULE_V1_PADDING


84 
ngx_öt_t


85 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
,

86 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

88 
ngx_uöt_t
 
n
;

89 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

90 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

92 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

95 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

96  
NGX_ERROR
;

99 
≥îs
 = 
us
->
≥î
.
d©a
;

101 
n
 = 
≥îs
->
numbî
;

103 i‡(
≥îs
->
√xt
) {

104 
n
 +
≥îs
->
√xt
->
numbî
;

107 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

108 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

110 
lcf
->
c⁄ns
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_uöt_t
Ë* 
n
);

111 i‡(
lcf
->
c⁄ns
 =
NULL
) {

112  
NGX_ERROR
;

115 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
;

117  
NGX_OK
;

118 
	}
}

121 
ngx_öt_t


122 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

125 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
;

126 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

131 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

132 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

134 
l˝
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_lc_≥î_d©a_t
));

135 i‡(
l˝
 =
NULL
) {

136  
NGX_ERROR
;

139 
l˝
->
c⁄ns
 = 
lcf
->conns;

141 
r
->
up°ªam
->
≥î
.
d©a
 = &
l˝
->
ºp
;

143 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

144  
NGX_ERROR
;

147 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
;

148 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
;

150 
l˝
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

151 
l˝
->
‰ì_º_≥î
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

153  
NGX_OK
;

154 
	}
}

157 
ngx_öt_t


158 
	$ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

160 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

162 
time_t
 
now
;

163 
uöçå_t
 
m
;

164 
ngx_öt_t
 
rc
, 
tŸÆ
;

165 
ngx_uöt_t
 
i
, 
n
, 
p
, 
m™y
;

166 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

167 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

169 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

170 "gëÜó° c⁄¿≥î,Åry: %ui", 
pc
->
åõs
);

172 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

173  
l˝
->
	`gë_º_≥î
(
pc
, &l˝->
ºp
);

176 
pc
->
ˇched
 = 0;

177 
pc
->
c⁄√˘i⁄
 = 
NULL
;

179 
now
 = 
	`ngx_time
();

181 
≥îs
 = 
l˝
->
ºp
.peers;

183 
be°
 = 
NULL
;

184 
tŸÆ
 = 0;

186 #i‡(
NGX_SUPPRESS_WARN
)

187 
m™y
 = 0;

188 
p
 = 0;

191 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

193 
n
 = 
i
 / (8 * (
uöçå_t
));

194 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

196 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

200 
≥î
 = &
≥îs
->≥î[
i
];

202 i‡(
≥î
->
down
) {

206 i‡(
≥î
->
max_Áûs


207 && 
≥î
->
Áûs
 >≥î->
max_Áûs


208 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

219 i‡(
be°
 =
NULL


220 || 
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 <Ü˝->c⁄ns[
p
] * 
≥î
->weight)

222 
be°
 = 
≥î
;

223 
m™y
 = 0;

224 
p
 = 
i
;

226 } i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight


227 =
l˝
->
c⁄ns
[
p
] * 
≥î
->
weight
)

229 
m™y
 = 1;

233 i‡(
be°
 =
NULL
) {

234 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

237 
Áûed
;

240 i‡(
m™y
) {

241 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

244 
i
 = 
p
; i < 
≥îs
->
numbî
; i++) {

246 
n
 = 
i
 / (8 * (
uöçå_t
));

247 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

249 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

253 
≥î
 = &
≥îs
->≥î[
i
];

255 i‡(
≥î
->
down
) {

259 i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 !l˝->c⁄ns[
p
] * 
≥î
->weight) {

263 i‡(
≥î
->
max_Áûs


264 && 
≥î
->
Áûs
 >≥î->
max_Áûs


265 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

270 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

271 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

273 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

274 
≥î
->
ef„˘ive_weight
++;

277 i‡(
≥î
->
cuºít_weight
 > 
be°
->current_weight) {

278 
be°
 = 
≥î
;

279 
p
 = 
i
;

284 
be°
->
cuºít_weight
 -
tŸÆ
;

286 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

287 
be°
->
checked
 = 
now
;

290 
pc
->
sockaddr
 = 
be°
->sockaddr;

291 
pc
->
sockÀn
 = 
be°
->socklen;

292 
pc
->
«me
 = &
be°
->name;

294 
l˝
->
ºp
.
cuºít
 = 
p
;

296 
n
 = 
p
 / (8 * (
uöçå_t
));

297 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

299 
l˝
->
ºp
.
åõd
[
n
] |
m
;

300 
l˝
->
c⁄ns
[
p
]++;

302 i‡(
pc
->
åõs
 =1 && 
≥îs
->
√xt
) {

303 
pc
->
åõs
 +
≥îs
->
√xt
->
numbî
;

306  
NGX_OK
;

308 
Áûed
:

310 i‡(
≥îs
->
√xt
) {

311 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

314 
l˝
->
c⁄ns
 +
≥îs
->
numbî
;

316 
l˝
->
ºp
.
≥îs
 =Öìrs->
√xt
;

317 
pc
->
åõs
 = 
l˝
->
ºp
.
≥îs
->
numbî
;

319 
n
 = (
l˝
->
ºp
.
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

320 / (8 * (
uöçå_t
));

322 
i
 = 0; i < 
n
; i++) {

323 
l˝
->
ºp
.
åõd
[
i
] = 0;

326 
rc
 = 
	`ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
pc
, 
l˝
);

328 i‡(
rc
 !
NGX_BUSY
) {

329  
rc
;

335 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

336 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

339 
pc
->
«me
 = 
≥îs
->name;

341  
NGX_BUSY
;

342 
	}
}

346 
	$ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

347 *
d©a
, 
ngx_uöt_t
 
°©e
)

349 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

351 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

352 "‰ìÜó° c⁄¿≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

354 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

355 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

359 
l˝
->
c⁄ns
[l˝->
ºp
.
cuºít
]--;

361 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

362 
	}
}

366 
	$ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

368 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
c⁄f
;

370 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

371 (
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
));

372 i‡(
c⁄f
 =
NULL
) {

373  
NULL
;

382  
c⁄f
;

383 
	}
}

387 
	$ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

389 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

391 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

393 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

394 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

398 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n
;

400 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


401 |
NGX_HTTP_UPSTREAM_WEIGHT


402 |
NGX_HTTP_UPSTREAM_MAX_FAILS


403 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


404 |
NGX_HTTP_UPSTREAM_DOWN


405 |
NGX_HTTP_UPSTREAM_BACKUP
;

407  
NGX_CONF_OK
;

408 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_userid_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_USERID_OFF
 0

	)

14 
	#NGX_HTTP_USERID_LOG
 1

	)

15 
	#NGX_HTTP_USERID_V1
 2

	)

16 
	#NGX_HTTP_USERID_ON
 3

	)

19 
	#NGX_HTTP_USERID_MAX_EXPIRES
 2145916555

	)

23 
ngx_uöt_t
 
	míabÀ
;

25 
ngx_öt_t
 
	m£rvi˚
;

27 
ngx_°r_t
 
	m«me
;

28 
ngx_°r_t
 
	mdomaö
;

29 
ngx_°r_t
 
	m∑th
;

30 
ngx_°r_t
 
	mp3p
;

32 
time_t
 
	mexpúes
;

34 
u_ch¨
 
	mm¨k
;

35 } 
	tngx_hâp_u£rid_c⁄f_t
;

39 
uöt32_t
 
	muid_gŸ
[4];

40 
uöt32_t
 
	muid_£t
[4];

41 
ngx_°r_t
 
	mcookõ
;

42 
ngx_uöt_t
 
	mª£t
;

43 } 
	tngx_hâp_u£rid_˘x_t
;

46 
ngx_hâp_u£rid_˘x_t
 *
ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

48 
ngx_öt_t
 
ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
);

50 
ngx_öt_t
 
ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

52 
ngx_öt_t
 
ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

55 
ngx_öt_t
 
ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

56 
ngx_öt_t
 
ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

58 *
ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

59 *
chûd
);

60 *
ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

61 *
ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

62 *
ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

65 *
ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 
ngx_öt_t
 
ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

71 
uöt32_t
 
	g°¨t_vÆue
;

72 
uöt32_t
 
	g£quí˚r_v1
 = 1;

73 
uöt32_t
 
	g£quí˚r_v2
 = 0x03030302;

76 
u_ch¨
 
	gexpúes
[] = ";Éxpires=Thu, 31-Dec-37 23:55:55 GMT";

79 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

82 
ngx_c⁄f_íum_t
 
	gngx_hâp_u£rid_°©e
[] = {

83 { 
ngx_°rög
("off"), 
NGX_HTTP_USERID_OFF
 },

84 { 
ngx_°rög
("log"), 
NGX_HTTP_USERID_LOG
 },

85 { 
ngx_°rög
("v1"), 
NGX_HTTP_USERID_V1
 },

86 { 
ngx_°rög
("⁄"), 
NGX_HTTP_USERID_ON
 },

87 { 
ngx_nuŒ_°rög
, 0 }

91 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_domaö_p
 =

92 
ngx_hâp_u£rid_domaö
;

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_∑th_p
 = 
ngx_hâp_u£rid_∑th
;

94 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_p3p_p
 = 
ngx_hâp_u£rid_p3p
;

97 
ngx_comm™d_t
 
	gngx_hâp_u£rid_comm™ds
[] = {

99 { 
ngx_°rög
("userid"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_íum_¶Ÿ
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
íabÀ
),

104 
ngx_hâp_u£rid_°©e
 },

106 { 
ngx_°rög
("userid_service"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_num_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
£rvi˚
),

111 
NULL
 },

113 { 
ngx_°rög
("userid_name"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_°r_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
«me
),

118 
NULL
 },

120 { 
ngx_°rög
("userid_domain"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_°r_¶Ÿ
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
domaö
),

125 &
ngx_hâp_u£rid_domaö_p
 },

127 { 
ngx_°rög
("userid_path"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_°r_¶Ÿ
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
∑th
),

132 &
ngx_hâp_u£rid_∑th_p
 },

134 { 
ngx_°rög
("userid_expires"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_hâp_u£rid_expúes
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("userid_p3p"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_°r_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
p3p
),

146 &
ngx_hâp_u£rid_p3p_p
 },

148 { 
ngx_°rög
("userid_mark"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_u£rid_m¨k
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_hâp_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ_˘x
 = {

160 
ngx_hâp_u£rid_add_v¨übÀs
,

161 
ngx_hâp_u£rid_öô
,

163 
NULL
,

164 
NULL
,

166 
NULL
,

167 
NULL
,

169 
ngx_hâp_u£rid_¸óã_c⁄f
,

170 
ngx_hâp_u£rid_mîge_c⁄f


174 
ngx_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_hâp_u£rid_fûãr_moduÀ_˘x
,

177 
ngx_hâp_u£rid_comm™ds
,

178 
NGX_HTTP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
ngx_hâp_u£rid_öô_w‹kî
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 
ngx_°r_t
 
	gngx_hâp_u£rid_gŸ
 = 
ngx_°rög
("uid_got");

191 
ngx_°r_t
 
	gngx_hâp_u£rid_£t
 = 
ngx_°rög
("uid_set");

192 
ngx_°r_t
 
	gngx_hâp_u£rid_ª£t
 = 
ngx_°rög
("uid_reset");

193 
ngx_uöt_t
 
	gngx_hâp_u£rid_ª£t_ödex
;

196 
ngx_öt_t


197 
	$ngx_hâp_u£rid_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

199 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

200 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

202 i‡(
r
 !r->
maö
) {

203  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

206 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

208 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

209  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

212 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
, 
c⁄f
);

214 i‡(
˘x
 =
NULL
) {

215  
NGX_ERROR
;

218 i‡(
	`ngx_hâp_u£rid_£t_uid
(
r
, 
˘x
, 
c⁄f
Ë=
NGX_OK
) {

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222  
NGX_ERROR
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_u£rid_gŸ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

228 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

230 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

231 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

233 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

235 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_OFF
) {

236 
v
->
nŸ_found
 = 1;

237  
NGX_OK
;

240 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

242 i‡(
˘x
 =
NULL
) {

243  
NGX_ERROR
;

246 i‡(
˘x
->
uid_gŸ
[3] != 0) {

247  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
);

250 
v
->
nŸ_found
 = 1;

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_hâp_u£rid_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

258 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

260 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

261 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

263 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

265 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

266 
v
->
nŸ_found
 = 1;

267  
NGX_OK
;

270 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

272 i‡(
˘x
 =
NULL
) {

273  
NGX_ERROR
;

276 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
->
maö
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

277  
NGX_ERROR
;

280 i‡(
˘x
->
uid_£t
[3] == 0) {

281 
v
->
nŸ_found
 = 1;

282  
NGX_OK
;

285  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_£t
);

286 
	}
}

289 
ngx_hâp_u£rid_˘x_t
 *

290 
	$ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

292 
ngx_öt_t
 
n
;

293 
ngx_°r_t
 
§c
, 
d°
;

294 
ngx_èbÀ_ñt_t
 **
cookõs
;

295 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

297 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

299 i‡(
˘x
) {

300  
˘x
;

303 i‡(
˘x
 =
NULL
) {

304 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_u£rid_˘x_t
));

305 i‡(
˘x
 =
NULL
) {

306  
NULL
;

309 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

312 
n
 = 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
c⁄f
->
«me
,

313 &
˘x
->
cookõ
);

314 i‡(
n
 =
NGX_DECLINED
) {

315  
˘x
;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "uid cookõ: \"%V\"", &
˘x
->
cookõ
);

321 i‡(
˘x
->
cookõ
.
Àn
 < 22) {

322 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

323 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

325 &
cookõs
[
n
]->
vÆue
);

326  
˘x
;

329 
§c
 = 
˘x
->
cookõ
;

338 
§c
.
Àn
 = 22;

340 
d°
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_gŸ
;

342 i‡(
	`ngx_decode_ba£64
(&
d°
, &
§c
Ë=
NGX_ERROR
) {

343 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

344 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

346 &
cookõs
[
n
]->
vÆue
);

347  
˘x
;

350 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

353 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

355  
˘x
;

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

361 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

363 
u_ch¨
 *
cookõ
, *
p
;

364 
size_t
 
Àn
;

365 
ngx_°r_t
 
§c
, 
d°
;

366 
ngx_èbÀ_ñt_t
 *
£t_cookõ
, *
p3p
;

368 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

369  
NGX_ERROR
;

372 i‡(
˘x
->
uid_£t
[3] == 0) {

373  
NGX_OK
;

376 
Àn
 = 
c⁄f
->
«me
.À¿+ 1 + 
	`ngx_ba£64_ícoded_Àngth
(16Ë+ c⁄f->
∑th
.len;

378 i‡(
c⁄f
->
expúes
) {

379 
Àn
 +(
expúes
) - 1 + 2;

382 i‡(
c⁄f
->
domaö
.
Àn
) {

383 
Àn
 +
c⁄f
->
domaö
.len;

386 
cookõ
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

387 i‡(
cookõ
 =
NULL
) {

388  
NGX_ERROR
;

391 
p
 = 
	`ngx_c›y
(
cookõ
, 
c⁄f
->
«me
.
d©a
, c⁄f->«me.
Àn
);

392 *
p
++ = '=';

394 i‡(
˘x
->
uid_gŸ
[3] =0 || ctx->
ª£t
) {

395 
§c
.
Àn
 = 16;

396 
§c
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_£t
;

397 
d°
.
d©a
 = 
p
;

399 
	`ngx_ícode_ba£64
(&
d°
, &
§c
);

401 
p
 +
d°
.
Àn
;

403 i‡(
c⁄f
->
m¨k
) {

404 *(
p
 - 2Ë
c⁄f
->
m¨k
;

408 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
cookõ
.
d©a
, 22);

409 *
p
++ = 
c⁄f
->
m¨k
;

410 *
p
++ = '=';

413 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_USERID_MAX_EXPIRES
) {

414 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (expires) - 1);

416 } i‡(
c⁄f
->
expúes
) {

417 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (";Éxpires=") - 1);

418 
p
 = 
	`ngx_hâp_cookõ_time
’, 
	`ngx_time
(Ë+ 
c⁄f
->
expúes
);

421 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
domaö
.
d©a
, c⁄f->domaö.
Àn
);

423 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
∑th
.
d©a
, c⁄f->∑th.
Àn
);

425 
£t_cookõ
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

426 i‡(
£t_cookõ
 =
NULL
) {

427  
NGX_ERROR
;

430 
£t_cookõ
->
hash
 = 1;

431 
	`ngx_°r_£t
(&
£t_cookõ
->
key
, "Set-Cookie");

432 
£t_cookõ
->
vÆue
.
Àn
 = 
p
 - 
cookõ
;

433 
£t_cookõ
->
vÆue
.
d©a
 = 
cookõ
;

435 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

436 "uid cookõ: \"%V\"", &
£t_cookõ
->
vÆue
);

438 i‡(
c⁄f
->
p3p
.
Àn
 == 0) {

439  
NGX_OK
;

442 
p3p
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

443 i‡(
p3p
 =
NULL
) {

444  
NGX_ERROR
;

447 
p3p
->
hash
 = 1;

448 
	`ngx_°r_£t
(&
p3p
->
key
, "P3P");

449 
p3p
->
vÆue
 = 
c⁄f
->p3p;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

457 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

459 
ngx_c⁄√˘i⁄_t
 *
c
;

460 
sockaddr_ö
 *
sö
;

461 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

462 #i‡(
NGX_HAVE_INET6
)

463 
u_ch¨
 *
p
;

464 
sockaddr_ö6
 *
sö6
;

467 i‡(
˘x
->
uid_£t
[3] != 0) {

468  
NGX_OK
;

471 i‡(
˘x
->
uid_gŸ
[3] != 0) {

473 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ngx_hâp_u£rid_ª£t_ödex
);

475 i‡(
vv
->
Àn
 =0 || (vv->À¿=1 && vv->
d©a
[0] == '0')) {

477 i‡(
c⁄f
->
m¨k
 == '\0'

478 || (
˘x
->
cookõ
.
Àn
 > 23

479 && 
˘x
->
cookõ
.
d©a
[22] =
c⁄f
->
m¨k


480 && 
˘x
->
cookõ
.
d©a
[23] == '='))

482  
NGX_OK
;

485 
˘x
->
uid_£t
[0] = ctx->
uid_gŸ
[0];

486 
˘x
->
uid_£t
[1] = ctx->
uid_gŸ
[1];

487 
˘x
->
uid_£t
[2] = ctx->
uid_gŸ
[2];

488 
˘x
->
uid_£t
[3] = ctx->
uid_gŸ
[3];

490  
NGX_OK
;

493 
˘x
->
ª£t
 = 1;

495 i‡(
vv
->
Àn
 =3 && 
	`ngx_°∫cmp
(vv->
d©a
, "log", 3) == 0) {

496 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

499 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

509 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_V1
) {

510 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

511 
˘x
->
uid_£t
[0] = 0;

513 
˘x
->
uid_£t
[0] = 
c⁄f
->
£rvi˚
;

515 
˘x
->
uid_£t
[1] = (
uöt32_t
Ë
	`ngx_time
();

516 
˘x
->
uid_£t
[2] = 
°¨t_vÆue
;

517 
˘x
->
uid_£t
[3] = 
£quí˚r_v1
;

518 
£quí˚r_v1
 += 0x100;

521 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

523 
c
 = 
r
->
c⁄√˘i⁄
;

525 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

526  
NGX_ERROR
;

529 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

531 #i‡(
NGX_HAVE_INET6
)

532 
AF_INET6
:

533 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

535 
p
 = (
u_ch¨
 *Ë&
˘x
->
uid_£t
[0];

537 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[12];

538 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[13];

539 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[14];

540 *
p
 = 
sö6
->
sö6_addr
.
s6_addr
[15];

545 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

546 
˘x
->
uid_£t
[0] = 
sö
->
sö_addr
.
s_addr
;

551 
˘x
->
uid_£t
[0] = 
	`ht⁄l
(
c⁄f
->
£rvi˚
);

554 
˘x
->
uid_£t
[1] = 
	`ht⁄l
((
uöt32_t
Ë
	`ngx_time
());

555 
˘x
->
uid_£t
[2] = 
	`ht⁄l
(
°¨t_vÆue
);

556 
˘x
->
uid_£t
[3] = 
	`ht⁄l
(
£quí˚r_v2
);

557 
£quí˚r_v2
 += 0x100;

558 i‡(
£quí˚r_v2
 < 0x03030302) {

559 
£quí˚r_v2
 = 0x03030302;

563  
NGX_OK
;

564 
	}
}

567 
ngx_öt_t


568 
	$ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

569 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
)

571 
v
->
Àn
 = 
«me
->len + ("=00001111222233334444555566667777") - 1;

572 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

573 i‡(
v
->
d©a
 =
NULL
) {

574  
NGX_ERROR
;

577 
v
->
vÆid
 = 1;

578 
v
->
no_ˇchóbÀ
 = 0;

579 
v
->
nŸ_found
 = 0;

581 
	`ngx_•rötf
(
v
->
d©a
, "%V=%08XD%08XD%08XD%08XD",

582 
«me
, 
uid
[0], uid[1], uid[2], uid[3]);

584  
NGX_OK
;

585 
	}
}

588 
ngx_öt_t


589 
	$ngx_hâp_u£rid_ª£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

590 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

592 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

594  
NGX_OK
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

601 
ngx_öt_t
 
n
;

602 
ngx_hâp_v¨übÀ_t
 *
v¨
;

604 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_gŸ
, 0);

605 i‡(
v¨
 =
NULL
) {

606  
NGX_ERROR
;

609 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_gŸ_v¨übÀ
;

611 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_£t
, 0);

612 i‡(
v¨
 =
NULL
) {

613  
NGX_ERROR
;

616 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_£t_v¨übÀ
;

618 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_ª£t
,

619 
NGX_HTTP_VAR_CHANGEABLE
);

620 i‡(
v¨
 =
NULL
) {

621  
NGX_ERROR
;

624 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_ª£t_v¨übÀ
;

626 
n
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_u£rid_ª£t
);

627 i‡(
n
 =
NGX_ERROR
) {

628  
NGX_ERROR
;

631 
ngx_hâp_u£rid_ª£t_ödex
 = 
n
;

633  
NGX_OK
;

634 
	}
}

638 
	$ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

640 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

642 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_u£rid_c⁄f_t
));

643 i‡(
c⁄f
 =
NULL
) {

644  
NULL
;

656 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

657 
c⁄f
->
£rvi˚
 = 
NGX_CONF_UNSET
;

658 
c⁄f
->
expúes
 = 
NGX_CONF_UNSET
;

659 
c⁄f
->
m¨k
 = (
u_ch¨
) '\xFF';

661  
c⁄f
;

662 
	}
}

666 
	$ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

668 
ngx_hâp_u£rid_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

669 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
 = 
chûd
;

671 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

672 
NGX_HTTP_USERID_OFF
);

674 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
«me
, 
¥ev
->name, "uid");

675 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
domaö
, 
¥ev
->domain, "");

676 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, ";Öath=/");

677 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
p3p
, 
¥ev
->p3p, "");

679 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvi˚
, 
¥ev
->£rvi˚, 
NGX_CONF_UNSET
);

680 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
expúes
, 
¥ev
->expires, 0);

682 i‡(
c⁄f
->
m¨k
 =(
u_ch¨
) '\xFF') {

683 i‡(
¥ev
->
m¨k
 =(
u_ch¨
) '\xFF') {

684 
c⁄f
->
m¨k
 = '\0';

686 
c⁄f
->
m¨k
 = 
¥ev
->mark;

690  
NGX_CONF_OK
;

691 
	}
}

694 
ngx_öt_t


695 
	$ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
)

697 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

698 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_u£rid_fûãr
;

700  
NGX_OK
;

701 
	}
}

705 
	$ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

707 
ngx_°r_t
 *
domaö
 = 
d©a
;

709 
u_ch¨
 *
p
, *
√w
;

711 i‡(
	`ngx_°rcmp
(
domaö
->
d©a
, "none") == 0) {

712 
	`ngx_°r_£t
(
domaö
, "");

713  
NGX_CONF_OK
;

716 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, ("; domaö="Ë- 1 + 
domaö
->
Àn
);

717 i‡(
√w
 =
NULL
) {

718  
NGX_CONF_ERROR
;

721 
p
 = 
	`ngx_˝ymem
(
√w
, "; domain=", ("; domain=") - 1);

722 
	`ngx_mem˝y
(
p
, 
domaö
->
d©a
, domaö->
Àn
);

724 
domaö
->
Àn
 += ("; domain=") - 1;

725 
domaö
->
d©a
 = 
√w
;

727  
NGX_CONF_OK
;

728 
	}
}

732 
	$ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

734 
ngx_°r_t
 *
∑th
 = 
d©a
;

736 
u_ch¨
 *
p
, *
√w
;

738 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, (";Ö©h="Ë- 1 + 
∑th
->
Àn
);

739 i‡(
√w
 =
NULL
) {

740  
NGX_CONF_ERROR
;

743 
p
 = 
	`ngx_˝ymem
(
√w
, ";Öath=", (";Öath=") - 1);

744 
	`ngx_mem˝y
(
p
, 
∑th
->
d©a
,Ö©h->
Àn
);

746 
∑th
->
Àn
 += (";Öath=") - 1;

747 
∑th
->
d©a
 = 
√w
;

749  
NGX_CONF_OK
;

750 
	}
}

754 
	$ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

756 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

758 
ngx_°r_t
 *
vÆue
;

760 i‡(
ucf
->
expúes
 !
NGX_CONF_UNSET
) {

764 
vÆue
 = 
cf
->
¨gs
->
ñts
;

766 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

767 
ucf
->
expúes
 = 
NGX_HTTP_USERID_MAX_EXPIRES
;

768  
NGX_CONF_OK
;

771 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

772 
ucf
->
expúes
 = 0;

773  
NGX_CONF_OK
;

776 
ucf
->
expúes
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

777 i‡(
ucf
->
expúes
 =(
time_t
Ë
NGX_ERROR
) {

781  
NGX_CONF_OK
;

782 
	}
}

786 
	$ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

788 
ngx_°r_t
 *
p3p
 = 
d©a
;

790 i‡(
	`ngx_°rcmp
(
p3p
->
d©a
, "none") == 0) {

791 
	`ngx_°r_£t
(
p3p
, "");

794  
NGX_CONF_OK
;

795 
	}
}

799 
	$ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

801 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

803 
ngx_°r_t
 *
vÆue
;

805 i‡(
ucf
->
m¨k
 !(
u_ch¨
) '\xFF') {

809 
vÆue
 = 
cf
->
¨gs
->
ñts
;

811 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

812 
ucf
->
m¨k
 = '\0';

813  
NGX_CONF_OK
;

816 i‡(
vÆue
[1].
Àn
 != 1

817 || !((
vÆue
[1].
d©a
[0] >= '0' && value[1].data[0] <= '9')

818 || (
vÆue
[1].
d©a
[0] >= 'A' && value[1].data[0] <= 'Z')

819 || (
vÆue
[1].
d©a
[0] >= 'a' && value[1].data[0] <= 'z')

820 || 
vÆue
[1].
d©a
[0] == '='))

825 
ucf
->
m¨k
 = 
vÆue
[1].
d©a
[0];

827  
NGX_CONF_OK
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

834 
timevÆ
 
ç
;

836 
	`ngx_gëtimeofday
(&
ç
);

839 
°¨t_vÆue
 = ((
ç
.
tv_u£c
 / 20Ë<< 16Ë| 
ngx_pid
;

841  
NGX_OK
;

842 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_uwsgi_module.c

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~<ngx_hâp.h
>

16 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

23 
ngx_hash_t
 
	mhódîs_hash
;

24 
ngx_uöt_t
 
	mhódî_∑øms
;

26 
ngx_¨øy_t
 *
	muwsgi_Àngths
;

27 
ngx_¨øy_t
 *
	muwsgi_vÆues
;

29 #i‡(
NGX_HTTP_CACHE
)

30 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

33 
ngx_°r_t
 
	muwsgi_°rög
;

35 
ngx_uöt_t
 
	mmodifõr1
;

36 
ngx_uöt_t
 
	mmodifõr2
;

38 #i‡(
NGX_HTTP_SSL
)

39 
ngx_uöt_t
 
	ms¶
;

40 
ngx_uöt_t
 
	ms¶_¥Ÿocﬁs
;

41 
ngx_°r_t
 
	ms¶_cùhîs
;

43 } 
	tngx_hâp_uwsgi_loc_c⁄f_t
;

46 
ngx_öt_t
 
ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

48 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_öt_t
 
ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

51 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

53 
ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_öt_t
 
rc
);

56 *
ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

58 *
chûd
);

59 
ngx_öt_t
 
ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

60 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_uwsgi_loc_c⁄f_à*
¥ev
);

62 *
ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

65 *
c⁄f
);

67 #i‡(
NGX_HTTP_CACHE
)

68 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

69 *
ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

75 #i‡(
NGX_HTTP_SSL
)

76 
ngx_öt_t
 
ngx_hâp_uwsgi_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

77 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

81 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_uwsgi_modifõr_bounds
 = {

82 
ngx_c⁄f_check_num_bounds
, 0, 255

86 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_√xt_up°ªam_masks
[] = {

87 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

88 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

89 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

90 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

91 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

92 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

93 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

94 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

95 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

96 { 
ngx_nuŒ_°rög
, 0 }

100 #i‡(
NGX_HTTP_SSL
)

102 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_s¶_¥Ÿocﬁs
[] = {

103 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

104 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

105 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

106 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

107 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

108 { 
ngx_nuŒ_°rög
, 0 }

114 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
;

117 
ngx_comm™d_t
 
	gngx_hâp_uwsgi_comm™ds
[] = {

119 { 
ngx_°rög
("uwsgi_pass"),

120 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

121 
ngx_hâp_uwsgi_∑ss
,

122 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
NULL
 },

126 { 
ngx_°rög
("uwsgi_modifier1"),

127 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

128 
ngx_c⁄f_£t_num_¶Ÿ
,

129 
NGX_HTTP_LOC_CONF_OFFSET
,

130 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr1
),

131 &
ngx_hâp_uwsgi_modifõr_bounds
 },

133 { 
ngx_°rög
("uwsgi_modifier2"),

134 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

135 
ngx_c⁄f_£t_num_¶Ÿ
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr2
),

138 &
ngx_hâp_uwsgi_modifõr_bounds
 },

140 { 
ngx_°rög
("uwsgi_store"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

142 
ngx_hâp_uwsgi_°‹e
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
NULL
 },

147 { 
ngx_°rög
("uwsgi_store_access"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

149 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

152 
NULL
 },

154 { 
ngx_°rög
("uwsgi_buffering"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

156 
ngx_c⁄f_£t_Êag_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

159 
NULL
 },

161 { 
ngx_°rög
("uwsgi_ignore_client_abort"),

162 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

163 
ngx_c⁄f_£t_Êag_¶Ÿ
,

164 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

166 
NULL
 },

168 { 
ngx_°rög
("uwsgi_bind"),

169 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

170 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

171 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

173 
NULL
 },

175 { 
ngx_°rög
("uwsgi_connect_timeout"),

176 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

177 
ngx_c⁄f_£t_m£c_¶Ÿ
,

178 
NGX_HTTP_LOC_CONF_OFFSET
,

179 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

180 
NULL
 },

182 { 
ngx_°rög
("uwsgi_send_timeout"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

184 
ngx_c⁄f_£t_m£c_¶Ÿ
,

185 
NGX_HTTP_LOC_CONF_OFFSET
,

186 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

187 
NULL
 },

189 { 
ngx_°rög
("uwsgi_buffer_size"),

190 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

191 
ngx_c⁄f_£t_size_¶Ÿ
,

192 
NGX_HTTP_LOC_CONF_OFFSET
,

193 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

194 
NULL
 },

196 { 
ngx_°rög
("uwsgi_pass_request_headers"),

197 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

198 
ngx_c⁄f_£t_Êag_¶Ÿ
,

199 
NGX_HTTP_LOC_CONF_OFFSET
,

200 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

201 
NULL
 },

203 { 
ngx_°rög
("uwsgi_pass_request_body"),

204 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

205 
ngx_c⁄f_£t_Êag_¶Ÿ
,

206 
NGX_HTTP_LOC_CONF_OFFSET
,

207 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

208 
NULL
 },

210 { 
ngx_°rög
("uwsgi_intercept_errors"),

211 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

212 
ngx_c⁄f_£t_Êag_¶Ÿ
,

213 
NGX_HTTP_LOC_CONF_OFFSET
,

214 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

215 
NULL
 },

217 { 
ngx_°rög
("uwsgi_read_timeout"),

218 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

219 
ngx_c⁄f_£t_m£c_¶Ÿ
,

220 
NGX_HTTP_LOC_CONF_OFFSET
,

221 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

222 
NULL
 },

224 { 
ngx_°rög
("uwsgi_buffers"),

225 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

226 
ngx_c⁄f_£t_bufs_¶Ÿ
,

227 
NGX_HTTP_LOC_CONF_OFFSET
,

228 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

229 
NULL
 },

231 { 
ngx_°rög
("uwsgi_busy_buffers_size"),

232 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

233 
ngx_c⁄f_£t_size_¶Ÿ
,

234 
NGX_HTTP_LOC_CONF_OFFSET
,

235 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

236 
NULL
 },

238 #i‡(
NGX_HTTP_CACHE
)

240 { 
ngx_°rög
("uwsgi_cache"),

241 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

242 
ngx_hâp_uwsgi_ˇche
,

243 
NGX_HTTP_LOC_CONF_OFFSET
,

245 
NULL
 },

247 { 
ngx_°rög
("uwsgi_cache_key"),

248 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

249 
ngx_hâp_uwsgi_ˇche_key
,

250 
NGX_HTTP_LOC_CONF_OFFSET
,

252 
NULL
 },

254 { 
ngx_°rög
("uwsgi_cache_path"),

255 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

256 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

259 &
ngx_hâp_uwsgi_moduÀ
 },

261 { 
ngx_°rög
("uwsgi_cache_bypass"),

262 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

263 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

264 
NGX_HTTP_LOC_CONF_OFFSET
,

265 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

266 
NULL
 },

268 { 
ngx_°rög
("uwsgi_no_cache"),

269 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

270 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

271 
NGX_HTTP_LOC_CONF_OFFSET
,

272 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

273 
NULL
 },

275 { 
ngx_°rög
("uwsgi_cache_valid"),

276 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

277 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

278 
NGX_HTTP_LOC_CONF_OFFSET
,

279 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

280 
NULL
 },

282 { 
ngx_°rög
("uwsgi_cache_min_uses"),

283 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

284 
ngx_c⁄f_£t_num_¶Ÿ
,

285 
NGX_HTTP_LOC_CONF_OFFSET
,

286 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

287 
NULL
 },

289 { 
ngx_°rög
("uwsgi_cache_use_stale"),

290 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

291 
ngx_c⁄f_£t_bômask_¶Ÿ
,

292 
NGX_HTTP_LOC_CONF_OFFSET
,

293 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

294 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

296 { 
ngx_°rög
("uwsgi_cache_methods"),

297 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

298 
ngx_c⁄f_£t_bômask_¶Ÿ
,

299 
NGX_HTTP_LOC_CONF_OFFSET
,

300 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

301 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

303 { 
ngx_°rög
("uwsgi_cache_lock"),

304 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

305 
ngx_c⁄f_£t_Êag_¶Ÿ
,

306 
NGX_HTTP_LOC_CONF_OFFSET
,

307 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

308 
NULL
 },

310 { 
ngx_°rög
("uwsgi_cache_lock_timeout"),

311 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

312 
ngx_c⁄f_£t_m£c_¶Ÿ
,

313 
NGX_HTTP_LOC_CONF_OFFSET
,

314 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

315 
NULL
 },

317 { 
ngx_°rög
("uwsgi_cache_revalidate"),

318 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

319 
ngx_c⁄f_£t_Êag_¶Ÿ
,

320 
NGX_HTTP_LOC_CONF_OFFSET
,

321 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

322 
NULL
 },

326 { 
ngx_°rög
("uwsgi_temp_path"),

327 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

328 
ngx_c⁄f_£t_∑th_¶Ÿ
,

329 
NGX_HTTP_LOC_CONF_OFFSET
,

330 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

331 
NULL
 },

333 { 
ngx_°rög
("uwsgi_max_temp_file_size"),

334 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

335 
ngx_c⁄f_£t_size_¶Ÿ
,

336 
NGX_HTTP_LOC_CONF_OFFSET
,

337 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

338 
NULL
 },

340 { 
ngx_°rög
("uwsgi_temp_file_write_size"),

341 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

342 
ngx_c⁄f_£t_size_¶Ÿ
,

343 
NGX_HTTP_LOC_CONF_OFFSET
,

344 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

345 
NULL
 },

347 { 
ngx_°rög
("uwsgi_next_upstream"),

348 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

349 
ngx_c⁄f_£t_bômask_¶Ÿ
,

350 
NGX_HTTP_LOC_CONF_OFFSET
,

351 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

352 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

354 { 
ngx_°rög
("uwsgi_param"),

355 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

356 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

357 
NGX_HTTP_LOC_CONF_OFFSET
,

358 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
∑øms_sour˚
),

359 
NULL
 },

361 { 
ngx_°rög
("uwsgi_string"),

362 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

363 
ngx_c⁄f_£t_°r_¶Ÿ
,

364 
NGX_HTTP_LOC_CONF_OFFSET
,

365 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
uwsgi_°rög
),

366 
NULL
 },

368 { 
ngx_°rög
("uwsgi_pass_header"),

369 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

370 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

371 
NGX_HTTP_LOC_CONF_OFFSET
,

372 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

373 
NULL
 },

375 { 
ngx_°rög
("uwsgi_hide_header"),

376 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

377 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

378 
NGX_HTTP_LOC_CONF_OFFSET
,

379 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

380 
NULL
 },

382 { 
ngx_°rög
("uwsgi_ignore_headers"),

383 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

384 
ngx_c⁄f_£t_bômask_¶Ÿ
,

385 
NGX_HTTP_LOC_CONF_OFFSET
,

386 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

387 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

389 #i‡(
NGX_HTTP_SSL
)

391 { 
ngx_°rög
("uwsgi_ssl_session_reuse"),

392 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

393 
ngx_c⁄f_£t_Êag_¶Ÿ
,

394 
NGX_HTTP_LOC_CONF_OFFSET
,

395 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

396 
NULL
 },

398 { 
ngx_°rög
("uwsgi_ssl_protocols"),

399 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

400 
ngx_c⁄f_£t_bômask_¶Ÿ
,

401 
NGX_HTTP_LOC_CONF_OFFSET
,

402 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

403 &
ngx_hâp_uwsgi_s¶_¥Ÿocﬁs
 },

405 { 
ngx_°rög
("uwsgi_ssl_ciphers"),

406 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

407 
ngx_c⁄f_£t_°r_¶Ÿ
,

408 
NGX_HTTP_LOC_CONF_OFFSET
,

409 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_cùhîs
),

410 
NULL
 },

414 
ngx_nuŒ_comm™d


418 
ngx_hâp_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ_˘x
 = {

419 
NULL
,

420 
NULL
,

422 
NULL
,

423 
NULL
,

425 
NULL
,

426 
NULL
,

428 
ngx_hâp_uwsgi_¸óã_loc_c⁄f
,

429 
ngx_hâp_uwsgi_mîge_loc_c⁄f


433 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
 = {

434 
NGX_MODULE_V1
,

435 &
ngx_hâp_uwsgi_moduÀ_˘x
,

436 
ngx_hâp_uwsgi_comm™ds
,

437 
NGX_HTTP_MODULE
,

438 
NULL
,

439 
NULL
,

440 
NULL
,

441 
NULL
,

442 
NULL
,

443 
NULL
,

444 
NULL
,

445 
NGX_MODULE_V1_PADDING


449 
ngx_°r_t
 
	gngx_hâp_uwsgi_hide_hódîs
[] = {

450 
ngx_°rög
("X-Accel-Expires"),

451 
ngx_°rög
("X-Accel-Redirect"),

452 
ngx_°rög
("X-Accel-Limit-Rate"),

453 
ngx_°rög
("X-Accel-Buffering"),

454 
ngx_°rög
("X-Accel-Charset"),

455 
ngx_nuŒ_°rög


459 #i‡(
NGX_HTTP_CACHE
)

461 
ngx_keyvÆ_t
 
	gngx_hâp_uwsgi_ˇche_hódîs
[] = {

462 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

463 
ngx_°rög
("$upstream_cache_last_modified") },

464 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

465 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

466 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

467 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

468 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

469 { 
ngx_nuŒ_°rög
,Çgx_null_string }

475 
ngx_∑th_öô_t
 
	gngx_hâp_uwsgi_ãmp_∑th
 = {

476 
ngx_°rög
(
NGX_HTTP_UWSGI_TEMP_PATH
), { 1, 2, 0 }

480 
ngx_öt_t


481 
	$ngx_hâp_uwsgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

483 
ngx_öt_t
 
rc
;

484 
ngx_hâp_°©us_t
 *
°©us
;

485 
ngx_hâp_up°ªam_t
 *
u
;

486 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

488 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

489  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

492 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

493 i‡(
°©us
 =
NULL
) {

494  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

497 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_uwsgi_moduÀ
);

499 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

501 
u
 = 
r
->
up°ªam
;

503 i‡(
uwcf
->
uwsgi_Àngths
 =
NULL
) {

505 #i‡(
NGX_HTTP_SSL
)

506 
u
->
s¶
 = (
uwcf
->
up°ªam
.s¶ !
NULL
);

508 i‡(
u
->
s¶
) {

509 
	`ngx_°r_£t
(&
u
->
schema
, "suwsgi://");

512 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

515 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

519 i‡(
	`ngx_hâp_uwsgi_evÆ
(
r
, 
uwcf
Ë!
NGX_OK
) {

520  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

524 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_uwsgi_moduÀ
;

526 
u
->
c⁄f
 = &
uwcf
->
up°ªam
;

528 #i‡(
NGX_HTTP_CACHE
)

529 
u
->
¸óã_key
 = 
ngx_hâp_uwsgi_¸óã_key
;

531 
u
->
¸óã_ªque°
 = 
ngx_hâp_uwsgi_¸óã_ªque°
;

532 
u
->
ªöô_ªque°
 = 
ngx_hâp_uwsgi_ªöô_ªque°
;

533 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

534 
u
->
ab‹t_ªque°
 = 
ngx_hâp_uwsgi_ab‹t_ªque°
;

535 
u
->
föÆize_ªque°
 = 
ngx_hâp_uwsgi_föÆize_ªque°
;

536 
r
->
°©e
 = 0;

538 
u
->
buf„rög
 = 
uwcf
->
up°ªam
.buffering;

540 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

541 i‡(
u
->
pùe
 =
NULL
) {

542  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

545 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

546 
u
->
pùe
->
öput_˘x
 = 
r
;

548 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

550 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

551  
rc
;

554  
NGX_DONE
;

555 
	}
}

558 
ngx_öt_t


559 
	$ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 * 
uwcf
)

561 
size_t
 
add
;

562 
ngx_uæ_t
 
uæ
;

563 
ngx_hâp_up°ªam_t
 *
u
;

565 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

567 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
uwcf
->
uwsgi_Àngths
->
ñts
, 0,

568 
uwcf
->
uwsgi_vÆues
->
ñts
)

569 =
NULL
)

571  
NGX_ERROR
;

574 i‡(
uæ
.uæ.
Àn
 > 8

575 && 
	`ngx_°∫ˇ£cmp
(
uæ
.uæ.
d©a
, (
u_ch¨
 *) "uwsgi://", 8) == 0)

577 
add
 = 8;

579 } i‡(
uæ
.uæ.
Àn
 > 9

580 && 
	`ngx_°∫ˇ£cmp
(
uæ
.uæ.
d©a
, (
u_ch¨
 *) "suwsgi://", 9) == 0)

583 #i‡(
NGX_HTTP_SSL
)

584 
add
 = 9;

585 
r
->
up°ªam
->
s¶
 = 1;

587 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

589  
NGX_ERROR
;

593 
add
 = 0;

596 
u
 = 
r
->
up°ªam
;

598 i‡(
add
) {

599 
u
->
schema
.
Àn
 = 
add
;

600 
u
->
schema
.
d©a
 = 
uæ
.url.data;

602 
uæ
.uæ.
d©a
 +
add
;

603 
uæ
.uæ.
Àn
 -
add
;

606 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

609 
uæ
.
no_ªsﬁve
 = 1;

611 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

612 i‡(
uæ
.
îr
) {

613 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

614 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

617  
NGX_ERROR
;

620 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

621 i‡(
u
->
ªsﬁved
 =
NULL
) {

622  
NGX_ERROR
;

625 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

626 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

627 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

628 
u
->
ªsﬁved
->
«ddrs
 = 1;

629 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

632 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

633 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

634 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

637  
NGX_OK
;

638 
	}
}

641 #i‡(
NGX_HTTP_CACHE
)

643 
ngx_öt_t


644 
	$ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

646 
ngx_°r_t
 *
key
;

647 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

649 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

650 i‡(
key
 =
NULL
) {

651  
NGX_ERROR
;

654 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

656 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
uwcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

657  
NGX_ERROR
;

660  
NGX_OK
;

661 
	}
}

666 
ngx_öt_t


667 
	$ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

669 
u_ch¨
 
ch
, *
lowˇ£_key
;

670 
size_t
 
key_Àn
, 
vÆ_Àn
, 
Àn
, 
Æloˇãd
;

671 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

672 
ngx_buf_t
 *
b
;

673 
ngx_chaö_t
 *
˛
, *
body
;

674 
ngx_li°_∑π_t
 *
∑π
;

675 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

676 
ngx_hâp_s¸ùt_code_±
 
code
;

677 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

678 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

679 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

681 
Àn
 = 0;

682 
hódî_∑øms
 = 0;

683 
ign‹ed
 = 
NULL
;

685 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

687 i‡(
uwcf
->
∑øms_Àn
) {

688 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

690 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
uwcf
->
Êushes
);

691 
À
.
Êushed
 = 1;

693 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

694 
À
.
ªque°
 = 
r
;

696 *(
uöçå_t
 *Ë
À
.
ù
) {

698 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

699 
key_Àn
 = 
	`lcode
(&
À
);

701 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

702 
skù_em±y
 = 
	`lcode
(&
À
);

704 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
 (&le)) {

705 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

707 
À
.
ù
 +(
uöçå_t
);

709 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

713 
Àn
 +2 + 
key_Àn
 + 2 + 
vÆ_Àn
;

717 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

719 
Æloˇãd
 = 0;

720 
lowˇ£_key
 = 
NULL
;

722 i‡(
uwcf
->
hódî_∑øms
) {

723 
n
 = 0;

724 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

726 
∑π
) {

727 
n
 +
∑π
->
√…s
;

728 
∑π
 =Ö¨t->
√xt
;

731 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

732 i‡(
ign‹ed
 =
NULL
) {

733  
NGX_ERROR
;

737 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

738 
hódî
 = 
∑π
->
ñts
;

740 
i
 = 0; ; i++) {

742 i‡(
i
 >
∑π
->
√…s
) {

743 i‡(
∑π
->
√xt
 =
NULL
) {

747 
∑π
 =Ö¨t->
√xt
;

748 
hódî
 = 
∑π
->
ñts
;

749 
i
 = 0;

752 i‡(
uwcf
->
hódî_∑øms
) {

753 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

754 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

755 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

756 i‡(
lowˇ£_key
 =
NULL
) {

757  
NGX_ERROR
;

761 
hash
 = 0;

763 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

764 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

766 i‡(
ch
 >= 'A' && ch <= 'Z') {

767 
ch
 |= 0x20;

769 } i‡(
ch
 == '-') {

770 
ch
 = '_';

773 
hash
 = 
	`ngx_hash
(hash, 
ch
);

774 
lowˇ£_key
[
n
] = 
ch
;

777 i‡(
	`ngx_hash_föd
(&
uwcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

778 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

783 
Àn
 +2 + ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len

784 + 2 + 
hódî
[
i
].
vÆue
.
Àn
;

788 
Àn
 +
uwcf
->
uwsgi_°rög
.len;

792 i‡(
Àn
 > 0 &&Üen < 2) {

793 
	`ngx_log_îr‹
 (
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

794 "uwsgòªque° i†toÿlôée: %uz", 
Àn
);

795  
NGX_ERROR
;

799 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
 + 4);

800 i‡(
b
 =
NULL
) {

801  
NGX_ERROR
;

804 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

805 i‡(
˛
 =
NULL
) {

806  
NGX_ERROR
;

809 
˛
->
buf
 = 
b
;

811 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr1
;

812 *
b
->
œ°
++ = (
u_ch¨
Ë(
Àn
 & 0xff);

813 *
b
->
œ°
++ = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

814 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr2
;

816 i‡(
uwcf
->
∑øms_Àn
) {

817 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

819 
e
.
ù
 = 
uwcf
->
∑øms
->
ñts
;

820 
e
.
pos
 = 
b
->
œ°
;

821 
e
.
ªque°
 = 
r
;

822 
e
.
Êushed
 = 1;

824 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

826 *(
uöçå_t
 *Ë
À
.
ù
) {

828 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

829 
key_Àn
 = (
u_ch¨
Ë
	`lcode
 (&
À
);

831 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

832 
skù_em±y
 = 
	`lcode
(&
À
);

834 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

835 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

837 
À
.
ù
 +(
uöçå_t
);

839 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

840 
e
.
skù
 = 1;

842 *(
uöçå_t
 *Ë
e
.
ù
) {

843 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

844 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

846 
e
.
ù
 +(
uöçå_t
);

848 
e
.
skù
 = 0;

853 *
e
.
pos
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

854 *
e
.
pos
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

856 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

857 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

859 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

860 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

862 *(
uöçå_t
 *Ë
e
.
ù
) {

863 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

864 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

867 
e
.
ù
 +(
uöçå_t
);

869 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

871 
key_Àn
, 
e
.
pos
 - (key_À¿+ 2 + 
vÆ_Àn
),

872 
vÆ_Àn
, 
e
.
pos
 - val_len);

875 
b
->
œ°
 = 
e
.
pos
;

878 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

880 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

881 
hódî
 = 
∑π
->
ñts
;

883 
i
 = 0; ; i++) {

885 i‡(
i
 >
∑π
->
√…s
) {

886 i‡(
∑π
->
√xt
 =
NULL
) {

890 
∑π
 =Ö¨t->
√xt
;

891 
hódî
 = 
∑π
->
ñts
;

892 
i
 = 0;

895 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

896 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

897 
√xt
;

901 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

902 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

903 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

905 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

906 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

907 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

909 i‡(
ch
 >= 'a' && ch <= 'z') {

910 
ch
 &= ~0x20;

912 } i‡(
ch
 == '-') {

913 
ch
 = '_';

916 *
b
->
œ°
++ = 
ch
;

919 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

920 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

921 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

922 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

924 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

926 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 2 + 
vÆ_Àn
),

927 
vÆ_Àn
, 
b
->
œ°
 - val_len);

928 
√xt
:

934 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
uwcf
->
uwsgi_°rög
.
d©a
,

935 
uwcf
->
uwsgi_°rög
.
Àn
);

937 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_body
) {

938 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

939 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

941 
body
) {

942 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

943 i‡(
b
 =
NULL
) {

944  
NGX_ERROR
;

947 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

949 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

950 i‡(
˛
->
√xt
 =
NULL
) {

951  
NGX_ERROR
;

954 
˛
 = cl->
√xt
;

955 
˛
->
buf
 = 
b
;

957 
body
 = body->
√xt
;

961 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

964 
˛
->
√xt
 = 
NULL
;

966  
NGX_OK
;

967 
	}
}

970 
ngx_öt_t


971 
	$ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

973 
ngx_hâp_°©us_t
 *
°©us
;

975 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

977 i‡(
°©us
 =
NULL
) {

978  
NGX_OK
;

981 
°©us
->
code
 = 0;

982 
°©us
->
cou¡
 = 0;

983 
°©us
->
°¨t
 = 
NULL
;

984 
°©us
->
íd
 = 
NULL
;

986 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

987 
r
->
°©e
 = 0;

989  
NGX_OK
;

990 
	}
}

993 
ngx_öt_t


994 
	$ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

996 
size_t
 
Àn
;

997 
ngx_öt_t
 
rc
;

998 
ngx_hâp_°©us_t
 *
°©us
;

999 
ngx_hâp_up°ªam_t
 *
u
;

1001 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

1003 i‡(
°©us
 =
NULL
) {

1004  
NGX_ERROR
;

1007 
u
 = 
r
->
up°ªam
;

1009 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

1011 i‡(
rc
 =
NGX_AGAIN
) {

1012  
rc
;

1015 i‡(
rc
 =
NGX_ERROR
) {

1016 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

1017  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

1020 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1021 
u
->
°©e
->
°©us
 = sètus->
code
;

1024 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

1026 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

1027 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1029 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1030 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1031  
NGX_ERROR
;

1034 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

1036 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1038 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1040 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

1042  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

1043 
	}
}

1046 
ngx_öt_t


1047 
	$ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1049 
ngx_°r_t
 *
°©us_löe
;

1050 
ngx_öt_t
 
rc
, 
°©us
;

1051 
ngx_èbÀ_ñt_t
 *
h
;

1052 
ngx_hâp_up°ªam_t
 *
u
;

1053 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1054 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1056 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1060 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1062 i‡(
rc
 =
NGX_OK
) {

1066 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1067 i‡(
h
 =
NULL
) {

1068  
NGX_ERROR
;

1071 
h
->
hash
 = 
r
->
hódî_hash
;

1073 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1074 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1076 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1077 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1078 + 
h
->
key
.
Àn
);

1079 i‡(
h
->
key
.
d©a
 =
NULL
) {

1080  
NGX_ERROR
;

1083 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1084 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1086 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1087 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1088 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1089 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1091 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1092 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1095 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1098 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1099 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1101 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1102  
NGX_ERROR
;

1105 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1106 "hâ∞uwsgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

1111 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1115 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1118 
u
 = 
r
->
up°ªam
;

1120 i‡(
u
->
hódîs_ö
.
°©us_n
) {

1121 
d⁄e
;

1124 i‡(
u
->
hódîs_ö
.
°©us
) {

1125 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1127 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1128 i‡(
°©us
 =
NGX_ERROR
) {

1129 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1131 
°©us_löe
);

1132  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1135 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1136 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1138 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1139 
u
->
hódîs_ö
.
°©us_n
 = 302;

1140 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1144 
u
->
hódîs_ö
.
°©us_n
 = 200;

1145 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1148 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1149 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1152 
d⁄e
:

1154 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1155 && 
r
->
hódîs_ö
.
upgøde
)

1157 
u
->
upgøde
 = 1;

1160  
NGX_OK
;

1163 i‡(
rc
 =
NGX_AGAIN
) {

1164  
NGX_AGAIN
;

1169 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1172  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1174 
	}
}

1178 
	$ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1180 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1184 
	}
}

1188 
	$ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1194 
	}
}

1198 
	$ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1200 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
;

1202 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_loc_c⁄f_t
));

1203 i‡(
c⁄f
 =
NULL
) {

1204  
NULL
;

1207 
c⁄f
->
modifõr1
 = 
NGX_CONF_UNSET_UINT
;

1208 
c⁄f
->
modifõr2
 = 
NGX_CONF_UNSET_UINT
;

1210 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1211 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1212 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1213 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1215 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1217 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1218 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1219 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1221 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1222 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1224 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1225 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1226 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1228 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1229 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1231 #i‡(
NGX_HTTP_CACHE
)

1232 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1233 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1234 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1235 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1236 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1237 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1238 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1239 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

1242 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1243 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1245 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1246 #i‡(
NGX_HTTP_SSL
)

1247 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

1251 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1253 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1255 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "uwsgi");

1257  
c⁄f
;

1258 
	}
}

1262 
	$ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1264 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1265 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1267 
size_t
 
size
;

1268 
ngx_hash_öô_t
 
hash
;

1269 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1271 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1272 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1274 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1275 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1276 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1280 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1281 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1283 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1284 
¥ev
->
up°ªam
.
buf„rög
, 1);

1286 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1287 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1289 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1290 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1292 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1293 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1295 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1296 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1298 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1299 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1301 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1302 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1304 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1305 
¥ev
->
up°ªam
.
buf„r_size
,

1306 (
size_t
Ë
ngx_∑gesize
);

1309 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1310 8, 
ngx_∑gesize
);

1312 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1313 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1315  
NGX_CONF_ERROR
;

1319 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1320 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1321 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1325 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1326 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1327 
NGX_CONF_UNSET_SIZE
);

1329 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1330 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1332 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1333 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1336 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1337 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1342  
NGX_CONF_ERROR
;

1345 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1346 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1348 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1352  
NGX_CONF_ERROR
;

1356 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1357 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1358 
NGX_CONF_UNSET_SIZE
);

1360 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1361 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1363 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1364 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1367 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1368 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1373  
NGX_CONF_ERROR
;

1377 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1378 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1379 
NGX_CONF_UNSET_SIZE
);

1381 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1382 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1384 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1385 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1388 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1389 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1390 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1396  
NGX_CONF_ERROR
;

1400 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1401 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1402 
NGX_CONF_BITMASK_SET
);

1405 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1406 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1407 (
NGX_CONF_BITMASK_SET


1408 |
NGX_HTTP_UPSTREAM_FT_ERROR


1409 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1411 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1412 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1413 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1416 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1417 
¥ev
->
up°ªam
.
ãmp_∑th
,

1418 &
ngx_hâp_uwsgi_ãmp_∑th
)

1419 !
NGX_OK
)

1421  
NGX_CONF_ERROR
;

1424 #i‡(
NGX_HTTP_CACHE
)

1426 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1427 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1429 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1430 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1432 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1434 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1436 &
shm_z⁄e
->
shm
.
«me
);

1438  
NGX_CONF_ERROR
;

1441 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1442 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1444 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1445 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1446 (
NGX_CONF_BITMASK_SET


1447 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1449 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1450 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1451 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1454 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1455 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1458 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1459 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1462 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1464 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1465 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1467 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1468 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1470 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1471 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1473 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1474 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1477 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1478 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1480 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1481 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1483 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

1484 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

1488 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1489 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1490 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1491 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1493 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1494 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1496 #i‡(
NGX_HTTP_SSL
)

1497 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

1498 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

1500 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

1501 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3


1502 |
NGX_SSL_TLSv1
|
NGX_SSL_TLSv1_1


1503 |
NGX_SSL_TLSv1_2
));

1505 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers,

1508 i‡(
c⁄f
->
s¶
 && 
	`ngx_hâp_uwsgi_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

1509  
NGX_CONF_ERROR
;

1512 i‡(
c⁄f
->
up°ªam
.
s¶
 =
NULL
) {

1513 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

1517 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uwsgi_°rög
, 
¥ev
->uwsgi_string, "");

1519 
hash
.
max_size
 = 512;

1520 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1521 
hash
.
«me
 = "uwsgi_hide_headers_hash";

1523 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1524 &
¥ev
->
up°ªam
, 
ngx_hâp_uwsgi_hide_hódîs
, &
hash
)

1525 !
NGX_OK
)

1527  
NGX_CONF_ERROR
;

1530 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1531 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1534 i‡(
c⁄f
->
uwsgi_Àngths
 =
NULL
) {

1535 
c⁄f
->
uwsgi_Àngths
 = 
¥ev
->uwsgi_lengths;

1536 
c⁄f
->
uwsgi_vÆues
 = 
¥ev
->uwsgi_values;

1539 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
uwsgi_Àngths
) {

1540 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1541 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1542 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1546 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr1
, 
¥ev
->modifier1, 0);

1547 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr2
, 
¥ev
->modifier2, 0);

1549 i‡(
	`ngx_hâp_uwsgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1550  
NGX_CONF_ERROR
;

1553  
NGX_CONF_OK
;

1554 
	}
}

1557 
ngx_öt_t


1558 
	$ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,

1559 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
)

1561 
u_ch¨
 *
p
;

1562 
size_t
 
size
;

1563 
uöçå_t
 *
code
;

1564 
ngx_uöt_t
 
i
, 
n§c
;

1565 
ngx_¨øy_t
 
hódîs_«mes
;

1566 #i‡(
NGX_HTTP_CACHE
)

1567 
ngx_¨øy_t
 
∑øms_mîged
;

1569 
ngx_hash_key_t
 *
hk
;

1570 
ngx_hash_öô_t
 
hash
;

1571 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

1572 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1573 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1575 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1576 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1578 i‡(
¥ev
->
hódîs_hash
.
buckës


1579 #i‡(
NGX_HTTP_CACHE
)

1580 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1581 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

1585 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1586 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1587 
c⁄f
->
∑øms
 = 
¥ev
->params;

1588 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1589 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1591  
NGX_OK
;

1595 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1596 #i‡(
NGX_HTTP_CACHE
)

1597 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1601 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1602  
NGX_OK
;

1605 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1606 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1607  
NGX_ERROR
;

1610 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1611 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1612  
NGX_ERROR
;

1615 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1616 !
NGX_OK
)

1618  
NGX_ERROR
;

1621 i‡(
c⁄f
->
∑øms_sour˚
) {

1622 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1623 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1626 
§c
 = 
NULL
;

1627 
n§c
 = 0;

1630 #i‡(
NGX_HTTP_CACHE
)

1632 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1633 
ngx_keyvÆ_t
 *
h
;

1634 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

1636 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1637 (
ngx_hâp_up°ªam_∑øm_t
))

1638 !
NGX_OK
)

1640  
NGX_ERROR
;

1643 
i
 = 0; i < 
n§c
; i++) {

1645 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1646 i‡(
s
 =
NULL
) {

1647  
NGX_ERROR
;

1650 *
s
 = 
§c
[
i
];

1653 
h
 = 
ngx_hâp_uwsgi_ˇche_hódîs
;

1655 
h
->
key
.
Àn
) {

1657 
§c
 = 
∑øms_mîged
.
ñts
;

1658 
n§c
 = 
∑øms_mîged
.
√…s
;

1660 
i
 = 0; i < 
n§c
; i++) {

1661 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1662 
√xt
;

1666 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1667 i‡(
s
 =
NULL
) {

1668  
NGX_ERROR
;

1671 
s
->
key
 = 
h
->key;

1672 
s
->
vÆue
 = 
h
->value;

1673 
s
->
skù_em±y
 = 1;

1675 
√xt
:

1677 
h
++;

1680 
§c
 = 
∑øms_mîged
.
ñts
;

1681 
n§c
 = 
∑øms_mîged
.
√…s
;

1686 
i
 = 0; i < 
n§c
; i++) {

1688 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1689 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1691 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1692 i‡(
hk
 =
NULL
) {

1693  
NGX_ERROR
;

1696 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1697 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1698 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1699 
hk
->
vÆue
 = (*) 1;

1701 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1706 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1707 (
ngx_hâp_s¸ùt_c›y_code_t
));

1708 i‡(
c›y
 =
NULL
) {

1709  
NGX_ERROR
;

1712 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1713 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1715 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1716 (
ngx_hâp_s¸ùt_c›y_code_t
));

1717 i‡(
c›y
 =
NULL
) {

1718  
NGX_ERROR
;

1721 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1722 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1725 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1726 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

1727 & ~((
uöçå_t
) - 1);

1729 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1730 i‡(
c›y
 =
NULL
) {

1731  
NGX_ERROR
;

1734 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1735 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1737 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1738 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

1741 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1743 
sc
.
cf
 = cf;

1744 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1745 
sc
.
Êushes
 = &
c⁄f
->flushes;

1746 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1747 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1749 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1750  
NGX_ERROR
;

1753 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1754 i‡(
code
 =
NULL
) {

1755  
NGX_ERROR
;

1758 *
code
 = (
uöçå_t
Ë
NULL
;

1761 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1762 i‡(
code
 =
NULL
) {

1763  
NGX_ERROR
;

1766 *
code
 = (
uöçå_t
Ë
NULL
;

1769 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1770 i‡(
code
 =
NULL
) {

1771  
NGX_ERROR
;

1774 *
code
 = (
uöçå_t
Ë
NULL
;

1776 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1778 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1779 
hash
.
key
 = 
ngx_hash_key_lc
;

1780 
hash
.
max_size
 = 512;

1781 
hash
.
buckë_size
 = 64;

1782 
hash
.
«me
 = "uwsgi_params_hash";

1783 
hash
.
poﬁ
 = 
cf
->pool;

1784 
hash
.
ãmp_poﬁ
 = 
NULL
;

1786  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1787 
	}
}

1791 
	$ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1793 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1795 
size_t
 
add
;

1796 
ngx_uæ_t
 
u
;

1797 
ngx_°r_t
 *
vÆue
, *
uæ
;

1798 
ngx_uöt_t
 
n
;

1799 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1800 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1802 i‡(
uwcf
->
up°ªam
.up°ªam || uwcf->
uwsgi_Àngths
) {

1806 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1807 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1809 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1811 
uæ
 = &
vÆue
[1];

1813 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1815 i‡(
n
) {

1817 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1819 
sc
.
cf
 = cf;

1820 
sc
.
sour˚
 = 
uæ
;

1821 
sc
.
Àngths
 = &
uwcf
->
uwsgi_Àngths
;

1822 
sc
.
vÆues
 = &
uwcf
->
uwsgi_vÆues
;

1823 
sc
.
v¨übÀs
 = 
n
;

1824 
sc
.
com∂ëe_Àngths
 = 1;

1825 
sc
.
com∂ëe_vÆues
 = 1;

1827 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1828  
NGX_CONF_ERROR
;

1831 #i‡(
NGX_HTTP_SSL
)

1832 
uwcf
->
s¶
 = 1;

1835  
NGX_CONF_OK
;

1838 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "uwsgi://", 8) == 0) {

1839 
add
 = 8;

1841 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "suwsgi://", 9) == 0) {

1843 #i‡(
NGX_HTTP_SSL
)

1844 
add
 = 9;

1845 
uwcf
->
s¶
 = 1;

1847 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1849  
NGX_CONF_ERROR
;

1853 
add
 = 0;

1856 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1858 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

1859 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

1860 
u
.
no_ªsﬁve
 = 1;

1862 
uwcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1863 i‡(
uwcf
->
up°ªam
.up°ªam =
NULL
) {

1864  
NGX_CONF_ERROR
;

1867 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1868 
˛cf
->
auto_ªdúe˘
 = 1;

1871  
NGX_CONF_OK
;

1872 
	}
}

1876 
	$ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1878 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1880 
ngx_°r_t
 *
vÆue
;

1881 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1883 i‡(
uwcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || uwcf->up°ªam.
°‹e_Àngths
)

1888 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1890 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1891 
uwcf
->
up°ªam
.
°‹e
 = 0;

1892  
NGX_CONF_OK
;

1895 #i‡(
NGX_HTTP_CACHE
)

1897 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1898 && 
uwcf
->
up°ªam
.
ˇche
 !
NULL
)

1905 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1906 
uwcf
->
up°ªam
.
°‹e
 = 1;

1907  
NGX_CONF_OK
;

1911 
vÆue
[1].
Àn
++;

1913 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1915 
sc
.
cf
 = cf;

1916 
sc
.
sour˚
 = &
vÆue
[1];

1917 
sc
.
Àngths
 = &
uwcf
->
up°ªam
.
°‹e_Àngths
;

1918 
sc
.
vÆues
 = &
uwcf
->
up°ªam
.
°‹e_vÆues
;

1919 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1920 
sc
.
com∂ëe_Àngths
 = 1;

1921 
sc
.
com∂ëe_vÆues
 = 1;

1923 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1924  
NGX_CONF_ERROR
;

1927  
NGX_CONF_OK
;

1928 
	}
}

1931 #i‡(
NGX_HTTP_CACHE
)

1934 
	$ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1936 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1938 
ngx_°r_t
 *
vÆue
;

1940 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1942 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1946 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1947 
uwcf
->
up°ªam
.
ˇche
 = 
NULL
;

1948  
NGX_CONF_OK
;

1951 i‡(
uwcf
->
up°ªam
.
°‹e
 > 0 || uwcf->up°ªam.
°‹e_Àngths
) {

1955 
uwcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1956 &
ngx_hâp_uwsgi_moduÀ
);

1957 i‡(
uwcf
->
up°ªam
.
ˇche
 =
NULL
) {

1958  
NGX_CONF_ERROR
;

1961  
NGX_CONF_OK
;

1962 
	}
}

1966 
	$ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1968 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1970 
ngx_°r_t
 *
vÆue
;

1971 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1973 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1975 i‡(
uwcf
->
ˇche_key
.
vÆue
.
d©a
) {

1979 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1981 
ccv
.
cf
 = cf;

1982 
ccv
.
vÆue
 = &value[1];

1983 
ccv
.
com∂ex_vÆue
 = &
uwcf
->
ˇche_key
;

1985 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1986  
NGX_CONF_ERROR
;

1989  
NGX_CONF_OK
;

1990 
	}
}

1995 #i‡(
NGX_HTTP_SSL
)

1997 
ngx_öt_t


1998 
	$ngx_hâp_uwsgi_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
)

2000 
ngx_poﬁ_˛ónup_t
 *
˛n
;

2002 
uwcf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

2003 i‡(
uwcf
->
up°ªam
.
s¶
 =
NULL
) {

2004  
NGX_ERROR
;

2007 
uwcf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

2009 i‡(
	`ngx_s¶_¸óã
(
uwcf
->
up°ªam
.
s¶
, uwcf->
s¶_¥Ÿocﬁs
, 
NULL
)

2010 !
NGX_OK
)

2012  
NGX_ERROR
;

2015 i‡(
	`SSL_CTX_£t_cùhî_li°
(
uwcf
->
up°ªam
.
s¶
->
˘x
,

2016 (c⁄° *Ë
uwcf
->
s¶_cùhîs
.
d©a
)

2019 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2021 &
uwcf
->
s¶_cùhîs
);

2022  
NGX_ERROR
;

2025 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

2026 i‡(
˛n
 =
NULL
) {

2027  
NGX_ERROR
;

2030 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

2031 
˛n
->
d©a
 = 
uwcf
->
up°ªam
.
s¶
;

2033  
NGX_OK
;

2034 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_xslt_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<libxml/∑r£r.h
>

13 
	~<libxml/åì.h
>

14 
	~<libx¶t/x¶t.h
>

15 
	~<libx¶t/x¶tI¡î«ls.h
>

16 
	~<libx¶t/å™sf‹m.h
>

17 
	~<libx¶t/v¨übÀs.h
>

18 
	~<libx¶t/x¶tutûs.h
>

20 #i‡(
NGX_HAVE_EXSLT
)

21 
	~<libex¶t/ex¶t.h
>

25 #i‚de‡
NGX_HTTP_XSLT_REUSE_DTD


26 
	#NGX_HTTP_XSLT_REUSE_DTD
 1

	)

31 
u_ch¨
 *
	m«me
;

32 *
	md©a
;

33 } 
	tngx_hâp_x¶t_fûe_t
;

37 
ngx_¨øy_t
 
	mdtd_fûes
;

38 
ngx_¨øy_t
 
	mshìt_fûes
;

39 } 
	tngx_hâp_x¶t_fûãr_maö_c⁄f_t
;

43 
u_ch¨
 *
	m«me
;

44 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

45 
ngx_uöt_t
 
	mquŸe
;

46 } 
	tngx_hâp_x¶t_∑øm_t
;

50 
x¶tStyÀshìtPå
 
	m°yÀshìt
;

51 
ngx_¨øy_t
 
	m∑øms
;

52 } 
	tngx_hâp_x¶t_shìt_t
;

56 
xmlDtdPå
 
	mdtd
;

57 
ngx_¨øy_t
 
	mshìts
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 
ngx_¨øy_t
 *
	m∑øms
;

61 
ngx_Êag_t
 
	mœ°_modifõd
;

62 } 
	tngx_hâp_x¶t_fûãr_loc_c⁄f_t
;

66 
xmlDocPå
 
	mdoc
;

67 
xmlP¨£rCtxtPå
 
	m˘xt
;

68 
x¶tTønsf‹mC⁄ãxtPå
 
	må™sf‹m
;

69 
ngx_hâp_ªque°_t
 *
	mªque°
;

70 
ngx_¨øy_t
 
	m∑øms
;

72 
ngx_uöt_t
 
	md⁄e
;

73 } 
	tngx_hâp_x¶t_fûãr_˘x_t
;

76 
ngx_öt_t
 
ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

78 
ngx_öt_t
 
ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

82 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

83 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
);

84 
ngx_cde˛
 
ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...);

87 
ngx_buf_t
 *
ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
);

91 
u_ch¨
 *
ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
);

92 
u_ch¨
 *
ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
);

93 
ngx_hâp_x¶t_˛ónup
(*
d©a
);

95 *
ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

96 *
c⁄f
);

97 *
ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

98 *
c⁄f
);

99 *
ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

100 *
c⁄f
);

101 
ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
);

102 
ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
);

103 *
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

104 *
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

105 *
ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

106 *
chûd
);

107 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

109 
ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
);

112 
ngx_°r_t
 
	gngx_hâp_x¶t_deÁu…_ty≥s
[] = {

113 
ngx_°rög
("text/xml"),

114 
ngx_nuŒ_°rög


118 
ngx_comm™d_t
 
	gngx_hâp_x¶t_fûãr_comm™ds
[] = {

120 { 
ngx_°rög
("xml_entities"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_x¶t_ítôõs
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("xslt_stylesheet"),

128 
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

129 
ngx_hâp_x¶t_°yÀshìt
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

132 
NULL
 },

134 { 
ngx_°rög
("xslt_param"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

136 
ngx_hâp_x¶t_∑øm
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("xslt_string_param"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

143 
ngx_hâp_x¶t_∑øm
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

148 { 
ngx_°rög
("xslt_types"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

150 
ngx_hâp_ty≥s_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
ty≥s_keys
),

153 &
ngx_hâp_x¶t_deÁu…_ty≥s
[0] },

155 { 
ngx_°rög
("xslt_last_modified"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

157 
ngx_c⁄f_£t_Êag_¶Ÿ
,

158 
NGX_HTTP_LOC_CONF_OFFSET
,

159 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
œ°_modifõd
),

160 
NULL
 },

162 
ngx_nuŒ_comm™d


166 
ngx_hâp_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ_˘x
 = {

167 
ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
,

168 
ngx_hâp_x¶t_fûãr_öô
,

170 
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
,

171 
NULL
,

173 
NULL
,

174 
NULL
,

176 
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
,

177 
ngx_hâp_x¶t_fûãr_mîge_c⁄f


181 
ngx_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ
 = {

182 
NGX_MODULE_V1
,

183 &
ngx_hâp_x¶t_fûãr_moduÀ_˘x
,

184 
ngx_hâp_x¶t_fûãr_comm™ds
,

185 
NGX_HTTP_MODULE
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
ngx_hâp_x¶t_fûãr_exô
,

192 
ngx_hâp_x¶t_fûãr_exô
,

193 
NGX_MODULE_V1_PADDING


197 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

198 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

201 
ngx_öt_t


202 
	$ngx_hâp_x¶t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

204 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

205 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

207 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

210 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

211  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

214 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

216 i‡(
c⁄f
->
shìts
.
√…s
 == 0

217 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
)

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

224 i‡(
˘x
) {

225  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

228 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_˘x_t
));

229 i‡(
˘x
 =
NULL
) {

230  
NGX_ERROR
;

233 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

235 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

237  
NGX_OK
;

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_hâp_x¶t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

244 
wñlF‹med
;

245 
ngx_chaö_t
 *
˛
;

246 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

248 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

251 i‡(
ö
 =
NULL
) {

252  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

255 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

257 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

258  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

261 
˛
 = 
ö
; cl; c»˛->
√xt
) {

263 i‡(
	`ngx_hâp_x¶t_add_chunk
(
r
, 
˘x
, 
˛
->
buf
Ë!
NGX_OK
) {

265 i‡(
˘x
->
˘xt
->
myDoc
) {

267 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

268 
˘x
->
˘xt
->
myDoc
->
extSub£t
 = 
NULL
;

270 
	`xmlFªeDoc
(
˘x
->
˘xt
->
myDoc
);

273 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

275  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

278 i‡(
˛
->
buf
->
œ°_buf
 || cl->buf->
œ°_ö_chaö
) {

280 
˘x
->
doc
 = ctx->
˘xt
->
myDoc
;

282 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

283 
˘x
->
doc
->
extSub£t
 = 
NULL
;

286 
wñlF‹med
 = 
˘x
->
˘xt
->wellFormed;

288 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

290 i‡(
wñlF‹med
) {

291  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
,

292 
	`ngx_hâp_x¶t_≠∂y_°yÀshìt
(
r
, 
˘x
));

295 
	`xmlFªeDoc
(
˘x
->
doc
);

297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

300  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

304  
NGX_OK
;

305 
	}
}

308 
ngx_öt_t


309 
	$ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

310 
ngx_buf_t
 *
b
)

312 
ngx_öt_t
 
rc
;

313 
ngx_chaö_t
 
out
;

314 
ngx_poﬁ_˛ónup_t
 *
˛n
;

315 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

317 
˘x
->
d⁄e
 = 1;

319 i‡(
b
 =
NULL
) {

320  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

321 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

324 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

326 i‡(
˛n
 =
NULL
) {

327 
	`ngx_‰ì
(
b
->
pos
);

328  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

329 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

332 i‡(
r
 =r->
maö
) {

333 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

335 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

336 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

337 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

340 
	`ngx_hâp_˛ór_ëag
(
r
);

342 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

344 i‡(!
c⁄f
->
œ°_modifõd
) {

345 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

349 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

351 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

352 
	`ngx_‰ì
(
b
->
pos
);

353  
rc
;

356 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup
;

357 
˛n
->
d©a
 = 
b
->
pos
;

359 
out
.
buf
 = 
b
;

360 
out
.
√xt
 = 
NULL
;

362  
	`ngx_hâp_√xt_body_fûãr
(
r
, &
out
);

363 
	}
}

366 
ngx_öt_t


367 
	$ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

368 
ngx_buf_t
 *
b
)

370 
îr
;

371 
xmlP¨£rCtxtPå
 
˘xt
;

373 i‡(
˘x
->
˘xt
 =
NULL
) {

375 
˘xt
 = 
	`xmlCª©ePushP¨£rCtxt
(
NULL
, NULL, NULL, 0, NULL);

376 i‡(
˘xt
 =
NULL
) {

377 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

379  
NGX_ERROR
;

381 
	`xmlCtxtU£O±i⁄s
(
˘xt
, 
XML_PARSE_NOENT
|
XML_PARSE_DTDLOAD


382 |
XML_PARSE_NOWARNING
);

384 
˘xt
->
ßx
->
exã∫ÆSub£t
 = 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
;

385 
˘xt
->
ßx
->
£tDocumítLoˇt‹
 = 
NULL
;

386 
˘xt
->
ßx
->
îr‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

387 
˘xt
->
ßx
->
ÁèlEº‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

388 
˘xt
->
ßx
->
_¥iv©e
 = 
˘x
;

390 
˘x
->
˘xt
 = ctxt;

391 
˘x
->
ªque°
 = 
r
;

394 
îr
 = 
	`xmlP¨£Chunk
(
˘x
->
˘xt
, (*Ë
b
->
pos
, (Ë(b->
œ°
 - b->pos),

395 (
b
->
œ°_buf
Ë|| (b->
œ°_ö_chaö
));

397 i‡(
îr
 == 0) {

398 
b
->
pos
 = b->
œ°
;

399  
NGX_OK
;

402 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

403 "xmlP¨£Chunk(ËÁûed,Éº‹:%d", 
îr
);

405  
NGX_ERROR
;

406 
	}
}

410 
	$ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

411 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
)

413 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

415 
xmlDocPå
 
doc
;

416 
xmlDtdPå
 
dtd
;

417 
ngx_hâp_ªque°_t
 *
r
;

418 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

419 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

421 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

422 
r
 = 
˘x
->
ªque°
;

424 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

426 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

428 
«me
 ?Çamê: (
xmlCh¨
 *) "",

429 
exã∫ÆId
 ?Éxã∫ÆId : (
xmlCh¨
 *) "",

430 
sy°emId
 ? sy°emId : (
xmlCh¨
 *) "");

432 
doc
 = 
˘xt
->
myDoc
;

434 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

436 
dtd
 = 
c⁄f
->dtd;

440 
dtd
 = 
	`xmlC›yDtd
(
c⁄f
->dtd);

441 i‡(
dtd
 =
NULL
) {

442 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

447 i‡(
doc
->
chûdªn
 =
NULL
) {

448 
	`xmlAddChûd
((
xmlNodePå
Ë
doc
, (xmlNodePåË
dtd
);

451 
	`xmlAddPªvSiblög
(
doc
->
chûdªn
, (
xmlNodePå
Ë
dtd
);

456 
doc
->
extSub£t
 = 
dtd
;

457 
	}
}

460 
ngx_cde˛


461 
	$ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...)

463 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

465 
size_t
 
n
;

466 
va_li°
 
¨gs
;

467 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

468 
u_ch¨
 
buf
[
NGX_MAX_ERROR_STR
];

470 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

472 
buf
[0] = '\0';

474 
	`va_°¨t
(
¨gs
, 
msg
);

475 
n
 = (
size_t
Ë
	`v¢¥ötf
((*Ë
buf
, 
NGX_MAX_ERROR_STR
, 
msg
, 
¨gs
);

476 
	`va_íd
(
¨gs
);

478 --
n
 && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

480 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

481 "libxml2Éº‹: \"%*s\"", 
n
 + 1, 
buf
);

482 
	}
}

485 
ngx_buf_t
 *

486 
	$ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

487 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
)

489 
Àn
, 
rc
, 
doc_ty≥
;

490 
u_ch¨
 *
ty≥
, *
ícodög
;

491 
ngx_buf_t
 *
b
;

492 
ngx_uöt_t
 
i
;

493 
xmlCh¨
 *
buf
;

494 
xmlDocPå
 
doc
, 
ªs
;

495 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

496 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

498 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

499 
shìt
 = 
c⁄f
->
shìts
.
ñts
;

500 
doc
 = 
˘x
->doc;

504 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑øms
, 
r
->
poﬁ
, 4 * 2 + 1, (*))

505 !
NGX_OK
)

507 
	`xmlFªeDoc
(
doc
);

508  
NULL
;

511 
i
 = 0; i < 
c⁄f
->
shìts
.
√…s
; i++) {

513 
˘x
->
å™sf‹m
 = 
	`x¶tNewTønsf‹mC⁄ãxt
(
shìt
[
i
].
°yÀshìt
, 
doc
);

514 i‡(
˘x
->
å™sf‹m
 =
NULL
) {

515 
	`xmlFªeDoc
(
doc
);

516  
NULL
;

519 i‡(
c⁄f
->
∑øms


520 && 
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, 
c⁄f
->
∑øms
, 0Ë!
NGX_OK
)

522 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

523 
	`xmlFªeDoc
(
doc
);

524  
NULL
;

527 i‡(
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, &
shìt
[
i
].
∑øms
, 1Ë!
NGX_OK
) {

528 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

529 
	`xmlFªeDoc
(
doc
);

530  
NULL
;

533 
ªs
 = 
	`x¶tAµlyStyÀshìtU£r
(
shìt
[
i
].
°yÀshìt
, 
doc
,

534 
˘x
->
∑øms
.
ñts
, 
NULL
, NULL,

535 
˘x
->
å™sf‹m
);

537 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

538 
	`xmlFªeDoc
(
doc
);

540 i‡(
ªs
 =
NULL
) {

541 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

543  
NULL
;

546 
doc
 = 
ªs
;

549 
˘x
->
∑øms
.
√…s
 = 0;

554 i‡(
r
 =r->
maö
) {

555 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
shìt
[
i
 - 1].
°yÀshìt
);

558 
ty≥
 = 
NULL
;

561 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
shìt
[
i
 - 1].
°yÀshìt
);

562 
doc_ty≥
 = 
doc
->
ty≥
;

564 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

566 
doc_ty≥
, 
ty≥
 ?Åy≥ : (
u_ch¨
 *) "(null)",

567 
ícodög
 ?Éncodög : (
u_ch¨
 *) "(null)");

569 
rc
 = 
	`x¶tSaveResu…ToSåög
(&
buf
, &
Àn
, 
doc
, 
shìt
[
i
 - 1].
°yÀshìt
);

571 
	`xmlFªeDoc
(
doc
);

573 i‡(
rc
 != 0) {

574 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

576  
NULL
;

579 i‡(
Àn
 == 0) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

582  
NULL
;

585 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

586 i‡(
b
 =
NULL
) {

587 
	`ngx_‰ì
(
buf
);

588  
NULL
;

591 
b
->
pos
 = 
buf
;

592 
b
->
œ°
 = 
buf
 + 
Àn
;

593 
b
->
mem‹y
 = 1;

595 i‡(
ícodög
) {

596 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
	`ngx_°æí
(
ícodög
);

597 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
ícodög
;

600 i‡(
r
 !r->
maö
) {

601  
b
;

604 
b
->
œ°_buf
 = 1;

606 i‡(
ty≥
) {

607 
Àn
 = 
	`ngx_°æí
(
ty≥
);

609 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
Àn
;

610 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Üen;

611 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
ty≥
;

613 } i‡(
doc_ty≥
 =
XML_HTML_DOCUMENT_NODE
) {

615 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

616 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

619 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

621  
b
;

622 
	}
}

625 
ngx_öt_t


626 
	$ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

627 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
)

629 
u_ch¨
 *
p
, *
œ°
, *
vÆue
, *
d°
, *
§c
, **
s
;

630 
size_t
 
Àn
;

631 
ngx_uöt_t
 
i
;

632 
ngx_°r_t
 
°rög
;

633 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

635 
∑øm
 = 
∑øms
->
ñts
;

637 
i
 = 0; i < 
∑øms
->
√…s
; i++) {

639 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∑øm
[
i
].
vÆue
, &
°rög
Ë!
NGX_OK
) {

640  
NGX_ERROR
;

643 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

644 "x¶àfûã∏∑øm: \"%s\"", 
°rög
.
d©a
);

646 i‡(
∑øm
[
i
].
«me
) {

648 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

649 "x¶àfûã∏∑ømÇame: \"%s\"", 
∑øm
[
i
].
«me
);

651 i‡(
∑øm
[
i
].
quŸe
) {

652 i‡(
	`x¶tQuŸeO√U£rP¨am
(
˘x
->
å™sf‹m
, 
∑øm
[
i
].
«me
,

653 
°rög
.
d©a
)

656 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

658 
∑øm
[
i
].
«me
, 
°rög
.
d©a
);

659  
NGX_ERROR
;

665 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

666 i‡(
s
 =
NULL
) {

667  
NGX_ERROR
;

670 *
s
 = 
∑øm
[
i
].
«me
;

672 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

673 i‡(
s
 =
NULL
) {

674  
NGX_ERROR
;

677 *
s
 = 
°rög
.
d©a
;

687 
p
 = 
°rög
.
d©a
;

688 
œ°
 = 
°rög
.
d©a
 + såög.
Àn
;

690 
p
 && *p) {

692 
vÆue
 = 
p
;

693 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, '=');

694 i‡(
p
 =
NULL
) {

695 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

696 "övÆidÜibx¶à∑ømëî \"%s\"", 
vÆue
);

697  
NGX_ERROR
;

699 *
p
++ = '\0';

701 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

702 "x¶àfûã∏∑ømÇame: \"%s\"", 
vÆue
);

704 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

705 i‡(
s
 =
NULL
) {

706  
NGX_ERROR
;

709 *
s
 = 
vÆue
;

711 
vÆue
 = 
p
;

712 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, ':');

714 i‡(
p
) {

715 
Àn
 = 
p
 - 
vÆue
;

716 *
p
++ = '\0';

719 
Àn
 = 
œ°
 - 
vÆue
;

722 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

723 "x¶àfûã∏∑øm vÆue: \"%s\"", 
vÆue
);

725 
d°
 = 
vÆue
;

726 
§c
 = 
vÆue
;

728 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
Àn
, 0);

730 *
d°
 = '\0';

732 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

733 "x¶àfûã∏∑øm u√sˇ≥d: \"%s\"", 
vÆue
);

735 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

736 i‡(
s
 =
NULL
) {

737  
NGX_ERROR
;

740 *
s
 = 
vÆue
;

744 i‡(
föÆ
) {

745 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

746 i‡(
s
 =
NULL
) {

747  
NGX_ERROR
;

750 *
s
 = 
NULL
;

753  
NGX_OK
;

754 
	}
}

757 
u_ch¨
 *

758 
	$ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
)

760 
u_ch¨
 *
ty≥
;

762 i‡(
s
->
medüTy≥
) {

763  
s
->
medüTy≥
;

766 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

768 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
s
);

770 i‡(
ty≥
) {

771  
ty≥
;

775  
NULL
;

776 
	}
}

779 
u_ch¨
 *

780 
	$ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
)

782 
u_ch¨
 *
ícodög
;

784 i‡(
s
->
ícodög
) {

785  
s
->
ícodög
;

788 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

790 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
s
);

792 i‡(
ícodög
) {

793  
ícodög
;

797  
NULL
;

798 
	}
}

802 
	$ngx_hâp_x¶t_˛ónup
(*
d©a
)

804 
	`ngx_‰ì
(
d©a
);

805 
	}
}

809 
	$ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

811 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

813 
ngx_°r_t
 *
vÆue
;

814 
ngx_uöt_t
 
i
;

815 
ngx_poﬁ_˛ónup_t
 *
˛n
;

816 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

817 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

819 i‡(
xlcf
->
dtd
) {

823 
vÆue
 = 
cf
->
¨gs
->
ñts
;

825 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

827 
fûe
 = 
xmcf
->
dtd_fûes
.
ñts
;

828 
i
 = 0; i < 
xmcf
->
dtd_fûes
.
√…s
; i++) {

829 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

830 
xlcf
->
dtd
 = 
fûe
[
i
].
d©a
;

831  
NGX_CONF_OK
;

835 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

836 i‡(
˛n
 =
NULL
) {

837  
NGX_CONF_ERROR
;

840 
xlcf
->
dtd
 = 
	`xmlP¨£DTD
(
NULL
, (
xmlCh¨
 *Ë
vÆue
[1].
d©a
);

842 i‡(
xlcf
->
dtd
 =
NULL
) {

843 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0, "xmlParseDTD() failed");

844  
NGX_CONF_ERROR
;

847 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_dtd
;

848 
˛n
->
d©a
 = 
xlcf
->
dtd
;

850 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
dtd_fûes
);

851 i‡(
fûe
 =
NULL
) {

852  
NGX_CONF_ERROR
;

855 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

856 
fûe
->
d©a
 = 
xlcf
->
dtd
;

858  
NGX_CONF_OK
;

859 
	}
}

864 
	$ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

866 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

868 
ngx_°r_t
 *
vÆue
;

869 
ngx_uöt_t
 
i
, 
n
;

870 
ngx_poﬁ_˛ónup_t
 *
˛n
;

871 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

872 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

873 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

874 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

875 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

877 
vÆue
 = 
cf
->
¨gs
->
ñts
;

879 i‡(
xlcf
->
shìts
.
ñts
 =
NULL
) {

880 i‡(
	`ngx_¨øy_öô
(&
xlcf
->
shìts
, 
cf
->
poﬁ
, 1,

881 (
ngx_hâp_x¶t_shìt_t
))

882 !
NGX_OK
)

884  
NGX_CONF_ERROR
;

888 
shìt
 = 
	`ngx_¨øy_push
(&
xlcf
->
shìts
);

889 i‡(
shìt
 =
NULL
) {

890  
NGX_CONF_ERROR
;

893 
	`ngx_memzîo
(
shìt
, (
ngx_hâp_x¶t_shìt_t
));

895 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

896  
NGX_CONF_ERROR
;

899 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

901 
fûe
 = 
xmcf
->
shìt_fûes
.
ñts
;

902 
i
 = 0; i < 
xmcf
->
shìt_fûes
.
√…s
; i++) {

903 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

904 
shìt
->
°yÀshìt
 = 
fûe
[
i
].
d©a
;

905 
found
;

909 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

910 i‡(
˛n
 =
NULL
) {

911  
NGX_CONF_ERROR
;

914 
shìt
->
°yÀshìt
 = 
	`x¶tP¨£StyÀshìtFûe
(
vÆue
[1].
d©a
);

915 i‡(
shìt
->
°yÀshìt
 =
NULL
) {

916 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

918 
vÆue
[1].
d©a
);

919  
NGX_CONF_ERROR
;

922 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_°yÀshìt
;

923 
˛n
->
d©a
 = 
shìt
->
°yÀshìt
;

925 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
shìt_fûes
);

926 i‡(
fûe
 =
NULL
) {

927  
NGX_CONF_ERROR
;

930 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

931 
fûe
->
d©a
 = 
shìt
->
°yÀshìt
;

933 
found
:

935 
n
 = 
cf
->
¨gs
->
√…s
;

937 i‡(
n
 == 2) {

938  
NGX_CONF_OK
;

941 i‡(
	`ngx_¨øy_öô
(&
shìt
->
∑øms
, 
cf
->
poﬁ
, 
n
 - 2,

942 (
ngx_hâp_x¶t_∑øm_t
))

943 !
NGX_OK
)

945  
NGX_CONF_ERROR
;

948 
i
 = 2; i < 
n
; i++) {

950 
∑øm
 = 
	`ngx_¨øy_push
(&
shìt
->
∑øms
);

951 i‡(
∑øm
 =
NULL
) {

952  
NGX_CONF_ERROR
;

955 
	`ngx_memzîo
(
∑øm
, (
ngx_hâp_x¶t_∑øm_t
));

956 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

958 
ccv
.
cf
 = cf;

959 
ccv
.
vÆue
 = &vÆue[
i
];

960 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

961 
ccv
.
zîo
 = 1;

963 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

964  
NGX_CONF_ERROR
;

968  
NGX_CONF_OK
;

969 
	}
}

973 
	$ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

975 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

977 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

978 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

979 
ngx_°r_t
 *
vÆue
;

981 
vÆue
 = 
cf
->
¨gs
->
ñts
;

983 i‡(
xlcf
->
∑øms
 =
NULL
) {

984 
xlcf
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

985 (
ngx_hâp_x¶t_∑øm_t
));

986 i‡(
xlcf
->
∑øms
 =
NULL
) {

987  
NGX_CONF_ERROR
;

991 
∑øm
 = 
	`ngx_¨øy_push
(
xlcf
->
∑øms
);

992 i‡(
∑øm
 =
NULL
) {

993  
NGX_CONF_ERROR
;

996 
∑øm
->
«me
 = 
vÆue
[1].
d©a
;

997 
∑øm
->
quŸe
 = (
cmd
->
po°
 =
NULL
) ? 0 : 1;

999 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1001 
ccv
.
cf
 = cf;

1002 
ccv
.
vÆue
 = &value[2];

1003 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

1004 
ccv
.
zîo
 = 1;

1006 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1007  
NGX_CONF_ERROR
;

1010  
NGX_CONF_OK
;

1011 
	}
}

1015 
	$ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
)

1017 
	`xmlFªeDtd
(
d©a
);

1018 
	}
}

1022 
	$ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
)

1024 
	`x¶tFªeStyÀshìt
(
d©a
);

1025 
	}
}

1029 
	$ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1031 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
c⁄f
;

1033 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
));

1034 i‡(
c⁄f
 =
NULL
) {

1035  
NULL
;

1038 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
dtd_fûes
, 
cf
->
poﬁ
, 1,

1039 (
ngx_hâp_x¶t_fûe_t
))

1040 !
NGX_OK
)

1042  
NULL
;

1045 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
shìt_fûes
, 
cf
->
poﬁ
, 1,

1046 (
ngx_hâp_x¶t_fûe_t
))

1047 !
NGX_OK
)

1049  
NULL
;

1052  
c⁄f
;

1053 
	}
}

1057 
	$ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1059 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

1061 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
));

1062 i‡(
c⁄f
 =
NULL
) {

1063  
NULL
;

1076 
c⁄f
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

1078  
c⁄f
;

1079 
	}
}

1083 
	$ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1085 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1086 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1088 i‡(
c⁄f
->
dtd
 =
NULL
) {

1089 
c⁄f
->
dtd
 = 
¥ev
->dtd;

1092 i‡(
c⁄f
->
shìts
.
√…s
 == 0) {

1093 
c⁄f
->
shìts
 = 
¥ev
->sheets;

1096 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1097 
c⁄f
->
∑øms
 = 
¥ev
->params;

1100 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1101 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1102 
ngx_hâp_x¶t_deÁu…_ty≥s
)

1103 !
NGX_OK
)

1105  
NGX_CONF_ERROR
;

1108 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

1110  
NGX_CONF_OK
;

1111 
	}
}

1114 
ngx_öt_t


1115 
	$ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1117 
	`xmlInôP¨£r
();

1119 #i‡(
NGX_HAVE_EXSLT
)

1120 
	`ex¶tRegi°îAŒ
();

1123  
NGX_OK
;

1124 
	}
}

1127 
ngx_öt_t


1128 
	$ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1130 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1131 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_x¶t_hódî_fûãr
;

1133 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1134 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_x¶t_body_fûãr
;

1136  
NGX_OK
;

1137 
	}
}

1141 
	$ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1143 
	`x¶tCÀ™upGlobÆs
();

1144 
	`xmlCÀ™upP¨£r
();

1145 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/.svn/text-base/Makefile.PL.svn-base

2 #C›yrighà(
C
Ë
Ig‹
 
Sys€v


3 #C›yrighà(
C
Ë
Ngöx
, 
Inc
.

5 
	gu£
 5.006001;

6 
u£
 
	gExtUtûs
::
MakeMakî
;

8 
WrôeMakefûe
(

9 
NAME
 => 'nginx',

10 
VERSION_FROM
 => 'ngöx.pm', #föd†
$VERSION


11 
PREREQ_PM
 => {}, #e.
g
., 
ModuÀ
::
Name
 => 1.1

13 
ABSTRACT_FROM
 => 'ngöx.pm', #ªåõvê
ab°ø˘
 
‰om
 
moduÀ


14 
AUTHOR
 => 'Igor Sysoev',

16 
CCFLAGS
 => "$ENV{NGX_PM_CFLAGS}",

17 
OPTIMIZE
 => '-O',

19 
INC
 => 
joö
(" ", 
m≠
 {

20 
m
#^/#? "-I $_" : "-I ../../../../../$_"

21 } (
•lô
 /\
s
+/, 
$ENV
{
NGX_INCS
})),

23 
dïíd
 => {

24 'ngöx.c' => 
joö
(" ", 
m≠
 {

25 
m
#^/#? 
$_
 : "../../../../../$_"

26 } (
•lô
(/\
s
+/, 
$ENV
{
NGX_DEPS
}),

30 
PM
 => {

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/Makefile.PL

2 #C›yrighà(
C
Ë
Ig‹
 
Sys€v


3 #C›yrighà(
C
Ë
Ngöx
, 
Inc
.

5 
	gu£
 5.006001;

6 
u£
 
	gExtUtûs
::
MakeMakî
;

8 
WrôeMakefûe
(

9 
NAME
 => 'nginx',

10 
VERSION_FROM
 => 'ngöx.pm', #föd†
$VERSION


11 
PREREQ_PM
 => {}, #e.
g
., 
ModuÀ
::
Name
 => 1.1

13 
ABSTRACT_FROM
 => 'ngöx.pm', #ªåõvê
ab°ø˘
 
‰om
 
moduÀ


14 
AUTHOR
 => 'Igor Sysoev',

16 
CCFLAGS
 => "$ENV{NGX_PM_CFLAGS}",

17 
OPTIMIZE
 => '-O',

19 
INC
 => 
joö
(" ", 
m≠
 {

20 
m
#^/#? "-I $_" : "-I ../../../../../$_"

21 } (
•lô
 /\
s
+/, 
$ENV
{
NGX_INCS
})),

23 
dïíd
 => {

24 'ngöx.c' => 
joö
(" ", 
m≠
 {

25 
m
#^/#? 
$_
 : "../../../../../$_"

26 } (
•lô
(/\
s
+/, 
$ENV
{
NGX_DEPS
}),

30 
PM
 => {

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/ngx_http_perl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_≥æ_moduÀ.h
>

15 
PîlI¡î¥ëî
 *
	m≥æ
;

16 
HV
 *
	mngöx
;

17 
ngx_¨øy_t
 *
	mmoduÀs
;

18 
ngx_¨øy_t
 *
	mªquúes
;

19 } 
	tngx_hâp_≥æ_maö_c⁄f_t
;

23 
SV
 *
	msub
;

24 
ngx_°r_t
 
	mh™dÀr
;

25 } 
	tngx_hâp_≥æ_loc_c⁄f_t
;

29 
SV
 *
	msub
;

30 
ngx_°r_t
 
	mh™dÀr
;

31 } 
	tngx_hâp_≥æ_v¨übÀ_t
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_öt_t
 
ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
, 
ngx_°r_t
 **
∑øms
);

39 *
ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

40 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

41 
PîlI¡î¥ëî
 *
ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

43 
ngx_öt_t
 
ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
,

44 
ngx_log_t
 *
log
);

45 
ngx_öt_t
 
ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
,

46 
HV
 *
ngöx
, 
SV
 *
sub
, SV **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
);

47 
ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
);

49 
ngx_öt_t
 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

50 *
ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

52 *
ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

58 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

59 
ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
);

62 
ngx_öt_t
 
ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
);

66 
ngx_comm™d_t
 
	gngx_hâp_≥æ_comm™ds
[] = {

68 { 
ngx_°rög
("perl_modules"),

69 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

71 
NGX_HTTP_MAIN_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
moduÀs
),

73 
NULL
 },

75 { 
ngx_°rög
("perl_require"),

76 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

77 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

78 
NGX_HTTP_MAIN_CONF_OFFSET
,

79 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
ªquúes
),

80 
NULL
 },

82 { 
ngx_°rög
("perl"),

83 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_hâp_≥æ
,

85 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
NULL
 },

89 { 
ngx_°rög
("perl_set"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

91 
ngx_hâp_≥æ_£t
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
NULL
 },

96 
ngx_nuŒ_comm™d


100 
ngx_hâp_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ_˘x
 = {

101 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
,

102 
NULL
,

104 
ngx_hâp_≥æ_¸óã_maö_c⁄f
,

105 
ngx_hâp_≥æ_öô_maö_c⁄f
,

107 
NULL
,

108 
NULL
,

110 
ngx_hâp_≥æ_¸óã_loc_c⁄f
,

111 
ngx_hâp_≥æ_mîge_loc_c⁄f


115 
ngx_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ
 = {

116 
NGX_MODULE_V1
,

117 &
ngx_hâp_≥æ_moduÀ_˘x
,

118 
ngx_hâp_≥æ_comm™ds
,

119 
NGX_HTTP_MODULE
,

120 
NULL
,

121 
NULL
,

122 
ngx_hâp_≥æ_öô_w‹kî
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
ngx_hâp_≥æ_exô
,

127 
NGX_MODULE_V1_PADDING


131 #i‡(
NGX_HTTP_SSI
)

133 
	#NGX_HTTP_PERL_SSI_SUB
 0

	)

134 
	#NGX_HTTP_PERL_SSI_ARG
 1

	)

137 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_≥æ_ssi_∑øms
[] = {

138 { 
ngx_°rög
("sub"), 
NGX_HTTP_PERL_SSI_SUB
, 1, 0 },

139 { 
ngx_°rög
("¨g"), 
NGX_HTTP_PERL_SSI_ARG
, 0, 1 },

140 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

143 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_≥æ_ssi_comm™d
 = {

144 
ngx_°rög
("≥æ"), 
ngx_hâp_≥æ_ssi
, 
ngx_hâp_≥æ_ssi_∑øms
, 0, 0, 1

150 
ngx_°r_t
 
	gngx_nuŒ_«me
 = 
ngx_nuŒ_°rög
;

151 
HV
 *
	gngöx_°ash
;

153 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

154 
ngx_uöt_t
 
	gngx_≥æ_ãrm
;

156 
PîlI¡î¥ëî
 *
	g≥æ
;

161 
	$ngx_hâp_≥æ_xs_öô
(
pTHX
)

163 
	`√wXS
("Dy«Lﬂdî::boŸ_Dy«Lﬂdî", 
boŸ_Dy«Lﬂdî
, 
__FILE__
);

165 
ngöx_°ash
 = 
	`gv_°ashpv
("ngöx", 
TRUE
);

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_≥æ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

172 
r
->
maö
->
cou¡
++;

174 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

176  
NGX_DONE
;

177 
	}
}

181 
	$ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

183 
SV
 *
sub
;

184 
ngx_öt_t
 
rc
;

185 
ngx_°r_t
 
uri
, 
¨gs
, *
h™dÀr
;

186 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

187 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

188 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl handler");

192 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

194 i‡(
˘x
 =
NULL
) {

195 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

201 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

204 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

208 
	`dTHXa
(
pmcf
->
≥æ
);

209 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

211 i‡(
˘x
->
√xt
 =
NULL
) {

212 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

213 
sub
 = 
∂cf
->sub;

214 
h™dÀr
 = &
∂cf
->handler;

217 
sub
 = 
˘x
->
√xt
;

218 
h™dÀr
 = &
ngx_nuŒ_«me
;

219 
˘x
->
√xt
 = 
NULL
;

222 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sub
, 
NULL
, 
h™dÀr
,

223 
NULL
);

227 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

228 "≥æ h™dÀ∏d⁄e: %i", 
rc
);

230 i‡(
rc
 =
NGX_DONE
) {

231 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

235 i‡(
rc
 > 600) {

236 
rc
 = 
NGX_OK
;

239 i‡(
˘x
->
ªdúe˘_uri
.
Àn
) {

240 
uri
 = 
˘x
->
ªdúe˘_uri
;

241 
¨gs
 = 
˘x
->
ªdúe˘_¨gs
;

244 
uri
.
Àn
 = 0;

247 
˘x
->
fûíame
.
d©a
 = 
NULL
;

248 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

250 i‡(
˘x
->
d⁄e
 || ctx->
√xt
) {

251 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

255 i‡(
uri
.
Àn
) {

256 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

257 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

261 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_HTTP_OK
) {

262 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

263 
˘x
->
d⁄e
 = 1;

266 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

267 
	}
}

271 
	$ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

273 
ngx_evít_t
 *
wev
;

275 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

280 i‡(
wev
->
timedout
) {

281 
wev
->
timedout
 = 0;

282 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

286 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

287 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

289 
	}
}

292 
ngx_öt_t


293 
	$ngx_hâp_≥æ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

294 
uöçå_t
 
d©a
)

296 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
 = (ngx_hâp_≥æ_v¨übÀ_à*Ë
d©a
;

298 
ngx_öt_t
 
rc
;

299 
ngx_°r_t
 
vÆue
;

300 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

301 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

303 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

306 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

308 i‡(
˘x
 =
NULL
) {

309 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

310 i‡(
˘x
 =
NULL
) {

311  
NGX_ERROR
;

314 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

317 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

319 
vÆue
.
d©a
 = 
NULL
;

323 
	`dTHXa
(
pmcf
->
≥æ
);

324 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

326 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
pv
->
sub
, 
NULL
,

327 &
pv
->
h™dÀr
, &
vÆue
);

331 i‡(
vÆue
.
d©a
) {

332 
v
->
Àn
 = 
vÆue
.len;

333 
v
->
vÆid
 = 1;

334 
v
->
no_ˇchóbÀ
 = 0;

335 
v
->
nŸ_found
 = 0;

336 
v
->
d©a
 = 
vÆue
.data;

339 
v
->
nŸ_found
 = 1;

342 
˘x
->
fûíame
.
d©a
 = 
NULL
;

343 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

345 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

348  
rc
;

349 
	}
}

352 #i‡(
NGX_HTTP_SSI
)

354 
ngx_öt_t


355 
	$ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
,

356 
ngx_°r_t
 **
∑øms
)

358 
SV
 *
sv
, **
asv
;

359 
ngx_öt_t
 
rc
;

360 
ngx_°r_t
 *
h™dÀr
, **
¨gs
;

361 
ngx_uöt_t
 
i
;

362 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

363 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

368 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

370 i‡(
˘x
 =
NULL
) {

371 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

372 i‡(
˘x
 =
NULL
) {

373  
NGX_ERROR
;

376 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

379 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

381 
˘x
->
ssi
 = 
ssi_˘x
;

383 
h™dÀr
 = 
∑øms
[
NGX_HTTP_PERL_SSI_SUB
];

384 
h™dÀr
->
d©a
[h™dÀr->
Àn
] = '\0';

388 
	`dTHXa
(
pmcf
->
≥æ
);

389 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

395 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 
h™dÀr
, &
sv
);

397 i‡(
sv
 =&
PL_sv_undef
) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

399 "evÆ_pv(\"%V\"ËÁûed", 
h™dÀr
);

400  
NGX_ERROR
;

403 i‡(
sv
 =
NULL
) {

404 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

409 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

411 
¨gs
 = &
∑øms
[
NGX_HTTP_PERL_SSI_ARG
];

413 i‡(
¨gs
) {

415 
i
 = 0; 
¨gs
[i]; i++) { }

417 
asv
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
i
 + 1Ë* (
SV
 *));

419 i‡(
asv
 =
NULL
) {

420 
	`SvREFCNT_dec
(
sv
);

421  
NGX_ERROR
;

424 
asv
[0] = (
SV
 *Ë(
uöçå_t
Ë
i
;

426 
i
 = 0; 
¨gs
[i]; i++) {

427 
asv
[
i
 + 1] = 
	`√wSVpvn
((*Ë
¨gs
[i]->
d©a
,árgs[i]->
Àn
);

431 
asv
 = 
NULL
;

434 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sv
, 
asv
, 
h™dÀr
,

435 
NULL
);

437 
	`SvREFCNT_dec
(
sv
);

441 
˘x
->
fûíame
.
d©a
 = 
NULL
;

442 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

443 
˘x
->
ssi
 = 
NULL
;

445 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl ssi done");

447  
rc
;

448 
	}
}

454 
	$ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

456 
ngx_°r_t
 *
m
;

457 
ngx_uöt_t
 
i
;

458 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

459 
ngx_poﬁ_˛ónup_t
 *
˛n
;

461 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

462 i‡(
˛n
 =
NULL
) {

463  
NGX_CONF_ERROR
;

468 #ifde‡
NGX_PERL_MODULES


469 i‡(
pmcf
->
moduÀs
 =
NGX_CONF_UNSET_PTR
) {

471 
pmcf
->
moduÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_°r_t
));

472 i‡(
pmcf
->
moduÀs
 =
NULL
) {

473  
NGX_CONF_ERROR
;

476 
m
 = 
	`ngx_¨øy_push
(
pmcf
->
moduÀs
);

477 i‡(
m
 =
NULL
) {

478  
NGX_CONF_ERROR
;

481 
	`ngx_°r_£t
(
m
, 
NGX_PERL_MODULES
);

485 i‡(
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
) {

486 
m
 = 
pmcf
->
moduÀs
->
ñts
;

487 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

488 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
m
[
i
], 0Ë!
NGX_OK
) {

489  
NGX_CONF_ERROR
;

494 #i‡!(
NGX_HAVE_PERL_MULTIPLICITY
)

496 i‡(
≥æ
) {

498 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

499  
NGX_CONF_ERROR
;

502 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
)

503 !
NGX_OK
)

505  
NGX_CONF_ERROR
;

508 
pmcf
->
≥æ
 =Öerl;

509 
pmcf
->
ngöx
 = 
ngöx_°ash
;

511  
NGX_CONF_OK
;

516 i‡(
ngöx_°ash
 =
NULL
) {

517 
	`PERL_SYS_INIT
(&
ngx_¨gc
, &
ngx_¨gv
);

520 
pmcf
->
≥æ
 = 
	`ngx_hâp_≥æ_¸óã_öãΩªãr
(
cf
,Ömcf);

522 i‡(
pmcf
->
≥æ
 =
NULL
) {

523  
NGX_CONF_ERROR
;

526 
pmcf
->
ngöx
 = 
ngöx_°ash
;

528 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

530 
˛n
->
h™dÀr
 = 
ngx_hâp_≥æ_˛ónup_≥æ
;

531 
˛n
->
d©a
 = 
pmcf
->
≥æ
;

535 
≥æ
 = 
pmcf
->perl;

539  
NGX_CONF_OK
;

540 
	}
}

543 
PîlI¡î¥ëî
 *

544 
	$ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

545 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

547 
n
;

548 
STRLEN
 
Àn
;

549 
SV
 *
sv
;

550 *
vî
, **
embeddög
;

551 
ngx_°r_t
 *
m
;

552 
ngx_uöt_t
 
i
;

553 
PîlI¡î¥ëî
 *
≥æ
;

555 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0, "createÖerl interpreter");

557 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

558  
NULL
;

561 
≥æ
 = 
	`≥æ_Æloc
();

562 i‡(
≥æ
 =
NULL
) {

563 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "perl_alloc() failed");

564  
NULL
;

569 
	`dTHXa
(
≥æ
);

570 
	`PERL_SET_CONTEXT
(
≥æ
);

572 
	`≥æ_c⁄°ru˘
(
≥æ
);

574 #ifde‡
PERL_EXIT_DESTRUCT_END


575 
PL_exô_Êags
 |
PERL_EXIT_DESTRUCT_END
;

578 
n
 = (
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
Ë?Ömcf->moduÀs->
√…s
 * 2 : 0;

580 
embeddög
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (4 + 
n
) * (*));

581 i‡(
embeddög
 =
NULL
) {

582 
Áû
;

585 
embeddög
[0] = "";

587 i‡(
n
++) {

588 
m
 = 
pmcf
->
moduÀs
->
ñts
;

589 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

590 
embeddög
[2 * 
i
 + 1] = "-I";

591 
embeddög
[2 * 
i
 + 2] = (*Ë
m
[i].
d©a
;

595 
embeddög
[
n
++] = "-Mnginx";

596 
embeddög
[
n
++] = "-e";

597 
embeddög
[
n
++] = "0";

599 
n
 = 
	`≥æ_∑r£
(
≥æ
, 
ngx_hâp_≥æ_xs_öô
,Ç, 
embeddög
, 
NULL
);

601 i‡(
n
 != 0) {

602 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "≥æ_∑r£(ËÁûed: %d", 
n
);

603 
Áû
;

606 
sv
 = 
	`gë_sv
("ngöx::VERSION", 
FALSE
);

607 
vî
 = 
	`SvPV
(
sv
, 
Àn
);

609 i‡(
	`ngx_°rcmp
(
vî
, 
NGINX_VERSION
) != 0) {

610 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

611 "vîsi⁄ " 
NGINX_VERSION
 " ofÇginx.pm isÑequired, "

612 "buà%†wa†found", 
vî
);

613 
Áû
;

616 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
Ë!
NGX_OK
) {

617 
Áû
;

622  
≥æ
;

624 
Áû
:

626 (Ë
	`≥æ_de°ru˘
(
≥æ
);

628 
	`≥æ_‰ì
(
≥æ
);

630  
NULL
;

631 
	}
}

634 
ngx_öt_t


635 
	$ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
, 
ngx_log_t
 *
log
)

637 
u_ch¨
 *
îr
;

638 
STRLEN
 
Àn
;

639 
ngx_°r_t
 *
s¸ùt
;

640 
ngx_uöt_t
 
i
;

642 i‡(
ªquúes
 =
NGX_CONF_UNSET_PTR
) {

643  
NGX_OK
;

646 
s¸ùt
 = 
ªquúes
->
ñts
;

647 
i
 = 0; i < 
ªquúes
->
√…s
; i++) {

649 
	`ªquúe_pv
((*Ë
s¸ùt
[
i
].
d©a
);

651 i‡(
	`SvTRUE
(
ERRSV
)) {

653 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

654 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

656 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

658 
s¸ùt
[
i
].
d©a
, 
Àn
 + 1, 
îr
);

660  
NGX_ERROR
;

664  
NGX_OK
;

665 
	}
}

668 
ngx_öt_t


669 
	$ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
, 
HV
 *
ngöx
, 
SV
 *
sub
,

670 
SV
 **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
)

672 
SV
 *
sv
;

673 
n
, 
°©us
;

674 *
löe
;

675 
u_ch¨
 *
îr
;

676 
STRLEN
 
Àn
, 
n_a
;

677 
ngx_uöt_t
 
i
;

678 
ngx_c⁄√˘i⁄_t
 *
c
;

680 
dSP
;

682 
°©us
 = 0;

684 
ENTER
;

685 
SAVETMPS
;

687 
	`PUSHMARK
(
•
);

689 
sv
 = 
	`sv_2m‹èl
(
	`sv_bÀss
(
	`√wRV_noöc
(
	`√wSViv
(
	`PTR2IV
(
r
))), 
ngöx
));

690 
	`XPUSHs
(
sv
);

692 i‡(
¨gs
) {

693 
	`EXTEND
(
•
, (
öçå_t
Ë
¨gs
[0]);

695 
i
 = 1; i <(
uöçå_t
Ë
¨gs
[0]; i++) {

696 
	`PUSHs
(
	`sv_2m‹èl
(
¨gs
[
i
]));

700 
PUTBACK
;

702 
c
 = 
r
->
c⁄√˘i⁄
;

704 
n
 = 
	`ˇŒ_sv
(
sub
, 
G_EVAL
);

706 
SPAGAIN
;

708 i‡(
n
) {

709 i‡(
rv
 =
NULL
) {

710 
°©us
 = 
POPi
;

712 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

713 "ˇŒ_sv: %d", 
°©us
);

716 
löe
 = 
	`SvPVx
(
POPs
, 
n_a
);

717 
rv
->
Àn
 = 
n_a
;

719 
rv
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
n_a
);

720 i‡(
rv
->
d©a
 =
NULL
) {

721  
NGX_ERROR
;

724 
	`ngx_mem˝y
(
rv
->
d©a
, 
löe
, 
n_a
);

728 
PUTBACK
;

730 
FREETMPS
;

731 
LEAVE
;

735 i‡(
	`SvTRUE
(
ERRSV
)) {

737 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

738 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

741 "ˇŒ_sv(\"%V\"ËÁûed: \"%*s\"", 
h™dÀr
, 
Àn
 + 1, 
îr
);

743 i‡(
rv
) {

744  
NGX_ERROR
;

747  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

750 i‡(
n
 != 1) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

752 "ˇŒ_sv(\"%V\"Ëªtu∫ed %dÑesu…s", 
h™dÀr
, 
n
);

753 
°©us
 = 
NGX_OK
;

756 i‡(
rv
) {

757  
NGX_OK
;

760  (
ngx_öt_t
Ë
°©us
;

761 
	}
}

765 
	$ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
)

767 
u_ch¨
 *
p
;

769 
p
 = 
h™dÀr
->
d©a
; *p;Ö++) {

770 i‡(*
p
 !' ' && *∞!'\t' && *∞!
CR
 && *∞!
LF
) {

775 i‡(
	`ngx_°∫cmp
(
p
, "sub ", 4) == 0

776 || 
	`ngx_°∫cmp
(
p
, "sub{", 4) == 0

777 || 
	`ngx_°∫cmp
(
p
, "use ", 4) == 0)

779 *
sv
 = 
	`evÆ_pv
((*Ë
p
, 
FALSE
);

786 *
sv
 = 
NULL
;

787 
	}
}

791 
	$ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

793 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

795 
pmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_maö_c⁄f_t
));

796 i‡(
pmcf
 =
NULL
) {

797  
NULL
;

800 
pmcf
->
moduÀs
 = 
NGX_CONF_UNSET_PTR
;

801 
pmcf
->
ªquúes
 = 
NGX_CONF_UNSET_PTR
;

803  
pmcf
;

804 
	}
}

808 
	$ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

810 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
 = 
c⁄f
;

812 i‡(
pmcf
->
≥æ
 =
NULL
) {

813 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

814  
NGX_CONF_ERROR
;

818  
NGX_CONF_OK
;

819 
	}
}

822 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

825 
	$ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
)

827 
PîlI¡î¥ëî
 *
≥æ
 = 
d©a
;

829 
	`PERL_SET_CONTEXT
(
≥æ
);

831 (Ë
	`≥æ_de°ru˘
(
≥æ
);

833 
	`≥æ_‰ì
(
≥æ
);

835 i‡(
ngx_≥æ_ãrm
) {

836 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0, "perlÅerm");

838 
	`PERL_SYS_TERM
();

840 
	}
}

845 
ngx_öt_t


846 
	$ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

848 #i‡(
NGX_HTTP_SSI
)

849 
ngx_öt_t
 
rc
;

850 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

852 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

854 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
ngx_hâp_≥æ_ssi_comm™d
.
«me
,

855 &
ngx_hâp_≥æ_ssi_comm™d
, 
NGX_HASH_READONLY_KEY
);

857 i‡(
rc
 !
NGX_OK
) {

858 i‡(
rc
 =
NGX_BUSY
) {

859 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

861 &
ngx_hâp_≥æ_ssi_comm™d
.
«me
);

864  
NGX_ERROR
;

868  
NGX_OK
;

869 
	}
}

873 
	$ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

875 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

877 
∂cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_loc_c⁄f_t
));

878 i‡(
∂cf
 =
NULL
) {

879  
NULL
;

888  
∂cf
;

889 
	}
}

893 
	$ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

895 
ngx_hâp_≥æ_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

896 
ngx_hâp_≥æ_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

898 i‡(
c⁄f
->
sub
 =
NULL
) {

899 
c⁄f
->
sub
 = 
¥ev
->sub;

900 
c⁄f
->
h™dÀr
 = 
¥ev
->handler;

903  
NGX_CONF_OK
;

904 
	}
}

908 
	$ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

910 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

912 
ngx_°r_t
 *
vÆue
;

913 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

914 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

916 
vÆue
 = 
cf
->
¨gs
->
ñts
;

918 i‡(
∂cf
->
h™dÀr
.
d©a
) {

919 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

920 "du∂iˇãÖî»h™dÀ∏\"%V\"", &
vÆue
[1]);

921  
NGX_CONF_ERROR
;

924 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

926 i‡(
pmcf
->
≥æ
 =
NULL
) {

927 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

928  
NGX_CONF_ERROR
;

932 
∂cf
->
h™dÀr
 = 
vÆue
[1];

936 
	`dTHXa
(
pmcf
->
≥æ
);

937 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

939 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[1], &
∂cf
->
sub
);

941 i‡(
∂cf
->
sub
 =&
PL_sv_undef
) {

942 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

943 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[1]);

944  
NGX_CONF_ERROR
;

947 i‡(
∂cf
->
sub
 =
NULL
) {

948 
∂cf
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[1].
d©a
, vÆue[1].
Àn
);

953 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

954 
˛cf
->
h™dÀr
 = 
ngx_hâp_≥æ_h™dÀr
;

956  
NGX_CONF_OK
;

957 
	}
}

961 
	$ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

963 
ngx_öt_t
 
ödex
;

964 
ngx_°r_t
 *
vÆue
;

965 
ngx_hâp_v¨übÀ_t
 *
v
;

966 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
;

967 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

969 
vÆue
 = 
cf
->
¨gs
->
ñts
;

971 i‡(
vÆue
[1].
d©a
[0] != '$') {

972 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

973 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

974  
NGX_CONF_ERROR
;

977 
vÆue
[1].
Àn
--;

978 
vÆue
[1].
d©a
++;

980 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

981 i‡(
v
 =
NULL
) {

982  
NGX_CONF_ERROR
;

985 
pv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_v¨übÀ_t
));

986 i‡(
pv
 =
NULL
) {

987  
NGX_CONF_ERROR
;

990 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

991 i‡(
ödex
 =
NGX_ERROR
) {

992  
NGX_CONF_ERROR
;

995 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

997 i‡(
pmcf
->
≥æ
 =
NULL
) {

998 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

999  
NGX_CONF_ERROR
;

1003 
pv
->
h™dÀr
 = 
vÆue
[2];

1007 
	`dTHXa
(
pmcf
->
≥æ
);

1008 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1010 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[2], &
pv
->
sub
);

1012 i‡(
pv
->
sub
 =&
PL_sv_undef
) {

1013 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

1014 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[2]);

1015  
NGX_CONF_ERROR
;

1018 i‡(
pv
->
sub
 =
NULL
) {

1019 
pv
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[2].
d©a
, vÆue[2].
Àn
);

1024 
v
->
gë_h™dÀr
 = 
ngx_hâp_≥æ_v¨übÀ
;

1025 
v
->
d©a
 = (
uöçå_t
Ë
pv
;

1027  
NGX_CONF_OK
;

1028 
	}
}

1031 
ngx_öt_t


1032 
	$ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

1034 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

1036 
pmcf
 = 
	`ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
ngx_hâp_≥æ_moduÀ
);

1038 i‡(
pmcf
) {

1039 
	`dTHXa
(
pmcf
->
≥æ
);

1040 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1044 
	`sv_£tiv
(
	`GvSV
(
	`gv_„tchpv
("$", 
TRUE
, 
SVt_PV
)), (
I32
Ë
ngx_pid
);

1047  
NGX_OK
;

1048 
	}
}

1052 
	$ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1054 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

1061 
ngx_≥æ_ãrm
 = 1;

1065 i‡(
ngöx_°ash
) {

1066 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cy˛e
->
log
, 0, "perlÅerm");

1068 (Ë
	`≥æ_de°ru˘
(
≥æ
);

1070 
	`≥æ_‰ì
(
≥æ
);

1072 
	`PERL_SYS_TERM
();

1076 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/ngx_http_perl_module.h

8 #i‚de‡
_NGX_HTTP_PERL_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_PERL_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

15 
	~<ngöx.h
>

17 
	~<EXTERN.h
>

18 
	~<≥æ.h
>

21 
ngx_hâp_ªque°_t
 *
	tngöx
;

24 
ngx_°r_t
 
	mfûíame
;

25 
ngx_°r_t
 
	mªdúe˘_uri
;

26 
ngx_°r_t
 
	mªdúe˘_¨gs
;

28 
SV
 *
	m√xt
;

30 
ngx_uöt_t
 
	md⁄e
;

32 
ngx_¨øy_t
 *
	mv¨übÀs
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_hâp_ssi_˘x_t
 *
	mssi
;

37 } 
	tngx_hâp_≥æ_˘x_t
;

41 
ngx_uöt_t
 
	mhash
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_°r_t
 
	mvÆue
;

44 } 
	tngx_hâp_≥æ_v¨_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_≥æ_moduÀ
;

54 #i‚de‡
PERL_IMPLICIT_CONTEXT


55 #unde‡
dTHXa


56 
	#dTHXa
(
a
)

	)

60 
boŸ_Dy«Lﬂdî
(
pTHX_
 
CV
* 
cv
);

63 
ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_öt_t
 
ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
,

15 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

16 
ngx_öt_t
 
ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
,

17 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

18 
ngx_öt_t
 
ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

19 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

21 
ngx_öt_t
 
ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
,

22 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

23 
ngx_hâp_li°í_›t_t
 *
ls›t
);

24 
ngx_öt_t
 
ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
,

25 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

26 
ngx_hâp_li°í_›t_t
 *
ls›t
);

27 
ngx_öt_t
 
ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

30 *
ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
,

31 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

32 
ngx_uöt_t
 
˘x_ödex
);

33 *
ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

34 
ngx_queue_t
 *
loˇti⁄s
, **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

35 
ngx_uöt_t
 
˘x_ödex
);

36 
ngx_öt_t
 
ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

38 
ngx_öt_t
 
ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

39 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

40 
ngx_öt_t
 
ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
,

41 c⁄° 
ngx_queue_t
 *
two
);

42 
ngx_öt_t
 
ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_queue_t
 *
loˇti⁄s
);

44 
ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,

45 
ngx_queue_t
 *
q
);

46 
ngx_hâp_loˇti⁄_åì_node_t
 *

47 
ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

48 
size_t
 
¥efix
);

50 
ngx_öt_t
 
ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_¨øy_t
 *
p‹ts
);

52 
ngx_öt_t
 
ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
,

53 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

54 
ngx_öt_t
 
ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

55 
ngx_libc_cde˛
 
ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

56 c⁄° *
two
);

58 
ngx_öt_t
 
ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
,

59 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
);

60 
ngx_li°íög_t
 *
ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
,

61 
ngx_hâp_c⁄f_addr_t
 *
addr
);

62 
ngx_öt_t
 
ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

63 
ngx_hâp_c⁄f_addr_t
 *
addr
);

64 #i‡(
NGX_HAVE_INET6
)

65 
ngx_öt_t
 
ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

66 
ngx_hâp_c⁄f_addr_t
 *
addr
);

69 
ngx_uöt_t
 
	gngx_hâp_max_moduÀ
;

72 
	$ngx_öt_t
 (*
ngx_hâp_t›_hódî_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
);

73 
	$ngx_öt_t
 (*
ngx_hâp_t›_body_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ch
);

76 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[] = {

77 
	`ngx_°rög
("text/html"),

78 
ngx_nuŒ_°rög


79 
	}
};

82 
ngx_comm™d_t
 
	gngx_hâp_comm™ds
[] = {

84 { 
ngx_°rög
("http"),

85 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

86 
ngx_hâp_block
,

89 
NULL
 },

91 
ngx_nuŒ_comm™d


95 
ngx_c‹e_moduÀ_t
 
	gngx_hâp_moduÀ_˘x
 = {

96 
ngx_°rög
("http"),

97 
NULL
,

98 
NULL


102 
ngx_moduÀ_t
 
	gngx_hâp_moduÀ
 = {

103 
NGX_MODULE_V1
,

104 &
ngx_hâp_moduÀ_˘x
,

105 
ngx_hâp_comm™ds
,

106 
NGX_CORE_MODULE
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NGX_MODULE_V1_PADDING


119 
	$ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

121 *
rv
;

122 
ngx_uöt_t
 
mi
, 
m
, 
s
;

123 
ngx_c⁄f_t
 
pcf
;

124 
ngx_hâp_moduÀ_t
 *
moduÀ
;

125 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

126 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

127 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

128 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

132 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

133 i‡(
˘x
 =
NULL
) {

134  
NGX_CONF_ERROR
;

137 *(
ngx_hâp_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

142 
ngx_hâp_max_moduÀ
 = 0;

143 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

144 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

148 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_hâp_max_moduÀ
++;

154 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

155 (*Ë* 
ngx_hâp_max_moduÀ
);

156 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

157  
NGX_CONF_ERROR
;

166 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

167 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

168  
NGX_CONF_ERROR
;

177 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

178 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

179  
NGX_CONF_ERROR
;

188 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

189 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

193 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

194 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

196 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

197 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

198 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

199  
NGX_CONF_ERROR
;

203 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

204 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

205 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

206  
NGX_CONF_ERROR
;

210 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

211 
˘x
->
loc_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

212 i‡(
˘x
->
loc_c⁄f
[
mi
] =
NULL
) {

213  
NGX_CONF_ERROR
;

218 
pcf
 = *
cf
;

219 
cf
->
˘x
 = ctx;

221 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

222 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

226 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

228 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

229 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

230  
NGX_CONF_ERROR
;

237 
cf
->
moduÀ_ty≥
 = 
NGX_HTTP_MODULE
;

238 
cf
->
cmd_ty≥
 = 
NGX_HTTP_MAIN_CONF
;

239 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

241 i‡(
rv
 !
NGX_CONF_OK
) {

242 
Áûed
;

250 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

251 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

253 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

254 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

258 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

259 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

263 i‡(
moduÀ
->
öô_maö_c⁄f
) {

264 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

265 i‡(
rv
 !
NGX_CONF_OK
) {

266 
Áûed
;

270 
rv
 = 
	`ngx_hâp_mîge_£rvîs
(
cf
, 
cmcf
, 
moduÀ
, 
mi
);

271 i‡(
rv
 !
NGX_CONF_OK
) {

272 
Áûed
;

279 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

281 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

283 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
cscÂ
[
s
], 
˛cf
Ë!
NGX_OK
) {

284  
NGX_CONF_ERROR
;

287 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

288  
NGX_CONF_ERROR
;

293 i‡(
	`ngx_hâp_öô_pha£s
(
cf
, 
cmcf
Ë!
NGX_OK
) {

294  
NGX_CONF_ERROR
;

297 i‡(
	`ngx_hâp_öô_hódîs_ö_hash
(
cf
, 
cmcf
Ë!
NGX_OK
) {

298  
NGX_CONF_ERROR
;

302 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

303 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

307 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

309 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

310 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

311  
NGX_CONF_ERROR
;

316 i‡(
	`ngx_hâp_v¨übÀs_öô_v¨s
(
cf
Ë!
NGX_OK
) {

317  
NGX_CONF_ERROR
;

325 *
cf
 = 
pcf
;

328 i‡(
	`ngx_hâp_öô_pha£_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

329  
NGX_CONF_ERROR
;

335 i‡(
	`ngx_hâp_›timize_£rvîs
(
cf
, 
cmcf
, cmcf->
p‹ts
Ë!
NGX_OK
) {

336  
NGX_CONF_ERROR
;

339  
NGX_CONF_OK
;

341 
Áûed
:

343 *
cf
 = 
pcf
;

345  
rv
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

352 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
,

353 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

354 !
NGX_OK
)

356  
NGX_ERROR
;

359 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
,

360 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

361 !
NGX_OK
)

363  
NGX_ERROR
;

366 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
,

367 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

368 !
NGX_OK
)

370  
NGX_ERROR
;

373 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
,

374 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

375 !
NGX_OK
)

377  
NGX_ERROR
;

380 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
,

381 
cf
->
poﬁ
, 2, (
ngx_hâp_h™dÀr_±
))

382 !
NGX_OK
)

384  
NGX_ERROR
;

387 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
,

388 
cf
->
poﬁ
, 4, (
ngx_hâp_h™dÀr_±
))

389 !
NGX_OK
)

391  
NGX_ERROR
;

394 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
,

395 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

396 !
NGX_OK
)

398  
NGX_ERROR
;

401  
NGX_OK
;

402 
	}
}

405 
ngx_öt_t


406 
	$ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

408 
ngx_¨øy_t
 
hódîs_ö
;

409 
ngx_hash_key_t
 *
hk
;

410 
ngx_hash_öô_t
 
hash
;

411 
ngx_hâp_hódî_t
 *
hódî
;

413 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

414 !
NGX_OK
)

416  
NGX_ERROR
;

419 
hódî
 = 
ngx_hâp_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

420 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

421 i‡(
hk
 =
NULL
) {

422  
NGX_ERROR
;

425 
hk
->
key
 = 
hódî
->
«me
;

426 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

427 
hk
->
vÆue
 = 
hódî
;

430 
hash
.hash = &
cmcf
->
hódîs_ö_hash
;

431 
hash
.
key
 = 
ngx_hash_key_lc
;

432 
hash
.
max_size
 = 512;

433 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

434 
hash
.
«me
 = "headers_in_hash";

435 
hash
.
poﬁ
 = 
cf
->pool;

436 
hash
.
ãmp_poﬁ
 = 
NULL
;

438 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

439  
NGX_ERROR
;

442  
NGX_OK
;

443 
	}
}

446 
ngx_öt_t


447 
	$ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

449 
ngx_öt_t
 
j
;

450 
ngx_uöt_t
 
i
, 
n
;

451 
ngx_uöt_t
 
föd_c⁄fig_ödex
, 
u£_ªwrôe
, 
u£_ac˚ss
;

452 
ngx_hâp_h™dÀr_±
 *
h
;

453 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

454 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

456 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

457 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

458 
föd_c⁄fig_ödex
 = 0;

459 
u£_ªwrôe
 = 
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

460 
u£_ac˚ss
 = 
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

462 
n
 = 
u£_ªwrôe
 + 
u£_ac˚ss
 + 
cmcf
->
åy_fûes
 + 1 ;

464 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

465 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

468 
ph
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

469 
n
 * (
ngx_hâp_pha£_h™dÀr_t
) + (*));

470 i‡(
ph
 =
NULL
) {

471  
NGX_ERROR
;

474 
cmcf
->
pha£_ígöe
.
h™dÀrs
 = 
ph
;

475 
n
 = 0;

477 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

478 
h
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
ñts
;

480 
i
) {

482 
NGX_HTTP_SERVER_REWRITE_PHASE
:

483 i‡(
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

484 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = 
n
;

486 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

490 
NGX_HTTP_FIND_CONFIG_PHASE
:

491 
föd_c⁄fig_ödex
 = 
n
;

493 
ph
->
checkî
 = 
ngx_hâp_c‹e_föd_c⁄fig_pha£
;

494 
n
++;

495 
ph
++;

499 
NGX_HTTP_REWRITE_PHASE
:

500 i‡(
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

501 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = 
n
;

503 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

507 
NGX_HTTP_POST_REWRITE_PHASE
:

508 i‡(
u£_ªwrôe
) {

509 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ªwrôe_pha£
;

510 
ph
->
√xt
 = 
föd_c⁄fig_ödex
;

511 
n
++;

512 
ph
++;

517 
NGX_HTTP_ACCESS_PHASE
:

518 
checkî
 = 
ngx_hâp_c‹e_ac˚ss_pha£
;

519 
n
++;

522 
NGX_HTTP_POST_ACCESS_PHASE
:

523 i‡(
u£_ac˚ss
) {

524 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ac˚ss_pha£
;

525 
ph
->
√xt
 = 
n
;

526 
ph
++;

531 
NGX_HTTP_TRY_FILES_PHASE
:

532 i‡(
cmcf
->
åy_fûes
) {

533 
ph
->
checkî
 = 
ngx_hâp_c‹e_åy_fûes_pha£
;

534 
n
++;

535 
ph
++;

540 
NGX_HTTP_CONTENT_PHASE
:

541 
checkî
 = 
ngx_hâp_c‹e_c⁄ã¡_pha£
;

545 
checkî
 = 
ngx_hâp_c‹e_gíîic_pha£
;

548 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

550 
j
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
 - 1; j >=0; j--) {

551 
ph
->
checkî
 = checker;

552 
ph
->
h™dÀr
 = 
h
[
j
];

553 
ph
->
√xt
 = 
n
;

554 
ph
++;

558  
NGX_OK
;

559 
	}
}

563 
	$ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

564 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

566 *
rv
;

567 
ngx_uöt_t
 
s
;

568 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

569 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

570 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

572 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

573 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

574 
ßved
 = *
˘x
;

575 
rv
 = 
NGX_CONF_OK
;

577 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

581 
˘x
->
§v_c⁄f
 = 
cscÂ
[
s
]->ctx->srv_conf;

583 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

584 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
, 
ßved
.
§v_c⁄f
[
˘x_ödex
],

585 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
˘x_ödex
]);

586 i‡(
rv
 !
NGX_CONF_OK
) {

587 
Áûed
;

591 i‡(
moduÀ
->
mîge_loc_c⁄f
) {

595 
˘x
->
loc_c⁄f
 = 
cscÂ
[
s
]->ctx->loc_conf;

597 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
ßved
.
loc_c⁄f
[
˘x_ödex
],

598 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
˘x_ödex
]);

599 i‡(
rv
 !
NGX_CONF_OK
) {

600 
Áûed
;

605 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

607 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
,

608 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
,

609 
moduÀ
, 
˘x_ödex
);

610 i‡(
rv
 !
NGX_CONF_OK
) {

611 
Áûed
;

616 
Áûed
:

618 *
˘x
 = 
ßved
;

620  
rv
;

621 
	}
}

625 
	$ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

626 **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

628 *
rv
;

629 
ngx_queue_t
 *
q
;

630 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

631 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

632 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

634 i‡(
loˇti⁄s
 =
NULL
) {

635  
NGX_CONF_OK
;

638 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

639 
ßved
 = *
˘x
;

641 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

642 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

643 
q
 = 
	`ngx_queue_√xt
(q))

645 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

647 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

648 
˘x
->
loc_c⁄f
 = 
˛cf
->loc_conf;

650 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
loc_c⁄f
[
˘x_ödex
],

651 
˛cf
->
loc_c⁄f
[
˘x_ödex
]);

652 i‡(
rv
 !
NGX_CONF_OK
) {

653  
rv
;

656 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
, clcf->
loc_c⁄f
,

657 
moduÀ
, 
˘x_ödex
);

658 i‡(
rv
 !
NGX_CONF_OK
) {

659  
rv
;

663 *
˘x
 = 
ßved
;

665  
NGX_CONF_OK
;

666 
	}
}

669 
ngx_öt_t


670 
	$ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

671 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

673 
ngx_uöt_t
 
n
;

674 
ngx_queue_t
 *
q
, *
loˇti⁄s
, *
«med
, 
èû
;

675 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

676 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

677 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

678 #i‡(
NGX_PCRE
)

679 
ngx_uöt_t
 
r
;

680 
ngx_queue_t
 *
ªgex
;

683 
loˇti⁄s
 = 
p˛cf
->locations;

685 i‡(
loˇti⁄s
 =
NULL
) {

686  
NGX_OK
;

689 
	`ngx_queue_s‹t
(
loˇti⁄s
, 
ngx_hâp_cmp_loˇti⁄s
);

691 
«med
 = 
NULL
;

692 
n
 = 0;

693 #i‡(
NGX_PCRE
)

694 
ªgex
 = 
NULL
;

695 
r
 = 0;

698 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

699 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

700 
q
 = 
	`ngx_queue_√xt
(q))

702 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

704 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

706 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
NULL
, 
˛cf
Ë!
NGX_OK
) {

707  
NGX_ERROR
;

710 #i‡(
NGX_PCRE
)

712 i‡(
˛cf
->
ªgex
) {

713 
r
++;

715 i‡(
ªgex
 =
NULL
) {

716 
ªgex
 = 
q
;

724 i‡(
˛cf
->
«med
) {

725 
n
++;

727 i‡(
«med
 =
NULL
) {

728 
«med
 = 
q
;

734 i‡(
˛cf
->
n⁄ame
) {

739 i‡(
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

740 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

743 i‡(
«med
) {

744 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

745 (
n
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

746 i‡(
˛cÂ
 =
NULL
) {

747  
NGX_ERROR
;

750 
cscf
->
«med_loˇti⁄s
 = 
˛cÂ
;

752 
q
 = 
«med
;

753 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

754 
q
 = 
	`ngx_queue_√xt
(q))

756 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

758 *(
˛cÂ
++Ë
lq
->
exa˘
;

761 *
˛cÂ
 = 
NULL
;

763 
	`ngx_queue_•lô
(
loˇti⁄s
, 
«med
, &
èû
);

766 #i‡(
NGX_PCRE
)

768 i‡(
ªgex
) {

770 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

771 (
r
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

772 i‡(
˛cÂ
 =
NULL
) {

773  
NGX_ERROR
;

776 
p˛cf
->
ªgex_loˇti⁄s
 = 
˛cÂ
;

778 
q
 = 
ªgex
;

779 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

780 
q
 = 
	`ngx_queue_√xt
(q))

782 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

784 *(
˛cÂ
++Ë
lq
->
exa˘
;

787 *
˛cÂ
 = 
NULL
;

789 
	`ngx_queue_•lô
(
loˇti⁄s
, 
ªgex
, &
èû
);

794  
NGX_OK
;

795 
	}
}

798 
ngx_öt_t


799 
	$ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

800 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

802 
ngx_queue_t
 *
q
, *
loˇti⁄s
;

803 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

804 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

806 
loˇti⁄s
 = 
p˛cf
->locations;

808 i‡(
loˇti⁄s
 =
NULL
) {

809  
NGX_OK
;

812 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

813  
NGX_OK
;

816 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

817 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

818 
q
 = 
	`ngx_queue_√xt
(q))

820 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

822 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

824 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

825  
NGX_ERROR
;

829 i‡(
	`ngx_hâp_joö_exa˘_loˇti⁄s
(
cf
, 
loˇti⁄s
Ë!
NGX_OK
) {

830  
NGX_ERROR
;

833 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_hód
(locations));

835 
p˛cf
->
°©ic_loˇti⁄s
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 0);

836 i‡(
p˛cf
->
°©ic_loˇti⁄s
 =
NULL
) {

837  
NGX_ERROR
;

840  
NGX_OK
;

841 
	}
}

844 
ngx_öt_t


845 
	$ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

846 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
)

848 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

850 i‡(*
loˇti⁄s
 =
NULL
) {

851 *
loˇti⁄s
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
,

852 (
ngx_hâp_loˇti⁄_queue_t
));

853 i‡(*
loˇti⁄s
 =
NULL
) {

854  
NGX_ERROR
;

857 
	`ngx_queue_öô
(*
loˇti⁄s
);

860 
lq
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
, (
ngx_hâp_loˇti⁄_queue_t
));

861 i‡(
lq
 =
NULL
) {

862  
NGX_ERROR
;

865 i‡(
˛cf
->
exa˘_m©ch


866 #i‡(
NGX_PCRE
)

867 || 
˛cf
->
ªgex


869 || 
˛cf
->
«med
 || clcf->
n⁄ame
)

871 
lq
->
exa˘
 = 
˛cf
;

872 
lq
->
ö˛usive
 = 
NULL
;

875 
lq
->
exa˘
 = 
NULL
;

876 
lq
->
ö˛usive
 = 
˛cf
;

879 
lq
->
«me
 = &
˛cf
->name;

880 
lq
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

881 
lq
->
löe
 = 
cf
->
c⁄f_fûe
->line;

883 
	`ngx_queue_öô
(&
lq
->
li°
);

885 
	`ngx_queue_ö£π_èû
(*
loˇti⁄s
, &
lq
->
queue
);

887  
NGX_OK
;

888 
	}
}

891 
ngx_öt_t


892 
	$ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
, c⁄°Çgx_queue_à*
two
)

894 
ngx_öt_t
 
rc
;

895 
ngx_hâp_c‹e_loc_c⁄f_t
 *
fú°
, *
£c⁄d
;

896 
ngx_hâp_loˇti⁄_queue_t
 *
lq1
, *
lq2
;

898 
lq1
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
⁄e
;

899 
lq2
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
two
;

901 
fú°
 = 
lq1
->
exa˘
 ?Üq1->exa˘ :Üq1->
ö˛usive
;

902 
£c⁄d
 = 
lq2
->
exa˘
 ?Üq2->exa˘ :Üq2->
ö˛usive
;

904 i‡(
fú°
->
n⁄ame
 && !
£c⁄d
->noname) {

909 i‡(!
fú°
->
n⁄ame
 && 
£c⁄d
->noname) {

914 i‡(
fú°
->
n⁄ame
 || 
£c⁄d
->noname) {

919 i‡(
fú°
->
«med
 && !
£c⁄d
->named) {

924 i‡(!
fú°
->
«med
 && 
£c⁄d
->named) {

929 i‡(
fú°
->
«med
 && 
£c⁄d
->named) {

930  
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

933 #i‡(
NGX_PCRE
)

935 i‡(
fú°
->
ªgex
 && !
£c⁄d
->regex) {

940 i‡(!
fú°
->
ªgex
 && 
£c⁄d
->regex) {

945 i‡(
fú°
->
ªgex
 || 
£c⁄d
->regex) {

952 
rc
 = 
	`ngx_fûíame_cmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data,

953 
	`ngx_mö
(
fú°
->
«me
.
Àn
, 
£c⁄d
->name.len) + 1);

955 i‡(
rc
 =0 && !
fú°
->
exa˘_m©ch
 && 
£c⁄d
->exact_match) {

960  
rc
;

961 
	}
}

964 
ngx_öt_t


965 
	$ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
)

967 
ngx_queue_t
 *
q
, *
x
;

968 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

970 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

972 
q
 !
	`ngx_queue_œ°
(
loˇti⁄s
)) {

974 
x
 = 
	`ngx_queue_√xt
(
q
);

976 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

977 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

979 i‡(
lq
->
«me
->
Àn
 =
lx
->name->len

980 && 
	`ngx_fûíame_cmp
(
lq
->
«me
->
d©a
, 
lx
->«me->d©a,Üx->«me->
Àn
)

983 i‡((
lq
->
exa˘
 && 
lx
->exa˘Ë|| (lq->
ö˛usive
 &&Üx->inclusive)) {

984 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

986 
lx
->
«me
,Üx->
fûe_«me
,Üx->
löe
);

988  
NGX_ERROR
;

991 
lq
->
ö˛usive
 = 
lx
->inclusive;

993 
	`ngx_queue_ªmove
(
x
);

998 
q
 = 
	`ngx_queue_√xt
(q);

1001  
NGX_OK
;

1002 
	}
}

1006 
	$ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,Çgx_queue_à*
q
)

1008 
u_ch¨
 *
«me
;

1009 
size_t
 
Àn
;

1010 
ngx_queue_t
 *
x
, 
èû
;

1011 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

1013 i‡(
q
 =
	`ngx_queue_œ°
(
loˇti⁄s
)) {

1017 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1019 i‡(
lq
->
ö˛usive
 =
NULL
) {

1020 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_√xt
(
q
));

1024 
Àn
 = 
lq
->
«me
->len;

1025 
«me
 = 
lq
->«me->
d©a
;

1027 
x
 = 
	`ngx_queue_√xt
(
q
);

1028 
x
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

1029 
x
 = 
	`ngx_queue_√xt
(x))

1031 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

1033 i‡(
Àn
 > 
lx
->
«me
->len

1034 || 
	`ngx_fûíame_cmp
(
«me
, 
lx
->«me->
d©a
, 
Àn
) != 0)

1040 
q
 = 
	`ngx_queue_√xt
(q);

1042 i‡(
q
 =
x
) {

1043 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1047 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1048 
	`ngx_queue_add
(&
lq
->
li°
, &
èû
);

1050 i‡(
x
 =
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

1051 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1055 
	`ngx_queue_•lô
(&
lq
->
li°
, 
x
, &
èû
);

1056 
	`ngx_queue_add
(
loˇti⁄s
, &
èû
);

1058 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1060 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1061 
	}
}

1069 
ngx_hâp_loˇti⁄_åì_node_t
 *

1070 
	$ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

1071 
size_t
 
¥efix
)

1073 
size_t
 
Àn
;

1074 
ngx_queue_t
 *
q
, 
èû
;

1075 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

1076 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
;

1078 
q
 = 
	`ngx_queue_middÀ
(
loˇti⁄s
);

1080 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1081 
Àn
 = 
lq
->
«me
->À¿- 
¥efix
;

1083 
node
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1084 
	`off£tof
(
ngx_hâp_loˇti⁄_åì_node_t
, 
«me
Ë+ 
Àn
);

1085 i‡(
node
 =
NULL
) {

1086  
NULL
;

1089 
node
->
À·
 = 
NULL
;

1090 
node
->
right
 = 
NULL
;

1091 
node
->
åì
 = 
NULL
;

1092 
node
->
exa˘
 = 
lq
->exact;

1093 
node
->
ö˛usive
 = 
lq
->inclusive;

1095 
node
->
auto_ªdúe˘
 = (
u_ch¨
Ë((
lq
->
exa˘
 &&Üq->exact->auto_redirect)

1096 || (
lq
->
ö˛usive
 &&Üq->ö˛usive->
auto_ªdúe˘
));

1098 
node
->
Àn
 = (
u_ch¨
)Üen;

1099 
	`ngx_mem˝y
(
node
->
«me
, &
lq
->«me->
d©a
[
¥efix
], 
Àn
);

1101 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1103 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

1108 
ö˛usive
;

1111 
node
->
À·
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 
¥efix
);

1112 i‡(
node
->
À·
 =
NULL
) {

1113  
NULL
;

1116 
	`ngx_queue_ªmove
(
q
);

1118 i‡(
	`ngx_queue_em±y
(&
èû
)) {

1119 
ö˛usive
;

1122 
node
->
right
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
èû
, 
¥efix
);

1123 i‡(
node
->
right
 =
NULL
) {

1124  
NULL
;

1127 
ö˛usive
:

1129 i‡(
	`ngx_queue_em±y
(&
lq
->
li°
)) {

1130  
node
;

1133 
node
->
åì
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
lq
->
li°
, 
¥efix
 + 
Àn
);

1134 i‡(
node
->
åì
 =
NULL
) {

1135  
NULL
;

1138  
node
;

1139 
	}
}

1142 
ngx_öt_t


1143 
	$ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1144 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1146 
ö_p‹t_t
 
p
;

1147 
ngx_uöt_t
 
i
;

1148 
sockaddr
 *
ß
;

1149 
sockaddr_ö
 *
sö
;

1150 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1151 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1152 #i‡(
NGX_HAVE_INET6
)

1153 
sockaddr_ö6
 *
sö6
;

1156 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1158 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1159 
cmcf
->
p‹ts
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 2,

1160 (
ngx_hâp_c⁄f_p‹t_t
));

1161 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1162  
NGX_ERROR
;

1166 
ß
 = &
ls›t
->
u
.
sockaddr
;

1168 
ß
->
ß_Ámûy
) {

1170 #i‡(
NGX_HAVE_INET6
)

1171 
AF_INET6
:

1172 
sö6
 = &
ls›t
->
u
.
sockaddr_ö6
;

1173 
p
 = 
sö6
->
sö6_p‹t
;

1177 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1178 
AF_UNIX
:

1179 
p
 = 0;

1184 
sö
 = &
ls›t
->
u
.
sockaddr_ö
;

1185 
p
 = 
sö
->
sö_p‹t
;

1189 
p‹t
 = 
cmcf
->
p‹ts
->
ñts
;

1190 
i
 = 0; i < 
cmcf
->
p‹ts
->
√…s
; i++) {

1192 i‡(
p
 !
p‹t
[
i
].p‹à|| 
ß
->
ß_Ámûy
 !p‹t[i].
Ámûy
) {

1198  
	`ngx_hâp_add_addªs£s
(
cf
, 
cscf
, &
p‹t
[
i
], 
ls›t
);

1203 
p‹t
 = 
	`ngx_¨øy_push
(
cmcf
->
p‹ts
);

1204 i‡(
p‹t
 =
NULL
) {

1205  
NGX_ERROR
;

1208 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

1209 
p‹t
->p‹à
p
;

1210 
p‹t
->
addrs
.
ñts
 = 
NULL
;

1212  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1213 
	}
}

1216 
ngx_öt_t


1217 
	$ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1218 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1220 
u_ch¨
 *
p
;

1221 
size_t
 
Àn
, 
off
;

1222 
ngx_uöt_t
 
i
, 
deÁu…_£rvî
;

1223 
sockaddr
 *
ß
;

1224 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1225 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1226 
sockaddr_un
 *
ßun
;

1228 #i‡(
NGX_HTTP_SSL
)

1229 
ngx_uöt_t
 
s¶
;

1231 #i‡(
NGX_HTTP_SPDY
)

1232 
ngx_uöt_t
 
•dy
;

1240 
ß
 = &
ls›t
->
u
.
sockaddr
;

1242 
ß
->
ß_Ámûy
) {

1244 #i‡(
NGX_HAVE_INET6
)

1245 
AF_INET6
:

1246 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

1247 
Àn
 = 16;

1251 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1252 
AF_UNIX
:

1253 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

1254 
Àn
 = (
ßun
->
sun_∑th
);

1259 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

1260 
Àn
 = 4;

1264 
p
 = 
ls›t
->
u
.
sockaddr_d©a
 + 
off
;

1266 
addr
 = 
p‹t
->
addrs
.
ñts
;

1268 
i
 = 0; i < 
p‹t
->
addrs
.
√…s
; i++) {

1270 i‡(
	`ngx_memcmp
(
p
, 
addr
[
i
].
›t
.
u
.
sockaddr_d©a
 + 
off
, 
Àn
) != 0) {

1276 i‡(
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, &
addr
[
i
]Ë!
NGX_OK
) {

1277  
NGX_ERROR
;

1281 
deÁu…_£rvî
 = 
addr
[
i
].
›t
.default_server;

1283 #i‡(
NGX_HTTP_SSL
)

1284 
s¶
 = 
ls›t
->s¶ || 
addr
[
i
].
›t
.ssl;

1286 #i‡(
NGX_HTTP_SPDY
)

1287 
•dy
 = 
ls›t
->•dy || 
addr
[
i
].
›t
.spdy;

1290 i‡(
ls›t
->
£t
) {

1292 i‡(
addr
[
i
].
›t
.
£t
) {

1293 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1294 "du∂iˇãÜi°í o±i⁄†f‹ %s", 
addr
[
i
].
›t
.addr);

1295  
NGX_ERROR
;

1298 
addr
[
i
].
›t
 = *
ls›t
;

1303 i‡(
ls›t
->
deÁu…_£rvî
) {

1305 i‡(
deÁu…_£rvî
) {

1306 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1307 "®du∂iˇã deÁu… sîvî f‹ %s", 
addr
[
i
].
›t
.addr);

1308  
NGX_ERROR
;

1311 
deÁu…_£rvî
 = 1;

1312 
addr
[
i
].
deÁu…_£rvî
 = 
cscf
;

1315 
addr
[
i
].
›t
.
deÁu…_£rvî
 = default_server;

1316 #i‡(
NGX_HTTP_SSL
)

1317 
addr
[
i
].
›t
.
s¶
 = ssl;

1319 #i‡(
NGX_HTTP_SPDY
)

1320 
addr
[
i
].
›t
.
•dy
 = spdy;

1323  
NGX_OK
;

1328  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1329 
	}
}

1337 
ngx_öt_t


1338 
	$ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1339 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1341 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1343 i‡(
p‹t
->
addrs
.
ñts
 =
NULL
) {

1344 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 4,

1345 (
ngx_hâp_c⁄f_addr_t
))

1346 !
NGX_OK
)

1348  
NGX_ERROR
;

1352 #i‡(
NGX_HTTP_SPDY
 && 
NGX_HTTP_SSL
 \

1353 && !
deföed
 
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 \

1354 && !
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
)

1355 i‡(
ls›t
->
•dy
 &&Üs›t->
s¶
) {

1356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1358 "suµ‹t, SPDY i†nŸÉ«bÀd f‹ %s", 
ls›t
->
addr
);

1362 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

1363 i‡(
addr
 =
NULL
) {

1364  
NGX_ERROR
;

1367 
addr
->
›t
 = *
ls›t
;

1368 
addr
->
hash
.
buckës
 = 
NULL
;

1369 
addr
->
hash
.
size
 = 0;

1370 
addr
->
wc_hód
 = 
NULL
;

1371 
addr
->
wc_èû
 = 
NULL
;

1372 #i‡(
NGX_PCRE
)

1373 
addr
->
ƒegex
 = 0;

1374 
addr
->
ªgex
 = 
NULL
;

1376 
addr
->
deÁu…_£rvî
 = 
cscf
;

1377 
addr
->
£rvîs
.
ñts
 = 
NULL
;

1379  
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, 
addr
);

1380 
	}
}

1385 
ngx_öt_t


1386 
	$ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1387 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1389 
ngx_uöt_t
 
i
;

1390 
ngx_hâp_c‹e_§v_c⁄f_t
 **
£rvî
;

1392 i‡(
addr
->
£rvîs
.
ñts
 =
NULL
) {

1393 i‡(
	`ngx_¨øy_öô
(&
addr
->
£rvîs
, 
cf
->
ãmp_poﬁ
, 4,

1394 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

1395 !
NGX_OK
)

1397  
NGX_ERROR
;

1401 
£rvî
 = 
addr
->
£rvîs
.
ñts
;

1402 
i
 = 0; i < 
addr
->
£rvîs
.
√…s
; i++) {

1403 i‡(
£rvî
[
i
] =
cscf
) {

1404 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1405 "®du∂iˇãÜi°í %s", 
addr
->
›t
.addr);

1406  
NGX_ERROR
;

1411 
£rvî
 = 
	`ngx_¨øy_push
(&
addr
->
£rvîs
);

1412 i‡(
£rvî
 =
NULL
) {

1413  
NGX_ERROR
;

1416 *
£rvî
 = 
cscf
;

1418  
NGX_OK
;

1419 
	}
}

1422 
ngx_öt_t


1423 
	$ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1424 
ngx_¨øy_t
 *
p‹ts
)

1426 
ngx_uöt_t
 
p
, 
a
;

1427 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1428 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1430 i‡(
p‹ts
 =
NULL
) {

1431  
NGX_OK
;

1434 
p‹t
 = 
p‹ts
->
ñts
;

1435 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

1437 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

1438 (
ngx_hâp_c⁄f_addr_t
), 
ngx_hâp_cmp_c⁄f_addrs
);

1445 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

1446 
a
 = 0;á < 
p‹t
[
p
].
addrs
.
√…s
;á++) {

1448 i‡(
addr
[
a
].
£rvîs
.
√…s
 > 1

1449 #i‡(
NGX_PCRE
)

1450 || 
addr
[
a
].
deÁu…_£rvî
->
ˇ±uªs


1454 i‡(
	`ngx_hâp_£rvî_«mes
(
cf
, 
cmcf
, &
addr
[
a
]Ë!
NGX_OK
) {

1455  
NGX_ERROR
;

1460 i‡(
	`ngx_hâp_öô_li°íög
(
cf
, &
p‹t
[
p
]Ë!
NGX_OK
) {

1461  
NGX_ERROR
;

1465  
NGX_OK
;

1466 
	}
}

1469 
ngx_öt_t


1470 
	$ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1471 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1473 
ngx_öt_t
 
rc
;

1474 
ngx_uöt_t
 
n
, 
s
;

1475 
ngx_hash_öô_t
 
hash
;

1476 
ngx_hash_keys_¨øys_t
 
ha
;

1477 
ngx_hâp_£rvî_«me_t
 *
«me
;

1478 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

1479 #i‡(
NGX_PCRE
)

1480 
ngx_uöt_t
 
ªgex
, 
i
;

1482 
ªgex
 = 0;

1485 
	`ngx_memzîo
(&
ha
, (
ngx_hash_keys_¨øys_t
));

1487 
ha
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

1488 i‡(
ha
.
ãmp_poﬁ
 =
NULL
) {

1489  
NGX_ERROR
;

1492 
ha
.
poﬁ
 = 
cf
->pool;

1494 i‡(
	`ngx_hash_keys_¨øy_öô
(&
ha
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

1495 
Áûed
;

1498 
cscÂ
 = 
addr
->
£rvîs
.
ñts
;

1500 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1502 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1504 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1506 #i‡(
NGX_PCRE
)

1507 i‡(
«me
[
n
].
ªgex
) {

1508 
ªgex
++;

1513 
rc
 = 
	`ngx_hash_add_key
(&
ha
, &
«me
[
n
].«me,Çame[n].
£rvî
,

1514 
NGX_HASH_WILDCARD_KEY
);

1516 i‡(
rc
 =
NGX_ERROR
) {

1517  
NGX_ERROR
;

1520 i‡(
rc
 =
NGX_DECLINED
) {

1521 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1523 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1524  
NGX_ERROR
;

1527 i‡(
rc
 =
NGX_BUSY
) {

1528 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

1530 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1535 
hash
.
key
 = 
ngx_hash_key_lc
;

1536 
hash
.
max_size
 = 
cmcf
->
£rvî_«mes_hash_max_size
;

1537 
hash
.
buckë_size
 = 
cmcf
->
£rvî_«mes_hash_buckë_size
;

1538 
hash
.
«me
 = "server_names_hash";

1539 
hash
.
poﬁ
 = 
cf
->pool;

1541 i‡(
ha
.
keys
.
√…s
) {

1542 
hash
.hash = &
addr
->hash;

1543 
hash
.
ãmp_poﬁ
 = 
NULL
;

1545 i‡(
	`ngx_hash_öô
(&
hash
, 
ha
.
keys
.
ñts
, ha.keys.
√…s
Ë!
NGX_OK
) {

1546 
Áûed
;

1550 i‡(
ha
.
dns_wc_hód
.
√…s
) {

1552 
	`ngx_qs‹t
(
ha
.
dns_wc_hód
.
ñts
, (
size_t
Ëha.dns_wc_hód.
√…s
,

1553 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1555 
hash
.hash = 
NULL
;

1556 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1558 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_hód
.
ñts
,

1559 
ha
.
dns_wc_hód
.
√…s
)

1560 !
NGX_OK
)

1562 
Áûed
;

1565 
addr
->
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1568 i‡(
ha
.
dns_wc_èû
.
√…s
) {

1570 
	`ngx_qs‹t
(
ha
.
dns_wc_èû
.
ñts
, (
size_t
Ëha.dns_wc_èû.
√…s
,

1571 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1573 
hash
.hash = 
NULL
;

1574 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1576 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_èû
.
ñts
,

1577 
ha
.
dns_wc_èû
.
√…s
)

1578 !
NGX_OK
)

1580 
Áûed
;

1583 
addr
->
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1586 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1588 #i‡(
NGX_PCRE
)

1590 i‡(
ªgex
 == 0) {

1591  
NGX_OK
;

1594 
addr
->
ƒegex
 = 
ªgex
;

1595 
addr
->
ªgex
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñegex * (
ngx_hâp_£rvî_«me_t
));

1596 i‡(
addr
->
ªgex
 =
NULL
) {

1597  
NGX_ERROR
;

1600 
i
 = 0;

1602 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1604 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1606 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1607 i‡(
«me
[
n
].
ªgex
) {

1608 
addr
->
ªgex
[
i
++] = 
«me
[
n
];

1615  
NGX_OK
;

1617 
Áûed
:

1619 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1621  
NGX_ERROR
;

1622 
	}
}

1625 
ngx_öt_t


1626 
	$ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

1628 
ngx_hâp_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

1630 
fú°
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
⁄e
;

1631 
£c⁄d
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
two
;

1633 i‡(
fú°
->
›t
.
wûdˇrd
) {

1638 i‡(
£c⁄d
->
›t
.
wûdˇrd
) {

1643 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

1648 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

1656 
	}
}

1659 
ngx_libc_cde˛


1660 
	$ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

1662 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

1664 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

1665 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

1667  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

1668 
	}
}

1671 
ngx_öt_t


1672 
	$ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
)

1674 
ngx_uöt_t
 
i
, 
œ°
, 
böd_wûdˇrd
;

1675 
ngx_li°íög_t
 *
ls
;

1676 
ngx_hâp_p‹t_t
 *
hp‹t
;

1677 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1679 
addr
 = 
p‹t
->
addrs
.
ñts
;

1680 
œ°
 = 
p‹t
->
addrs
.
√…s
;

1689 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

1690 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

1691 
böd_wûdˇrd
 = 1;

1694 
böd_wûdˇrd
 = 0;

1697 
i
 = 0;

1699 
i
 < 
œ°
) {

1701 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

1702 
i
++;

1706 
ls
 = 
	`ngx_hâp_add_li°íög
(
cf
, &
addr
[
i
]);

1707 i‡(
ls
 =
NULL
) {

1708  
NGX_ERROR
;

1711 
hp‹t
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_p‹t_t
));

1712 i‡(
hp‹t
 =
NULL
) {

1713  
NGX_ERROR
;

1716 
ls
->
£rvîs
 = 
hp‹t
;

1718 i‡(
i
 =
œ°
 - 1) {

1719 
hp‹t
->
«ddrs
 = 
œ°
;

1722 
hp‹t
->
«ddrs
 = 1;

1723 
i
 = 0;

1726 
ls
->
sockaddr
->
ß_Ámûy
) {

1728 #i‡(
NGX_HAVE_INET6
)

1729 
AF_INET6
:

1730 i‡(
	`ngx_hâp_add_addrs6
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1731  
NGX_ERROR
;

1736 i‡(
	`ngx_hâp_add_addrs
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1737  
NGX_ERROR
;

1742 
addr
++;

1743 
œ°
--;

1746  
NGX_OK
;

1747 
	}
}

1750 
ngx_li°íög_t
 *

1751 
	$ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1753 
ngx_li°íög_t
 *
ls
;

1754 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1755 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1757 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
->
›t
.
u
.
sockaddr
,áddr->›t.
sockÀn
);

1758 i‡(
ls
 =
NULL
) {

1759  
NULL
;

1762 
ls
->
addr_¡›
 = 1;

1764 
ls
->
h™dÀr
 = 
ngx_hâp_öô_c⁄√˘i⁄
;

1766 
cscf
 = 
addr
->
deÁu…_£rvî
;

1767 
ls
->
poﬁ_size
 = 
cscf
->
c⁄√˘i⁄_poﬁ_size
;

1768 
ls
->
po°_ac˚±_timeout
 = 
cscf
->
˛õ¡_hódî_timeout
;

1770 
˛cf
 = 
cscf
->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

1772 
ls
->
logp
 = 
˛cf
->
îr‹_log
;

1773 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

1774 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

1776 #i‡(
NGX_WIN32
)

1778 
ngx_io˝_c⁄f_t
 *
io˝cf
 = 
NULL
;

1780 i‡(
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
)) {

1781 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

1783 i‡(
io˝cf
 && io˝cf->
ac˚±ex_ªad
) {

1784 
ls
->
po°_ac˚±_buf„r_size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

1789 
ls
->
backlog
 = 
addr
->
›t
.backlog;

1790 
ls
->
rcvbuf
 = 
addr
->
›t
.rcvbuf;

1791 
ls
->
¢dbuf
 = 
addr
->
›t
.sndbuf;

1793 
ls
->
kì∑live
 = 
addr
->
›t
.
so_kì∑live
;

1794 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

1795 
ls
->
kìpidÀ
 = 
addr
->
›t
.
t˝_kìpidÀ
;

1796 
ls
->
kìpötvl
 = 
addr
->
›t
.
t˝_kìpötvl
;

1797 
ls
->
kìp˙t
 = 
addr
->
›t
.
t˝_kìp˙t
;

1800 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

1801 
ls
->
ac˚±_fûãr
 = 
addr
->
›t
.accept_filter;

1804 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

1805 
ls
->
de„ºed_ac˚±
 = 
addr
->
›t
.deferred_accept;

1808 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

1809 
ls
->
ùv6⁄ly
 = 
addr
->
›t
.ipv6only;

1812 #i‡(
NGX_HAVE_SETFIB
)

1813 
ls
->
£tfib
 = 
addr
->
›t
.setfib;

1816 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

1817 
ls
->
Á°›í
 = 
addr
->
›t
.fastopen;

1820  
ls
;

1821 
	}
}

1824 
ngx_öt_t


1825 
	$ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1826 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1828 
ngx_uöt_t
 
i
;

1829 
ngx_hâp_ö_addr_t
 *
addrs
;

1830 
sockaddr_ö
 *
sö
;

1831 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1833 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1834 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö_addr_t
));

1835 i‡(
hp‹t
->
addrs
 =
NULL
) {

1836  
NGX_ERROR
;

1839 
addrs
 = 
hp‹t
->addrs;

1841 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1843 
sö
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö
;

1844 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

1845 
addrs
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1846 #i‡(
NGX_HTTP_SSL
)

1847 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1849 #i‡(
NGX_HTTP_SPDY
)

1850 
addrs
[
i
].
c⁄f
.
•dy
 = 
addr
[i].
›t
.spdy;

1852 
addrs
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
[i].
›t
.proxy_protocol;

1854 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1855 && (
addr
[
i
].
wc_hód
 =
NULL


1856 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1857 && (
addr
[
i
].
wc_èû
 =
NULL


1858 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1859 #i‡(
NGX_PCRE
)

1860 && 
addr
[
i
].
ƒegex
 == 0

1867 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1868 i‡(
vn
 =
NULL
) {

1869  
NGX_ERROR
;

1872 
addrs
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1874 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1875 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1876 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1877 #i‡(
NGX_PCRE
)

1878 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1879 
vn
->
ªgex
 = 
addr
[
i
].regex;

1883  
NGX_OK
;

1884 
	}
}

1887 #i‡(
NGX_HAVE_INET6
)

1889 
ngx_öt_t


1890 
	$ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1891 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1893 
ngx_uöt_t
 
i
;

1894 
ngx_hâp_ö6_addr_t
 *
addrs6
;

1895 
sockaddr_ö6
 *
sö6
;

1896 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1898 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1899 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö6_addr_t
));

1900 i‡(
hp‹t
->
addrs
 =
NULL
) {

1901  
NGX_ERROR
;

1904 
addrs6
 = 
hp‹t
->
addrs
;

1906 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1908 
sö6
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö6
;

1909 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

1910 
addrs6
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1911 #i‡(
NGX_HTTP_SSL
)

1912 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1914 #i‡(
NGX_HTTP_SPDY
)

1915 
addrs6
[
i
].
c⁄f
.
•dy
 = 
addr
[i].
›t
.spdy;

1918 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1919 && (
addr
[
i
].
wc_hód
 =
NULL


1920 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1921 && (
addr
[
i
].
wc_èû
 =
NULL


1922 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1923 #i‡(
NGX_PCRE
)

1924 && 
addr
[
i
].
ƒegex
 == 0

1931 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1932 i‡(
vn
 =
NULL
) {

1933  
NGX_ERROR
;

1936 
addrs6
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1938 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1939 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1940 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1941 #i‡(
NGX_PCRE
)

1942 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1943 
vn
->
ªgex
 = 
addr
[
i
].regex;

1947  
NGX_OK
;

1948 
	}
}

1954 
	$ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1956 *
p
 = 
c⁄f
;

1958 
ngx_¨øy_t
 **
ty≥s
;

1959 
ngx_°r_t
 *
vÆue
, *
deÁu…_ty≥
;

1960 
ngx_uöt_t
 
i
, 
n
, 
hash
;

1961 
ngx_hash_key_t
 *
ty≥
;

1963 
ty≥s
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1965 i‡(*
ty≥s
 == (*) -1) {

1966  
NGX_CONF_OK
;

1969 
deÁu…_ty≥
 = 
cmd
->
po°
;

1971 i‡(*
ty≥s
 =
NULL
) {

1972 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

1973 i‡(*
ty≥s
 =
NULL
) {

1974  
NGX_CONF_ERROR
;

1977 i‡(
deÁu…_ty≥
) {

1978 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

1979 i‡(
ty≥
 =
NULL
) {

1980  
NGX_CONF_ERROR
;

1983 
ty≥
->
key
 = *
deÁu…_ty≥
;

1984 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

1985 
deÁu…_ty≥
->
Àn
);

1986 
ty≥
->
vÆue
 = (*) 4;

1990 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1992 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1994 i‡(
vÆue
[
i
].
Àn
 =1 && vÆue[i].
d©a
[0] == '*') {

1995 *
ty≥s
 = (*) -1;

1996  
NGX_CONF_OK
;

1999 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

2000 
vÆue
[
i
].
d©a
[vÆue[i].
Àn
] = '\0';

2002 
ty≥
 = (*
ty≥s
)->
ñts
;

2003 
n
 = 0;Ç < (*
ty≥s
)->
√…s
;Ç++) {

2005 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

2006 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

2007 "du∂iˇã MIMEÅy≥ \"%V\"", &
vÆue
[
i
]);

2012 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2013 i‡(
ty≥
 =
NULL
) {

2014  
NGX_CONF_ERROR
;

2017 
ty≥
->
key
 = 
vÆue
[
i
];

2018 
ty≥
->
key_hash
 = 
hash
;

2019 
ty≥
->
vÆue
 = (*) 4;

2022  
NGX_CONF_OK
;

2023 
	}
}

2027 
	$ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
, 
ngx_hash_t
 *
ty≥s_hash
,

2028 
ngx_¨øy_t
 **
¥ev_keys
, 
ngx_hash_t
 *
¥ev_ty≥s_hash
,

2029 
ngx_°r_t
 *
deÁu…_ty≥s
)

2031 
ngx_hash_öô_t
 
hash
;

2033 i‡(*
keys
) {

2035 i‡(*
keys
 == (*) -1) {

2036  
NGX_CONF_OK
;

2039 
hash
.hash = 
ty≥s_hash
;

2040 
hash
.
key
 = 
NULL
;

2041 
hash
.
max_size
 = 2048;

2042 
hash
.
buckë_size
 = 64;

2043 
hash
.
«me
 = "test_types_hash";

2044 
hash
.
poﬁ
 = 
cf
->pool;

2045 
hash
.
ãmp_poﬁ
 = 
NULL
;

2047 i‡(
	`ngx_hash_öô
(&
hash
, (*
keys
)->
ñts
, (*keys)->
√…s
Ë!
NGX_OK
) {

2048  
NGX_CONF_ERROR
;

2051  
NGX_CONF_OK
;

2054 i‡(
¥ev_ty≥s_hash
->
buckës
 =
NULL
) {

2056 i‡(*
¥ev_keys
 =
NULL
) {

2058 i‡(
	`ngx_hâp_£t_deÁu…_ty≥s
(
cf
, 
¥ev_keys
, 
deÁu…_ty≥s
)

2059 !
NGX_OK
)

2061  
NGX_CONF_ERROR
;

2064 } i‡(*
¥ev_keys
 == (*) -1) {

2065 *
keys
 = *
¥ev_keys
;

2066  
NGX_CONF_OK
;

2069 
hash
.hash = 
¥ev_ty≥s_hash
;

2070 
hash
.
key
 = 
NULL
;

2071 
hash
.
max_size
 = 2048;

2072 
hash
.
buckë_size
 = 64;

2073 
hash
.
«me
 = "test_types_hash";

2074 
hash
.
poﬁ
 = 
cf
->pool;

2075 
hash
.
ãmp_poﬁ
 = 
NULL
;

2077 i‡(
	`ngx_hash_öô
(&
hash
, (*
¥ev_keys
)->
ñts
, (*¥ev_keys)->
√…s
)

2078 !
NGX_OK
)

2080  
NGX_CONF_ERROR
;

2084 *
ty≥s_hash
 = *
¥ev_ty≥s_hash
;

2086  
NGX_CONF_OK
;

2088 
	}
}

2091 
ngx_öt_t


2092 
	$ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

2093 
ngx_°r_t
 *
deÁu…_ty≥
)

2095 
ngx_hash_key_t
 *
ty≥
;

2097 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

2098 i‡(*
ty≥s
 =
NULL
) {

2099  
NGX_ERROR
;

2102 
deÁu…_ty≥
->
Àn
) {

2104 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2105 i‡(
ty≥
 =
NULL
) {

2106  
NGX_ERROR
;

2109 
ty≥
->
key
 = *
deÁu…_ty≥
;

2110 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

2111 
deÁu…_ty≥
->
Àn
);

2112 
ty≥
->
vÆue
 = (*) 4;

2114 
deÁu…_ty≥
++;

2117  
NGX_OK
;

2118 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http.h

8 #i‚de‡
_NGX_HTTP_H_INCLUDED_


9 
	#_NGX_HTTP_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_hâp_ªque°_s
 
	tngx_hâp_ªque°_t
;

17 
ngx_hâp_up°ªam_s
 
	tngx_hâp_up°ªam_t
;

18 
ngx_hâp_ˇche_s
 
	tngx_hâp_ˇche_t
;

19 
ngx_hâp_fûe_ˇche_s
 
	tngx_hâp_fûe_ˇche_t
;

20 
ngx_hâp_log_˘x_s
 
	tngx_hâp_log_˘x_t
;

21 
ngx_hâp_chunked_s
 
	tngx_hâp_chunked_t
;

23 #i‡(
NGX_HTTP_SPDY
)

24 
ngx_hâp_•dy_°ªam_s
 
	tngx_hâp_•dy_°ªam_t
;

27 
	$ngx_öt_t
 (*
	tngx_hâp_hódî_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

28 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tngx_uöt_t
 
	toff£t
);

29 
u_ch¨
 *(*
	tngx_hâp_log_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

30 
	tngx_hâp_ªque°_t
 *
	t§
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

33 
	~<ngx_hâp_v¨übÀs.h
>

34 
	~<ngx_hâp_c⁄fig.h
>

35 
	~<ngx_hâp_ªque°.h
>

36 
	~<ngx_hâp_s¸ùt.h
>

37 
	~<ngx_hâp_up°ªam.h
>

38 
	~<ngx_hâp_up°ªam_round_robö.h
>

39 
	~<ngx_hâp_busy_lock.h
>

40 
	~<ngx_hâp_c‹e_moduÀ.h
>

42 #i‡(
NGX_HTTP_SPDY
)

43 
	~<ngx_hâp_•dy.h
>

45 #i‡(
NGX_HTTP_CACHE
)

46 
	~<ngx_hâp_ˇche.h
>

48 #i‡(
NGX_HTTP_SSI
)

49 
	~<ngx_hâp_ssi_fûãr_moduÀ.h
>

51 #i‡(
NGX_HTTP_SSL
)

52 
	~<ngx_hâp_s¶_moduÀ.h
>

56 
	sngx_hâp_log_˘x_s
 {

57 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

58 
ngx_hâp_ªque°_t
 *
ªque°
;

59 
ngx_hâp_ªque°_t
 *
cuºít_ªque°
;

63 
	sngx_hâp_chunked_s
 {

64 
ngx_uöt_t
 
°©e
;

65 
off_t
 
size
;

66 
off_t
 
Àngth
;

71 
ngx_uöt_t
 
hâp_vîsi⁄
;

72 
ngx_uöt_t
 
code
;

73 
ngx_uöt_t
 
cou¡
;

74 
u_ch¨
 *
°¨t
;

75 
u_ch¨
 *
íd
;

76 } 
	tngx_hâp_°©us_t
;

79 
	#ngx_hâp_gë_moduÀ_˘x
(
r
, 
moduÀ
Ë‘)->
˘x
[moduÀ.
˘x_ödex
]

	)

80 
	#ngx_hâp_£t_˘x
(
r
, 
c
, 
moduÀ
Ër->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

83 
ngx_öt_t
 
	`ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

84 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
);

85 
ngx_öt_t
 
	`ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

86 
ngx_hâp_li°í_›t_t
 *
ls›t
);

89 
	`ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

90 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

92 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

93 
	`ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
);

96 
ngx_öt_t
 
	`ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

97 
ngx_öt_t
 
	`ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
);

98 
ngx_öt_t
 
	`ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_uöt_t
 
mîge_¶ashes
);

100 
ngx_öt_t
 
	`ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

101 
ngx_hâp_°©us_t
 *
°©us
);

102 
ngx_öt_t
 
	`ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

103 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
);

104 
ngx_öt_t
 
	`ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

105 
ngx_uöt_t
 
Ælow_undîsc‹es
);

106 
ngx_öt_t
 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
,

107 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

108 
ngx_öt_t
 
	`ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,

109 
ngx_°r_t
 *
vÆue
);

110 
	`ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

111 
ngx_°r_t
 *
¨gs
);

112 
ngx_öt_t
 
	`ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

113 
ngx_hâp_chunked_t
 *
˘x
);

116 
ngx_hâp_ªque°_t
 *
	`ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
);

117 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
);

118 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

119 
	`ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

120 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
);

121 
	`ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

122 
	`ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
);

123 
ngx_öt_t
 
	`ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

124 
ngx_hâp_po°ed_ªque°_t
 *
¥
);

125 
	`ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

126 
	`ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

128 
	`ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
);

129 
	`ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

132 
	#ngx_hâp_ïhemîÆ
(
r
Ë(*Ë(&r->
uri_°¨t
)

	)

135 
	#NGX_HTTP_LAST
 1

	)

136 
	#NGX_HTTP_FLUSH
 2

	)

138 
ngx_öt_t
 
	`ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
);

141 
ngx_öt_t
 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

142 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

144 
ngx_öt_t
 
	`ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
);

145 
ngx_öt_t
 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

146 
ngx_öt_t
 
îr‹
);

147 
ngx_öt_t
 
	`ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_moduÀ_t
 *
m
, 
ngx_öt_t
 
îr‹
);

149 
	`ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
);

152 
time_t
 
	`ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
);

153 
size_t
 
	`ngx_hâp_gë_time
(*
buf
, 
time_t
 
t
);

157 
ngx_öt_t
 
	`ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

158 
	`ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

159 
	`ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

160 
	`ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

163 *
	`ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

164 *
	`ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
,

165 
ngx_hash_t
 *
ty≥s_hash
, 
ngx_¨øy_t
 **
¥ev_keys
,

166 
ngx_hash_t
 *
¥ev_ty≥s_hash
, 
ngx_°r_t
 *
deÁu…_ty≥s
);

167 
ngx_öt_t
 
	`ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

168 
ngx_°r_t
 *
deÁu…_ty≥
);

170 #i‡(
NGX_HTTP_DEGRADATION
)

171 
ngx_uöt_t
 
	`ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *);

175 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

177 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[];

180 
ngx_hâp_ouçut_hódî_fûãr_±
 
ngx_hâp_t›_hódî_fûãr
;

181 
ngx_hâp_ouçut_body_fûãr_±
 
ngx_hâp_t›_body_fûãr
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

15 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

16 
lock
);

19 
	$ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

21 i‡(
bl
->
busy
 < bl->
max_busy
) {

22 
bl
->
busy
++;

24 i‡(
bc
->
time
) {

25 
bc
->
time
 = 0;

26 
bl
->
waôög
--;

29  
NGX_OK
;

32 i‡(
bc
->
time
) {

33 i‡(
bc
->
time
 < 
bl
->
timeout
) {

34 
	`ngx_add_timî
(
bc
->
evít
, 1000);

35  
NGX_AGAIN
;

38 
bl
->
waôög
--;

39  
NGX_DONE
;

43 i‡(
bl
->
timeout
 == 0) {

44  
NGX_DONE
;

47 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

48 
bl
->
waôög
++;

51 
	`ngx_add_timî
(
bc
->
evít
, 1000);

52 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

57  
NGX_AGAIN
;

60  
NGX_ERROR
;

61 
	}
}

64 
	$ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

65 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
)

67 
rc
;

69 
rc
 = 
	`ngx_hâp_busy_lock_look_ˇchóbÀ
(
bl
, 
bc
, 
lock
);

71 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
bc
->
evít
->
log
, 0,

73 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

75 i‡(
rc
 =
NGX_OK
) {

76  
NGX_OK
;

79 i‡(
rc
 =
NGX_ERROR
 && !
lock
) {

80  
NGX_OK
;

85 i‡(
bc
->
time
) {

86 i‡(
bc
->
time
 < 
bl
->
timeout
) {

87 
	`ngx_add_timî
(
bc
->
evít
, 1000);

88  
NGX_AGAIN
;

91 
bl
->
waôög
--;

92  
NGX_DONE
;

96 i‡(
bl
->
timeout
 == 0) {

97  
NGX_DONE
;

100 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

102 
bl
->
waôög
++;

103 
	`ngx_add_timî
(
bc
->
evít
, 1000);

104 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

109  
NGX_AGAIN
;

112  
NGX_ERROR
;

113 
	}
}

116 
	$ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

117 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

119 i‡(
bl
 =
NULL
) {

123 i‡(
bl
->
md5
) {

124 
bl
->
md5_mask
[
bc
->
¶Ÿ
 / 8] &= ~(1 << (bc->slot & 7));

125 
bl
->
ˇchóbÀ
--;

128 
bl
->
busy
--;

129 
	}
}

132 
	$ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

133 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

134 
lock
)

136 
i
, 
b
, 
ˇchóbÀ
, 
‰ì
;

137 
u_öt
 
mask
;

139 
b
 = 0;

140 
ˇchóbÀ
 = 0;

141 
‰ì
 = -1;

143 #i‡(
NGX_SUPPRESS_WARN
)

144 
mask
 = 0;

147 
i
 = 0; i < 
bl
->
max_busy
; i++) {

149 i‡((
b
 & 7) == 0) {

150 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

153 i‡(
mask
 & 1) {

154 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
bc
->md5, 16) == 0) {

155  
NGX_AGAIN
;

157 
ˇchóbÀ
++;

159 } i‡(
‰ì
 == -1) {

160 
‰ì
 = 
i
;

164 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

165 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

166 
‰ì
 = 
i
 + 1;

173 
mask
 >>= 1;

174 
b
++;

177 i‡(
‰ì
 == -1) {

178  
NGX_ERROR
;

181 i‡(
lock
) {

182 i‡(
bl
->
busy
 =bl->
max_busy
) {

183  
NGX_ERROR
;

186 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
bc
->md5, 16);

187 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

188 
bc
->
¶Ÿ
 = 
‰ì
;

190 
bl
->
ˇchóbÀ
++;

191 
bl
->
busy
++;

194  
NGX_OK
;

195 
	}
}

198 *
	$ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

199 *
c⁄f
)

201 *
p
 = 
c⁄f
;

203 
ngx_uöt_t
 
i
, 
dup
, 
övÆid
;

204 
ngx_°r_t
 *
vÆue
, 
löe
;

205 
ngx_hâp_busy_lock_t
 *
bl
, **
bÕ
;

207 
bÕ
 = (
ngx_hâp_busy_lock_t
 **Ë(
p
 + 
cmd
->
off£t
);

208 i‡(*
bÕ
) {

213 
bl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_busy_lock_t
));

214 i‡(
bl
 =
NULL
) {

215  
NGX_CONF_ERROR
;

217 *
bÕ
 = 
bl
;

220 
bl
->
muãx
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_muãx_t
));

221 i‡(
bl
->
muãx
 =
NULL
) {

222  
NGX_CONF_ERROR
;

225 
dup
 = 0;

226 
övÆid
 = 0;

227 
vÆue
 = 
cf
->
¨gs
->
ñts
;

229 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

231 i‡(
vÆue
[
i
].
d©a
[1] != '=') {

232 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

233 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

234  
NGX_CONF_ERROR
;

237 
vÆue
[
i
].
d©a
[0]) {

240 i‡(
bl
->
max_busy
) {

241 
dup
 = 1;

245 
bl
->
max_busy
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

246 i‡(
bl
->
max_busy
 =
NGX_ERROR
) {

247 
övÆid
 = 1;

254 i‡(
bl
->
max_waôög
) {

255 
dup
 = 1;

259 
bl
->
max_waôög
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

260 i‡(
bl
->
max_waôög
 =
NGX_ERROR
) {

261 
övÆid
 = 1;

268 i‡(
bl
->
timeout
) {

269 
dup
 = 1;

273 
löe
.
Àn
 = 
vÆue
[
i
].len - 2;

274 
löe
.
d©a
 = 
vÆue
[
i
].data + 2;

276 
bl
->
timeout
 = 
	`ngx_∑r£_time
(&
löe
, 1);

277 i‡(
bl
->
timeout
 =(
time_t
Ë
NGX_ERROR
) {

278 
övÆid
 = 1;

285 
övÆid
 = 1;

288 i‡(
dup
) {

289 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

290 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

291  
NGX_CONF_ERROR
;

294 i‡(
övÆid
) {

295 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

296 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

297  
NGX_CONF_ERROR
;

301 i‡(
bl
->
timeout
 =0 && bl->
max_waôög
) {

302 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

306  
NGX_CONF_OK
;

307 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_busy_lock.h

8 #i‚de‡
_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_hâp.h
>

19 
u_ch¨
 *
	mmd5_mask
;

20 *
	mmd5
;

21 
	mˇchóbÀ
;

23 
	mbusy
;

24 
	mmax_busy
;

26 
	mwaôög
;

27 
	mmax_waôög
;

29 
time_t
 
	mtimeout
;

31 
ngx_evít_muãx_t
 *
	mmuãx
;

32 } 
	tngx_hâp_busy_lock_t
;

36 
time_t
 
	mtime
;

37 
ngx_evít_t
 *
	mevít
;

38 (*
	mevít_h™dÀr
)(
ngx_evít_t
 *
	mev
);

39 
u_ch¨
 *
	mmd5
;

40 
	m¶Ÿ
;

41 } 
	tngx_hâp_busy_lock_˘x_t
;

44 
ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

45 
ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

46 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
);

47 
ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

48 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

50 *
ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_cache.h

8 #i‚de‡
_NGX_HTTP_CACHE_H_INCLUDED_


9 
	#_NGX_HTTP_CACHE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_CACHE_MISS
 1

	)

18 
	#NGX_HTTP_CACHE_BYPASS
 2

	)

19 
	#NGX_HTTP_CACHE_EXPIRED
 3

	)

20 
	#NGX_HTTP_CACHE_STALE
 4

	)

21 
	#NGX_HTTP_CACHE_UPDATING
 5

	)

22 
	#NGX_HTTP_CACHE_REVALIDATED
 6

	)

23 
	#NGX_HTTP_CACHE_HIT
 7

	)

24 
	#NGX_HTTP_CACHE_SCARCE
 8

	)

26 
	#NGX_HTTP_CACHE_KEY_LEN
 16

	)

30 
ngx_uöt_t
 
	m°©us
;

31 
time_t
 
	mvÆid
;

32 } 
	tngx_hâp_ˇche_vÆid_t
;

36 
ngx_rbåì_node_t
 
	mnode
;

37 
ngx_queue_t
 
	mqueue
;

39 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN


40 - (
ngx_rbåì_key_t
)];

42 
	mcou¡
:20;

43 
	mu£s
:10;

44 
	mvÆid_m£c
:10;

45 
	mîr‹
:10;

46 
	mexi°s
:1;

47 
	mupd©ög
:1;

48 
	mdñëög
:1;

51 
ngx_fûe_uniq_t
 
	muniq
;

52 
time_t
 
	mexpúe
;

53 
time_t
 
	mvÆid_£c
;

54 
size_t
 
	mbody_°¨t
;

55 
off_t
 
	mfs_size
;

56 } 
	tngx_hâp_fûe_ˇche_node_t
;

59 
	sngx_hâp_ˇche_s
 {

60 
ngx_fûe_t
 
	mfûe
;

61 
ngx_¨øy_t
 
	mkeys
;

62 
uöt32_t
 
	m¸c32
;

63 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN
];

65 
ngx_fûe_uniq_t
 
	muniq
;

66 
time_t
 
	mvÆid_£c
;

67 
time_t
 
	mœ°_modifõd
;

68 
time_t
 
	md©e
;

70 
size_t
 
	mhódî_°¨t
;

71 
size_t
 
	mbody_°¨t
;

72 
off_t
 
	mÀngth
;

73 
off_t
 
	mfs_size
;

75 
ngx_uöt_t
 
	mmö_u£s
;

76 
ngx_uöt_t
 
	mîr‹
;

77 
ngx_uöt_t
 
	mvÆid_m£c
;

79 
ngx_buf_t
 *
	mbuf
;

81 
ngx_hâp_fûe_ˇche_t
 *
	mfûe_ˇche
;

82 
ngx_hâp_fûe_ˇche_node_t
 *
	mnode
;

84 
ngx_m£c_t
 
	mlock_timeout
;

85 
ngx_m£c_t
 
	mwaô_time
;

87 
ngx_evít_t
 
	mwaô_evít
;

89 
	mlock
:1;

90 
	mwaôög
:1;

92 
	mupd©ed
:1;

93 
	mupd©ög
:1;

94 
	mexi°s
:1;

95 
	mãmp_fûe
:1;

100 
time_t
 
	mvÆid_£c
;

101 
time_t
 
	mœ°_modifõd
;

102 
time_t
 
	md©e
;

103 
uöt32_t
 
	m¸c32
;

104 
u_sh‹t
 
	mvÆid_m£c
;

105 
u_sh‹t
 
	mhódî_°¨t
;

106 
u_sh‹t
 
	mbody_°¨t
;

107 } 
	tngx_hâp_fûe_ˇche_hódî_t
;

111 
ngx_rbåì_t
 
	mrbåì
;

112 
ngx_rbåì_node_t
 
	m£¡öñ
;

113 
ngx_queue_t
 
	mqueue
;

114 
ngx_©omic_t
 
	mcﬁd
;

115 
ngx_©omic_t
 
	mlﬂdög
;

116 
off_t
 
	msize
;

117 } 
	tngx_hâp_fûe_ˇche_sh_t
;

120 
	sngx_hâp_fûe_ˇche_s
 {

121 
ngx_hâp_fûe_ˇche_sh_t
 *
	msh
;

122 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

124 
ngx_∑th_t
 *
	m∑th
;

126 
off_t
 
	mmax_size
;

127 
size_t
 
	mbsize
;

129 
time_t
 
	möa˘ive
;

131 
ngx_uöt_t
 
	mfûes
;

132 
ngx_uöt_t
 
	mlﬂdî_fûes
;

133 
ngx_m£c_t
 
	mœ°
;

134 
ngx_m£c_t
 
	mlﬂdî_¶ìp
;

135 
ngx_m£c_t
 
	mlﬂdî_thªshﬁd
;

137 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

141 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
);

142 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

143 
ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

144 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
);

145 
ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
);

146 
ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
);

147 
ngx_hâp_fûe_ˇche_upd©e_hódî
(
ngx_hâp_ªque°_t
 *
r
);

148 
ngx_öt_t
 
ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *);

149 
ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
);

150 
time_t
 
ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
);

152 *
ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

153 *
c⁄f
);

154 *
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

155 *
c⁄f
);

158 
ngx_°r_t
 
ngx_hâp_ˇche_°©us
[];

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_config.h

8 #i‚de‡
_NGX_HTTP_CONFIG_H_INCLUDED_


9 
	#_NGX_HTTP_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 **
	mmaö_c⁄f
;

19 **
	m§v_c⁄f
;

20 **
	mloc_c⁄f
;

21 } 
	tngx_hâp_c⁄f_˘x_t
;

25 
ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

26 
ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

28 *(*
	m¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

29 *(*
	möô_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	mc⁄f
);

31 *(*
	m¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

32 *(*
	mmîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

34 *(*
	m¸óã_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

35 *(*
	mmîge_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

36 } 
	tngx_hâp_moduÀ_t
;

39 
	#NGX_HTTP_MODULE
 0x50545448

	)

41 
	#NGX_HTTP_MAIN_CONF
 0x02000000

	)

42 
	#NGX_HTTP_SRV_CONF
 0x04000000

	)

43 
	#NGX_HTTP_LOC_CONF
 0x08000000

	)

44 
	#NGX_HTTP_UPS_CONF
 0x10000000

	)

45 
	#NGX_HTTP_SIF_CONF
 0x20000000

	)

46 
	#NGX_HTTP_LIF_CONF
 0x40000000

	)

47 
	#NGX_HTTP_LMT_CONF
 0x80000000

	)

50 
	#NGX_HTTP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

51 
	#NGX_HTTP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

52 
	#NGX_HTTP_LOC_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
loc_c⁄f
)

	)

55 
	#ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
moduÀ
) \

56 (
r
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

57 
	#ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
moduÀ
Ë‘)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

58 
	#ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
moduÀ
Ë‘)->
loc_c⁄f
[moduÀ.
˘x_ödex
]

	)

61 
	#ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

62 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

63 
	#ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

64 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

65 
	#ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
moduÀ
) \

66 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
loc_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

68 
	#ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

69 (
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
] ? \

70 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
]) \

71 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

72 
NULL
)

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_copy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_bufs_t
 
	mbufs
;

15 } 
	tngx_hâp_c›y_fûãr_c⁄f_t
;

18 #i‡(
NGX_HAVE_FILE_AIO
)

19 
ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

20 
ngx_fûe_t
 *
fûe
);

21 
ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

22 #i‡(
NGX_HAVE_AIO_SENDFILE
)

23 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

27 *
ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

29 *
∑ª¡
, *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_c›y_fûãr_comm™ds
[] = {

35 { 
ngx_°rög
("output_buffers"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

37 
ngx_c⁄f_£t_bufs_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_c›y_fûãr_c⁄f_t
, 
bufs
),

40 
NULL
 },

42 
ngx_nuŒ_comm™d


46 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ_˘x
 = {

47 
NULL
,

48 
ngx_hâp_c›y_fûãr_öô
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
ngx_hâp_c›y_fûãr_¸óã_c⁄f
,

57 
ngx_hâp_c›y_fûãr_mîge_c⁄f


61 
ngx_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ
 = {

62 
NGX_MODULE_V1
,

63 &
ngx_hâp_c›y_fûãr_moduÀ_˘x
,

64 
ngx_hâp_c›y_fûãr_comm™ds
,

65 
NGX_HTTP_MODULE
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NGX_MODULE_V1_PADDING


77 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

80 
ngx_öt_t


81 
	$ngx_hâp_c›y_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

83 
ngx_öt_t
 
rc
;

84 
ngx_c⁄√˘i⁄_t
 *
c
;

85 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

86 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

87 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

89 
c
 = 
r
->
c⁄√˘i⁄
;

91 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

92 "hâ∞c›y fûãr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

94 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

96 i‡(
˘x
 =
NULL
) {

97 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ouçut_chaö_˘x_t
));

98 i‡(
˘x
 =
NULL
) {

99  
NGX_ERROR
;

102 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_c›y_fûãr_moduÀ
);

104 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

105 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

107 
˘x
->
£ndfûe
 = 
c
->sendfile;

108 
˘x
->
√ed_ö_mem‹y
 = 
r
->
maö_fûãr_√ed_ö_mem‹y


109 || 
r
->
fûãr_√ed_ö_mem‹y
;

110 
˘x
->
√ed_ö_ãmp
 = 
r
->
fûãr_√ed_ãmp‹¨y
;

112 
˘x
->
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

114 
˘x
->
poﬁ
 = 
r
->pool;

115 
˘x
->
bufs
 = 
c⁄f
->bufs;

116 
˘x
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_c›y_fûãr_moduÀ
;

118 
˘x
->
ouçut_fûãr
 = (
ngx_ouçut_chaö_fûãr_±
)

119 
ngx_hâp_√xt_body_fûãr
;

120 
˘x
->
fûãr_˘x
 = 
r
;

122 #i‡(
NGX_HAVE_FILE_AIO
)

123 i‡(
ngx_fûe_aio
) {

124 i‡(
˛cf
->
aio
) {

125 
˘x
->
aio_h™dÀr
 = 
ngx_hâp_c›y_aio_h™dÀr
;

127 #i‡(
NGX_HAVE_AIO_SENDFILE
)

128 
c
->
aio_£ndfûe
 = (
˛cf
->
aio
 =
NGX_HTTP_AIO_SENDFILE
);

133 i‡(
ö
 && in->
buf
 && 
	`ngx_buf_size
(in->buf)) {

134 
r
->
ªque°_ouçut
 = 1;

138 #i‡(
NGX_HAVE_FILE_AIO
)

139 
˘x
->
aio
 = 
r
->aio;

143 
rc
 = 
	`ngx_ouçut_chaö
(
˘x
, 
ö
);

145 i‡(
˘x
->
ö
 =
NULL
) {

146 
r
->
buf„ªd
 &~
NGX_HTTP_COPY_BUFFERED
;

149 
r
->
buf„ªd
 |
NGX_HTTP_COPY_BUFFERED
;

152 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

153 "hâ∞c›y fûãr: %ò\"%V?%V\"", 
rc
, &
r
->
uri
, &r->
¨gs
);

155 #i‡(
NGX_HAVE_FILE_AIO
 && 
NGX_HAVE_AIO_SENDFILE
)

157 i‡(
c
->
busy_£ndfûe
) {

158 
ssize_t
 
n
;

159 
off_t
 
off£t
;

160 
ngx_fûe_t
 *
fûe
;

161 
ngx_hâp_ïhemîÆ_t
 *
e
;

163 i‡(
r
->
aio
) {

164 
c
->
busy_£ndfûe
 = 
NULL
;

165  
rc
;

168 
fûe
 = 
c
->
busy_£ndfûe
->file;

169 
off£t
 = 
c
->
busy_£ndfûe
->
fûe_pos
;

171 i‡(
fûe
->
aio
) {

172 
c
->
busy_cou¡
 = (
off£t
 =
fûe
->
aio
->
œ°_off£t
) ?

173 
c
->
busy_cou¡
 + 1 : 0;

174 
fûe
->
aio
->
œ°_off£t
 = 
off£t
;

176 i‡(
c
->
busy_cou¡
 > 2) {

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

179 &
fûe
->
«me
);

180 
c
->
aio_£ndfûe
 = 0;

184 
c
->
busy_£ndfûe
 = 
NULL
;

185 
e
 = (
ngx_hâp_ïhemîÆ_t
 *Ë&
r
->
uri_°¨t
;

187 
n
 = 
	`ngx_fûe_aio_ªad
(
fûe
, &
e
->
aio_¥ñﬂd
, 1, 
off£t
, 
r
->
poﬁ
);

189 i‡(
n
 > 0) {

190 
ö
 = 
NULL
;

194 
rc
 = 
n
;

196 i‡(
rc
 =
NGX_AGAIN
) {

197 
fûe
->
aio
->
d©a
 = 
r
;

198 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
;

200 
r
->
maö
->
blocked
++;

201 
r
->
aio
 = 1;

206  
rc
;

208 
	}
}

211 #i‡(
NGX_HAVE_FILE_AIO
)

214 
	$ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

216 
ngx_hâp_ªque°_t
 *
r
;

218 
r
 = 
˘x
->
fûãr_˘x
;

220 
fûe
->
aio
->
d©a
 = 
r
;

221 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_evít_h™dÀr
;

223 
r
->
maö
->
blocked
++;

224 
r
->
aio
 = 1;

225 
˘x
->
aio
 = 1;

226 
	}
}

230 
	$ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

232 
ngx_evít_aio_t
 *
aio
;

233 
ngx_hâp_ªque°_t
 *
r
;

235 
aio
 = 
ev
->
d©a
;

236 
r
 = 
aio
->
d©a
;

238 
r
->
maö
->
blocked
--;

239 
r
->
aio
 = 0;

241 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

242 
	}
}

245 #i‡(
NGX_HAVE_AIO_SENDFILE
)

248 
	$ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

250 
ngx_evít_aio_t
 *
aio
;

251 
ngx_hâp_ªque°_t
 *
r
;

253 
aio
 = 
ev
->
d©a
;

254 
r
 = 
aio
->
d©a
;

256 
r
->
maö
->
blocked
--;

257 
r
->
aio
 = 0;

258 
ev
->
com∂ëe
 = 0;

260 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

261 
	}
}

268 
	$ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

270 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

272 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_c›y_fûãr_c⁄f_t
));

273 i‡(
c⁄f
 =
NULL
) {

274  
NULL
;

277 
c⁄f
->
bufs
.
num
 = 0;

279  
c⁄f
;

280 
	}
}

284 
	$ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

286 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

287 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

289 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs, 1, 32768);

291  
NULL
;

292 
	}
}

295 
ngx_öt_t


296 
	$ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

298 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

299 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_c›y_fûãr
;

301  
NGX_OK
;

302 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 *
	m«me
;

15 
uöt32_t
 
	mmëhod
;

16 } 
	tngx_hâp_mëhod_«me_t
;

19 
	#NGX_HTTP_REQUEST_BODY_FILE_OFF
 0

	)

20 
	#NGX_HTTP_REQUEST_BODY_FILE_ON
 1

	)

21 
	#NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 2

	)

24 
ngx_öt_t
 
ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_öt_t
 
ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
);

28 
ngx_öt_t
 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

29 *
ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

30 *
ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

31 *
ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

33 *
∑ª¡
, *
chûd
);

34 *
ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
dummy
);

40 *
ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
dummy
);

42 
ngx_öt_t
 
ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

45 *
ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

48 *
c⁄f
);

50 *
ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

52 *
ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

53 *
c⁄f
);

54 *
ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

55 *
ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

59 *
ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

60 *
c⁄f
);

61 *
ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

64 *
c⁄f
);

65 *
ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 *
ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

69 *
ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

73 #i‡(
NGX_HTTP_GZIP
)

74 
ngx_öt_t
 
ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
);

75 
ngx_uöt_t
 
ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
);

76 *
ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

79 
ngx_öt_t
 
ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
,

81 
ªcursive
);

82 #i‡(
NGX_HAVE_OPENAT
)

83 *
ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

84 *
c⁄f
);

87 *
ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

88 *
ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

90 
ngx_c⁄f_po°_t
 
	gngx_hâp_c‹e_low©_po°
 =

91 { 
ngx_hâp_c‹e_low©_check
 };

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_c‹e_poﬁ_size_p
 =

94 
ngx_hâp_c‹e_poﬁ_size
;

96 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 = {

97 
ngx_c⁄f_dïªˇãd
, "optimize_server_names", "server_name_in_redirect"

100 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 = {

101 
ngx_c⁄f_dïªˇãd
, "open_file_cache_retest", "open_file_cache_valid"

104 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_ßtisfy_™y
 = {

105 
ngx_c⁄f_dïªˇãd
, "satisfy_any", "satisfy"

109 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ªque°_body_ö_fûe
[] = {

110 { 
ngx_°rög
("off"), 
NGX_HTTP_REQUEST_BODY_FILE_OFF
 },

111 { 
ngx_°rög
("⁄"), 
NGX_HTTP_REQUEST_BODY_FILE_ON
 },

112 { 
ngx_°rög
("˛ón"), 
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 },

113 { 
ngx_nuŒ_°rög
, 0 }

117 #i‡(
NGX_HAVE_FILE_AIO
)

119 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_aio
[] = {

120 { 
ngx_°rög
("off"), 
NGX_HTTP_AIO_OFF
 },

121 { 
ngx_°rög
("⁄"), 
NGX_HTTP_AIO_ON
 },

122 #i‡(
NGX_HAVE_AIO_SENDFILE
)

123 { 
ngx_°rög
("£ndfûe"), 
NGX_HTTP_AIO_SENDFILE
 },

125 { 
ngx_nuŒ_°rög
, 0 }

131 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ßtisfy
[] = {

132 { 
ngx_°rög
("Æl"), 
NGX_HTTP_SATISFY_ALL
 },

133 { 
ngx_°rög
("™y"), 
NGX_HTTP_SATISFY_ANY
 },

134 { 
ngx_nuŒ_°rög
, 0 }

138 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_lögîög_˛o£
[] = {

139 { 
ngx_°rög
("off"), 
NGX_HTTP_LINGERING_OFF
 },

140 { 
ngx_°rög
("⁄"), 
NGX_HTTP_LINGERING_ON
 },

141 { 
ngx_°rög
("Æways"), 
NGX_HTTP_LINGERING_ALWAYS
 },

142 { 
ngx_nuŒ_°rög
, 0 }

146 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_if_modifõd_sö˚
[] = {

147 { 
ngx_°rög
("off"), 
NGX_HTTP_IMS_OFF
 },

148 { 
ngx_°rög
("exa˘"), 
NGX_HTTP_IMS_EXACT
 },

149 { 
ngx_°rög
("bef‹e"), 
NGX_HTTP_IMS_BEFORE
 },

150 { 
ngx_nuŒ_°rög
, 0 }

154 
ngx_c⁄f_bômask_t
 
	gngx_hâp_c‹e_kì∑live_dißbÀ
[] = {

155 { 
ngx_°rög
("n⁄e"), 
NGX_HTTP_KEEPALIVE_DISABLE_NONE
 },

156 { 
ngx_°rög
("msõ6"), 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 },

157 { 
ngx_°rög
("ßÁri"), 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 },

158 { 
ngx_nuŒ_°rög
, 0 }

162 
ngx_∑th_öô_t
 
	gngx_hâp_˛õ¡_ãmp_∑th
 = {

163 
ngx_°rög
(
NGX_HTTP_CLIENT_TEMP_PATH
), { 0, 0, 0 }

167 #i‡(
NGX_HTTP_GZIP
)

169 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_hâp_vîsi⁄
[] = {

170 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

171 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

172 { 
ngx_nuŒ_°rög
, 0 }

176 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gzù_¥oxõd_mask
[] = {

177 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_PROXIED_OFF
 },

178 { 
ngx_°rög
("expúed"), 
NGX_HTTP_GZIP_PROXIED_EXPIRED
 },

179 { 
ngx_°rög
("no-ˇche"), 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
 },

180 { 
ngx_°rög
("no-°‹e"), 
NGX_HTTP_GZIP_PROXIED_NO_STORE
 },

181 { 
ngx_°rög
("¥iv©e"), 
NGX_HTTP_GZIP_PROXIED_PRIVATE
 },

182 { 
ngx_°rög
("no_œ°_modifõd"), 
NGX_HTTP_GZIP_PROXIED_NO_LM
 },

183 { 
ngx_°rög
("no_ëag"), 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
 },

184 { 
ngx_°rög
("auth"), 
NGX_HTTP_GZIP_PROXIED_AUTH
 },

185 { 
ngx_°rög
("™y"), 
NGX_HTTP_GZIP_PROXIED_ANY
 },

186 { 
ngx_nuŒ_°rög
, 0 }

190 
ngx_°r_t
 
	gngx_hâp_gzù_no_ˇche
 = 
ngx_°rög
("no-cache");

191 
ngx_°r_t
 
	gngx_hâp_gzù_no_°‹e
 = 
ngx_°rög
("no-store");

192 
ngx_°r_t
 
	gngx_hâp_gzù_¥iv©e
 = 
ngx_°rög
("private");

197 
ngx_comm™d_t
 
	gngx_hâp_c‹e_comm™ds
[] = {

199 { 
ngx_°rög
("variables_hash_max_size"),

200 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

201 
ngx_c⁄f_£t_num_¶Ÿ
,

202 
NGX_HTTP_MAIN_CONF_OFFSET
,

203 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_max_size
),

204 
NULL
 },

206 { 
ngx_°rög
("variables_hash_bucket_size"),

207 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

208 
ngx_c⁄f_£t_num_¶Ÿ
,

209 
NGX_HTTP_MAIN_CONF_OFFSET
,

210 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_buckë_size
),

211 
NULL
 },

213 { 
ngx_°rög
("server_names_hash_max_size"),

214 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

215 
ngx_c⁄f_£t_num_¶Ÿ
,

216 
NGX_HTTP_MAIN_CONF_OFFSET
,

217 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_max_size
),

218 
NULL
 },

220 { 
ngx_°rög
("server_names_hash_bucket_size"),

221 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

222 
ngx_c⁄f_£t_num_¶Ÿ
,

223 
NGX_HTTP_MAIN_CONF_OFFSET
,

224 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_buckë_size
),

225 
NULL
 },

227 { 
ngx_°rög
("server"),

228 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

229 
ngx_hâp_c‹e_£rvî
,

232 
NULL
 },

234 { 
ngx_°rög
("connection_pool_size"),

235 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

236 
ngx_c⁄f_£t_size_¶Ÿ
,

237 
NGX_HTTP_SRV_CONF_OFFSET
,

238 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
c⁄√˘i⁄_poﬁ_size
),

239 &
ngx_hâp_c‹e_poﬁ_size_p
 },

241 { 
ngx_°rög
("request_pool_size"),

242 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

243 
ngx_c⁄f_£t_size_¶Ÿ
,

244 
NGX_HTTP_SRV_CONF_OFFSET
,

245 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ªque°_poﬁ_size
),

246 &
ngx_hâp_c‹e_poﬁ_size_p
 },

248 { 
ngx_°rög
("client_header_timeout"),

249 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

250 
ngx_c⁄f_£t_m£c_¶Ÿ
,

251 
NGX_HTTP_SRV_CONF_OFFSET
,

252 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_timeout
),

253 
NULL
 },

255 { 
ngx_°rög
("client_header_buffer_size"),

256 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

257 
ngx_c⁄f_£t_size_¶Ÿ
,

258 
NGX_HTTP_SRV_CONF_OFFSET
,

259 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_buf„r_size
),

260 
NULL
 },

262 { 
ngx_°rög
("large_client_header_buffers"),

263 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE2
,

264 
ngx_c⁄f_£t_bufs_¶Ÿ
,

265 
NGX_HTTP_SRV_CONF_OFFSET
,

266 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
œrge_˛õ¡_hódî_buf„rs
),

267 
NULL
 },

269 { 
ngx_°rög
("optimize_server_names"),

270 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

271 
ngx_c⁄f_£t_Êag_¶Ÿ
,

272 
NGX_HTTP_LOC_CONF_OFFSET
,

273 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

274 &
ngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 },

276 { 
ngx_°rög
("ignore_invalid_headers"),

277 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

278 
ngx_c⁄f_£t_Êag_¶Ÿ
,

279 
NGX_HTTP_SRV_CONF_OFFSET
,

280 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ign‹e_övÆid_hódîs
),

281 
NULL
 },

283 { 
ngx_°rög
("merge_slashes"),

284 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

285 
ngx_c⁄f_£t_Êag_¶Ÿ
,

286 
NGX_HTTP_SRV_CONF_OFFSET
,

287 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
mîge_¶ashes
),

288 
NULL
 },

290 { 
ngx_°rög
("underscores_in_headers"),

291 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

292 
ngx_c⁄f_£t_Êag_¶Ÿ
,

293 
NGX_HTTP_SRV_CONF_OFFSET
,

294 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
undîsc‹es_ö_hódîs
),

295 
NULL
 },

297 { 
ngx_°rög
("location"),

298 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

299 
ngx_hâp_c‹e_loˇti⁄
,

300 
NGX_HTTP_SRV_CONF_OFFSET
,

302 
NULL
 },

304 { 
ngx_°rög
("listen"),

305 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

306 
ngx_hâp_c‹e_li°í
,

307 
NGX_HTTP_SRV_CONF_OFFSET
,

309 
NULL
 },

311 { 
ngx_°rög
("server_name"),

312 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

313 
ngx_hâp_c‹e_£rvî_«me
,

314 
NGX_HTTP_SRV_CONF_OFFSET
,

316 
NULL
 },

318 { 
ngx_°rög
("types_hash_max_size"),

319 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

320 
ngx_c⁄f_£t_num_¶Ÿ
,

321 
NGX_HTTP_LOC_CONF_OFFSET
,

322 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_max_size
),

323 
NULL
 },

325 { 
ngx_°rög
("types_hash_bucket_size"),

326 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

327 
ngx_c⁄f_£t_num_¶Ÿ
,

328 
NGX_HTTP_LOC_CONF_OFFSET
,

329 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_buckë_size
),

330 
NULL
 },

332 { 
ngx_°rög
("types"),

333 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


334 |
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

335 
ngx_hâp_c‹e_ty≥s
,

336 
NGX_HTTP_LOC_CONF_OFFSET
,

338 
NULL
 },

340 { 
ngx_°rög
("default_type"),

341 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

342 
ngx_c⁄f_£t_°r_¶Ÿ
,

343 
NGX_HTTP_LOC_CONF_OFFSET
,

344 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
deÁu…_ty≥
),

345 
NULL
 },

347 { 
ngx_°rög
("root"),

348 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


349 |
NGX_CONF_TAKE1
,

350 
ngx_hâp_c‹e_roŸ
,

351 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
NULL
 },

355 { 
ngx_°rög
("alias"),

356 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

357 
ngx_hâp_c‹e_roŸ
,

358 
NGX_HTTP_LOC_CONF_OFFSET
,

360 
NULL
 },

362 { 
ngx_°rög
("limit_except"),

363 
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

364 
ngx_hâp_c‹e_limô_ex˚±
,

365 
NGX_HTTP_LOC_CONF_OFFSET
,

367 
NULL
 },

369 { 
ngx_°rög
("client_max_body_size"),

370 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

371 
ngx_c⁄f_£t_off_¶Ÿ
,

372 
NGX_HTTP_LOC_CONF_OFFSET
,

373 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_max_body_size
),

374 
NULL
 },

376 { 
ngx_°rög
("client_body_buffer_size"),

377 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

378 
ngx_c⁄f_£t_size_¶Ÿ
,

379 
NGX_HTTP_LOC_CONF_OFFSET
,

380 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_buf„r_size
),

381 
NULL
 },

383 { 
ngx_°rög
("client_body_timeout"),

384 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

385 
ngx_c⁄f_£t_m£c_¶Ÿ
,

386 
NGX_HTTP_LOC_CONF_OFFSET
,

387 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_timeout
),

388 
NULL
 },

390 { 
ngx_°rög
("client_body_temp_path"),

391 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

392 
ngx_c⁄f_£t_∑th_¶Ÿ
,

393 
NGX_HTTP_LOC_CONF_OFFSET
,

394 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ãmp_∑th
),

395 
NULL
 },

397 { 
ngx_°rög
("client_body_in_file_only"),

398 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

399 
ngx_c⁄f_£t_íum_¶Ÿ
,

400 
NGX_HTTP_LOC_CONF_OFFSET
,

401 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_fûe_⁄ly
),

402 &
ngx_hâp_c‹e_ªque°_body_ö_fûe
 },

404 { 
ngx_°rög
("client_body_in_single_buffer"),

405 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

406 
ngx_c⁄f_£t_Êag_¶Ÿ
,

407 
NGX_HTTP_LOC_CONF_OFFSET
,

408 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_sögÀ_buf„r
),

409 
NULL
 },

411 { 
ngx_°rög
("sendfile"),

412 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


413 |
NGX_CONF_FLAG
,

414 
ngx_c⁄f_£t_Êag_¶Ÿ
,

415 
NGX_HTTP_LOC_CONF_OFFSET
,

416 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe
),

417 
NULL
 },

419 { 
ngx_°rög
("sendfile_max_chunk"),

420 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

421 
ngx_c⁄f_£t_size_¶Ÿ
,

422 
NGX_HTTP_LOC_CONF_OFFSET
,

423 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe_max_chunk
),

424 
NULL
 },

426 #i‡(
NGX_HAVE_FILE_AIO
)

428 { 
ngx_°rög
("aio"),

429 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

430 
ngx_c⁄f_£t_íum_¶Ÿ
,

431 
NGX_HTTP_LOC_CONF_OFFSET
,

432 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
aio
),

433 &
ngx_hâp_c‹e_aio
 },

437 { 
ngx_°rög
("read_ahead"),

438 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

439 
ngx_c⁄f_£t_size_¶Ÿ
,

440 
NGX_HTTP_LOC_CONF_OFFSET
,

441 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªad_ahód
),

442 
NULL
 },

444 { 
ngx_°rög
("directio"),

445 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

446 
ngx_hâp_c‹e_dúe˘io
,

447 
NGX_HTTP_LOC_CONF_OFFSET
,

449 
NULL
 },

451 { 
ngx_°rög
("directio_alignment"),

452 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

453 
ngx_c⁄f_£t_off_¶Ÿ
,

454 
NGX_HTTP_LOC_CONF_OFFSET
,

455 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
dúe˘io_Æignmít
),

456 
NULL
 },

458 { 
ngx_°rög
("tcp_nopush"),

459 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

460 
ngx_c⁄f_£t_Êag_¶Ÿ
,

461 
NGX_HTTP_LOC_CONF_OFFSET
,

462 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_n›ush
),

463 
NULL
 },

465 { 
ngx_°rög
("tcp_nodelay"),

466 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

467 
ngx_c⁄f_£t_Êag_¶Ÿ
,

468 
NGX_HTTP_LOC_CONF_OFFSET
,

469 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_nodñay
),

470 
NULL
 },

472 { 
ngx_°rög
("send_timeout"),

473 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

474 
ngx_c⁄f_£t_m£c_¶Ÿ
,

475 
NGX_HTTP_LOC_CONF_OFFSET
,

476 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_timeout
),

477 
NULL
 },

479 { 
ngx_°rög
("send_lowat"),

480 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

481 
ngx_c⁄f_£t_size_¶Ÿ
,

482 
NGX_HTTP_LOC_CONF_OFFSET
,

483 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_low©
),

484 &
ngx_hâp_c‹e_low©_po°
 },

486 { 
ngx_°rög
("postpone_output"),

487 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

488 
ngx_c⁄f_£t_size_¶Ÿ
,

489 
NGX_HTTP_LOC_CONF_OFFSET
,

490 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°p⁄e_ouçut
),

491 
NULL
 },

493 { 
ngx_°rög
("limit_rate"),

494 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


495 |
NGX_CONF_TAKE1
,

496 
ngx_c⁄f_£t_size_¶Ÿ
,

497 
NGX_HTTP_LOC_CONF_OFFSET
,

498 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã
),

499 
NULL
 },

501 { 
ngx_°rög
("limit_rate_after"),

502 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


503 |
NGX_CONF_TAKE1
,

504 
ngx_c⁄f_£t_size_¶Ÿ
,

505 
NGX_HTTP_LOC_CONF_OFFSET
,

506 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã_a·î
),

507 
NULL
 },

509 { 
ngx_°rög
("keepalive_timeout"),

510 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

511 
ngx_hâp_c‹e_kì∑live
,

512 
NGX_HTTP_LOC_CONF_OFFSET
,

514 
NULL
 },

516 { 
ngx_°rög
("keepalive_requests"),

517 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

518 
ngx_c⁄f_£t_num_¶Ÿ
,

519 
NGX_HTTP_LOC_CONF_OFFSET
,

520 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_ªque°s
),

521 
NULL
 },

523 { 
ngx_°rög
("keepalive_disable"),

524 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

525 
ngx_c⁄f_£t_bômask_¶Ÿ
,

526 
NGX_HTTP_LOC_CONF_OFFSET
,

527 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_dißbÀ
),

528 &
ngx_hâp_c‹e_kì∑live_dißbÀ
 },

530 { 
ngx_°rög
("satisfy"),

531 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

532 
ngx_c⁄f_£t_íum_¶Ÿ
,

533 
NGX_HTTP_LOC_CONF_OFFSET
,

534 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

535 &
ngx_hâp_c‹e_ßtisfy
 },

537 { 
ngx_°rög
("satisfy_any"),

538 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

539 
ngx_c⁄f_£t_Êag_¶Ÿ
,

540 
NGX_HTTP_LOC_CONF_OFFSET
,

541 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

542 &
ngx_c⁄f_dïªˇãd_ßtisfy_™y
 },

544 { 
ngx_°rög
("internal"),

545 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

546 
ngx_hâp_c‹e_öã∫Æ
,

547 
NGX_HTTP_LOC_CONF_OFFSET
,

549 
NULL
 },

551 { 
ngx_°rög
("lingering_close"),

552 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

553 
ngx_c⁄f_£t_íum_¶Ÿ
,

554 
NGX_HTTP_LOC_CONF_OFFSET
,

555 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_˛o£
),

556 &
ngx_hâp_c‹e_lögîög_˛o£
 },

558 { 
ngx_°rög
("lingering_time"),

559 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

560 
ngx_c⁄f_£t_m£c_¶Ÿ
,

561 
NGX_HTTP_LOC_CONF_OFFSET
,

562 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_time
),

563 
NULL
 },

565 { 
ngx_°rög
("lingering_timeout"),

566 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

567 
ngx_c⁄f_£t_m£c_¶Ÿ
,

568 
NGX_HTTP_LOC_CONF_OFFSET
,

569 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_timeout
),

570 
NULL
 },

572 { 
ngx_°rög
("reset_timedout_connection"),

573 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

574 
ngx_c⁄f_£t_Êag_¶Ÿ
,

575 
NGX_HTTP_LOC_CONF_OFFSET
,

576 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ª£t_timedout_c⁄√˘i⁄
),

577 
NULL
 },

579 { 
ngx_°rög
("server_name_in_redirect"),

580 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

581 
ngx_c⁄f_£t_Êag_¶Ÿ
,

582 
NGX_HTTP_LOC_CONF_OFFSET
,

583 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

584 
NULL
 },

586 { 
ngx_°rög
("port_in_redirect"),

587 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

588 
ngx_c⁄f_£t_Êag_¶Ÿ
,

589 
NGX_HTTP_LOC_CONF_OFFSET
,

590 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
p‹t_ö_ªdúe˘
),

591 
NULL
 },

593 { 
ngx_°rög
("msie_padding"),

594 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

595 
ngx_c⁄f_£t_Êag_¶Ÿ
,

596 
NGX_HTTP_LOC_CONF_OFFSET
,

597 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_∑ddög
),

598 
NULL
 },

600 { 
ngx_°rög
("msie_refresh"),

601 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

602 
ngx_c⁄f_£t_Êag_¶Ÿ
,

603 
NGX_HTTP_LOC_CONF_OFFSET
,

604 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_ª‰esh
),

605 
NULL
 },

607 { 
ngx_°rög
("log_not_found"),

608 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

609 
ngx_c⁄f_£t_Êag_¶Ÿ
,

610 
NGX_HTTP_LOC_CONF_OFFSET
,

611 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_nŸ_found
),

612 
NULL
 },

614 { 
ngx_°rög
("log_subrequest"),

615 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

616 
ngx_c⁄f_£t_Êag_¶Ÿ
,

617 
NGX_HTTP_LOC_CONF_OFFSET
,

618 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_subªque°
),

619 
NULL
 },

621 { 
ngx_°rög
("recursive_error_pages"),

622 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

623 
ngx_c⁄f_£t_Êag_¶Ÿ
,

624 
NGX_HTTP_LOC_CONF_OFFSET
,

625 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªcursive_îr‹_∑ges
),

626 
NULL
 },

628 { 
ngx_°rög
("server_tokens"),

629 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

630 
ngx_c⁄f_£t_Êag_¶Ÿ
,

631 
NGX_HTTP_LOC_CONF_OFFSET
,

632 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_tokís
),

633 
NULL
 },

635 { 
ngx_°rög
("if_modified_since"),

636 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

637 
ngx_c⁄f_£t_íum_¶Ÿ
,

638 
NGX_HTTP_LOC_CONF_OFFSET
,

639 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
if_modifõd_sö˚
),

640 &
ngx_hâp_c‹e_if_modifõd_sö˚
 },

642 { 
ngx_°rög
("max_ranges"),

643 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

644 
ngx_c⁄f_£t_num_¶Ÿ
,

645 
NGX_HTTP_LOC_CONF_OFFSET
,

646 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
max_ønges
),

647 
NULL
 },

649 { 
ngx_°rög
("chunked_transfer_encoding"),

650 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

651 
ngx_c⁄f_£t_Êag_¶Ÿ
,

652 
NGX_HTTP_LOC_CONF_OFFSET
,

653 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
chunked_å™s„r_ícodög
),

654 
NULL
 },

656 { 
ngx_°rög
("etag"),

657 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

658 
ngx_c⁄f_£t_Êag_¶Ÿ
,

659 
NGX_HTTP_LOC_CONF_OFFSET
,

660 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ëag
),

661 
NULL
 },

663 { 
ngx_°rög
("error_page"),

664 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


665 |
NGX_CONF_2MORE
,

666 
ngx_hâp_c‹e_îr‹_∑ge
,

667 
NGX_HTTP_LOC_CONF_OFFSET
,

669 
NULL
 },

671 { 
ngx_°rög
("try_files"),

672 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

673 
ngx_hâp_c‹e_åy_fûes
,

674 
NGX_HTTP_LOC_CONF_OFFSET
,

676 
NULL
 },

678 { 
ngx_°rög
("post_action"),

679 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


680 |
NGX_CONF_TAKE1
,

681 
ngx_c⁄f_£t_°r_¶Ÿ
,

682 
NGX_HTTP_LOC_CONF_OFFSET
,

683 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°_a˘i⁄
),

684 
NULL
 },

686 { 
ngx_°rög
("error_log"),

687 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

688 
ngx_hâp_c‹e_îr‹_log
,

689 
NGX_HTTP_LOC_CONF_OFFSET
,

691 
NULL
 },

693 { 
ngx_°rög
("open_file_cache"),

694 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

695 
ngx_hâp_c‹e_›í_fûe_ˇche
,

696 
NGX_HTTP_LOC_CONF_OFFSET
,

697 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche
),

698 
NULL
 },

700 { 
ngx_°rög
("open_file_cache_valid"),

701 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

702 
ngx_c⁄f_£t_£c_¶Ÿ
,

703 
NGX_HTTP_LOC_CONF_OFFSET
,

704 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

705 
NULL
 },

707 { 
ngx_°rög
("open_file_cache_retest"),

708 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

709 
ngx_c⁄f_£t_£c_¶Ÿ
,

710 
NGX_HTTP_LOC_CONF_OFFSET
,

711 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

712 &
ngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 },

714 { 
ngx_°rög
("open_file_cache_min_uses"),

715 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

716 
ngx_c⁄f_£t_num_¶Ÿ
,

717 
NGX_HTTP_LOC_CONF_OFFSET
,

718 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_mö_u£s
),

719 
NULL
 },

721 { 
ngx_°rög
("open_file_cache_errors"),

722 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

723 
ngx_c⁄f_£t_Êag_¶Ÿ
,

724 
NGX_HTTP_LOC_CONF_OFFSET
,

725 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_îr‹s
),

726 
NULL
 },

728 { 
ngx_°rög
("open_file_cache_events"),

729 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

730 
ngx_c⁄f_£t_Êag_¶Ÿ
,

731 
NGX_HTTP_LOC_CONF_OFFSET
,

732 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_evíts
),

733 
NULL
 },

735 { 
ngx_°rög
("resolver"),

736 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

737 
ngx_hâp_c‹e_ªsﬁvî
,

738 
NGX_HTTP_LOC_CONF_OFFSET
,

740 
NULL
 },

742 { 
ngx_°rög
("resolver_timeout"),

743 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

744 
ngx_c⁄f_£t_m£c_¶Ÿ
,

745 
NGX_HTTP_LOC_CONF_OFFSET
,

746 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªsﬁvî_timeout
),

747 
NULL
 },

749 #i‡(
NGX_HTTP_GZIP
)

751 { 
ngx_°rög
("gzip_vary"),

752 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

753 
ngx_c⁄f_£t_Êag_¶Ÿ
,

754 
NGX_HTTP_LOC_CONF_OFFSET
,

755 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_v¨y
),

756 
NULL
 },

758 { 
ngx_°rög
("gzip_http_version"),

759 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

760 
ngx_c⁄f_£t_íum_¶Ÿ
,

761 
NGX_HTTP_LOC_CONF_OFFSET
,

762 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_hâp_vîsi⁄
),

763 &
ngx_hâp_gzù_hâp_vîsi⁄
 },

765 { 
ngx_°rög
("gzip_proxied"),

766 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

767 
ngx_c⁄f_£t_bômask_¶Ÿ
,

768 
NGX_HTTP_LOC_CONF_OFFSET
,

769 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_¥oxõd
),

770 &
ngx_hâp_gzù_¥oxõd_mask
 },

772 { 
ngx_°rög
("gzip_disable"),

773 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

774 
ngx_hâp_gzù_dißbÀ
,

775 
NGX_HTTP_LOC_CONF_OFFSET
,

777 
NULL
 },

781 #i‡(
NGX_HAVE_OPENAT
)

783 { 
ngx_°rög
("disable_symlinks"),

784 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

785 
ngx_hâp_dißbÀ_symlöks
,

786 
NGX_HTTP_LOC_CONF_OFFSET
,

788 
NULL
 },

792 
ngx_nuŒ_comm™d


796 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ_˘x
 = {

797 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
,

798 
NULL
,

800 
ngx_hâp_c‹e_¸óã_maö_c⁄f
,

801 
ngx_hâp_c‹e_öô_maö_c⁄f
,

803 
ngx_hâp_c‹e_¸óã_§v_c⁄f
,

804 
ngx_hâp_c‹e_mîge_§v_c⁄f
,

806 
ngx_hâp_c‹e_¸óã_loc_c⁄f
,

807 
ngx_hâp_c‹e_mîge_loc_c⁄f


811 
ngx_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ
 = {

812 
NGX_MODULE_V1
,

813 &
ngx_hâp_c‹e_moduÀ_˘x
,

814 
ngx_hâp_c‹e_comm™ds
,

815 
NGX_HTTP_MODULE
,

816 
NULL
,

817 
NULL
,

818 
NULL
,

819 
NULL
,

820 
NULL
,

821 
NULL
,

822 
NULL
,

823 
NGX_MODULE_V1_PADDING


827 
ngx_°r_t
 
	gngx_hâp_c‹e_gë_mëhod
 = { 3, (
u_ch¨
 *) "GET " };

831 
	$ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

833 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

835 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = 
NULL
;

837 
r
->
c⁄√˘i⁄
->
u√x≥˘ed_eof
 = 0;

839 i‡(!
r
->
öã∫Æ
) {

840 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
) {

842 
r
->
kì∑live
 = (r->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
);

845 
NGX_HTTP_CONNECTION_CLOSE
:

846 
r
->
kì∑live
 = 0;

849 
NGX_HTTP_CONNECTION_KEEP_ALIVE
:

850 
r
->
kì∑live
 = 1;

854 
r
->
lögîög_˛o£
 = (r->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0

855 || 
r
->
hódîs_ö
.
chunked
);

856 
r
->
pha£_h™dÀr
 = 0;

859 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

860 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
;

863 
r
->
vÆid_loˇti⁄
 = 1;

864 #i‡(
NGX_HTTP_GZIP
)

865 
r
->
gzù_ã°ed
 = 0;

866 
r
->
gzù_ok
 = 0;

867 
r
->
gzù_v¨y
 = 0;

870 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

871 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

872 
	}
}

876 
	$ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
)

878 
ngx_öt_t
 
rc
;

879 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

880 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

882 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

884 
ph
 = 
cmcf
->
pha£_ígöe
.
h™dÀrs
;

886 
ph
[
r
->
pha£_h™dÀr
].
checkî
) {

888 
rc
 = 
ph
[
r
->
pha£_h™dÀr
].
	`checkî
(r, &ph[r->phase_handler]);

890 i‡(
rc
 =
NGX_OK
) {

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

900 
ngx_öt_t
 
rc
;

907 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

908 "gíîi¯pha£: %ui", 
r
->
pha£_h™dÀr
);

910 
rc
 = 
ph
->
	`h™dÀr
(
r
);

912 i‡(
rc
 =
NGX_OK
) {

913 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

914  
NGX_AGAIN
;

917 i‡(
rc
 =
NGX_DECLINED
) {

918 
r
->
pha£_h™dÀr
++;

919  
NGX_AGAIN
;

922 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

923  
NGX_OK
;

928 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

930  
NGX_OK
;

931 
	}
}

934 
ngx_öt_t


935 
	$ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

937 
ngx_öt_t
 
rc
;

939 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

940 "ªwrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

942 
rc
 = 
ph
->
	`h™dÀr
(
r
);

944 i‡(
rc
 =
NGX_DECLINED
) {

945 
r
->
pha£_h™dÀr
++;

946  
NGX_AGAIN
;

949 i‡(
rc
 =
NGX_DONE
) {

950  
NGX_OK
;

955 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

957  
NGX_OK
;

958 
	}
}

961 
ngx_öt_t


962 
	$ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

963 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

965 
u_ch¨
 *
p
;

966 
size_t
 
Àn
;

967 
ngx_öt_t
 
rc
;

968 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

970 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

971 
r
->
uri_ch™ged
 = 0;

973 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

975 i‡(
rc
 =
NGX_ERROR
) {

976 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

977  
NGX_OK
;

980 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

982 i‡(!
r
->
öã∫Æ
 && 
˛cf
->internal) {

983 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

984  
NGX_OK
;

987 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

989 (
˛cf
->
n⁄ame
 ? "*" : (˛cf->
exa˘_m©ch
 ? "=" : "")),

990 &
˛cf
->
«me
);

992 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

994 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

996 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
, 
˛cf
->
˛õ¡_max_body_size
);

998 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

999 && !
r
->
disˇrd_body


1000 && 
˛cf
->
˛õ¡_max_body_size


1001 && 
˛cf
->
˛õ¡_max_body_size
 < 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
)

1003 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1005 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1007 
r
->
ex≥˘_ã°ed
 = 1;

1008 (Ë
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

1009 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
);

1010  
NGX_OK
;

1013 i‡(
rc
 =
NGX_DONE
) {

1014 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1016 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1017 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1018 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1019  
NGX_OK
;

1027 i‡(
r
->
¨gs
.
Àn
 == 0) {

1028 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
˛cf
->
«me
;

1031 
Àn
 = 
˛cf
->
«me
.À¿+ 1 + 
r
->
¨gs
.len;

1032 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1034 i‡(
p
 =
NULL
) {

1035 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1036  
NGX_OK
;

1039 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

1040 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

1042 
p
 = 
	`ngx_˝ymem
’, 
˛cf
->
«me
.
d©a
, clcf->«me.
Àn
);

1043 *
p
++ = '?';

1044 
	`ngx_mem˝y
(
p
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1047 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_MOVED_PERMANENTLY
);

1048  
NGX_OK
;

1051 
r
->
pha£_h™dÀr
++;

1052  
NGX_AGAIN
;

1053 
	}
}

1056 
ngx_öt_t


1057 
	$ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1058 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1060 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1062 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1063 "po°Ñewrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

1065 i‡(!
r
->
uri_ch™ged
) {

1066 
r
->
pha£_h™dÀr
++;

1067  
NGX_AGAIN
;

1070 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1071 "uròch™ges: %d", 
r
->
uri_ch™ges
);

1080 
r
->
uri_ch™ges
--;

1082 i‡(
r
->
uri_ch™ges
 == 0) {

1083 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1085 "whûê¥o˚ssög \"%V\"", &
r
->
uri
);

1087 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1088  
NGX_OK
;

1091 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1093 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1094 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1096  
NGX_AGAIN
;

1097 
	}
}

1100 
ngx_öt_t


1101 
	$ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1103 
ngx_öt_t
 
rc
;

1104 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1106 i‡(
r
 !r->
maö
) {

1107 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1108  
NGX_AGAIN
;

1111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1112 "ac˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1114 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1116 i‡(
rc
 =
NGX_DECLINED
) {

1117 
r
->
pha£_h™dÀr
++;

1118  
NGX_AGAIN
;

1121 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

1122  
NGX_OK
;

1125 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1127 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

1129 i‡(
rc
 =
NGX_OK
) {

1130 
r
->
pha£_h™dÀr
++;

1131  
NGX_AGAIN
;

1135 i‡(
rc
 =
NGX_OK
) {

1136 
r
->
ac˚ss_code
 = 0;

1138 i‡(
r
->
hódîs_out
.
www_authítiˇã
) {

1139 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 0;

1142 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1143  
NGX_AGAIN
;

1146 i‡(
rc
 =
NGX_HTTP_FORBIDDEN
 ||Ñ¯=
NGX_HTTP_UNAUTHORIZED
) {

1147 i‡(
r
->
ac˚ss_code
 !
NGX_HTTP_UNAUTHORIZED
) {

1148 
r
->
ac˚ss_code
 = 
rc
;

1151 
r
->
pha£_h™dÀr
++;

1152  
NGX_AGAIN
;

1158 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1159  
NGX_OK
;

1160 
	}
}

1163 
ngx_öt_t


1164 
	$ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1165 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1167 
ngx_öt_t
 
ac˚ss_code
;

1169 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1170 "po°ác˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1172 
ac˚ss_code
 = 
r
->access_code;

1174 i‡(
ac˚ss_code
) {

1175 i‡(
ac˚ss_code
 =
NGX_HTTP_FORBIDDEN
) {

1176 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1180 
r
->
ac˚ss_code
 = 0;

1181 
	`ngx_hâp_föÆize_ªque°
(
r
, 
ac˚ss_code
);

1182  
NGX_OK
;

1185 
r
->
pha£_h™dÀr
++;

1186  
NGX_AGAIN
;

1187 
	}
}

1190 
ngx_öt_t


1191 
	$ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1192 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1194 
size_t
 
Àn
, 
roŸ
, 
Æüs
, 
ª£rve
, 
Æloˇãd
;

1195 
u_ch¨
 *
p
, *
«me
;

1196 
ngx_°r_t
 
∑th
, 
¨gs
;

1197 
ngx_uöt_t
 
ã°_dú
;

1198 
ngx_hâp_åy_fûe_t
 *
tf
;

1199 
ngx_›í_fûe_öfo_t
 
of
;

1200 
ngx_hâp_s¸ùt_code_±
 
code
;

1201 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

1202 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1203 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1205 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1206 "åy fûe†pha£: %ui", 
r
->
pha£_h™dÀr
);

1208 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1210 i‡(
˛cf
->
åy_fûes
 =
NULL
) {

1211 
r
->
pha£_h™dÀr
++;

1212  
NGX_AGAIN
;

1215 
Æloˇãd
 = 0;

1216 
roŸ
 = 0;

1217 
«me
 = 
NULL
;

1219 
∑th
.
d©a
 = 
NULL
;

1221 
tf
 = 
˛cf
->
åy_fûes
;

1223 
Æüs
 = 
˛cf
->alias;

1227 i‡(
tf
->
Àngths
) {

1228 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1230 
e
.
ù
 = 
tf
->
Àngths
->
ñts
;

1231 
e
.
ªque°
 = 
r
;

1234 
Àn
 = 1;

1236 *(
uöçå_t
 *Ë
e
.
ù
) {

1237 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

1238 
Àn
 +
	`lcode
(&
e
);

1242 
Àn
 = 
tf
->
«me
.len;

1245 i‡(!
Æüs
) {

1246 
ª£rve
 = 
Àn
 > 
r
->
uri
.len ?Üen -Ñ->uri.len : 0;

1248 #i‡(
NGX_PCRE
)

1249 } i‡(
˛cf
->
ªgex
) {

1250 
ª£rve
 = 
Àn
;

1254 
ª£rve
 = 
Àn
 > 
r
->
uri
.À¿- 
Æüs
 ?Üen - (r->uri.len -álias) : 0;

1257 i‡(
ª£rve
 > 
Æloˇãd
 || !allocated) {

1260 
Æloˇãd
 = 
ª£rve
 + 16;

1262 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Æloˇãd
Ë=
NULL
) {

1263 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1264  
NGX_OK
;

1267 
«me
 = 
∑th
.
d©a
 + 
roŸ
;

1270 i‡(
tf
->
vÆues
 =
NULL
) {

1274 
	`ngx_mem˝y
(
«me
, 
tf
->«me.
d©a
,Åf->«me.
Àn
);

1276 
∑th
.
Àn
 = (
«me
 + 
tf
->«me.À¿- 1Ë-Ö©h.
d©a
;

1279 
e
.
ù
 = 
tf
->
vÆues
->
ñts
;

1280 
e
.
pos
 = 
«me
;

1281 
e
.
Êushed
 = 1;

1283 *(
uöçå_t
 *Ë
e
.
ù
) {

1284 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1285 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1288 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

1290 *
e
.
pos
 = '\0';

1292 i‡(
Æüs
 && 
	`ngx_°∫cmp
(
«me
, 
˛cf
->«me.
d©a
,álias) == 0) {

1293 
	`ngx_memmove
(
«me
,Çamê+ 
Æüs
, 
Àn
 -álias);

1294 
∑th
.
Àn
 -
Æüs
;

1298 
ã°_dú
 = 
tf
->test_dir;

1300 
tf
++;

1302 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1304 
ã°_dú
 ? "dú" : "fûe", 
«me
, 
∑th
.
d©a
);

1306 i‡(
tf
->
Àngths
 =
NULL
 &&Åf->
«me
.
Àn
 == 0) {

1308 i‡(
tf
->
code
) {

1309 
	`ngx_hâp_föÆize_ªque°
(
r
, 
tf
->
code
);

1310  
NGX_OK
;

1313 
∑th
.
Àn
 -
roŸ
;

1314 
∑th
.
d©a
 +
roŸ
;

1316 i‡(
∑th
.
d©a
[0] == '@') {

1317 (Ë
	`ngx_hâp_«med_loˇti⁄
(
r
, &
∑th
);

1320 
	`ngx_hâp_•lô_¨gs
(
r
, &
∑th
, &
¨gs
);

1322 (Ë
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
∑th
, &
¨gs
);

1325 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1326  
NGX_OK
;

1329 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1331 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1332 
of
.
dúe˘io
 = 
˛cf
->directio;

1333 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1334 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1335 
of
.
ã°_⁄ly
 = 1;

1336 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1337 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1339 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1340 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1341  
NGX_OK
;

1344 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1345 !
NGX_OK
)

1347 i‡(
of
.
îr
 !
NGX_ENOENT


1348 && 
of
.
îr
 !
NGX_ENOTDIR


1349 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1351 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1352 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

1358 i‡(
of
.
is_dú
 && !
ã°_dú
) {

1362 
∑th
.
Àn
 -
roŸ
;

1363 
∑th
.
d©a
 +
roŸ
;

1365 i‡(!
Æüs
) {

1366 
r
->
uri
 = 
∑th
;

1368 #i‡(
NGX_PCRE
)

1369 } i‡(
˛cf
->
ªgex
) {

1370 i‡(!
ã°_dú
) {

1371 
r
->
uri
 = 
∑th
;

1372 
r
->
add_uri_to_Æüs
 = 1;

1376 
r
->
uri
.
Àn
 = 
Æüs
 + 
∑th
.len;

1377 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
);

1378 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1379 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1380  
NGX_OK
;

1383 
p
 = 
	`ngx_c›y
(
r
->
uri
.
d©a
, 
˛cf
->
«me
.d©a, 
Æüs
);

1384 
	`ngx_mem˝y
(
p
, 
«me
, 
∑th
.
Àn
);

1387 
	`ngx_hâp_£t_exãn
(
r
);

1389 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1390 "åy fûêuri: \"%V\"", &
r
->
uri
);

1392 
r
->
pha£_h™dÀr
++;

1393  
NGX_AGAIN
;

1397 
	}
}

1400 
ngx_öt_t


1401 
	$ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1402 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1404 
size_t
 
roŸ
;

1405 
ngx_öt_t
 
rc
;

1406 
ngx_°r_t
 
∑th
;

1408 i‡(
r
->
c⁄ã¡_h™dÀr
) {

1409 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

1410 
	`ngx_hâp_föÆize_ªque°
(
r
,Ñ->
	`c⁄ã¡_h™dÀr
(r));

1411  
NGX_OK
;

1414 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1415 "c⁄ã¡Öha£: %ui", 
r
->
pha£_h™dÀr
);

1417 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1419 i‡(
rc
 !
NGX_DECLINED
) {

1420 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1421  
NGX_OK
;

1426 
ph
++;

1428 i‡(
ph
->
checkî
) {

1429 
r
->
pha£_h™dÀr
++;

1430  
NGX_AGAIN
;

1435 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

1437 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë!
NULL
) {

1438 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1439 "dúe˘‹y index o‡\"%s\" i†f‹biddí", 
∑th
.
d©a
);

1442 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_FORBIDDEN
);

1443  
NGX_OK
;

1446 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "no handler found");

1448 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1449  
NGX_OK
;

1450 
	}
}

1454 
	$ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
)

1456 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1458 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1460 i‡(
r
->
mëhod
 & 
˛cf
->
limô_ex˚±
) {

1461 
r
->
loc_c⁄f
 = 
˛cf
->
limô_ex˚±_loc_c⁄f
;

1462 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1465 i‡(
r
 =r->
maö
) {

1466 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

1469 i‡((
ngx_io
.
Êags
 & 
NGX_IO_SENDFILE
Ë&& 
˛cf
->
£ndfûe
) {

1470 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 1;

1473 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 0;

1476 i‡(
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
) {

1477 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

1478 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

1479 
r
->
ªque°_body_ö_˛ón_fûe
 =

1480 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 =
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
;

1481 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_NOTICE
;

1484 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_WARN
;

1487 
r
->
ªque°_body_ö_sögÀ_buf
 = 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
;

1489 i‡(
r
->
kì∑live
) {

1490 i‡(
˛cf
->
kì∑live_timeout
 == 0) {

1491 
r
->
kì∑live
 = 0;

1493 } i‡(
r
->
c⁄√˘i⁄
->
ªque°s
 >
˛cf
->
kì∑live_ªque°s
) {

1494 
r
->
kì∑live
 = 0;

1496 } i‡(
r
->
hódîs_ö
.
msõ6


1497 && 
r
->
mëhod
 =
NGX_HTTP_POST


1498 && (
˛cf
->
kì∑live_dißbÀ


1499 & 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
))

1505 
r
->
kì∑live
 = 0;

1507 } i‡(
r
->
hódîs_ö
.
ßÁri


1508 && (
˛cf
->
kì∑live_dißbÀ


1509 & 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
))

1516 
r
->
kì∑live
 = 0;

1520 i‡(!
˛cf
->
t˝_n›ush
) {

1522 
r
->
c⁄√˘i⁄
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

1525 i‡(
r
->
limô_øã
 == 0) {

1526 
r
->
limô_øã
 = 
˛cf
->limit_rate;

1529 i‡(
˛cf
->
h™dÀr
) {

1530 
r
->
c⁄ã¡_h™dÀr
 = 
˛cf
->
h™dÀr
;

1532 
	}
}

1543 
ngx_öt_t


1544 
	$ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
)

1546 
ngx_öt_t
 
rc
;

1547 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
;

1548 #i‡(
NGX_PCRE
)

1549 
ngx_öt_t
 
n
;

1550 
ngx_uöt_t
 
n‹egex
;

1551 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, **
˛cÂ
;

1553 
n‹egex
 = 0;

1556 
p˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1558 
rc
 = 
	`ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
r
, 
p˛cf
->
°©ic_loˇti⁄s
);

1560 i‡(
rc
 =
NGX_AGAIN
) {

1562 #i‡(
NGX_PCRE
)

1563 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1565 
n‹egex
 = 
˛cf
->noregex;

1570 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1573 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_DONE
) {

1574  
rc
;

1579 #i‡(
NGX_PCRE
)

1581 i‡(
n‹egex
 =0 && 
p˛cf
->
ªgex_loˇti⁄s
) {

1583 
˛cÂ
 = 
p˛cf
->
ªgex_loˇti⁄s
; *clcfp; clcfp++) {

1585 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1586 "ã°Üoˇti⁄: ~ \"%V\"", &(*
˛cÂ
)->
«me
);

1588 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, (*
˛cÂ
)->
ªgex
, &r->
uri
);

1590 i‡(
n
 =
NGX_OK
) {

1591 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

1595 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1597  (
rc
 =
NGX_ERROR
Ë?Ñ¯: 
NGX_OK
;

1600 i‡(
n
 =
NGX_DECLINED
) {

1604  
NGX_ERROR
;

1609  
rc
;

1610 
	}
}

1620 
ngx_öt_t


1621 
	$ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1622 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
)

1624 
u_ch¨
 *
uri
;

1625 
size_t
 
Àn
, 
n
;

1626 
ngx_öt_t
 
rc
, 
rv
;

1628 
Àn
 = 
r
->
uri
.len;

1629 
uri
 = 
r
->uri.
d©a
;

1631 
rv
 = 
NGX_DECLINED
;

1635 i‡(
node
 =
NULL
) {

1636  
rv
;

1639 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1640 "ã°Üoˇti⁄: \"%*s\"", 
node
->
Àn
,Çode->
«me
);

1642 
n
 = (
Àn
 <(
size_t
Ë
node
->len) ?Üen :Çode->len;

1644 
rc
 = 
	`ngx_fûíame_cmp
(
uri
, 
node
->
«me
, 
n
);

1646 i‡(
rc
 != 0) {

1647 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1652 i‡(
Àn
 > (
size_t
Ë
node
->len) {

1654 i‡(
node
->
ö˛usive
) {

1656 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1657 
rv
 = 
NGX_AGAIN
;

1659 
node
 =Çode->
åì
;

1660 
uri
 +
n
;

1661 
Àn
 -
n
;

1668 
node
 =Çode->
right
;

1673 i‡(
Àn
 =(
size_t
Ë
node
->len) {

1675 i‡(
node
->
exa˘
) {

1676 
r
->
loc_c⁄f
 = 
node
->
exa˘
->loc_conf;

1677  
NGX_OK
;

1680 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1681  
NGX_AGAIN
;

1687 i‡(
Àn
 + 1 =(
size_t
Ë
node
->À¿&&Çode->
auto_ªdúe˘
) {

1689 
r
->
loc_c⁄f
 = (
node
->
exa˘
) ?Çode->exact->loc_conf:

1690 
node
->
ö˛usive
->
loc_c⁄f
;

1691 
rv
 = 
NGX_DONE
;

1694 
node
 =Çode->
À·
;

1696 
	}
}

1700 
	$ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
)

1702 
u_ch¨
 
c
, *
lowˇ£
;

1703 
size_t
 
Àn
;

1704 
ngx_uöt_t
 
i
, 
hash
;

1706 i‡(
ty≥s_hash
->
size
 == 0) {

1710 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

1711  
NULL
;

1714 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

1716 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 =
NULL
) {

1718 
lowˇ£
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1719 i‡(
lowˇ£
 =
NULL
) {

1720  
NULL
;

1723 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
lowˇ£
;

1725 
hash
 = 0;

1727 
i
 = 0; i < 
Àn
; i++) {

1728 
c
 = 
	`ngx_tﬁowî
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
[
i
]);

1729 
hash
 = 
	`ngx_hash
(hash, 
c
);

1730 
lowˇ£
[
i
] = 
c
;

1733 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
 = 
hash
;

1736  
	`ngx_hash_föd
(
ty≥s_hash
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
,

1737 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
, 
Àn
);

1738 
	}
}

1741 
ngx_öt_t


1742 
	$ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
)

1744 
u_ch¨
 
c
, *
exãn
;

1745 
ngx_°r_t
 *
ty≥
;

1746 
ngx_uöt_t
 
i
, 
hash
;

1747 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1749 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1750  
NGX_OK
;

1753 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1755 i‡(
r
->
exãn
.
Àn
) {

1757 
hash
 = 0;

1759 
i
 = 0; i < 
r
->
exãn
.
Àn
; i++) {

1760 
c
 = 
r
->
exãn
.
d©a
[
i
];

1762 i‡(
c
 >= 'A' && c <= 'Z') {

1764 
exãn
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->exãn.
Àn
);

1765 i‡(
exãn
 =
NULL
) {

1766  
NGX_ERROR
;

1769 
hash
 = 
	`ngx_hash_°æow
(
exãn
, 
r
->exãn.
d©a
,Ñ->exãn.
Àn
);

1771 
r
->
exãn
.
d©a
 =Éxten;

1776 
hash
 = 
	`ngx_hash
(hash, 
c
);

1779 
ty≥
 = 
	`ngx_hash_föd
(&
˛cf
->
ty≥s_hash
, 
hash
,

1780 
r
->
exãn
.
d©a
,Ñ->exãn.
Àn
);

1782 i‡(
ty≥
) {

1783 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
ty≥
->
Àn
;

1784 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
ty≥
;

1786  
NGX_OK
;

1790 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˛cf
->
deÁu…_ty≥
.
Àn
;

1791 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
˛cf
->
deÁu…_ty≥
;

1793  
NGX_OK
;

1794 
	}
}

1798 
	$ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
)

1800 
ngx_öt_t
 
i
;

1802 
	`ngx_°r_nuŒ
(&
r
->
exãn
);

1804 
i
 = 
r
->
uri
.
Àn
 - 1; i > 1; i--) {

1805 i‡(
r
->
uri
.
d©a
[
i
] == '.' &&Ñ->uri.data[i - 1] != '/') {

1807 
r
->
exãn
.
Àn
 =Ñ->
uri
.À¿- 
i
 - 1;

1808 
r
->
exãn
.
d©a
 = &r->
uri
.d©a[
i
 + 1];

1812 } i‡(
r
->
uri
.
d©a
[
i
] == '/') {

1818 
	}
}

1821 
ngx_öt_t


1822 
	$ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
)

1824 
ngx_èbÀ_ñt_t
 *
ëag
;

1825 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1827 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1829 i‡(!
˛cf
->
ëag
) {

1830  
NGX_OK
;

1833 
ëag
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1834 i‡(
ëag
 =
NULL
) {

1835  
NGX_ERROR
;

1838 
ëag
->
hash
 = 1;

1839 
	`ngx_°r_£t
(&
ëag
->
key
, "ETag");

1841 
ëag
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
 + 
NGX_TIME_T_LEN
 + 3);

1842 i‡(
ëag
->
vÆue
.
d©a
 =
NULL
) {

1843  
NGX_ERROR
;

1846 
ëag
->
vÆue
.
Àn
 = 
	`ngx_•rötf
”èg->vÆue.
d©a
, "\"%xT-%xO\"",

1847 
r
->
hódîs_out
.
œ°_modifõd_time
,

1848 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

1849 - 
ëag
->
vÆue
.
d©a
;

1851 
r
->
hódîs_out
.
ëag
 =Étag;

1853  
NGX_OK
;

1854 
	}
}

1857 
ngx_öt_t


1858 
	$ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

1859 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
)

1861 
ngx_öt_t
 
rc
;

1862 
ngx_°r_t
 
vÆ
;

1863 
ngx_buf_t
 *
b
;

1864 
ngx_chaö_t
 
out
;

1866 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

1867  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1870 
r
->
hódîs_out
.
°©us
 = status;

1872 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1873  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1876 i‡(
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


1877 || 
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY


1878 || 
°©us
 =
NGX_HTTP_SEE_OTHER


1879 || 
°©us
 =
NGX_HTTP_TEMPORARY_REDIRECT
)

1881 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1883 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1884 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1885  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1888 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1889 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1890 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
vÆ
;

1892  
°©us
;

1895 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
vÆ
.
Àn
;

1897 i‡(
˘
) {

1898 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

1899 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

1902 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

1903  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1907 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
 || (∏!r->
maö
 && 
vÆ
.
Àn
 == 0)) {

1908  
	`ngx_hâp_£nd_hódî
(
r
);

1911 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1912 i‡(
b
 =
NULL
) {

1913  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1916 
b
->
pos
 = 
vÆ
.
d©a
;

1917 
b
->
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

1918 
b
->
mem‹y
 = 
vÆ
.
Àn
 ? 1 : 0;

1919 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

1920 
b
->
œ°_ö_chaö
 = 1;

1922 
out
.
buf
 = 
b
;

1923 
out
.
√xt
 = 
NULL
;

1925 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1927 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1928  
rc
;

1931  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1932 
	}
}

1935 
ngx_öt_t


1936 
	$ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1938 i‡(
r
->
hódî_£¡
) {

1939 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1941  
NGX_ERROR
;

1944 i‡(
r
->
îr_°©us
) {

1945 
r
->
hódîs_out
.
°©us
 =Ñ->
îr_°©us
;

1946 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

1949  
	`ngx_hâp_t›_hódî_fûãr
(
r
);

1950 
	}
}

1953 
ngx_öt_t


1954 
	$ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1956 
ngx_öt_t
 
rc
;

1957 
ngx_c⁄√˘i⁄_t
 *
c
;

1959 
c
 = 
r
->
c⁄√˘i⁄
;

1961 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1962 "hâ∞ouçuàfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1964 
rc
 = 
	`ngx_hâp_t›_body_fûãr
(
r
, 
ö
);

1966 i‡(
rc
 =
NGX_ERROR
) {

1968 
c
->
îr‹
 = 1;

1971  
rc
;

1972 
	}
}

1975 
u_ch¨
 *

1976 
	$ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
,

1977 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
)

1979 
u_ch¨
 *
œ°
;

1980 
size_t
 
Æüs
;

1981 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1983 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1985 
Æüs
 = 
˛cf
->alias;

1987 i‡(
Æüs
 && !
r
->
vÆid_loˇti⁄
) {

1988 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1990 "whîêURI wa†ªwrôãn", &
˛cf
->
«me
);

1991  
NULL
;

1994 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1996 *
roŸ_Àngth
 = 
˛cf
->
roŸ
.
Àn
;

1998 
∑th
->
Àn
 = 
˛cf
->
roŸ
.À¿+ 
ª£rved
 + 
r
->
uri
.À¿- 
Æüs
 + 1;

2000 
∑th
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ö©h->
Àn
);

2001 i‡(
∑th
->
d©a
 =
NULL
) {

2002  
NULL
;

2005 
œ°
 = 
	`ngx_c›y
(
∑th
->
d©a
, 
˛cf
->
roŸ
.d©a, clcf->roŸ.
Àn
);

2009 #i‡(
NGX_PCRE
)

2010 
ngx_uöt_t
 
ˇ±uªs
;

2012 
ˇ±uªs
 = 
Æüs
 && 
˛cf
->
ªgex
;

2014 
ª£rved
 +
ˇ±uªs
 ? 
r
->
add_uri_to_Æüs
 ?Ñ->
uri
.
Àn
 + 1 : 1

2015 : 
r
->
uri
.
Àn
 - 
Æüs
 + 1;

2017 
ª£rved
 +
r
->
uri
.
Àn
 - 
Æüs
 + 1;

2020 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, 
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 
ª£rved
,

2021 
˛cf
->
roŸ_vÆues
->
ñts
)

2022 =
NULL
)

2024  
NULL
;

2027 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, 
∑th
)

2028 !
NGX_OK
)

2030  
NULL
;

2033 *
roŸ_Àngth
 = 
∑th
->
Àn
 - 
ª£rved
;

2034 
œ°
 = 
∑th
->
d©a
 + *
roŸ_Àngth
;

2036 #i‡(
NGX_PCRE
)

2037 i‡(
ˇ±uªs
) {

2038 i‡(!
r
->
add_uri_to_Æüs
) {

2039 *
œ°
 = '\0';

2040  
œ°
;

2043 
Æüs
 = 0;

2048 
œ°
 = 
	`ngx_˝y°∫
÷a°, 
r
->
uri
.
d©a
 + 
Æüs
,Ñ->uri.
Àn
 -álias + 1);

2050  
œ°
;

2051 
	}
}

2054 
ngx_öt_t


2055 
	$ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
)

2057 
ngx_°r_t
 
auth
, 
ícoded
;

2058 
ngx_uöt_t
 
Àn
;

2060 i‡(
r
->
hódîs_ö
.
u£r
.
Àn
 =0 &&Ñ->hódîs_ö.u£r.
d©a
 !
NULL
) {

2061  
NGX_DECLINED
;

2064 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 =
NULL
) {

2065 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2066  
NGX_DECLINED
;

2069 
ícoded
 = 
r
->
hódîs_ö
.
auth‹iz©i⁄
->
vÆue
;

2071 i‡(
ícoded
.
Àn
 < ("Basic ") - 1

2072 || 
	`ngx_°∫ˇ£cmp
(
ícoded
.
d©a
, (
u_ch¨
 *) "Basic ",

2076 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2077  
NGX_DECLINED
;

2080 
ícoded
.
Àn
 -= ("Basic ") - 1;

2081 
ícoded
.
d©a
 += ("Basic ") - 1;

2083 
ícoded
.
Àn
 &&Éncoded.
d©a
[0] == ' ') {

2084 
ícoded
.
Àn
--;

2085 
ícoded
.
d©a
++;

2088 i‡(
ícoded
.
Àn
 == 0) {

2089 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2090  
NGX_DECLINED
;

2093 
auth
.
Àn
 = 
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len);

2094 
auth
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,áuth.
Àn
 + 1);

2095 i‡(
auth
.
d©a
 =
NULL
) {

2096  
NGX_ERROR
;

2099 i‡(
	`ngx_decode_ba£64
(&
auth
, &
ícoded
Ë!
NGX_OK
) {

2100 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2101  
NGX_DECLINED
;

2104 
auth
.
d©a
[auth.
Àn
] = '\0';

2106 
Àn
 = 0;Üí < 
auth
.len;Üen++) {

2107 i‡(
auth
.
d©a
[
Àn
] == ':') {

2112 i‡(
Àn
 =0 ||Üí =
auth
.len) {

2113 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2114  
NGX_DECLINED
;

2117 
r
->
hódîs_ö
.
u£r
.
Àn
 =Üen;

2118 
r
->
hódîs_ö
.
u£r
.
d©a
 = 
auth
.data;

2119 
r
->
hódîs_ö
.
∑sswd
.
Àn
 = 
auth
.len -Üen - 1;

2120 
r
->
hódîs_ö
.
∑sswd
.
d©a
 = &
auth
.d©a[
Àn
 + 1];

2122  
NGX_OK
;

2123 
	}
}

2126 #i‡(
NGX_HTTP_GZIP
)

2128 
ngx_öt_t


2129 
	$ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
)

2131 
time_t
 
d©e
, 
expúes
;

2132 
ngx_uöt_t
 
p
;

2133 
ngx_¨øy_t
 *
cc
;

2134 
ngx_èbÀ_ñt_t
 *
e
, *
d
, *
´
;

2135 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2137 
r
->
gzù_ã°ed
 = 1;

2139 i‡(
r
 !r->
maö
) {

2140  
NGX_DECLINED
;

2143 #i‡(
NGX_HTTP_SPDY
)

2144 i‡(
r
->
•dy_°ªam
) {

2145 
r
->
gzù_ok
 = 1;

2146  
NGX_OK
;

2150 
´
 = 
r
->
hódîs_ö
.
ac˚±_ícodög
;

2151 i‡(
´
 =
NULL
) {

2152  
NGX_DECLINED
;

2155 i‡(
´
->
vÆue
.
Àn
 < ("gzip") - 1) {

2156  
NGX_DECLINED
;

2168 i‡(
	`ngx_memcmp
(
´
->
vÆue
.
d©a
, "gzip,", 5) != 0

2169 && 
	`ngx_hâp_gzù_ac˚±_ícodög
(&
´
->
vÆue
Ë!
NGX_OK
)

2171  
NGX_DECLINED
;

2174 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2176 i‡(
r
->
hódîs_ö
.
msõ6
 && 
˛cf
->
gzù_dißbÀ_msõ6
) {

2177  
NGX_DECLINED
;

2180 i‡(
r
->
hâp_vîsi⁄
 < 
˛cf
->
gzù_hâp_vîsi⁄
) {

2181  
NGX_DECLINED
;

2184 i‡(
r
->
hódîs_ö
.
vü
 =
NULL
) {

2185 
ok
;

2188 
p
 = 
˛cf
->
gzù_¥oxõd
;

2190 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_OFF
) {

2191  
NGX_DECLINED
;

2194 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_ANY
) {

2195 
ok
;

2198 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 && (
p
 & 
NGX_HTTP_GZIP_PROXIED_AUTH
)) {

2199 
ok
;

2202 
e
 = 
r
->
hódîs_out
.
expúes
;

2204 i‡(
e
) {

2206 i‡(!(
p
 & 
NGX_HTTP_GZIP_PROXIED_EXPIRED
)) {

2207  
NGX_DECLINED
;

2210 
expúes
 = 
	`ngx_hâp_∑r£_time
(
e
->
vÆue
.
d©a
,É->vÆue.
Àn
);

2211 i‡(
expúes
 =
NGX_ERROR
) {

2212  
NGX_DECLINED
;

2215 
d
 = 
r
->
hódîs_out
.
d©e
;

2217 i‡(
d
) {

2218 
d©e
 = 
	`ngx_hâp_∑r£_time
(
d
->
vÆue
.
d©a
, d->vÆue.
Àn
);

2219 i‡(
d©e
 =
NGX_ERROR
) {

2220  
NGX_DECLINED
;

2224 
d©e
 = 
	`ngx_time
();

2227 i‡(
expúes
 < 
d©e
) {

2228 
ok
;

2231  
NGX_DECLINED
;

2234 
cc
 = &
r
->
hódîs_out
.
ˇche_c⁄åﬁ
;

2236 i‡(
cc
->
ñts
) {

2238 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
)

2239 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_ˇche
,

2240 
NULL
)

2243 
ok
;

2246 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_STORE
)

2247 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_°‹e
,

2248 
NULL
)

2251 
ok
;

2254 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_PRIVATE
)

2255 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_¥iv©e
,

2256 
NULL
)

2259 
ok
;

2262  
NGX_DECLINED
;

2265 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_LM
Ë&& 
r
->
hódîs_out
.
œ°_modifõd
) {

2266  
NGX_DECLINED
;

2269 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
Ë&& 
r
->
hódîs_out
.
ëag
) {

2270  
NGX_DECLINED
;

2273 
ok
:

2275 #i‡(
NGX_PCRE
)

2277 i‡(
˛cf
->
gzù_dißbÀ
 && 
r
->
hódîs_ö
.
u£r_agít
) {

2279 i‡(
	`ngx_ªgex_exec_¨øy
(
˛cf
->
gzù_dißbÀ
,

2280 &
r
->
hódîs_ö
.
u£r_agít
->
vÆue
,

2281 
r
->
c⁄√˘i⁄
->
log
)

2282 !
NGX_DECLINED
)

2284  
NGX_DECLINED
;

2290 
r
->
gzù_ok
 = 1;

2292  
NGX_OK
;

2293 
	}
}

2303 
ngx_öt_t


2304 
	$ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
)

2306 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

2308 
°¨t
 = 
´
->
d©a
;

2309 
œ°
 = 
°¨t
 + 
´
->
Àn
;

2312 
p
 = 
	`ngx_°rˇ£°∫
(
°¨t
, "gzip", 4 - 1);

2313 i‡(
p
 =
NULL
) {

2314  
NGX_DECLINED
;

2317 i‡(
p
 =
°¨t
 || (*(p - 1) == ',' || *(p - 1) == ' ')) {

2321 
°¨t
 = 
p
 + 4;

2324 
p
 += 4;

2326 
p
 < 
œ°
) {

2327 *
p
++) {

2329  
NGX_OK
;

2331 
qu™tôy
;

2335  
NGX_DECLINED
;

2339  
NGX_OK
;

2341 
qu™tôy
:

2343 
p
 < 
œ°
) {

2344 *
p
++) {

2347 
equÆ
;

2351  
NGX_DECLINED
;

2355  
NGX_OK
;

2357 
equÆ
:

2359 i‡(
p
 + 2 > 
œ°
 || *p++ != '=') {

2360  
NGX_DECLINED
;

2363 i‡(
	`ngx_hâp_gzù_qu™tôy
(
p
, 
œ°
) == 0) {

2364  
NGX_DECLINED
;

2367  
NGX_OK
;

2368 
	}
}

2371 
ngx_uöt_t


2372 
	$ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
)

2374 
u_ch¨
 
c
;

2375 
ngx_uöt_t
 
n
, 
q
;

2377 
c
 = *
p
++;

2379 i‡(
c
 != '0' && c != '1') {

2383 
q
 = (
c
 - '0') * 100;

2385 i‡(
p
 =
œ°
) {

2386  
q
;

2389 
c
 = *
p
++;

2391 i‡(
c
 == ',' || c == ' ') {

2392  
q
;

2395 i‡(
c
 != '.') {

2399 
n
 = 0;

2401 
p
 < 
œ°
) {

2402 
c
 = *
p
++;

2404 i‡(
c
 == ',' || c == ' ') {

2408 i‡(
c
 >= '0' && c <= '9') {

2409 
q
 +
c
 - '0';

2410 
n
++;

2417 i‡(
q
 > 100 || 
n
 > 3) {

2421  
q
;

2422 
	}
}

2427 
ngx_öt_t


2428 
	$ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

2429 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
p§
,

2430 
ngx_hâp_po°_subªque°_t
 *
ps
, 
ngx_uöt_t
 
Êags
)

2432 
ngx_time_t
 *
ç
;

2433 
ngx_c⁄√˘i⁄_t
 *
c
;

2434 
ngx_hâp_ªque°_t
 *
§
;

2435 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2436 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, *
p
;

2438 
r
->
maö
->
subªque°s
--;

2440 i‡(
r
->
maö
->
subªque°s
 == 0) {

2441 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2442 "subªque°†cy˛êwhûê¥o˚ssög \"%V\"", 
uri
);

2443 
r
->
maö
->
subªque°s
 = 1;

2444  
NGX_ERROR
;

2447 
§
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_t
));

2448 i‡(
§
 =
NULL
) {

2449  
NGX_ERROR
;

2452 
§
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

2454 
c
 = 
r
->
c⁄√˘i⁄
;

2455 
§
->
c⁄√˘i⁄
 = 
c
;

2457 
§
->
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2458 i‡(
§
->
˘x
 =
NULL
) {

2459  
NGX_ERROR
;

2462 i‡(
	`ngx_li°_öô
(&
§
->
hódîs_out
.
hódîs
, 
r
->
poﬁ
, 20,

2463 (
ngx_èbÀ_ñt_t
))

2464 !
NGX_OK
)

2466  
NGX_ERROR
;

2469 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2470 
§
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

2471 
§
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2472 
§
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2474 
§
->
poﬁ
 = 
r
->pool;

2476 
§
->
hódîs_ö
 = 
r
->headers_in;

2478 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
§
);

2479 
	`ngx_hâp_˛ór_ac˚±_ønges
(
§
);

2480 
	`ngx_hâp_˛ór_œ°_modifõd
(
§
);

2482 
§
->
ªque°_body
 = 
r
->request_body;

2484 #i‡(
NGX_HTTP_SPDY
)

2485 
§
->
•dy_°ªam
 = 
r
->spdy_stream;

2488 
§
->
mëhod
 = 
NGX_HTTP_GET
;

2489 
§
->
hâp_vîsi⁄
 = 
r
->http_version;

2491 
§
->
ªque°_löe
 = 
r
->request_line;

2492 
§
->
uri
 = *uri;

2494 i‡(
¨gs
) {

2495 
§
->
¨gs
 = *args;

2498 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2499 "hâ∞subªque° \"%V?%V\"", 
uri
, &
§
->
¨gs
);

2501 
§
->
subªque°_ö_mem‹y
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_IN_MEMORY
) != 0;

2502 
§
->
waôed
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_WAITED
) != 0;

2504 
§
->
u≈¨£d_uri
 = 
r
->unparsed_uri;

2505 
§
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2506 
§
->
hâp_¥Ÿocﬁ
 = 
r
->http_protocol;

2508 
	`ngx_hâp_£t_exãn
(
§
);

2510 
§
->
maö
 = 
r
->main;

2511 
§
->
∑ª¡
 = 
r
;

2512 
§
->
po°_subªque°
 = 
ps
;

2513 
§
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2514 
§
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_h™dÀr
;

2516 i‡(
c
->
d©a
 =
r
 &&Ñ->
po°p⁄ed
 =
NULL
) {

2517 
c
->
d©a
 = 
§
;

2520 
§
->
v¨übÀs
 = 
r
->variables;

2522 
§
->
log_h™dÀr
 = 
r
->log_handler;

2524 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

2525 i‡(
¥
 =
NULL
) {

2526  
NGX_ERROR
;

2529 
¥
->
ªque°
 = 
§
;

2530 
¥
->
out
 = 
NULL
;

2531 
¥
->
√xt
 = 
NULL
;

2533 i‡(
r
->
po°p⁄ed
) {

2534 
p
 = 
r
->
po°p⁄ed
;Ö->
√xt
;Ö =Ö->next) { }

2535 
p
->
√xt
 = 
¥
;

2538 
r
->
po°p⁄ed
 = 
¥
;

2541 
§
->
öã∫Æ
 = 1;

2543 
§
->
disˇrd_body
 = 
r
->discard_body;

2544 
§
->
ex≥˘_ã°ed
 = 1;

2545 
§
->
maö_fûãr_√ed_ö_mem‹y
 = 
r
->main_filter_need_in_memory;

2547 
§
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

2549 
ç
 = 
	`ngx_timeofday
();

2550 
§
->
°¨t_£c
 = 
ç
->
£c
;

2551 
§
->
°¨t_m£c
 = 
ç
->
m£c
;

2553 
r
->
maö
->
cou¡
++;

2555 *
p§
 = 
§
;

2557  
	`ngx_hâp_po°_ªque°
(
§
, 
NULL
);

2558 
	}
}

2561 
ngx_öt_t


2562 
	$ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

2563 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2565 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2567 
r
->
uri_ch™ges
--;

2569 i‡(
r
->
uri_ch™ges
 == 0) {

2570 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2572 "whûêöã∫ÆlyÑedúe˘ögÅÿ\"%V\"", 
uri
);

2574 
r
->
maö
->
cou¡
++;

2575 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2576  
NGX_DONE
;

2579 
r
->
uri
 = *uri;

2581 i‡(
¨gs
) {

2582 
r
->
¨gs
 = *args;

2585 
	`ngx_°r_nuŒ
(&
r
->
¨gs
);

2588 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2589 "öã∫ÆÑedúe˘: \"%V?%V\"", 
uri
, &
r
->
¨gs
);

2591 
	`ngx_hâp_£t_exãn
(
r
);

2594 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2596 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2597 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2599 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2601 #i‡(
NGX_HTTP_CACHE
)

2602 
r
->
ˇche
 = 
NULL
;

2605 
r
->
öã∫Æ
 = 1;

2606 
r
->
vÆid_u≈¨£d_uri
 = 0;

2607 
r
->
add_uri_to_Æüs
 = 0;

2608 
r
->
maö
->
cou¡
++;

2610 
	`ngx_hâp_h™dÀr
(
r
);

2612  
NGX_DONE
;

2613 
	}
}

2616 
ngx_öt_t


2617 
	$ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

2619 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2620 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

2621 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2623 
r
->
maö
->
cou¡
++;

2624 
r
->
uri_ch™ges
--;

2626 i‡(
r
->
uri_ch™ges
 == 0) {

2627 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2629 "whûêªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2631 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2632  
NGX_DONE
;

2635 i‡(
r
->
uri
.
Àn
 == 0) {

2636 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2637 "em±y URI i¿ªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2639 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2640  
NGX_DONE
;

2643 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2645 i‡(
cscf
->
«med_loˇti⁄s
) {

2647 
˛cÂ
 = 
cscf
->
«med_loˇti⁄s
; *clcfp; clcfp++) {

2649 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2650 "ã°Üoˇti⁄: \"%V\"", &(*
˛cÂ
)->
«me
);

2652 i‡(
«me
->
Àn
 !(*
˛cÂ
)->name.len

2653 || 
	`ngx_°∫cmp
(
«me
->
d©a
, (*
˛cÂ
)->«me.d©a,Çame->
Àn
) != 0)

2658 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2660 
«me
, &
r
->
uri
, &r->
¨gs
);

2662 
r
->
öã∫Æ
 = 1;

2663 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2664 
r
->
uri_ch™ged
 = 0;

2665 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

2668 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2670 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2672 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2674 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

2676 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2677 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2679  
NGX_DONE
;

2683 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2684 "couldÇŸ födÇamedÜoˇti⁄ \"%V\"", 
«me
);

2686 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2688  
NGX_DONE
;

2689 
	}
}

2692 
ngx_hâp_˛ónup_t
 *

2693 
	$ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
)

2695 
ngx_hâp_˛ónup_t
 *
˛n
;

2697 
r
 =Ñ->
maö
;

2699 
˛n
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_˛ónup_t
));

2700 i‡(
˛n
 =
NULL
) {

2701  
NULL
;

2704 i‡(
size
) {

2705 
˛n
->
d©a
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
size
);

2706 i‡(
˛n
->
d©a
 =
NULL
) {

2707  
NULL
;

2711 
˛n
->
d©a
 = 
NULL
;

2714 
˛n
->
h™dÀr
 = 
NULL
;

2715 
˛n
->
√xt
 = 
r
->
˛ónup
;

2717 
r
->
˛ónup
 = 
˛n
;

2719 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2720 "hâ∞˛ónu∞add: %p", 
˛n
);

2722  
˛n
;

2723 
	}
}

2726 
ngx_öt_t


2727 
	$ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

2728 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
)

2730 #i‡(
NGX_HAVE_OPENAT
)

2731 
u_ch¨
 *
p
;

2732 
ngx_°r_t
 
‰om
;

2734 
of
->
dißbÀ_symlöks
 = 
˛cf
->disable_symlinks;

2736 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NULL
) {

2737  
NGX_OK
;

2740 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
dißbÀ_symlöks_‰om
, &
‰om
)

2741 !
NGX_OK
)

2743  
NGX_ERROR
;

2746 i‡(
‰om
.
Àn
 == 0

2747 || 
‰om
.
Àn
 > 
∑th
->len

2748 || 
	`ngx_memcmp
(
∑th
->
d©a
, 
‰om
.d©a, from.
Àn
) != 0)

2750  
NGX_OK
;

2753 i‡(
‰om
.
Àn
 =
∑th
->len) {

2754 
of
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

2755  
NGX_OK
;

2758 
p
 = 
∑th
->
d©a
 + 
‰om
.
Àn
;

2760 i‡(*
p
 == '/') {

2761 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
;

2762  
NGX_OK
;

2765 
p
--;

2767 i‡(*
p
 == '/') {

2768 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
 - 1;

2772  
NGX_OK
;

2773 
	}
}

2776 
ngx_öt_t


2777 
	$ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2778 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

2779 
ªcursive
)

2781 
ngx_öt_t
 
rc
;

2782 
ngx_uöt_t
 
i
, 
found
;

2783 
ngx_èbÀ_ñt_t
 **
h
;

2785 i‡(
hódîs
 =
NULL
) {

2786  
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
vÆue
->
d©a
,

2787 
vÆue
->
Àn
, 
¥oxõs
,

2788 
ªcursive
);

2791 
i
 = 
hódîs
->
√…s
;

2792 
h
 = 
hódîs
->
ñts
;

2794 
rc
 = 
NGX_DECLINED
;

2796 
found
 = 0;

2798 
i
-- > 0) {

2799 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
h
[
i
]->
vÆue
.
d©a
,

2800 
h
[
i
]->
vÆue
.
Àn
, 
¥oxõs
,

2801 
ªcursive
);

2803 i‡(!
ªcursive
) {

2807 i‡(
rc
 =
NGX_DECLINED
 && 
found
) {

2808 
rc
 = 
NGX_DONE
;

2812 i‡(
rc
 !
NGX_OK
) {

2816 
found
 = 1;

2819  
rc
;

2820 
	}
}

2823 
ngx_öt_t


2824 
	$ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2825 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
, 
ªcursive
)

2827 
u_ch¨
 *
p
;

2828 
ö_addr_t
 
öaddr
;

2829 
ngx_öt_t
 
rc
;

2830 
ngx_addr_t
 
∑ddr
;

2831 
ngx_cidr_t
 *
cidr
;

2832 
ngx_uöt_t
 
Ámûy
, 
i
;

2833 #i‡(
NGX_HAVE_INET6
)

2834 
ngx_uöt_t
 
n
;

2835 
ö6_addr
 *
öaddr6
;

2838 #i‡(
NGX_SUPPRESS_WARN
)

2839 
öaddr
 = 0;

2840 #i‡(
NGX_HAVE_INET6
)

2841 
öaddr6
 = 
NULL
;

2845 
Ámûy
 = 
addr
->
sockaddr
->
ß_Ámûy
;

2847 i‡(
Ámûy
 =
AF_INET
) {

2848 
öaddr
 = ((
sockaddr_ö
 *Ë
addr
->
sockaddr
)->
sö_addr
.
s_addr
;

2851 #i‡(
NGX_HAVE_INET6
)

2852 i‡(
Ámûy
 =
AF_INET6
) {

2853 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
->
sockaddr
)->
sö6_addr
;

2855 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

2856 
Ámûy
 = 
AF_INET
;

2858 
p
 = 
öaddr6
->
s6_addr
;

2860 
öaddr
 = 
p
[12] << 24;

2861 
öaddr
 +
p
[13] << 16;

2862 
öaddr
 +
p
[14] << 8;

2863 
öaddr
 +
p
[15];

2865 
öaddr
 = 
	`ht⁄l
(inaddr);

2870 
cidr
 = 
¥oxõs
->
ñts
, 
i
 = 0; i <Öroxõs->
√…s
; i++) {

2871 i‡(
cidr
[
i
].
Ámûy
 != family) {

2872 
√xt
;

2875 
Ámûy
) {

2877 #i‡(
NGX_HAVE_INET6
)

2878 
AF_INET6
:

2879 
n
 = 0;Ç < 16;Ç++) {

2880 i‡((
öaddr6
->
s6_addr
[
n
] & 
cidr
[
i
].
u
.
ö6
.
mask
.s6_addr[n])

2881 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

2883 
√xt
;

2889 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

2890 
AF_UNIX
:

2895 i‡((
öaddr
 & 
cidr
[
i
].
u
.
ö
.
mask
Ë!cidr[i].u.ö.
addr
) {

2896 
√xt
;

2901 
p
 = 
xff
 + 
xfÊí
 - 1;Ö > xff;Ö--, xfflen--) {

2902 i‡(*
p
 != ' ' && *p != ',') {

2907  ; 
p
 > 
xff
;Ö--) {

2908 i‡(*
p
 == ' ' || *p == ',') {

2909 
p
++;

2914 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, &
∑ddr
, 
p
, 
xfÊí
 - (∞- 
xff
)Ë!
NGX_OK
) {

2915  
NGX_DECLINED
;

2918 *
addr
 = 
∑ddr
;

2920 i‡(
ªcursive
 && 
p
 > 
xff
) {

2921 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
xff
, 
p
 - 1 - xff,

2922 
¥oxõs
, 1);

2924 i‡(
rc
 =
NGX_DECLINED
) {

2925  
NGX_DONE
;

2929  
rc
;

2932  
NGX_OK
;

2934 
√xt
:

2938  
NGX_DECLINED
;

2939 
	}
}

2943 
	$ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2945 *
rv
;

2946 *
mc⁄f
;

2947 
ngx_uöt_t
 
i
;

2948 
ngx_c⁄f_t
 
pcf
;

2949 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2950 
sockaddr_ö
 *
sö
;

2951 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

2952 
ngx_hâp_li°í_›t_t
 
ls›t
;

2953 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

2954 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2956 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2957 i‡(
˘x
 =
NULL
) {

2958  
NGX_CONF_ERROR
;

2961 
hâp_˘x
 = 
cf
->
˘x
;

2962 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

2966 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2967 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

2968  
NGX_CONF_ERROR
;

2973 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2974 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2975  
NGX_CONF_ERROR
;

2978 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

2979 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2983 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

2985 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

2986 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

2987 i‡(
mc⁄f
 =
NULL
) {

2988  
NGX_CONF_ERROR
;

2991 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2994 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2995 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2996 i‡(
mc⁄f
 =
NULL
) {

2997  
NGX_CONF_ERROR
;

3000 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

3007 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3008 
cscf
->
˘x
 = ctx;

3011 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3013 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

3014 i‡(
cscÂ
 =
NULL
) {

3015  
NGX_CONF_ERROR
;

3018 *
cscÂ
 = 
cscf
;

3023 
pcf
 = *
cf
;

3024 
cf
->
˘x
 = ctx;

3025 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SRV_CONF
;

3027 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3029 *
cf
 = 
pcf
;

3031 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

3032 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3034 
sö
 = &
ls›t
.
u
.
sockaddr_ö
;

3036 
sö
->
sö_Ámûy
 = 
AF_INET
;

3037 #i‡(
NGX_WIN32
)

3038 
sö
->
sö_p‹t
 = 
	`ht⁄s
(80);

3040 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
	`gëuid
() == 0) ? 80 : 8000);

3042 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

3044 
ls›t
.
sockÀn
 = (
sockaddr_ö
);

3046 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3047 
ls›t
.
rcvbuf
 = -1;

3048 
ls›t
.
¢dbuf
 = -1;

3049 #i‡(
NGX_HAVE_SETFIB
)

3050 
ls›t
.
£tfib
 = -1;

3052 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

3053 
ls›t
.
Á°›í
 = -1;

3055 
ls›t
.
wûdˇrd
 = 1;

3057 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
sockÀn
,Üs›t.
addr
,

3058 
NGX_SOCKADDR_STRLEN
, 1);

3060 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë!
NGX_OK
) {

3061  
NGX_CONF_ERROR
;

3065  
rv
;

3066 
	}
}

3070 
	$ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

3072 *
rv
;

3073 
u_ch¨
 *
mod
;

3074 
size_t
 
Àn
;

3075 
ngx_°r_t
 *
vÆue
, *
«me
;

3076 
ngx_uöt_t
 
i
;

3077 
ngx_c⁄f_t
 
ßve
;

3078 
ngx_hâp_moduÀ_t
 *
moduÀ
;

3079 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

3080 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

3082 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

3083 i‡(
˘x
 =
NULL
) {

3084  
NGX_CONF_ERROR
;

3087 
p˘x
 = 
cf
->
˘x
;

3088 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

3089 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

3091 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

3092 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

3093  
NGX_CONF_ERROR
;

3096 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

3097 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

3101 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

3103 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

3104 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =

3105 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

3106 i‡(
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

3107  
NGX_CONF_ERROR
;

3112 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3113 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

3115 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3117 i‡(
cf
->
¨gs
->
√…s
 == 3) {

3119 
Àn
 = 
vÆue
[1].len;

3120 
mod
 = 
vÆue
[1].
d©a
;

3121 
«me
 = &
vÆue
[2];

3123 i‡(
Àn
 =1 && 
mod
[0] == '=') {

3125 
˛cf
->
«me
 = *name;

3126 
˛cf
->
exa˘_m©ch
 = 1;

3128 } i‡(
Àn
 =2 && 
mod
[0] == '^' && mod[1] == '~') {

3130 
˛cf
->
«me
 = *name;

3131 
˛cf
->
n‹egex
 = 1;

3133 } i‡(
Àn
 =1 && 
mod
[0] == '~') {

3135 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3136  
NGX_CONF_ERROR
;

3139 } i‡(
Àn
 =2 && 
mod
[0] == '~' && mod[1] == '*') {

3141 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3142  
NGX_CONF_ERROR
;

3146 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3147 "övÆidÜoˇti⁄ modifõ∏\"%V\"", &
vÆue
[1]);

3148  
NGX_CONF_ERROR
;

3153 
«me
 = &
vÆue
[1];

3155 i‡(
«me
->
d©a
[0] == '=') {

3157 
˛cf
->
«me
.
Àn
 =Çame->len - 1;

3158 
˛cf
->
«me
.
d©a
 =Çame->data + 1;

3159 
˛cf
->
exa˘_m©ch
 = 1;

3161 } i‡(
«me
->
d©a
[0] == '^' &&Çame->data[1] == '~') {

3163 
˛cf
->
«me
.
Àn
 =Çame->len - 2;

3164 
˛cf
->
«me
.
d©a
 =Çame->data + 2;

3165 
˛cf
->
n‹egex
 = 1;

3167 } i‡(
«me
->
d©a
[0] == '~') {

3169 
«me
->
Àn
--;

3170 
«me
->
d©a
++;

3172 i‡(
«me
->
d©a
[0] == '*') {

3174 
«me
->
Àn
--;

3175 
«me
->
d©a
++;

3177 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3178  
NGX_CONF_ERROR
;

3182 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3183  
NGX_CONF_ERROR
;

3189 
˛cf
->
«me
 = *name;

3191 i‡(
«me
->
d©a
[0] == '@') {

3192 
˛cf
->
«med
 = 1;

3197 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3199 i‡(
p˛cf
->
«me
.
Àn
) {

3204 
˛cf
->
¥ev_loˇti⁄
 = 
p˛cf
;

3207 i‡(
p˛cf
->
exa˘_m©ch
) {

3208 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3211 &
˛cf
->
«me
, &
p˛cf
->name);

3212  
NGX_CONF_ERROR
;

3215 i‡(
p˛cf
->
«med
) {

3216 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3219 &
˛cf
->
«me
, &
p˛cf
->name);

3220  
NGX_CONF_ERROR
;

3223 i‡(
˛cf
->
«med
) {

3224 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3227 &
˛cf
->
«me
);

3228  
NGX_CONF_ERROR
;

3231 
Àn
 = 
p˛cf
->
«me
.len;

3233 #i‡(
NGX_PCRE
)

3234 i‡(
˛cf
->
ªgex
 =
NULL


3235 && 
	`ngx_fûíame_cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3237 i‡(
	`ngx_fûíame_cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3240 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3242 &
˛cf
->
«me
, &
p˛cf
->name);

3243  
NGX_CONF_ERROR
;

3247 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

3248  
NGX_CONF_ERROR
;

3251 
ßve
 = *
cf
;

3252 
cf
->
˘x
 = ctx;

3253 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LOC_CONF
;

3255 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3257 *
cf
 = 
ßve
;

3259  
rv
;

3260 
	}
}

3263 
ngx_öt_t


3264 
	$ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

3265 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3267 #i‡(
NGX_PCRE
)

3268 
ngx_ªgex_compûe_t
 
rc
;

3269 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3271 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3273 
rc
.
∑âîn
 = *
ªgex
;

3274 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3275 
rc
.
îr
.
d©a
 = 
îr°r
;

3277 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

3278 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3280 
rc
.
›ti⁄s
 = 
ˇ£Àss
 ? 
NGX_REGEX_CASELESS
 : 0;

3283 
˛cf
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3284 i‡(
˛cf
->
ªgex
 =
NULL
) {

3285  
NGX_ERROR
;

3288 
˛cf
->
«me
 = *
ªgex
;

3290  
NGX_OK
;

3294 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3296 
ªgex
);

3297  
NGX_ERROR
;

3300 
	}
}

3304 
	$ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3306 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3308 *
rv
;

3309 
ngx_c⁄f_t
 
ßve
;

3311 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3312 
˛cf
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, (
ngx_hash_key_t
));

3313 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3314  
NGX_CONF_ERROR
;

3318 
ßve
 = *
cf
;

3319 
cf
->
h™dÀr
 = 
ngx_hâp_c‹e_ty≥
;

3320 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

3322 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3324 *
cf
 = 
ßve
;

3326  
rv
;

3327 
	}
}

3331 
	$ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

3333 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3335 
ngx_°r_t
 *
vÆue
, *
c⁄ã¡_ty≥
, *
ﬁd
;

3336 
ngx_uöt_t
 
i
, 
n
, 
hash
;

3337 
ngx_hash_key_t
 *
ty≥
;

3339 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3341 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

3342 i‡(
cf
->
¨gs
->
√…s
 != 2) {

3343 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3346  
NGX_CONF_ERROR
;

3349  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

3352 
c⁄ã¡_ty≥
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

3353 i‡(
c⁄ã¡_ty≥
 =
NULL
) {

3354  
NGX_CONF_ERROR
;

3357 *
c⁄ã¡_ty≥
 = 
vÆue
[0];

3359 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

3361 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

3363 
ty≥
 = 
˛cf
->
ty≥s
->
ñts
;

3364 
n
 = 0;Ç < 
˛cf
->
ty≥s
->
√…s
;Ç++) {

3365 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

3366 
ﬁd
 = 
ty≥
[
n
].
vÆue
;

3367 
ty≥
[
n
].
vÆue
 = 
c⁄ã¡_ty≥
;

3369 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3373 &
vÆue
[
i
], 
c⁄ã¡_ty≥
, 
ﬁd
);

3374 
√xt
;

3379 
ty≥
 = 
	`ngx_¨øy_push
(
˛cf
->
ty≥s
);

3380 i‡(
ty≥
 =
NULL
) {

3381  
NGX_CONF_ERROR
;

3384 
ty≥
->
key
 = 
vÆue
[
i
];

3385 
ty≥
->
key_hash
 = 
hash
;

3386 
ty≥
->
vÆue
 = 
c⁄ã¡_ty≥
;

3388 
√xt
:

3392  
NGX_CONF_OK
;

3393 
	}
}

3396 
ngx_öt_t


3397 
	$ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3399  
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
cf
);

3400 
	}
}

3404 
	$ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3406 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3408 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_maö_c⁄f_t
));

3409 i‡(
cmcf
 =
NULL
) {

3410  
NULL
;

3413 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

3414 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

3415 !
NGX_OK
)

3417  
NULL
;

3420 
cmcf
->
£rvî_«mes_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3421 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3423 
cmcf
->
v¨übÀs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3424 
cmcf
->
v¨übÀs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3426  
cmcf
;

3427 
	}
}

3431 
	$ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

3433 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
c⁄f
;

3435 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
£rvî_«mes_hash_max_size
, 512);

3436 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
£rvî_«mes_hash_buckë_size
,

3437 
ngx_ˇchñöe_size
);

3439 
cmcf
->
£rvî_«mes_hash_buckë_size
 =

3440 
	`ngx_Æign
(
cmcf
->
£rvî_«mes_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3443 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_max_size
, 1024);

3444 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_buckë_size
, 64);

3446 
cmcf
->
v¨übÀs_hash_buckë_size
 =

3447 
	`ngx_Æign
(
cmcf
->
v¨übÀs_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3449 i‡(
cmcf
->
nˇ±uªs
) {

3450 
cmcf
->
nˇ±uªs
 = (cmcf->ncaptures + 1) * 3;

3453  
NGX_CONF_OK
;

3454 
	}
}

3458 
	$ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3460 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3462 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_§v_c⁄f_t
));

3463 i‡(
cscf
 =
NULL
) {

3464  
NULL
;

3473 i‡(
	`ngx_¨øy_öô
(&
cscf
->
£rvî_«mes
, 
cf
->
ãmp_poﬁ
, 4,

3474 (
ngx_hâp_£rvî_«me_t
))

3475 !
NGX_OK
)

3477  
NULL
;

3480 
cscf
->
c⁄√˘i⁄_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3481 
cscf
->
ªque°_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3482 
cscf
->
˛õ¡_hódî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3483 
cscf
->
˛õ¡_hódî_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3484 
cscf
->
ign‹e_övÆid_hódîs
 = 
NGX_CONF_UNSET
;

3485 
cscf
->
mîge_¶ashes
 = 
NGX_CONF_UNSET
;

3486 
cscf
->
undîsc‹es_ö_hódîs
 = 
NGX_CONF_UNSET
;

3488  
cscf
;

3489 
	}
}

3493 
	$ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3495 
ngx_hâp_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3496 
ngx_hâp_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

3498 
ngx_°r_t
 
«me
;

3499 
ngx_hâp_£rvî_«me_t
 *
¢
;

3503 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
c⁄√˘i⁄_poﬁ_size
,

3504 
¥ev
->
c⁄√˘i⁄_poﬁ_size
, 256);

3505 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªque°_poﬁ_size
,

3506 
¥ev
->
ªque°_poﬁ_size
, 4096);

3507 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_hódî_timeout
,

3508 
¥ev
->
˛õ¡_hódî_timeout
, 60000);

3509 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_hódî_buf„r_size
,

3510 
¥ev
->
˛õ¡_hódî_buf„r_size
, 1024);

3511 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
,

3512 
¥ev
->
œrge_˛õ¡_hódî_buf„rs
,

3515 i‡(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
.
size
 < c⁄f->
c⁄√˘i⁄_poﬁ_size
) {

3516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3519  
NGX_CONF_ERROR
;

3522 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_övÆid_hódîs
,

3523 
¥ev
->
ign‹e_övÆid_hódîs
, 1);

3525 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mîge_¶ashes
, 
¥ev
->merge_slashes, 1);

3527 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
undîsc‹es_ö_hódîs
,

3528 
¥ev
->
undîsc‹es_ö_hódîs
, 0);

3530 i‡(
c⁄f
->
£rvî_«mes
.
√…s
 == 0) {

3532 
¢
 = 
	`ngx_¨øy_push
(&
c⁄f
->
£rvî_«mes
);

3533 #i‡(
NGX_PCRE
)

3534 
¢
->
ªgex
 = 
NULL
;

3536 
¢
->
£rvî
 = 
c⁄f
;

3537 
	`ngx_°r_£t
(&
¢
->
«me
, "");

3540 
¢
 = 
c⁄f
->
£rvî_«mes
.
ñts
;

3541 
«me
 = 
¢
[0].name;

3543 #i‡(
NGX_PCRE
)

3544 i‡(
¢
->
ªgex
) {

3545 
«me
.
Àn
++;

3546 
«me
.
d©a
--;

3550 i‡(
«me
.
d©a
[0] == '.') {

3551 
«me
.
Àn
--;

3552 
«me
.
d©a
++;

3555 
c⁄f
->
£rvî_«me
.
Àn
 = 
«me
.len;

3556 
c⁄f
->
£rvî_«me
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

3557 i‡(
c⁄f
->
£rvî_«me
.
d©a
 =
NULL
) {

3558  
NGX_CONF_ERROR
;

3561  
NGX_CONF_OK
;

3562 
	}
}

3566 
	$ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3568 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3570 
˛cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_loc_c⁄f_t
));

3571 i‡(
˛cf
 =
NULL
) {

3572  
NULL
;

3595 
˛cf
->
˛õ¡_max_body_size
 = 
NGX_CONF_UNSET
;

3596 
˛cf
->
˛õ¡_body_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3597 
˛cf
->
˛õ¡_body_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3598 
˛cf
->
ßtisfy
 = 
NGX_CONF_UNSET_UINT
;

3599 
˛cf
->
if_modifõd_sö˚
 = 
NGX_CONF_UNSET_UINT
;

3600 
˛cf
->
max_ønges
 = 
NGX_CONF_UNSET_UINT
;

3601 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 = 
NGX_CONF_UNSET_UINT
;

3602 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
 = 
NGX_CONF_UNSET
;

3603 
˛cf
->
öã∫Æ
 = 
NGX_CONF_UNSET
;

3604 
˛cf
->
£ndfûe
 = 
NGX_CONF_UNSET
;

3605 
˛cf
->
£ndfûe_max_chunk
 = 
NGX_CONF_UNSET_SIZE
;

3606 #i‡(
NGX_HAVE_FILE_AIO
)

3607 
˛cf
->
aio
 = 
NGX_CONF_UNSET
;

3609 
˛cf
->
ªad_ahód
 = 
NGX_CONF_UNSET_SIZE
;

3610 
˛cf
->
dúe˘io
 = 
NGX_CONF_UNSET
;

3611 
˛cf
->
dúe˘io_Æignmít
 = 
NGX_CONF_UNSET
;

3612 
˛cf
->
t˝_n›ush
 = 
NGX_CONF_UNSET
;

3613 
˛cf
->
t˝_nodñay
 = 
NGX_CONF_UNSET
;

3614 
˛cf
->
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3615 
˛cf
->
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

3616 
˛cf
->
po°p⁄e_ouçut
 = 
NGX_CONF_UNSET_SIZE
;

3617 
˛cf
->
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

3618 
˛cf
->
limô_øã_a·î
 = 
NGX_CONF_UNSET_SIZE
;

3619 
˛cf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3620 
˛cf
->
kì∑live_hódî
 = 
NGX_CONF_UNSET
;

3621 
˛cf
->
kì∑live_ªque°s
 = 
NGX_CONF_UNSET_UINT
;

3622 
˛cf
->
lögîög_˛o£
 = 
NGX_CONF_UNSET_UINT
;

3623 
˛cf
->
lögîög_time
 = 
NGX_CONF_UNSET_MSEC
;

3624 
˛cf
->
lögîög_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3625 
˛cf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3626 
˛cf
->
ª£t_timedout_c⁄√˘i⁄
 = 
NGX_CONF_UNSET
;

3627 
˛cf
->
£rvî_«me_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3628 
˛cf
->
p‹t_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3629 
˛cf
->
msõ_∑ddög
 = 
NGX_CONF_UNSET
;

3630 
˛cf
->
msõ_ª‰esh
 = 
NGX_CONF_UNSET
;

3631 
˛cf
->
log_nŸ_found
 = 
NGX_CONF_UNSET
;

3632 
˛cf
->
log_subªque°
 = 
NGX_CONF_UNSET
;

3633 
˛cf
->
ªcursive_îr‹_∑ges
 = 
NGX_CONF_UNSET
;

3634 
˛cf
->
£rvî_tokís
 = 
NGX_CONF_UNSET
;

3635 
˛cf
->
chunked_å™s„r_ícodög
 = 
NGX_CONF_UNSET
;

3636 
˛cf
->
ëag
 = 
NGX_CONF_UNSET
;

3637 
˛cf
->
ty≥s_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3638 
˛cf
->
ty≥s_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3640 
˛cf
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

3641 
˛cf
->
›í_fûe_ˇche_vÆid
 = 
NGX_CONF_UNSET
;

3642 
˛cf
->
›í_fûe_ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

3643 
˛cf
->
›í_fûe_ˇche_îr‹s
 = 
NGX_CONF_UNSET
;

3644 
˛cf
->
›í_fûe_ˇche_evíts
 = 
NGX_CONF_UNSET
;

3646 #i‡(
NGX_HTTP_GZIP
)

3647 
˛cf
->
gzù_v¨y
 = 
NGX_CONF_UNSET
;

3648 
˛cf
->
gzù_hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

3649 #i‡(
NGX_PCRE
)

3650 
˛cf
->
gzù_dißbÀ
 = 
NGX_CONF_UNSET_PTR
;

3652 
˛cf
->
gzù_dißbÀ_msõ6
 = 3;

3653 #i‡(
NGX_HTTP_DEGRADATION
)

3654 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 3;

3658 #i‡(
NGX_HAVE_OPENAT
)

3659 
˛cf
->
dißbÀ_symlöks
 = 
NGX_CONF_UNSET_UINT
;

3660 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NGX_CONF_UNSET_PTR
;

3663  
˛cf
;

3664 
	}
}

3667 
ngx_°r_t
 
	gngx_hâp_c‹e_ãxt_html_ty≥
 = 
ngx_°rög
("text/html");

3668 
ngx_°r_t
 
	gngx_hâp_c‹e_image_gif_ty≥
 = 
ngx_°rög
("image/gif");

3669 
ngx_°r_t
 
	gngx_hâp_c‹e_image_j≥g_ty≥
 = 
ngx_°rög
("image/jpeg");

3671 
ngx_hash_key_t
 
	gngx_hâp_c‹e_deÁu…_ty≥s
[] = {

3672 { 
ngx_°rög
("html"), 0, &
ngx_hâp_c‹e_ãxt_html_ty≥
 },

3673 { 
ngx_°rög
("gif"), 0, &
ngx_hâp_c‹e_image_gif_ty≥
 },

3674 { 
ngx_°rög
("jpg"), 0, &
ngx_hâp_c‹e_image_j≥g_ty≥
 },

3675 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

3680 
	$ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3682 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3683 
ngx_hâp_c‹e_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

3685 
ngx_uöt_t
 
i
;

3686 
ngx_hash_key_t
 *
ty≥
;

3687 
ngx_hash_öô_t
 
ty≥s_hash
;

3689 i‡(
c⁄f
->
roŸ
.
d©a
 =
NULL
) {

3691 
c⁄f
->
Æüs
 = 
¥ev
->alias;

3692 
c⁄f
->
roŸ
 = 
¥ev
->root;

3693 
c⁄f
->
roŸ_Àngths
 = 
¥ev
->root_lengths;

3694 
c⁄f
->
roŸ_vÆues
 = 
¥ev
->root_values;

3696 i‡(
¥ev
->
roŸ
.
d©a
 =
NULL
) {

3697 
	`ngx_°r_£t
(&
c⁄f
->
roŸ
, "html");

3699 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
c⁄f
->
roŸ
, 0Ë!
NGX_OK
) {

3700  
NGX_CONF_ERROR
;

3705 i‡(
c⁄f
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3706 
c⁄f
->
po°_a˘i⁄
 = 
¥ev
->post_action;

3709 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_max_size
,

3710 
¥ev
->
ty≥s_hash_max_size
, 1024);

3712 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_buckë_size
,

3713 
¥ev
->
ty≥s_hash_buckë_size
, 64);

3715 
c⁄f
->
ty≥s_hash_buckë_size
 = 
	`ngx_Æign
(conf->types_hash_bucket_size,

3716 
ngx_ˇchñöe_size
);

3723 i‡(
¥ev
->
ty≥s
 &&Öªv->
ty≥s_hash
.
buckës
 =
NULL
) {

3725 
ty≥s_hash
.
hash
 = &
¥ev
->types_hash;

3726 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3727 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3728 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3729 
ty≥s_hash
.
«me
 = "types_hash";

3730 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3731 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3733 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
¥ev
->
ty≥s
->
ñts
,Öªv->ty≥s->
√…s
)

3734 !
NGX_OK
)

3736  
NGX_CONF_ERROR
;

3740 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3741 
c⁄f
->
ty≥s
 = 
¥ev
->types;

3742 
c⁄f
->
ty≥s_hash
 = 
¥ev
->types_hash;

3745 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3746 
c⁄f
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 3, (
ngx_hash_key_t
));

3747 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3748  
NGX_CONF_ERROR
;

3751 
i
 = 0; 
ngx_hâp_c‹e_deÁu…_ty≥s
[i].
key
.
Àn
; i++) {

3752 
ty≥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ty≥s
);

3753 i‡(
ty≥
 =
NULL
) {

3754  
NGX_CONF_ERROR
;

3757 
ty≥
->
key
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].key;

3758 
ty≥
->
key_hash
 =

3759 
	`ngx_hash_key_lc
(
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
d©a
,

3760 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
Àn
);

3761 
ty≥
->
vÆue
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].value;

3765 i‡(
c⁄f
->
ty≥s_hash
.
buckës
 =
NULL
) {

3767 
ty≥s_hash
.
hash
 = &
c⁄f
->types_hash;

3768 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3769 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3770 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3771 
ty≥s_hash
.
«me
 = "types_hash";

3772 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3773 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3775 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
c⁄f
->
ty≥s
->
ñts
, c⁄f->ty≥s->
√…s
)

3776 !
NGX_OK
)

3778  
NGX_CONF_ERROR
;

3782 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

3783 i‡(
¥ev
->
îr‹_log
) {

3784 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

3786 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

3790 i‡(
c⁄f
->
îr‹_∑ges
 =
NULL
 && 
¥ev
->error_pages) {

3791 
c⁄f
->
îr‹_∑ges
 = 
¥ev
->error_pages;

3794 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
deÁu…_ty≥
,

3795 
¥ev
->
deÁu…_ty≥
, "text/plain");

3797 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
˛õ¡_max_body_size
,

3798 
¥ev
->
˛õ¡_max_body_size
, 1 * 1024 * 1024);

3799 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_body_buf„r_size
,

3800 
¥ev
->
˛õ¡_body_buf„r_size
,

3801 (
size_t
Ë2 * 
ngx_∑gesize
);

3802 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_body_timeout
,

3803 
¥ev
->
˛õ¡_body_timeout
, 60000);

3805 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
kì∑live_dißbÀ
,

3806 
¥ev
->
kì∑live_dißbÀ
,

3807 (
NGX_CONF_BITMASK_SET


3808 |
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
));

3809 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ßtisfy
, 
¥ev
->satisfy,

3810 
NGX_HTTP_SATISFY_ALL
);

3811 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
if_modifõd_sö˚
, 
¥ev
->if_modified_since,

3812 
NGX_HTTP_IMS_EXACT
);

3813 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
max_ønges
, 
¥ev
->max_ranges,

3814 
NGX_MAX_INT32_VALUE
);

3815 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
˛õ¡_body_ö_fûe_⁄ly
,

3816 
¥ev
->
˛õ¡_body_ö_fûe_⁄ly
,

3817 
NGX_HTTP_REQUEST_BODY_FILE_OFF
);

3818 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛õ¡_body_ö_sögÀ_buf„r
,

3819 
¥ev
->
˛õ¡_body_ö_sögÀ_buf„r
, 0);

3820 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öã∫Æ
, 
¥ev
->internal, 0);

3821 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ndfûe
, 
¥ev
->sendfile, 0);

3822 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£ndfûe_max_chunk
,

3823 
¥ev
->
£ndfûe_max_chunk
, 0);

3824 #i‡(
NGX_HAVE_FILE_AIO
)

3825 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
aio
, 
¥ev
->aio, 
NGX_HTTP_AIO_OFF
);

3827 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªad_ahód
, 
¥ev
->read_ahead, 0);

3828 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io
, 
¥ev
->directio,

3829 
NGX_OPEN_FILE_DIRECTIO_OFF
);

3830 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io_Æignmít
, 
¥ev
->directio_alignment,

3832 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_n›ush
, 
¥ev
->tcp_nopush, 0);

3833 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_nodñay
, 
¥ev
->tcp_nodelay, 1);

3835 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
£nd_timeout
, 
¥ev
->send_timeout, 60000);

3836 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£nd_low©
, 
¥ev
->send_lowat, 0);

3837 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_ouçut
, 
¥ev
->postpone_output,

3839 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã
, 
¥ev
->limit_rate, 0);

3840 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã_a·î
, 
¥ev
->limit_rate_after,

3842 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

3843 
¥ev
->
kì∑live_timeout
, 75000);

3844 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
kì∑live_hódî
,

3845 
¥ev
->
kì∑live_hódî
, 0);

3846 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
kì∑live_ªque°s
,

3847 
¥ev
->
kì∑live_ªque°s
, 100);

3848 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
lögîög_˛o£
,

3849 
¥ev
->
lögîög_˛o£
, 
NGX_HTTP_LINGERING_ON
);

3850 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_time
,

3851 
¥ev
->
lögîög_time
, 30000);

3852 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_timeout
,

3853 
¥ev
->
lögîög_timeout
, 5000);

3854 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
,

3855 
¥ev
->
ªsﬁvî_timeout
, 30000);

3857 i‡(
c⁄f
->
ªsﬁvî
 =
NULL
) {

3859 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3866 
¥ev
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, 
NULL
, 0);

3867 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3868  
NGX_CONF_ERROR
;

3872 
c⁄f
->
ªsﬁvî
 = 
¥ev
->resolver;

3875 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
˛õ¡_body_ãmp_∑th
,

3876 
¥ev
->
˛õ¡_body_ãmp_∑th
,

3877 &
ngx_hâp_˛õ¡_ãmp_∑th
)

3878 !
NGX_OK
)

3880  
NGX_CONF_ERROR
;

3883 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ª£t_timedout_c⁄√˘i⁄
,

3884 
¥ev
->
ª£t_timedout_c⁄√˘i⁄
, 0);

3885 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_«me_ö_ªdúe˘
,

3886 
¥ev
->
£rvî_«me_ö_ªdúe˘
, 0);

3887 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
p‹t_ö_ªdúe˘
, 
¥ev
->port_in_redirect, 1);

3888 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_∑ddög
, 
¥ev
->msie_padding, 1);

3889 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_ª‰esh
, 
¥ev
->msie_refresh, 0);

3890 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_nŸ_found
, 
¥ev
->log_not_found, 1);

3891 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_subªque°
, 
¥ev
->log_subrequest, 0);

3892 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive_îr‹_∑ges
,

3893 
¥ev
->
ªcursive_îr‹_∑ges
, 0);

3894 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_tokís
, 
¥ev
->server_tokens, 1);

3895 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
chunked_å™s„r_ícodög
,

3896 
¥ev
->
chunked_å™s„r_ícodög
, 1);

3897 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ëag
, 
¥ev
->etag, 1);

3899 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
›í_fûe_ˇche
,

3900 
¥ev
->
›í_fûe_ˇche
, 
NULL
);

3902 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_vÆid
,

3903 
¥ev
->
›í_fûe_ˇche_vÆid
, 60);

3905 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
›í_fûe_ˇche_mö_u£s
,

3906 
¥ev
->
›í_fûe_ˇche_mö_u£s
, 1);

3908 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_îr‹s
,

3909 
¥ev
->
›í_fûe_ˇche_îr‹s
, 0);

3911 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_evíts
,

3912 
¥ev
->
›í_fûe_ˇche_evíts
, 0);

3913 #i‡(
NGX_HTTP_GZIP
)

3915 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
gzù_v¨y
, 
¥ev
->gzip_vary, 0);

3916 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_hâp_vîsi⁄
, 
¥ev
->gzip_http_version,

3917 
NGX_HTTP_VERSION_11
);

3918 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
gzù_¥oxõd
, 
¥ev
->gzip_proxied,

3919 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_GZIP_PROXIED_OFF
));

3921 #i‡(
NGX_PCRE
)

3922 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
gzù_dißbÀ
, 
¥ev
->gzù_dißbÀ, 
NULL
);

3925 i‡(
c⁄f
->
gzù_dißbÀ_msõ6
 == 3) {

3926 
c⁄f
->
gzù_dißbÀ_msõ6
 =

3927 (
¥ev
->
gzù_dißbÀ_msõ6
 == 3) ? 0 :Örev->gzip_disable_msie6;

3930 #i‡(
NGX_HTTP_DEGRADATION
)

3932 i‡(
c⁄f
->
gzù_dißbÀ_degød©i⁄
 == 3) {

3933 
c⁄f
->
gzù_dißbÀ_degød©i⁄
 =

3934 (
¥ev
->
gzù_dißbÀ_degød©i⁄
 == 3) ?

3935 0 : 
¥ev
->
gzù_dißbÀ_degød©i⁄
;

3941 #i‡(
NGX_HAVE_OPENAT
)

3942 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
dißbÀ_symlöks
, 
¥ev
->disable_symlinks,

3943 
NGX_DISABLE_SYMLINKS_OFF
);

3944 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
dißbÀ_symlöks_‰om
,

3945 
¥ev
->
dißbÀ_symlöks_‰om
, 
NULL
);

3948  
NGX_CONF_OK
;

3949 
	}
}

3953 
	$ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3955 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

3957 
ngx_°r_t
 *
vÆue
, 
size
;

3958 
ngx_uæ_t
 
u
;

3959 
ngx_uöt_t
 
n
;

3960 
ngx_hâp_li°í_›t_t
 
ls›t
;

3962 
cscf
->
li°í
 = 1;

3964 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3966 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3968 
u
.
uæ
 = 
vÆue
[1];

3969 
u
.
li°í
 = 1;

3970 
u
.
deÁu…_p‹t
 = 80;

3972 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

3973 i‡(
u
.
îr
) {

3974 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3976 
u
.
îr
, &u.
uæ
);

3979  
NGX_CONF_ERROR
;

3982 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3984 
	`ngx_mem˝y
(&
ls›t
.
u
.
sockaddr
, u.sockaddr, u.
sockÀn
);

3986 
ls›t
.
sockÀn
 = 
u
.socklen;

3987 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3988 
ls›t
.
rcvbuf
 = -1;

3989 
ls›t
.
¢dbuf
 = -1;

3990 #i‡(
NGX_HAVE_SETFIB
)

3991 
ls›t
.
£tfib
 = -1;

3993 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

3994 
ls›t
.
Á°›í
 = -1;

3996 
ls›t
.
wûdˇrd
 = 
u
.wildcard;

3997 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

3998 
ls›t
.
ùv6⁄ly
 = 1;

4001 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
sockÀn
,Üs›t.
addr
,

4002 
NGX_SOCKADDR_STRLEN
, 1);

4004 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

4006 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default_server") == 0

4007 || 
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default") == 0)

4009 
ls›t
.
deÁu…_£rvî
 = 1;

4013 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "bind") == 0) {

4014 
ls›t
.
£t
 = 1;

4015 
ls›t
.
böd
 = 1;

4019 #i‡(
NGX_HAVE_SETFIB
)

4020 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "setfib=", 7) == 0) {

4021 
ls›t
.
£tfib
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 7, vÆue[n].
Àn
 - 7);

4022 
ls›t
.
£t
 = 1;

4023 
ls›t
.
böd
 = 1;

4025 i‡(
ls›t
.
£tfib
 =
NGX_ERROR
) {

4026 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4027 "övÆid sëfib \"%V\"", &
vÆue
[
n
]);

4028  
NGX_CONF_ERROR
;

4035 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

4036 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "fastopen=", 9) == 0) {

4037 
ls›t
.
Á°›í
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 9, vÆue[n].
Àn
 - 9);

4038 
ls›t
.
£t
 = 1;

4039 
ls›t
.
böd
 = 1;

4041 i‡(
ls›t
.
Á°›í
 =
NGX_ERROR
) {

4042 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4043 "övÆid fa°›í \"%V\"", &
vÆue
[
n
]);

4044  
NGX_CONF_ERROR
;

4051 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "backlog=", 8) == 0) {

4052 
ls›t
.
backlog
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 8, vÆue[n].
Àn
 - 8);

4053 
ls›t
.
£t
 = 1;

4054 
ls›t
.
böd
 = 1;

4056 i‡(
ls›t
.
backlog
 =
NGX_ERROR
 ||Üsopt.backlog == 0) {

4057 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4058 "övÆid backlog \"%V\"", &
vÆue
[
n
]);

4059  
NGX_CONF_ERROR
;

4065 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "rcvbuf=", 7) == 0) {

4066 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

4067 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

4069 
ls›t
.
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

4070 
ls›t
.
£t
 = 1;

4071 
ls›t
.
böd
 = 1;

4073 i‡(
ls›t
.
rcvbuf
 =
NGX_ERROR
) {

4074 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4075 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
n
]);

4076  
NGX_CONF_ERROR
;

4082 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "sndbuf=", 7) == 0) {

4083 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

4084 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

4086 
ls›t
.
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

4087 
ls›t
.
£t
 = 1;

4088 
ls›t
.
böd
 = 1;

4090 i‡(
ls›t
.
¢dbuf
 =
NGX_ERROR
) {

4091 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4092 "övÆid sndbu‡\"%V\"", &
vÆue
[
n
]);

4093  
NGX_CONF_ERROR
;

4099 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "accept_filter=", 14) == 0) {

4100 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

4101 
ls›t
.
ac˚±_fûãr
 = (*Ë&
vÆue
[
n
].
d©a
[14];

4102 
ls›t
.
£t
 = 1;

4103 
ls›t
.
böd
 = 1;

4105 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4108 &
vÆue
[
n
]);

4113 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "deferred") == 0) {

4114 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

4115 
ls›t
.
de„ºed_ac˚±
 = 1;

4116 
ls›t
.
£t
 = 1;

4117 
ls›t
.
böd
 = 1;

4119 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4126 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "ipv6only=o", 10) == 0) {

4127 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

4128 
sockaddr
 *
ß
;

4130 
ß
 = &
ls›t
.
u
.
sockaddr
;

4132 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

4134 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "n") == 0) {

4135 
ls›t
.
ùv6⁄ly
 = 1;

4137 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "ff") == 0) {

4138 
ls›t
.
ùv6⁄ly
 = 0;

4141 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4143 &
vÆue
[
n
].
d©a
[9]);

4144  
NGX_CONF_ERROR
;

4147 
ls›t
.
£t
 = 1;

4148 
ls›t
.
böd
 = 1;

4151 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4153 "⁄ádd∏\"%s\", ign‹ed", 
ls›t
.
addr
);

4158 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4161  
NGX_CONF_ERROR
;

4165 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "ssl") == 0) {

4166 #i‡(
NGX_HTTP_SSL
)

4167 
ls›t
.
s¶
 = 1;

4170 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4173  
NGX_CONF_ERROR
;

4177 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "spdy") == 0) {

4178 #i‡(
NGX_HTTP_SPDY
)

4179 
ls›t
.
•dy
 = 1;

4182 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4185  
NGX_CONF_ERROR
;

4189 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "so_keepalive=", 13) == 0) {

4191 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "on") == 0) {

4192 
ls›t
.
so_kì∑live
 = 1;

4194 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "off") == 0) {

4195 
ls›t
.
so_kì∑live
 = 2;

4199 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4200 
u_ch¨
 *
p
, *
íd
;

4201 
ngx_°r_t
 
s
;

4203 
íd
 = 
vÆue
[
n
].
d©a
 + vÆue[n].
Àn
;

4204 
s
.
d©a
 = 
vÆue
[
n
].data + 13;

4206 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4207 i‡(
p
 =
NULL
) {

4208 
p
 = 
íd
;

4211 i‡(
p
 > 
s
.
d©a
) {

4212 
s
.
Àn
 = 
p
 - s.
d©a
;

4214 
ls›t
.
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

4215 i‡(
ls›t
.
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

4216 
övÆid_so_kì∑live
;

4220 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4222 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4223 i‡(
p
 =
NULL
) {

4224 
p
 = 
íd
;

4227 i‡(
p
 > 
s
.
d©a
) {

4228 
s
.
Àn
 = 
p
 - s.
d©a
;

4230 
ls›t
.
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

4231 i‡(
ls›t
.
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

4232 
övÆid_so_kì∑live
;

4236 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4238 i‡(
s
.
d©a
 < 
íd
) {

4239 
s
.
Àn
 = 
íd
 - s.
d©a
;

4241 
ls›t
.
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

4242 i‡(
ls›t
.
t˝_kìp˙t
 =
NGX_ERROR
) {

4243 
övÆid_so_kì∑live
;

4247 i‡(
ls›t
.
t˝_kìpidÀ
 =0 &&Üs›t.
t˝_kìpötvl
 == 0

4248 && 
ls›t
.
t˝_kìp˙t
 == 0)

4250 
övÆid_so_kì∑live
;

4253 
ls›t
.
so_kì∑live
 = 1;

4257 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4260  
NGX_CONF_ERROR
;

4265 
ls›t
.
£t
 = 1;

4266 
ls›t
.
böd
 = 1;

4270 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4271 
övÆid_so_kì∑live
:

4273 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4275 &
vÆue
[
n
].
d©a
[13]);

4276  
NGX_CONF_ERROR
;

4280 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "proxy_protocol") == 0) {

4281 
ls›t
.
¥oxy_¥Ÿocﬁ
 = 1;

4285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4286 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
n
]);

4287  
NGX_CONF_ERROR
;

4290 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë=
NGX_OK
) {

4291  
NGX_CONF_OK
;

4294  
NGX_CONF_ERROR
;

4295 
	}
}

4299 
	$ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4301 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

4303 
u_ch¨
 
ch
;

4304 
ngx_°r_t
 *
vÆue
;

4305 
ngx_uöt_t
 
i
;

4306 
ngx_hâp_£rvî_«me_t
 *
¢
;

4308 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4310 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4312 
ch
 = 
vÆue
[
i
].
d©a
[0];

4314 i‡((
ch
 ='*' && (
vÆue
[
i
].
Àn
 < 3 || vÆue[i].
d©a
[1] != '.'))

4315 || (
ch
 ='.' && 
vÆue
[
i
].
Àn
 < 2))

4317 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4318 "£rvîÇamê\"%V\" i†övÆid", &
vÆue
[
i
]);

4319  
NGX_CONF_ERROR
;

4322 i‡(
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/')) {

4323 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4325 &
vÆue
[
i
]);

4328 
¢
 = 
	`ngx_¨øy_push
(&
cscf
->
£rvî_«mes
);

4329 i‡(
¢
 =
NULL
) {

4330  
NGX_CONF_ERROR
;

4333 #i‡(
NGX_PCRE
)

4334 
¢
->
ªgex
 = 
NULL
;

4336 
¢
->
£rvî
 = 
cscf
;

4338 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, (
u_ch¨
 *) "$hostname") == 0) {

4339 
¢
->
«me
 = 
cf
->
cy˛e
->
ho°«me
;

4342 
¢
->
«me
 = 
vÆue
[
i
];

4345 i‡(
vÆue
[
i
].
d©a
[0] != '~') {

4346 
	`ngx_°æow
(
¢
->
«me
.
d©a
, sn->«me.d©a, sn->«me.
Àn
);

4350 #i‡(
NGX_PCRE
)

4352 
u_ch¨
 *
p
;

4353 
ngx_ªgex_compûe_t
 
rc
;

4354 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4356 i‡(
vÆue
[
i
].
Àn
 == 1) {

4357 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4358 "em±yÑegex i¿£rvîÇamê\"%V\"", &
vÆue
[
i
]);

4359  
NGX_CONF_ERROR
;

4362 
vÆue
[
i
].
Àn
--;

4363 
vÆue
[
i
].
d©a
++;

4365 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4367 
rc
.
∑âîn
 = 
vÆue
[
i
];

4368 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4369 
rc
.
îr
.
d©a
 = 
îr°r
;

4371 
p
 = 
vÆue
[
i
].
d©a
;Ö < vÆue[i].d©®+ vÆue[i].
Àn
;Ö++) {

4372 i‡(*
p
 >= 'A' && *p <= 'Z') {

4373 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4378 
¢
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

4379 i‡(
¢
->
ªgex
 =
NULL
) {

4380  
NGX_CONF_ERROR
;

4383 
¢
->
«me
 = 
vÆue
[
i
];

4384 
cscf
->
ˇ±uªs
 = (
rc
.captures > 0);

4387 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4389 "ªquúe†PCREÜibøry", &
vÆue
[
i
]);

4391  
NGX_CONF_ERROR
;

4395  
NGX_CONF_OK
;

4396 
	}
}

4400 
	$ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4402 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4404 
ngx_°r_t
 *
vÆue
;

4405 
ngx_öt_t
 
Æüs
;

4406 
ngx_uöt_t
 
n
;

4407 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4409 
Æüs
 = (
cmd
->
«me
.
Àn
 == ("alias") - 1) ? 1 : 0;

4411 i‡(
˛cf
->
roŸ
.
d©a
) {

4413 i‡((
˛cf
->
Æüs
 != 0) ==álias) {

4414 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4416 &
cmd
->
«me
);

4418 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4421 &
cmd
->
«me
, 
˛cf
->
Æüs
 ? "alias" : "root");

4424  
NGX_CONF_ERROR
;

4427 i‡(
˛cf
->
«med
 && 
Æüs
) {

4428 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4432  
NGX_CONF_ERROR
;

4435 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4437 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$document_root")

4438 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${document_root}"))

4440 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4443 &
cmd
->
«me
);

4445  
NGX_CONF_ERROR
;

4448 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$realpath_root")

4449 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${realpath_root}"))

4451 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4454 &
cmd
->
«me
);

4456  
NGX_CONF_ERROR
;

4459 
˛cf
->
Æüs
 =álü†? clcf->
«me
.
Àn
 : 0;

4460 
˛cf
->
roŸ
 = 
vÆue
[1];

4462 i‡(!
Æüs
 && 
˛cf
->
roŸ
.
d©a
[˛cf->roŸ.
Àn
 - 1] == '/') {

4463 
˛cf
->
roŸ
.
Àn
--;

4466 i‡(
˛cf
->
roŸ
.
d©a
[0] != '$') {

4467 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
˛cf
->
roŸ
, 0Ë!
NGX_OK
) {

4468  
NGX_CONF_ERROR
;

4472 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
˛cf
->
roŸ
);

4474 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4475 
sc
.
v¨übÀs
 = 
n
;

4477 #i‡(
NGX_PCRE
)

4478 i‡(
Æüs
 && 
˛cf
->
ªgex
) {

4479 
n
 = 1;

4483 i‡(
n
) {

4484 
sc
.
cf
 = cf;

4485 
sc
.
sour˚
 = &
˛cf
->
roŸ
;

4486 
sc
.
Àngths
 = &
˛cf
->
roŸ_Àngths
;

4487 
sc
.
vÆues
 = &
˛cf
->
roŸ_vÆues
;

4488 
sc
.
com∂ëe_Àngths
 = 1;

4489 
sc
.
com∂ëe_vÆues
 = 1;

4491 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4492  
NGX_CONF_ERROR
;

4496  
NGX_CONF_OK
;

4497 
	}
}

4500 
ngx_hâp_mëhod_«me_t
 
	gngx_mëhods_«mes
[] = {

4501 { (
u_ch¨
 *Ë"GET", (
uöt32_t
Ë~
NGX_HTTP_GET
 },

4502 { (
u_ch¨
 *Ë"HEAD", (
uöt32_t
Ë~
NGX_HTTP_HEAD
 },

4503 { (
u_ch¨
 *Ë"POST", (
uöt32_t
Ë~
NGX_HTTP_POST
 },

4504 { (
u_ch¨
 *Ë"PUT", (
uöt32_t
Ë~
NGX_HTTP_PUT
 },

4505 { (
u_ch¨
 *Ë"DELETE", (
uöt32_t
Ë~
NGX_HTTP_DELETE
 },

4506 { (
u_ch¨
 *Ë"MKCOL", (
uöt32_t
Ë~
NGX_HTTP_MKCOL
 },

4507 { (
u_ch¨
 *Ë"COPY", (
uöt32_t
Ë~
NGX_HTTP_COPY
 },

4508 { (
u_ch¨
 *Ë"MOVE", (
uöt32_t
Ë~
NGX_HTTP_MOVE
 },

4509 { (
u_ch¨
 *Ë"OPTIONS", (
uöt32_t
Ë~
NGX_HTTP_OPTIONS
 },

4510 { (
u_ch¨
 *Ë"PROPFIND", (
uöt32_t
Ë~
NGX_HTTP_PROPFIND
 },

4511 { (
u_ch¨
 *Ë"PROPPATCH", (
uöt32_t
Ë~
NGX_HTTP_PROPPATCH
 },

4512 { (
u_ch¨
 *Ë"LOCK", (
uöt32_t
Ë~
NGX_HTTP_LOCK
 },

4513 { (
u_ch¨
 *Ë"UNLOCK", (
uöt32_t
Ë~
NGX_HTTP_UNLOCK
 },

4514 { (
u_ch¨
 *Ë"PATCH", (
uöt32_t
Ë~
NGX_HTTP_PATCH
 },

4515 { 
NULL
, 0 }

4520 
	$ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4522 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
 = 
c⁄f
;

4524 *
rv
;

4525 *
mc⁄f
;

4526 
ngx_°r_t
 *
vÆue
;

4527 
ngx_uöt_t
 
i
;

4528 
ngx_c⁄f_t
 
ßve
;

4529 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4530 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

4531 
ngx_hâp_mëhod_«me_t
 *
«me
;

4532 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4534 i‡(
p˛cf
->
limô_ex˚±
) {

4538 
p˛cf
->
limô_ex˚±
 = 0xffffffff;

4540 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4542 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4543 
«me
 = 
ngx_mëhods_«mes
;Çame->name;Çame++) {

4545 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, 
«me
->name) == 0) {

4546 
p˛cf
->
limô_ex˚±
 &
«me
->
mëhod
;

4547 
√xt
;

4551 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4552 "övÆid mëhod \"%V\"", &
vÆue
[
i
]);

4553  
NGX_CONF_ERROR
;

4555 
√xt
:

4559 i‡(!(
p˛cf
->
limô_ex˚±
 & 
NGX_HTTP_GET
)) {

4560 
p˛cf
->
limô_ex˚±
 &(
uöt32_t
Ë~
NGX_HTTP_HEAD
;

4563 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4564 i‡(
˘x
 =
NULL
) {

4565  
NGX_CONF_ERROR
;

4568 
p˘x
 = 
cf
->
˘x
;

4569 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

4570 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

4572 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4573 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4574  
NGX_CONF_ERROR
;

4577 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

4578 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4582 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

4584 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4586 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4587 i‡(
mc⁄f
 =
NULL
) {

4588  
NGX_CONF_ERROR
;

4591 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

4596 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

4597 
p˛cf
->
limô_ex˚±_loc_c⁄f
 = 
˘x
->
loc_c⁄f
;

4598 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

4599 
˛cf
->
«me
 = 
p˛cf
->name;

4600 
˛cf
->
n⁄ame
 = 1;

4601 
˛cf
->
lmt_ex˝t
 = 1;

4603 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

4604  
NGX_CONF_ERROR
;

4607 
ßve
 = *
cf
;

4608 
cf
->
˘x
 = ctx;

4609 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LMT_CONF
;

4611 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4613 *
cf
 = 
ßve
;

4615  
rv
;

4616 
	}
}

4620 
	$ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4622 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4624 
ngx_°r_t
 *
vÆue
;

4626 i‡(
˛cf
->
dúe˘io
 !
NGX_CONF_UNSET
) {

4630 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4632 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4633 
˛cf
->
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

4634  
NGX_CONF_OK
;

4637 
˛cf
->
dúe˘io
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

4638 i‡(
˛cf
->
dúe˘io
 =(
off_t
Ë
NGX_ERROR
) {

4642  
NGX_CONF_OK
;

4643 
	}
}

4647 
	$ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4649 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4651 
u_ch¨
 *
p
;

4652 
ngx_öt_t
 
ovîwrôe
;

4653 
ngx_°r_t
 *
vÆue
, 
uri
, 
¨gs
;

4654 
ngx_uöt_t
 
i
, 
n
;

4655 
ngx_hâp_îr_∑ge_t
 *
îr
;

4656 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4657 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4659 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4660 
˛cf
->
îr‹_∑ges
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4661 (
ngx_hâp_îr_∑ge_t
));

4662 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4663  
NGX_CONF_ERROR
;

4667 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4669 
i
 = 
cf
->
¨gs
->
√…s
 - 2;

4671 i‡(
vÆue
[
i
].
d©a
[0] == '=') {

4672 i‡(
i
 == 1) {

4673 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4674 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4675  
NGX_CONF_ERROR
;

4678 i‡(
vÆue
[
i
].
Àn
 > 1) {

4679 
ovîwrôe
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[1], vÆue[i].
Àn
 - 1);

4681 i‡(
ovîwrôe
 =
NGX_ERROR
) {

4682 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4683 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4684  
NGX_CONF_ERROR
;

4688 
ovîwrôe
 = 0;

4691 
n
 = 2;

4694 
ovîwrôe
 = -1;

4695 
n
 = 1;

4698 
uri
 = 
vÆue
[
cf
->
¨gs
->
√…s
 - 1];

4700 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4702 
ccv
.
cf
 = cf;

4703 
ccv
.
vÆue
 = &
uri
;

4704 
ccv
.
com∂ex_vÆue
 = &
cv
;

4706 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4707  
NGX_CONF_ERROR
;

4710 
	`ngx_°r_nuŒ
(&
¨gs
);

4712 i‡(
cv
.
Àngths
 =
NULL
 && 
uri
.
Àn
 && uri.
d©a
[0] == '/') {

4713 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
uri
.
d©a
, '?');

4715 i‡(
p
) {

4716 
cv
.
vÆue
.
Àn
 = 
p
 - 
uri
.
d©a
;

4717 
cv
.
vÆue
.
d©a
 = 
uri
.data;

4718 
p
++;

4719 
¨gs
.
Àn
 = (
uri
.
d©a
 + uri.ÀnË- 
p
;

4720 
¨gs
.
d©a
 = 
p
;

4724 
i
 = 1; i < 
cf
->
¨gs
->
√…s
 - 
n
; i++) {

4725 
îr
 = 
	`ngx_¨øy_push
(
˛cf
->
îr‹_∑ges
);

4726 i‡(
îr
 =
NULL
) {

4727  
NGX_CONF_ERROR
;

4730 
îr
->
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

4732 i‡(
îr
->
°©us
 =
NGX_ERROR
 ||Érr->status == 499) {

4733 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4734 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4735  
NGX_CONF_ERROR
;

4738 i‡(
îr
->
°©us
 < 300 ||Érr->status > 599) {

4739 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4741 &
vÆue
[
i
]);

4742  
NGX_CONF_ERROR
;

4745 
îr
->
ovîwrôe
 = overwrite;

4747 i‡(
ovîwrôe
 == -1) {

4748 
îr
->
°©us
) {

4749 
NGX_HTTP_TO_HTTPS
:

4750 
NGX_HTTPS_CERT_ERROR
:

4751 
NGX_HTTPS_NO_CERT
:

4752 
îr
->
ovîwrôe
 = 
NGX_HTTP_BAD_REQUEST
;

4758 
îr
->
vÆue
 = 
cv
;

4759 
îr
->
¨gs
 =árgs;

4762  
NGX_CONF_OK
;

4763 
	}
}

4767 
	$ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4769 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4771 
ngx_°r_t
 *
vÆue
;

4772 
ngx_öt_t
 
code
;

4773 
ngx_uöt_t
 
i
, 
n
;

4774 
ngx_hâp_åy_fûe_t
 *
tf
;

4775 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4776 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

4778 i‡(
˛cf
->
åy_fûes
) {

4782 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

4784 
cmcf
->
åy_fûes
 = 1;

4786 
tf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, cf->
¨gs
->
√…s
 * (
ngx_hâp_åy_fûe_t
));

4787 i‡(
tf
 =
NULL
) {

4788  
NGX_CONF_ERROR
;

4791 
˛cf
->
åy_fûes
 = 
tf
;

4793 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4795 
i
 = 0; i < 
cf
->
¨gs
->
√…s
 - 1; i++) {

4797 
tf
[
i
].
«me
 = 
vÆue
[i + 1];

4799 i‡(
tf
[
i
].
«me
.
Àn
 > 0

4800 && 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
 - 1] == '/')

4802 
tf
[
i
].
ã°_dú
 = 1;

4803 
tf
[
i
].
«me
.
Àn
--;

4804 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
] = '\0';

4807 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
tf
[
i
].
«me
);

4809 i‡(
n
) {

4810 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4812 
sc
.
cf
 = cf;

4813 
sc
.
sour˚
 = &
tf
[
i
].
«me
;

4814 
sc
.
Àngths
 = &
tf
[
i
].lengths;

4815 
sc
.
vÆues
 = &
tf
[
i
].values;

4816 
sc
.
v¨übÀs
 = 
n
;

4817 
sc
.
com∂ëe_Àngths
 = 1;

4818 
sc
.
com∂ëe_vÆues
 = 1;

4820 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4821  
NGX_CONF_ERROR
;

4826 
tf
[
i
].
«me
.
Àn
++;

4830 i‡(
tf
[
i
 - 1].
«me
.
d©a
[0] == '=') {

4832 
code
 = 
	`ngx_©oi
(
tf
[
i
 - 1].
«me
.
d©a
 + 1,Åf[ò- 1].«me.
Àn
 - 2);

4834 i‡(
code
 =
NGX_ERROR
 || code > 999) {

4835 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4837 
tf
[
i
 - 1].
«me
.
Àn
 - 1,Åf[ò- 1].«me.
d©a
);

4838  
NGX_CONF_ERROR
;

4841 
tf
[
i
].
code
 = code;

4844  
NGX_CONF_OK
;

4845 
	}
}

4849 
	$ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4851 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4853 
time_t
 
öa˘ive
;

4854 
ngx_°r_t
 *
vÆue
, 
s
;

4855 
ngx_öt_t
 
max
;

4856 
ngx_uöt_t
 
i
;

4858 i‡(
˛cf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

4862 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4864 
max
 = 0;

4865 
öa˘ive
 = 60;

4867 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4869 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

4871 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

4872 i‡(
max
 <= 0) {

4873 
Áûed
;

4879 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

4881 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

4882 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

4884 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

4885 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

4886 
Áûed
;

4892 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

4894 
˛cf
->
›í_fûe_ˇche
 = 
NULL
;

4899 
Áûed
:

4901 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4903 &
vÆue
[
i
]);

4904  
NGX_CONF_ERROR
;

4907 i‡(
˛cf
->
›í_fûe_ˇche
 =
NULL
) {

4908  
NGX_CONF_OK
;

4911 i‡(
max
 == 0) {

4912 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4914  
NGX_CONF_ERROR
;

4917 
˛cf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

4918 i‡(
˛cf
->
›í_fûe_ˇche
) {

4919  
NGX_CONF_OK
;

4922  
NGX_CONF_ERROR
;

4923 
	}
}

4927 
	$ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4929 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4931  
	`ngx_log_£t_log
(
cf
, &
˛cf
->
îr‹_log
);

4932 
	}
}

4936 
	$ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4938 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4940 
ngx_°r_t
 *
vÆue
;

4942 i‡(
˛cf
->
kì∑live_timeout
 !
NGX_CONF_UNSET_MSEC
) {

4946 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4948 
˛cf
->
kì∑live_timeout
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

4950 i‡(
˛cf
->
kì∑live_timeout
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

4954 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4955  
NGX_CONF_OK
;

4958 
˛cf
->
kì∑live_hódî
 = 
	`ngx_∑r£_time
(&
vÆue
[2], 1);

4960 i‡(
˛cf
->
kì∑live_hódî
 =(
time_t
Ë
NGX_ERROR
) {

4964  
NGX_CONF_OK
;

4965 
	}
}

4969 
	$ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4971 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4973 i‡(
˛cf
->
öã∫Æ
 !
NGX_CONF_UNSET
) {

4977 
˛cf
->
öã∫Æ
 = 1;

4979  
NGX_CONF_OK
;

4980 
	}
}

4984 
	$ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4986 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4988 
ngx_°r_t
 *
vÆue
;

4990 i‡(
˛cf
->
ªsﬁvî
) {

4994 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4996 
˛cf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

4997 i‡(
˛cf
->
ªsﬁvî
 =
NULL
) {

4998  
NGX_CONF_ERROR
;

5001  
NGX_CONF_OK
;

5002 
	}
}

5005 #i‡(
NGX_HTTP_GZIP
)

5008 
	$ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5010 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5012 #i‡(
NGX_PCRE
)

5014 
ngx_°r_t
 *
vÆue
;

5015 
ngx_uöt_t
 
i
;

5016 
ngx_ªgex_ñt_t
 *
ª
;

5017 
ngx_ªgex_compûe_t
 
rc
;

5018 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

5020 i‡(
˛cf
->
gzù_dißbÀ
 =
NGX_CONF_UNSET_PTR
) {

5021 
˛cf
->
gzù_dißbÀ
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

5022 (
ngx_ªgex_ñt_t
));

5023 i‡(
˛cf
->
gzù_dißbÀ
 =
NULL
) {

5024  
NGX_CONF_ERROR
;

5028 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5030 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

5032 
rc
.
poﬁ
 = 
cf
->pool;

5033 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

5034 
rc
.
îr
.
d©a
 = 
îr°r
;

5036 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5038 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

5039 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

5043 #i‡(
NGX_HTTP_DEGRADATION
)

5045 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

5046 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

5052 
ª
 = 
	`ngx_¨øy_push
(
˛cf
->
gzù_dißbÀ
);

5053 i‡(
ª
 =
NULL
) {

5054  
NGX_CONF_ERROR
;

5057 
rc
.
∑âîn
 = 
vÆue
[
i
];

5058 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

5060 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

5061 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

5062  
NGX_CONF_ERROR
;

5065 
ª
->
ªgex
 = 
rc
.regex;

5066 
ª
->
«me
 = 
vÆue
[
i
].
d©a
;

5069  
NGX_CONF_OK
;

5072 
ngx_°r_t
 *
vÆue
;

5073 
ngx_uöt_t
 
i
;

5075 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5077 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5078 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

5079 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

5083 #i‡(
NGX_HTTP_DEGRADATION
)

5085 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

5086 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

5092 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5096  
NGX_CONF_ERROR
;

5099  
NGX_CONF_OK
;

5102 
	}
}

5107 #i‡(
NGX_HAVE_OPENAT
)

5110 
	$ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5112 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5114 
ngx_°r_t
 *
vÆue
;

5115 
ngx_uöt_t
 
i
;

5116 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

5118 i‡(
˛cf
->
dißbÀ_symlöks
 !
NGX_CONF_UNSET_UINT
) {

5122 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5124 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5126 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

5127 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

5131 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "if_not_owner") == 0) {

5132 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_NOTOWNER
;

5136 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "on") == 0) {

5137 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_ON
;

5141 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "from=", 5) == 0) {

5142 
vÆue
[
i
].
Àn
 -= 5;

5143 
vÆue
[
i
].
d©a
 += 5;

5145 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

5147 
ccv
.
cf
 = cf;

5148 
ccv
.
vÆue
 = &vÆue[
i
];

5149 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

5150 (
ngx_hâp_com∂ex_vÆue_t
));

5151 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

5152  
NGX_CONF_ERROR
;

5155 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

5156  
NGX_CONF_ERROR
;

5159 
˛cf
->
dißbÀ_symlöks_‰om
 = 
ccv
.
com∂ex_vÆue
;

5164 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5165 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

5166  
NGX_CONF_ERROR
;

5169 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_CONF_UNSET_UINT
) {

5170 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5173 &
cmd
->
«me
);

5174  
NGX_CONF_ERROR
;

5177 i‡(
cf
->
¨gs
->
√…s
 == 2) {

5178 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NULL
;

5179  
NGX_CONF_OK
;

5182 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NGX_CONF_UNSET_PTR
) {

5183 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5185 &
vÆue
[1], &value[2]);

5186  
NGX_CONF_ERROR
;

5189 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

5190 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5192  
NGX_CONF_ERROR
;

5195  
NGX_CONF_OK
;

5196 
	}
}

5202 
	$ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5204 #i‡(
NGX_FREEBSD
)

5205 
ssize_t
 *
≈
 = 
d©a
;

5207 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

5208 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5211 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

5213  
NGX_CONF_ERROR
;

5216 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

5217 
ssize_t
 *
≈
 = 
d©a
;

5219 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

5222 *
≈
 = 0;

5226  
NGX_CONF_OK
;

5227 
	}
}

5231 
	$ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5233 
size_t
 *
•
 = 
d©a
;

5235 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

5236 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5238 
NGX_MIN_POOL_SIZE
);

5239  
NGX_CONF_ERROR
;

5242 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

5243 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5245 
NGX_POOL_ALIGNMENT
);

5246  
NGX_CONF_ERROR
;

5249  
NGX_CONF_OK
;

5250 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_core_module.h

8 #i‚de‡
_NGX_HTTP_CORE_H_INCLUDED_


9 
	#_NGX_HTTP_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_GZIP_PROXIED_OFF
 0x0002

	)

18 
	#NGX_HTTP_GZIP_PROXIED_EXPIRED
 0x0004

	)

19 
	#NGX_HTTP_GZIP_PROXIED_NO_CACHE
 0x0008

	)

20 
	#NGX_HTTP_GZIP_PROXIED_NO_STORE
 0x0010

	)

21 
	#NGX_HTTP_GZIP_PROXIED_PRIVATE
 0x0020

	)

22 
	#NGX_HTTP_GZIP_PROXIED_NO_LM
 0x0040

	)

23 
	#NGX_HTTP_GZIP_PROXIED_NO_ETAG
 0x0080

	)

24 
	#NGX_HTTP_GZIP_PROXIED_AUTH
 0x0100

	)

25 
	#NGX_HTTP_GZIP_PROXIED_ANY
 0x0200

	)

28 
	#NGX_HTTP_AIO_OFF
 0

	)

29 
	#NGX_HTTP_AIO_ON
 1

	)

30 
	#NGX_HTTP_AIO_SENDFILE
 2

	)

33 
	#NGX_HTTP_SATISFY_ALL
 0

	)

34 
	#NGX_HTTP_SATISFY_ANY
 1

	)

37 
	#NGX_HTTP_LINGERING_OFF
 0

	)

38 
	#NGX_HTTP_LINGERING_ON
 1

	)

39 
	#NGX_HTTP_LINGERING_ALWAYS
 2

	)

42 
	#NGX_HTTP_IMS_OFF
 0

	)

43 
	#NGX_HTTP_IMS_EXACT
 1

	)

44 
	#NGX_HTTP_IMS_BEFORE
 2

	)

47 
	#NGX_HTTP_KEEPALIVE_DISABLE_NONE
 0x0002

	)

48 
	#NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 0x0004

	)

49 
	#NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 0x0008

	)

52 
ngx_hâp_loˇti⁄_åì_node_s
 
	tngx_hâp_loˇti⁄_åì_node_t
;

53 
ngx_hâp_c‹e_loc_c⁄f_s
 
	tngx_hâp_c‹e_loc_c⁄f_t
;

58 
sockaddr
 
	msockaddr
;

59 
sockaddr_ö
 
	msockaddr_ö
;

60 #i‡(
NGX_HAVE_INET6
)

61 
sockaddr_ö6
 
	msockaddr_ö6
;

63 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

64 
sockaddr_un
 
	msockaddr_un
;

66 
u_ch¨
 
	msockaddr_d©a
[
NGX_SOCKADDRLEN
];

67 } 
	mu
;

69 
sockÀn_t
 
	msockÀn
;

71 
	m£t
:1;

72 
	mdeÁu…_£rvî
:1;

73 
	mböd
:1;

74 
	mwûdˇrd
:1;

75 #i‡(
NGX_HTTP_SSL
)

76 
	ms¶
:1;

78 #i‡(
NGX_HTTP_SPDY
)

79 
	m•dy
:1;

81 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

82 
	mùv6⁄ly
:1;

84 
	mso_kì∑live
:2;

85 
	m¥oxy_¥Ÿocﬁ
:1;

87 
	mbacklog
;

88 
	mrcvbuf
;

89 
	m¢dbuf
;

90 #i‡(
NGX_HAVE_SETFIB
)

91 
	m£tfib
;

93 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

94 
	mÁ°›í
;

96 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

97 
	mt˝_kìpidÀ
;

98 
	mt˝_kìpötvl
;

99 
	mt˝_kìp˙t
;

102 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

103 *
	mac˚±_fûãr
;

105 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

106 
ngx_uöt_t
 
	mde„ºed_ac˚±
;

109 
u_ch¨
 
	maddr
[
NGX_SOCKADDR_STRLEN
 + 1];

110 } 
	tngx_hâp_li°í_›t_t
;

114 
	mNGX_HTTP_POST_READ_PHASE
 = 0,

116 
	mNGX_HTTP_SERVER_REWRITE_PHASE
,

118 
	mNGX_HTTP_FIND_CONFIG_PHASE
,

119 
	mNGX_HTTP_REWRITE_PHASE
,

120 
	mNGX_HTTP_POST_REWRITE_PHASE
,

122 
	mNGX_HTTP_PREACCESS_PHASE
,

124 
	mNGX_HTTP_ACCESS_PHASE
,

125 
	mNGX_HTTP_POST_ACCESS_PHASE
,

127 
	mNGX_HTTP_TRY_FILES_PHASE
,

128 
	mNGX_HTTP_CONTENT_PHASE
,

130 
	mNGX_HTTP_LOG_PHASE


131 } 
	tngx_hâp_pha£s
;

133 
ngx_hâp_pha£_h™dÀr_s
 
	tngx_hâp_pha£_h™dÀr_t
;

135 
	$ngx_öt_t
 (*
	tngx_hâp_pha£_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

136 
	tngx_hâp_pha£_h™dÀr_t
 *
	tph
);

138 
	sngx_hâp_pha£_h™dÀr_s
 {

139 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

140 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

141 
ngx_uöt_t
 
√xt
;

146 
ngx_hâp_pha£_h™dÀr_t
 *
h™dÀrs
;

147 
ngx_uöt_t
 
£rvî_ªwrôe_ödex
;

148 
ngx_uöt_t
 
loˇti⁄_ªwrôe_ödex
;

149 } 
	tngx_hâp_pha£_ígöe_t
;

153 
ngx_¨øy_t
 
h™dÀrs
;

154 } 
	tngx_hâp_pha£_t
;

158 
ngx_¨øy_t
 
£rvîs
;

160 
ngx_hâp_pha£_ígöe_t
 
pha£_ígöe
;

162 
ngx_hash_t
 
hódîs_ö_hash
;

164 
ngx_hash_t
 
v¨übÀs_hash
;

166 
ngx_¨øy_t
 
v¨übÀs
;

167 
ngx_uöt_t
 
nˇ±uªs
;

169 
ngx_uöt_t
 
£rvî_«mes_hash_max_size
;

170 
ngx_uöt_t
 
£rvî_«mes_hash_buckë_size
;

172 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

173 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

175 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

177 
ngx_¨øy_t
 *
p‹ts
;

179 
ngx_uöt_t
 
åy_fûes
;

181 
ngx_hâp_pha£_t
 
pha£s
[
NGX_HTTP_LOG_PHASE
 + 1];

182 } 
	tngx_hâp_c‹e_maö_c⁄f_t
;

187 
ngx_¨øy_t
 
£rvî_«mes
;

190 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

192 
ngx_°r_t
 
£rvî_«me
;

194 
size_t
 
c⁄√˘i⁄_poﬁ_size
;

195 
size_t
 
ªque°_poﬁ_size
;

196 
size_t
 
˛õ¡_hódî_buf„r_size
;

198 
ngx_bufs_t
 
œrge_˛õ¡_hódî_buf„rs
;

200 
ngx_m£c_t
 
˛õ¡_hódî_timeout
;

202 
ngx_Êag_t
 
ign‹e_övÆid_hódîs
;

203 
ngx_Êag_t
 
mîge_¶ashes
;

204 
ngx_Êag_t
 
undîsc‹es_ö_hódîs
;

206 
li°í
:1;

207 #i‡(
NGX_PCRE
)

208 
ˇ±uªs
:1;

211 
ngx_hâp_c‹e_loc_c⁄f_t
 **
«med_loˇti⁄s
;

212 } 
	tngx_hâp_c‹e_§v_c⁄f_t
;

219 #i‡(
NGX_PCRE
)

220 
ngx_hâp_ªgex_t
 *
ªgex
;

222 
ngx_hâp_c‹e_§v_c⁄f_t
 *
£rvî
;

223 
ngx_°r_t
 
«me
;

224 } 
	tngx_hâp_£rvî_«me_t
;

228 
ngx_hash_comböed_t
 
«mes
;

230 
ngx_uöt_t
 
ƒegex
;

231 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

232 } 
	tngx_hâp_vútuÆ_«mes_t
;

235 
	sngx_hâp_addr_c⁄f_s
 {

237 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

239 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

241 #i‡(
NGX_HTTP_SSL
)

242 
s¶
:1;

244 #i‡(
NGX_HTTP_SPDY
)

245 
•dy
:1;

247 
¥oxy_¥Ÿocﬁ
:1;

252 
ö_addr_t
 
addr
;

253 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

254 } 
	tngx_hâp_ö_addr_t
;

257 #i‡(
NGX_HAVE_INET6
)

260 
ö6_addr
 
addr6
;

261 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

262 } 
	tngx_hâp_ö6_addr_t
;

269 *
addrs
;

270 
ngx_uöt_t
 
«ddrs
;

271 } 
	tngx_hâp_p‹t_t
;

275 
ngx_öt_t
 
Ámûy
;

276 
ö_p‹t_t
 
p‹t
;

277 
ngx_¨øy_t
 
addrs
;

278 } 
	tngx_hâp_c⁄f_p‹t_t
;

282 
ngx_hâp_li°í_›t_t
 
›t
;

284 
ngx_hash_t
 
hash
;

285 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

286 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

288 #i‡(
NGX_PCRE
)

289 
ngx_uöt_t
 
ƒegex
;

290 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

294 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

295 
ngx_¨øy_t
 
£rvîs
;

296 } 
	tngx_hâp_c⁄f_addr_t
;

300 
ngx_öt_t
 
°©us
;

301 
ngx_öt_t
 
ovîwrôe
;

302 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

303 
ngx_°r_t
 
¨gs
;

304 } 
	tngx_hâp_îr_∑ge_t
;

308 
ngx_¨øy_t
 *
Àngths
;

309 
ngx_¨øy_t
 *
vÆues
;

310 
ngx_°r_t
 
«me
;

312 
code
:10;

313 
ã°_dú
:1;

314 } 
	tngx_hâp_åy_fûe_t
;

317 
	sngx_hâp_c‹e_loc_c⁄f_s
 {

318 
ngx_°r_t
 
«me
;

320 #i‡(
NGX_PCRE
)

321 
ngx_hâp_ªgex_t
 *
ªgex
;

324 
n⁄ame
:1;

325 
lmt_ex˝t
:1;

326 
«med
:1;

328 
exa˘_m©ch
:1;

329 
n‹egex
:1;

331 
auto_ªdúe˘
:1;

332 #i‡(
NGX_HTTP_GZIP
)

333 
gzù_dißbÀ_msõ6
:2;

334 #i‡(
NGX_HTTP_DEGRADATION
)

335 
gzù_dißbÀ_degød©i⁄
:2;

339 
ngx_hâp_loˇti⁄_åì_node_t
 *
°©ic_loˇti⁄s
;

340 #i‡(
NGX_PCRE
)

341 
ngx_hâp_c‹e_loc_c⁄f_t
 **
ªgex_loˇti⁄s
;

345 **
loc_c⁄f
;

347 
uöt32_t
 
limô_ex˚±
;

348 **
limô_ex˚±_loc_c⁄f
;

350 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

353 
size_t
 
Æüs
;

354 
ngx_°r_t
 
roŸ
;

355 
ngx_°r_t
 
po°_a˘i⁄
;

357 
ngx_¨øy_t
 *
roŸ_Àngths
;

358 
ngx_¨øy_t
 *
roŸ_vÆues
;

360 
ngx_¨øy_t
 *
ty≥s
;

361 
ngx_hash_t
 
ty≥s_hash
;

362 
ngx_°r_t
 
deÁu…_ty≥
;

364 
off_t
 
˛õ¡_max_body_size
;

365 
off_t
 
dúe˘io
;

366 
off_t
 
dúe˘io_Æignmít
;

368 
size_t
 
˛õ¡_body_buf„r_size
;

369 
size_t
 
£nd_low©
;

370 
size_t
 
po°p⁄e_ouçut
;

371 
size_t
 
limô_øã
;

372 
size_t
 
limô_øã_a·î
;

373 
size_t
 
£ndfûe_max_chunk
;

374 
size_t
 
ªad_ahód
;

376 
ngx_m£c_t
 
˛õ¡_body_timeout
;

377 
ngx_m£c_t
 
£nd_timeout
;

378 
ngx_m£c_t
 
kì∑live_timeout
;

379 
ngx_m£c_t
 
lögîög_time
;

380 
ngx_m£c_t
 
lögîög_timeout
;

381 
ngx_m£c_t
 
ªsﬁvî_timeout
;

383 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

385 
time_t
 
kì∑live_hódî
;

387 
ngx_uöt_t
 
kì∑live_ªque°s
;

388 
ngx_uöt_t
 
kì∑live_dißbÀ
;

389 
ngx_uöt_t
 
ßtisfy
;

390 
ngx_uöt_t
 
lögîög_˛o£
;

391 
ngx_uöt_t
 
if_modifõd_sö˚
;

392 
ngx_uöt_t
 
max_ønges
;

393 
ngx_uöt_t
 
˛õ¡_body_ö_fûe_⁄ly
;

395 
ngx_Êag_t
 
˛õ¡_body_ö_sögÀ_buf„r
;

397 
ngx_Êag_t
 
öã∫Æ
;

398 
ngx_Êag_t
 
£ndfûe
;

399 #i‡(
NGX_HAVE_FILE_AIO
)

400 
ngx_Êag_t
 
aio
;

402 
ngx_Êag_t
 
t˝_n›ush
;

403 
ngx_Êag_t
 
t˝_nodñay
;

404 
ngx_Êag_t
 
ª£t_timedout_c⁄√˘i⁄
;

405 
ngx_Êag_t
 
£rvî_«me_ö_ªdúe˘
;

406 
ngx_Êag_t
 
p‹t_ö_ªdúe˘
;

407 
ngx_Êag_t
 
msõ_∑ddög
;

408 
ngx_Êag_t
 
msõ_ª‰esh
;

409 
ngx_Êag_t
 
log_nŸ_found
;

410 
ngx_Êag_t
 
log_subªque°
;

411 
ngx_Êag_t
 
ªcursive_îr‹_∑ges
;

412 
ngx_Êag_t
 
£rvî_tokís
;

413 
ngx_Êag_t
 
chunked_å™s„r_ícodög
;

414 
ngx_Êag_t
 
ëag
;

416 #i‡(
NGX_HTTP_GZIP
)

417 
ngx_Êag_t
 
gzù_v¨y
;

419 
ngx_uöt_t
 
gzù_hâp_vîsi⁄
;

420 
ngx_uöt_t
 
gzù_¥oxõd
;

422 #i‡(
NGX_PCRE
)

423 
ngx_¨øy_t
 *
gzù_dißbÀ
;

427 #i‡(
NGX_HAVE_OPENAT
)

428 
ngx_uöt_t
 
dißbÀ_symlöks
;

429 
ngx_hâp_com∂ex_vÆue_t
 *
dißbÀ_symlöks_‰om
;

432 
ngx_¨øy_t
 *
îr‹_∑ges
;

433 
ngx_hâp_åy_fûe_t
 *
åy_fûes
;

435 
ngx_∑th_t
 *
˛õ¡_body_ãmp_∑th
;

437 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

438 
time_t
 
›í_fûe_ˇche_vÆid
;

439 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

440 
ngx_Êag_t
 
›í_fûe_ˇche_îr‹s
;

441 
ngx_Êag_t
 
›í_fûe_ˇche_evíts
;

443 
ngx_log_t
 *
îr‹_log
;

445 
ngx_uöt_t
 
ty≥s_hash_max_size
;

446 
ngx_uöt_t
 
ty≥s_hash_buckë_size
;

448 
ngx_queue_t
 *
loˇti⁄s
;

451 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev_loˇti⁄
;

457 
ngx_queue_t
 
queue
;

458 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

459 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

460 
ngx_°r_t
 *
«me
;

461 
u_ch¨
 *
fûe_«me
;

462 
ngx_uöt_t
 
löe
;

463 
ngx_queue_t
 
li°
;

464 } 
	tngx_hâp_loˇti⁄_queue_t
;

467 
	sngx_hâp_loˇti⁄_åì_node_s
 {

468 
ngx_hâp_loˇti⁄_åì_node_t
 *
À·
;

469 
ngx_hâp_loˇti⁄_åì_node_t
 *
right
;

470 
ngx_hâp_loˇti⁄_åì_node_t
 *
åì
;

472 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

473 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

475 
u_ch¨
 
auto_ªdúe˘
;

476 
u_ch¨
 
Àn
;

477 
u_ch¨
 
«me
[1];

481 
	`ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
);

482 
ngx_öt_t
 
	`ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
,

483 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

484 
ngx_öt_t
 
	`ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

485 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

486 
ngx_öt_t
 
	`ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

487 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

488 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

489 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

490 
ngx_öt_t
 
	`ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

491 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

492 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

493 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

494 
ngx_öt_t
 
	`ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

495 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

496 
ngx_öt_t
 
	`ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

497 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

500 *
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
);

501 
ngx_öt_t
 
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
);

502 
	`ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
);

503 
ngx_öt_t
 
	`ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
);

504 
ngx_öt_t
 
	`ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

505 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
);

506 
u_ch¨
 *
	`ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

507 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
);

508 
ngx_öt_t
 
	`ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
);

509 #i‡(
NGX_HTTP_GZIP
)

510 
ngx_öt_t
 
	`ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
);

514 
ngx_öt_t
 
	`ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

515 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
§
,

516 
ngx_hâp_po°_subªque°_t
 *
p§
, 
ngx_uöt_t
 
Êags
);

517 
ngx_öt_t
 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

518 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
);

519 
ngx_öt_t
 
	`ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

522 
ngx_hâp_˛ónup_t
 *
	`ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
);

525 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_hódî_fûãr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

526 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_body_fûãr_±
)

527 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

530 
ngx_öt_t
 
	`ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

531 
ngx_öt_t
 
	`ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

534 
ngx_öt_t
 
	`ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

535 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
);

537 
ngx_öt_t
 
	`ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

538 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

539 
ªcursive
);

542 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

544 
ngx_uöt_t
 
ngx_hâp_max_moduÀ
;

546 
ngx_°r_t
 
ngx_hâp_c‹e_gë_mëhod
;

549 
	#ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
) \

551 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1; \

552 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) { \

553 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0; \

554 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
; \

555 
	}

	)
}

557 
	#ngx_hâp_˛ór_ac˚±_ønges
(
r
) \

559 
r
->
Ælow_ønges
 = 0; \

560 i‡(
r
->
hódîs_out
.
ac˚±_ønges
) { \

561 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 0; \

562 
r
->
hódîs_out
.
ac˚±_ønges
 = 
NULL
; \

563 }

	)

565 
	#ngx_hâp_˛ór_œ°_modifõd
(
r
) \

567 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1; \

568 i‡(
r
->
hódîs_out
.
œ°_modifõd
) { \

569 
r
->
hódîs_out
.
œ°_modifõd
->
hash
 = 0; \

570 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
; \

571 }

	)

573 
	#ngx_hâp_˛ór_loˇti⁄
(
r
) \

575 i‡(
r
->
hódîs_out
.
loˇti⁄
) { \

576 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0; \

577 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
; \

578 }

	)

580 
	#ngx_hâp_˛ór_ëag
(
r
) \

582 i‡(
r
->
hódîs_out
.
ëag
) { \

583 
r
->
hódîs_out
.
ëag
->
hash
 = 0; \

584 
r
->
hódîs_out
.
ëag
 = 
NULL
; \

585 }

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

14 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_ˇche_t
 *
c
);

16 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
);

17 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_hâp_ˇche_t
 *
c
);

19 
ssize_t
 
ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
,

20 
ngx_hâp_ˇche_t
 *
c
);

21 #i‡(
NGX_HAVE_FILE_AIO
)

22 
ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

24 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

25 
ngx_hâp_ˇche_t
 *
c
);

26 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_∑th_t
 *
∑th
);

28 
ngx_hâp_fûe_ˇche_node_t
 *

29 
ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
);

30 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

31 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

32 
ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
);

33 
time_t
 
ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

34 
time_t
 
ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

35 
ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

36 
ngx_queue_t
 *
q
, 
u_ch¨
 *
«me
);

37 
ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

38 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
,

39 
ngx_°r_t
 *
∑th
);

40 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
,

41 
ngx_°r_t
 *
∑th
);

42 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
,

43 
ngx_°r_t
 *
∑th
);

44 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

45 
ngx_hâp_ˇche_t
 *
c
);

46 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
,

47 
ngx_°r_t
 *
∑th
);

50 
ngx_°r_t
 
	gngx_hâp_ˇche_°©us
[] = {

51 
ngx_°rög
("MISS"),

52 
ngx_°rög
("BYPASS"),

53 
ngx_°rög
("EXPIRED"),

54 
ngx_°rög
("STALE"),

55 
ngx_°rög
("UPDATING"),

56 
ngx_°rög
("REVALIDATED"),

57 
ngx_°rög
("HIT")

61 
u_ch¨
 
	gngx_hâp_fûe_ˇche_key
[] = { 
LF
, 'K', 'E', 'Y', ':', ' ' };

64 
ngx_öt_t


65 
	$ngx_hâp_fûe_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

67 
ngx_hâp_fûe_ˇche_t
 *
oˇche
 = 
d©a
;

69 
size_t
 
Àn
;

70 
ngx_uöt_t
 
n
;

71 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

73 
ˇche
 = 
shm_z⁄e
->
d©a
;

75 i‡(
oˇche
) {

76 i‡(
	`ngx_°rcmp
(
ˇche
->
∑th
->
«me
.
d©a
, 
oˇche
->path->name.data) != 0) {

77 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

80 &
shm_z⁄e
->
shm
.
«me
, &
ˇche
->
∑th
->name,

81 &
oˇche
->
∑th
->
«me
);

83  
NGX_ERROR
;

86 
n
 = 0;Ç < 3;Ç++) {

87 i‡(
ˇche
->
∑th
->
Àvñ
[
n
] !
oˇche
->path->level[n]) {

88 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

90 &
shm_z⁄e
->
shm
.
«me
);

91  
NGX_ERROR
;

95 
ˇche
->
sh
 = 
oˇche
->sh;

97 
ˇche
->
shpoﬁ
 = 
oˇche
->shpool;

98 
ˇche
->
bsize
 = 
oˇche
->bsize;

100 
ˇche
->
max_size
 /ˇche->
bsize
;

102 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

103 
ˇche
->
∑th
->
lﬂdî
 = 
NULL
;

106  
NGX_OK
;

109 
ˇche
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

111 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

112 
ˇche
->
sh
 = cache->
shpoﬁ
->
d©a
;

113 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

115  
NGX_OK
;

118 
ˇche
->
sh
 = 
	`ngx_¶ab_Æloc
(ˇche->
shpoﬁ
, (
ngx_hâp_fûe_ˇche_sh_t
));

119 i‡(
ˇche
->
sh
 =
NULL
) {

120  
NGX_ERROR
;

123 
ˇche
->
shpoﬁ
->
d©a
 = cache->
sh
;

125 
	`ngx_rbåì_öô
(&
ˇche
->
sh
->
rbåì
, &ˇche->sh->
£¡öñ
,

126 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
);

128 
	`ngx_queue_öô
(&
ˇche
->
sh
->
queue
);

130 
ˇche
->
sh
->
cﬁd
 = 1;

131 
ˇche
->
sh
->
lﬂdög
 = 0;

132 
ˇche
->
sh
->
size
 = 0;

134 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

136 
ˇche
->
max_size
 /ˇche->
bsize
;

138 
Àn
 = (" i¿ˇchêkey†z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

140 
ˇche
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(ˇche->shpoﬁ, 
Àn
);

141 i‡(
ˇche
->
shpoﬁ
->
log_˘x
 =
NULL
) {

142  
NGX_ERROR
;

145 
	`ngx_•rötf
(
ˇche
->
shpoﬁ
->
log_˘x
, " in cache keys zone \"%V\"%Z",

146 &
shm_z⁄e
->
shm
.
«me
);

148  
NGX_OK
;

149 
	}
}

152 
ngx_öt_t


153 
	$ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
)

155 
ngx_hâp_ˇche_t
 *
c
;

157 
c
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ˇche_t
));

158 i‡(
c
 =
NULL
) {

159  
NGX_ERROR
;

162 i‡(
	`ngx_¨øy_öô
(&
c
->
keys
, 
r
->
poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
) {

163  
NGX_ERROR
;

166 
r
->
ˇche
 = 
c
;

167 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

168 
c
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

170  
NGX_OK
;

171 
	}
}

174 
ngx_öt_t


175 
	$ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

177 
ngx_hâp_ˇche_t
 *
c
;

178 
ngx_poﬁ_˛ónup_t
 *
˛n
;

179 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

181 
c
 = 
r
->
ˇche
;

182 
ˇche
 = 
c
->
fûe_ˇche
;

184 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

185 i‡(
˛n
 =
NULL
) {

186  
NGX_ERROR
;

189 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

190 
˛n
->
d©a
 = 
c
;

192 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

193  
NGX_ERROR
;

196 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

197  
NGX_ERROR
;

200  
NGX_OK
;

201 
	}
}

205 
	$ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

207 
size_t
 
Àn
;

208 
ngx_°r_t
 *
key
;

209 
ngx_uöt_t
 
i
;

210 
ngx_md5_t
 
md5
;

211 
ngx_hâp_ˇche_t
 *
c
;

213 
c
 = 
r
->
ˇche
;

215 
Àn
 = 0;

217 
	`ngx_¸c32_öô
(
c
->
¸c32
);

218 
	`ngx_md5_öô
(&
md5
);

220 
key
 = 
c
->
keys
.
ñts
;

221 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

222 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

223 "hâ∞ˇchêkey: \"%V\"", &
key
[
i
]);

225 
Àn
 +
key
[
i
].len;

227 
	`ngx_¸c32_upd©e
(&
c
->
¸c32
, 
key
[
i
].
d©a
, key[i].
Àn
);

228 
	`ngx_md5_upd©e
(&
md5
, 
key
[
i
].
d©a
, key[i].
Àn
);

231 
c
->
hódî_°¨t
 = (
ngx_hâp_fûe_ˇche_hódî_t
)

232 + (
ngx_hâp_fûe_ˇche_key
Ë+ 
Àn
 + 1;

234 
	`ngx_¸c32_föÆ
(
c
->
¸c32
);

235 
	`ngx_md5_föÆ
(
c
->
key
, &
md5
);

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
)

242 
ngx_öt_t
 
rc
, 
rv
;

243 
ngx_uöt_t
 
cﬁd
, 
ã°
;

244 
ngx_hâp_ˇche_t
 *
c
;

245 
ngx_poﬁ_˛ónup_t
 *
˛n
;

246 
ngx_›í_fûe_öfo_t
 
of
;

247 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

248 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

250 
c
 = 
r
->
ˇche
;

252 i‡(
c
->
waôög
) {

253  
NGX_AGAIN
;

256 i‡(
c
->
buf
) {

257  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

260 
ˇche
 = 
c
->
fûe_ˇche
;

262 i‡(
c
->
node
 =
NULL
) {

263 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

264 i‡(
˛n
 =
NULL
) {

265  
NGX_ERROR
;

268 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

269 
˛n
->
d©a
 = 
c
;

272 
rc
 = 
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
);

274 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

275 "hâ∞fûêˇchêexi°s: %òe:%d", 
rc
, 
c
->
exi°s
);

277 i‡(
rc
 =
NGX_ERROR
) {

278  
rc
;

281 i‡(
rc
 =
NGX_AGAIN
) {

282  
NGX_HTTP_CACHE_SCARCE
;

285 
cﬁd
 = 
ˇche
->
sh
->cold;

287 i‡(
rc
 =
NGX_OK
) {

289 i‡(
c
->
îr‹
) {

290  
c
->
îr‹
;

293 
c
->
ãmp_fûe
 = 1;

294 
ã°
 = 
c
->
exi°s
 ? 1 : 0;

295 
rv
 = 
NGX_DECLINED
;

299 i‡(
c
->
mö_u£s
 > 1) {

301 i‡(!
cﬁd
) {

302  
NGX_HTTP_CACHE_SCARCE
;

305 
ã°
 = 1;

306 
rv
 = 
NGX_HTTP_CACHE_SCARCE
;

309 
c
->
ãmp_fûe
 = 1;

310 
ã°
 = 
cﬁd
 ? 1 : 0;

311 
rv
 = 
NGX_DECLINED
;

315 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

316  
NGX_ERROR
;

319 i‡(!
ã°
) {

320 
d⁄e
;

323 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

325 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

327 
of
.
uniq
 = 
c
->uniq;

328 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

329 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

330 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

331 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

332 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

334 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
c
->
fûe
.
«me
, &
of
, 
r
->
poﬁ
)

335 !
NGX_OK
)

337 
of
.
îr
) {

340  
NGX_ERROR
;

342 
NGX_ENOENT
:

343 
NGX_ENOTDIR
:

344 
d⁄e
;

347 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

348 
ngx_›í_fûe_n
 " \"%s\" faûed", 
c
->
fûe
.
«me
.
d©a
);

349  
NGX_ERROR
;

353 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

354 "hâ∞fûêˇchêfd: %d", 
of
.
fd
);

356 
c
->
fûe
.
fd
 = 
of
.fd;

357 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

358 
c
->
uniq
 = 
of
.uniq;

359 
c
->
Àngth
 = 
of
.
size
;

360 
c
->
fs_size
 = (
of
.fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

362 
c
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, c->
body_°¨t
);

363 i‡(
c
->
buf
 =
NULL
) {

364  
NGX_ERROR
;

367  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

369 
d⁄e
:

371 i‡(
rv
 =
NGX_DECLINED
) {

372  
	`ngx_hâp_fûe_ˇche_lock
(
r
, 
c
);

375  
rv
;

376 
	}
}

379 
ngx_öt_t


380 
	$ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

382 
ngx_m£c_t
 
now
, 
timî
;

383 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

385 i‡(!
c
->
lock
) {

386  
NGX_DECLINED
;

389 
ˇche
 = 
c
->
fûe_ˇche
;

391 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

393 i‡(!
c
->
node
->
upd©ög
) {

394 
c
->
node
->
upd©ög
 = 1;

395 
c
->
upd©ög
 = 1;

398 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

400 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

402 
c
->
upd©ög
, c->
waô_time
);

404 i‡(
c
->
upd©ög
) {

405  
NGX_DECLINED
;

408 
c
->
waôög
 = 1;

410 
now
 = 
ngx_cuºít_m£c
;

412 i‡(
c
->
waô_time
 == 0) {

413 
c
->
waô_time
 = 
now
 + c->
lock_timeout
;

415 
c
->
waô_evít
.
h™dÀr
 = 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
;

416 
c
->
waô_evít
.
d©a
 = 
r
;

417 
c
->
waô_evít
.
log
 = 
r
->
c⁄√˘i⁄
->log;

420 
timî
 = 
c
->
waô_time
 - 
now
;

422 
	`ngx_add_timî
(&
c
->
waô_evít
, (
timî
 > 500) ? 500 :Åimer);

424 
r
->
maö
->
blocked
++;

426  
NGX_AGAIN
;

427 
	}
}

431 
	$ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
)

433 
ngx_uöt_t
 
waô
;

434 
ngx_m£c_t
 
timî
;

435 
ngx_hâp_ˇche_t
 *
c
;

436 
ngx_hâp_ªque°_t
 *
r
;

437 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

439 
r
 = 
ev
->
d©a
;

440 
c
 = 
r
->
ˇche
;

442 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

444 
c
->
waô_time
, 
ngx_cuºít_m£c
);

446 
timî
 = 
c
->
waô_time
 - 
ngx_cuºít_m£c
;

448 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

449 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 0, "cacheÜockÅimeout");

450 
c
->
lock
 = 0;

451 
wakeup
;

454 
ˇche
 = 
c
->
fûe_ˇche
;

455 
waô
 = 0;

457 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

459 i‡(
c
->
node
->
upd©ög
) {

460 
waô
 = 1;

463 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

465 i‡(
waô
) {

466 
	`ngx_add_timî
(
ev
, (
timî
 > 500) ? 500 :Åimer);

470 
wakeup
:

472 
c
->
waôög
 = 0;

473 
r
->
maö
->
blocked
--;

474 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

481 
time_t
 
now
;

482 
ssize_t
 
n
;

483 
ngx_öt_t
 
rc
;

484 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

485 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
;

487 
n
 = 
	`ngx_hâp_fûe_ˇche_aio_ªad
(
r
, 
c
);

489 i‡(
n
 < 0) {

490  
n
;

493 i‡((
size_t
Ë
n
 < 
c
->
hódî_°¨t
) {

494 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

495 "ˇchêfûê\"%s\" i†toÿsmÆl", 
c
->
fûe
.
«me
.
d©a
);

496  
NGX_DECLINED
;

499 
h
 = (
ngx_hâp_fûe_ˇche_hódî_t
 *Ë
c
->
buf
->
pos
;

501 i‡(
h
->
¸c32
 !
c
->crc32) {

502 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

503 "ˇchêfûê\"%s\" ha†md5 cﬁlisi⁄", 
c
->
fûe
.
«me
.
d©a
);

504  
NGX_DECLINED
;

507 i‡((
size_t
Ë
h
->
body_°¨t
 > 
c
->body_start) {

508 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

510 
c
->
fûe
.
«me
.
d©a
);

511  
NGX_DECLINED
;

514 
c
->
buf
->
œ°
 +
n
;

516 
c
->
vÆid_£c
 = 
h
->valid_sec;

517 
c
->
œ°_modifõd
 = 
h
->last_modified;

518 
c
->
d©e
 = 
h
->date;

519 
c
->
vÆid_m£c
 = 
h
->valid_msec;

520 
c
->
hódî_°¨t
 = 
h
->header_start;

521 
c
->
body_°¨t
 = 
h
->body_start;

523 
r
->
ˇched
 = 1;

525 
ˇche
 = 
c
->
fûe_ˇche
;

527 i‡(
ˇche
->
sh
->
cﬁd
) {

529 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

531 i‡(!
c
->
node
->
exi°s
) {

532 
c
->
node
->
u£s
 = 1;

533 
c
->
node
->
body_°¨t
 = c->body_start;

534 
c
->
node
->
exi°s
 = 1;

535 
c
->
node
->
uniq
 = c->uniq;

536 
c
->
node
->
fs_size
 = c->fs_size;

538 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

541 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

544 
now
 = 
	`ngx_time
();

546 i‡(
c
->
vÆid_£c
 < 
now
) {

548 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

550 i‡(
c
->
node
->
upd©ög
) {

551 
rc
 = 
NGX_HTTP_CACHE_UPDATING
;

554 
c
->
node
->
upd©ög
 = 1;

555 
c
->
upd©ög
 = 1;

556 
rc
 = 
NGX_HTTP_CACHE_STALE
;

559 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

561 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

563 
rc
, 
c
->
vÆid_£c
, 
now
);

565  
rc
;

568  
NGX_OK
;

569 
	}
}

572 
ssize_t


573 
	$ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

575 #i‡(
NGX_HAVE_FILE_AIO
)

576 
ssize_t
 
n
;

577 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

579 i‡(!
ngx_fûe_aio
) {

580 
nﬂio
;

583 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

585 i‡(!
˛cf
->
aio
) {

586 
nﬂio
;

589 
n
 = 
	`ngx_fûe_aio_ªad
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0, 
r
->
poﬁ
);

591 i‡(
n
 !
NGX_AGAIN
) {

592  
n
;

595 
c
->
fûe
.
aio
->
d©a
 = 
r
;

596 
c
->
fûe
.
aio
->
h™dÀr
 = 
ngx_hâp_ˇche_aio_evít_h™dÀr
;

598 
r
->
maö
->
blocked
++;

599 
r
->
aio
 = 1;

601  
NGX_AGAIN
;

603 
nﬂio
:

607  
	`ngx_ªad_fûe
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0);

608 
	}
}

611 #i‡(
NGX_HAVE_FILE_AIO
)

614 
	$ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

616 
ngx_evít_aio_t
 *
aio
;

617 
ngx_hâp_ªque°_t
 *
r
;

619 
aio
 = 
ev
->
d©a
;

620 
r
 = 
aio
->
d©a
;

622 
r
->
maö
->
blocked
--;

623 
r
->
aio
 = 0;

625 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

626 
	}
}

631 
ngx_öt_t


632 
	$ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

634 
ngx_öt_t
 
rc
;

635 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

637 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

639 
f˙
 = 
c
->
node
;

641 i‡(
f˙
 =
NULL
) {

642 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

645 i‡(
f˙
) {

646 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

648 i‡(
c
->
node
 =
NULL
) {

649 
f˙
->
u£s
++;

650 
f˙
->
cou¡
++;

653 i‡(
f˙
->
îr‹
) {

655 i‡(
f˙
->
vÆid_£c
 < 
	`ngx_time
()) {

656 
ª√w
;

659 
rc
 = 
NGX_OK
;

661 
d⁄e
;

664 i‡(
f˙
->
exi°s
 || f˙->
u£s
 >
c
->
mö_u£s
) {

666 
c
->
exi°s
 = 
f˙
->exists;

667 i‡(
f˙
->
body_°¨t
) {

668 
c
->
body_°¨t
 = 
f˙
->body_start;

671 
rc
 = 
NGX_OK
;

673 
d⁄e
;

676 
rc
 = 
NGX_AGAIN
;

678 
d⁄e
;

681 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

682 (
ngx_hâp_fûe_ˇche_node_t
));

683 i‡(
f˙
 =
NULL
) {

684 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

686 (Ë
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

688 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

690 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

691 (
ngx_hâp_fûe_ˇche_node_t
));

692 i‡(
f˙
 =
NULL
) {

693 
rc
 = 
NGX_ERROR
;

694 
Áûed
;

698 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

700 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

701 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

703 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

705 
f˙
->
u£s
 = 1;

706 
f˙
->
cou¡
 = 1;

707 
f˙
->
upd©ög
 = 0;

708 
f˙
->
dñëög
 = 0;

710 
ª√w
:

712 
rc
 = 
NGX_DECLINED
;

714 
f˙
->
vÆid_m£c
 = 0;

715 
f˙
->
îr‹
 = 0;

716 
f˙
->
exi°s
 = 0;

717 
f˙
->
vÆid_£c
 = 0;

718 
f˙
->
uniq
 = 0;

719 
f˙
->
body_°¨t
 = 0;

720 
f˙
->
fs_size
 = 0;

722 
d⁄e
:

724 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

726 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

728 
c
->
uniq
 = 
f˙
->uniq;

729 
c
->
îr‹
 = 
f˙
->error;

730 
c
->
node
 = 
f˙
;

732 
Áûed
:

734 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

736  
rc
;

737 
	}
}

740 
ngx_öt_t


741 
	$ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_∑th_t
 *
∑th
)

743 
u_ch¨
 *
p
;

744 
ngx_hâp_ˇche_t
 *
c
;

746 
c
 = 
r
->
ˇche
;

748 i‡(
c
->
fûe
.
«me
.
Àn
) {

749  
NGX_OK
;

752 
c
->
fûe
.
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len

753 + 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

755 
c
->
fûe
.
«me
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, c->fûe.«me.
Àn
 + 1);

756 i‡(
c
->
fûe
.
«me
.
d©a
 =
NULL
) {

757  
NGX_ERROR
;

760 
	`ngx_mem˝y
(
c
->
fûe
.
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

762 
p
 = 
c
->
fûe
.
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

763 
p
 = 
	`ngx_hex_dump
’, 
c
->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

764 *
p
 = '\0';

766 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
c
->
fûe
.
«me
.
d©a
, c->fûe.«me.
Àn
);

768 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

769 "ˇchêfûe: \"%s\"", 
c
->
fûe
.
«me
.
d©a
);

771  
NGX_OK
;

772 
	}
}

775 
ngx_hâp_fûe_ˇche_node_t
 *

776 
	$ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
)

778 
ngx_öt_t
 
rc
;

779 
ngx_rbåì_key_t
 
node_key
;

780 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

781 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

783 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
node_key
, 
key
, (
ngx_rbåì_key_t
));

785 
node
 = 
ˇche
->
sh
->
rbåì
.
roŸ
;

786 
£¡öñ
 = 
ˇche
->
sh
->
rbåì
.sentinel;

788 
node
 !
£¡öñ
) {

790 i‡(
node_key
 < 
node
->
key
) {

791 
node
 =Çode->
À·
;

795 i‡(
node_key
 > 
node
->
key
) {

796 
node
 =Çode->
right
;

802 
f˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

804 
rc
 = 
	`ngx_memcmp
(&
key
[(
ngx_rbåì_key_t
)], 
f˙
->key,

805 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

807 i‡(
rc
 == 0) {

808  
f˙
;

811 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

816  
NULL
;

817 
	}
}

821 
	$ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

822 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

824 
ngx_rbåì_node_t
 **
p
;

825 
ngx_hâp_fûe_ˇche_node_t
 *
˙
, *
˙t
;

829 i‡(
node
->
key
 < 
ãmp
->key) {

831 
p
 = &
ãmp
->
À·
;

833 } i‡(
node
->
key
 > 
ãmp
->key) {

835 
p
 = &
ãmp
->
right
;

839 
˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

840 
˙t
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
ãmp
;

842 
p
 = (
	`ngx_memcmp
(
˙
->
key
, 
˙t
->key,

843 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
))

845 ? &
ãmp
->
À·
 : &ãmp->
right
;

848 i‡(*
p
 =
£¡öñ
) {

852 
ãmp
 = *
p
;

855 *
p
 = 
node
;

856 
node
->
∑ª¡
 = 
ãmp
;

857 
node
->
À·
 = 
£¡öñ
;

858 
node
->
right
 = 
£¡öñ
;

859 
	`ngx_rbt_ªd
(
node
);

860 
	}
}

864 
	$ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
)

866 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
 = (ngx_hâp_fûe_ˇche_hódî_à*Ë
buf
;

868 
u_ch¨
 *
p
;

869 
ngx_°r_t
 *
key
;

870 
ngx_uöt_t
 
i
;

871 
ngx_hâp_ˇche_t
 *
c
;

873 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

876 
c
 = 
r
->
ˇche
;

878 
	`ngx_memzîo
(
h
, (
ngx_hâp_fûe_ˇche_hódî_t
));

880 
h
->
vÆid_£c
 = 
c
->valid_sec;

881 
h
->
œ°_modifõd
 = 
c
->last_modified;

882 
h
->
d©e
 = 
c
->date;

883 
h
->
¸c32
 = 
c
->crc32;

884 
h
->
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

885 
h
->
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

886 
h
->
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

888 
p
 = 
buf
 + (
ngx_hâp_fûe_ˇche_hódî_t
);

890 
p
 = 
	`ngx_˝ymem
’, 
ngx_hâp_fûe_ˇche_key
, (ngx_http_file_cache_key));

892 
key
 = 
c
->
keys
.
ñts
;

893 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

894 
p
 = 
	`ngx_c›y
’, 
key
[
i
].
d©a
, key[i].
Àn
);

897 *
p
 = 
LF
;

898 
	}
}

902 
	$ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
)

904 
off_t
 
fs_size
;

905 
ngx_öt_t
 
rc
;

906 
ngx_fûe_uniq_t
 
uniq
;

907 
ngx_fûe_öfo_t
 
fi
;

908 
ngx_hâp_ˇche_t
 *
c
;

909 
ngx_ext_ª«me_fûe_t
 
ext
;

910 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

912 
c
 = 
r
->
ˇche
;

914 i‡(
c
->
upd©ed
) {

918 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

921 
c
->
upd©ed
 = 1;

922 
c
->
upd©ög
 = 0;

924 
ˇche
 = 
c
->
fûe_ˇche
;

926 
uniq
 = 0;

927 
fs_size
 = 0;

929 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

931 
tf
->
fûe
.
«me
.
d©a
, 
c
->file.name.data);

933 
ext
.
ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

934 
ext
.
∑th_ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

935 
ext
.
time
 = -1;

936 
ext
.
¸óã_∑th
 = 1;

937 
ext
.
dñëe_fûe
 = 1;

938 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

940 
rc
 = 
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
c
->fûe.«me, &
ext
);

942 i‡(
rc
 =
NGX_OK
) {

944 i‡(
	`ngx_fd_öfo
(
tf
->
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

945 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

946 
ngx_fd_öfo_n
 " \"%s\" faûed", 
tf
->
fûe
.
«me
.
d©a
);

948 
rc
 = 
NGX_ERROR
;

951 
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

952 
fs_size
 = (
	`ngx_fûe_fs_size
(&
fi
Ë+ 
ˇche
->
bsize
 - 1) / cache->bsize;

956 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

958 
c
->
node
->
cou¡
--;

959 
c
->
node
->
uniq
 = uniq;

960 
c
->
node
->
body_°¨t
 = c->body_start;

962 
ˇche
->
sh
->
size
 +
fs_size
 - 
c
->
node
->fs_size;

963 
c
->
node
->
fs_size
 = fs_size;

965 i‡(
rc
 =
NGX_OK
) {

966 
c
->
node
->
exi°s
 = 1;

969 
c
->
node
->
upd©ög
 = 0;

971 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

972 
	}
}

976 
	$ngx_hâp_fûe_ˇche_upd©e_hódî
(
ngx_hâp_ªque°_t
 *
r
)

978 
ssize_t
 
n
;

979 
ngx_îr_t
 
îr
;

980 
ngx_fûe_t
 
fûe
;

981 
ngx_fûe_öfo_t
 
fi
;

982 
ngx_hâp_ˇche_t
 *
c
;

983 
ngx_hâp_fûe_ˇche_hódî_t
 
h
;

985 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

988 
c
 = 
r
->
ˇche
;

990 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

992 
fûe
.
«me
 = 
c
->file.name;

993 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

994 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

996 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

997 
îr
 = 
ngx_î∫o
;

1001 i‡(
îr
 =
NGX_ENOENT
) {

1002 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1004 
fûe
.
«me
.
d©a
);

1008 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

1009 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1018 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1019 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1020 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1021 
d⁄e
;

1024 i‡(
c
->
uniq
 !
	`ngx_fûe_uniq
(&
fi
)

1025 || 
c
->
Àngth
 !
	`ngx_fûe_size
(&
fi
))

1027 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1029 
fûe
.
«me
.
d©a
);

1030 
d⁄e
;

1033 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, (
u_ch¨
 *Ë&
h
,

1034 (
ngx_hâp_fûe_ˇche_hódî_t
), 0);

1036 i‡(
n
 =
NGX_ERROR
) {

1037 
d⁄e
;

1040 i‡((
size_t
Ë
n
 !(
ngx_hâp_fûe_ˇche_hódî_t
)) {

1041 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1042 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

1043 
n
, (
ngx_hâp_fûe_ˇche_hódî_t
), 
fûe
.
«me
.
d©a
);

1044 
d⁄e
;

1047 i‡(
h
.
œ°_modifõd
 !
c
->last_modified

1048 || 
h
.
¸c32
 !
c
->crc32

1049 || 
h
.
hódî_°¨t
 !
c
->header_start

1050 || 
h
.
body_°¨t
 !
c
->body_start)

1052 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1054 
fûe
.
«me
.
d©a
);

1055 
d⁄e
;

1063 
	`ngx_memzîo
(&
h
, (
ngx_hâp_fûe_ˇche_hódî_t
));

1065 
h
.
vÆid_£c
 = 
c
->valid_sec;

1066 
h
.
œ°_modifõd
 = 
c
->last_modified;

1067 
h
.
d©e
 = 
c
->date;

1068 
h
.
¸c32
 = 
c
->crc32;

1069 
h
.
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

1070 
h
.
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

1071 
h
.
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

1073 (Ë
	`ngx_wrôe_fûe
(&
fûe
, (
u_ch¨
 *Ë&
h
,

1074 (
ngx_hâp_fûe_ˇche_hódî_t
), 0);

1076 
d⁄e
:

1078 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1079 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1080 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1082 
	}
}

1085 
ngx_öt_t


1086 
	$ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
)

1088 
ngx_öt_t
 
rc
;

1089 
ngx_buf_t
 *
b
;

1090 
ngx_chaö_t
 
out
;

1091 
ngx_hâp_ˇche_t
 *
c
;

1093 
c
 = 
r
->
ˇche
;

1095 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1096 "hâ∞fûêˇchê£nd: %s", 
c
->
fûe
.
«me
.
d©a
);

1098 i‡(
r
 !r->
maö
 && 
c
->
Àngth
 - c->
body_°¨t
 == 0) {

1099  
	`ngx_hâp_£nd_hódî
(
r
);

1104 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1105 i‡(
b
 =
NULL
) {

1106  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1109 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

1110 i‡(
b
->
fûe
 =
NULL
) {

1111  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1114 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1116 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1117  
rc
;

1120 
b
->
fûe_pos
 = 
c
->
body_°¨t
;

1121 
b
->
fûe_œ°
 = 
c
->
Àngth
;

1123 
b
->
ö_fûe
 = (
c
->
Àngth
 - c->
body_°¨t
) ? 1: 0;

1124 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

1125 
b
->
œ°_ö_chaö
 = 1;

1127 
b
->
fûe
->
fd
 = 
c
->file.fd;

1128 
b
->
fûe
->
«me
 = 
c
->file.name;

1129 
b
->
fûe
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1131 
out
.
buf
 = 
b
;

1132 
out
.
√xt
 = 
NULL
;

1134  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1135 
	}
}

1139 
	$ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
)

1141 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1142 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1144 i‡(
c
->
upd©ed
 || c->
node
 =
NULL
) {

1148 
ˇche
 = 
c
->
fûe_ˇche
;

1150 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1151 "hâ∞fûêˇchê‰ì, fd: %d", 
c
->
fûe
.
fd
);

1153 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1155 
f˙
 = 
c
->
node
;

1156 
f˙
->
cou¡
--;

1158 i‡(
c
->
upd©ög
) {

1159 
f˙
->
upd©ög
 = 0;

1162 i‡(
c
->
îr‹
) {

1163 
f˙
->
îr‹
 = 
c
->error;

1165 i‡(
c
->
vÆid_£c
) {

1166 
f˙
->
vÆid_£c
 = 
c
->valid_sec;

1167 
f˙
->
vÆid_m£c
 = 
c
->valid_msec;

1170 } i‡(!
f˙
->
exi°s
 && f˙->
cou¡
 =0 && 
c
->
mö_u£s
 == 1) {

1171 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1172 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1173 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1174 
c
->
node
 = 
NULL
;

1177 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1179 
c
->
upd©ed
 = 1;

1180 
c
->
upd©ög
 = 0;

1182 i‡(
c
->
ãmp_fûe
) {

1183 i‡(
tf
 &&Åf->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

1184 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1186 
tf
->
fûe
.
«me
.
d©a
);

1188 i‡(
	`ngx_dñëe_fûe
(
tf
->
fûe
.
«me
.
d©a
Ë=
NGX_FILE_ERROR
) {

1189 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
fûe
.
log
, 
ngx_î∫o
,

1190 
ngx_dñëe_fûe_n
 " \"%s\" failed",

1191 
tf
->
fûe
.
«me
.
d©a
);

1196 i‡(
c
->
waô_evít
.
timî_£t
) {

1197 
	`ngx_dñ_timî
(&
c
->
waô_evít
);

1199 
	}
}

1203 
	$ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
)

1205 
ngx_hâp_ˇche_t
 *
c
 = 
d©a
;

1207 i‡(
c
->
upd©ed
) {

1211 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1214 i‡(
c
->
upd©ög
) {

1215 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
fûe
.
log
, 0,

1216 "°ÆÀd cachêupd©ög,Éº‹:%ui", 
c
->
îr‹
);

1219 
	`ngx_hâp_fûe_ˇche_‰ì
(
c
, 
NULL
);

1220 
	}
}

1223 
time_t


1224 
	$ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1226 
u_ch¨
 *
«me
;

1227 
size_t
 
Àn
;

1228 
time_t
 
waô
;

1229 
ngx_uöt_t
 
åõs
;

1230 
ngx_∑th_t
 *
∑th
;

1231 
ngx_queue_t
 *
q
;

1232 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1234 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1237 
∑th
 = 
ˇche
->path;

1238 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1240 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1241 i‡(
«me
 =
NULL
) {

1245 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1247 
waô
 = 10;

1248 
åõs
 = 20;

1250 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1252 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1253 
q
 !
	`ngx_queue_£¡öñ
(&
ˇche
->
sh
->
queue
);

1254 
q
 = 
	`ngx_queue_¥ev
(q))

1256 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1258 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1260 
f˙
->
cou¡
, f˙->
exi°s
,

1261 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1263 i‡(
f˙
->
cou¡
 == 0) {

1264 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1265 
waô
 = 0;

1268 i‡(--
åõs
) {

1272 
waô
 = 1;

1278 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1280 
	`ngx_‰ì
(
«me
);

1282  
waô
;

1283 
	}
}

1286 
time_t


1287 
	$ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1289 
u_ch¨
 *
«me
, *
p
;

1290 
size_t
 
Àn
;

1291 
time_t
 
now
, 
waô
;

1292 
ngx_∑th_t
 *
∑th
;

1293 
ngx_queue_t
 *
q
;

1294 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1295 
u_ch¨
 
key
[2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1297 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1300 
∑th
 = 
ˇche
->path;

1301 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1303 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1304 i‡(
«me
 =
NULL
) {

1308 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1310 
now
 = 
	`ngx_time
();

1312 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1316 i‡(
	`ngx_queue_em±y
(&
ˇche
->
sh
->
queue
)) {

1317 
waô
 = 10;

1321 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1323 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1325 
waô
 = 
f˙
->
expúe
 - 
now
;

1327 i‡(
waô
 > 0) {

1328 
waô
 = wait > 10 ? 10 : wait;

1332 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1334 
f˙
->
cou¡
, f˙->
exi°s
,

1335 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1337 i‡(
f˙
->
cou¡
 == 0) {

1338 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1342 i‡(
f˙
->
dñëög
) {

1343 
waô
 = 1;

1347 
p
 = 
	`ngx_hex_dump
(
key
, (
u_ch¨
 *Ë&
f˙
->
node
.key,

1348 (
ngx_rbåì_key_t
));

1349 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1350 (Ë
	`ngx_hex_dump
(
p
, 
f˙
->
key
, 
Àn
);

1358 
	`ngx_queue_ªmove
(
q
);

1359 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1360 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1362 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1364 2 * 
NGX_HTTP_CACHE_KEY_LEN
, 
key
, 
f˙
->
cou¡
);

1367 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1369 
	`ngx_‰ì
(
«me
);

1371  
waô
;

1372 
	}
}

1376 
	$ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_queue_t
 *
q
,

1377 
u_ch¨
 *
«me
)

1379 
u_ch¨
 *
p
;

1380 
size_t
 
Àn
;

1381 
ngx_∑th_t
 *
∑th
;

1382 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1384 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1386 i‡(
f˙
->
exi°s
) {

1387 
ˇche
->
sh
->
size
 -
f˙
->
fs_size
;

1389 
∑th
 = 
ˇche
->path;

1390 
p
 = 
«me
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

1391 
p
 = 
	`ngx_hex_dump
’, (
u_ch¨
 *Ë&
f˙
->
node
.
key
,

1392 (
ngx_rbåì_key_t
));

1393 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1394 
p
 = 
	`ngx_hex_dump
’, 
f˙
->
key
, 
Àn
);

1395 *
p
 = '\0';

1397 
f˙
->
cou¡
++;

1398 
f˙
->
dñëög
 = 1;

1399 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1401 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1402 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
«me
, 
Àn
);

1404 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1405 "hâ∞fûêˇchêexpúe: \"%s\"", 
«me
);

1407 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1408 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1409 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1412 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1413 
f˙
->
cou¡
--;

1414 
f˙
->
dñëög
 = 0;

1417 i‡(
f˙
->
cou¡
 == 0) {

1418 
	`ngx_queue_ªmove
(
q
);

1419 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1420 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1422 
	}
}

1425 
time_t


1426 
	$ngx_hâp_fûe_ˇche_m™agî
(*
d©a
)

1428 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1430 
off_t
 
size
;

1431 
time_t
 
√xt
, 
waô
;

1433 
√xt
 = 
	`ngx_hâp_fûe_ˇche_expúe
(
ˇche
);

1435 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1436 
ˇche
->
fûes
 = 0;

1439 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1441 
size
 = 
ˇche
->
sh
->size;

1443 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1445 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1446 "hâ∞fûêˇchêsize: %O", 
size
);

1448 i‡(
size
 < 
ˇche
->
max_size
) {

1449  
√xt
;

1452 
waô
 = 
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

1454 i‡(
waô
 > 0) {

1455  
waô
;

1458 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

1459  
√xt
;

1462 
	}
}

1466 
	$ngx_hâp_fûe_ˇche_lﬂdî
(*
d©a
)

1468 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1470 
ngx_åì_˘x_t
 
åì
;

1472 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

1476 i‡(!
	`ngx_©omic_cmp_£t
(&
ˇche
->
sh
->
lﬂdög
, 0, 
ngx_pid
)) {

1480 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1483 
åì
.
öô_h™dÀr
 = 
NULL
;

1484 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_fûe
;

1485 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1486 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1487 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_fûe_ˇche_dñëe_fûe
;

1488 
åì
.
d©a
 = 
ˇche
;

1489 
åì
.
Æloc
 = 0;

1490 
åì
.
log
 = 
ngx_cy˛e
->log;

1492 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1493 
ˇche
->
fûes
 = 0;

1495 i‡(
	`ngx_wÆk_åì
(&
åì
, &
ˇche
->
∑th
->
«me
Ë=
NGX_ABORT
) {

1496 
ˇche
->
sh
->
lﬂdög
 = 0;

1500 
ˇche
->
sh
->
cﬁd
 = 0;

1501 
ˇche
->
sh
->
lﬂdög
 = 0;

1503 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

1505 &
ˇche
->
∑th
->
«me
,

1506 ((Ë
ˇche
->
sh
->
size
 * cache->
bsize
) / (1024 * 1024),

1507 
ˇche
->
bsize
);

1508 
	}
}

1511 
ngx_öt_t


1512 
	$ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1514  
NGX_OK
;

1515 
	}
}

1518 
ngx_öt_t


1519 
	$ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1521 
ngx_m£c_t
 
ñ≠£d
;

1522 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1524 
ˇche
 = 
˘x
->
d©a
;

1526 i‡(
	`ngx_hâp_fûe_ˇche_add_fûe
(
˘x
, 
∑th
Ë!
NGX_OK
) {

1527 (Ë
	`ngx_hâp_fûe_ˇche_dñëe_fûe
(
˘x
, 
∑th
);

1530 i‡(++
ˇche
->
fûes
 >ˇche->
lﬂdî_fûes
) {

1531 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1534 
	`ngx_time_upd©e
();

1536 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

1538 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1539 "hâ∞fûêˇchêlﬂdîÅimêñ≠£d: %M", 
ñ≠£d
);

1541 i‡(
ñ≠£d
 >
ˇche
->
lﬂdî_thªshﬁd
) {

1542 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1546  (
ngx_quô
 || 
ngx_ãrmö©e
Ë? 
NGX_ABORT
 : 
NGX_OK
;

1547 
	}
}

1551 
	$ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1553 
	`ngx_m¶ìp
(
ˇche
->
lﬂdî_¶ìp
);

1555 
	`ngx_time_upd©e
();

1557 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1558 
ˇche
->
fûes
 = 0;

1559 
	}
}

1562 
ngx_öt_t


1563 
	$ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
)

1565 
u_ch¨
 *
p
;

1566 
ngx_öt_t
 
n
;

1567 
ngx_uöt_t
 
i
;

1568 
ngx_hâp_ˇche_t
 
c
;

1569 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1571 i‡(
«me
->
Àn
 < 2 * 
NGX_HTTP_CACHE_KEY_LEN
) {

1572  
NGX_ERROR
;

1575 i‡(
˘x
->
size
 < (
off_t
Ë(
ngx_hâp_fûe_ˇche_hódî_t
)) {

1576 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1577 "ˇchêfûê\"%s\" i†toÿsmÆl", 
«me
->
d©a
);

1578  
NGX_ERROR
;

1581 
	`ngx_memzîo
(&
c
, (
ngx_hâp_ˇche_t
));

1582 
ˇche
 = 
˘x
->
d©a
;

1584 
c
.
Àngth
 = 
˘x
->
size
;

1585 
c
.
fs_size
 = (
˘x
->fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

1587 
p
 = &
«me
->
d©a
[«me->
Àn
 - 2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1589 
i
 = 0; i < 
NGX_HTTP_CACHE_KEY_LEN
; i++) {

1590 
n
 = 
	`ngx_hextoi
(
p
, 2);

1592 i‡(
n
 =
NGX_ERROR
) {

1593  
NGX_ERROR
;

1596 
p
 += 2;

1598 
c
.
key
[
i
] = (
u_ch¨
Ë
n
;

1601  
	`ngx_hâp_fûe_ˇche_add
(
ˇche
, &
c
);

1602 
	}
}

1605 
ngx_öt_t


1606 
	$ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

1608 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1610 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1612 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

1614 i‡(
f˙
 =
NULL
) {

1616 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

1617 (
ngx_hâp_fûe_ˇche_node_t
));

1618 i‡(
f˙
 =
NULL
) {

1619 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1620  
NGX_ERROR
;

1623 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

1625 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

1626 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

1628 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1630 
f˙
->
u£s
 = 1;

1631 
f˙
->
cou¡
 = 0;

1632 
f˙
->
vÆid_m£c
 = 0;

1633 
f˙
->
îr‹
 = 0;

1634 
f˙
->
exi°s
 = 1;

1635 
f˙
->
upd©ög
 = 0;

1636 
f˙
->
dñëög
 = 0;

1637 
f˙
->
uniq
 = 0;

1638 
f˙
->
vÆid_£c
 = 0;

1639 
f˙
->
body_°¨t
 = 0;

1640 
f˙
->
fs_size
 = 
c
->fs_size;

1642 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

1645 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1648 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1650 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1652 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1654  
NGX_OK
;

1655 
	}
}

1658 
ngx_öt_t


1659 
	$ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1661 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

1662 "hâ∞fûêˇchêdñëe: \"%s\"", 
∑th
->
d©a
);

1664 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

1665 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1666 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
∑th
->
d©a
);

1669  
NGX_OK
;

1670 
	}
}

1673 
time_t


1674 
	$ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
)

1676 
ngx_uöt_t
 
i
;

1677 
ngx_hâp_ˇche_vÆid_t
 *
vÆid
;

1679 i‡(
ˇche_vÆid
 =
NULL
) {

1683 
vÆid
 = 
ˇche_vÆid
->
ñts
;

1684 
i
 = 0; i < 
ˇche_vÆid
->
√…s
; i++) {

1686 i‡(
vÆid
[
i
].
°©us
 == 0) {

1687  
vÆid
[
i
].valid;

1690 i‡(
vÆid
[
i
].
°©us
 == status) {

1691  
vÆid
[
i
].valid;

1696 
	}
}

1700 
	$ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1702 
off_t
 
max_size
;

1703 
u_ch¨
 *
œ°
, *
p
;

1704 
time_t
 
öa˘ive
;

1705 
ssize_t
 
size
;

1706 
ngx_°r_t
 
s
, 
«me
, *
vÆue
;

1707 
ngx_öt_t
 
lﬂdî_fûes
;

1708 
ngx_m£c_t
 
lﬂdî_¶ìp
, 
lﬂdî_thªshﬁd
;

1709 
ngx_uöt_t
 
i
, 
n
;

1710 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1712 
ˇche
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_fûe_ˇche_t
));

1713 i‡(
ˇche
 =
NULL
) {

1714  
NGX_CONF_ERROR
;

1717 
ˇche
->
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

1718 i‡(
ˇche
->
∑th
 =
NULL
) {

1719  
NGX_CONF_ERROR
;

1722 
öa˘ive
 = 600;

1723 
lﬂdî_fûes
 = 100;

1724 
lﬂdî_¶ìp
 = 50;

1725 
lﬂdî_thªshﬁd
 = 200;

1727 
«me
.
Àn
 = 0;

1728 
size
 = 0;

1729 
max_size
 = 
NGX_MAX_OFF_T_VALUE
;

1731 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1733 
ˇche
->
∑th
->
«me
 = 
vÆue
[1];

1735 i‡(
ˇche
->
∑th
->
«me
.
d©a
[ˇche->∑th->«me.
Àn
 - 1] == '/') {

1736 
ˇche
->
∑th
->
«me
.
Àn
--;

1739 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
ˇche
->
∑th
->
«me
, 0Ë!
NGX_OK
) {

1740  
NGX_CONF_ERROR
;

1743 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

1745 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "levels=", 7) == 0) {

1747 
p
 = 
vÆue
[
i
].
d©a
 + 7;

1748 
œ°
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

1750 
n
 = 0;Ç < 3 && 
p
 < 
œ°
;Ç++) {

1752 i‡(*
p
 > '0' && *p < '3') {

1754 
ˇche
->
∑th
->
Àvñ
[
n
] = *
p
++ - '0';

1755 
ˇche
->
∑th
->
Àn
 +ˇche->∑th->
Àvñ
[
n
] + 1;

1757 i‡(
p
 =
œ°
) {

1761 i‡(*
p
++ =':' && 
n
 < 2 &&Ö !
œ°
) {

1765 
övÆid_Àvñs
;

1768 
övÆid_Àvñs
;

1771 i‡(
ˇche
->
∑th
->
Àn
 < 10 + 3) {

1775 
övÆid_Àvñs
:

1777 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1778 "övÆid \"Àvñs\" \"%V\"", &
vÆue
[
i
]);

1779  
NGX_CONF_ERROR
;

1782 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "keys_zone=", 10) == 0) {

1784 
«me
.
d©a
 = 
vÆue
[
i
].data + 10;

1786 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

1788 i‡(
p
) {

1789 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1791 
p
++;

1793 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + vÆue[i].À¿- 
p
;

1794 
s
.
d©a
 = 
p
;

1796 
size
 = 
	`ngx_∑r£_size
(&
s
);

1797 i‡(
size
 > 8191) {

1802 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1803 "övÆid key†z⁄êsizê\"%V\"", &
vÆue
[
i
]);

1804  
NGX_CONF_ERROR
;

1807 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1809 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1810 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1812 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1813 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1814 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1815 "övÆid i«˘ivêvÆuê\"%V\"", &
vÆue
[
i
]);

1816  
NGX_CONF_ERROR
;

1822 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_size=", 9) == 0) {

1824 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1825 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1827 
max_size
 = 
	`ngx_∑r£_off£t
(&
s
);

1828 i‡(
max_size
 < 0) {

1829 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1830 "övÆid max_sizêvÆuê\"%V\"", &
vÆue
[
i
]);

1831  
NGX_CONF_ERROR
;

1837 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_files=", 13) == 0) {

1839 
lﬂdî_fûes
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 13, vÆue[i].
Àn
 - 13);

1840 i‡(
lﬂdî_fûes
 =
NGX_ERROR
) {

1841 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1842 "övÆidÜﬂdî_fûe†vÆuê\"%V\"", &
vÆue
[
i
]);

1843  
NGX_CONF_ERROR
;

1849 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_sleep=", 13) == 0) {

1851 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

1852 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

1854 
lﬂdî_¶ìp
 = 
	`ngx_∑r£_time
(&
s
, 0);

1855 i‡(
lﬂdî_¶ìp
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1856 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1857 "övÆidÜﬂdî_¶ì∞vÆuê\"%V\"", &
vÆue
[
i
]);

1858  
NGX_CONF_ERROR
;

1864 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_threshold=", 17) == 0) {

1866 
s
.
Àn
 = 
vÆue
[
i
].len - 17;

1867 
s
.
d©a
 = 
vÆue
[
i
].data + 17;

1869 
lﬂdî_thªshﬁd
 = 
	`ngx_∑r£_time
(&
s
, 0);

1870 i‡(
lﬂdî_thªshﬁd
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1871 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1872 "övÆidÜﬂdî_thªshﬁd vÆuê\"%V\"", &
vÆue
[
i
]);

1873  
NGX_CONF_ERROR
;

1879 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1880 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1881  
NGX_CONF_ERROR
;

1884 i‡(
«me
.
Àn
 =0 || 
size
 == 0) {

1885 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1887 &
cmd
->
«me
);

1888  
NGX_CONF_ERROR
;

1891 
ˇche
->
∑th
->
m™agî
 = 
ngx_hâp_fûe_ˇche_m™agî
;

1892 
ˇche
->
∑th
->
lﬂdî
 = 
ngx_hâp_fûe_ˇche_lﬂdî
;

1893 
ˇche
->
∑th
->
d©a
 = cache;

1894 
ˇche
->
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

1895 
ˇche
->
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1896 
ˇche
->
lﬂdî_fûes
 =Üoader_files;

1897 
ˇche
->
lﬂdî_¶ìp
 =Üoader_sleep;

1898 
ˇche
->
lﬂdî_thªshﬁd
 =Üoader_threshold;

1900 i‡(
	`ngx_add_∑th
(
cf
, &
ˇche
->
∑th
Ë!
NGX_OK
) {

1901  
NGX_CONF_ERROR
;

1904 
ˇche
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
, 
cmd
->
po°
);

1905 i‡(
ˇche
->
shm_z⁄e
 =
NULL
) {

1906  
NGX_CONF_ERROR
;

1909 i‡(
ˇche
->
shm_z⁄e
->
d©a
) {

1910 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1911 "du∂iˇã z⁄ê\"%V\"", &
«me
);

1912  
NGX_CONF_ERROR
;

1916 
ˇche
->
shm_z⁄e
->
öô
 = 
ngx_hâp_fûe_ˇche_öô
;

1917 
ˇche
->
shm_z⁄e
->
d©a
 = cache;

1919 
ˇche
->
öa˘ive
 = inactive;

1920 
ˇche
->
max_size
 = max_size;

1922  
NGX_CONF_OK
;

1923 
	}
}

1927 
	$ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1928 *
c⁄f
)

1930 *
p
 = 
c⁄f
;

1932 
time_t
 
vÆid
;

1933 
ngx_°r_t
 *
vÆue
;

1934 
ngx_uöt_t
 
i
, 
n
, 
°©us
;

1935 
ngx_¨øy_t
 **
a
;

1936 
ngx_hâp_ˇche_vÆid_t
 *
v
;

1937 
ngx_uöt_t
 
°©u£s
[] = { 200, 301, 302 };

1939 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1941 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1942 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ˇche_vÆid_t
));

1943 i‡(*
a
 =
NULL
) {

1944  
NGX_CONF_ERROR
;

1948 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1949 
n
 = 
cf
->
¨gs
->
√…s
 - 1;

1951 
vÆid
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

1952 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1953 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1954 "övÆidÅimêvÆuê\"%V\"", &
vÆue
[
n
]);

1955  
NGX_CONF_ERROR
;

1958 i‡(
n
 == 1) {

1960 
i
 = 0; i < 3; i++) {

1961 
v
 = 
	`ngx_¨øy_push
(*
a
);

1962 i‡(
v
 =
NULL
) {

1963  
NGX_CONF_ERROR
;

1966 
v
->
°©us
 = 
°©u£s
[
i
];

1967 
v
->
vÆid
 = valid;

1970  
NGX_CONF_OK
;

1973 
i
 = 1; i < 
n
; i++) {

1975 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "any") == 0) {

1977 
°©us
 = 0;

1981 
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

1982 i‡(
°©us
 < 100) {

1983 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1984 "övÆid sètu†\"%V\"", &
vÆue
[
i
]);

1985  
NGX_CONF_ERROR
;

1989 
v
 = 
	`ngx_¨øy_push
(*
a
);

1990 i‡(
v
 =
NULL
) {

1991  
NGX_CONF_ERROR
;

1994 
v
->
°©us
 = status;

1995 
v
->
vÆid
 = valid;

1998  
NGX_CONF_OK
;

1999 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_header_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_hódî_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL
,

33 
ngx_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_hódî_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
	gngx_hâp_£rvî_°rög
[] = "Sîvî:Çgöx" 
CRLF
;

50 
	gngx_hâp_£rvî_fuŒ_°rög
[] = "Sîvî: " 
NGINX_VER
 
CRLF
;

53 
ngx_°r_t
 
	gngx_hâp_°©us_löes
[] = {

55 
ngx_°rög
("200 OK"),

56 
ngx_°rög
("201 Created"),

57 
ngx_°rög
("202 Accepted"),

58 
ngx_nuŒ_°rög
,

59 
ngx_°rög
("204 No Content"),

60 
ngx_nuŒ_°rög
,

61 
ngx_°rög
("206 Partial Content"),

65 
	#NGX_HTTP_LAST_2XX
 207

	)

66 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 200)

	)

70 
ngx_°rög
("301 Moved Permanently"),

71 
ngx_°rög
("302 Moved Temporarily"),

72 
ngx_°rög
("303 See Other"),

73 
ngx_°rög
("304 Not Modified"),

74 
ngx_nuŒ_°rög
,

75 
ngx_nuŒ_°rög
,

76 
ngx_°rög
("307 Temporary Redirect"),

78 
	#NGX_HTTP_LAST_3XX
 308

	)

79 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

81 
ngx_°rög
("400 Bad Request"),

82 
ngx_°rög
("401 Unauthorized"),

83 
ngx_°rög
("402 Payment Required"),

84 
ngx_°rög
("403 Forbidden"),

85 
ngx_°rög
("404 Not Found"),

86 
ngx_°rög
("405 Not Allowed"),

87 
ngx_°rög
("406 Not Acceptable"),

88 
ngx_nuŒ_°rög
,

89 
ngx_°rög
("408 Request Time-out"),

90 
ngx_°rög
("409 Conflict"),

91 
ngx_°rög
("410 Gone"),

92 
ngx_°rög
("411 Length Required"),

93 
ngx_°rög
("412 Precondition Failed"),

94 
ngx_°rög
("413 Request Entity Too Large"),

95 
ngx_°rög
("414 Request-URI Too Large"),

96 
ngx_°rög
("415 Unsupported Media Type"),

97 
ngx_°rög
("416 Requested Range Not Satisfiable"),

108 
	#NGX_HTTP_LAST_4XX
 417

	)

109 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

111 
ngx_°rög
("500 Internal Server Error"),

112 
ngx_°rög
("501 Not Implemented"),

113 
ngx_°rög
("502 Bad Gateway"),

114 
ngx_°rög
("503 Service Temporarily Unavailable"),

115 
ngx_°rög
("504 Gateway Time-out"),

117 
ngx_nuŒ_°rög
,

118 
ngx_nuŒ_°rög
,

119 
ngx_°rög
("507 Insufficient Storage"),

124 
	#NGX_HTTP_LAST_5XX
 508

	)

129 
ngx_hâp_hódî_out_t
 
	gngx_hâp_hódîs_out
[] = {

130 { 
ngx_°rög
("Sîvî"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
) },

131 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
) },

132 { 
ngx_°rög
("Content-Length"),

133 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_Àngth
) },

134 { 
ngx_°rög
("Content-Encoding"),

135 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_ícodög
) },

136 { 
ngx_°rög
("Loˇti⁄"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
loˇti⁄
) },

137 { 
ngx_°rög
("Last-Modified"),

138 
off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
) },

139 { 
ngx_°rög
("Accept-Ranges"),

140 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
) },

141 { 
ngx_°rög
("Expúes"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
) },

142 { 
ngx_°rög
("Cache-Control"),

143 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
) },

144 { 
ngx_°rög
("ETag"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
) },

146 { 
ngx_nuŒ_°rög
, 0 }

150 
ngx_öt_t


151 
	$ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

153 
u_ch¨
 *
p
;

154 
size_t
 
Àn
;

155 
ngx_°r_t
 
ho°
, *
°©us_löe
;

156 
ngx_buf_t
 *
b
;

157 
ngx_uöt_t
 
°©us
, 
i
, 
p‹t
;

158 
ngx_chaö_t
 
out
;

159 
ngx_li°_∑π_t
 *
∑π
;

160 
ngx_èbÀ_ñt_t
 *
hódî
;

161 
ngx_c⁄√˘i⁄_t
 *
c
;

162 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

163 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

164 
sockaddr_ö
 *
sö
;

165 #i‡(
NGX_HAVE_INET6
)

166 
sockaddr_ö6
 *
sö6
;

168 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

170 i‡(
r
->
hódî_£¡
) {

171  
NGX_OK
;

174 
r
->
hódî_£¡
 = 1;

176 i‡(
r
 !r->
maö
) {

177  
NGX_OK
;

180 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

181  
NGX_OK
;

184 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

185 
r
->
hódî_⁄ly
 = 1;

188 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 != -1) {

189 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


190 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


191 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED
)

193 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

194 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

198 
Àn
 = ("HTTP/1.x "Ë- 1 + (
CRLF
) - 1

200 + (
CRLF
) - 1;

204 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

205 
Àn
 +
r
->
hódîs_out
.
°©us_löe
.len;

206 
°©us_löe
 = &
r
->
hódîs_out
.status_line;

207 #i‡(
NGX_SUPPRESS_WARN
)

208 
°©us
 = 0;

213 
°©us
 = 
r
->
hódîs_out
.status;

215 i‡(
°©us
 >
NGX_HTTP_OK


216 && 
°©us
 < 
NGX_HTTP_LAST_2XX
)

220 i‡(
°©us
 =
NGX_HTTP_NO_CONTENT
) {

221 
r
->
hódî_⁄ly
 = 1;

222 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

223 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

224 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

225 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

226 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

229 
°©us
 -
NGX_HTTP_OK
;

230 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

231 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

233 } i‡(
°©us
 >
NGX_HTTP_MOVED_PERMANENTLY


234 && 
°©us
 < 
NGX_HTTP_LAST_3XX
)

238 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

239 
r
->
hódî_⁄ly
 = 1;

242 
°©us
 = sètu†- 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

243 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

244 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

246 } i‡(
°©us
 >
NGX_HTTP_BAD_REQUEST


247 && 
°©us
 < 
NGX_HTTP_LAST_4XX
)

250 
°©us
 = sètu†- 
NGX_HTTP_BAD_REQUEST


251 + 
NGX_HTTP_OFF_4XX
;

253 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

254 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

256 } i‡(
°©us
 >
NGX_HTTP_INTERNAL_SERVER_ERROR


257 && 
°©us
 < 
NGX_HTTP_LAST_5XX
)

260 
°©us
 = sètu†- 
NGX_HTTP_INTERNAL_SERVER_ERROR


261 + 
NGX_HTTP_OFF_5XX
;

263 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

264 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

267 
Àn
 +
NGX_INT_T_LEN
 + 1 ;

268 
°©us_löe
 = 
NULL
;

271 i‡(
°©us_löe
 && sètus_löe->
Àn
 == 0) {

272 
°©us
 = 
r
->
hódîs_out
.status;

273 
Àn
 +
NGX_INT_T_LEN
 + 1 ;

274 
°©us_löe
 = 
NULL
;

278 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

280 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

281 
Àn
 +
˛cf
->
£rvî_tokís
 ? (
ngx_hâp_£rvî_fuŒ_°rög
) - 1:

282 (
ngx_hâp_£rvî_°rög
) - 1;

285 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

286 
Àn
 +("D©e: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

289 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

290 
Àn
 += ("Content-Type: ") - 1

291 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 + 2;

293 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


294 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

296 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

300 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


301 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

303 
Àn
 +("C⁄ã¡-Lígth: "Ë- 1 + 
NGX_OFF_T_LEN
 + 2;

306 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


307 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

309 
Àn
 +("La°-Modifõd: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

312 
c
 = 
r
->
c⁄√˘i⁄
;

314 i‡(
r
->
hódîs_out
.
loˇti⁄


315 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


316 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

318 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

320 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

321 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

322 
ho°
 = 
cscf
->
£rvî_«me
;

324 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

325 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

328 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

329 
ho°
.
d©a
 = 
addr
;

331 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

332  
NGX_ERROR
;

336 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

338 #i‡(
NGX_HAVE_INET6
)

339 
AF_INET6
:

340 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

341 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

344 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

345 
AF_UNIX
:

346 
p‹t
 = 0;

350 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

351 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

355 
Àn
 += ("Location: https://") - 1

356 + 
ho°
.
Àn


357 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 + 2;

359 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

361 #i‡(
NGX_HTTP_SSL
)

362 i‡(
c
->
s¶
)

363 
p‹t
 = (port == 443) ? 0 :Öort;

366 
p‹t
 = (port == 80) ? 0 :Öort;

369 
p‹t
 = 0;

372 i‡(
p‹t
) {

373 
Àn
 += (":65535") - 1;

377 
	`ngx_°r_nuŒ
(&
ho°
);

378 
p‹t
 = 0;

381 i‡(
r
->
chunked
) {

382 
Àn
 +("Tøns„r-Encodög: chunked" 
CRLF
) - 1;

385 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

386 
Àn
 +("C⁄√˘i⁄: upgøde" 
CRLF
) - 1;

388 } i‡(
r
->
kì∑live
) {

389 
Àn
 +("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1;

399 i‡(
˛cf
->
kì∑live_hódî
) {

400 
Àn
 +("Kìp-Alive:Åimeout="Ë- 1 + 
NGX_TIME_T_LEN
 + 2;

404 
Àn
 +("C⁄√˘i⁄: clo£" 
CRLF
) - 1;

407 #i‡(
NGX_HTTP_GZIP
)

408 i‡(
r
->
gzù_v¨y
) {

409 i‡(
˛cf
->
gzù_v¨y
) {

410 
Àn
 +("V¨y: Ac˚±-Encodög" 
CRLF
) - 1;

413 
r
->
gzù_v¨y
 = 0;

418 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

419 
hódî
 = 
∑π
->
ñts
;

421 
i
 = 0; ; i++) {

423 i‡(
i
 >
∑π
->
√…s
) {

424 i‡(
∑π
->
√xt
 =
NULL
) {

428 
∑π
 =Ö¨t->
√xt
;

429 
hódî
 = 
∑π
->
ñts
;

430 
i
 = 0;

433 i‡(
hódî
[
i
].
hash
 == 0) {

437 
Àn
 +
hódî
[
i
].
key
.À¿+ (": "Ë- 1 + hódî[i].
vÆue
.len

438 + (
CRLF
) - 1;

441 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

442 i‡(
b
 =
NULL
) {

443  
NGX_ERROR
;

447 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP/1.1 ", ("HTTP/1.x ") - 1);

450 i‡(
°©us_löe
) {

451 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
°©us_löe
->
d©a
, sètus_löe->
Àn
);

454 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%03uò", 
°©us
);

456 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

458 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

459 i‡(
˛cf
->
£rvî_tokís
) {

460 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_fuŒ_°rög
;

461 
Àn
 = (
ngx_hâp_£rvî_fuŒ_°rög
) - 1;

464 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_°rög
;

465 
Àn
 = (
ngx_hâp_£rvî_°rög
) - 1;

468 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
Àn
);

471 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

472 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Date: ", ("Date: ") - 1);

473 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_ˇched_hâp_time
.
d©a
,

474 
ngx_ˇched_hâp_time
.
Àn
);

476 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

479 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

480 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Content-Type: ",

482 
p
 = 
b
->
œ°
;

483 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

484 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

486 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


487 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

489 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "; charset=",

491 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

492 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

496 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
b
->
œ°
 - 
p
;

497 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

500 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

503 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


504 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

506 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "C⁄ã¡-Lígth: %O" 
CRLF
,

507 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

510 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


511 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

513 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Last-Modified: ",

515 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
r
->
hódîs_out
.
œ°_modifõd_time
);

517 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

520 i‡(
ho°
.
d©a
) {

522 
p
 = 
b
->
œ°
 + ("Location: ") - 1;

524 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Location: http",

527 #i‡(
NGX_HTTP_SSL
)

528 i‡(
c
->
s¶
) {

529 *
b
->
œ°
++ ='s';

533 *
b
->
œ°
++ = ':'; *b->last++ = '/'; *b->last++ = '/';

534 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ho°
.
d©a
, ho°.
Àn
);

536 i‡(
p‹t
) {

537 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, ":%ui", 
p‹t
);

540 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

541 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

545 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
b
->
œ°
 - 
p
;

546 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

547 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

549 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

552 i‡(
r
->
chunked
) {

553 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Tøns„r-Encodög: chunked" 
CRLF
,

554 ("Tøns„r-Encodög: chunked" 
CRLF
) - 1);

557 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

558 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: upgøde" 
CRLF
,

559 ("C⁄√˘i⁄: upgøde" 
CRLF
) - 1);

561 } i‡(
r
->
kì∑live
) {

562 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: kìp-Æive" 
CRLF
,

563 ("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1);

565 i‡(
˛cf
->
kì∑live_hódî
) {

566 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Kìp-Alive:Åimeout=%T" 
CRLF
,

567 
˛cf
->
kì∑live_hódî
);

571 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: clo£" 
CRLF
,

572 ("C⁄√˘i⁄: clo£" 
CRLF
) - 1);

575 #i‡(
NGX_HTTP_GZIP
)

576 i‡(
r
->
gzù_v¨y
) {

577 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "V¨y: Ac˚±-Encodög" 
CRLF
,

578 ("V¨y: Ac˚±-Encodög" 
CRLF
) - 1);

582 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

583 
hódî
 = 
∑π
->
ñts
;

585 
i
 = 0; ; i++) {

587 i‡(
i
 >
∑π
->
√…s
) {

588 i‡(
∑π
->
√xt
 =
NULL
) {

592 
∑π
 =Ö¨t->
√xt
;

593 
hódî
 = 
∑π
->
ñts
;

594 
i
 = 0;

597 i‡(
hódî
[
i
].
hash
 == 0) {

601 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

602 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

604 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

605 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

608 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

609 "%*s", (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

612 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

614 
r
->
hódî_size
 = 
b
->
œ°
 - b->
pos
;

616 i‡(
r
->
hódî_⁄ly
) {

617 
b
->
œ°_buf
 = 1;

620 
out
.
buf
 = 
b
;

621 
out
.
√xt
 = 
NULL
;

623  
	`ngx_hâp_wrôe_fûãr
(
r
, &
out
);

624 
	}
}

627 
ngx_öt_t


628 
	$ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

630 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódî_fûãr
;

632  
NGX_OK
;

633 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
uöt32_t
 
	gusuÆ
[] = {

20 #i‡(
NGX_WIN32
)

36 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

38 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

39 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

41 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

42 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

44 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

45 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

47 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

48 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

49 && 
m
[4] =
c4


	)

51 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

52 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

53 && (((
uöt32_t
 *Ë
m
)[1] & 0xffffË=((
c5
 << 8Ë| 
c4
)

	)

55 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

56 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

57 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

59 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

60 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

61 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

63 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

64 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

65 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
) \

66 && 
m
[8] =
c8


	)

70 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

71 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2


	)

73 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

74 
m
[0] =
c0
 && m[2] =
c2
 && m[3] =
c3


	)

76 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

77 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3


	)

79 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

80 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

82 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

83 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

84 && 
m
[4] =
c4
 && m[5] =
c5


	)

86 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

87 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

88 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6


	)

90 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

91 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

92 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7


	)

94 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

95 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

96 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7
 && m[8] =
c8


	)

103 
ngx_öt_t


104 
	$ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

106 
u_ch¨
 
c
, 
ch
, *
p
, *
m
;

108 
sw_°¨t
 = 0,

109 
sw_mëhod
,

110 
sw_•a˚s_bef‹e_uri
,

111 
sw_schema
,

112 
sw_schema_¶ash
,

113 
sw_schema_¶ash_¶ash
,

114 
sw_ho°_°¨t
,

115 
sw_ho°
,

116 
sw_ho°_íd
,

117 
sw_ho°_ù_lôîÆ
,

118 
sw_p‹t
,

119 
sw_ho°_hâp_09
,

120 
sw_a·î_¶ash_ö_uri
,

121 
sw_check_uri
,

122 
sw_check_uri_hâp_09
,

123 
sw_uri
,

124 
sw_hâp_09
,

125 
sw_hâp_H
,

126 
sw_hâp_HT
,

127 
sw_hâp_HTT
,

128 
sw_hâp_HTTP
,

129 
sw_fú°_maj‹_digô
,

130 
sw_maj‹_digô
,

131 
sw_fú°_mö‹_digô
,

132 
sw_mö‹_digô
,

133 
sw_•a˚s_a·î_digô
,

134 
sw_Æmo°_d⁄e


135 } 
°©e
;

137 
°©e
 = 
r
->state;

139 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

140 
ch
 = *
p
;

142 
°©e
) {

145 
sw_°¨t
:

146 
r
->
ªque°_°¨t
 = 
p
;

148 i‡(
ch
 =
CR
 || ch =
LF
) {

152 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

153  
NGX_HTTP_PARSE_INVALID_METHOD
;

156 
°©e
 = 
sw_mëhod
;

159 
sw_mëhod
:

160 i‡(
ch
 == ' ') {

161 
r
->
mëhod_íd
 = 
p
 - 1;

162 
m
 = 
r
->
ªque°_°¨t
;

164 
p
 - 
m
) {

167 i‡(
	`ngx_°r3_cmp
(
m
, 'G', 'E', 'T', ' ')) {

168 
r
->
mëhod
 = 
NGX_HTTP_GET
;

172 i‡(
	`ngx_°r3_cmp
(
m
, 'P', 'U', 'T', ' ')) {

173 
r
->
mëhod
 = 
NGX_HTTP_PUT
;

180 i‡(
m
[1] == 'O') {

182 i‡(
	`ngx_°r3Ocmp
(
m
, 'P', 'O', 'S', 'T')) {

183 
r
->
mëhod
 = 
NGX_HTTP_POST
;

187 i‡(
	`ngx_°r3Ocmp
(
m
, 'C', 'O', 'P', 'Y')) {

188 
r
->
mëhod
 = 
NGX_HTTP_COPY
;

192 i‡(
	`ngx_°r3Ocmp
(
m
, 'M', 'O', 'V', 'E')) {

193 
r
->
mëhod
 = 
NGX_HTTP_MOVE
;

197 i‡(
	`ngx_°r3Ocmp
(
m
, 'L', 'O', 'C', 'K')) {

198 
r
->
mëhod
 = 
NGX_HTTP_LOCK
;

204 i‡(
	`ngx_°r4cmp
(
m
, 'H', 'E', 'A', 'D')) {

205 
r
->
mëhod
 = 
NGX_HTTP_HEAD
;

213 i‡(
	`ngx_°r5cmp
(
m
, 'M', 'K', 'C', 'O', 'L')) {

214 
r
->
mëhod
 = 
NGX_HTTP_MKCOL
;

218 i‡(
	`ngx_°r5cmp
(
m
, 'P', 'A', 'T', 'C', 'H')) {

219 
r
->
mëhod
 = 
NGX_HTTP_PATCH
;

223 i‡(
	`ngx_°r5cmp
(
m
, 'T', 'R', 'A', 'C', 'E')) {

224 
r
->
mëhod
 = 
NGX_HTTP_TRACE
;

231 i‡(
	`ngx_°r6cmp
(
m
, 'D', 'E', 'L', 'E', 'T', 'E')) {

232 
r
->
mëhod
 = 
NGX_HTTP_DELETE
;

236 i‡(
	`ngx_°r6cmp
(
m
, 'U', 'N', 'L', 'O', 'C', 'K')) {

237 
r
->
mëhod
 = 
NGX_HTTP_UNLOCK
;

244 i‡(
	`ngx_°r7_cmp
(
m
, 'O', 'P', 'T', 'I', 'O', 'N', 'S', ' '))

246 
r
->
mëhod
 = 
NGX_HTTP_OPTIONS
;

252 i‡(
	`ngx_°r8cmp
(
m
, 'P', 'R', 'O', 'P', 'F', 'I', 'N', 'D'))

254 
r
->
mëhod
 = 
NGX_HTTP_PROPFIND
;

260 i‡(
	`ngx_°r9cmp
(
m
,

263 
r
->
mëhod
 = 
NGX_HTTP_PROPPATCH
;

269 
°©e
 = 
sw_•a˚s_bef‹e_uri
;

273 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

274  
NGX_HTTP_PARSE_INVALID_METHOD
;

280 
sw_•a˚s_bef‹e_uri
:

282 i‡(
ch
 == '/') {

283 
r
->
uri_°¨t
 = 
p
;

284 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

288 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

289 i‡(
c
 >= 'a' && c <= 'z') {

290 
r
->
schema_°¨t
 = 
p
;

291 
°©e
 = 
sw_schema
;

295 
ch
) {

299  
NGX_HTTP_PARSE_INVALID_REQUEST
;

303 
sw_schema
:

305 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

306 i‡(
c
 >= 'a' && c <= 'z') {

310 
ch
) {

312 
r
->
schema_íd
 = 
p
;

313 
°©e
 = 
sw_schema_¶ash
;

316  
NGX_HTTP_PARSE_INVALID_REQUEST
;

320 
sw_schema_¶ash
:

321 
ch
) {

323 
°©e
 = 
sw_schema_¶ash_¶ash
;

326  
NGX_HTTP_PARSE_INVALID_REQUEST
;

330 
sw_schema_¶ash_¶ash
:

331 
ch
) {

333 
°©e
 = 
sw_ho°_°¨t
;

336  
NGX_HTTP_PARSE_INVALID_REQUEST
;

340 
sw_ho°_°¨t
:

342 
r
->
ho°_°¨t
 = 
p
;

344 i‡(
ch
 == '[') {

345 
°©e
 = 
sw_ho°_ù_lôîÆ
;

349 
°©e
 = 
sw_ho°
;

353 
sw_ho°
:

355 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

356 i‡(
c
 >= 'a' && c <= 'z') {

360 i‡((
ch
 >= '0' && ch <= '9') || ch == '.' || ch == '-') {

366 
sw_ho°_íd
:

368 
r
->
ho°_íd
 = 
p
;

370 
ch
) {

372 
°©e
 = 
sw_p‹t
;

375 
r
->
uri_°¨t
 = 
p
;

376 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

383 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

384 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

385 
°©e
 = 
sw_ho°_hâp_09
;

388  
NGX_HTTP_PARSE_INVALID_REQUEST
;

392 
sw_ho°_ù_lôîÆ
:

394 i‡(
ch
 >= '0' && ch <= '9') {

398 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

399 i‡(
c
 >= 'a' && c <= 'z') {

403 
ch
) {

407 
°©e
 = 
sw_ho°_íd
;

429  
NGX_HTTP_PARSE_INVALID_REQUEST
;

433 
sw_p‹t
:

434 i‡(
ch
 >= '0' && ch <= '9') {

438 
ch
) {

440 
r
->
p‹t_íd
 = 
p
;

441 
r
->
uri_°¨t
 = 
p
;

442 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

445 
r
->
p‹t_íd
 = 
p
;

450 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

451 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

452 
°©e
 = 
sw_ho°_hâp_09
;

455  
NGX_HTTP_PARSE_INVALID_REQUEST
;

460 
sw_ho°_hâp_09
:

461 
ch
) {

464 
CR
:

465 
r
->
hâp_mö‹
 = 9;

466 
°©e
 = 
sw_Æmo°_d⁄e
;

468 
LF
:

469 
r
->
hâp_mö‹
 = 9;

470 
d⁄e
;

472 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

473 
°©e
 = 
sw_hâp_H
;

476  
NGX_HTTP_PARSE_INVALID_REQUEST
;

482 
sw_a·î_¶ash_ö_uri
:

484 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

485 
°©e
 = 
sw_check_uri
;

489 
ch
) {

491 
r
->
uri_íd
 = 
p
;

492 
°©e
 = 
sw_check_uri_hâp_09
;

494 
CR
:

495 
r
->
uri_íd
 = 
p
;

496 
r
->
hâp_mö‹
 = 9;

497 
°©e
 = 
sw_Æmo°_d⁄e
;

499 
LF
:

500 
r
->
uri_íd
 = 
p
;

501 
r
->
hâp_mö‹
 = 9;

502 
d⁄e
;

504 
r
->
com∂ex_uri
 = 1;

505 
°©e
 = 
sw_uri
;

508 
r
->
quŸed_uri
 = 1;

509 
°©e
 = 
sw_uri
;

512 
r
->
com∂ex_uri
 = 1;

513 
°©e
 = 
sw_uri
;

515 #i‡(
NGX_WIN32
)

517 
r
->
com∂ex_uri
 = 1;

518 
°©e
 = 
sw_uri
;

522 
r
->
¨gs_°¨t
 = 
p
 + 1;

523 
°©e
 = 
sw_uri
;

526 
r
->
com∂ex_uri
 = 1;

527 
°©e
 = 
sw_uri
;

530 
r
->
∂us_ö_uri
 = 1;

533  
NGX_HTTP_PARSE_INVALID_REQUEST
;

535 
°©e
 = 
sw_check_uri
;

541 
sw_check_uri
:

543 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

547 
ch
) {

549 #i‡(
NGX_WIN32
)

550 i‡(
r
->
uri_ext
 =
p
) {

551 
r
->
com∂ex_uri
 = 1;

552 
°©e
 = 
sw_uri
;

556 
r
->
uri_ext
 = 
NULL
;

557 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

560 
r
->
uri_ext
 = 
p
 + 1;

563 
r
->
uri_íd
 = 
p
;

564 
°©e
 = 
sw_check_uri_hâp_09
;

566 
CR
:

567 
r
->
uri_íd
 = 
p
;

568 
r
->
hâp_mö‹
 = 9;

569 
°©e
 = 
sw_Æmo°_d⁄e
;

571 
LF
:

572 
r
->
uri_íd
 = 
p
;

573 
r
->
hâp_mö‹
 = 9;

574 
d⁄e
;

575 #i‡(
NGX_WIN32
)

577 
r
->
com∂ex_uri
 = 1;

578 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

582 
r
->
quŸed_uri
 = 1;

583 
°©e
 = 
sw_uri
;

586 
r
->
¨gs_°¨t
 = 
p
 + 1;

587 
°©e
 = 
sw_uri
;

590 
r
->
com∂ex_uri
 = 1;

591 
°©e
 = 
sw_uri
;

594 
r
->
∂us_ö_uri
 = 1;

597  
NGX_HTTP_PARSE_INVALID_REQUEST
;

602 
sw_check_uri_hâp_09
:

603 
ch
) {

606 
CR
:

607 
r
->
hâp_mö‹
 = 9;

608 
°©e
 = 
sw_Æmo°_d⁄e
;

610 
LF
:

611 
r
->
hâp_mö‹
 = 9;

612 
d⁄e
;

614 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

615 
°©e
 = 
sw_hâp_H
;

618 
r
->
•a˚_ö_uri
 = 1;

619 
°©e
 = 
sw_check_uri
;

620 
p
--;

627 
sw_uri
:

629 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

633 
ch
) {

635 
r
->
uri_íd
 = 
p
;

636 
°©e
 = 
sw_hâp_09
;

638 
CR
:

639 
r
->
uri_íd
 = 
p
;

640 
r
->
hâp_mö‹
 = 9;

641 
°©e
 = 
sw_Æmo°_d⁄e
;

643 
LF
:

644 
r
->
uri_íd
 = 
p
;

645 
r
->
hâp_mö‹
 = 9;

646 
d⁄e
;

648 
r
->
com∂ex_uri
 = 1;

651  
NGX_HTTP_PARSE_INVALID_REQUEST
;

656 
sw_hâp_09
:

657 
ch
) {

660 
CR
:

661 
r
->
hâp_mö‹
 = 9;

662 
°©e
 = 
sw_Æmo°_d⁄e
;

664 
LF
:

665 
r
->
hâp_mö‹
 = 9;

666 
d⁄e
;

668 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

669 
°©e
 = 
sw_hâp_H
;

672 
r
->
•a˚_ö_uri
 = 1;

673 
°©e
 = 
sw_uri
;

674 
p
--;

679 
sw_hâp_H
:

680 
ch
) {

682 
°©e
 = 
sw_hâp_HT
;

685  
NGX_HTTP_PARSE_INVALID_REQUEST
;

689 
sw_hâp_HT
:

690 
ch
) {

692 
°©e
 = 
sw_hâp_HTT
;

695  
NGX_HTTP_PARSE_INVALID_REQUEST
;

699 
sw_hâp_HTT
:

700 
ch
) {

702 
°©e
 = 
sw_hâp_HTTP
;

705  
NGX_HTTP_PARSE_INVALID_REQUEST
;

709 
sw_hâp_HTTP
:

710 
ch
) {

712 
°©e
 = 
sw_fú°_maj‹_digô
;

715  
NGX_HTTP_PARSE_INVALID_REQUEST
;

720 
sw_fú°_maj‹_digô
:

721 i‡(
ch
 < '1' || ch > '9') {

722  
NGX_HTTP_PARSE_INVALID_REQUEST
;

725 
r
->
hâp_maj‹
 = 
ch
 - '0';

726 
°©e
 = 
sw_maj‹_digô
;

730 
sw_maj‹_digô
:

731 i‡(
ch
 == '.') {

732 
°©e
 = 
sw_fú°_mö‹_digô
;

736 i‡(
ch
 < '0' || ch > '9') {

737  
NGX_HTTP_PARSE_INVALID_REQUEST
;

740 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

744 
sw_fú°_mö‹_digô
:

745 i‡(
ch
 < '0' || ch > '9') {

746  
NGX_HTTP_PARSE_INVALID_REQUEST
;

749 
r
->
hâp_mö‹
 = 
ch
 - '0';

750 
°©e
 = 
sw_mö‹_digô
;

754 
sw_mö‹_digô
:

755 i‡(
ch
 =
CR
) {

756 
°©e
 = 
sw_Æmo°_d⁄e
;

760 i‡(
ch
 =
LF
) {

761 
d⁄e
;

764 i‡(
ch
 == ' ') {

765 
°©e
 = 
sw_•a˚s_a·î_digô
;

769 i‡(
ch
 < '0' || ch > '9') {

770  
NGX_HTTP_PARSE_INVALID_REQUEST
;

773 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

776 
sw_•a˚s_a·î_digô
:

777 
ch
) {

780 
CR
:

781 
°©e
 = 
sw_Æmo°_d⁄e
;

783 
LF
:

784 
d⁄e
;

786  
NGX_HTTP_PARSE_INVALID_REQUEST
;

791 
sw_Æmo°_d⁄e
:

792 
r
->
ªque°_íd
 = 
p
 - 1;

793 
ch
) {

794 
LF
:

795 
d⁄e
;

797  
NGX_HTTP_PARSE_INVALID_REQUEST
;

802 
b
->
pos
 = 
p
;

803 
r
->
°©e
 = state;

805  
NGX_AGAIN
;

807 
d⁄e
:

809 
b
->
pos
 = 
p
 + 1;

811 i‡(
r
->
ªque°_íd
 =
NULL
) {

812 
r
->
ªque°_íd
 = 
p
;

815 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

816 
r
->
°©e
 = 
sw_°¨t
;

818 i‡(
r
->
hâp_vîsi⁄
 =9 &&Ñ->
mëhod
 !
NGX_HTTP_GET
) {

819  
NGX_HTTP_PARSE_INVALID_09_METHOD
;

822  
NGX_OK
;

823 
	}
}

826 
ngx_öt_t


827 
	$ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

828 
ngx_uöt_t
 
Ælow_undîsc‹es
)

830 
u_ch¨
 
c
, 
ch
, *
p
;

831 
ngx_uöt_t
 
hash
, 
i
;

833 
sw_°¨t
 = 0,

834 
sw_«me
,

835 
sw_•a˚_bef‹e_vÆue
,

836 
sw_vÆue
,

837 
sw_•a˚_a·î_vÆue
,

838 
sw_ign‹e_löe
,

839 
sw_Æmo°_d⁄e
,

840 
sw_hódî_Æmo°_d⁄e


841 } 
°©e
;

845 
u_ch¨
 
lowˇ£
[] =

855 
°©e
 = 
r
->state;

856 
hash
 = 
r
->
hódî_hash
;

857 
i
 = 
r
->
lowˇ£_ödex
;

859 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

860 
ch
 = *
p
;

862 
°©e
) {

865 
sw_°¨t
:

866 
r
->
hódî_«me_°¨t
 = 
p
;

867 
r
->
övÆid_hódî
 = 0;

869 
ch
) {

870 
CR
:

871 
r
->
hódî_íd
 = 
p
;

872 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

874 
LF
:

875 
r
->
hódî_íd
 = 
p
;

876 
hódî_d⁄e
;

878 
°©e
 = 
sw_«me
;

880 
c
 = 
lowˇ£
[
ch
];

882 i‡(
c
) {

883 
hash
 = 
	`ngx_hash
(0, 
c
);

884 
r
->
lowˇ£_hódî
[0] = 
c
;

885 
i
 = 1;

889 i‡(
ch
 == '_') {

890 i‡(
Ælow_undîsc‹es
) {

891 
hash
 = 
	`ngx_hash
(0, 
ch
);

892 
r
->
lowˇ£_hódî
[0] = 
ch
;

893 
i
 = 1;

896 
r
->
övÆid_hódî
 = 1;

902 i‡(
ch
 == '\0') {

903  
NGX_HTTP_PARSE_INVALID_HEADER
;

906 
r
->
övÆid_hódî
 = 1;

914 
sw_«me
:

915 
c
 = 
lowˇ£
[
ch
];

917 i‡(
c
) {

918 
hash
 = 
	`ngx_hash
(hash, 
c
);

919 
r
->
lowˇ£_hódî
[
i
++] = 
c
;

920 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

924 i‡(
ch
 == '_') {

925 i‡(
Ælow_undîsc‹es
) {

926 
hash
 = 
	`ngx_hash
(hash, 
ch
);

927 
r
->
lowˇ£_hódî
[
i
++] = 
ch
;

928 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

931 
r
->
övÆid_hódî
 = 1;

937 i‡(
ch
 == ':') {

938 
r
->
hódî_«me_íd
 = 
p
;

939 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

943 i‡(
ch
 =
CR
) {

944 
r
->
hódî_«me_íd
 = 
p
;

945 
r
->
hódî_°¨t
 = 
p
;

946 
r
->
hódî_íd
 = 
p
;

947 
°©e
 = 
sw_Æmo°_d⁄e
;

951 i‡(
ch
 =
LF
) {

952 
r
->
hódî_«me_íd
 = 
p
;

953 
r
->
hódî_°¨t
 = 
p
;

954 
r
->
hódî_íd
 = 
p
;

955 
d⁄e
;

959 i‡(
ch
 == '/'

960 && 
r
->
up°ªam


961 && 
p
 - 
r
->
hódî_«me_°¨t
 == 4

962 && 
	`ngx_°∫cmp
(
r
->
hódî_«me_°¨t
, "HTTP", 4) == 0)

964 
°©e
 = 
sw_ign‹e_löe
;

968 i‡(
ch
 == '\0') {

969  
NGX_HTTP_PARSE_INVALID_HEADER
;

972 
r
->
övÆid_hódî
 = 1;

977 
sw_•a˚_bef‹e_vÆue
:

978 
ch
) {

981 
CR
:

982 
r
->
hódî_°¨t
 = 
p
;

983 
r
->
hódî_íd
 = 
p
;

984 
°©e
 = 
sw_Æmo°_d⁄e
;

986 
LF
:

987 
r
->
hódî_°¨t
 = 
p
;

988 
r
->
hódî_íd
 = 
p
;

989 
d⁄e
;

991  
NGX_HTTP_PARSE_INVALID_HEADER
;

993 
r
->
hódî_°¨t
 = 
p
;

994 
°©e
 = 
sw_vÆue
;

1000 
sw_vÆue
:

1001 
ch
) {

1003 
r
->
hódî_íd
 = 
p
;

1004 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1006 
CR
:

1007 
r
->
hódî_íd
 = 
p
;

1008 
°©e
 = 
sw_Æmo°_d⁄e
;

1010 
LF
:

1011 
r
->
hódî_íd
 = 
p
;

1012 
d⁄e
;

1014  
NGX_HTTP_PARSE_INVALID_HEADER
;

1019 
sw_•a˚_a·î_vÆue
:

1020 
ch
) {

1023 
CR
:

1024 
°©e
 = 
sw_Æmo°_d⁄e
;

1026 
LF
:

1027 
d⁄e
;

1029  
NGX_HTTP_PARSE_INVALID_HEADER
;

1031 
°©e
 = 
sw_vÆue
;

1037 
sw_ign‹e_löe
:

1038 
ch
) {

1039 
LF
:

1040 
°©e
 = 
sw_°¨t
;

1048 
sw_Æmo°_d⁄e
:

1049 
ch
) {

1050 
LF
:

1051 
d⁄e
;

1052 
CR
:

1055  
NGX_HTTP_PARSE_INVALID_HEADER
;

1060 
sw_hódî_Æmo°_d⁄e
:

1061 
ch
) {

1062 
LF
:

1063 
hódî_d⁄e
;

1065  
NGX_HTTP_PARSE_INVALID_HEADER
;

1070 
b
->
pos
 = 
p
;

1071 
r
->
°©e
 = state;

1072 
r
->
hódî_hash
 = 
hash
;

1073 
r
->
lowˇ£_ödex
 = 
i
;

1075  
NGX_AGAIN
;

1077 
d⁄e
:

1079 
b
->
pos
 = 
p
 + 1;

1080 
r
->
°©e
 = 
sw_°¨t
;

1081 
r
->
hódî_hash
 = 
hash
;

1082 
r
->
lowˇ£_ödex
 = 
i
;

1084  
NGX_OK
;

1086 
hódî_d⁄e
:

1088 
b
->
pos
 = 
p
 + 1;

1089 
r
->
°©e
 = 
sw_°¨t
;

1091  
NGX_HTTP_PARSE_HEADER_DONE
;

1092 
	}
}

1095 
ngx_öt_t


1096 
	$ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
)

1098 
u_ch¨
 *
p
, 
ch
;

1100 
sw_°¨t
 = 0,

1101 
sw_a·î_¶ash_ö_uri
,

1102 
sw_check_uri
,

1103 
sw_uri


1104 } 
°©e
;

1106 
°©e
 = 
sw_°¨t
;

1108 
p
 = 
r
->
uri_°¨t
;Ö !r->
uri_íd
;Ö++) {

1110 
ch
 = *
p
;

1112 
°©e
) {

1114 
sw_°¨t
:

1116 i‡(
ch
 != '/') {

1117  
NGX_ERROR
;

1120 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1124 
sw_a·î_¶ash_ö_uri
:

1126 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1127 
°©e
 = 
sw_check_uri
;

1131 
ch
) {

1133 
r
->
•a˚_ö_uri
 = 1;

1134 
°©e
 = 
sw_check_uri
;

1137 
r
->
com∂ex_uri
 = 1;

1138 
°©e
 = 
sw_uri
;

1141 
r
->
quŸed_uri
 = 1;

1142 
°©e
 = 
sw_uri
;

1145 
r
->
com∂ex_uri
 = 1;

1146 
°©e
 = 
sw_uri
;

1148 #i‡(
NGX_WIN32
)

1150 
r
->
com∂ex_uri
 = 1;

1151 
°©e
 = 
sw_uri
;

1155 
r
->
¨gs_°¨t
 = 
p
 + 1;

1156 
°©e
 = 
sw_uri
;

1159 
r
->
com∂ex_uri
 = 1;

1160 
°©e
 = 
sw_uri
;

1163 
r
->
∂us_ö_uri
 = 1;

1166 
°©e
 = 
sw_check_uri
;

1172 
sw_check_uri
:

1174 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1178 
ch
) {

1180 #i‡(
NGX_WIN32
)

1181 i‡(
r
->
uri_ext
 =
p
) {

1182 
r
->
com∂ex_uri
 = 1;

1183 
°©e
 = 
sw_uri
;

1187 
r
->
uri_ext
 = 
NULL
;

1188 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1191 
r
->
uri_ext
 = 
p
 + 1;

1194 
r
->
•a˚_ö_uri
 = 1;

1196 #i‡(
NGX_WIN32
)

1198 
r
->
com∂ex_uri
 = 1;

1199 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1203 
r
->
quŸed_uri
 = 1;

1204 
°©e
 = 
sw_uri
;

1207 
r
->
¨gs_°¨t
 = 
p
 + 1;

1208 
°©e
 = 
sw_uri
;

1211 
r
->
com∂ex_uri
 = 1;

1212 
°©e
 = 
sw_uri
;

1215 
r
->
∂us_ö_uri
 = 1;

1221 
sw_uri
:

1223 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1227 
ch
) {

1229 
r
->
•a˚_ö_uri
 = 1;

1232 
r
->
com∂ex_uri
 = 1;

1239  
NGX_OK
;

1240 
	}
}

1243 
ngx_öt_t


1244 
	$ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
mîge_¶ashes
)

1246 
u_ch¨
 
c
, 
ch
, 
decoded
, *
p
, *
u
;

1248 
sw_usuÆ
 = 0,

1249 
sw_¶ash
,

1250 
sw_dŸ
,

1251 
sw_dŸ_dŸ
,

1252 
sw_quŸed
,

1253 
sw_quŸed_£c⁄d


1254 } 
°©e
, 
quŸed_°©e
;

1256 #i‡(
NGX_SUPPRESS_WARN
)

1257 
decoded
 = '\0';

1258 
quŸed_°©e
 = 
sw_usuÆ
;

1261 
°©e
 = 
sw_usuÆ
;

1262 
p
 = 
r
->
uri_°¨t
;

1263 
u
 = 
r
->
uri
.
d©a
;

1264 
r
->
uri_ext
 = 
NULL
;

1265 
r
->
¨gs_°¨t
 = 
NULL
;

1267 
ch
 = *
p
++;

1269 
p
 <
r
->
uri_íd
) {

1277 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1278 "s:%d in:'%Xd:%c'", 
°©e
, 
ch
, ch);

1280 
°©e
) {

1282 
sw_usuÆ
:

1284 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1285 *
u
++ = 
ch
;

1286 
ch
 = *
p
++;

1290 
ch
) {

1291 #i‡(
NGX_WIN32
)

1293 i‡(
u
 - 2 >
r
->
uri
.
d©a


1294 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1296 
u
--;

1299 
r
->
uri_ext
 = 
NULL
;

1301 i‡(
p
 =
r
->
uri_°¨t
 +Ñ->
uri
.
Àn
) {

1311 
°©e
 = 
sw_¶ash
;

1312 *
u
++ = '/';

1316 #i‡(
NGX_WIN32
)

1317 i‡(
u
 - 2 >
r
->
uri
.
d©a


1318 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1320 
u
--;

1323 
r
->
uri_ext
 = 
NULL
;

1324 
°©e
 = 
sw_¶ash
;

1325 *
u
++ = 
ch
;

1328 
quŸed_°©e
 = 
°©e
;

1329 
°©e
 = 
sw_quŸed
;

1332 
r
->
¨gs_°¨t
 = 
p
;

1333 
¨gs
;

1335 
d⁄e
;

1337 
r
->
uri_ext
 = 
u
 + 1;

1338 *
u
++ = 
ch
;

1341 
r
->
∂us_ö_uri
 = 1;

1344 *
u
++ = 
ch
;

1348 
ch
 = *
p
++;

1351 
sw_¶ash
:

1353 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1354 
°©e
 = 
sw_usuÆ
;

1355 *
u
++ = 
ch
;

1356 
ch
 = *
p
++;

1360 
ch
) {

1361 #i‡(
NGX_WIN32
)

1366 i‡(!
mîge_¶ashes
) {

1367 *
u
++ = 
ch
;

1371 
°©e
 = 
sw_dŸ
;

1372 *
u
++ = 
ch
;

1375 
quŸed_°©e
 = 
°©e
;

1376 
°©e
 = 
sw_quŸed
;

1379 
r
->
¨gs_°¨t
 = 
p
;

1380 
¨gs
;

1382 
d⁄e
;

1384 
r
->
∂us_ö_uri
 = 1;

1386 
°©e
 = 
sw_usuÆ
;

1387 *
u
++ = 
ch
;

1391 
ch
 = *
p
++;

1394 
sw_dŸ
:

1396 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1397 
°©e
 = 
sw_usuÆ
;

1398 *
u
++ = 
ch
;

1399 
ch
 = *
p
++;

1403 
ch
) {

1404 #i‡(
NGX_WIN32
)

1408 
°©e
 = 
sw_¶ash
;

1409 
u
--;

1412 
°©e
 = 
sw_dŸ_dŸ
;

1413 *
u
++ = 
ch
;

1416 
quŸed_°©e
 = 
°©e
;

1417 
°©e
 = 
sw_quŸed
;

1420 
r
->
¨gs_°¨t
 = 
p
;

1421 
¨gs
;

1423 
d⁄e
;

1425 
r
->
∂us_ö_uri
 = 1;

1427 
°©e
 = 
sw_usuÆ
;

1428 *
u
++ = 
ch
;

1432 
ch
 = *
p
++;

1435 
sw_dŸ_dŸ
:

1437 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1438 
°©e
 = 
sw_usuÆ
;

1439 *
u
++ = 
ch
;

1440 
ch
 = *
p
++;

1444 
ch
) {

1445 #i‡(
NGX_WIN32
)

1449 
°©e
 = 
sw_¶ash
;

1450 
u
 -= 5;

1452 i‡(
u
 < 
r
->
uri
.
d©a
) {

1453  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1455 i‡(*
u
 == '/') {

1456 
u
++;

1459 
u
--;

1463 
quŸed_°©e
 = 
°©e
;

1464 
°©e
 = 
sw_quŸed
;

1467 
r
->
¨gs_°¨t
 = 
p
;

1468 
¨gs
;

1470 
d⁄e
;

1472 
r
->
∂us_ö_uri
 = 1;

1474 
°©e
 = 
sw_usuÆ
;

1475 *
u
++ = 
ch
;

1479 
ch
 = *
p
++;

1482 
sw_quŸed
:

1483 
r
->
quŸed_uri
 = 1;

1485 i‡(
ch
 >= '0' && ch <= '9') {

1486 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1487 
°©e
 = 
sw_quŸed_£c⁄d
;

1488 
ch
 = *
p
++;

1492 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1493 i‡(
c
 >= 'a' && c <= 'f') {

1494 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1495 
°©e
 = 
sw_quŸed_£c⁄d
;

1496 
ch
 = *
p
++;

1500  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1502 
sw_quŸed_£c⁄d
:

1503 i‡(
ch
 >= '0' && ch <= '9') {

1504 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1506 i‡(
ch
 == '%' || ch == '#') {

1507 
°©e
 = 
sw_usuÆ
;

1508 *
u
++ = 
ch
;

1509 
ch
 = *
p
++;

1512 } i‡(
ch
 == '\0') {

1513  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1516 
°©e
 = 
quŸed_°©e
;

1520 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1521 i‡(
c
 >= 'a' && c <= 'f') {

1522 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1524 i‡(
ch
 == '?') {

1525 
°©e
 = 
sw_usuÆ
;

1526 *
u
++ = 
ch
;

1527 
ch
 = *
p
++;

1530 } i‡(
ch
 == '+') {

1531 
r
->
∂us_ö_uri
 = 1;

1534 
°©e
 = 
quŸed_°©e
;

1538  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1542 
d⁄e
:

1544 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1546 i‡(
r
->
uri_ext
) {

1547 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1548 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1551 
r
->
uri_ext
 = 
NULL
;

1553  
NGX_OK
;

1555 
¨gs
:

1557 
p
 < 
r
->
uri_íd
) {

1558 i‡(*
p
++ != '#') {

1562 
r
->
¨gs
.
Àn
 = 
p
 - 1 -Ñ->
¨gs_°¨t
;

1563 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1564 
r
->
¨gs_°¨t
 = 
NULL
;

1569 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1571 i‡(
r
->
uri_ext
) {

1572 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1573 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1576 
r
->
uri_ext
 = 
NULL
;

1578  
NGX_OK
;

1579 
	}
}

1582 
ngx_öt_t


1583 
	$ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

1584 
ngx_hâp_°©us_t
 *
°©us
)

1586 
u_ch¨
 
ch
;

1587 
u_ch¨
 *
p
;

1589 
sw_°¨t
 = 0,

1590 
sw_H
,

1591 
sw_HT
,

1592 
sw_HTT
,

1593 
sw_HTTP
,

1594 
sw_fú°_maj‹_digô
,

1595 
sw_maj‹_digô
,

1596 
sw_fú°_mö‹_digô
,

1597 
sw_mö‹_digô
,

1598 
sw_°©us
,

1599 
sw_•a˚_a·î_°©us
,

1600 
sw_°©us_ãxt
,

1601 
sw_Æmo°_d⁄e


1602 } 
°©e
;

1604 
°©e
 = 
r
->state;

1606 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1607 
ch
 = *
p
;

1609 
°©e
) {

1612 
sw_°¨t
:

1613 
ch
) {

1615 
°©e
 = 
sw_H
;

1618  
NGX_ERROR
;

1622 
sw_H
:

1623 
ch
) {

1625 
°©e
 = 
sw_HT
;

1628  
NGX_ERROR
;

1632 
sw_HT
:

1633 
ch
) {

1635 
°©e
 = 
sw_HTT
;

1638  
NGX_ERROR
;

1642 
sw_HTT
:

1643 
ch
) {

1645 
°©e
 = 
sw_HTTP
;

1648  
NGX_ERROR
;

1652 
sw_HTTP
:

1653 
ch
) {

1655 
°©e
 = 
sw_fú°_maj‹_digô
;

1658  
NGX_ERROR
;

1663 
sw_fú°_maj‹_digô
:

1664 i‡(
ch
 < '1' || ch > '9') {

1665  
NGX_ERROR
;

1668 
r
->
hâp_maj‹
 = 
ch
 - '0';

1669 
°©e
 = 
sw_maj‹_digô
;

1673 
sw_maj‹_digô
:

1674 i‡(
ch
 == '.') {

1675 
°©e
 = 
sw_fú°_mö‹_digô
;

1679 i‡(
ch
 < '0' || ch > '9') {

1680  
NGX_ERROR
;

1683 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

1687 
sw_fú°_mö‹_digô
:

1688 i‡(
ch
 < '0' || ch > '9') {

1689  
NGX_ERROR
;

1692 
r
->
hâp_mö‹
 = 
ch
 - '0';

1693 
°©e
 = 
sw_mö‹_digô
;

1697 
sw_mö‹_digô
:

1698 i‡(
ch
 == ' ') {

1699 
°©e
 = 
sw_°©us
;

1703 i‡(
ch
 < '0' || ch > '9') {

1704  
NGX_ERROR
;

1707 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

1711 
sw_°©us
:

1712 i‡(
ch
 == ' ') {

1716 i‡(
ch
 < '0' || ch > '9') {

1717  
NGX_ERROR
;

1720 
°©us
->
code
 = sètus->codê* 10 + 
ch
 - '0';

1722 i‡(++
°©us
->
cou¡
 == 3) {

1723 
°©e
 = 
sw_•a˚_a·î_°©us
;

1724 
°©us
->
°¨t
 = 
p
 - 2;

1730 
sw_•a˚_a·î_°©us
:

1731 
ch
) {

1733 
°©e
 = 
sw_°©us_ãxt
;

1736 
°©e
 = 
sw_°©us_ãxt
;

1738 
CR
:

1739 
°©e
 = 
sw_Æmo°_d⁄e
;

1741 
LF
:

1742 
d⁄e
;

1744  
NGX_ERROR
;

1749 
sw_°©us_ãxt
:

1750 
ch
) {

1751 
CR
:

1752 
°©e
 = 
sw_Æmo°_d⁄e
;

1755 
LF
:

1756 
d⁄e
;

1761 
sw_Æmo°_d⁄e
:

1762 
°©us
->
íd
 = 
p
 - 1;

1763 
ch
) {

1764 
LF
:

1765 
d⁄e
;

1767  
NGX_ERROR
;

1772 
b
->
pos
 = 
p
;

1773 
r
->
°©e
 = state;

1775  
NGX_AGAIN
;

1777 
d⁄e
:

1779 
b
->
pos
 = 
p
 + 1;

1781 i‡(
°©us
->
íd
 =
NULL
) {

1782 
°©us
->
íd
 = 
p
;

1785 
°©us
->
hâp_vîsi⁄
 = 
r
->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

1786 
r
->
°©e
 = 
sw_°¨t
;

1788  
NGX_OK
;

1789 
	}
}

1792 
ngx_öt_t


1793 
	$ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

1794 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
)

1796 
u_ch¨
 
ch
, *
p
, *
§c
, *
d°
;

1797 
size_t
 
Àn
;

1798 
ngx_uöt_t
 
quŸed
;

1800 
Àn
 = 
uri
->len;

1801 
p
 = 
uri
->
d©a
;

1802 
quŸed
 = 0;

1804 i‡(
Àn
 =0 || 
p
[0] == '?') {

1805 
unß„
;

1808 i‡(
p
[0] ='.' && 
Àn
 > 1 &&Ö[1] == '.'

1809 && (
Àn
 =2 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1811 
unß„
;

1814  ; 
Àn
;Üen--) {

1816 
ch
 = *
p
++;

1818 i‡(
ch
 == '%') {

1819 
quŸed
 = 1;

1823 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1827 i‡(
ch
 == '?') {

1828 
¨gs
->
Àn
 =Üen - 1;

1829 
¨gs
->
d©a
 = 
p
;

1830 
uri
->
Àn
 -=Üen;

1835 i‡(
ch
 == '\0') {

1836 
unß„
;

1839 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1843 i‡(
p
[0] == '.' &&Ö[1] == '.'

1844 && (
Àn
 =3 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1846 
unß„
;

1851 i‡(
quŸed
) {

1852 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1853 "esˇ≥d URI: \"%V\"", 
uri
);

1855 
§c
 = 
uri
->
d©a
;

1857 
d°
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uri
->
Àn
);

1858 i‡(
d°
 =
NULL
) {

1859  
NGX_ERROR
;

1862 
uri
->
d©a
 = 
d°
;

1864 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
uri
->
Àn
, 0);

1866 
uri
->
Àn
 = 
d°
 - uri->
d©a
;

1868 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1869 "u√sˇ≥d URI: \"%V\"", 
uri
);

1871 
Àn
 = 
uri
->len;

1872 
p
 = 
uri
->
d©a
;

1874 i‡(
p
[0] ='.' && 
Àn
 > 1 &&Ö[1] == '.'

1875 && (
Àn
 =2 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1877 
unß„
;

1880  ; 
Àn
;Üen--) {

1882 
ch
 = *
p
++;

1884 i‡(
ch
 == '\0') {

1885 
unß„
;

1888 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1892 i‡(
p
[0] == '.' &&Ö[1] == '.'

1893 && (
Àn
 =3 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1895 
unß„
;

1901  
NGX_OK
;

1903 
unß„
:

1905 i‡(*
Êags
 & 
NGX_HTTP_LOG_UNSAFE
) {

1906 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1907 "unß„ URI \"%V\" wa†dëe˘ed", 
uri
);

1910  
NGX_ERROR
;

1911 
	}
}

1914 
ngx_öt_t


1915 
	$ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

1916 
ngx_°r_t
 *
vÆue
)

1918 
ngx_uöt_t
 
i
;

1919 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
, 
ch
;

1920 
ngx_èbÀ_ñt_t
 **
h
;

1922 
h
 = 
hódîs
->
ñts
;

1924 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

1926 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

1927 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

1929 i‡(
«me
->
Àn
 > 
h
[
i
]->
vÆue
.len) {

1933 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

1934 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

1936 
°¨t
 < 
íd
) {

1938 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

1939 
skù
;

1942 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

1946 i‡(
vÆue
 =
NULL
) {

1947 i‡(
°¨t
 =
íd
 || *start == ',') {

1948  
i
;

1951 
skù
;

1954 i‡(
°¨t
 =
íd
 || *start++ != '=') {

1956 
skù
;

1959 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1961 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

1965 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

1966 
vÆue
->
d©a
 = 
°¨t
;

1968  
i
;

1970 
skù
:

1972 
°¨t
 < 
íd
) {

1973 
ch
 = *
°¨t
++;

1974 i‡(
ch
 == ';' || ch == ',') {

1979 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1983  
NGX_DECLINED
;

1984 
	}
}

1987 
ngx_öt_t


1988 
	$ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
, 
ngx_°r_t
 *
vÆue
)

1990 
u_ch¨
 *
p
, *
œ°
;

1992 i‡(
r
->
¨gs
.
Àn
 == 0) {

1993  
NGX_DECLINED
;

1996 
p
 = 
r
->
¨gs
.
d©a
;

1997 
œ°
 = 
p
 + 
r
->
¨gs
.
Àn
;

1999  ; 
p
 < 
œ°
;Ö++) {

2003 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
 - 1, 
«me
, 
Àn
 - 1);

2005 i‡(
p
 =
NULL
) {

2006  
NGX_DECLINED
;

2009 i‡((
p
 =
r
->
¨gs
.
d©a
 || *’ - 1Ë='&'Ë&& *’ + 
Àn
) == '=') {

2011 
vÆue
->
d©a
 = 
p
 + 
Àn
 + 1;

2013 
p
 = 
	`ngx_°æchr
’, 
œ°
, '&');

2015 i‡(
p
 =
NULL
) {

2016 
p
 = 
r
->
¨gs
.
d©a
 +Ñ->¨gs.
Àn
;

2019 
vÆue
->
Àn
 = 
p
 - vÆue->
d©a
;

2021  
NGX_OK
;

2025  
NGX_DECLINED
;

2026 
	}
}

2030 
	$ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2032 
u_ch¨
 *
p
, *
œ°
;

2034 
œ°
 = 
uri
->
d©a
 + uri->
Àn
;

2036 
p
 = 
	`ngx_°æchr
(
uri
->
d©a
, 
œ°
, '?');

2038 i‡(
p
) {

2039 
uri
->
Àn
 = 
p
 - uri->
d©a
;

2040 
p
++;

2041 
¨gs
->
Àn
 = 
œ°
 - 
p
;

2042 
¨gs
->
d©a
 = 
p
;

2045 
¨gs
->
Àn
 = 0;

2047 
	}
}

2050 
ngx_öt_t


2051 
	$ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

2052 
ngx_hâp_chunked_t
 *
˘x
)

2054 
u_ch¨
 *
pos
, 
ch
, 
c
;

2055 
ngx_öt_t
 
rc
;

2057 
sw_chunk_°¨t
 = 0,

2058 
sw_chunk_size
,

2059 
sw_chunk_exãnsi⁄
,

2060 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
,

2061 
sw_chunk_d©a
,

2062 
sw_a·î_d©a
,

2063 
sw_a·î_d©a_Æmo°_d⁄e
,

2064 
sw_œ°_chunk_exãnsi⁄
,

2065 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
,

2066 
sw_åaûî
,

2067 
sw_åaûî_Æmo°_d⁄e
,

2068 
sw_åaûî_hódî
,

2069 
sw_åaûî_hódî_Æmo°_d⁄e


2070 } 
°©e
;

2072 
°©e
 = 
˘x
->state;

2074 i‡(
°©e
 =
sw_chunk_d©a
 && 
˘x
->
size
 == 0) {

2075 
°©e
 = 
sw_a·î_d©a
;

2078 
rc
 = 
NGX_AGAIN
;

2080 
pos
 = 
b
->pos;Öo†< b->
œ°
;Öos++) {

2082 
ch
 = *
pos
;

2084 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2085 "hâ∞chunked byã: %02Xd s:%d", 
ch
, 
°©e
);

2087 
°©e
) {

2089 
sw_chunk_°¨t
:

2090 i‡(
ch
 >= '0' && ch <= '9') {

2091 
°©e
 = 
sw_chunk_size
;

2092 
˘x
->
size
 = 
ch
 - '0';

2096 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2098 i‡(
c
 >= 'a' && c <= 'f') {

2099 
°©e
 = 
sw_chunk_size
;

2100 
˘x
->
size
 = 
c
 - 'a' + 10;

2104 
övÆid
;

2106 
sw_chunk_size
:

2107 i‡(
ch
 >= '0' && ch <= '9') {

2108 
˘x
->
size
 = ctx->sizê* 16 + (
ch
 - '0');

2112 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2114 i‡(
c
 >= 'a' && c <= 'f') {

2115 
˘x
->
size
 = ctx->sizê* 16 + (
c
 - 'a' + 10);

2119 i‡(
˘x
->
size
 == 0) {

2121 
ch
) {

2122 
CR
:

2123 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2125 
LF
:

2126 
°©e
 = 
sw_åaûî
;

2131 
°©e
 = 
sw_œ°_chunk_exãnsi⁄
;

2134 
övÆid
;

2140 
ch
) {

2141 
CR
:

2142 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2144 
LF
:

2145 
°©e
 = 
sw_chunk_d©a
;

2150 
°©e
 = 
sw_chunk_exãnsi⁄
;

2153 
övÆid
;

2158 
sw_chunk_exãnsi⁄
:

2159 
ch
) {

2160 
CR
:

2161 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2163 
LF
:

2164 
°©e
 = 
sw_chunk_d©a
;

2168 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2169 i‡(
ch
 =
LF
) {

2170 
°©e
 = 
sw_chunk_d©a
;

2173 
övÆid
;

2175 
sw_chunk_d©a
:

2176 
rc
 = 
NGX_OK
;

2177 
d©a
;

2179 
sw_a·î_d©a
:

2180 
ch
) {

2181 
CR
:

2182 
°©e
 = 
sw_a·î_d©a_Æmo°_d⁄e
;

2184 
LF
:

2185 
°©e
 = 
sw_chunk_°¨t
;

2189 
sw_a·î_d©a_Æmo°_d⁄e
:

2190 i‡(
ch
 =
LF
) {

2191 
°©e
 = 
sw_chunk_°¨t
;

2194 
övÆid
;

2196 
sw_œ°_chunk_exãnsi⁄
:

2197 
ch
) {

2198 
CR
:

2199 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2201 
LF
:

2202 
°©e
 = 
sw_åaûî
;

2206 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2207 i‡(
ch
 =
LF
) {

2208 
°©e
 = 
sw_åaûî
;

2211 
övÆid
;

2213 
sw_åaûî
:

2214 
ch
) {

2215 
CR
:

2216 
°©e
 = 
sw_åaûî_Æmo°_d⁄e
;

2218 
LF
:

2219 
d⁄e
;

2221 
°©e
 = 
sw_åaûî_hódî
;

2225 
sw_åaûî_Æmo°_d⁄e
:

2226 i‡(
ch
 =
LF
) {

2227 
d⁄e
;

2229 
övÆid
;

2231 
sw_åaûî_hódî
:

2232 
ch
) {

2233 
CR
:

2234 
°©e
 = 
sw_åaûî_hódî_Æmo°_d⁄e
;

2236 
LF
:

2237 
°©e
 = 
sw_åaûî
;

2241 
sw_åaûî_hódî_Æmo°_d⁄e
:

2242 i‡(
ch
 =
LF
) {

2243 
°©e
 = 
sw_åaûî
;

2246 
övÆid
;

2251 
d©a
:

2253 
˘x
->
°©e
 = state;

2254 
b
->
pos
 =Öos;

2256 
°©e
) {

2258 
sw_chunk_°¨t
:

2259 
˘x
->
Àngth
 = 3 ;

2261 
sw_chunk_size
:

2262 
˘x
->
Àngth
 = 1

2263 + (
˘x
->
size
 ? ctx->size + 4

2266 
sw_chunk_exãnsi⁄
:

2267 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2268 
˘x
->
Àngth
 = 1 + ctx->
size
 + 4 ;

2270 
sw_chunk_d©a
:

2271 
˘x
->
Àngth
 = ctx->
size
 + 4 ;

2273 
sw_a·î_d©a
:

2274 
sw_a·î_d©a_Æmo°_d⁄e
:

2275 
˘x
->
Àngth
 = 4 ;

2277 
sw_œ°_chunk_exãnsi⁄
:

2278 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2279 
˘x
->
Àngth
 = 2 ;

2281 
sw_åaûî
:

2282 
sw_åaûî_Æmo°_d⁄e
:

2283 
˘x
->
Àngth
 = 1 ;

2285 
sw_åaûî_hódî
:

2286 
sw_åaûî_hódî_Æmo°_d⁄e
:

2287 
˘x
->
Àngth
 = 2 ;

2292 i‡(
˘x
->
size
 < 0 || ctx->
Àngth
 < 0) {

2293 
övÆid
;

2296  
rc
;

2298 
d⁄e
:

2300 
˘x
->
°©e
 = 0;

2301 
b
->
pos
 =Öos + 1;

2303  
NGX_DONE
;

2305 
övÆid
:

2307  
NGX_ERROR
;

2308 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_parse_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
	gmday
[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

15 
time_t


16 
	$ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
)

18 
u_ch¨
 *
p
, *
íd
;

19 
ngx_öt_t
 
m⁄th
;

20 
ngx_uöt_t
 
day
, 
yór
, 
hour
, 
mö
, 
£c
;

21 
uöt64_t
 
time
;

23 
no
 = 0,

24 
rfc822
,

25 
rfc850
,

26 
isoc


27 } 
fmt
;

29 
fmt
 = 0;

30 
íd
 = 
vÆue
 + 
Àn
;

32 #i‡(
NGX_SUPPRESS_WARN
)

33 
day
 = 32;

34 
yór
 = 2038;

37 
p
 = 
vÆue
;Ö < 
íd
;Ö++) {

38 i‡(*
p
 == ',') {

42 i‡(*
p
 == ' ') {

43 
fmt
 = 
isoc
;

48 
p
++;Ö < 
íd
;Ö++)

49 i‡(*
p
 != ' ') {

53 i‡(
íd
 - 
p
 < 18) {

54  
NGX_ERROR
;

57 i‡(
fmt
 !
isoc
) {

58 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

59  
NGX_ERROR
;

62 
day
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

63 
p
 += 2;

65 i‡(*
p
 == ' ') {

66 i‡(
íd
 - 
p
 < 18) {

67  
NGX_ERROR
;

69 
fmt
 = 
rfc822
;

71 } i‡(*
p
 == '-') {

72 
fmt
 = 
rfc850
;

75  
NGX_ERROR
;

78 
p
++;

81 *
p
) {

84 
m⁄th
 = *(
p
 + 1) == 'a' ? 0 : *(p + 2) == 'n' ? 5 : 6;

88 
m⁄th
 = 1;

92 
m⁄th
 = *(
p
 + 2) == 'r' ? 2 : 4;

96 
m⁄th
 = *(
p
 + 1) == 'p' ? 3 : 7;

100 
m⁄th
 = 8;

104 
m⁄th
 = 9;

108 
m⁄th
 = 10;

112 
m⁄th
 = 11;

116  
NGX_ERROR
;

119 
p
 += 3;

121 i‡((
fmt
 =
rfc822
 && *
p
 !' 'Ë|| (fmà=
rfc850
 && *p != '-')) {

122  
NGX_ERROR
;

125 
p
++;

127 i‡(
fmt
 =
rfc822
) {

128 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

129 || *(
p
 + 2) < '0' || *(p + 2) > '9'

130 || *(
p
 + 3) < '0' || *(p + 3) > '9')

132  
NGX_ERROR
;

135 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

136 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

137 
p
 += 4;

139 } i‡(
fmt
 =
rfc850
) {

140 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

141  
NGX_ERROR
;

144 
yór
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

145 
yór
 += (year < 70) ? 2000 : 1900;

146 
p
 += 2;

149 i‡(
fmt
 =
isoc
) {

150 i‡(*
p
 == ' ') {

151 
p
++;

154 i‡(*
p
 < '0' || *p > '9') {

155  
NGX_ERROR
;

158 
day
 = *
p
++ - '0';

160 i‡(*
p
 != ' ') {

161 i‡(*
p
 < '0' || *p > '9') {

162  
NGX_ERROR
;

165 
day
 = day * 10 + *
p
++ - '0';

168 i‡(
íd
 - 
p
 < 14) {

169  
NGX_ERROR
;

173 i‡(*
p
++ != ' ') {

174  
NGX_ERROR
;

177 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

178  
NGX_ERROR
;

181 
hour
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

182 
p
 += 2;

184 i‡(*
p
++ != ':') {

185  
NGX_ERROR
;

188 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

189  
NGX_ERROR
;

192 
mö
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

193 
p
 += 2;

195 i‡(*
p
++ != ':') {

196  
NGX_ERROR
;

199 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

200  
NGX_ERROR
;

203 
£c
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

205 i‡(
fmt
 =
isoc
) {

206 
p
 += 2;

208 i‡(*
p
++ != ' ') {

209  
NGX_ERROR
;

212 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

213 || *(
p
 + 2) < '0' || *(p + 2) > '9'

214 || *(
p
 + 3) < '0' || *(p + 3) > '9')

216  
NGX_ERROR
;

219 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

220 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

223 i‡(
hour
 > 23 || 
mö
 > 59 || 
£c
 > 59) {

224  
NGX_ERROR
;

227 i‡(
day
 =29 && 
m⁄th
 == 1) {

228 i‡((
yór
 & 3) || ((year % 100 == 0) && (year % 400) != 0)) {

229  
NGX_ERROR
;

232 } i‡(
day
 > 
mday
[
m⁄th
]) {

233  
NGX_ERROR
;

241 i‡(--
m⁄th
 <= 0) {

242 
m⁄th
 += 12;

243 
yór
 -= 1;

248 
time
 = (
uöt64_t
) (

251 365 * 
yór
 + year / 4 - year / 100 + year / 400

255 + 367 * 
m⁄th
 / 12 - 30

259 + 
day
 - 1

266 - 719527 + 31 + 28Ë* 86400 + 
hour
 * 3600 + 
mö
 * 60 + 
£c
;

268 #i‡(
NGX_TIME_T_SIZE
 <= 4)

270 i‡(
time
 > 0x7fffffff) {

271  
NGX_ERROR
;

276  (
time_t
Ë
time
;

277 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_postpone_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_chaö_t
 *
ö
);

15 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_po°p⁄e_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL


33 
ngx_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

52 
ngx_öt_t


53 
	$ngx_hâp_po°p⁄e_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

55 
ngx_c⁄√˘i⁄_t
 *
c
;

56 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
;

58 
c
 = 
r
->
c⁄√˘i⁄
;

60 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

61 "hâ∞po°p⁄êfûã∏\"%V?%V\" %p", &
r
->
uri
, &r->
¨gs
, 
ö
);

63 i‡(
r
 !
c
->
d©a
) {

65 i‡(
ö
) {

66 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

67  
NGX_OK
;

72 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

76  
NGX_OK
;

79 i‡(
r
->
po°p⁄ed
 =
NULL
) {

81 i‡(
ö
 || 
c
->
buf„ªd
) {

82  
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
ö
);

85  
NGX_OK
;

88 i‡(
ö
) {

89 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

93 
¥
 = 
r
->
po°p⁄ed
;

95 i‡(
¥
->
ªque°
) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

99 &
¥
->
ªque°
->
uri
, &¥->ªque°->
¨gs
);

101 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

103 
c
->
d©a
 = 
¥
->
ªque°
;

105  
	`ngx_hâp_po°_ªque°
(
¥
->
ªque°
, 
NULL
);

108 i‡(
¥
->
out
 =
NULL
) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

113 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

115 &
r
->
uri
, &r->
¨gs
);

117 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
¥
->
out
Ë=
NGX_ERROR
) {

118  
NGX_ERROR
;

122 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

124 } 
r
->
po°p⁄ed
);

126  
NGX_OK
;

127 
	}
}

130 
ngx_öt_t


131 
	$ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

133 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, **
µr
;

135 i‡(
r
->
po°p⁄ed
) {

136 
¥
 = 
r
->
po°p⁄ed
;Ör->
√xt
;Ör =Ör->next) { }

138 i‡(
¥
->
ªque°
 =
NULL
) {

139 
found
;

142 
µr
 = &
¥
->
√xt
;

145 
µr
 = &
r
->
po°p⁄ed
;

148 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

149 i‡(
¥
 =
NULL
) {

150  
NGX_ERROR
;

153 *
µr
 = 
¥
;

155 
¥
->
ªque°
 = 
NULL
;

156 
¥
->
out
 = 
NULL
;

157 
¥
->
√xt
 = 
NULL
;

159 
found
:

161 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
¥
->
out
, 
ö
Ë=
NGX_OK
) {

162  
NGX_OK
;

165  
NGX_ERROR
;

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

172 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

173 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_po°p⁄e_fûãr
;

175  
NGX_OK
;

176 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_request.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

14 
ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
);

15 
ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
);

16 
ssize_t
 
ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_uöt_t
 
ªque°_löe
);

20 
ngx_öt_t
 
ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

22 
ngx_öt_t
 
ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

24 
ngx_öt_t
 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

26 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

28 
ngx_öt_t
 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

30 
ngx_öt_t
 
ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

33 
ngx_öt_t
 
ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
,

34 
ngx_uöt_t
 
Æloc
);

35 
ngx_öt_t
 
ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_°r_t
 *
ho°
);

37 
ngx_öt_t
 
ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

38 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

39 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
);

41 
ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

42 
ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 
ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
);

47 
ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ev
);

51 
ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

53 
ngx_öt_t
 
ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

54 
ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

55 
ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

57 
u_ch¨
 *
ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

58 
u_ch¨
 *
ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_ªque°_t
 *
§
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

61 #i‡(
NGX_HTTP_SSL
)

62 
ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
);

63 
ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 *
	gngx_hâp_˛õ¡_îr‹s
[] = {

80 
ngx_hâp_hódî_t
 
	gngx_hâp_hódîs_ö
[] = {

81 { 
ngx_°rög
("Ho°"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
),

82 
ngx_hâp_¥o˚ss_ho°
 },

84 { 
ngx_°rög
("C⁄√˘i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄√˘i⁄
),

85 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
 },

87 { 
ngx_°rög
("If-Modified-Since"),

88 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_modifõd_sö˚
),

89 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

91 { 
ngx_°rög
("If-Unmodified-Since"),

92 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_unmodifõd_sö˚
),

93 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

95 { 
ngx_°rög
("If-Match"),

96 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_m©ch
),

97 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

99 { 
ngx_°rög
("If-None-Match"),

100 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_n⁄e_m©ch
),

101 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

103 { 
ngx_°rög
("U£r-Agít"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
),

104 
ngx_hâp_¥o˚ss_u£r_agít
 },

106 { 
ngx_°rög
("Re„ªr"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ª„ªr
),

107 
ngx_hâp_¥o˚ss_hódî_löe
 },

109 { 
ngx_°rög
("Content-Length"),

110 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

111 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

113 { 
ngx_°rög
("Content-Type"),

114 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

115 
ngx_hâp_¥o˚ss_hódî_löe
 },

117 { 
ngx_°rög
("R™ge"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ønge
),

118 
ngx_hâp_¥o˚ss_hódî_löe
 },

120 { 
ngx_°rög
("If-Range"),

121 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_ønge
),

122 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

124 { 
ngx_°rög
("Transfer-Encoding"),

125 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
å™s„r_ícodög
),

126 
ngx_hâp_¥o˚ss_hódî_löe
 },

128 { 
ngx_°rög
("Expect"),

129 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ex≥˘
),

130 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

132 { 
ngx_°rög
("Upgrade"),

133 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
upgøde
),

134 
ngx_hâp_¥o˚ss_hódî_löe
 },

136 #i‡(
NGX_HTTP_GZIP
)

137 { 
ngx_°rög
("Accept-Encoding"),

138 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
),

139 
ngx_hâp_¥o˚ss_hódî_löe
 },

141 { 
ngx_°rög
("Vü"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
vü
),

142 
ngx_hâp_¥o˚ss_hódî_löe
 },

145 { 
ngx_°rög
("Authorization"),

146 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
auth‹iz©i⁄
),

147 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

149 { 
ngx_°rög
("Kìp-Alive"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
kìp_Æive
),

150 
ngx_hâp_¥o˚ss_hódî_löe
 },

152 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

153 { 
ngx_°rög
("X-Forwarded-For"),

154 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_f‹w¨ded_f‹
),

155 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

158 #i‡(
NGX_HTTP_REALIP
)

159 { 
ngx_°rög
("X-Real-IP"),

160 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_ªÆ_ù
),

161 
ngx_hâp_¥o˚ss_hódî_löe
 },

164 #i‡(
NGX_HTTP_HEADERS
)

165 { 
ngx_°rög
("Ac˚±"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±
),

166 
ngx_hâp_¥o˚ss_hódî_löe
 },

168 { 
ngx_°rög
("Accept-Language"),

169 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
),

170 
ngx_hâp_¥o˚ss_hódî_löe
 },

173 #i‡(
NGX_HTTP_DAV
)

174 { 
ngx_°rög
("Dïth"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
dïth
),

175 
ngx_hâp_¥o˚ss_hódî_löe
 },

177 { 
ngx_°rög
("De°ö©i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
de°ö©i⁄
),

178 
ngx_hâp_¥o˚ss_hódî_löe
 },

180 { 
ngx_°rög
("Ovîwrôe"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ovîwrôe
),

181 
ngx_hâp_¥o˚ss_hódî_löe
 },

183 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
d©e
),

184 
ngx_hâp_¥o˚ss_hódî_löe
 },

187 { 
ngx_°rög
("Cookõ"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
cookõs
),

188 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

190 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

195 
	$ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

197 
ngx_uöt_t
 
i
;

198 
ngx_evít_t
 *
ªv
;

199 
sockaddr_ö
 *
sö
;

200 
ngx_hâp_p‹t_t
 *
p‹t
;

201 
ngx_hâp_ö_addr_t
 *
addr
;

202 
ngx_hâp_log_˘x_t
 *
˘x
;

203 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

204 #i‡(
NGX_HAVE_INET6
)

205 
sockaddr_ö6
 *
sö6
;

206 
ngx_hâp_ö6_addr_t
 *
addr6
;

209 
hc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_c⁄√˘i⁄_t
));

210 i‡(
hc
 =
NULL
) {

211 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

215 
c
->
d©a
 = 
hc
;

219 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

221 i‡(
p‹t
->
«ddrs
 > 1) {

229 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

230 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

234 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

236 #i‡(
NGX_HAVE_INET6
)

237 
AF_INET6
:

238 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

240 
addr6
 = 
p‹t
->
addrs
;

244 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

245 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

250 
hc
->
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

256 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

258 
addr
 = 
p‹t
->
addrs
;

262 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

263 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

268 
hc
->
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

275 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

277 #i‡(
NGX_HAVE_INET6
)

278 
AF_INET6
:

279 
addr6
 = 
p‹t
->
addrs
;

280 
hc
->
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

285 
addr
 = 
p‹t
->
addrs
;

286 
hc
->
addr_c⁄f
 = &
addr
[0].
c⁄f
;

292 
hc
->
c⁄f_˘x
 = hc->
addr_c⁄f
->
deÁu…_£rvî
->
˘x
;

294 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

295 i‡(
˘x
 =
NULL
) {

296 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

300 
˘x
->
c⁄√˘i⁄
 = 
c
;

301 
˘x
->
ªque°
 = 
NULL
;

302 
˘x
->
cuºít_ªque°
 = 
NULL
;

304 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

305 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

306 
c
->
log
->
d©a
 = 
˘x
;

307 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

309 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

311 
ªv
 = 
c
->
ªad
;

312 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

313 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

315 #i‡(
NGX_HTTP_SPDY
)

316 i‡(
hc
->
addr_c⁄f
->
•dy
) {

317 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_öô
;

321 #i‡(
NGX_HTTP_SSL
)

323 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

325 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

327 i‡(
sscf
->
íabÀ
 || 
hc
->
addr_c⁄f
->
s¶
) {

329 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

331 i‡(
hc
->
addr_c⁄f
->
s¶
 && 
sscf
->s¶.
˘x
 =
NULL
) {

332 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

335 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

339 
hc
->
s¶
 = 1;

341 
ªv
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake
;

346 i‡(
hc
->
addr_c⁄f
->
¥oxy_¥Ÿocﬁ
) {

347 
hc
->
¥oxy_¥Ÿocﬁ
 = 1;

348 
c
->
log
->
a˘i⁄
 = "reading PROXYÖrotocol";

351 i‡(
ªv
->
ªady
) {

354 i‡(
ngx_u£_ac˚±_muãx
) {

355 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

359 
ªv
->
	`h™dÀr
(rev);

363 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

364 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

366 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

367 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

370 
	}
}

374 
	$ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ªv
)

376 
u_ch¨
 *
p
;

377 
size_t
 
size
;

378 
ssize_t
 
n
;

379 
ngx_buf_t
 *
b
;

380 
ngx_c⁄√˘i⁄_t
 *
c
;

381 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

382 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

384 
c
 = 
ªv
->
d©a
;

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http waitÑequest handler");

388 i‡(
ªv
->
timedout
) {

389 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

390 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

394 i‡(
c
->
˛o£
) {

395 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

399 
hc
 = 
c
->
d©a
;

400 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

402 
size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

404 
b
 = 
c
->
buf„r
;

406 i‡(
b
 =
NULL
) {

407 
b
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
size
);

408 i‡(
b
 =
NULL
) {

409 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

413 
c
->
buf„r
 = 
b
;

415 } i‡(
b
->
°¨t
 =
NULL
) {

417 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

418 i‡(
b
->
°¨t
 =
NULL
) {

419 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

423 
b
->
pos
 = b->
°¨t
;

424 
b
->
œ°
 = b->
°¨t
;

425 
b
->
íd
 = b->
œ°
 + 
size
;

428 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

430 i‡(
n
 =
NGX_AGAIN
) {

432 i‡(!
ªv
->
timî_£t
) {

433 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

434 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

437 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

438 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

446 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

447 
b
->
°¨t
 = 
NULL
;

453 i‡(
n
 =
NGX_ERROR
) {

454 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

458 i‡(
n
 == 0) {

459 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

461 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

465 
b
->
œ°
 +
n
;

467 i‡(
hc
->
¥oxy_¥Ÿocﬁ
) {

468 
hc
->
¥oxy_¥Ÿocﬁ
 = 0;

470 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£
(
c
, 
b
->
pos
, b->
œ°
);

472 i‡(
p
 =
NULL
) {

473 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

477 
b
->
pos
 = 
p
;

479 i‡(
b
->
pos
 =b->
œ°
) {

480 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

481 
b
->
pos
 = b->
°¨t
;

482 
b
->
œ°
 = b->
°¨t
;

483 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

488 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

490 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

492 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

493 i‡(
c
->
d©a
 =
NULL
) {

494 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

498 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

499 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

500 
	}
}

503 
ngx_hâp_ªque°_t
 *

504 
	$ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
)

506 
ngx_poﬁ_t
 *
poﬁ
;

507 
ngx_time_t
 *
ç
;

508 
ngx_hâp_ªque°_t
 *
r
;

509 
ngx_hâp_log_˘x_t
 *
˘x
;

510 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

511 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

512 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

513 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

515 
c
->
ªque°s
++;

517 
hc
 = 
c
->
d©a
;

519 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

521 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
cscf
->
ªque°_poﬁ_size
, 
c
->
log
);

522 i‡(
poﬁ
 =
NULL
) {

523  
NULL
;

526 
r
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_hâp_ªque°_t
));

527 i‡(
r
 =
NULL
) {

528 
	`ngx_de°roy_poﬁ
(
poﬁ
);

529  
NULL
;

532 
r
->
poﬁ
 =Öool;

534 
r
->
hâp_c⁄√˘i⁄
 = 
hc
;

535 
r
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

536 
r
->
c⁄√˘i⁄
 = 
c
;

538 
r
->
maö_c⁄f
 = 
hc
->
c⁄f_˘x
->main_conf;

539 
r
->
§v_c⁄f
 = 
hc
->
c⁄f_˘x
->srv_conf;

540 
r
->
loc_c⁄f
 = 
hc
->
c⁄f_˘x
->loc_conf;

542 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

544 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

546 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

548 
r
->
hódî_ö
 = 
hc
->
nbusy
 ? hc->
busy
[0] : 
c
->
buf„r
;

550 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_out
.
hódîs
,Ñ->
poﬁ
, 20,

551 (
ngx_èbÀ_ñt_t
))

552 !
NGX_OK
)

554 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

555  
NULL
;

558 
r
->
˘x
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

559 i‡(
r
->
˘x
 =
NULL
) {

560 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

561  
NULL
;

564 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

566 
r
->
v¨übÀs
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, 
cmcf
->v¨übÀs.
√…s


567 * (
ngx_hâp_v¨übÀ_vÆue_t
));

568 i‡(
r
->
v¨übÀs
 =
NULL
) {

569 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

570  
NULL
;

573 #i‡(
NGX_HTTP_SSL
)

574 i‡(
c
->
s¶
) {

575 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

579 
r
->
maö
 =Ñ;

580 
r
->
cou¡
 = 1;

582 
ç
 = 
	`ngx_timeofday
();

583 
r
->
°¨t_£c
 = 
ç
->
£c
;

584 
r
->
°¨t_m£c
 = 
ç
->
m£c
;

586 
r
->
mëhod
 = 
NGX_HTTP_UNKNOWN
;

587 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_10
;

589 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

590 
r
->
hódîs_ö
.
kìp_Æive_n
 = -1;

591 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

592 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

594 
r
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

595 
r
->
subªque°s
 = 
NGX_HTTP_MAX_SUBREQUESTS
 + 1;

597 
r
->
hâp_°©e
 = 
NGX_HTTP_READING_REQUEST_STATE
;

599 
˘x
 = 
c
->
log
->
d©a
;

600 
˘x
->
ªque°
 = 
r
;

601 
˘x
->
cuºít_ªque°
 = 
r
;

602 
r
->
log_h™dÀr
 = 
ngx_hâp_log_îr‹_h™dÀr
;

604 #i‡(
NGX_STAT_STUB
)

605 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

606 
r
->
°©_ªadög
 = 1;

607 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªque°s
, 1);

610  
r
;

611 
	}
}

614 #i‡(
NGX_HTTP_SSL
)

617 
	$ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
)

619 
u_ch¨
 *
p
, 
buf
[
NGX_PROXY_PROTOCOL_MAX_HEADER
 + 1];

620 
size_t
 
size
;

621 
ssize_t
 
n
;

622 
ngx_îr_t
 
îr
;

623 
ngx_öt_t
 
rc
;

624 
ngx_c⁄√˘i⁄_t
 *
c
;

625 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

626 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

628 
c
 = 
ªv
->
d©a
;

629 
hc
 = 
c
->
d©a
;

631 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

634 i‡(
ªv
->
timedout
) {

635 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

636 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

640 i‡(
c
->
˛o£
) {

641 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

645 
size
 = 
hc
->
¥oxy_¥Ÿocﬁ
 ? (
buf
) : 1;

647 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, 
size
, 
MSG_PEEK
);

649 
îr
 = 
ngx_sockë_î∫o
;

651 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "hâ∞ªcv(): %d", 
n
);

653 i‡(
n
 == -1) {

654 i‡(
îr
 =
NGX_EAGAIN
) {

656 i‡(!
ªv
->
timî_£t
) {

657 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

658 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

661 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

662 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

668 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

669 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

674 i‡(
hc
->
¥oxy_¥Ÿocﬁ
) {

675 
hc
->
¥oxy_¥Ÿocﬁ
 = 0;

677 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£
(
c
, 
buf
, bu‡+ 
n
);

679 i‡(
p
 =
NULL
) {

680 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

684 
size
 = 
p
 - 
buf
;

686 i‡(
c
->
	`ªcv
(c, 
buf
, 
size
Ë!(
ssize_t
) size) {

687 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

691 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

693 i‡(
n
 =(
ssize_t
Ë
size
) {

694 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

698 
n
 = 1;

699 
buf
[0] = *
p
;

702 i‡(
n
 == 1) {

703 i‡(
buf
[0] & 0x80 || buf[0] == 0x16 ) {

704 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

705 "hâp†s¶ h™dshake: 0x%02Xd", 
buf
[0]);

707 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
,

708 
ngx_hâp_s¶_moduÀ
);

710 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(&
sscf
->
s¶
, 
c
, 
NGX_SSL_BUFFER
)

711 !
NGX_OK
)

713 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

717 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

719 i‡(
rc
 =
NGX_AGAIN
) {

721 i‡(!
ªv
->
timî_£t
) {

722 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

725 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

727 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake_h™dÀr
;

731 
	`ngx_hâp_s¶_h™dshake_h™dÀr
(
c
);

736 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "plain http");

738 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

740 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

741 
	`ngx_hâp_waô_ªque°_h™dÀr
(
ªv
);

746 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "client closed connection");

747 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

748 
	}
}

752 
	$ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

754 i‡(
c
->
s¶
->
h™dshaked
) {

764 
c
->
s¶
->
no_waô_shutdown
 = 1;

766 #i‡(
NGX_HTTP_SPDY
 \

767 && (
deföed
 
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 \

768 || 
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
))

770 
Àn
;

771 c⁄° *
d©a
;

772 c⁄° 
ngx_°r_t
 
•dy
 = 
	`ngx_°rög
(
NGX_SPDY_NPN_NEGOTIATED
);

774 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


775 
	`SSL_gë0_Æ≤_£À˘ed
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

777 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


778 i‡(
Àn
 == 0) {

779 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

784 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

787 i‡(
Àn
 =
•dy
.À¿&& 
	`ngx_°∫cmp
(
d©a
, spdy.data, spdy.len) == 0) {

788 
	`ngx_hâp_•dy_öô
(
c
->
ªad
);

794 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

796 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

797  
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

799 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

801 
	`ngx_hâp_waô_ªque°_h™dÀr
(
c
->
ªad
);

806 i‡(
c
->
ªad
->
timedout
) {

807 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

810 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

811 
	}
}

813 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


816 
	$ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
)

818 
ngx_°r_t
 
ho°
;

819 c⁄° *
£rvî«me
;

820 
ngx_c⁄√˘i⁄_t
 *
c
;

821 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

822 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

823 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

824 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

826 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
s¶_c⁄n
, 
TLSEXT_NAMETYPE_ho°_«me
);

828 i‡(
£rvî«me
 =
NULL
) {

829  
SSL_TLSEXT_ERR_NOACK
;

832 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

834 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

835 "SSL sîvîÇame: \"%s\"", 
£rvî«me
);

837 
ho°
.
Àn
 = 
	`ngx_°æí
(
£rvî«me
);

839 i‡(
ho°
.
Àn
 == 0) {

840  
SSL_TLSEXT_ERR_NOACK
;

843 
ho°
.
d©a
 = (
u_ch¨
 *Ë
£rvî«me
;

845 i‡(
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
c
->
poﬁ
, 1Ë!
NGX_OK
) {

846  
SSL_TLSEXT_ERR_NOACK
;

849 
hc
 = 
c
->
d©a
;

851 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
c
, 
hc
->
addr_c⁄f
->
vútuÆ_«mes
, &
ho°
,

852 
NULL
, &
cscf
)

853 !
NGX_OK
)

855  
SSL_TLSEXT_ERR_NOACK
;

858 
hc
->
s¶_£rvî«me
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_°r_t
));

859 i‡(
hc
->
s¶_£rvî«me
 =
NULL
) {

860  
SSL_TLSEXT_ERR_NOACK
;

863 *
hc
->
s¶_£rvî«me
 = 
ho°
;

865 
hc
->
c⁄f_˘x
 = 
cscf
->
˘x
;

867 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

869 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
c
, 
˛cf
->
îr‹_log
);

871 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

873 i‡(
sscf
->
s¶
.
˘x
) {

874 
	`SSL_£t_SSL_CTX
(
s¶_c⁄n
, 
sscf
->
s¶
.
˘x
);

881 
	`SSL_£t_vîify
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_mode
(
sscf
->
s¶
.
˘x
),

882 
	`SSL_CTX_gë_vîify_ˇŒback
(
sscf
->
s¶
.
˘x
));

884 
	`SSL_£t_vîify_dïth
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_dïth
(
sscf
->
s¶
.
˘x
));

886 #ifde‡
SSL_CTRL_CLEAR_OPTIONS


888 
	`SSL_˛ór_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_gë_›ti⁄s
(ssl_conn) &

889 ~
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

892 
	`SSL_£t_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

895  
SSL_TLSEXT_ERR_OK
;

896 
	}
}

904 
	$ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
)

906 
ssize_t
 
n
;

907 
ngx_öt_t
 
rc
, 
rv
;

908 
ngx_°r_t
 
ho°
;

909 
ngx_c⁄√˘i⁄_t
 *
c
;

910 
ngx_hâp_ªque°_t
 *
r
;

912 
c
 = 
ªv
->
d©a
;

913 
r
 = 
c
->
d©a
;

915 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

918 i‡(
ªv
->
timedout
) {

919 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

920 
c
->
timedout
 = 1;

921 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

925 
rc
 = 
NGX_AGAIN
;

929 i‡(
rc
 =
NGX_AGAIN
) {

930 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

932 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

937 
rc
 = 
	`ngx_hâp_∑r£_ªque°_löe
(
r
,Ñ->
hódî_ö
);

939 i‡(
rc
 =
NGX_OK
) {

943 
r
->
ªque°_löe
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->
ªque°_°¨t
;

944 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

945 
r
->
ªque°_Àngth
 =Ñ->
hódî_ö
->
pos
 -Ñ->
ªque°_°¨t
;

947 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

948 "hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

950 
r
->
mëhod_«me
.
Àn
 =Ñ->
mëhod_íd
 -Ñ->
ªque°_°¨t
 + 1;

951 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

953 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

954 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->hâp_¥Ÿocﬁ.
d©a
;

957 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

961 i‡(
r
->
ho°_°¨t
 &&Ñ->
ho°_íd
) {

963 
ho°
.
Àn
 = 
r
->
ho°_íd
 -Ñ->
ho°_°¨t
;

964 
ho°
.
d©a
 = 
r
->
ho°_°¨t
;

966 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

968 i‡(
rc
 =
NGX_DECLINED
) {

969 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

971 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

975 i‡(
rc
 =
NGX_ERROR
) {

976 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

980 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

984 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

987 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

989 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

990 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

991 =
NGX_ERROR
)

996 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1001 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

1002 (
ngx_èbÀ_ñt_t
))

1003 !
NGX_OK
)

1005 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1009 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1011 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_hódîs
;

1012 
	`ngx_hâp_¥o˚ss_ªque°_hódîs
(
ªv
);

1017 i‡(
rc
 !
NGX_AGAIN
) {

1021 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1022 
ngx_hâp_˛õ¡_îr‹s
[
rc
 - 
NGX_HTTP_CLIENT_ERROR
]);

1023 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1029 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1031 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 1);

1033 i‡(
rv
 =
NGX_ERROR
) {

1034 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1038 i‡(
rv
 =
NGX_DECLINED
) {

1039 
r
->
ªque°_löe
.
Àn
 =Ñ->
hódî_ö
->
íd
 -Ñ->
ªque°_°¨t
;

1040 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

1042 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1044 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_URI_TOO_LARGE
);

1049 
	}
}

1052 
ngx_öt_t


1053 
	$ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
)

1055 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1057 i‡(
r
->
¨gs_°¨t
) {

1058 
r
->
uri
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_°¨t
;

1060 
r
->
uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1063 i‡(
r
->
com∂ex_uri
 ||Ñ->
quŸed_uri
) {

1065 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
 + 1);

1066 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1067 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1068  
NGX_ERROR
;

1071 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1073 i‡(
	`ngx_hâp_∑r£_com∂ex_uri
(
r
, 
cscf
->
mîge_¶ashes
Ë!
NGX_OK
) {

1074 
r
->
uri
.
Àn
 = 0;

1076 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1078 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1079  
NGX_ERROR
;

1083 
r
->
uri
.
d©a
 =Ñ->
uri_°¨t
;

1086 
r
->
u≈¨£d_uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1087 
r
->
u≈¨£d_uri
.
d©a
 =Ñ->
uri_°¨t
;

1089 
r
->
vÆid_u≈¨£d_uri
 =Ñ->
•a˚_ö_uri
 ? 0 : 1;

1091 i‡(
r
->
uri_ext
) {

1092 i‡(
r
->
¨gs_°¨t
) {

1093 
r
->
exãn
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_ext
;

1095 
r
->
exãn
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_ext
;

1098 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1101 i‡(
r
->
¨gs_°¨t
 &&Ñ->
uri_íd
 >Ñ->args_start) {

1102 
r
->
¨gs
.
Àn
 =Ñ->
uri_íd
 -Ñ->
¨gs_°¨t
;

1103 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1106 #i‡(
NGX_WIN32
)

1108 
u_ch¨
 *
p
, *
œ°
;

1110 
p
 = 
r
->
uri
.
d©a
;

1111 
œ°
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
;

1113 
p
 < 
œ°
) {

1115 i‡(*
p
++ == ':') {

1122 i‡(
p
 < 
œ°
 && *p == '$') {

1123 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1125 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1126  
NGX_ERROR
;

1131 
p
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1;

1133 
p
 > 
r
->
uri
.
d©a
) {

1135 i‡(*
p
 == ' ') {

1136 
p
--;

1140 i‡(*
p
 == '.') {

1141 
p
--;

1148 i‡(
p
 !
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1) {

1149 
r
->
uri
.
Àn
 = 
p
 + 1 -Ñ->uri.
d©a
;

1150 
	`ngx_hâp_£t_exãn
(
r
);

1156 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1157 "hâ∞uri: \"%V\"", &
r
->
uri
);

1159 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1160 "hâ∞¨gs: \"%V\"", &
r
->
¨gs
);

1162 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1163 "hâ∞exãn: \"%V\"", &
r
->
exãn
);

1165  
NGX_OK
;

1166 
	}
}

1170 
	$ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
)

1172 
u_ch¨
 *
p
;

1173 
size_t
 
Àn
;

1174 
ssize_t
 
n
;

1175 
ngx_öt_t
 
rc
, 
rv
;

1176 
ngx_èbÀ_ñt_t
 *
h
;

1177 
ngx_c⁄√˘i⁄_t
 *
c
;

1178 
ngx_hâp_hódî_t
 *
hh
;

1179 
ngx_hâp_ªque°_t
 *
r
;

1180 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1181 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1183 
c
 = 
ªv
->
d©a
;

1184 
r
 = 
c
->
d©a
;

1186 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

1189 i‡(
ªv
->
timedout
) {

1190 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

1191 
c
->
timedout
 = 1;

1192 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

1196 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1198 
rc
 = 
NGX_AGAIN
;

1202 i‡(
rc
 =
NGX_AGAIN
) {

1204 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1206 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 0);

1208 i‡(
rv
 =
NGX_ERROR
) {

1209 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1213 i‡(
rv
 =
NGX_DECLINED
) {

1214 
p
 = 
r
->
hódî_«me_°¨t
;

1216 
r
->
lögîög_˛o£
 = 1;

1218 i‡(
p
 =
NULL
) {

1219 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1221 
	`ngx_hâp_föÆize_ªque°
(
r
,

1222 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1226 
Àn
 = 
r
->
hódî_ö
->
íd
 - 
p
;

1228 i‡(
Àn
 > 
NGX_MAX_ERROR_STR
 - 300) {

1229 
Àn
 = 
NGX_MAX_ERROR_STR
 - 300;

1230 
p
[
Àn
++] = '.';Ö[len++] = '.';Ö[len++] = '.';

1233 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1235 
Àn
, 
r
->
hódî_«me_°¨t
);

1237 
	`ngx_hâp_föÆize_ªque°
(
r
,

1238 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1243 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

1245 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

1251 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1253 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
,Ñ->
hódî_ö
,

1254 
cscf
->
undîsc‹es_ö_hódîs
);

1256 i‡(
rc
 =
NGX_OK
) {

1258 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1260 i‡(
r
->
övÆid_hódî
 && 
cscf
->
ign‹e_övÆid_hódîs
) {

1264 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1266 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1267 
r
->
hódî_«me_°¨t
);

1273 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

1274 i‡(
h
 =
NULL
) {

1275 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1279 
h
->
hash
 = 
r
->
hódî_hash
;

1281 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1282 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1283 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1285 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1286 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1287 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1289 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1290 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1291 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1295 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1296 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1299 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1302 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

1303 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1305 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1309 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1311 &
h
->
key
, &h->
vÆue
);

1316 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1320 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1323 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1325 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

1327 
rc
 = 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
);

1329 i‡(
rc
 !
NGX_OK
) {

1333 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1338 i‡(
rc
 =
NGX_AGAIN
) {

1347 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1349 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1350 
r
->
hódî_«me_°¨t
);

1351 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1354 
	}
}

1357 
ssize_t


1358 
	$ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1360 
ssize_t
 
n
;

1361 
ngx_evít_t
 *
ªv
;

1362 
ngx_c⁄√˘i⁄_t
 *
c
;

1363 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1365 
c
 = 
r
->
c⁄√˘i⁄
;

1366 
ªv
 = 
c
->
ªad
;

1368 
n
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

1370 i‡(
n
 > 0) {

1371  
n
;

1374 i‡(
ªv
->
ªady
) {

1375 
n
 = 
c
->
	`ªcv
(c, 
r
->
hódî_ö
->
œ°
,

1376 
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
);

1378 
n
 = 
NGX_AGAIN
;

1381 i‡(
n
 =
NGX_AGAIN
) {

1382 i‡(!
ªv
->
timî_£t
) {

1383 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1384 
	`ngx_add_timî
(
ªv
, 
cscf
->
˛õ¡_hódî_timeout
);

1387 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1388 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1389  
NGX_ERROR
;

1392  
NGX_AGAIN
;

1395 i‡(
n
 == 0) {

1396 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1400 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1401 
c
->
îr‹
 = 1;

1402 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1404 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1405  
NGX_ERROR
;

1408 
r
->
hódî_ö
->
œ°
 +
n
;

1410  
n
;

1411 
	}
}

1414 
ngx_öt_t


1415 
	$ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

1416 
ngx_uöt_t
 
ªque°_löe
)

1418 
u_ch¨
 *
ﬁd
, *
√w
;

1419 
ngx_buf_t
 *
b
;

1420 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

1421 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1423 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1426 i‡(
ªque°_löe
 && 
r
->
°©e
 == 0) {

1430 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
°¨t
;

1431 
r
->
hódî_ö
->
œ°
 =Ñ->hódî_ö->
°¨t
;

1433  
NGX_OK
;

1436 
ﬁd
 = 
ªque°_löe
 ? 
r
->
ªque°_°¨t
 :Ñ->
hódî_«me_°¨t
;

1438 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1440 i‡(
r
->
°©e
 != 0

1441 && (
size_t
Ë(
r
->
hódî_ö
->
pos
 - 
ﬁd
)

1442 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
)

1444  
NGX_DECLINED
;

1447 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

1449 i‡(
hc
->
n‰ì
) {

1450 
b
 = 
hc
->
‰ì
[--hc->
n‰ì
];

1452 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1454 
b
->
pos
, b->
íd
 - b->
œ°
);

1456 } i‡(
hc
->
nbusy
 < 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
) {

1458 i‡(
hc
->
busy
 =
NULL
) {

1459 
hc
->
busy
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1460 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

1461 i‡(
hc
->
busy
 =
NULL
) {

1462  
NGX_ERROR
;

1466 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1467 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

1468 i‡(
b
 =
NULL
) {

1469  
NGX_ERROR
;

1472 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1474 
b
->
pos
, b->
íd
 - b->
œ°
);

1477  
NGX_DECLINED
;

1480 
hc
->
busy
[hc->
nbusy
++] = 
b
;

1482 i‡(
r
->
°©e
 == 0) {

1489 
r
->
hódî_ö
 = 
b
;

1491  
NGX_OK
;

1494 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1495 "hâ∞œrgêhódî c›y: %d", 
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1497 
√w
 = 
b
->
°¨t
;

1499 
	`ngx_mem˝y
(
√w
, 
ﬁd
, 
r
->
hódî_ö
->
pos
 - old);

1501 
b
->
pos
 = 
√w
 + (
r
->
hódî_ö
->po†- 
ﬁd
);

1502 
b
->
œ°
 = 
√w
 + (
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1504 i‡(
ªque°_löe
) {

1505 
r
->
ªque°_°¨t
 = 
√w
;

1507 i‡(
r
->
ªque°_íd
) {

1508 
r
->
ªque°_íd
 = 
√w
 + (r->ªque°_íd - 
ﬁd
);

1511 
r
->
mëhod_íd
 = 
√w
 + (r->mëhod_íd - 
ﬁd
);

1513 
r
->
uri_°¨t
 = 
√w
 + (r->uri_°¨à- 
ﬁd
);

1514 
r
->
uri_íd
 = 
√w
 + (r->uri_íd - 
ﬁd
);

1516 i‡(
r
->
schema_°¨t
) {

1517 
r
->
schema_°¨t
 = 
√w
 + (r->schema_°¨à- 
ﬁd
);

1518 
r
->
schema_íd
 = 
√w
 + (r->schema_íd - 
ﬁd
);

1521 i‡(
r
->
ho°_°¨t
) {

1522 
r
->
ho°_°¨t
 = 
√w
 + (r->ho°_°¨à- 
ﬁd
);

1523 i‡(
r
->
ho°_íd
) {

1524 
r
->
ho°_íd
 = 
√w
 + (r->ho°_íd - 
ﬁd
);

1528 i‡(
r
->
p‹t_°¨t
) {

1529 
r
->
p‹t_°¨t
 = 
√w
 + (r->p‹t_°¨à- 
ﬁd
);

1530 
r
->
p‹t_íd
 = 
√w
 + (r->p‹t_íd - 
ﬁd
);

1533 i‡(
r
->
uri_ext
) {

1534 
r
->
uri_ext
 = 
√w
 + (r->uri_exà- 
ﬁd
);

1537 i‡(
r
->
¨gs_°¨t
) {

1538 
r
->
¨gs_°¨t
 = 
√w
 + (r->¨gs_°¨à- 
ﬁd
);

1541 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

1542 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
√w
 + (r->hâp_¥Ÿocﬁ.d©®- 
ﬁd
);

1546 
r
->
hódî_«me_°¨t
 = 
√w
;

1547 
r
->
hódî_«me_íd
 = 
√w
 + (r->hódî_«me_íd - 
ﬁd
);

1548 
r
->
hódî_°¨t
 = 
√w
 + (r->hódî_°¨à- 
ﬁd
);

1549 
r
->
hódî_íd
 = 
√w
 + (r->hódî_íd - 
ﬁd
);

1552 
r
->
hódî_ö
 = 
b
;

1554  
NGX_OK
;

1555 
	}
}

1558 
ngx_öt_t


1559 
	$ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1560 
ngx_uöt_t
 
off£t
)

1562 
ngx_èbÀ_ñt_t
 **
ph
;

1564 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1566 i‡(*
ph
 =
NULL
) {

1567 *
ph
 = 
h
;

1570  
NGX_OK
;

1571 
	}
}

1574 
ngx_öt_t


1575 
	$ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1576 
ngx_uöt_t
 
off£t
)

1578 
ngx_èbÀ_ñt_t
 **
ph
;

1580 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1582 i‡(*
ph
 =
NULL
) {

1583 *
ph
 = 
h
;

1584  
NGX_OK
;

1587 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1590 &
h
->
key
, &h->
vÆue
, &(*
ph
)->key, &(*ph)->value);

1592 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1594  
NGX_ERROR
;

1595 
	}
}

1598 
ngx_öt_t


1599 
	$ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1600 
ngx_uöt_t
 
off£t
)

1602 
ngx_öt_t
 
rc
;

1603 
ngx_°r_t
 
ho°
;

1605 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
) {

1606 
r
->
hódîs_ö
.
ho°
 = 
h
;

1609 
ho°
 = 
h
->
vÆue
;

1611 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

1613 i‡(
rc
 =
NGX_DECLINED
) {

1614 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1616 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1617  
NGX_ERROR
;

1620 i‡(
rc
 =
NGX_ERROR
) {

1621 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1622  
NGX_ERROR
;

1625 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1626  
NGX_OK
;

1629 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

1630  
NGX_ERROR
;

1633 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

1635  
NGX_OK
;

1636 
	}
}

1639 
ngx_öt_t


1640 
	$ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1641 
ngx_uöt_t
 
off£t
)

1643 i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "close", 5 - 1)) {

1644 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

1646 } i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "keep-alive", 10 - 1)) {

1647 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_KEEP_ALIVE
;

1650  
NGX_OK
;

1651 
	}
}

1654 
ngx_öt_t


1655 
	$ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1656 
ngx_uöt_t
 
off£t
)

1658 
u_ch¨
 *
u£r_agít
, *
msõ
;

1660 i‡(
r
->
hódîs_ö
.
u£r_agít
) {

1661  
NGX_OK
;

1664 
r
->
hódîs_ö
.
u£r_agít
 = 
h
;

1668 
u£r_agít
 = 
h
->
vÆue
.
d©a
;

1670 
msõ
 = 
	`ngx_°r°∫
(
u£r_agít
, "MSIE ", 5 - 1);

1672 i‡(
msõ
 && msõ + 7 < 
u£r_agít
 + 
h
->
vÆue
.
Àn
) {

1674 
r
->
hódîs_ö
.
msõ
 = 1;

1676 i‡(
msõ
[6] == '.') {

1678 
msõ
[5]) {

1681 
r
->
hódîs_ö
.
msõ6
 = 1;

1684 i‡(
	`ngx_°r°∫
(
msõ
 + 8, "SV1", 3 - 1Ë=
NULL
) {

1685 
r
->
hódîs_ö
.
msõ6
 = 1;

1693 i‡(
c
->
s¶
) {

1694 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1699 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Opera", 5 - 1)) {

1700 
r
->
hódîs_ö
.
›îa
 = 1;

1701 
r
->
hódîs_ö
.
msõ
 = 0;

1702 
r
->
hódîs_ö
.
msõ6
 = 0;

1705 i‡(!
r
->
hódîs_ö
.
msõ
 && !r->hódîs_ö.
›îa
) {

1707 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Gecko/", 6 - 1)) {

1708 
r
->
hódîs_ö
.
gecko
 = 1;

1710 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Chrome/", 7 - 1)) {

1711 
r
->
hódîs_ö
.
chrome
 = 1;

1713 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Safari/", 7 - 1)

1714 && 
	`ngx_°r°∫
(
u£r_agít
, "Mac OS X", 8 - 1))

1716 
r
->
hódîs_ö
.
ßÁri
 = 1;

1718 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Konqueror", 9 - 1)) {

1719 
r
->
hódîs_ö
.
k⁄quî‹
 = 1;

1723  
NGX_OK
;

1724 
	}
}

1727 
ngx_öt_t


1728 
	$ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1729 
ngx_uöt_t
 
off£t
)

1731 
ngx_¨øy_t
 *
hódîs
;

1732 
ngx_èbÀ_ñt_t
 **
ph
;

1734 
hódîs
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1736 i‡(
hódîs
->
ñts
 =
NULL
) {

1737 i‡(
	`ngx_¨øy_öô
(
hódîs
, 
r
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
 *))

1738 !
NGX_OK
)

1740 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1741  
NGX_ERROR
;

1745 
ph
 = 
	`ngx_¨øy_push
(
hódîs
);

1746 i‡(
ph
 =
NULL
) {

1747 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1748  
NGX_ERROR
;

1751 *
ph
 = 
h
;

1752  
NGX_OK
;

1753 
	}
}

1756 
ngx_öt_t


1757 
	$ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1759 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

1760 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

1761 =
NGX_ERROR
)

1763  
NGX_ERROR
;

1766 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
 &&Ñ->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
) {

1767 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1769 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1770  
NGX_ERROR
;

1773 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1774 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =

1775 
	`ngx_©oof
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
d©a
,

1776 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
Àn
);

1778 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

1779 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1781 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1782  
NGX_ERROR
;

1786 i‡(
r
->
mëhod
 & 
NGX_HTTP_TRACE
) {

1787 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1789 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_ALLOWED
);

1790  
NGX_ERROR
;

1793 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
) {

1794 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 == 7

1795 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1796 (
u_ch¨
 *) "chunked", 7) == 0)

1798 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
NULL
;

1799 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1800 
r
->
hódîs_ö
.
chunked
 = 1;

1802 } i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 != 8

1803 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1804 (
u_ch¨
 *) "identity", 8) != 0)

1806 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1808 &
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
);

1809 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_IMPLEMENTED
);

1810  
NGX_ERROR
;

1814 i‡(
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 =
NGX_HTTP_CONNECTION_KEEP_ALIVE
) {

1815 i‡(
r
->
hódîs_ö
.
kìp_Æive
) {

1816 
r
->
hódîs_ö
.
kìp_Æive_n
 =

1817 
	`ngx_©Ÿm
(
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
d©a
,

1818 
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
Àn
);

1822  
NGX_OK
;

1823 
	}
}

1827 
	$ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1829 
ngx_c⁄√˘i⁄_t
 *
c
;

1831 
c
 = 
r
->
c⁄√˘i⁄
;

1833 #i‡(
NGX_HTTP_SSL
)

1835 i‡(
r
->
hâp_c⁄√˘i⁄
->
s¶
) {

1836 
rc
;

1837 
X509
 *
˚π
;

1838 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

1840 i‡(
c
->
s¶
 =
NULL
) {

1841 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1843 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_TO_HTTPS
);

1847 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

1849 i‡(
sscf
->
vîify
) {

1850 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1852 i‡(
rc
 !
X509_V_OK


1853 && (
sscf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

1855 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1857 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1859 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1860 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1862 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_CERT_ERROR
);

1866 i‡(
sscf
->
vîify
 == 1) {

1867 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

1869 i‡(
˚π
 =
NULL
) {

1870 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1873 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1874 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1876 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_NO_CERT
);

1880 
	`X509_‰ì
(
˚π
);

1887 i‡(
c
->
ªad
->
timî_£t
) {

1888 
	`ngx_dñ_timî
(
c
->
ªad
);

1891 #i‡(
NGX_STAT_STUB
)

1892 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

1893 
r
->
°©_ªadög
 = 0;

1894 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, 1);

1895 
r
->
°©_wrôög
 = 1;

1898 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1899 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1900 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1902 
	`ngx_hâp_h™dÀr
(
r
);

1904 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1905 
	}
}

1908 
ngx_öt_t


1909 
	$ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Æloc
)

1911 
u_ch¨
 *
h
, 
ch
;

1912 
size_t
 
i
, 
dŸ_pos
, 
ho°_Àn
;

1915 
sw_usuÆ
 = 0,

1916 
sw_lôîÆ
,

1917 
sw_ª°


1918 } 
°©e
;

1920 
dŸ_pos
 = 
ho°
->
Àn
;

1921 
ho°_Àn
 = 
ho°
->
Àn
;

1923 
h
 = 
ho°
->
d©a
;

1925 
°©e
 = 
sw_usuÆ
;

1927 
i
 = 0; i < 
ho°
->
Àn
; i++) {

1928 
ch
 = 
h
[
i
];

1930 
ch
) {

1933 i‡(
dŸ_pos
 =
i
 - 1) {

1934  
NGX_DECLINED
;

1936 
dŸ_pos
 = 
i
;

1940 i‡(
°©e
 =
sw_usuÆ
) {

1941 
ho°_Àn
 = 
i
;

1942 
°©e
 = 
sw_ª°
;

1947 i‡(
i
 == 0) {

1948 
°©e
 = 
sw_lôîÆ
;

1953 i‡(
°©e
 =
sw_lôîÆ
) {

1954 
ho°_Àn
 = 
i
 + 1;

1955 
°©e
 = 
sw_ª°
;

1960  
NGX_DECLINED
;

1964 i‡(
	`ngx_∑th_£∑øt‹
(
ch
)) {

1965  
NGX_DECLINED
;

1968 i‡(
ch
 >= 'A' && ch <= 'Z') {

1969 
Æloc
 = 1;

1976 i‡(
dŸ_pos
 =
ho°_Àn
 - 1) {

1977 
ho°_Àn
--;

1980 i‡(
ho°_Àn
 == 0) {

1981  
NGX_DECLINED
;

1984 i‡(
Æloc
) {

1985 
ho°
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ho°_Àn
);

1986 i‡(
ho°
->
d©a
 =
NULL
) {

1987  
NGX_ERROR
;

1990 
	`ngx_°æow
(
ho°
->
d©a
, 
h
, 
ho°_Àn
);

1993 
ho°
->
Àn
 = 
ho°_Àn
;

1995  
NGX_OK
;

1996 
	}
}

1999 
ngx_öt_t


2000 
	$ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ho°
)

2002 
ngx_öt_t
 
rc
;

2003 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2004 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2005 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2007 #i‡(
NGX_SUPPRESS_WARN
)

2008 
cscf
 = 
NULL
;

2011 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2013 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2015 i‡(
hc
->
s¶_£rvî«me
) {

2016 i‡(
hc
->
s¶_£rvî«me
->
Àn
 =
ho°
->len

2017 && 
	`ngx_°∫cmp
(
hc
->
s¶_£rvî«me
->
d©a
,

2018 
ho°
->
d©a
, ho°->
Àn
) == 0)

2020 #i‡(
NGX_PCRE
)

2021 i‡(
hc
->
s¶_£rvî«me_ªgex


2022 && 
	`ngx_hâp_ªgex_exec
(
r
, 
hc
->
s¶_£rvî«me_ªgex
,

2023 
hc
->
s¶_£rvî«me
Ë!
NGX_OK
)

2025 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2026  
NGX_ERROR
;

2029  
NGX_OK
;

2035 
rc
 = 
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
->
c⁄√˘i⁄
,

2036 
hc
->
addr_c⁄f
->
vútuÆ_«mes
,

2037 
ho°
, 
r
, &
cscf
);

2039 i‡(
rc
 =
NGX_ERROR
) {

2040 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2041  
NGX_ERROR
;

2044 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2046 i‡(
hc
->
s¶_£rvî«me
) {

2047 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

2049 i‡(
rc
 =
NGX_DECLINED
) {

2050 
cscf
 = 
hc
->
addr_c⁄f
->
deÁu…_£rvî
;

2051 
rc
 = 
NGX_OK
;

2054 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
cscf
->
˘x
, 
ngx_hâp_s¶_moduÀ
);

2056 i‡(
sscf
->
vîify
) {

2057 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2060 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

2061  
NGX_ERROR
;

2067 i‡(
rc
 =
NGX_DECLINED
) {

2068  
NGX_OK
;

2071 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2072 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2074 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2076 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

2078  
NGX_OK
;

2079 
	}
}

2082 
ngx_öt_t


2083 
	$ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

2084 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

2085 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
)

2087 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2089 i‡(
vútuÆ_«mes
 =
NULL
) {

2090  
NGX_DECLINED
;

2093 
cscf
 = 
	`ngx_hash_föd_comböed
(&
vútuÆ_«mes
->
«mes
,

2094 
	`ngx_hash_key
(
ho°
->
d©a
, ho°->
Àn
),

2095 
ho°
->
d©a
, ho°->
Àn
);

2097 i‡(
cscf
) {

2098 *
cscÂ
 = 
cscf
;

2099  
NGX_OK
;

2102 #i‡(
NGX_PCRE
)

2104 i‡(
ho°
->
Àn
 && 
vútuÆ_«mes
->
ƒegex
) {

2105 
ngx_öt_t
 
n
;

2106 
ngx_uöt_t
 
i
;

2107 
ngx_hâp_£rvî_«me_t
 *
¢
;

2109 
¢
 = 
vútuÆ_«mes
->
ªgex
;

2111 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2113 i‡(
r
 =
NULL
) {

2114 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2116 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2118 
n
 = 
	`ngx_ªgex_exec
(
¢
[
i
].
ªgex
->ªgex, 
ho°
, 
NULL
, 0);

2120 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2124 i‡(
n
 >= 0) {

2125 
hc
 = 
c
->
d©a
;

2126 
hc
->
s¶_£rvî«me_ªgex
 = 
¢
[
i
].
ªgex
;

2128 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2129  
NGX_OK
;

2132 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2133 
ngx_ªgex_exec_n
 " failed: %i "

2135 
n
, 
ho°
, &
¢
[
i
].
ªgex
->
«me
);

2137  
NGX_ERROR
;

2140  
NGX_DECLINED
;

2145 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2147 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
¢
[
i
].
ªgex
, 
ho°
);

2149 i‡(
n
 =
NGX_DECLINED
) {

2153 i‡(
n
 =
NGX_OK
) {

2154 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2155  
NGX_OK
;

2158  
NGX_ERROR
;

2164  
NGX_DECLINED
;

2165 
	}
}

2169 
	$ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
)

2171 
ngx_c⁄√˘i⁄_t
 *
c
;

2172 
ngx_hâp_ªque°_t
 *
r
;

2173 
ngx_hâp_log_˘x_t
 *
˘x
;

2175 
c
 = 
ev
->
d©a
;

2176 
r
 = 
c
->
d©a
;

2178 
˘x
 = 
c
->
log
->
d©a
;

2179 
˘x
->
cuºít_ªque°
 = 
r
;

2181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2182 "hâ∞ru¿ªque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2184 i‡(
ev
->
wrôe
) {

2185 
r
->
	`wrôe_evít_h™dÀr
(r);

2188 
r
->
	`ªad_evít_h™dÀr
(r);

2191 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

2192 
	}
}

2196 
	$ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
)

2198 
ngx_hâp_ªque°_t
 *
r
;

2199 
ngx_hâp_log_˘x_t
 *
˘x
;

2200 
ngx_hâp_po°ed_ªque°_t
 *
¥
;

2204 i‡(
c
->
de°royed
) {

2208 
r
 = 
c
->
d©a
;

2209 
¥
 = 
r
->
maö
->
po°ed_ªque°s
;

2211 i‡(
¥
 =
NULL
) {

2215 
r
->
maö
->
po°ed_ªque°s
 = 
¥
->
√xt
;

2217 
r
 = 
¥
->
ªque°
;

2219 
˘x
 = 
c
->
log
->
d©a
;

2220 
˘x
->
cuºít_ªque°
 = 
r
;

2222 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2223 "hâ∞po°edÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2225 
r
->
	`wrôe_evít_h™dÀr
(r);

2227 
	}
}

2230 
ngx_öt_t


2231 
	$ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_po°ed_ªque°_t
 *
¥
)

2233 
ngx_hâp_po°ed_ªque°_t
 **
p
;

2235 i‡(
¥
 =
NULL
) {

2236 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°ed_ªque°_t
));

2237 i‡(
¥
 =
NULL
) {

2238  
NGX_ERROR
;

2242 
¥
->
ªque°
 = 
r
;

2243 
¥
->
√xt
 = 
NULL
;

2245 
p
 = &
r
->
maö
->
po°ed_ªque°s
; *p;Ö = &(*p)->
√xt
) { }

2247 *
p
 = 
¥
;

2249  
NGX_OK
;

2250 
	}
}

2254 
	$ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2256 
ngx_c⁄√˘i⁄_t
 *
c
;

2257 
ngx_hâp_ªque°_t
 *
¥
;

2258 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2260 
c
 = 
r
->
c⁄√˘i⁄
;

2262 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2264 
rc
, &
r
->
uri
, &r->
¨gs
,Ñ =
c
->
d©a
,Ñ->
maö
->
cou¡
);

2266 i‡(
rc
 =
NGX_DONE
) {

2267 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2271 i‡(
rc
 =
NGX_OK
 && 
r
->
fûãr_föÆize
) {

2272 
c
->
îr‹
 = 1;

2275 i‡(
rc
 =
NGX_DECLINED
) {

2276 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2277 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2278 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2282 i‡(
r
 !r->
maö
 &&Ñ->
po°_subªque°
) {

2283 
rc
 = 
r
->
po°_subªque°
->
	`h™dÀr
‘,Ñ->po°_subªque°->
d©a
,Ñc);

2286 i‡(
rc
 =
NGX_ERROR


2287 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


2288 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST


2289 || 
c
->
îr‹
)

2291 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2295 i‡(
r
->
maö
->
blocked
) {

2296 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2299 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2303 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE


2304 || 
rc
 =
NGX_HTTP_CREATED


2305 || 
rc
 =
NGX_HTTP_NO_CONTENT
)

2307 i‡(
rc
 =
NGX_HTTP_CLOSE
) {

2308 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2312 i‡(
r
 =r->
maö
) {

2313 i‡(
c
->
ªad
->
timî_£t
) {

2314 
	`ngx_dñ_timî
(
c
->
ªad
);

2317 i‡(
c
->
wrôe
->
timî_£t
) {

2318 
	`ngx_dñ_timî
(
c
->
wrôe
);

2322 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2323 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2325 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
‘, 
rc
));

2329 i‡(
r
 !r->
maö
) {

2331 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
) {

2333 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2334 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2340 
¥
 = 
r
->
∑ª¡
;

2342 i‡(
r
 =
c
->
d©a
) {

2344 
r
->
maö
->
cou¡
--;

2345 
r
->
maö
->
subªque°s
++;

2347 i‡(!
r
->
logged
) {

2349 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2351 i‡(
˛cf
->
log_subªque°
) {

2352 
	`ngx_hâp_log_ªque°
(
r
);

2355 
r
->
logged
 = 1;

2358 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2360 &
r
->
uri
, &r->
¨gs
);

2363 
r
->
d⁄e
 = 1;

2365 i‡(
¥
->
po°p⁄ed
 &&Ör->po°p⁄ed->
ªque°
 =
r
) {

2366 
¥
->
po°p⁄ed
 =Ör->po°p⁄ed->
√xt
;

2369 
c
->
d©a
 = 
¥
;

2373 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2375 &
r
->
uri
, &r->
¨gs
);

2377 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2379 i‡(
r
->
waôed
) {

2380 
r
->
d⁄e
 = 1;

2384 i‡(
	`ngx_hâp_po°_ªque°
(
¥
, 
NULL
Ë!
NGX_OK
) {

2385 
r
->
maö
->
cou¡
++;

2386 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2390 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2392 &
¥
->
uri
, &¥->
¨gs
);

2397 i‡(
r
->
buf„ªd
 || 
c
->buf„ªd ||Ñ->
po°p⁄ed
 ||Ñ->
blocked
) {

2399 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2400 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2406 i‡(
r
 !
c
->
d©a
) {

2407 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2409 &
r
->
uri
, &r->
¨gs
);

2413 
r
->
d⁄e
 = 1;

2414 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2416 i‡(!
r
->
po°_a˘i⁄
) {

2417 
r
->
ªque°_com∂ëe
 = 1;

2420 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2424 i‡(
c
->
ªad
->
timî_£t
) {

2425 
	`ngx_dñ_timî
(
c
->
ªad
);

2428 i‡(
c
->
wrôe
->
timî_£t
) {

2429 
c
->
wrôe
->
dñayed
 = 0;

2430 
	`ngx_dñ_timî
(
c
->
wrôe
);

2433 i‡(
c
->
ªad
->
eof
) {

2434 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2438 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2439 
	}
}

2443 
	$ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2445 
ngx_hâp_˛ónup_t
 *
˛n
;

2446 
ngx_hâp_ªque°_t
 *
mr
;

2447 
ngx_hâp_ïhemîÆ_t
 *
e
;

2449 
mr
 = 
r
->
maö
;

2451 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2452 "hâ∞ãrmö©êªque° cou¡:%d", 
mr
->
cou¡
);

2454 i‡(
rc
 > 0 && (
mr
->
hódîs_out
.
°©us
 =0 || mr->
c⁄√˘i⁄
->
£¡
 == 0)) {

2455 
mr
->
hódîs_out
.
°©us
 = 
rc
;

2458 
˛n
 = 
mr
->
˛ónup
;

2459 
mr
->
˛ónup
 = 
NULL
;

2461 
˛n
) {

2462 i‡(
˛n
->
h™dÀr
) {

2463 
˛n
->
	`h™dÀr
(˛n->
d©a
);

2466 
˛n
 = c ->
√xt
;

2469 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2471 
mr
->
cou¡
, mr->
blocked
);

2473 i‡(
mr
->
wrôe_evít_h™dÀr
) {

2475 i‡(
mr
->
blocked
) {

2479 
e
 = 
	`ngx_hâp_ïhemîÆ
(
mr
);

2480 
mr
->
po°ed_ªque°s
 = 
NULL
;

2481 
mr
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ãrmö©e_h™dÀr
;

2482 (Ë
	`ngx_hâp_po°_ªque°
(
mr
, &
e
->
ãrmöÆ_po°ed_ªque°
);

2486 
	`ngx_hâp_˛o£_ªque°
(
mr
, 
rc
);

2487 
	}
}

2491 
	$ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2493 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2494 "hâ∞ãrmö©êh™dÀ∏cou¡:%d", 
r
->
cou¡
);

2496 
r
->
cou¡
 = 1;

2498 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2499 
	}
}

2503 
	$ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2505 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2507 #i‡(
NGX_HTTP_SPDY
)

2508 i‡(
r
->
•dy_°ªam
) {

2509 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2514 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2516 i‡(
r
->
maö
->
cou¡
 != 1) {

2518 i‡(
r
->
disˇrd_body
) {

2519 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

2520 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
ªad
, 
˛cf
->
lögîög_timeout
);

2522 i‡(
r
->
lögîög_time
 == 0) {

2523 
r
->
lögîög_time
 = 
	`ngx_time
()

2524 + (
time_t
Ë(
˛cf
->
lögîög_time
 / 1000);

2528 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2532 i‡(!
ngx_ãrmö©e


2533 && !
ngx_exôög


2534 && 
r
->
kì∑live


2535 && 
˛cf
->
kì∑live_timeout
 > 0)

2537 
	`ngx_hâp_£t_kì∑live
(
r
);

2541 i‡(
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ALWAYS


2542 || (
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ON


2543 && (
r
->
lögîög_˛o£


2544 || 
r
->
hódî_ö
->
pos
 <Ñ->hódî_ö->
œ°


2545 || 
r
->
c⁄√˘i⁄
->
ªad
->
ªady
)))

2547 
	`ngx_hâp_£t_lögîög_˛o£
(
r
);

2551 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2552 
	}
}

2555 
ngx_öt_t


2556 
	$ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2558 
ngx_evít_t
 *
wev
;

2559 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2561 
r
->
hâp_°©e
 = 
NGX_HTTP_WRITING_REQUEST_STATE
;

2563 
r
->
ªad_evít_h™dÀr
 =Ñ->
disˇrd_body
 ?

2564 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
:

2565 
ngx_hâp_ã°_ªadög
;

2566 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_wrôî
;

2568 #i‡(
NGX_HTTP_SPDY
)

2569 i‡(
r
->
•dy_°ªam
) {

2570  
NGX_OK
;

2574 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

2576 i‡(
wev
->
ªady
 && wev->
dñayed
) {

2577  
NGX_OK
;

2580 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2581 i‡(!
wev
->
dñayed
) {

2582 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2585 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2586 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2587  
NGX_ERROR
;

2590  
NGX_OK
;

2591 
	}
}

2595 
	$ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
)

2597 
rc
;

2598 
ngx_evít_t
 *
wev
;

2599 
ngx_c⁄√˘i⁄_t
 *
c
;

2600 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2602 
c
 = 
r
->
c⁄√˘i⁄
;

2603 
wev
 = 
c
->
wrôe
;

2605 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2606 "hâ∞wrôî h™dÀr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2608 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_c‹e_moduÀ
);

2610 i‡(
wev
->
timedout
) {

2611 i‡(!
wev
->
dñayed
) {

2612 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

2614 
c
->
timedout
 = 1;

2616 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2620 
wev
->
timedout
 = 0;

2621 
wev
->
dñayed
 = 0;

2623 i‡(!
wev
->
ªady
) {

2624 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2626 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2627 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2635 i‡(
wev
->
dñayed
 || 
r
->
aio
) {

2636 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2639 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2640 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2646 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
NULL
);

2648 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2650 
rc
, &
r
->
uri
, &r->
¨gs
);

2652 i‡(
rc
 =
NGX_ERROR
) {

2653 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2657 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
 || (∏=r->
maö
 && 
c
->buffered)) {

2659 i‡(!
wev
->
dñayed
) {

2660 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2663 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2664 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2670 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2671 "hâ∞wrôî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2673 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2675 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2676 
	}
}

2680 
	$ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
)

2682 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2683 "hâ∞föÆizî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2685 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2686 
	}
}

2690 
	$ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2692 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2697 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)

2698 && 
r
->
c⁄√˘i⁄
->
ªad
->
a˘ive
)

2700 i‡(
	`ngx_dñ_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2701 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2704 
	}
}

2708 
	$ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2710 
n
;

2711 
buf
[1];

2712 
ngx_îr_t
 
îr
;

2713 
ngx_evít_t
 *
ªv
;

2714 
ngx_c⁄√˘i⁄_t
 *
c
;

2716 
c
 = 
r
->
c⁄√˘i⁄
;

2717 
ªv
 = 
c
->
ªad
;

2719 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "httpÅestÑeading");

2721 #i‡(
NGX_HTTP_SPDY
)

2723 i‡(
r
->
•dy_°ªam
) {

2724 i‡(
c
->
îr‹
) {

2725 
îr
 = 0;

2726 
˛o£d
;

2734 #i‡(
NGX_HAVE_KQUEUE
)

2736 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2738 i‡(!
ªv
->
≥ndög_eof
) {

2742 
ªv
->
eof
 = 1;

2743 
c
->
îr‹
 = 1;

2744 
îr
 = 
ªv
->
kq_î∫o
;

2746 
˛o£d
;

2751 #i‡(
NGX_HAVE_EPOLLRDHUP
)

2753 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
Ë&& 
ªv
->
≥ndög_eof
) {

2754 
sockÀn_t
 
Àn
;

2756 
ªv
->
eof
 = 1;

2757 
c
->
îr‹
 = 1;

2759 
îr
 = 0;

2760 
Àn
 = (
ngx_îr_t
);

2767 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

2770 
îr
 = 
ngx_sockë_î∫o
;

2773 
˛o£d
;

2778 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

2780 i‡(
n
 == 0) {

2781 
ªv
->
eof
 = 1;

2782 
c
->
îr‹
 = 1;

2783 
îr
 = 0;

2785 
˛o£d
;

2787 } i‡(
n
 == -1) {

2788 
îr
 = 
ngx_sockë_î∫o
;

2790 i‡(
îr
 !
NGX_EAGAIN
) {

2791 
ªv
->
eof
 = 1;

2792 
c
->
îr‹
 = 1;

2794 
˛o£d
;

2800 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ªv
->
a˘ive
) {

2802 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2803 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2809 
˛o£d
:

2811 i‡(
îr
) {

2812 
ªv
->
îr‹
 = 1;

2815 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

2818 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

2819 
	}
}

2823 
	$ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
)

2825 
t˝_nodñay
;

2826 
ngx_öt_t
 
i
;

2827 
ngx_buf_t
 *
b
, *
f
;

2828 
ngx_evít_t
 *
ªv
, *
wev
;

2829 
ngx_c⁄√˘i⁄_t
 *
c
;

2830 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2831 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2832 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2834 
c
 = 
r
->
c⁄√˘i⁄
;

2835 
ªv
 = 
c
->
ªad
;

2837 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2839 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "set http keepalive handler");

2841 i‡(
r
->
disˇrd_body
) {

2842 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2843 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2844 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2848 
c
->
log
->
a˘i⁄
 = "closingÑequest";

2850 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2851 
b
 = 
r
->
hódî_ö
;

2853 i‡(
b
->
pos
 < b->
œ°
) {

2857 i‡(
b
 !
c
->
buf„r
) {

2867 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2869 i‡(
hc
->
‰ì
 =
NULL
) {

2870 
hc
->
‰ì
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
,

2871 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

2873 i‡(
hc
->
‰ì
 =
NULL
) {

2874 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2879 
i
 = 0; i < 
hc
->
nbusy
 - 1; i++) {

2880 
f
 = 
hc
->
busy
[
i
];

2881 
hc
->
‰ì
[hc->
n‰ì
++] = 
f
;

2882 
f
->
pos
 = f->
°¨t
;

2883 
f
->
œ°
 = f->
°¨t
;

2886 
hc
->
busy
[0] = 
b
;

2887 
hc
->
nbusy
 = 1;

2892 
r
->
kì∑live
 = 0;

2894 
	`ngx_hâp_‰ì_ªque°
(
r
, 0);

2896 
c
->
d©a
 = 
hc
;

2898 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2899 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2903 
wev
 = 
c
->
wrôe
;

2904 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2906 i‡(
b
->
pos
 < b->
œ°
) {

2908 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "pipelinedÑequest");

2910 
c
->
log
->
a˘i⁄
 = "reading clientÖipelinedÑequestÜine";

2912 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
c
);

2913 i‡(
r
 =
NULL
) {

2914 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2918 
r
->
pùñöe
 = 1;

2920 
c
->
d©a
 = 
r
;

2922 
c
->
£¡
 = 0;

2923 
c
->
de°royed
 = 0;

2925 i‡(
ªv
->
timî_£t
) {

2926 
	`ngx_dñ_timî
(
ªv
);

2929 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

2930 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2941 
b
 = 
c
->
buf„r
;

2943 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

2950 
b
->
pos
 = 
NULL
;

2953 
b
->
pos
 = b->
°¨t
;

2954 
b
->
œ°
 = b->
°¨t
;

2957 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc free: %p %d",

2958 
hc
->
‰ì
, hc->
n‰ì
);

2960 i‡(
hc
->
‰ì
) {

2961 
i
 = 0; i < 
hc
->
n‰ì
; i++) {

2962 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
‰ì
[
i
]->
°¨t
);

2963 
hc
->
‰ì
[
i
] = 
NULL
;

2966 
hc
->
n‰ì
 = 0;

2969 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc busy: %p %d",

2970 
hc
->
busy
, hc->
nbusy
);

2972 i‡(
hc
->
busy
) {

2973 
i
 = 0; i < 
hc
->
nbusy
; i++) {

2974 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
busy
[
i
]->
°¨t
);

2975 
hc
->
busy
[
i
] = 
NULL
;

2978 
hc
->
nbusy
 = 0;

2981 #i‡(
NGX_HTTP_SSL
)

2982 i‡(
c
->
s¶
) {

2983 
	`ngx_s¶_‰ì_buf„r
(
c
);

2987 
ªv
->
h™dÀr
 = 
ngx_hâp_kì∑live_h™dÀr
;

2989 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

2990 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

2991 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2996 
c
->
log
->
a˘i⁄
 = "keepalive";

2998 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

2999 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

3000 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

3001 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3005 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

3006 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

3009 
t˝_nodñay
 = 1;

3012 i‡(
t˝_nodñay


3013 && 
˛cf
->
t˝_nodñay


3014 && 
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
)

3016 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

3018 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

3019 (c⁄° *Ë&
t˝_nodñay
, ())

3022 #i‡(
NGX_SOLARIS
)

3024 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_EINVAL
;

3027 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

3030 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

3031 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3035 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

3040 
r
->
hâp_°©e
 = 
NGX_HTTP_KEEPALIVE_STATE
;

3043 
c
->
idÀ
 = 1;

3044 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

3046 
	`ngx_add_timî
(
ªv
, 
˛cf
->
kì∑live_timeout
);

3048 i‡(
ªv
->
ªady
) {

3049 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

3051 
	}
}

3055 
	$ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

3057 
size_t
 
size
;

3058 
ssize_t
 
n
;

3059 
ngx_buf_t
 *
b
;

3060 
ngx_c⁄√˘i⁄_t
 *
c
;

3062 
c
 = 
ªv
->
d©a
;

3064 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http keepalive handler");

3066 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

3067 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3071 #i‡(
NGX_HAVE_KQUEUE
)

3073 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

3074 i‡(
ªv
->
≥ndög_eof
) {

3075 
c
->
log
->
h™dÀr
 = 
NULL
;

3076 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

3078 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3079 #i‡(
NGX_HTTP_SSL
)

3080 i‡(
c
->
s¶
) {

3081 
c
->
s¶
->
no_£nd_shutdown
 = 1;

3084 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3091 
b
 = 
c
->
buf„r
;

3092 
size
 = 
b
->
íd
 - b->
°¨t
;

3094 i‡(
b
->
pos
 =
NULL
) {

3102 
b
->
pos
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

3103 i‡(
b
->
pos
 =
NULL
) {

3104 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3108 
b
->
°¨t
 = b->
pos
;

3109 
b
->
œ°
 = b->
pos
;

3110 
b
->
íd
 = b->
pos
 + 
size
;

3118 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_ECONNRESET
;

3119 
	`ngx_£t_sockë_î∫o
(0);

3121 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

3122 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

3124 i‡(
n
 =
NGX_AGAIN
) {

3125 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3126 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3135 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

3141 
b
->
pos
 = 
NULL
;

3147 i‡(
n
 =
NGX_ERROR
) {

3148 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3152 
c
->
log
->
h™dÀr
 = 
NULL
;

3154 i‡(
n
 == 0) {

3155 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ngx_sockë_î∫o
,

3156 "˛õ¡ %V clo£d kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3157 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3161 
b
->
œ°
 +
n
;

3163 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

3164 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

3166 
c
->
idÀ
 = 0;

3167 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

3169 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

3170 i‡(
c
->
d©a
 =
NULL
) {

3171 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3175 
c
->
£¡
 = 0;

3176 
c
->
de°royed
 = 0;

3178 
	`ngx_dñ_timî
(
ªv
);

3180 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

3181 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

3182 
	}
}

3186 
	$ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
)

3188 
ngx_evít_t
 *
ªv
, *
wev
;

3189 
ngx_c⁄√˘i⁄_t
 *
c
;

3190 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3192 
c
 = 
r
->
c⁄√˘i⁄
;

3194 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3196 
ªv
 = 
c
->
ªad
;

3197 
ªv
->
h™dÀr
 = 
ngx_hâp_lögîög_˛o£_h™dÀr
;

3199 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

3200 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

3202 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3203 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3207 
wev
 = 
c
->
wrôe
;

3208 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3210 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

3211 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

3212 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3217 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

3218 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

3219 
ngx_shutdown_sockë_n
 " failed");

3220 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3224 i‡(
ªv
->
ªady
) {

3225 
	`ngx_hâp_lögîög_˛o£_h™dÀr
(
ªv
);

3227 
	}
}

3231 
	$ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ªv
)

3233 
ssize_t
 
n
;

3234 
ngx_m£c_t
 
timî
;

3235 
ngx_c⁄√˘i⁄_t
 *
c
;

3236 
ngx_hâp_ªque°_t
 *
r
;

3237 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3238 
u_ch¨
 
buf„r
[
NGX_HTTP_LINGERING_BUFFER_SIZE
];

3240 
c
 = 
ªv
->
d©a
;

3241 
r
 = 
c
->
d©a
;

3243 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3246 i‡(
ªv
->
timedout
) {

3247 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3251 
timî
 = (
ngx_m£c_t
Ë
r
->
lögîög_time
 - (ngx_m£c_tË
	`ngx_time
();

3252 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

3253 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3258 
n
 = 
c
->
	`ªcv
(c, 
buf„r
, 
NGX_HTTP_LINGERING_BUFFER_SIZE
);

3260 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "lögîögÑód: %d", 
n
);

3262 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

3263 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3267 } 
ªv
->
ªady
);

3269 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3270 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3274 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3276 
timî
 *= 1000;

3278 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

3279 
timî
 = 
˛cf
->
lögîög_timeout
;

3282 
	`ngx_add_timî
(
ªv
, 
timî
);

3283 
	}
}

3287 
	$ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
)

3289 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0, "httpÉmpty handler");

3292 
	}
}

3296 
	$ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

3298 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3302 
	}
}

3305 
ngx_öt_t


3306 
	$ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
)

3308 
ngx_buf_t
 *
b
;

3309 
ngx_chaö_t
 
out
;

3311 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3312 i‡(
b
 =
NULL
) {

3313  
NGX_ERROR
;

3316 i‡(
Êags
 & 
NGX_HTTP_LAST
) {

3318 i‡(
r
 =r->
maö
 && !r->
po°_a˘i⁄
) {

3319 
b
->
œ°_buf
 = 1;

3322 
b
->
sync
 = 1;

3323 
b
->
œ°_ö_chaö
 = 1;

3327 i‡(
Êags
 & 
NGX_HTTP_FLUSH
) {

3328 
b
->
Êush
 = 1;

3331 
out
.
buf
 = 
b
;

3332 
out
.
√xt
 = 
NULL
;

3334  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

3335 
	}
}

3338 
ngx_öt_t


3339 
	$ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

3341 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3343 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3345 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3346  
NGX_DECLINED
;

3349 i‡(
r
->
po°_a˘i⁄
 &&Ñ->
uri_ch™ges
 == 0) {

3350  
NGX_DECLINED
;

3353 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3354 "po°á˘i⁄: \"%V\"", &
˛cf
->
po°_a˘i⁄
);

3356 
r
->
maö
->
cou¡
--;

3358 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

3359 
r
->
hódî_⁄ly
 = 1;

3360 
r
->
po°_a˘i⁄
 = 1;

3362 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

3364 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
[0] == '/') {

3365 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
˛cf
->
po°_a˘i⁄
, 
NULL
);

3368 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
˛cf
->
po°_a˘i⁄
);

3371  
NGX_OK
;

3372 
	}
}

3376 
	$ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3378 
ngx_c⁄√˘i⁄_t
 *
c
;

3380 
r
 =Ñ->
maö
;

3381 
c
 = 
r
->
c⁄√˘i⁄
;

3383 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3384 "hâ∞ªque° cou¡:%d blk:%d", 
r
->
cou¡
,Ñ->
blocked
);

3386 i‡(
r
->
cou¡
 == 0) {

3387 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "httpÑequest count is zero");

3390 
r
->
cou¡
--;

3392 i‡(
r
->
cou¡
 ||Ñ->
blocked
) {

3396 #i‡(
NGX_HTTP_SPDY
)

3397 i‡(
r
->
•dy_°ªam
) {

3398 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
, 
rc
);

3403 
	`ngx_hâp_‰ì_ªque°
(
r
, 
rc
);

3404 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3405 
	}
}

3409 
	$ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3411 
ngx_log_t
 *
log
;

3412 
ngx_poﬁ_t
 *
poﬁ
;

3413 
lögî
Üinger;

3414 
ngx_hâp_˛ónup_t
 *
˛n
;

3415 
ngx_hâp_log_˘x_t
 *
˘x
;

3416 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3418 
log
 = 
r
->
c⁄√˘i⁄
->log;

3420 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http closeÑequest");

3422 i‡(
r
->
poﬁ
 =
NULL
) {

3423 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "httpÑequestálready closed");

3427 
˛n
 = 
r
->
˛ónup
;

3428 
r
->
˛ónup
 = 
NULL
;

3430 
˛n
) {

3431 i‡(
˛n
->
h™dÀr
) {

3432 
˛n
->
	`h™dÀr
(˛n->
d©a
);

3435 
˛n
 = c ->
√xt
;

3438 #i‡(
NGX_STAT_STUB
)

3440 i‡(
r
->
°©_ªadög
) {

3441 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

3444 i‡(
r
->
°©_wrôög
) {

3445 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, -1);

3450 i‡(
rc
 > 0 && (
r
->
hódîs_out
.
°©us
 =0 ||Ñ->
c⁄√˘i⁄
->
£¡
 == 0)) {

3451 
r
->
hódîs_out
.
°©us
 = 
rc
;

3454 
log
->
a˘i⁄
 = "loggingÑequest";

3456 
	`ngx_hâp_log_ªque°
(
r
);

3458 
log
->
a˘i⁄
 = "closingÑequest";

3460 i‡(
r
->
c⁄√˘i⁄
->
timedout
) {

3461 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3463 i‡(
˛cf
->
ª£t_timedout_c⁄√˘i⁄
) {

3464 
lögî
.
l_⁄off
 = 1;

3465 
lögî
.
l_lögî
 = 0;

3467 i‡(
	`£tsock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

3468 (c⁄° *Ë&
lögî
, (linger)) == -1)

3470 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_sockë_î∫o
,

3477 
˘x
 = 
log
->
d©a
;

3478 
˘x
->
ªque°
 = 
NULL
;

3480 
r
->
ªque°_löe
.
Àn
 = 0;

3482 
r
->
c⁄√˘i⁄
->
de°royed
 = 1;

3489 
poﬁ
 = 
r
->pool;

3490 
r
->
poﬁ
 = 
NULL
;

3492 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3493 
	}
}

3497 
	$ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3499 
ngx_uöt_t
 
i
, 
n
;

3500 
ngx_hâp_h™dÀr_±
 *
log_h™dÀr
;

3501 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3503 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3505 
log_h™dÀr
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
ñts
;

3506 
n
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
√…s
;

3508 
i
 = 0; i < 
n
; i++) {

3509 
log_h™dÀr
[
i
](
r
);

3511 
	}
}

3515 
	$ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

3517 
ngx_poﬁ_t
 *
poﬁ
;

3519 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3520 "˛o£ hâ∞c⁄√˘i⁄: %d", 
c
->
fd
);

3522 #i‡(
NGX_HTTP_SSL
)

3524 i‡(
c
->
s¶
) {

3525 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

3526 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_˛o£_c⁄√˘i⁄
;

3533 #i‡(
NGX_STAT_STUB
)

3534 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

3537 
c
->
de°royed
 = 1;

3539 
poﬁ
 = 
c
->pool;

3541 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3543 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3544 
	}
}

3547 
u_ch¨
 *

3548 
	$ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3550 
u_ch¨
 *
p
;

3551 
ngx_hâp_ªque°_t
 *
r
;

3552 
ngx_hâp_log_˘x_t
 *
˘x
;

3554 i‡(
log
->
a˘i⁄
) {

3555 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3556 
Àn
 -
p
 - 
buf
;

3557 
buf
 = 
p
;

3560 
˘x
 = 
log
->
d©a
;

3562 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", &
˘x
->
c⁄√˘i⁄
->
addr_ãxt
);

3563 
Àn
 -
p
 - 
buf
;

3565 
r
 = 
˘x
->
ªque°
;

3567 i‡(
r
) {

3568  
r
->
	`log_h™dÀr
‘, 
˘x
->
cuºít_ªque°
, 
p
, 
Àn
);

3571 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ", server: %V",

3572 &
˘x
->
c⁄√˘i⁄
->
li°íög
->
addr_ãxt
);

3575  
p
;

3576 
	}
}

3579 
u_ch¨
 *

3580 
	$ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,Çgx_hâp_ªque°_à*
§
,

3581 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3583 *
uri_£∑øt‹
;

3584 
u_ch¨
 *
p
;

3585 
ngx_hâp_up°ªam_t
 *
u
;

3586 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3588 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3590 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", sîvî: %V", &
cscf
->
£rvî_«me
);

3591 
Àn
 -
p
 - 
buf
;

3592 
buf
 = 
p
;

3594 i‡(
r
->
ªque°_löe
.
d©a
 =
NULL
 &&Ñ->
ªque°_°¨t
) {

3595 
p
 = 
r
->
ªque°_°¨t
;Ö <Ñ->
hódî_ö
->
œ°
;Ö++) {

3596 i‡(*
p
 =
CR
 || *∞=
LF
) {

3601 
r
->
ªque°_löe
.
Àn
 = 
p
 -Ñ->
ªque°_°¨t
;

3602 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

3605 i‡(
r
->
ªque°_löe
.
Àn
) {

3606 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeque°: \"%V\"", &
r
->
ªque°_löe
);

3607 
Àn
 -
p
 - 
buf
;

3608 
buf
 = 
p
;

3611 i‡(
r
 !
§
) {

3612 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", subªque°: \"%V\"", &
§
->
uri
);

3613 
Àn
 -
p
 - 
buf
;

3614 
buf
 = 
p
;

3617 
u
 = 
§
->
up°ªam
;

3619 i‡(
u
 && u->
≥î
.
«me
) {

3621 
uri_£∑øt‹
 = "";

3623 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

3624 i‡(
u
->
≥î
.
sockaddr
 && u->≥î.sockaddr->
ß_Ámûy
 =
AF_UNIX
) {

3625 
uri_£∑øt‹
 = ":";

3629 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", upstream: \"%V%V%s%V\"",

3630 &
u
->
schema
, u->
≥î
.
«me
,

3631 
uri_£∑øt‹
, &
u
->
uri
);

3632 
Àn
 -
p
 - 
buf
;

3633 
buf
 = 
p
;

3636 i‡(
r
->
hódîs_ö
.
ho°
) {

3637 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", host: \"%V\"",

3638 &
r
->
hódîs_ö
.
ho°
->
vÆue
);

3639 
Àn
 -
p
 - 
buf
;

3640 
buf
 = 
p
;

3643 i‡(
r
->
hódîs_ö
.
ª„ªr
) {

3644 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeferrer: \"%V\"",

3645 &
r
->
hódîs_ö
.
ª„ªr
->
vÆue
);

3646 
buf
 = 
p
;

3649  
buf
;

3650 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_request.h

8 #i‚de‡
_NGX_HTTP_REQUEST_H_INCLUDED_


9 
	#_NGX_HTTP_REQUEST_H_INCLUDED_


	)

12 
	#NGX_HTTP_MAX_URI_CHANGES
 10

	)

13 
	#NGX_HTTP_MAX_SUBREQUESTS
 200

	)

16 
	#NGX_HTTP_LC_HEADER_LEN
 32

	)

19 
	#NGX_HTTP_DISCARD_BUFFER_SIZE
 4096

	)

20 
	#NGX_HTTP_LINGERING_BUFFER_SIZE
 4096

	)

23 
	#NGX_HTTP_VERSION_9
 9

	)

24 
	#NGX_HTTP_VERSION_10
 1000

	)

25 
	#NGX_HTTP_VERSION_11
 1001

	)

27 
	#NGX_HTTP_UNKNOWN
 0x0001

	)

28 
	#NGX_HTTP_GET
 0x0002

	)

29 
	#NGX_HTTP_HEAD
 0x0004

	)

30 
	#NGX_HTTP_POST
 0x0008

	)

31 
	#NGX_HTTP_PUT
 0x0010

	)

32 
	#NGX_HTTP_DELETE
 0x0020

	)

33 
	#NGX_HTTP_MKCOL
 0x0040

	)

34 
	#NGX_HTTP_COPY
 0x0080

	)

35 
	#NGX_HTTP_MOVE
 0x0100

	)

36 
	#NGX_HTTP_OPTIONS
 0x0200

	)

37 
	#NGX_HTTP_PROPFIND
 0x0400

	)

38 
	#NGX_HTTP_PROPPATCH
 0x0800

	)

39 
	#NGX_HTTP_LOCK
 0x1000

	)

40 
	#NGX_HTTP_UNLOCK
 0x2000

	)

41 
	#NGX_HTTP_PATCH
 0x4000

	)

42 
	#NGX_HTTP_TRACE
 0x8000

	)

44 
	#NGX_HTTP_CONNECTION_CLOSE
 1

	)

45 
	#NGX_HTTP_CONNECTION_KEEP_ALIVE
 2

	)

48 
	#NGX_NONE
 1

	)

51 
	#NGX_HTTP_PARSE_HEADER_DONE
 1

	)

53 
	#NGX_HTTP_CLIENT_ERROR
 10

	)

54 
	#NGX_HTTP_PARSE_INVALID_METHOD
 10

	)

55 
	#NGX_HTTP_PARSE_INVALID_REQUEST
 11

	)

56 
	#NGX_HTTP_PARSE_INVALID_09_METHOD
 12

	)

58 
	#NGX_HTTP_PARSE_INVALID_HEADER
 13

	)

62 
	#NGX_HTTP_SUBREQUEST_IN_MEMORY
 2

	)

63 
	#NGX_HTTP_SUBREQUEST_WAITED
 4

	)

64 
	#NGX_HTTP_LOG_UNSAFE
 8

	)

67 
	#NGX_HTTP_CONTINUE
 100

	)

68 
	#NGX_HTTP_SWITCHING_PROTOCOLS
 101

	)

69 
	#NGX_HTTP_PROCESSING
 102

	)

71 
	#NGX_HTTP_OK
 200

	)

72 
	#NGX_HTTP_CREATED
 201

	)

73 
	#NGX_HTTP_ACCEPTED
 202

	)

74 
	#NGX_HTTP_NO_CONTENT
 204

	)

75 
	#NGX_HTTP_PARTIAL_CONTENT
 206

	)

77 
	#NGX_HTTP_SPECIAL_RESPONSE
 300

	)

78 
	#NGX_HTTP_MOVED_PERMANENTLY
 301

	)

79 
	#NGX_HTTP_MOVED_TEMPORARILY
 302

	)

80 
	#NGX_HTTP_SEE_OTHER
 303

	)

81 
	#NGX_HTTP_NOT_MODIFIED
 304

	)

82 
	#NGX_HTTP_TEMPORARY_REDIRECT
 307

	)

84 
	#NGX_HTTP_BAD_REQUEST
 400

	)

85 
	#NGX_HTTP_UNAUTHORIZED
 401

	)

86 
	#NGX_HTTP_FORBIDDEN
 403

	)

87 
	#NGX_HTTP_NOT_FOUND
 404

	)

88 
	#NGX_HTTP_NOT_ALLOWED
 405

	)

89 
	#NGX_HTTP_REQUEST_TIME_OUT
 408

	)

90 
	#NGX_HTTP_CONFLICT
 409

	)

91 
	#NGX_HTTP_LENGTH_REQUIRED
 411

	)

92 
	#NGX_HTTP_PRECONDITION_FAILED
 412

	)

93 
	#NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
 413

	)

94 
	#NGX_HTTP_REQUEST_URI_TOO_LARGE
 414

	)

95 
	#NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
 415

	)

96 
	#NGX_HTTP_RANGE_NOT_SATISFIABLE
 416

	)

102 
	#NGX_HTTP_CLOSE
 444

	)

104 
	#NGX_HTTP_NGINX_CODES
 494

	)

106 
	#NGX_HTTP_REQUEST_HEADER_TOO_LARGE
 494

	)

108 
	#NGX_HTTPS_CERT_ERROR
 495

	)

109 
	#NGX_HTTPS_NO_CERT
 496

	)

115 
	#NGX_HTTP_TO_HTTPS
 497

	)

125 
	#NGX_HTTP_CLIENT_CLOSED_REQUEST
 499

	)

128 
	#NGX_HTTP_INTERNAL_SERVER_ERROR
 500

	)

129 
	#NGX_HTTP_NOT_IMPLEMENTED
 501

	)

130 
	#NGX_HTTP_BAD_GATEWAY
 502

	)

131 
	#NGX_HTTP_SERVICE_UNAVAILABLE
 503

	)

132 
	#NGX_HTTP_GATEWAY_TIME_OUT
 504

	)

133 
	#NGX_HTTP_INSUFFICIENT_STORAGE
 507

	)

136 
	#NGX_HTTP_LOWLEVEL_BUFFERED
 0xf0

	)

137 
	#NGX_HTTP_WRITE_BUFFERED
 0x10

	)

138 
	#NGX_HTTP_GZIP_BUFFERED
 0x20

	)

139 
	#NGX_HTTP_SSI_BUFFERED
 0x01

	)

140 
	#NGX_HTTP_SUB_BUFFERED
 0x02

	)

141 
	#NGX_HTTP_COPY_BUFFERED
 0x04

	)

145 
	mNGX_HTTP_INITING_REQUEST_STATE
 = 0,

146 
	mNGX_HTTP_READING_REQUEST_STATE
,

147 
	mNGX_HTTP_PROCESS_REQUEST_STATE
,

149 
	mNGX_HTTP_CONNECT_UPSTREAM_STATE
,

150 
	mNGX_HTTP_WRITING_UPSTREAM_STATE
,

151 
	mNGX_HTTP_READING_UPSTREAM_STATE
,

153 
	mNGX_HTTP_WRITING_REQUEST_STATE
,

154 
	mNGX_HTTP_LINGERING_CLOSE_STATE
,

155 
	mNGX_HTTP_KEEPALIVE_STATE


156 } 
	tngx_hâp_°©e_e
;

160 
ngx_°r_t
 
	m«me
;

161 
ngx_uöt_t
 
	moff£t
;

162 
ngx_hâp_hódî_h™dÀr_±
 
	mh™dÀr
;

163 } 
	tngx_hâp_hódî_t
;

167 
ngx_°r_t
 
	m«me
;

168 
ngx_uöt_t
 
	moff£t
;

169 } 
	tngx_hâp_hódî_out_t
;

173 
ngx_li°_t
 
	mhódîs
;

175 
ngx_èbÀ_ñt_t
 *
	mho°
;

176 
ngx_èbÀ_ñt_t
 *
	mc⁄√˘i⁄
;

177 
ngx_èbÀ_ñt_t
 *
	mif_modifõd_sö˚
;

178 
ngx_èbÀ_ñt_t
 *
	mif_unmodifõd_sö˚
;

179 
ngx_èbÀ_ñt_t
 *
	mif_m©ch
;

180 
ngx_èbÀ_ñt_t
 *
	mif_n⁄e_m©ch
;

181 
ngx_èbÀ_ñt_t
 *
	mu£r_agít
;

182 
ngx_èbÀ_ñt_t
 *
	mª„ªr
;

183 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

184 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ty≥
;

186 
ngx_èbÀ_ñt_t
 *
	mønge
;

187 
ngx_èbÀ_ñt_t
 *
	mif_ønge
;

189 
ngx_èbÀ_ñt_t
 *
	må™s„r_ícodög
;

190 
ngx_èbÀ_ñt_t
 *
	mex≥˘
;

191 
ngx_èbÀ_ñt_t
 *
	mupgøde
;

193 #i‡(
NGX_HTTP_GZIP
)

194 
ngx_èbÀ_ñt_t
 *
	mac˚±_ícodög
;

195 
ngx_èbÀ_ñt_t
 *
	mvü
;

198 
ngx_èbÀ_ñt_t
 *
	mauth‹iz©i⁄
;

200 
ngx_èbÀ_ñt_t
 *
	mkìp_Æive
;

202 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

203 
ngx_¨øy_t
 
	mx_f‹w¨ded_f‹
;

206 #i‡(
NGX_HTTP_REALIP
)

207 
ngx_èbÀ_ñt_t
 *
	mx_ªÆ_ù
;

210 #i‡(
NGX_HTTP_HEADERS
)

211 
ngx_èbÀ_ñt_t
 *
	mac˚±
;

212 
ngx_èbÀ_ñt_t
 *
	mac˚±_œnguage
;

215 #i‡(
NGX_HTTP_DAV
)

216 
ngx_èbÀ_ñt_t
 *
	mdïth
;

217 
ngx_èbÀ_ñt_t
 *
	mde°ö©i⁄
;

218 
ngx_èbÀ_ñt_t
 *
	movîwrôe
;

219 
ngx_èbÀ_ñt_t
 *
	md©e
;

222 
ngx_°r_t
 
	mu£r
;

223 
ngx_°r_t
 
	m∑sswd
;

225 
ngx_¨øy_t
 
	mcookõs
;

227 
ngx_°r_t
 
	m£rvî
;

228 
off_t
 
	mc⁄ã¡_Àngth_n
;

229 
time_t
 
	mkìp_Æive_n
;

231 
	mc⁄√˘i⁄_ty≥
:2;

232 
	mchunked
:1;

233 
	mmsõ
:1;

234 
	mmsõ6
:1;

235 
	m›îa
:1;

236 
	mgecko
:1;

237 
	mchrome
:1;

238 
	mßÁri
:1;

239 
	mk⁄quî‹
:1;

240 } 
	tngx_hâp_hódîs_ö_t
;

244 
ngx_li°_t
 
	mhódîs
;

246 
ngx_uöt_t
 
	m°©us
;

247 
ngx_°r_t
 
	m°©us_löe
;

249 
ngx_èbÀ_ñt_t
 *
	m£rvî
;

250 
ngx_èbÀ_ñt_t
 *
	md©e
;

251 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

252 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ícodög
;

253 
ngx_èbÀ_ñt_t
 *
	mloˇti⁄
;

254 
ngx_èbÀ_ñt_t
 *
	mª‰esh
;

255 
ngx_èbÀ_ñt_t
 *
	mœ°_modifõd
;

256 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

257 
ngx_èbÀ_ñt_t
 *
	mac˚±_ønges
;

258 
ngx_èbÀ_ñt_t
 *
	mwww_authítiˇã
;

259 
ngx_èbÀ_ñt_t
 *
	mexpúes
;

260 
ngx_èbÀ_ñt_t
 *
	mëag
;

262 
ngx_°r_t
 *
	movîride_ch¨£t
;

264 
size_t
 
	mc⁄ã¡_ty≥_Àn
;

265 
ngx_°r_t
 
	mc⁄ã¡_ty≥
;

266 
ngx_°r_t
 
	mch¨£t
;

267 
u_ch¨
 *
	mc⁄ã¡_ty≥_lowˇ£
;

268 
ngx_uöt_t
 
	mc⁄ã¡_ty≥_hash
;

270 
ngx_¨øy_t
 
	mˇche_c⁄åﬁ
;

272 
off_t
 
	mc⁄ã¡_Àngth_n
;

273 
time_t
 
	md©e_time
;

274 
time_t
 
	mœ°_modifõd_time
;

275 } 
	tngx_hâp_hódîs_out_t
;

278 (*
	tngx_hâp_˛õ¡_body_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

281 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

282 
ngx_chaö_t
 *
bufs
;

283 
ngx_buf_t
 *
buf
;

284 
off_t
 
ª°
;

285 
ngx_chaö_t
 *
‰ì
;

286 
ngx_chaö_t
 *
busy
;

287 
ngx_hâp_chunked_t
 *
chunked
;

288 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
;

289 } 
	tngx_hâp_ªque°_body_t
;

292 
ngx_hâp_addr_c⁄f_s
 
	tngx_hâp_addr_c⁄f_t
;

295 
ngx_hâp_addr_c⁄f_t
 *
addr_c⁄f
;

296 
ngx_hâp_c⁄f_˘x_t
 *
c⁄f_˘x
;

298 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

299 
ngx_°r_t
 *
s¶_£rvî«me
;

300 #i‡(
NGX_PCRE
)

301 
ngx_hâp_ªgex_t
 *
s¶_£rvî«me_ªgex
;

305 
ngx_buf_t
 **
busy
;

306 
ngx_öt_t
 
nbusy
;

308 
ngx_buf_t
 **
‰ì
;

309 
ngx_öt_t
 
n‰ì
;

311 #i‡(
NGX_HTTP_SSL
)

312 
s¶
:1;

314 
¥oxy_¥Ÿocﬁ
:1;

315 } 
	tngx_hâp_c⁄√˘i⁄_t
;

318 (*
	tngx_hâp_˛ónup_±
)(*
	td©a
);

320 
ngx_hâp_˛ónup_s
 
	tngx_hâp_˛ónup_t
;

322 
	sngx_hâp_˛ónup_s
 {

323 
ngx_hâp_˛ónup_±
 
h™dÀr
;

324 *
d©a
;

325 
ngx_hâp_˛ónup_t
 *
√xt
;

329 
	$ngx_öt_t
 (*
	tngx_hâp_po°_subªque°_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

330 *
	td©a
, 
	tngx_öt_t
 
	trc
);

333 
ngx_hâp_po°_subªque°_±
 
h™dÀr
;

334 *
d©a
;

335 } 
	tngx_hâp_po°_subªque°_t
;

338 
ngx_hâp_po°p⁄ed_ªque°_s
 
	tngx_hâp_po°p⁄ed_ªque°_t
;

340 
	sngx_hâp_po°p⁄ed_ªque°_s
 {

341 
ngx_hâp_ªque°_t
 *
ªque°
;

342 
ngx_chaö_t
 *
out
;

343 
ngx_hâp_po°p⁄ed_ªque°_t
 *
√xt
;

347 
ngx_hâp_po°ed_ªque°_s
 
	tngx_hâp_po°ed_ªque°_t
;

349 
	sngx_hâp_po°ed_ªque°_s
 {

350 
ngx_hâp_ªque°_t
 *
ªque°
;

351 
ngx_hâp_po°ed_ªque°_t
 *
√xt
;

355 
	$ngx_öt_t
 (*
	tngx_hâp_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

356 (*
	tngx_hâp_evít_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

359 
	sngx_hâp_ªque°_s
 {

360 
uöt32_t
 
sig«tuª
;

362 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

364 **
˘x
;

365 **
maö_c⁄f
;

366 **
§v_c⁄f
;

367 **
loc_c⁄f
;

369 
ngx_hâp_evít_h™dÀr_±
 
ªad_evít_h™dÀr
;

370 
ngx_hâp_evít_h™dÀr_±
 
wrôe_evít_h™dÀr
;

372 #i‡(
NGX_HTTP_CACHE
)

373 
ngx_hâp_ˇche_t
 *
ˇche
;

376 
ngx_hâp_up°ªam_t
 *
up°ªam
;

377 
ngx_¨øy_t
 *
up°ªam_°©es
;

380 
ngx_poﬁ_t
 *
poﬁ
;

381 
ngx_buf_t
 *
hódî_ö
;

383 
ngx_hâp_hódîs_ö_t
 
hódîs_ö
;

384 
ngx_hâp_hódîs_out_t
 
hódîs_out
;

386 
ngx_hâp_ªque°_body_t
 *
ªque°_body
;

388 
time_t
 
lögîög_time
;

389 
time_t
 
°¨t_£c
;

390 
ngx_m£c_t
 
°¨t_m£c
;

392 
ngx_uöt_t
 
mëhod
;

393 
ngx_uöt_t
 
hâp_vîsi⁄
;

395 
ngx_°r_t
 
ªque°_löe
;

396 
ngx_°r_t
 
uri
;

397 
ngx_°r_t
 
¨gs
;

398 
ngx_°r_t
 
exãn
;

399 
ngx_°r_t
 
u≈¨£d_uri
;

401 
ngx_°r_t
 
mëhod_«me
;

402 
ngx_°r_t
 
hâp_¥Ÿocﬁ
;

404 
ngx_chaö_t
 *
out
;

405 
ngx_hâp_ªque°_t
 *
maö
;

406 
ngx_hâp_ªque°_t
 *
∑ª¡
;

407 
ngx_hâp_po°p⁄ed_ªque°_t
 *
po°p⁄ed
;

408 
ngx_hâp_po°_subªque°_t
 *
po°_subªque°
;

409 
ngx_hâp_po°ed_ªque°_t
 *
po°ed_ªque°s
;

411 
ngx_öt_t
 
pha£_h™dÀr
;

412 
ngx_hâp_h™dÀr_±
 
c⁄ã¡_h™dÀr
;

413 
ngx_uöt_t
 
ac˚ss_code
;

415 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨übÀs
;

417 #i‡(
NGX_PCRE
)

418 
ngx_uöt_t
 
nˇ±uªs
;

419 *
ˇ±uªs
;

420 
u_ch¨
 *
ˇ±uªs_d©a
;

423 
size_t
 
limô_øã
;

424 
size_t
 
limô_øã_a·î
;

427 
size_t
 
hódî_size
;

429 
off_t
 
ªque°_Àngth
;

431 
ngx_uöt_t
 
îr_°©us
;

433 
ngx_hâp_c⁄√˘i⁄_t
 *
hâp_c⁄√˘i⁄
;

434 #i‡(
NGX_HTTP_SPDY
)

435 
ngx_hâp_•dy_°ªam_t
 *
•dy_°ªam
;

438 
ngx_hâp_log_h™dÀr_±
 
log_h™dÀr
;

440 
ngx_hâp_˛ónup_t
 *
˛ónup
;

442 
subªque°s
:8;

443 
cou¡
:8;

444 
blocked
:8;

446 
aio
:1;

448 
hâp_°©e
:4;

451 
com∂ex_uri
:1;

454 
quŸed_uri
:1;

457 
∂us_ö_uri
:1;

460 
•a˚_ö_uri
:1;

462 
övÆid_hódî
:1;

464 
add_uri_to_Æüs
:1;

465 
vÆid_loˇti⁄
:1;

466 
vÆid_u≈¨£d_uri
:1;

467 
uri_ch™ged
:1;

468 
uri_ch™ges
:4;

470 
ªque°_body_ö_sögÀ_buf
:1;

471 
ªque°_body_ö_fûe_⁄ly
:1;

472 
ªque°_body_ö_≥rsi°ít_fûe
:1;

473 
ªque°_body_ö_˛ón_fûe
:1;

474 
ªque°_body_fûe_group_ac˚ss
:1;

475 
ªque°_body_fûe_log_Àvñ
:3;

477 
subªque°_ö_mem‹y
:1;

478 
waôed
:1;

480 #i‡(
NGX_HTTP_CACHE
)

481 
ˇched
:1;

484 #i‡(
NGX_HTTP_GZIP
)

485 
gzù_ã°ed
:1;

486 
gzù_ok
:1;

487 
gzù_v¨y
:1;

490 
¥oxy
:1;

491 
by∑ss_ˇche
:1;

492 
no_ˇche
:1;

499 
limô_c⁄n_£t
:1;

500 
limô_ªq_£t
:1;

503 
ˇchóbÀ
:1;

506 
pùñöe
:1;

507 
chunked
:1;

508 
hódî_⁄ly
:1;

509 
kì∑live
:1;

510 
lögîög_˛o£
:1;

511 
disˇrd_body
:1;

512 
öã∫Æ
:1;

513 
îr‹_∑ge
:1;

514 
ign‹e_c⁄ã¡_ícodög
:1;

515 
fûãr_föÆize
:1;

516 
po°_a˘i⁄
:1;

517 
ªque°_com∂ëe
:1;

518 
ªque°_ouçut
:1;

519 
hódî_£¡
:1;

520 
ex≥˘_ã°ed
:1;

521 
roŸ_ã°ed
:1;

522 
d⁄e
:1;

523 
logged
:1;

525 
buf„ªd
:4;

527 
maö_fûãr_√ed_ö_mem‹y
:1;

528 
fûãr_√ed_ö_mem‹y
:1;

529 
fûãr_√ed_ãmp‹¨y
:1;

530 
Ælow_ønges
:1;

531 
sögÀ_ønge
:1;

533 #i‡(
NGX_STAT_STUB
)

534 
°©_ªadög
:1;

535 
°©_wrôög
:1;

540 
ngx_uöt_t
 
°©e
;

542 
ngx_uöt_t
 
hódî_hash
;

543 
ngx_uöt_t
 
lowˇ£_ödex
;

544 
u_ch¨
 
lowˇ£_hódî
[
NGX_HTTP_LC_HEADER_LEN
];

546 
u_ch¨
 *
hódî_«me_°¨t
;

547 
u_ch¨
 *
hódî_«me_íd
;

548 
u_ch¨
 *
hódî_°¨t
;

549 
u_ch¨
 *
hódî_íd
;

556 
u_ch¨
 *
uri_°¨t
;

557 
u_ch¨
 *
uri_íd
;

558 
u_ch¨
 *
uri_ext
;

559 
u_ch¨
 *
¨gs_°¨t
;

560 
u_ch¨
 *
ªque°_°¨t
;

561 
u_ch¨
 *
ªque°_íd
;

562 
u_ch¨
 *
mëhod_íd
;

563 
u_ch¨
 *
schema_°¨t
;

564 
u_ch¨
 *
schema_íd
;

565 
u_ch¨
 *
ho°_°¨t
;

566 
u_ch¨
 *
ho°_íd
;

567 
u_ch¨
 *
p‹t_°¨t
;

568 
u_ch¨
 *
p‹t_íd
;

570 
hâp_mö‹
:16;

571 
hâp_maj‹
:16;

576 
ngx_hâp_po°ed_ªque°_t
 
ãrmöÆ_po°ed_ªque°
;

577 #i‡(
NGX_HAVE_AIO_SENDFILE
)

578 
u_ch¨
 
aio_¥ñﬂd
;

580 } 
	tngx_hâp_ïhemîÆ_t
;

583 
ngx_hâp_hódî_t
 
ngx_hâp_hódîs_ö
[];

584 
ngx_hâp_hódî_out_t
 
ngx_hâp_hódîs_out
[];

587 
	#ngx_hâp_£t_c⁄√˘i⁄_log
(
c
, 
l
) \

589 
c
->
log
->
fûe
 = 
l
->file; \

590 
c
->
log
->
√xt
 = 
l
->next; \

591 i‡(!(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) { \

592 
c
->
log
->
log_Àvñ
 = 
l
->log_level; \

593 
	}

	)
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_request_body.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

16 
ngx_öt_t
 
ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_buf_t
 *
b
);

19 
ngx_öt_t
 
ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
);

21 
ngx_öt_t
 
ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_chaö_t
 *
ö
);

23 
ngx_öt_t
 
ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_chaö_t
 *
ö
);

25 
ngx_öt_t
 
ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_chaö_t
 *
ö
);

27 
ngx_öt_t
 
ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_chaö_t
 *
ö
);

31 
ngx_öt_t


32 
	$ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

35 
size_t
 
¥îód
;

36 
ssize_t
 
size
;

37 
ngx_öt_t
 
rc
;

38 
ngx_buf_t
 *
b
;

39 
ngx_chaö_t
 
out
, *
˛
;

40 
ngx_hâp_ªque°_body_t
 *
rb
;

41 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

43 
r
->
maö
->
cou¡
++;

45 #i‡(
NGX_HTTP_SPDY
)

46 i‡(
r
->
•dy_°ªam
 &&Ñ =r->
maö
) {

47 
rc
 = 
	`ngx_hâp_•dy_ªad_ªque°_body
(
r
, 
po°_h™dÀr
);

48 
d⁄e
;

52 i‡(
r
 !r->
maö
 ||Ñ->
ªque°_body
 ||Ñ->
disˇrd_body
) {

53 
	`po°_h™dÀr
(
r
);

54  
NGX_OK
;

57 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

58 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

59 
d⁄e
;

62 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

63 i‡(
rb
 =
NULL
) {

64 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

65 
d⁄e
;

78 
rb
->
ª°
 = -1;

79 
rb
->
po°_h™dÀr
 =Öost_handler;

81 
r
->
ªque°_body
 = 
rb
;

83 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0 && !r->hódîs_ö.
chunked
) {

84 
	`po°_h™dÀr
(
r
);

85  
NGX_OK
;

88 
¥îód
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

90 i‡(
¥îód
) {

94 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

95 "hâ∞˛õ¡Ñeque° bodyÖªªad %uz", 
¥îód
);

97 
out
.
buf
 = 
r
->
hódî_ö
;

98 
out
.
√xt
 = 
NULL
;

100 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

102 i‡(
rc
 !
NGX_OK
) {

103 
d⁄e
;

106 
r
->
ªque°_Àngth
 +
¥îód
 - (r->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
);

108 i‡(!
r
->
hódîs_ö
.
chunked


109 && 
rb
->
ª°
 > 0

110 && 
rb
->
ª°
 <(
off_t
Ë(
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
))

114 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

115 i‡(
b
 =
NULL
) {

116 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 
d⁄e
;

120 
b
->
ãmp‹¨y
 = 1;

121 
b
->
°¨t
 = 
r
->
hódî_ö
->
pos
;

122 
b
->
pos
 = 
r
->
hódî_ö
->pos;

123 
b
->
œ°
 = 
r
->
hódî_ö
->last;

124 
b
->
íd
 = 
r
->
hódî_ö
->end;

126 
rb
->
buf
 = 
b
;

128 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

129 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

131 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

132 
d⁄e
;

138 i‡(
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
Ë!
NGX_OK
) {

139 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

140 
d⁄e
;

144 i‡(
rb
->
ª°
 == 0) {

147 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
) {

148 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

149 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 
d⁄e
;

153 i‡(
rb
->
ãmp_fûe
->
fûe
.
off£t
 != 0) {

155 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

156 i‡(
˛
 =
NULL
) {

157 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

158 
d⁄e
;

161 
b
 = 
˛
->
buf
;

163 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

165 
b
->
ö_fûe
 = 1;

166 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

167 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

169 
rb
->
bufs
 = 
˛
;

172 
rb
->
bufs
 = 
NULL
;

176 
	`po°_h™dÀr
(
r
);

178  
NGX_OK
;

181 i‡(
rb
->
ª°
 < 0) {

182 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

184 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

185 
d⁄e
;

188 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

190 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

191 
size
 += size >> 2;

195 i‡(!
r
->
hódîs_ö
.
chunked
 && 
rb
->
ª°
 < 
size
) {

196 
size
 = (
ssize_t
Ë
rb
->
ª°
;

198 i‡(
r
->
ªque°_body_ö_sögÀ_buf
) {

199 
size
 +
¥îód
;

203 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

206 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

207 i‡(
rb
->
buf
 =
NULL
) {

208 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

209 
d⁄e
;

212 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

213 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

215 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

217 
d⁄e
:

219 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

220 
r
->
maö
->
cou¡
--;

223  
rc
;

224 
	}
}

228 
	$ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

230 
ngx_öt_t
 
rc
;

232 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

233 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

234 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

238 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

240 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

241 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

243 
	}
}

246 
ngx_öt_t


247 
	$ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

249 
off_t
 
ª°
;

250 
size_t
 
size
;

251 
ssize_t
 
n
;

252 
ngx_öt_t
 
rc
;

253 
ngx_buf_t
 *
b
;

254 
ngx_chaö_t
 *
˛
, 
out
;

255 
ngx_c⁄√˘i⁄_t
 *
c
;

256 
ngx_hâp_ªque°_body_t
 *
rb
;

257 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

259 
c
 = 
r
->
c⁄√˘i⁄
;

260 
rb
 = 
r
->
ªque°_body
;

262 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

267 i‡(
rb
->
buf
->
œ°
 =rb->buf->
íd
) {

271 
out
.
buf
 = 
rb
->buf;

272 
out
.
√xt
 = 
NULL
;

274 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

276 i‡(
rc
 !
NGX_OK
) {

277  
rc
;

282 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

283  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

288 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
);

290 i‡(
rc
 !
NGX_OK
) {

291  
rc
;

294 i‡(
rb
->
busy
 !
NULL
) {

295  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

298 
rb
->
buf
->
pos
 =Ñb->buf->
°¨t
;

299 
rb
->
buf
->
œ°
 =Ñb->buf->
°¨t
;

302 
size
 = 
rb
->
buf
->
íd
 -Ñb->buf->
œ°
;

303 
ª°
 = 
rb
->ª° - (rb->
buf
->
œ°
 -Ñb->buf->
pos
);

305 i‡((
off_t
Ë
size
 > 
ª°
) {

306 
size
 = (
size_t
Ë
ª°
;

309 
n
 = 
c
->
	`ªcv
(c, 
rb
->
buf
->
œ°
, 
size
);

311 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

312 "hâ∞˛õ¡Ñeque° bodyÑecv %z", 
n
);

314 i‡(
n
 =
NGX_AGAIN
) {

318 i‡(
n
 == 0) {

319 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

323 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

324 
c
->
îr‹
 = 1;

325  
NGX_HTTP_BAD_REQUEST
;

328 
rb
->
buf
->
œ°
 +
n
;

329 
r
->
ªque°_Àngth
 +
n
;

331 i‡(
n
 =
ª°
) {

334 
out
.
buf
 = 
rb
->buf;

335 
out
.
√xt
 = 
NULL
;

337 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

339 i‡(
rc
 !
NGX_OK
) {

340  
rc
;

344 i‡(
rb
->
ª°
 == 0) {

348 i‡(
rb
->
buf
->
œ°
 <Ñb->buf->
íd
) {

353 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

354 "hâ∞˛õ¡Ñeque° bodyÑe° %O", 
rb
->
ª°
);

356 i‡(
rb
->
ª°
 == 0) {

360 i‡(!
c
->
ªad
->
ªady
) {

361 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

362 
	`ngx_add_timî
(
c
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

364 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

365  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

368  
NGX_AGAIN
;

372 i‡(
c
->
ªad
->
timî_£t
) {

373 
	`ngx_dñ_timî
(
c
->
ªad
);

376 i‡(
rb
->
ãmp_fûe
 || 
r
->
ªque°_body_ö_fûe_⁄ly
) {

380 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

381  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

384 i‡(
rb
->
ãmp_fûe
->
fûe
.
off£t
 != 0) {

386 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

387 i‡(
˛
 =
NULL
) {

388  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

391 
b
 = 
˛
->
buf
;

393 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

395 
b
->
ö_fûe
 = 1;

396 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

397 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

399 
rb
->
bufs
 = 
˛
;

402 
rb
->
bufs
 = 
NULL
;

406 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

408 
rb
->
	`po°_h™dÀr
(
r
);

410  
NGX_OK
;

411 
	}
}

414 
ngx_öt_t


415 
	$ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

417 
ssize_t
 
n
;

418 
ngx_chaö_t
 *
˛
;

419 
ngx_ãmp_fûe_t
 *
tf
;

420 
ngx_hâp_ªque°_body_t
 *
rb
;

421 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

423 
rb
 = 
r
->
ªque°_body
;

425 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

426 "hâ∞wrôê˛õ¡Ñeque° body, buf†%p", 
rb
->
bufs
);

428 i‡(
rb
->
ãmp_fûe
 =
NULL
) {

429 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

430 i‡(
tf
 =
NULL
) {

431  
NGX_ERROR
;

434 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

436 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

437 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

438 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

439 
tf
->
poﬁ
 = 
r
->pool;

440 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

441 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

442 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

443 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

445 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

446 
tf
->
ac˚ss
 = 0660;

449 
rb
->
ãmp_fûe
 = 
tf
;

451 i‡(
rb
->
bufs
 =
NULL
) {

454 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

455 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

456 !
NGX_OK
)

458  
NGX_ERROR
;

461  
NGX_OK
;

465 i‡(
rb
->
bufs
 =
NULL
) {

466  
NGX_OK
;

469 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
rb
->
ãmp_fûe
,Ñb->
bufs
);

473 i‡(
n
 =
NGX_ERROR
) {

474  
NGX_ERROR
;

477 
rb
->
ãmp_fûe
->
off£t
 +
n
;

481 
˛
 = 
rb
->
bufs
; cl; c»˛->
√xt
) {

482 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

485 
rb
->
bufs
 = 
NULL
;

487  
NGX_OK
;

488 
	}
}

491 
ngx_öt_t


492 
	$ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

494 
ssize_t
 
size
;

495 
ngx_öt_t
 
rc
;

496 
ngx_evít_t
 *
ªv
;

498 #i‡(
NGX_HTTP_SPDY
)

499 i‡(
r
->
•dy_°ªam
 &&Ñ =r->
maö
) {

500 
r
->
•dy_°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_DISCARD
;

501  
NGX_OK
;

505 i‡(
r
 !r->
maö
 ||Ñ->
disˇrd_body
 ||Ñ->
ªque°_body
) {

506  
NGX_OK
;

509 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

510  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

513 
ªv
 = 
r
->
c⁄√˘i⁄
->
ªad
;

515 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "http set discard body");

517 i‡(
ªv
->
timî_£t
) {

518 
	`ngx_dñ_timî
(
ªv
);

521 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 <0 && !r->hódîs_ö.
chunked
) {

522  
NGX_OK
;

525 
size
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

527 i‡(
size
 || 
r
->
hódîs_ö
.
chunked
) {

528 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
,Ñ->
hódî_ö
);

530 i‡(
rc
 !
NGX_OK
) {

531  
rc
;

534 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

535  
NGX_OK
;

539 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

541 i‡(
rc
 =
NGX_OK
) {

542 
r
->
lögîög_˛o£
 = 0;

543  
NGX_OK
;

546 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

547  
rc
;

552 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

554 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

555  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

558 
r
->
cou¡
++;

559 
r
->
disˇrd_body
 = 1;

561  
NGX_OK
;

562 
	}
}

566 
	$ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

568 
ngx_öt_t
 
rc
;

569 
ngx_m£c_t
 
timî
;

570 
ngx_evít_t
 *
ªv
;

571 
ngx_c⁄√˘i⁄_t
 *
c
;

572 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

574 
c
 = 
r
->
c⁄√˘i⁄
;

575 
ªv
 = 
c
->
ªad
;

577 i‡(
ªv
->
timedout
) {

578 
c
->
timedout
 = 1;

579 
c
->
îr‹
 = 1;

580 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

584 i‡(
r
->
lögîög_time
) {

585 
timî
 = (
ngx_m£c_t
Ë
r
->
lögîög_time
 - (ngx_m£c_tË
	`ngx_time
();

587 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

588 
r
->
disˇrd_body
 = 0;

589 
r
->
lögîög_˛o£
 = 0;

590 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

595 
timî
 = 0;

598 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

600 i‡(
rc
 =
NGX_OK
) {

601 
r
->
disˇrd_body
 = 0;

602 
r
->
lögîög_˛o£
 = 0;

603 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

607 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

608 
c
->
îr‹
 = 1;

609 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

615 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

616 
c
->
îr‹
 = 1;

617 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

621 i‡(
timî
) {

623 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

625 
timî
 *= 1000;

627 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

628 
timî
 = 
˛cf
->
lögîög_timeout
;

631 
	`ngx_add_timî
(
ªv
, 
timî
);

633 
	}
}

636 
ngx_öt_t


637 
	$ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

639 
size_t
 
size
;

640 
ssize_t
 
n
;

641 
ngx_öt_t
 
rc
;

642 
ngx_buf_t
 
b
;

643 
u_ch¨
 
buf„r
[
NGX_HTTP_DISCARD_BUFFER_SIZE
];

645 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

648 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

650 
b
.
ãmp‹¨y
 = 1;

653 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

654 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

655  
NGX_OK
;

658 i‡(!
r
->
c⁄√˘i⁄
->
ªad
->
ªady
) {

659  
NGX_AGAIN
;

662 
size
 = (
size_t
Ë
	`ngx_mö
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
,

663 
NGX_HTTP_DISCARD_BUFFER_SIZE
);

665 
n
 = 
r
->
c⁄√˘i⁄
->
	`ªcv
‘->c⁄√˘i⁄, 
buf„r
, 
size
);

667 i‡(
n
 =
NGX_ERROR
) {

668 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

669  
NGX_OK
;

672 i‡(
n
 =
NGX_AGAIN
) {

673  
NGX_AGAIN
;

676 i‡(
n
 == 0) {

677  
NGX_OK
;

680 
b
.
pos
 = 
buf„r
;

681 
b
.
œ°
 = 
buf„r
 + 
n
;

683 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
, &
b
);

685 i‡(
rc
 !
NGX_OK
) {

686  
rc
;

689 
	}
}

692 
ngx_öt_t


693 
	$ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

695 
size_t
 
size
;

696 
ngx_öt_t
 
rc
;

697 
ngx_hâp_ªque°_body_t
 *
rb
;

699 i‡(
r
->
hódîs_ö
.
chunked
) {

701 
rb
 = 
r
->
ªque°_body
;

703 i‡(
rb
 =
NULL
) {

705 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

706 i‡(
rb
 =
NULL
) {

707  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

710 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

711 i‡(
rb
->
chunked
 =
NULL
) {

712  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

715 
r
->
ªque°_body
 = 
rb
;

720 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
b
, 
rb
->
chunked
);

722 i‡(
rc
 =
NGX_OK
) {

726 
size
 = 
b
->
œ°
 - b->
pos
;

728 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

729 
b
->
pos
 +(
size_t
Ë
rb
->
chunked
->
size
;

730 
rb
->
chunked
->
size
 = 0;

733 
rb
->
chunked
->
size
 -= size;

734 
b
->
pos
 = b->
œ°
;

740 i‡(
rc
 =
NGX_DONE
) {

744 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

748 i‡(
rc
 =
NGX_AGAIN
) {

752 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
chunked
->
Àngth
;

758 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

761  
NGX_HTTP_BAD_REQUEST
;

765 
size
 = 
b
->
œ°
 - b->
pos
;

767 i‡((
off_t
Ë
size
 > 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) {

768 
b
->
pos
 +(
size_t
Ë
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

769 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

772 
b
->
pos
 = b->
œ°
;

773 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
size
;

777  
NGX_OK
;

778 
	}
}

781 
ngx_öt_t


782 
	$ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
)

784 
ngx_öt_t
 
n
;

785 
ngx_°r_t
 *
ex≥˘
;

787 i‡(
r
->
ex≥˘_ã°ed


788 || 
r
->
hódîs_ö
.
ex≥˘
 =
NULL


789 || 
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
)

791  
NGX_OK
;

794 
r
->
ex≥˘_ã°ed
 = 1;

796 
ex≥˘
 = &
r
->
hódîs_ö
.ex≥˘->
vÆue
;

798 i‡(
ex≥˘
->
Àn
 != ("100-continue") - 1

799 || 
	`ngx_°∫ˇ£cmp
(
ex≥˘
->
d©a
, (
u_ch¨
 *) "100-continue",

803  
NGX_OK
;

806 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

809 
n
 = 
r
->
c⁄√˘i⁄
->
	`£nd
(r->connection,

810 (
u_ch¨
 *Ë"HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF,

811 ("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1);

813 i‡(
n
 =("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1) {

814  
NGX_OK
;

819  
NGX_ERROR
;

820 
	}
}

823 
ngx_öt_t


824 
	$ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

826 i‡(
r
->
hódîs_ö
.
chunked
) {

827  
	`ngx_hâp_ªque°_body_chunked_fûãr
(
r
, 
ö
);

830  
	`ngx_hâp_ªque°_body_Àngth_fûãr
(
r
, 
ö
);

832 
	}
}

835 
ngx_öt_t


836 
	$ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

838 
size_t
 
size
;

839 
ngx_öt_t
 
rc
;

840 
ngx_buf_t
 *
b
;

841 
ngx_chaö_t
 *
˛
, *
é
, *
out
, **
Œ
;

842 
ngx_hâp_ªque°_body_t
 *
rb
;

844 
rb
 = 
r
->
ªque°_body
;

846 i‡(
rb
->
ª°
 == -1) {

847 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

850 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

853 
out
 = 
NULL
;

854 
Œ
 = &
out
;

856 
˛
 = 
ö
; cl; c»˛->
√xt
) {

858 i‡(
rb
->
ª°
 == 0) {

862 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

863 i‡(
é
 =
NULL
) {

864  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

867 
b
 = 
é
->
buf
;

869 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

871 
b
->
ãmp‹¨y
 = 1;

872 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

873 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

874 
b
->
pos
 = 
˛
->
buf
->pos;

875 
b
->
œ°
 = 
˛
->
buf
->last;

876 
b
->
íd
 = 
˛
->
buf
->end;

878 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

880 i‡((
off_t
Ë
size
 < 
rb
->
ª°
) {

881 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

882 
rb
->
ª°
 -
size
;

885 
˛
->
buf
->
pos
 +(
size_t
Ë
rb
->
ª°
;

886 
rb
->
ª°
 = 0;

887 
b
->
œ°
 = 
˛
->
buf
->
pos
;

888 
b
->
œ°_buf
 = 1;

891 *
Œ
 = 
é
;

892 
Œ
 = &
é
->
√xt
;

895 
rc
 = 
	`ngx_hâp_ªque°_body_ßve_fûãr
(
r
, 
out
);

897 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

898 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

900  
rc
;

901 
	}
}

904 
ngx_öt_t


905 
	$ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

907 
size_t
 
size
;

908 
ngx_öt_t
 
rc
;

909 
ngx_buf_t
 *
b
;

910 
ngx_chaö_t
 *
˛
, *
out
, *
é
, **
Œ
;

911 
ngx_hâp_ªque°_body_t
 *
rb
;

912 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

914 
rb
 = 
r
->
ªque°_body
;

916 i‡(
rb
->
ª°
 == -1) {

918 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

921 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

922 i‡(
rb
->
chunked
 =
NULL
) {

923  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

926 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

927 
rb
->
ª°
 = 3;

930 
out
 = 
NULL
;

931 
Œ
 = &
out
;

933 
˛
 = 
ö
; cl; c»˛->
√xt
) {

937 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

940 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

941 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

942 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

943 
˛
->
buf
->
fûe_pos
,

944 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

946 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
˛
->
buf
, 
rb
->
chunked
);

948 i‡(
rc
 =
NGX_OK
) {

952 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

954 i‡(
˛cf
->
˛õ¡_max_body_size


955 && 
˛cf
->
˛õ¡_max_body_size


956 - 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 
rb
->
chunked
->
size
)

958 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

961 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
,

962 
rb
->
chunked
->
size
);

964 
r
->
lögîög_˛o£
 = 1;

966  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

969 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

970 i‡(
é
 =
NULL
) {

971  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

974 
b
 = 
é
->
buf
;

976 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

978 
b
->
ãmp‹¨y
 = 1;

979 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

980 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

981 
b
->
pos
 = 
˛
->
buf
->pos;

982 
b
->
œ°
 = 
˛
->
buf
->last;

983 
b
->
íd
 = 
˛
->
buf
->end;

985 *
Œ
 = 
é
;

986 
Œ
 = &
é
->
√xt
;

988 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

990 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

991 
˛
->
buf
->
pos
 +(
size_t
Ë
rb
->
chunked
->
size
;

992 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
rb
->
chunked
->
size
;

993 
rb
->
chunked
->
size
 = 0;

996 
rb
->
chunked
->
size
 -= size;

997 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
size
;

998 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

1001 
b
->
œ°
 = 
˛
->
buf
->
pos
;

1006 i‡(
rc
 =
NGX_DONE
) {

1010 
rb
->
ª°
 = 0;

1012 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

1013 i‡(
é
 =
NULL
) {

1014  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1017 
b
 = 
é
->
buf
;

1019 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1021 
b
->
œ°_buf
 = 1;

1023 *
Œ
 = 
é
;

1024 
Œ
 = &
é
->
√xt
;

1029 i‡(
rc
 =
NGX_AGAIN
) {

1033 
rb
->
ª°
 =Ñb->
chunked
->
Àngth
;

1040 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1043  
NGX_HTTP_BAD_REQUEST
;

1047 
rc
 = 
	`ngx_hâp_ªque°_body_ßve_fûãr
(
r
, 
out
);

1049 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

1050 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

1052  
rc
;

1053 
	}
}

1056 
ngx_öt_t


1057 
	$ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1059 #i‡(
NGX_DEBUG
)

1060 
ngx_chaö_t
 *
˛
;

1062 
ngx_hâp_ªque°_body_t
 *
rb
;

1064 
rb
 = 
r
->
ªque°_body
;

1066 #i‡(
NGX_DEBUG
)

1068 
˛
 = 
rb
->
bufs
; cl; c»˛->
√xt
) {

1069 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1072 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1073 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1074 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1075 
˛
->
buf
->
fûe_pos
,

1076 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1079 
˛
 = 
ö
; cl; c»˛->
√xt
) {

1080 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1083 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1084 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1085 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1086 
˛
->
buf
->
fûe_pos
,

1087 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1094 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
rb
->
bufs
, 
ö
Ë!
NGX_OK
) {

1095  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1098  
NGX_OK
;

1099 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_script.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

14 
ngx_öt_t
 
ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

15 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

16 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
);

17 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

18 
ngx_°r_t
 *
«me
);

19 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

20 #i‡(
NGX_PCRE
)

21 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

22 
ngx_uöt_t
 
n
);

24 
ngx_öt_t


25 
ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

26 
size_t
 
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

27 
ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

30 
	#ngx_hâp_s¸ùt_exô
 (
u_ch¨
 *Ë&
ngx_hâp_s¸ùt_exô_code


	)

32 
uöçå_t
 
	gngx_hâp_s¸ùt_exô_code
 = (uöçå_tË
NULL
;

36 
	$ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
)

39 
ngx_uöt_t
 *
ödex
;

41 
ödex
 = 
vÆ
->
Êushes
;

43 i‡(
ödex
) {

44 *
ödex
 !(
ngx_uöt_t
) -1) {

46 i‡(
r
->
v¨übÀs
[*
ödex
].
no_ˇchóbÀ
) {

47 
r
->
v¨übÀs
[*
ödex
].
vÆid
 = 0;

48 
r
->
v¨übÀs
[*
ödex
].
nŸ_found
 = 0;

51 
ödex
++;

54 
	}
}

57 
ngx_öt_t


58 
	$ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
,

59 
ngx_°r_t
 *
vÆue
)

61 
size_t
 
Àn
;

62 
ngx_hâp_s¸ùt_code_±
 
code
;

63 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

64 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

66 i‡(
vÆ
->
Àngths
 =
NULL
) {

67 *
vÆue
 = 
vÆ
->value;

68  
NGX_OK
;

71 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
r
, 
vÆ
);

73 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

75 
e
.
ù
 = 
vÆ
->
Àngths
;

76 
e
.
ªque°
 = 
r
;

77 
e
.
Êushed
 = 1;

79 
Àn
 = 0;

81 *(
uöçå_t
 *Ë
e
.
ù
) {

82 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

83 
Àn
 +
	`lcode
(&
e
);

86 
vÆue
->
Àn
 =Üen;

87 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

88 i‡(
vÆue
->
d©a
 =
NULL
) {

89  
NGX_ERROR
;

92 
e
.
ù
 = 
vÆ
->
vÆues
;

93 
e
.
pos
 = 
vÆue
->
d©a
;

94 
e
.
buf
 = *
vÆue
;

96 *(
uöçå_t
 *Ë
e
.
ù
) {

97 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

98 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

101 *
vÆue
 = 
e
.
buf
;

103  
NGX_OK
;

104 
	}
}

107 
ngx_öt_t


108 
	$ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
)

110 
ngx_°r_t
 *
v
;

111 
ngx_uöt_t
 
i
, 
n
, 
nv
, 
nc
;

112 
ngx_¨øy_t
 
Êushes
, 
Àngths
, 
vÆues
, *
pf
, *
∂
, *
pv
;

113 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

115 
v
 = 
ccv
->
vÆue
;

117 
nv
 = 0;

118 
nc
 = 0;

120 
i
 = 0; i < 
v
->
Àn
; i++) {

121 i‡(
v
->
d©a
[
i
] == '$') {

122 i‡(
v
->
d©a
[
i
 + 1] >= '1' && v->data[i + 1] <= '9') {

123 
nc
++;

126 
nv
++;

131 i‡((
v
->
Àn
 =0 || v->
d©a
[0] != '$')

132 && (
ccv
->
c⁄f_¥efix
 || ccv->
roŸ_¥efix
))

134 i‡(
	`ngx_c⁄f_fuŒ_«me
(
ccv
->
cf
->
cy˛e
, 
v
, ccv->
c⁄f_¥efix
Ë!
NGX_OK
) {

135  
NGX_ERROR
;

138 
ccv
->
c⁄f_¥efix
 = 0;

139 
ccv
->
roŸ_¥efix
 = 0;

142 
ccv
->
com∂ex_vÆue
->
vÆue
 = *
v
;

143 
ccv
->
com∂ex_vÆue
->
Êushes
 = 
NULL
;

144 
ccv
->
com∂ex_vÆue
->
Àngths
 = 
NULL
;

145 
ccv
->
com∂ex_vÆue
->
vÆues
 = 
NULL
;

147 i‡(
nv
 =0 && 
nc
 == 0) {

148  
NGX_OK
;

151 
n
 = 
nv
 + 1;

153 i‡(
	`ngx_¨øy_öô
(&
Êushes
, 
ccv
->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
))

154 !
NGX_OK
)

156  
NGX_ERROR
;

159 
n
 = 
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

160 + (
ngx_hâp_s¸ùt_v¨_code_t
))

161 + (
uöçå_t
);

163 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

164  
NGX_ERROR
;

167 
n
 = (
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

168 + (
ngx_hâp_s¸ùt_v¨_code_t
))

169 + (
uöçå_t
)

170 + 
v
->
Àn


171 + (
uöçå_t
) - 1)

172 & ~((
uöçå_t
) - 1);

174 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

175  
NGX_ERROR
;

178 
pf
 = &
Êushes
;

179 
∂
 = &
Àngths
;

180 
pv
 = &
vÆues
;

182 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

184 
sc
.
cf
 = 
ccv
->cf;

185 
sc
.
sour˚
 = 
v
;

186 
sc
.
Êushes
 = &
pf
;

187 
sc
.
Àngths
 = &
∂
;

188 
sc
.
vÆues
 = &
pv
;

189 
sc
.
com∂ëe_Àngths
 = 1;

190 
sc
.
com∂ëe_vÆues
 = 1;

191 
sc
.
zîo
 = 
ccv
->zero;

192 
sc
.
c⁄f_¥efix
 = 
ccv
->conf_prefix;

193 
sc
.
roŸ_¥efix
 = 
ccv
->root_prefix;

195 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

196  
NGX_ERROR
;

199 i‡(
Êushes
.
√…s
) {

200 
ccv
->
com∂ex_vÆue
->
Êushes
 = flushes.
ñts
;

201 
ccv
->
com∂ex_vÆue
->
Êushes
[Êushes.
√…s
] = (
ngx_uöt_t
) -1;

204 
ccv
->
com∂ex_vÆue
->
Àngths
 =Üígths.
ñts
;

205 
ccv
->
com∂ex_vÆue
->
vÆues
 = vÆues.
ñts
;

207  
NGX_OK
;

208 
	}
}

212 
	$ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
p
 = 
c⁄f
;

216 
ngx_°r_t
 *
vÆue
;

217 
ngx_hâp_com∂ex_vÆue_t
 **
cv
;

218 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

220 
cv
 = (
ngx_hâp_com∂ex_vÆue_t
 **Ë(
p
 + 
cmd
->
off£t
);

222 i‡(*
cv
 !
NULL
) {

226 *
cv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

227 i‡(*
cv
 =
NULL
) {

228  
NGX_CONF_ERROR
;

231 
vÆue
 = 
cf
->
¨gs
->
ñts
;

233 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

235 
ccv
.
cf
 = cf;

236 
ccv
.
vÆue
 = &value[1];

237 
ccv
.
com∂ex_vÆue
 = *
cv
;

239 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

240  
NGX_CONF_ERROR
;

243  
NGX_CONF_OK
;

244 
	}
}

247 
ngx_öt_t


248 
	$ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
¥ediˇãs
)

250 
ngx_°r_t
 
vÆ
;

251 
ngx_uöt_t
 
i
;

252 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

254 i‡(
¥ediˇãs
 =
NULL
) {

255  
NGX_OK
;

258 
cv
 = 
¥ediˇãs
->
ñts
;

260 
i
 = 0; i < 
¥ediˇãs
->
√…s
; i++) {

261 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
cv
[
i
], &
vÆ
Ë!
NGX_OK
) {

262  
NGX_ERROR
;

265 i‡(
vÆ
.
Àn
 && (vÆ.À¿!1 || vÆ.
d©a
[0] != '0')) {

266  
NGX_DECLINED
;

270  
NGX_OK
;

271 
	}
}

275 
	$ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

277 *
p
 = 
c⁄f
;

279 
ngx_°r_t
 *
vÆue
;

280 
ngx_uöt_t
 
i
;

281 
ngx_¨øy_t
 **
a
;

282 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

283 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

285 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

287 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

288 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_com∂ex_vÆue_t
));

289 i‡(*
a
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
vÆue
 = 
cf
->
¨gs
->
ñts
;

296 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

297 
cv
 = 
	`ngx_¨øy_push
(*
a
);

298 i‡(
cv
 =
NULL
) {

299  
NGX_CONF_ERROR
;

302 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

304 
ccv
.
cf
 = cf;

305 
ccv
.
vÆue
 = &vÆue[
i
];

306 
ccv
.
com∂ex_vÆue
 = 
cv
;

308 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

309  
NGX_CONF_ERROR
;

313  
NGX_CONF_OK
;

314 
	}
}

317 
ngx_uöt_t


318 
	$ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
)

320 
ngx_uöt_t
 
i
, 
n
;

322 
n
 = 0, 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

323 i‡(
vÆue
->
d©a
[
i
] == '$') {

324 
n
++;

328  
n
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

335 
u_ch¨
 
ch
;

336 
ngx_°r_t
 
«me
;

337 
ngx_uöt_t
 
i
, 
bøckë
;

339 i‡(
	`ngx_hâp_s¸ùt_öô_¨øys
(
sc
Ë!
NGX_OK
) {

340  
NGX_ERROR
;

343 
i
 = 0; i < 
sc
->
sour˚
->
Àn
; ) {

345 
«me
.
Àn
 = 0;

347 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

349 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

350 
övÆid_v¨übÀ
;

353 #i‡(
NGX_PCRE
)

355 
ngx_uöt_t
 
n
;

357 i‡(
sc
->
sour˚
->
d©a
[
i
] >= '1' && sc->source->data[i] <= '9') {

359 
n
 = 
sc
->
sour˚
->
d©a
[
i
] - '0';

361 i‡(
sc
->
ˇ±uªs_mask
 & (1 << 
n
)) {

362 
sc
->
dup_ˇ±uª
 = 1;

365 
sc
->
ˇ±uªs_mask
 |1 << 
n
;

367 i‡(
	`ngx_hâp_s¸ùt_add_ˇ±uª_code
(
sc
, 
n
Ë!
NGX_OK
) {

368  
NGX_ERROR
;

371 
i
++;

378 i‡(
sc
->
sour˚
->
d©a
[
i
] == '{') {

379 
bøckë
 = 1;

381 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

382 
övÆid_v¨übÀ
;

385 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

388 
bøckë
 = 0;

389 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

392  ; 
i
 < 
sc
->
sour˚
->
Àn
; i++, 
«me
.len++) {

393 
ch
 = 
sc
->
sour˚
->
d©a
[
i
];

395 i‡(
ch
 ='}' && 
bøckë
) {

396 
i
++;

397 
bøckë
 = 0;

401 i‡((
ch
 >= 'A' && ch <= 'Z')

402 || (
ch
 >= 'a' && ch <= 'z')

403 || (
ch
 >= '0' && ch <= '9')

404 || 
ch
 == '_')

412 i‡(
bøckë
) {

413 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

415 "v¨übÀ i†missög", &
«me
);

416  
NGX_ERROR
;

419 i‡(
«me
.
Àn
 == 0) {

420 
övÆid_v¨übÀ
;

423 
sc
->
v¨übÀs
++;

425 i‡(
	`ngx_hâp_s¸ùt_add_v¨_code
(
sc
, &
«me
Ë!
NGX_OK
) {

426  
NGX_ERROR
;

432 i‡(
sc
->
sour˚
->
d©a
[
i
] ='?' && sc->
compûe_¨gs
) {

433 
sc
->
¨gs
 = 1;

434 
sc
->
compûe_¨gs
 = 0;

436 i‡(
	`ngx_hâp_s¸ùt_add_¨gs_code
(
sc
Ë!
NGX_OK
) {

437  
NGX_ERROR
;

440 
i
++;

445 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

447 
i
 < 
sc
->
sour˚
->
Àn
) {

449 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

453 i‡(
sc
->
sour˚
->
d©a
[
i
] == '?') {

455 
sc
->
¨gs
 = 1;

457 i‡(
sc
->
compûe_¨gs
) {

462 
i
++;

463 
«me
.
Àn
++;

466 
sc
->
size
 +
«me
.
Àn
;

468 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
«me
, (
i
 =sc->
sour˚
->
Àn
))

469 !
NGX_OK
)

471  
NGX_ERROR
;

475  
	`ngx_hâp_s¸ùt_d⁄e
(
sc
);

477 
övÆid_v¨übÀ
:

479 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0, "invalid variableÇame");

481  
NGX_ERROR
;

482 
	}
}

485 
u_ch¨
 *

486 
	$ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

487 *
code_Àngths
, 
size_t
 
Àn
, *
code_vÆues
)

489 
ngx_uöt_t
 
i
;

490 
ngx_hâp_s¸ùt_code_±
 
code
;

491 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

492 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

493 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

495 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

497 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

498 i‡(
r
->
v¨übÀs
[
i
].
no_ˇchóbÀ
) {

499 
r
->
v¨übÀs
[
i
].
vÆid
 = 0;

500 
r
->
v¨übÀs
[
i
].
nŸ_found
 = 0;

504 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

506 
e
.
ù
 = 
code_Àngths
;

507 
e
.
ªque°
 = 
r
;

508 
e
.
Êushed
 = 1;

510 *(
uöçå_t
 *Ë
e
.
ù
) {

511 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

512 
Àn
 +
	`lcode
(&
e
);

516 
vÆue
->
Àn
 =Üen;

517 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

518 i‡(
vÆue
->
d©a
 =
NULL
) {

519  
NULL
;

522 
e
.
ù
 = 
code_vÆues
;

523 
e
.
pos
 = 
vÆue
->
d©a
;

525 *(
uöçå_t
 *Ë
e
.
ù
) {

526 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

527 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

530  
e
.
pos
;

531 
	}
}

535 
	$ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_¨øy_t
 *
ödi˚s
)

538 
ngx_uöt_t
 
n
, *
ödex
;

540 i‡(
ödi˚s
) {

541 
ödex
 = 
ödi˚s
->
ñts
;

542 
n
 = 0;Ç < 
ödi˚s
->
√…s
;Ç++) {

543 i‡(
r
->
v¨übÀs
[
ödex
[
n
]].
no_ˇchóbÀ
) {

544 
r
->
v¨übÀs
[
ödex
[
n
]].
vÆid
 = 0;

545 
r
->
v¨übÀs
[
ödex
[
n
]].
nŸ_found
 = 0;

549 
	}
}

552 
ngx_öt_t


553 
	$ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

555 
ngx_uöt_t
 
n
;

557 i‡(
sc
->
Êushes
 && *sc->Êushe†=
NULL
) {

558 
n
 = 
sc
->
v¨übÀs
 ? sc->variables : 1;

559 *
sc
->
Êushes
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
));

560 i‡(*
sc
->
Êushes
 =
NULL
) {

561  
NGX_ERROR
;

565 i‡(*
sc
->
Àngths
 =
NULL
) {

566 
n
 = 
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

567 + (
ngx_hâp_s¸ùt_v¨_code_t
))

568 + (
uöçå_t
);

570 *
sc
->
Àngths
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

571 i‡(*
sc
->
Àngths
 =
NULL
) {

572  
NGX_ERROR
;

576 i‡(*
sc
->
vÆues
 =
NULL
) {

577 
n
 = (
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

578 + (
ngx_hâp_s¸ùt_v¨_code_t
))

579 + (
uöçå_t
)

580 + 
sc
->
sour˚
->
Àn


581 + (
uöçå_t
) - 1)

582 & ~((
uöçå_t
) - 1);

584 *
sc
->
vÆues
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

585 i‡(*
sc
->
vÆues
 =
NULL
) {

586  
NGX_ERROR
;

590 
sc
->
v¨übÀs
 = 0;

592  
NGX_OK
;

593 
	}
}

596 
ngx_öt_t


597 
	$ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

599 
ngx_°r_t
 
zîo
;

600 
uöçå_t
 *
code
;

602 i‡(
sc
->
zîo
) {

604 
zîo
.
Àn
 = 1;

605 
zîo
.
d©a
 = (
u_ch¨
 *) "\0";

607 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
zîo
, 0Ë!
NGX_OK
) {

608  
NGX_ERROR
;

612 i‡(
sc
->
c⁄f_¥efix
 || sc->
roŸ_¥efix
) {

613 i‡(
	`ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
sc
Ë!
NGX_OK
) {

614  
NGX_ERROR
;

618 i‡(
sc
->
com∂ëe_Àngths
) {

619 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

620 i‡(
code
 =
NULL
) {

621  
NGX_ERROR
;

624 *
code
 = (
uöçå_t
Ë
NULL
;

627 i‡(
sc
->
com∂ëe_vÆues
) {

628 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
),

629 &
sc
->
maö
);

630 i‡(
code
 =
NULL
) {

631  
NGX_ERROR
;

634 *
code
 = (
uöçå_t
Ë
NULL
;

637  
NGX_OK
;

638 
	}
}

642 
	$ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
, 
size_t
 
size
)

644 i‡(*
codes
 =
NULL
) {

645 *
codes
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 256, 1);

646 i‡(*
codes
 =
NULL
) {

647  
NULL
;

651  
	`ngx_¨øy_push_n
(*
codes
, 
size
);

652 
	}
}

656 
	$ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
)

658 
u_ch¨
 *
ñts
, **
p
;

659 *
√w
;

661 
ñts
 = 
codes
->elts;

663 
√w
 = 
	`ngx_¨øy_push_n
(
codes
, 
size
);

664 i‡(
√w
 =
NULL
) {

665  
NULL
;

668 i‡(
code
) {

669 i‡(
ñts
 !
codes
->elts) {

670 
p
 = 
code
;

671 *
p
 +(
u_ch¨
 *Ë
codes
->
ñts
 -Élts;

675  
√w
;

676 
	}
}

679 
ngx_öt_t


680 
	$ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
vÆue
,

681 
ngx_uöt_t
 
œ°
)

683 
u_ch¨
 *
p
;

684 
size_t
 
size
, 
Àn
, 
zîo
;

685 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

687 
zîo
 = (
sc
->zîÿ&& 
œ°
);

688 
Àn
 = 
vÆue
->À¿+ 
zîo
;

690 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

691 (
ngx_hâp_s¸ùt_c›y_code_t
), 
NULL
);

692 i‡(
code
 =
NULL
) {

693  
NGX_ERROR
;

696 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

697 
code
->
Àn
 =Üen;

699 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
Ë+ 
Àn
 + (
uöçå_t
) - 1)

700 & ~((
uöçå_t
) - 1);

702 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, 
size
, &sc->
maö
);

703 i‡(
code
 =
NULL
) {

704  
NGX_ERROR
;

707 
code
->codê
ngx_hâp_s¸ùt_c›y_code
;

708 
code
->
Àn
 =Üen;

710 
p
 = 
	`ngx_˝ymem
((
u_ch¨
 *Ë
code
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

711 
vÆue
->
d©a
, vÆue->
Àn
);

713 i‡(
zîo
) {

714 *
p
 = '\0';

715 
sc
->
zîo
 = 0;

718  
NGX_OK
;

719 
	}
}

722 
size_t


723 
	$ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

725 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

727 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

729 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
);

731  
code
->
Àn
;

732 
	}
}

736 
	$ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

738 
u_ch¨
 *
p
;

739 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

741 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

743 
p
 = 
e
->
pos
;

745 i‡(!
e
->
skù
) {

746 
e
->
pos
 = 
	`ngx_c›y
(
p
,É->
ù
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

747 
code
->
Àn
);

750 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
)

751 + ((
code
->
Àn
 + (
uöçå_t
) - 1) & ~((uintptr_t) - 1));

753 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

754 "hâ∞s¸ùàc›y: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

755 
	}
}

758 
ngx_öt_t


759 
	$ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
)

761 
ngx_öt_t
 
ödex
, *
p
;

762 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

764 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
sc
->
cf
, 
«me
);

766 i‡(
ödex
 =
NGX_ERROR
) {

767  
NGX_ERROR
;

770 i‡(
sc
->
Êushes
) {

771 
p
 = 
	`ngx_¨øy_push
(*
sc
->
Êushes
);

772 i‡(
p
 =
NULL
) {

773  
NGX_ERROR
;

776 *
p
 = 
ödex
;

779 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

780 (
ngx_hâp_s¸ùt_v¨_code_t
), 
NULL
);

781 i‡(
code
 =
NULL
) {

782  
NGX_ERROR
;

785 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_v¨_Àn_code
;

786 
code
->
ödex
 = (
uöçå_t
) index;

788 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

789 (
ngx_hâp_s¸ùt_v¨_code_t
),

790 &
sc
->
maö
);

791 i‡(
code
 =
NULL
) {

792  
NGX_ERROR
;

795 
code
->codê
ngx_hâp_s¸ùt_c›y_v¨_code
;

796 
code
->
ödex
 = (
uöçå_t
) index;

798  
NGX_OK
;

799 
	}
}

802 
size_t


803 
	$ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

805 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

806 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

808 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

810 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

812 i‡(
e
->
Êushed
) {

813 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

816 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

819 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

820  
vÆue
->
Àn
;

824 
	}
}

828 
	$ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

830 
u_ch¨
 *
p
;

831 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

832 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

834 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

836 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

838 i‡(!
e
->
skù
) {

840 i‡(
e
->
Êushed
) {

841 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

844 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

847 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

848 
p
 = 
e
->
pos
;

849 
e
->
pos
 = 
	`ngx_c›y
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

851 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
,

852 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

853 "hâ∞s¸ùàv¨: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

856 
	}
}

859 
ngx_öt_t


860 
	$ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

862 
uöçå_t
 *
code
;

864 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

865 i‡(
code
 =
NULL
) {

866  
NGX_ERROR
;

869 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_m¨k_¨gs_code
;

871 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
), &sc->
maö
);

872 i‡(
code
 =
NULL
) {

873  
NGX_ERROR
;

876 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_°¨t_¨gs_code
;

878  
NGX_OK
;

879 
	}
}

882 
size_t


883 
	$ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

885 
e
->
is_¨gs
 = 1;

886 
e
->
ù
 +(
uöçå_t
);

889 
	}
}

893 
	$ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

895 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

898 
e
->
is_¨gs
 = 1;

899 
e
->
¨gs
 =É->
pos
;

900 
e
->
ù
 +(
uöçå_t
);

901 
	}
}

904 #i‡(
NGX_PCRE
)

907 
	$ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

909 
size_t
 
Àn
;

910 
ngx_öt_t
 
rc
;

911 
ngx_uöt_t
 
n
;

912 
ngx_hâp_ªque°_t
 *
r
;

913 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

914 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

915 
ngx_hâp_s¸ùt_ªgex_code_t
 *
code
;

917 
code
 = (
ngx_hâp_s¸ùt_ªgex_code_t
 *Ë
e
->
ù
;

919 
r
 = 
e
->
ªque°
;

921 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

922 "hâ∞s¸ùàªgex: \"%V\"", &
code
->
«me
);

924 i‡(
code
->
uri
) {

925 
e
->
löe
 = 
r
->
uri
;

927 
e
->
•
--;

928 
e
->
löe
.
Àn
 =É->
•
->len;

929 
e
->
löe
.
d©a
 =É->
•
->data;

932 
rc
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
code
->
ªgex
, &
e
->
löe
);

934 i‡(
rc
 =
NGX_DECLINED
) {

935 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

936 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

938 &
code
->
«me
, &
e
->
löe
);

941 
r
->
nˇ±uªs
 = 0;

943 i‡(
code
->
ã°
) {

944 i‡(
code
->
√g©ive_ã°
) {

945 
e
->
•
->
Àn
 = 1;

946 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

949 
e
->
•
->
Àn
 = 0;

950 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

953 
e
->
•
++;

955 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

959 
e
->
ù
 +
code
->
√xt
;

963 i‡(
rc
 =
NGX_ERROR
) {

964 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

965 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

969 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

970 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

971 "\"%V\" m©che†\"%V\"", &
code
->
«me
, &
e
->
löe
);

974 i‡(
code
->
ã°
) {

975 i‡(
code
->
√g©ive_ã°
) {

976 
e
->
•
->
Àn
 = 0;

977 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

980 
e
->
•
->
Àn
 = 1;

981 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

984 
e
->
•
++;

986 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

990 i‡(
code
->
°©us
) {

991 
e
->
°©us
 = 
code
->status;

993 i‡(!
code
->
ªdúe˘
) {

994 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

999 i‡(
code
->
uri
) {

1000 
r
->
öã∫Æ
 = 1;

1001 
r
->
vÆid_u≈¨£d_uri
 = 0;

1003 i‡(
code
->
bªak_cy˛e
) {

1004 
r
->
vÆid_loˇti⁄
 = 0;

1005 
r
->
uri_ch™ged
 = 0;

1008 
r
->
uri_ch™ged
 = 1;

1012 i‡(
code
->
Àngths
 =
NULL
) {

1013 
e
->
buf
.
Àn
 = 
code
->
size
;

1015 i‡(
code
->
uri
) {

1016 i‡(
r
->
nˇ±uªs
 && (r->
quŸed_uri
 ||Ñ->
∂us_ö_uri
)) {

1017 
e
->
buf
.
Àn
 +2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.len,

1018 
NGX_ESCAPE_ARGS
);

1022 
n
 = 2;Ç < 
r
->
nˇ±uªs
;Ç += 2) {

1023 
e
->
buf
.
Àn
 +
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

1027 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1029 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1030 
À
.
löe
 = 
e
->line;

1031 
À
.
ªque°
 = 
r
;

1032 
À
.
quŸe
 = 
code
->
ªdúe˘
;

1034 
Àn
 = 0;

1036 *(
uöçå_t
 *Ë
À
.
ù
) {

1037 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1038 
Àn
 +
	`lcode
(&
À
);

1041 
e
->
buf
.
Àn
 =Üen;

1044 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1045 
e
->
buf
.
Àn
 +
r
->
¨gs
.len + 1;

1048 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,É->buf.
Àn
);

1049 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1050 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1051 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1055 
e
->
quŸe
 = 
code
->
ªdúe˘
;

1057 
e
->
pos
 =É->
buf
.
d©a
;

1059 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

1060 
	}
}

1064 
	$ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1066 
u_ch¨
 *
d°
, *
§c
;

1067 
ngx_hâp_ªque°_t
 *
r
;

1068 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
code
;

1070 
code
 = (
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *Ë
e
->
ù
;

1072 
r
 = 
e
->
ªque°
;

1074 
e
->
quŸe
 = 0;

1076 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1079 i‡(
code
->
ªdúe˘
) {

1081 
d°
 = 
e
->
buf
.
d©a
;

1082 
§c
 = 
e
->
buf
.
d©a
;

1084 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
e
->
pos
 -É->
buf
.
d©a
,

1085 
NGX_UNESCAPE_REDIRECT
);

1087 i‡(
§c
 < 
e
->
pos
) {

1088 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
e
->
pos
 - src);

1091 
e
->
pos
 = 
d°
;

1093 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1094 *
e
->
pos
++ = (
u_ch¨
Ë(
code
->
¨gs
 ? '&' : '?');

1095 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1098 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1100 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1101 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1102 "ªwrôã¿ªdúe˘: \"%V\"", &
e
->
buf
);

1105 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1107 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1108 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1109 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1110 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1114 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1115 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1116 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
e
->
buf
;

1118 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1122 i‡(
e
->
¨gs
) {

1123 
e
->
buf
.
Àn
 =É->
¨gs
 -É->buf.
d©a
;

1125 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1126 *
e
->
pos
++ = '&';

1127 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1130 
r
->
¨gs
.
Àn
 = 
e
->
pos
 -É->args;

1131 
r
->
¨gs
.
d©a
 = 
e
->args;

1133 
e
->
¨gs
 = 
NULL
;

1136 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1138 i‡(!
code
->
add_¨gs
) {

1139 
r
->
¨gs
.
Àn
 = 0;

1143 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1144 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1146 &
e
->
buf
, &
r
->
¨gs
);

1149 i‡(
code
->
uri
) {

1150 
r
->
uri
 = 
e
->
buf
;

1152 i‡(
r
->
uri
.
Àn
 == 0) {

1153 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1155 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1156 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1160 
	`ngx_hâp_£t_exãn
(
r
);

1163 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1164 
	}
}

1167 
ngx_öt_t


1168 
	$ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_uöt_t
 
n
)

1170 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1172 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1173 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1174 
NULL
);

1175 i‡(
code
 =
NULL
) {

1176  
NGX_ERROR
;

1179 
code
->codê(
ngx_hâp_s¸ùt_code_±
)

1180 
ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
;

1181 
code
->
n
 = 2 *Ç;

1184 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1185 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1186 &
sc
->
maö
);

1187 i‡(
code
 =
NULL
) {

1188  
NGX_ERROR
;

1191 
code
->codê
ngx_hâp_s¸ùt_c›y_ˇ±uª_code
;

1192 
code
->
n
 = 2 *Ç;

1194 i‡(
sc
->
nˇ±uªs
 < 
n
) {

1195 
sc
->
nˇ±uªs
 = 
n
;

1198  
NGX_OK
;

1199 
	}
}

1202 
size_t


1203 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1205 *
ˇp
;

1206 
u_ch¨
 *
p
;

1207 
ngx_uöt_t
 
n
;

1208 
ngx_hâp_ªque°_t
 *
r
;

1209 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1211 
r
 = 
e
->
ªque°
;

1213 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1215 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1217 
n
 = 
code
->n;

1219 i‡(
n
 < 
r
->
nˇ±uªs
) {

1221 
ˇp
 = 
r
->
ˇ±uªs
;

1223 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1224 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1226 
p
 = 
r
->
ˇ±uªs_d©a
;

1228  
ˇp
[
n
 + 1] - cap[n]

1229 + 2 * 
	`ngx_esˇ≥_uri
(
NULL
, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n],

1230 
NGX_ESCAPE_ARGS
);

1232  
ˇp
[
n
 + 1] - cap[n];

1237 
	}
}

1241 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1243 *
ˇp
;

1244 
u_ch¨
 *
p
, *
pos
;

1245 
ngx_uöt_t
 
n
;

1246 
ngx_hâp_ªque°_t
 *
r
;

1247 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1249 
r
 = 
e
->
ªque°
;

1251 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1253 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1255 
n
 = 
code
->n;

1257 
pos
 = 
e
->pos;

1259 i‡(
n
 < 
r
->
nˇ±uªs
) {

1261 
ˇp
 = 
r
->
ˇ±uªs
;

1262 
p
 = 
r
->
ˇ±uªs_d©a
;

1264 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1265 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1267 
e
->
pos
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’os, &
p
[
ˇp
[
n
]],

1268 
ˇp
[
n
 + 1] - cap[n],

1269 
NGX_ESCAPE_ARGS
);

1271 
e
->
pos
 = 
	`ngx_c›y
’os, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n]);

1275 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1276 "hâ∞s¸ùàˇ±uª: \"%*s\"", 
e
->
pos
 -Öos,Öos);

1277 
	}
}

1282 
ngx_öt_t


1283 
	$ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

1285 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1287 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1288 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1289 
NULL
);

1290 i‡(
code
 =
NULL
) {

1291  
NGX_ERROR
;

1294 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
;

1295 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1297 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1298 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1299 &
sc
->
maö
);

1300 i‡(
code
 =
NULL
) {

1301  
NGX_ERROR
;

1304 
code
->codê
ngx_hâp_s¸ùt_fuŒ_«me_code
;

1305 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1307  
NGX_OK
;

1308 
	}
}

1311 
size_t


1312 
	$ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1314 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1316 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1318 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1320  
code
->
c⁄f_¥efix
 ? 
ngx_cy˛e
->c⁄f_¥efix.
Àn
:

1321 
ngx_cy˛e
->
¥efix
.
Àn
;

1322 
	}
}

1326 
	$ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1328 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1330 
ngx_°r_t
 
vÆue
, *
¥efix
;

1332 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1334 
vÆue
.
d©a
 = 
e
->
buf
.data;

1335 
vÆue
.
Àn
 = 
e
->
pos
 -É->
buf
.
d©a
;

1337 
¥efix
 = 
code
->
c⁄f_¥efix
 ? (
ngx_°r_t
 *Ë&
ngx_cy˛e
->conf_prefix:

1338 (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
;

1340 i‡(
	`ngx_gë_fuŒ_«me
(
e
->
ªque°
->
poﬁ
, 
¥efix
, &
vÆue
Ë!
NGX_OK
) {

1341 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1342 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1346 
e
->
buf
 = 
vÆue
;

1348 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1349 "hâ∞s¸ùàfuŒ«me: \"%V\"", &
vÆue
);

1351 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1352 
	}
}

1356 
	$ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1358 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
code
;

1360 
code
 = (
ngx_hâp_s¸ùt_ªtu∫_code_t
 *Ë
e
->
ù
;

1362 i‡(
code
->
°©us
 < 
NGX_HTTP_BAD_REQUEST


1363 || 
code
->
ãxt
.
vÆue
.
Àn


1364 || 
code
->
ãxt
.
Àngths
)

1366 
e
->
°©us
 = 
	`ngx_hâp_£nd_ª•⁄£
”->
ªque°
, 
code
->°©us, 
NULL
,

1367 &
code
->
ãxt
);

1369 
e
->
°©us
 = 
code
->status;

1372 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1373 
	}
}

1377 
	$ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1379 
e
->
ªque°
->
uri_ch™ged
 = 0;

1381 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1382 
	}
}

1386 
	$ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1388 
ngx_hâp_s¸ùt_if_code_t
 *
code
;

1390 
code
 = (
ngx_hâp_s¸ùt_if_code_t
 *Ë
e
->
ù
;

1392 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1395 
e
->
•
--;

1397 i‡(
e
->
•
->
Àn
 && (e->•->À¿!1 ||É->•->
d©a
[0] != '0')) {

1398 i‡(
code
->
loc_c⁄f
) {

1399 
e
->
ªque°
->
loc_c⁄f
 = 
code
->loc_conf;

1400 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
e
->
ªque°
);

1403 
e
->
ù
 +(
ngx_hâp_s¸ùt_if_code_t
);

1407 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1410 
e
->
ù
 +
code
->
√xt
;

1411 
	}
}

1415 
	$ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1417 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1419 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1422 
e
->
•
--;

1423 
vÆ
 = 
e
->
•
;

1424 
ªs
 = 
e
->
•
 - 1;

1426 
e
->
ù
 +(
uöçå_t
);

1428 i‡(
vÆ
->
Àn
 =
ªs
->len

1429 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1431 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1435 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1438 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1439 
	}
}

1443 
	$ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1445 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1447 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1450 
e
->
•
--;

1451 
vÆ
 = 
e
->
•
;

1452 
ªs
 = 
e
->
•
 - 1;

1454 
e
->
ù
 +(
uöçå_t
);

1456 i‡(
vÆ
->
Àn
 =
ªs
->len

1457 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1459 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1462 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1466 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1467 
	}
}

1471 
	$ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1473 
ngx_°r_t
 
∑th
;

1474 
ngx_hâp_ªque°_t
 *
r
;

1475 
ngx_›í_fûe_öfo_t
 
of
;

1476 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1477 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1478 
ngx_hâp_s¸ùt_fûe_code_t
 *
code
;

1480 
vÆue
 = 
e
->
•
 - 1;

1482 
code
 = (
ngx_hâp_s¸ùt_fûe_code_t
 *Ë
e
->
ù
;

1483 
e
->
ù
 +(
ngx_hâp_s¸ùt_fûe_code_t
);

1485 
∑th
.
Àn
 = 
vÆue
->len - 1;

1486 
∑th
.
d©a
 = 
vÆue
->data;

1488 
r
 = 
e
->
ªque°
;

1490 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1491 "hâ∞s¸ùàfûê› %∞\"%V\"", 
code
->
›
, &
∑th
);

1493 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1495 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1497 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1498 
of
.
dúe˘io
 = 
˛cf
->directio;

1499 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1500 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1501 
of
.
ã°_⁄ly
 = 1;

1502 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1503 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1505 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1506 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1507 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1511 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1512 !
NGX_OK
)

1514 i‡(
of
.
îr
 !
NGX_ENOENT


1515 && 
of
.
îr
 !
NGX_ENOTDIR


1516 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1518 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1519 "%†\"%s\" faûed", 
of
.
Áûed
, 
vÆue
->
d©a
);

1522 
code
->
›
) {

1524 
ngx_hâp_s¸ùt_fûe_∂aö
:

1525 
ngx_hâp_s¸ùt_fûe_dú
:

1526 
ngx_hâp_s¸ùt_fûe_exi°s
:

1527 
ngx_hâp_s¸ùt_fûe_exec
:

1528 
Ál£_vÆue
;

1530 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1531 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1532 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1533 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1534 
åue_vÆue
;

1537 
Ál£_vÆue
;

1540 
code
->
›
) {

1541 
ngx_hâp_s¸ùt_fûe_∂aö
:

1542 i‡(
of
.
is_fûe
) {

1543 
åue_vÆue
;

1545 
Ál£_vÆue
;

1547 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1548 i‡(
of
.
is_fûe
) {

1549 
Ál£_vÆue
;

1551 
åue_vÆue
;

1553 
ngx_hâp_s¸ùt_fûe_dú
:

1554 i‡(
of
.
is_dú
) {

1555 
åue_vÆue
;

1557 
Ál£_vÆue
;

1559 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1560 i‡(
of
.
is_dú
) {

1561 
Ál£_vÆue
;

1563 
åue_vÆue
;

1565 
ngx_hâp_s¸ùt_fûe_exi°s
:

1566 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1567 
åue_vÆue
;

1569 
Ál£_vÆue
;

1571 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1572 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1573 
Ál£_vÆue
;

1575 
åue_vÆue
;

1577 
ngx_hâp_s¸ùt_fûe_exec
:

1578 i‡(
of
.
is_exec
) {

1579 
åue_vÆue
;

1581 
Ál£_vÆue
;

1583 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1584 i‡(
of
.
is_exec
) {

1585 
Ál£_vÆue
;

1587 
åue_vÆue
;

1590 
Ál£_vÆue
:

1592 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1595 *
vÆue
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1598 
åue_vÆue
:

1600 *
vÆue
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1602 
	}
}

1606 
	$ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1608 
size_t
 
Àn
;

1609 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

1610 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1611 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
code
;

1613 
code
 = (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *Ë
e
->
ù
;

1615 
e
->
ù
 +(
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
);

1617 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1620 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1622 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1623 
À
.
löe
 = 
e
->line;

1624 
À
.
ªque°
 = 
e
->request;

1625 
À
.
quŸe
 = 
e
->quote;

1627 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1628 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1631 
e
->
buf
.
Àn
 =Üen;

1632 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
”->
ªque°
->
poﬁ
, 
Àn
);

1633 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1634 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1635 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1639 
e
->
pos
 =É->
buf
.
d©a
;

1641 
e
->
•
->
Àn
 =É->
buf
.len;

1642 
e
->
•
->
d©a
 =É->
buf
.data;

1643 
e
->
•
++;

1644 
	}
}

1648 
	$ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1650 
ngx_hâp_s¸ùt_vÆue_code_t
 *
code
;

1652 
code
 = (
ngx_hâp_s¸ùt_vÆue_code_t
 *Ë
e
->
ù
;

1654 
e
->
ù
 +(
ngx_hâp_s¸ùt_vÆue_code_t
);

1656 
e
->
•
->
Àn
 = 
code
->
ãxt_Àn
;

1657 
e
->
•
->
d©a
 = (
u_ch¨
 *Ë
code
->
ãxt_d©a
;

1659 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1660 "hâ∞s¸ùàvÆue: \"%v\"", 
e
->
•
);

1662 
e
->
•
++;

1663 
	}
}

1667 
	$ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1669 
ngx_hâp_ªque°_t
 *
r
;

1670 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1672 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1674 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1676 
r
 = 
e
->
ªque°
;

1678 
e
->
•
--;

1680 
r
->
v¨übÀs
[
code
->
ödex
].
Àn
 = 
e
->
•
->len;

1681 
r
->
v¨übÀs
[
code
->
ödex
].
vÆid
 = 1;

1682 
r
->
v¨übÀs
[
code
->
ödex
].
no_ˇchóbÀ
 = 0;

1683 
r
->
v¨übÀs
[
code
->
ödex
].
nŸ_found
 = 0;

1684 
r
->
v¨übÀs
[
code
->
ödex
].
d©a
 = 
e
->
•
->data;

1686 #i‡(
NGX_DEBUG
)

1688 
ngx_hâp_v¨übÀ_t
 *
v
;

1689 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1691 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1693 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1695 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1696 "hâ∞s¸ùà£à$%V", &
v
[
code
->
ödex
].
«me
);

1699 
	}
}

1703 
	$ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1705 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
code
;

1707 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1710 
code
 = (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *Ë
e
->
ù
;

1712 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
);

1714 
e
->
•
--;

1716 
code
->
	`h™dÀr
(
e
->
ªque°
,É->
•
, code->
d©a
);

1717 
	}
}

1721 
	$ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1723 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1724 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1726 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1729 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1731 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1733 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

1735 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

1736 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1737 "hâ∞s¸ùàv¨: \"%v\"", 
vÆue
);

1739 *
e
->
•
 = *
vÆue
;

1740 
e
->
•
++;

1745 *
e
->
•
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1746 
e
->
•
++;

1747 
	}
}

1751 
	$ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1753 
e
->
ù
 +(
uöçå_t
);

1754 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_script.h

8 #i‚de‡
_NGX_HTTP_SCRIPT_H_INCLUDED_


9 
	#_NGX_HTTP_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

26 
u_ch¨
 *
	m¨gs
;

28 
	mÊushed
:1;

29 
	mskù
:1;

30 
	mquŸe
:1;

31 
	mis_¨gs
:1;

32 
	mlog
:1;

34 
ngx_öt_t
 
	m°©us
;

35 
ngx_hâp_ªque°_t
 *
	mªque°
;

36 } 
	tngx_hâp_s¸ùt_ígöe_t
;

40 
ngx_c⁄f_t
 *
	mcf
;

41 
ngx_°r_t
 *
	msour˚
;

43 
ngx_¨øy_t
 **
	mÊushes
;

44 
ngx_¨øy_t
 **
	mÀngths
;

45 
ngx_¨øy_t
 **
	mvÆues
;

47 
ngx_uöt_t
 
	mv¨übÀs
;

48 
ngx_uöt_t
 
	mnˇ±uªs
;

49 
ngx_uöt_t
 
	mˇ±uªs_mask
;

50 
ngx_uöt_t
 
	msize
;

52 *
	mmaö
;

54 
	mcompûe_¨gs
:1;

55 
	mcom∂ëe_Àngths
:1;

56 
	mcom∂ëe_vÆues
:1;

57 
	mzîo
:1;

58 
	mc⁄f_¥efix
:1;

59 
	mroŸ_¥efix
:1;

61 
	mdup_ˇ±uª
:1;

62 
	m¨gs
:1;

63 } 
	tngx_hâp_s¸ùt_compûe_t
;

67 
ngx_°r_t
 
	mvÆue
;

68 
ngx_uöt_t
 *
	mÊushes
;

69 *
	mÀngths
;

70 *
	mvÆues
;

71 } 
	tngx_hâp_com∂ex_vÆue_t
;

75 
ngx_c⁄f_t
 *
	mcf
;

76 
ngx_°r_t
 *
	mvÆue
;

77 
ngx_hâp_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

79 
	mzîo
:1;

80 
	mc⁄f_¥efix
:1;

81 
	mroŸ_¥efix
:1;

82 } 
	tngx_hâp_compûe_com∂ex_vÆue_t
;

85 (*
	tngx_hâp_s¸ùt_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

86 
	$size_t
 (*
	tngx_hâp_s¸ùt_Àn_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

90 
ngx_hâp_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
Àn
;

92 } 
	tngx_hâp_s¸ùt_c›y_code_t
;

96 
ngx_hâp_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
ödex
;

98 } 
	tngx_hâp_s¸ùt_v¨_code_t
;

102 
ngx_hâp_s¸ùt_code_±
 
code
;

103 
ngx_hâp_£t_v¨übÀ_±
 
h™dÀr
;

104 
uöçå_t
 
d©a
;

105 } 
	tngx_hâp_s¸ùt_v¨_h™dÀr_code_t
;

109 
ngx_hâp_s¸ùt_code_±
 
code
;

110 
uöçå_t
 
n
;

111 } 
	tngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
;

114 #i‡(
NGX_PCRE
)

117 
ngx_hâp_s¸ùt_code_±
 
code
;

118 
ngx_hâp_ªgex_t
 *
ªgex
;

119 
ngx_¨øy_t
 *
Àngths
;

120 
uöçå_t
 
size
;

121 
uöçå_t
 
°©us
;

122 
uöçå_t
 
√xt
;

124 
uöçå_t
 
ã°
:1;

125 
uöçå_t
 
√g©ive_ã°
:1;

126 
uöçå_t
 
uri
:1;

127 
uöçå_t
 
¨gs
:1;

130 
uöçå_t
 
add_¨gs
:1;

132 
uöçå_t
 
ªdúe˘
:1;

133 
uöçå_t
 
bªak_cy˛e
:1;

135 
ngx_°r_t
 
«me
;

136 } 
	tngx_hâp_s¸ùt_ªgex_code_t
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

142 
uöçå_t
 
uri
:1;

143 
uöçå_t
 
¨gs
:1;

146 
uöçå_t
 
add_¨gs
:1;

148 
uöçå_t
 
ªdúe˘
:1;

149 } 
	tngx_hâp_s¸ùt_ªgex_íd_code_t
;

155 
ngx_hâp_s¸ùt_code_±
 
code
;

156 
uöçå_t
 
c⁄f_¥efix
;

157 } 
	tngx_hâp_s¸ùt_fuŒ_«me_code_t
;

161 
ngx_hâp_s¸ùt_code_±
 
code
;

162 
uöçå_t
 
°©us
;

163 
ngx_hâp_com∂ex_vÆue_t
 
ãxt
;

164 } 
	tngx_hâp_s¸ùt_ªtu∫_code_t
;

168 
ngx_hâp_s¸ùt_fûe_∂aö
 = 0,

169 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
,

170 
ngx_hâp_s¸ùt_fûe_dú
,

171 
ngx_hâp_s¸ùt_fûe_nŸ_dú
,

172 
ngx_hâp_s¸ùt_fûe_exi°s
,

173 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
,

174 
ngx_hâp_s¸ùt_fûe_exec
,

175 
ngx_hâp_s¸ùt_fûe_nŸ_exec


176 } 
	tngx_hâp_s¸ùt_fûe_›_e
;

180 
ngx_hâp_s¸ùt_code_±
 
code
;

181 
uöçå_t
 
›
;

182 } 
	tngx_hâp_s¸ùt_fûe_code_t
;

186 
ngx_hâp_s¸ùt_code_±
 
code
;

187 
uöçå_t
 
√xt
;

188 **
loc_c⁄f
;

189 } 
	tngx_hâp_s¸ùt_if_code_t
;

193 
ngx_hâp_s¸ùt_code_±
 
code
;

194 
ngx_¨øy_t
 *
Àngths
;

195 } 
	tngx_hâp_s¸ùt_com∂ex_vÆue_code_t
;

199 
ngx_hâp_s¸ùt_code_±
 
code
;

200 
uöçå_t
 
vÆue
;

201 
uöçå_t
 
ãxt_Àn
;

202 
uöçå_t
 
ãxt_d©a
;

203 } 
	tngx_hâp_s¸ùt_vÆue_code_t
;

206 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

207 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
);

208 
ngx_öt_t
 
	`ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

209 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

210 
ngx_öt_t
 
	`ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
);

211 *
	`ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

212 *
c⁄f
);

215 
ngx_öt_t
 
	`ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
,

216 
ngx_¨øy_t
 *
¥ediˇãs
);

217 *
	`ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

218 *
c⁄f
);

220 
ngx_uöt_t
 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

221 
ngx_öt_t
 
	`ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

222 
u_ch¨
 *
	`ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

223 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

224 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

225 
ngx_¨øy_t
 *
ödi˚s
);

227 *
	`ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
,

228 
size_t
 
size
);

229 *
	`ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

231 
size_t
 
	`ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

232 
	`ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

233 
size_t
 
	`ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

234 
	`ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

235 
size_t
 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

236 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

237 
size_t
 
	`ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

238 
	`ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

239 #i‡(
NGX_PCRE
)

240 
	`ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

241 
	`ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

243 
	`ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

244 
	`ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

245 
	`ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

246 
	`ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

247 
	`ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

248 
	`ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

249 
	`ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

250 
	`ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

251 
	`ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

252 
	`ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

253 
	`ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

254 
	`ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_•dy_moduÀ.h
>

13 
	~<zlib.h
>

16 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

18 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

19 *(
uöt32_t
 *Ë
m
 =(
c3
 << 24 | 
c2
 << 16 | 
c1
 << 8 | 
c0
) \

20 && 
m
[4] =
c4


	)

24 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

25 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

30 #i‡(
NGX_HAVE_NONALIGNED
)

32 
	#ngx_•dy_‰ame_∑r£_uöt16
(
p
Ë
	`¡ohs
(*(
uöt16_t
 *Ë’))

	)

33 
	#ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë
	`¡ohl
(*(
uöt32_t
 *Ë’))

	)

37 
	#ngx_•dy_‰ame_∑r£_uöt16
(
p
Ë(’)[0] << 8 | (p)[1])

	)

38 
	#ngx_•dy_‰ame_∑r£_uöt32
(
p
) \

39 ((
p
)[0] << 24 | (p)[1] << 16 | (p)[2] << 8 | (p)[3])

	)

43 
	#ngx_•dy_‰ame_∑r£_sid
(
p
) \

44 (
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë& 0x7fffffff)

	)

45 
	#ngx_•dy_‰ame_∑r£_dñè
(
p
) \

46 (
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë& 0x7fffffff)

	)

49 
	#ngx_•dy_˘l_‰ame_check
(
h
) \

50 (((
h
Ë& 0xffff0000Ë=
	`ngx_•dy_˘l_‰ame_hód
(0))

	)

51 
	#ngx_•dy_d©a_‰ame_check
(
h
) \

52 (!((
h
Ë& (
uöt32_t
Ë
NGX_SPDY_CTL_BIT
 << 31))

	)

54 
	#ngx_•dy_˘l_‰ame_ty≥
(
h
Ë((hË& 0x0000ffff)

	)

55 
	#ngx_•dy_‰ame_Êags
(
p
Ë(’Ë>> 24)

	)

56 
	#ngx_•dy_‰ame_Àngth
(
p
Ë(’Ë& 0x00ffffff)

	)

57 
	#ngx_•dy_‰ame_id
(
p
Ë(’Ë& 0x00ffffff)

	)

60 
	#NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
 4096

	)

61 
	#NGX_SPDY_CTL_FRAME_BUFFER_SIZE
 16

	)

63 
	#NGX_SPDY_PROTOCOL_ERROR
 1

	)

64 
	#NGX_SPDY_INVALID_STREAM
 2

	)

65 
	#NGX_SPDY_REFUSED_STREAM
 3

	)

66 
	#NGX_SPDY_UNSUPPORTED_VERSION
 4

	)

67 
	#NGX_SPDY_CANCEL
 5

	)

68 
	#NGX_SPDY_INTERNAL_ERROR
 6

	)

69 
	#NGX_SPDY_FLOW_CONTROL_ERROR
 7

	)

70 
	#NGX_SPDY_STREAM_IN_USE
 8

	)

71 
	#NGX_SPDY_STREAM_ALREADY_CLOSED
 9

	)

73 
	#NGX_SPDY_FRAME_TOO_LARGE
 11

	)

75 
	#NGX_SPDY_SETTINGS_MAX_STREAMS
 4

	)

76 
	#NGX_SPDY_SETTINGS_INIT_WINDOW
 7

	)

78 
	#NGX_SPDY_SETTINGS_FLAG_PERSIST
 0x01

	)

79 
	#NGX_SPDY_SETTINGS_FLAG_PERSISTED
 0x02

	)

81 
	#NGX_SPDY_MAX_WINDOW
 
NGX_MAX_INT32_VALUE


	)

82 
	#NGX_SPDY_CONNECTION_WINDOW
 65536

	)

83 
	#NGX_SPDY_INIT_STREAM_WINDOW
 65536

	)

84 
	#NGX_SPDY_STREAM_WINDOW
 
NGX_SPDY_MAX_WINDOW


	)

87 
ngx_uöt_t
 
	mhash
;

88 
u_ch¨
 
	mÀn
;

89 
u_ch¨
 
	mhódî
[7];

90 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_ªque°_t
 *
	mr
);

91 } 
	tngx_hâp_•dy_ªque°_hódî_t
;

94 
ngx_hâp_•dy_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

95 
ngx_hâp_•dy_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

96 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

98 
u_ch¨
 *
ngx_hâp_•dy_¥oxy_¥Ÿocﬁ
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

99 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

100 
u_ch¨
 *
ngx_hâp_•dy_°©e_hód
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

101 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

102 
u_ch¨
 *
ngx_hâp_•dy_°©e_syn_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

103 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

104 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

105 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

106 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

107 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

108 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

109 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

110 
u_ch¨
 *
ngx_hâp_•dy_°©e_wödow_upd©e
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

111 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

112 
u_ch¨
 *
ngx_hâp_•dy_°©e_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

113 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

114 
u_ch¨
 *
ngx_hâp_•dy_°©e_ªad_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

115 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

116 
u_ch¨
 *
ngx_hâp_•dy_°©e_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

117 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

118 
u_ch¨
 *
ngx_hâp_•dy_°©e_pög
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

119 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

120 
u_ch¨
 *
ngx_hâp_•dy_°©e_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

121 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

122 
u_ch¨
 *
ngx_hâp_•dy_°©e_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

123 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

124 
u_ch¨
 *
ngx_hâp_•dy_°©e_com∂ëe
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

125 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

126 
u_ch¨
 *
ngx_hâp_•dy_°©e_ßve
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

127 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_•dy_h™dÀr_±
 
h™dÀr
);

128 
u_ch¨
 *
ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(

129 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

130 
u_ch¨
 *
ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(

131 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

133 
ngx_öt_t
 
ngx_hâp_•dy_£nd_wödow_upd©e
(

134 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
,Çgx_uöt_à
dñè
);

135 
ngx_öt_t
 
ngx_hâp_•dy_£nd_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

136 
ngx_uöt_t
 
sid
,Çgx_uöt_à
°©us
,Çgx_uöt_à
¥i‹ôy
);

137 
ngx_öt_t
 
ngx_hâp_•dy_£nd_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

138 
ngx_öt_t
 
ngx_hâp_•dy_£âögs_‰ame_h™dÀr
(

139 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

140 
ngx_hâp_•dy_out_‰ame_t
 *
ngx_hâp_•dy_gë_˘l_‰ame
(

141 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
size_t
 
size
, 
ngx_uöt_t
 
¥i‹ôy
);

142 
ngx_öt_t
 
ngx_hâp_•dy_˘l_‰ame_h™dÀr
(

143 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

145 
ngx_hâp_•dy_°ªam_t
 *
ngx_hâp_•dy_¸óã_°ªam
(

146 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
id
,Çgx_uöt_à
¥i‹ôy
);

147 
ngx_hâp_•dy_°ªam_t
 *
ngx_hâp_•dy_gë_°ªam_by_id
(

148 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
);

149 
	#ngx_hâp_•dy_°ªams_ödex_size
(
sscf
Ë(sscf->
°ªams_ödex_mask
 + 1)

	)

150 
	#ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
sid
) \

151 ((
sid
 >> 1Ë& 
sscf
->
°ªams_ödex_mask
)

	)

153 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
);

154 
ngx_öt_t
 
ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
);

156 
ngx_öt_t
 
ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

157 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
);

158 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
);

159 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_ho°
(
ngx_hâp_ªque°_t
 *
r
);

160 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_∑th
(
ngx_hâp_ªque°_t
 *
r
);

161 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
);

163 
ngx_öt_t
 
ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
);

164 
ngx_hâp_•dy_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

165 
ngx_öt_t
 
ngx_hâp_•dy_öô_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

167 
ngx_öt_t
 
ngx_hâp_•dy_ãrmö©e_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

168 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_uöt_t
 
°©us
);

170 
ngx_hâp_•dy_˛o£_°ªam_h™dÀr
(
ngx_evít_t
 *
ev
);

172 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
);

173 
ngx_hâp_•dy_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
);

174 
ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

175 
ngx_öt_t
 
rc
);

177 
ngx_öt_t
 
ngx_hâp_•dy_adju°_wödows
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

178 
ssize_t
 
dñè
);

180 
ngx_hâp_•dy_poﬁ_˛ónup
(*
d©a
);

182 *
ngx_hâp_•dy_zÆloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

183 
ngx_hâp_•dy_z‰ì
(*
›aque
, *
addªss
);

186 c⁄° 
u_ch¨
 
	gngx_hâp_•dy_di˘
[] = {

368 
ngx_hâp_•dy_ªque°_hódî_t
 
	gngx_hâp_•dy_ªque°_hódîs
[] = {

369 { 0, 6, "mëhod", 
ngx_hâp_•dy_∑r£_mëhod
 },

370 { 0, 6, "scheme", 
ngx_hâp_•dy_∑r£_scheme
 },

371 { 0, 4, "ho°", 
ngx_hâp_•dy_∑r£_ho°
 },

372 { 0, 4, "∑th", 
ngx_hâp_•dy_∑r£_∑th
 },

373 { 0, 7, "vîsi⁄", 
ngx_hâp_•dy_∑r£_vîsi⁄
 },

376 
	#NGX_SPDY_REQUEST_HEADERS
 \

377 ((
ngx_hâp_•dy_ªque°_hódîs
) \

378 / (
ngx_hâp_•dy_ªque°_hódî_t
))

	)

382 
	$ngx_hâp_•dy_öô
(
ngx_evít_t
 *
ªv
)

384 
rc
;

385 
ngx_c⁄√˘i⁄_t
 *
c
;

386 
ngx_poﬁ_˛ónup_t
 *
˛n
;

387 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

388 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

389 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

390 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

392 
c
 = 
ªv
->
d©a
;

393 
hc
 = 
c
->
d©a
;

395 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

398 
c
->
log
->
a˘i⁄
 = "processing SPDY";

400 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_•dy_moduÀ
);

402 i‡(
smcf
->
ªcv_buf„r
 =
NULL
) {

403 
smcf
->
ªcv_buf„r
 = 
	`ngx_∑Œoc
(
ngx_cy˛e
->
poﬁ
, smcf->
ªcv_buf„r_size
);

404 i‡(
smcf
->
ªcv_buf„r
 =
NULL
) {

405 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

410 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_•dy_c⁄√˘i⁄_t
));

411 i‡(
sc
 =
NULL
) {

412 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

416 
sc
->
c⁄√˘i⁄
 = 
c
;

417 
sc
->
hâp_c⁄√˘i⁄
 = 
hc
;

419 
sc
->
£nd_wödow
 = 
NGX_SPDY_CONNECTION_WINDOW
;

420 
sc
->
ªcv_wödow
 = 
NGX_SPDY_CONNECTION_WINDOW
;

422 
sc
->
öô_wödow
 = 
NGX_SPDY_INIT_STREAM_WINDOW
;

424 
sc
->
h™dÀr
 = 
ngx_hâp_•dy_°©e_hód
;

426 i‡(
hc
->
¥oxy_¥Ÿocﬁ
) {

427 
c
->
log
->
a˘i⁄
 = "reading PROXYÖrotocol";

428 
sc
->
h™dÀr
 = 
ngx_hâp_•dy_¥oxy_¥Ÿocﬁ
;

431 
sc
->
z°ªam_ö
.
zÆloc
 = 
ngx_hâp_•dy_zÆloc
;

432 
sc
->
z°ªam_ö
.
z‰ì
 = 
ngx_hâp_•dy_z‰ì
;

433 
sc
->
z°ªam_ö
.
›aque
 = sc;

435 
rc
 = 
	`öÊ©eInô
(&
sc
->
z°ªam_ö
);

436 i‡(
rc
 !
Z_OK
) {

437 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

438 "öÊ©eInô(ËÁûed: %d", 
rc
);

439 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

443 
sc
->
z°ªam_out
.
zÆloc
 = 
ngx_hâp_•dy_zÆloc
;

444 
sc
->
z°ªam_out
.
z‰ì
 = 
ngx_hâp_•dy_z‰ì
;

445 
sc
->
z°ªam_out
.
›aque
 = sc;

447 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_•dy_moduÀ
);

449 
rc
 = 
	`deÊ©eInô2
(&
sc
->
z°ªam_out
, (Ë
sscf
->
hódîs_comp
,

450 
Z_DEFLATED
, 11, 4, 
Z_DEFAULT_STRATEGY
);

452 i‡(
rc
 !
Z_OK
) {

453 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

454 "deÊ©eInô2(ËÁûed: %d", 
rc
);

455 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

459 
rc
 = 
	`deÊ©eSëDi˘i⁄¨y
(&
sc
->
z°ªam_out
, 
ngx_hâp_•dy_di˘
,

460 (
ngx_hâp_•dy_di˘
));

461 i‡(
rc
 !
Z_OK
) {

462 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

463 "deÊ©eSëDi˘i⁄¨y(ËÁûed: %d", 
rc
);

464 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

468 
sc
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
sscf
->
poﬁ_size
, sc->
c⁄√˘i⁄
->
log
);

469 i‡(
sc
->
poﬁ
 =
NULL
) {

470 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

474 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
c
->
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

475 i‡(
˛n
 =
NULL
) {

476 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

480 
˛n
->
h™dÀr
 = 
ngx_hâp_•dy_poﬁ_˛ónup
;

481 
˛n
->
d©a
 = 
sc
;

483 
sc
->
°ªams_ödex
 = 
	`ngx_pˇŒoc
(sc->
poﬁ
,

484 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
)

485 * (
ngx_hâp_•dy_°ªam_t
 *));

486 i‡(
sc
->
°ªams_ödex
 =
NULL
) {

487 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

491 i‡(
	`ngx_hâp_•dy_£nd_£âögs
(
sc
Ë=
NGX_ERROR
) {

492 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

496 i‡(
	`ngx_hâp_•dy_£nd_wödow_upd©e
(
sc
, 0, 
NGX_SPDY_MAX_WINDOW


497 - 
sc
->
ªcv_wödow
)

498 =
NGX_ERROR
)

500 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

504 
sc
->
ªcv_wödow
 = 
NGX_SPDY_MAX_WINDOW
;

506 
	`ngx_queue_öô
(&
sc
->
waôög
);

507 
	`ngx_queue_öô
(&
sc
->
po°ed
);

509 
c
->
d©a
 = 
sc
;

511 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

512 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_wrôe_h™dÀr
;

514 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

515 
	}
}

519 
	$ngx_hâp_•dy_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

521 
u_ch¨
 *
p
, *
íd
;

522 
size_t
 
avaûabÀ
;

523 
ssize_t
 
n
;

524 
ngx_c⁄√˘i⁄_t
 *
c
;

525 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

526 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

528 
c
 = 
ªv
->
d©a
;

529 
sc
 = 
c
->
d©a
;

531 i‡(
ªv
->
timedout
) {

532 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

533 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_REQUEST_TIME_OUT
);

537 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdyÑead handler");

539 
sc
->
blocked
 = 1;

541 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

542 
ngx_hâp_•dy_moduÀ
);

544 
avaûabÀ
 = 
smcf
->
ªcv_buf„r_size
 - 2 * 
NGX_SPDY_STATE_BUFFER_SIZE
;

547 
p
 = 
smcf
->
ªcv_buf„r
;

549 
	`ngx_mem˝y
(
p
, 
sc
->
buf„r
, 
NGX_SPDY_STATE_BUFFER_SIZE
);

550 
íd
 = 
p
 + 
sc
->
buf„r_u£d
;

552 
n
 = 
c
->
	`ªcv
(c, 
íd
, 
avaûabÀ
);

554 i‡(
n
 =
NGX_AGAIN
) {

558 i‡(
n
 =0 && (
sc
->
öcom∂ëe
 || sc->
¥o˚ssög
)) {

559 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

563 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

564 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
,

565 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

569 
íd
 +
n
;

571 
sc
->
buf„r_u£d
 = 0;

572 
sc
->
öcom∂ëe
 = 0;

575 
p
 = 
sc
->
	`h™dÀr
(sc,Ö, 
íd
);

577 i‡(
p
 =
NULL
) {

581 } 
p
 !
íd
);

583 } 
ªv
->
ªady
);

585 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

586 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

590 i‡(
sc
->
œ°_out
 && 
	`ngx_hâp_•dy_£nd_ouçut_queue
(scË=
NGX_ERROR
) {

591 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

595 
sc
->
blocked
 = 0;

597 i‡(
sc
->
¥o˚ssög
) {

598 i‡(
ªv
->
timî_£t
) {

599 
	`ngx_dñ_timî
(
ªv
);

604 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
sc
);

605 
	}
}

609 
	$ngx_hâp_•dy_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

611 
ngx_öt_t
 
rc
;

612 
ngx_queue_t
 *
q
;

613 
ngx_c⁄√˘i⁄_t
 *
c
;

614 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

615 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

617 
c
 = 
wev
->
d©a
;

618 
sc
 = 
c
->
d©a
;

620 i‡(
wev
->
timedout
) {

621 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

623 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

627 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdy write handler");

629 
sc
->
blocked
 = 1;

631 
rc
 = 
	`ngx_hâp_•dy_£nd_ouçut_queue
(
sc
);

633 i‡(
rc
 =
NGX_ERROR
) {

634 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

638 !
	`ngx_queue_em±y
(&
sc
->
po°ed
)) {

639 
q
 = 
	`ngx_queue_hód
(&
sc
->
po°ed
);

641 
	`ngx_queue_ªmove
(
q
);

643 
°ªam
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_•dy_°ªam_t
, 
queue
);

645 
°ªam
->
h™dÀd
 = 0;

647 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

648 "•dyÑu¿°ªam %ui", 
°ªam
->
id
);

650 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

651 
wev
->
	`h™dÀr
(wev);

654 
sc
->
blocked
 = 0;

656 i‡(
rc
 =
NGX_AGAIN
) {

660 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
sc
);

661 
	}
}

664 
ngx_öt_t


665 
	$ngx_hâp_•dy_£nd_ouçut_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

667 
ngx_chaö_t
 *
˛
;

668 
ngx_evít_t
 *
wev
;

669 
ngx_c⁄√˘i⁄_t
 *
c
;

670 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

671 
ngx_hâp_•dy_out_‰ame_t
 *
out
, *
‰ame
, *
‚
;

673 
c
 = 
sc
->
c⁄√˘i⁄
;

675 i‡(
c
->
îr‹
) {

676  
NGX_ERROR
;

679 
wev
 = 
c
->
wrôe
;

681 i‡(!
wev
->
ªady
) {

682  
NGX_OK
;

685 
˛
 = 
NULL
;

686 
out
 = 
NULL
;

688 
‰ame
 = 
sc
->
œ°_out
; føme; fømê
‚
) {

689 
‰ame
->
œ°
->
√xt
 = 
˛
;

690 
˛
 = 
‰ame
->
fú°
;

692 
‚
 = 
‰ame
->
√xt
;

693 
‰ame
->
√xt
 = 
out
;

694 
out
 = 
‰ame
;

696 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

698 
out
, out->
°ªam
 ? out->°ªam->
id
 : 0, out->
¥i‹ôy
,

699 
out
->
blocked
, out->
Àngth
);

702 
˛
 = 
c
->
	`£nd_chaö
(c, cl, 0);

704 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

705 
c
->
îr‹
 = 1;

707 i‡(!
sc
->
blocked
) {

708 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

711  
NGX_ERROR
;

714 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

715 
ngx_hâp_c‹e_moduÀ
);

717 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

718  
NGX_ERROR
;

721 i‡(
˛
) {

722 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

725 i‡(
wev
->
timî_£t
) {

726 
	`ngx_dñ_timî
(
wev
);

730  ; 
out
; ouà
‚
) {

731 
‚
 = 
out
->
√xt
;

733 i‡(
out
->
	`h™dÀr
(
sc
, outË!
NGX_OK
) {

734 
out
->
blocked
 = 1;

735 
out
->
¥i‹ôy
 = 
NGX_SPDY_HIGHEST_PRIORITY
;

739 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

741 
out
, out->
°ªam
 ? out->°ªam->
id
 : 0,

742 
out
->
blocked
, out->
Àngth
);

745 
‰ame
 = 
NULL
;

747  ; 
out
; ouà
‚
) {

748 
‚
 = 
out
->
√xt
;

749 
out
->
√xt
 = 
‰ame
;

750 
‰ame
 = 
out
;

753 
sc
->
œ°_out
 = 
‰ame
;

755  
NGX_OK
;

756 
	}
}

760 
	$ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

762 
ngx_c⁄√˘i⁄_t
 *
c
;

763 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

765 i‡(
sc
->
œ°_out
 || sc->
¥o˚ssög
) {

769 
c
 = 
sc
->
c⁄√˘i⁄
;

771 i‡(
c
->
îr‹
) {

772 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

776 i‡(
c
->
buf„ªd
) {

780 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

781 
ngx_hâp_•dy_moduÀ
);

782 i‡(
sc
->
öcom∂ëe
) {

783 
	`ngx_add_timî
(
c
->
ªad
, 
sscf
->
ªcv_timeout
);

787 i‡(
ngx_ãrmö©e
 || 
ngx_exôög
) {

788 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

792 
	`ngx_de°roy_poﬁ
(
sc
->
poﬁ
);

794 
sc
->
poﬁ
 = 
NULL
;

795 
sc
->
‰ì_˘l_‰ames
 = 
NULL
;

796 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
NULL
;

798 #i‡(
NGX_HTTP_SSL
)

799 i‡(
c
->
s¶
) {

800 
	`ngx_s¶_‰ì_buf„r
(
c
);

804 
c
->
de°royed
 = 1;

805 
c
->
idÀ
 = 1;

806 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

808 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

809 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_•dy_kì∑live_h™dÀr
;

811 i‡(
c
->
wrôe
->
timî_£t
) {

812 
	`ngx_dñ_timî
(
c
->
wrôe
);

815 
	`ngx_add_timî
(
c
->
ªad
, 
sscf
->
kì∑live_timeout
);

816 
	}
}

819 
u_ch¨
 *

820 
	$ngx_hâp_•dy_¥oxy_¥Ÿocﬁ
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

821 
u_ch¨
 *
íd
)

823 
pos
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£
(
sc
->
c⁄√˘i⁄
,Öos, 
íd
);

825 i‡(
pos
 =
NULL
) {

826  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

829 
sc
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "processing SPDY";

831  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

832 
	}
}

835 
u_ch¨
 *

836 
	$ngx_hâp_•dy_°©e_hód
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

837 
u_ch¨
 *
íd
)

839 
uöt32_t
 
hód
, 
Êí
;

840 
ngx_uöt_t
 
ty≥
;

842 i‡(
íd
 - 
pos
 < 
NGX_SPDY_FRAME_HEADER_SIZE
) {

843  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

844 
ngx_hâp_•dy_°©e_hód
);

847 
hód
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

849 
pos
 +(
uöt32_t
);

851 
Êí
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

853 
sc
->
Êags
 = 
	`ngx_•dy_‰ame_Êags
(
Êí
);

854 
sc
->
Àngth
 = 
	`ngx_•dy_‰ame_Àngth
(
Êí
);

856 
pos
 +(
uöt32_t
);

858 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

860 
hód
, 
sc
->
Êags
, sc->
Àngth
);

862 i‡(
	`ngx_•dy_˘l_‰ame_check
(
hód
)) {

863 
ty≥
 = 
	`ngx_•dy_˘l_‰ame_ty≥
(
hód
);

865 
ty≥
) {

867 
NGX_SPDY_SYN_STREAM
:

868  
	`ngx_hâp_•dy_°©e_syn_°ªam
(
sc
, 
pos
, 
íd
);

870 
NGX_SPDY_SYN_REPLY
:

871  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

873 
NGX_SPDY_RST_STREAM
:

874  
	`ngx_hâp_•dy_°©e_r°_°ªam
(
sc
, 
pos
, 
íd
);

876 
NGX_SPDY_SETTINGS
:

877  
	`ngx_hâp_•dy_°©e_£âögs
(
sc
, 
pos
, 
íd
);

879 
NGX_SPDY_PING
:

880  
	`ngx_hâp_•dy_°©e_pög
(
sc
, 
pos
, 
íd
);

882 
NGX_SPDY_GOAWAY
:

883  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

885 
NGX_SPDY_HEADERS
:

886  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

888 
NGX_SPDY_WINDOW_UPDATE
:

889  
	`ngx_hâp_•dy_°©e_wödow_upd©e
(
sc
, 
pos
, 
íd
);

892 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

893 "•dy c⁄åﬁ fømêwôh unknow¿ty≥ %ui", 
ty≥
);

894  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

898 i‡(
	`ngx_•dy_d©a_‰ame_check
(
hód
)) {

899 
sc
->
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(sc, 
hód
);

900  
	`ngx_hâp_•dy_°©e_d©a
(
sc
, 
pos
, 
íd
);

905 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

908  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

909 
	}
}

912 
u_ch¨
 *

913 
	$ngx_hâp_•dy_°©e_syn_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

914 
u_ch¨
 *
íd
)

916 
ngx_uöt_t
 
sid
, 
¥io
;

917 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

918 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

920 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SYN_STREAM_SIZE
) {

921  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

922 
ngx_hâp_•dy_°©e_syn_°ªam
);

925 i‡(
sc
->
Àngth
 <
NGX_SPDY_SYN_STREAM_SIZE
) {

927  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

930 
sc
->
Àngth
 -
NGX_SPDY_SYN_STREAM_SIZE
;

932 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

933 
¥io
 = 
pos
[8] >> 5;

935 
pos
 +
NGX_SPDY_SYN_STREAM_SIZE
;

937 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

938 "•dy SYN_STREAM fømêsid:%uò¥io:%ui", 
sid
, 
¥io
);

940 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

941 
ngx_hâp_•dy_moduÀ
);

943 i‡(
sc
->
¥o˚ssög
 >
sscf
->
c⁄cuºít_°ªams
) {

945 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

946 "•dy c⁄cuºíà°ªam†ex˚eded %ui", 
sc
->
¥o˚ssög
);

948 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
sid
, 
NGX_SPDY_REFUSED_STREAM
,

949 
¥io
)

950 !
NGX_OK
)

952  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

955  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

958 
°ªam
 = 
	`ngx_hâp_•dy_¸óã_°ªam
(
sc
, 
sid
, 
¥io
);

959 i‡(
°ªam
 =
NULL
) {

960  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

963 
°ªam
->
ö_˛o£d
 = (
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) ? 1 : 0;

965 
°ªam
->
ªque°
->
ªque°_Àngth
 = 
NGX_SPDY_FRAME_HEADER_SIZE


966 + 
NGX_SPDY_SYN_STREAM_SIZE


967 + 
sc
->
Àngth
;

969 
sc
->
°ªam
 = stream;

971 
sc
->
œ°_sid
 = 
sid
;

973  
	`ngx_hâp_•dy_°©e_hódîs
(
sc
, 
pos
, 
íd
);

974 
	}
}

977 
u_ch¨
 *

978 
	$ngx_hâp_•dy_°©e_hódîs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

979 
u_ch¨
 *
íd
)

981 
z
;

982 
size_t
 
size
;

983 
ngx_buf_t
 *
buf
;

984 
ngx_öt_t
 
rc
;

985 
ngx_uöt_t
 
com∂ëe
;

986 
ngx_hâp_ªque°_t
 *
r
;

988 
size
 = 
íd
 - 
pos
;

990 i‡(
size
 == 0) {

991  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

992 
ngx_hâp_•dy_°©e_hódîs
);

995 i‡(
size
 >
sc
->
Àngth
) {

996 
size
 = 
sc
->
Àngth
;

997 
com∂ëe
 = 1;

1000 
com∂ëe
 = 0;

1003 
r
 = 
sc
->
°ªam
->
ªque°
;

1005 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1006 "•dyÖro˚s†HEADERS %uz o‡%uz", 
size
, 
sc
->
Àngth
);

1008 
buf
 = 
r
->
hódî_ö
;

1010 
sc
->
z°ªam_ö
.
√xt_ö
 = 
pos
;

1011 
sc
->
z°ªam_ö
.
avaû_ö
 = 
size
;

1012 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf
->
œ°
;

1015 
sc
->
z°ªam_ö
.
avaû_out
 = 
buf
->
íd
 - buf->
œ°
 - 1;

1017 
z
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

1019 i‡(
z
 =
Z_NEED_DICT
) {

1020 
z
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
sc
->
z°ªam_ö
, 
ngx_hâp_•dy_di˘
,

1021 (
ngx_hâp_•dy_di˘
));

1022 i‡(
z
 !
Z_OK
) {

1023 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1024 "•dy inÊ©eSëDi˘i⁄¨y(ËÁûed: %d", 
z
);

1025 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

1026  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1029 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1030 "•dy inÊ©eSëDi˘i⁄¨y(): %d", 
z
);

1032 
z
 = 
sc
->
z°ªam_ö
.
avaû_ö
 ? 
	`öÊ©e
(&sc->z°ªam_ö, 
Z_NO_FLUSH
)

1033 : 
Z_OK
;

1036 i‡(
z
 !
Z_OK
) {

1037 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1038 "•dy inÊ©e(ËÁûed: %d", 
z
);

1039 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

1040  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1043 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1045 
sc
->
z°ªam_ö
.
√xt_ö
, sc->z°ªam_ö.
√xt_out
,

1046 
sc
->
z°ªam_ö
.
avaû_ö
, sc->z°ªam_ö.
avaû_out
,

1047 
z
);

1049 
sc
->
Àngth
 -sc->
z°ªam_ö
.
√xt_ö
 - 
pos
;

1050 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

1052 
buf
->
œ°
 = 
sc
->
z°ªam_ö
.
√xt_out
;

1054 i‡(
r
->
hódîs_ö
.
hódîs
.
∑π
.
ñts
 =
NULL
) {

1056 i‡(
buf
->
œ°
 - buf->
pos
 < 
NGX_SPDY_NV_NUM_SIZE
) {

1058 i‡(
com∂ëe
) {

1059 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1062 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

1063  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1066  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1067 
ngx_hâp_•dy_°©e_hódîs
);

1070 
sc
->
íåõs
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
buf
->
pos
);

1072 
buf
->
pos
 +
NGX_SPDY_NV_NUM_SIZE
;

1074 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1076 
sc
->
íåõs
);

1078 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

1079 (
ngx_èbÀ_ñt_t
))

1080 !
NGX_OK
)

1082 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

1083 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1084  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1087 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_ö
.
cookõs
,Ñ->
poﬁ
, 2,

1088 (
ngx_èbÀ_ñt_t
 *))

1089 !
NGX_OK
)

1091 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

1092 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1093  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1097 
sc
->
íåõs
) {

1099 
rc
 = 
	`ngx_hâp_•dy_∑r£_hódî
(
r
);

1101 
rc
) {

1103 
NGX_DONE
:

1104 
sc
->
íåõs
--;

1106 
NGX_OK
:

1109 
NGX_AGAIN
:

1111 i‡(
sc
->
z°ªam_ö
.
avaû_ö
) {

1113 
rc
 = 
	`ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
r
);

1115 i‡(
rc
 =
NGX_DECLINED
) {

1117 
	`ngx_hâp_föÆize_ªque°
(
r
,

1118 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1119  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1122 i‡(
rc
 !
NGX_OK
) {

1123 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

1124 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1125  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1129 *
buf
->
pos
 = '\0';

1131 
buf
 = 
r
->
hódî_ö
;

1133 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf
->
œ°
;

1136 
sc
->
z°ªam_ö
.
avaû_out
 = 
buf
->
íd
 - buf->
œ°
 - 1;

1138 
z
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

1140 i‡(
z
 !
Z_OK
) {

1141 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1142 "•dy inÊ©e(ËÁûed: %d", 
z
);

1143 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

1144  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1147 
sc
->
Àngth
 -sc->
z°ªam_ö
.
√xt_ö
 - 
pos
;

1148 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

1150 
buf
->
œ°
 = 
sc
->
z°ªam_ö
.
√xt_out
;

1155 i‡(
com∂ëe
) {

1157 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1159 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

1160  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1163  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1164 
ngx_hâp_•dy_°©e_hódîs
);

1166 
NGX_HTTP_PARSE_INVALID_REQUEST
:

1169 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1172 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1174  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1178 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1180 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

1181  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1186 
rc
 = 
	`ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
r
);

1188 i‡(
rc
 !
NGX_OK
) {

1189 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_HEADER
) {

1190 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1192 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

1193  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1196 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_REQUEST
) {

1197 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1200  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1204 i‡(
buf
->
pos
 !buf->
œ°
 || 
sc
->
z°ªam_ö
.
avaû_ö
) {

1205 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1208 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

1209  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1212 i‡(!
com∂ëe
) {

1213  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1214 
ngx_hâp_•dy_°©e_hódîs
);

1218 *
buf
->
pos
 = '\0';

1220 
	`ngx_hâp_•dy_run_ªque°
(
r
);

1222  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1223 
	}
}

1226 
u_ch¨
 *

1227 
	$ngx_hâp_•dy_°©e_hódîs_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1228 
u_ch¨
 *
íd
)

1230 i‡(
sc
->
c⁄√˘i⁄
->
îr‹
) {

1231  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1234  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1235 
	}
}

1238 
u_ch¨
 *

1239 
	$ngx_hâp_•dy_°©e_hódîs_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1240 
u_ch¨
 *
íd
)

1242 
n
;

1243 
size_t
 
size
;

1244 
u_ch¨
 
buf„r
[
NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
];

1246 i‡(
sc
->
Àngth
 == 0) {

1247  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1250 
size
 = 
íd
 - 
pos
;

1252 i‡(
size
 == 0) {

1253  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1254 
ngx_hâp_•dy_°©e_hódîs_skù
);

1257 
sc
->
z°ªam_ö
.
√xt_ö
 = 
pos
;

1258 
sc
->
z°ªam_ö
.
avaû_ö
 = (
size
 < sc->
Àngth
) ? size : sc->length;

1260 
sc
->
z°ªam_ö
.
avaû_ö
) {

1261 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf„r
;

1262 
sc
->
z°ªam_ö
.
avaû_out
 = 
NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
;

1264 
n
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

1266 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1267 "•dy inÊ©e(): %d", 
n
);

1269 i‡(
n
 !
Z_OK
) {

1271  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1275 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

1277 i‡(
size
 < 
sc
->
Àngth
) {

1278 
sc
->
Àngth
 -
size
;

1279  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1280 
ngx_hâp_•dy_°©e_hódîs_skù
);

1283  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1284 
	}
}

1287 
u_ch¨
 *

1288 
	$ngx_hâp_•dy_°©e_wödow_upd©e
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1289 
u_ch¨
 *
íd
)

1291 
size_t
 
dñè
;

1292 
ngx_uöt_t
 
sid
;

1293 
ngx_evít_t
 *
wev
;

1294 
ngx_queue_t
 *
q
;

1295 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1297 i‡(
íd
 - 
pos
 < 
NGX_SPDY_WINDOW_UPDATE_SIZE
) {

1298  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1299 
ngx_hâp_•dy_°©e_wödow_upd©e
);

1302 i‡(
sc
->
Àngth
 !
NGX_SPDY_WINDOW_UPDATE_SIZE
) {

1303 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1305 "wôh inc‹ª˘Üígth %uz", 
sc
->
Àngth
);

1307  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1310 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

1312 
pos
 +
NGX_SPDY_SID_SIZE
;

1314 
dñè
 = 
	`ngx_•dy_‰ame_∑r£_dñè
(
pos
);

1316 
pos
 +
NGX_SPDY_DELTA_SIZE
;

1318 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1319 "•dy WINDOW_UPDATE sid:%uòdñè:%ui", 
sid
, 
dñè
);

1321 i‡(
sid
) {

1322 
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(
sc
, 
sid
);

1324 i‡(
°ªam
 =
NULL
) {

1325 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1327 "f‹ unknow¿°ªam %ui", 
sid
);

1329 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
sid
, 
NGX_SPDY_INVALID_STREAM
,

1330 
NGX_SPDY_LOWEST_PRIORITY
)

1331 =
NGX_ERROR
)

1333  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1336  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1339 i‡(
°ªam
->
£nd_wödow
 > (
ssize_t
Ë(
NGX_SPDY_MAX_WINDOW
 - 
dñè
)) {

1341 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1345 
sid
, 
dñè
, 
°ªam
->
£nd_wödow
);

1347 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

1348 
NGX_SPDY_FLOW_CONTROL_ERROR
)

1349 =
NGX_ERROR
)

1351  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1354  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1357 
°ªam
->
£nd_wödow
 +
dñè
;

1359 i‡(
°ªam
->
exhau°ed
) {

1360 
°ªam
->
exhau°ed
 = 0;

1362 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

1364 i‡(!
wev
->
timî_£t
) {

1365 
wev
->
dñayed
 = 0;

1366 
wev
->
	`h™dÀr
(wev);

1371 
sc
->
£nd_wödow
 +
dñè
;

1373 i‡(
sc
->
£nd_wödow
 > 
NGX_SPDY_MAX_WINDOW
) {

1374 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1378 
dñè
, 
sc
->
£nd_wödow
);

1380  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1383 !
	`ngx_queue_em±y
(&
sc
->
waôög
)) {

1384 
q
 = 
	`ngx_queue_hód
(&
sc
->
waôög
);

1386 
	`ngx_queue_ªmove
(
q
);

1388 
°ªam
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_•dy_°ªam_t
, 
queue
);

1390 
°ªam
->
h™dÀd
 = 0;

1392 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

1394 i‡(!
wev
->
timî_£t
) {

1395 
wev
->
dñayed
 = 0;

1396 
wev
->
	`h™dÀr
(wev);

1398 i‡(
sc
->
£nd_wödow
 == 0) {

1405  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1406 
	}
}

1409 
u_ch¨
 *

1410 
	$ngx_hâp_•dy_°©e_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1411 
u_ch¨
 *
íd
)

1413 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1415 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1418 i‡(
sc
->
Àngth
 > sc->
ªcv_wödow
) {

1419 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1422 
sc
->
Àngth
, sc->
ªcv_wödow
);

1424  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1427 
sc
->
ªcv_wödow
 -sc->
Àngth
;

1429 i‡(
sc
->
ªcv_wödow
 < 
NGX_SPDY_MAX_WINDOW
 / 4) {

1431 i‡(
	`ngx_hâp_•dy_£nd_wödow_upd©e
(
sc
, 0,

1432 
NGX_SPDY_MAX_WINDOW


1433 - 
sc
->
ªcv_wödow
)

1434 =
NGX_ERROR
)

1436  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1439 
sc
->
ªcv_wödow
 = 
NGX_SPDY_MAX_WINDOW
;

1442 
°ªam
 = 
sc
->stream;

1444 i‡(
°ªam
 =
NULL
) {

1445  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1448 i‡(
sc
->
Àngth
 > 
°ªam
->
ªcv_wödow
) {

1449 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1452 
°ªam
->
id
, 
sc
->
Àngth
, såóm->
ªcv_wödow
);

1454 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

1455 
NGX_SPDY_FLOW_CONTROL_ERROR
)

1456 =
NGX_ERROR
)

1458  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1461  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1464 
°ªam
->
ªcv_wödow
 -
sc
->
Àngth
;

1466 i‡(
°ªam
->
ªcv_wödow
 < 
NGX_SPDY_STREAM_WINDOW
 / 4) {

1468 i‡(
	`ngx_hâp_•dy_£nd_wödow_upd©e
(
sc
, 
°ªam
->
id
,

1469 
NGX_SPDY_STREAM_WINDOW


1470 - 
°ªam
->
ªcv_wödow
)

1471 =
NGX_ERROR
)

1473  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1476 
°ªam
->
ªcv_wödow
 = 
NGX_SPDY_STREAM_WINDOW
;

1479 i‡(
°ªam
->
ö_˛o£d
) {

1480 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1482 
°ªam
->
id
);

1484 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

1485 
NGX_SPDY_STREAM_ALREADY_CLOSED
)

1486 =
NGX_ERROR
)

1488  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1491  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1494  
	`ngx_hâp_•dy_°©e_ªad_d©a
(
sc
, 
pos
, 
íd
);

1495 
	}
}

1498 
u_ch¨
 *

1499 
	$ngx_hâp_•dy_°©e_ªad_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1500 
u_ch¨
 *
íd
)

1502 
size_t
 
size
;

1503 
ssize_t
 
n
;

1504 
ngx_buf_t
 *
buf
;

1505 
ngx_öt_t
 
rc
;

1506 
ngx_ãmp_fûe_t
 *
tf
;

1507 
ngx_hâp_ªque°_t
 *
r
;

1508 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1509 
ngx_hâp_ªque°_body_t
 *
rb
;

1510 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1512 
°ªam
 = 
sc
->stream;

1514 i‡(
°ªam
 =
NULL
) {

1515  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1518 i‡(
°ªam
->
skù_d©a
) {

1520 i‡(
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) {

1521 
°ªam
->
ö_˛o£d
 = 1;

1525  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1528 
size
 = 
íd
 - 
pos
;

1530 i‡(
size
 > 
sc
->
Àngth
) {

1531 
size
 = 
sc
->
Àngth
;

1534 
r
 = 
°ªam
->
ªque°
;

1536 i‡(
r
->
ªque°_body
 =
NULL


1537 && 
	`ngx_hâp_•dy_öô_ªque°_body
(
r
Ë!
NGX_OK
)

1539 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

1540  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1543 
rb
 = 
r
->
ªque°_body
;

1544 
tf
 = 
rb
->
ãmp_fûe
;

1545 
buf
 = 
rb
->buf;

1547 i‡(
size
) {

1548 
rb
->
ª°
 +
size
;

1550 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

1551 && 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 
rb
->
ª°
)

1554 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1555 
îr‹
;

1558 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1560 i‡(
˛cf
->
˛õ¡_max_body_size


1561 && 
˛cf
->
˛õ¡_max_body_size
 < 
rb
->
ª°
)

1563 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1566 
rb
->
ª°
);

1568 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1569 
îr‹
;

1573 
sc
->
Àngth
 -
size
;

1575 i‡(
tf
) {

1576 
buf
->
°¨t
 = 
pos
;

1577 
buf
->
pos
 =Öos;

1579 
pos
 +
size
;

1581 
buf
->
íd
 = 
pos
;

1582 
buf
->
œ°
 = 
pos
;

1584 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
tf
, 
rb
->
bufs
);

1588 i‡(
n
 =
NGX_ERROR
) {

1589 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

1590 
îr‹
;

1593 
tf
->
off£t
 +
n
;

1596 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->œ°, 
pos
, 
size
);

1597 
pos
 +
size
;

1600 
r
->
ªque°_Àngth
 +
size
;

1603 i‡(
sc
->
Àngth
) {

1604  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1605 
ngx_hâp_•dy_°©e_ªad_d©a
);

1608 i‡(
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) {

1610 
°ªam
->
ö_˛o£d
 = 1;

1612 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0) {

1613 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
ª°
;

1615 } i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 !
rb
->
ª°
) {

1616 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1619 
rb
->
ª°
, 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1621 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1622 
îr‹
;

1625 i‡(
tf
) {

1626 
	`ngx_memzîo
(
buf
, (
ngx_buf_t
));

1628 
buf
->
ö_fûe
 = 1;

1629 
buf
->
fûe_œ°
 = 
tf
->
fûe
.
off£t
;

1630 
buf
->
fûe
 = &
tf
->file;

1632 
rb
->
buf
 = 
NULL
;

1635 i‡(
rb
->
po°_h™dÀr
) {

1636 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1637 
rb
->
	`po°_h™dÀr
(
r
);

1641  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1643 
îr‹
:

1645 i‡(
rb
->
po°_h™dÀr
) {

1647 i‡(
°ªam
->
skù_d©a
 =
NGX_SPDY_DATA_ERROR
) {

1648 
rc
 = (
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1)

1649 ? 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE


1650 : 
NGX_HTTP_BAD_REQUEST
;

1653 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1656 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1659  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1660 
	}
}

1663 
u_ch¨
 *

1664 
	$ngx_hâp_•dy_°©e_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1665 
u_ch¨
 *
íd
)

1667 
ngx_uöt_t
 
sid
, 
°©us
;

1668 
ngx_evít_t
 *
ev
;

1669 
ngx_c⁄√˘i⁄_t
 *
fc
;

1670 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1672 i‡(
íd
 - 
pos
 < 
NGX_SPDY_RST_STREAM_SIZE
) {

1673  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1674 
ngx_hâp_•dy_°©e_r°_°ªam
);

1677 i‡(
sc
->
Àngth
 !
NGX_SPDY_RST_STREAM_SIZE
) {

1678 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1680 
sc
->
Àngth
);

1682  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1685 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

1687 
pos
 +
NGX_SPDY_SID_SIZE
;

1689 
°©us
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1691 
pos
 +(
uöt32_t
);

1693 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1694 "•dy RST_STREAM sid:%uò°:%ui", 
sid
, 
°©us
);

1696 
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(
sc
, 
sid
);

1697 i‡(
°ªam
 =
NULL
) {

1698 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1700  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1703 
°ªam
->
ö_˛o£d
 = 1;

1704 
°ªam
->
out_˛o£d
 = 1;

1706 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

1707 
fc
->
îr‹
 = 1;

1709 
°©us
) {

1711 
NGX_SPDY_CANCEL
:

1712 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1713 "˛õ¡ c™˚Àd såóm %ui", 
sid
);

1716 
NGX_SPDY_INTERNAL_ERROR
:

1717 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1719 
sid
);

1723 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1725 
sid
, 
°©us
);

1729 
ev
 = 
fc
->
ªad
;

1730 
ev
->
	`h™dÀr
(ev);

1732  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1733 
	}
}

1736 
u_ch¨
 *

1737 
	$ngx_hâp_•dy_°©e_pög
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1738 
u_ch¨
 *
íd
)

1740 
u_ch¨
 *
p
;

1741 
ngx_buf_t
 *
buf
;

1742 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1744 i‡(
íd
 - 
pos
 < 
NGX_SPDY_PING_SIZE
) {

1745  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1746 
ngx_hâp_•dy_°©e_pög
);

1749 i‡(
sc
->
Àngth
 !
NGX_SPDY_PING_SIZE
) {

1751  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1754 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1757 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_PING_SIZE
,

1758 
NGX_SPDY_HIGHEST_PRIORITY
);

1759 i‡(
‰ame
 =
NULL
) {

1760  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1763 
buf
 = 
‰ame
->
fú°
->buf;

1765 
p
 = 
buf
->
pos
;

1767 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_PING
);

1768 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_PING_SIZE
);

1770 
p
 = 
	`ngx_˝ymem
’, 
pos
, 
NGX_SPDY_PING_SIZE
);

1772 
buf
->
œ°
 = 
p
;

1774 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

1776 
pos
 +
NGX_SPDY_PING_SIZE
;

1778  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1779 
	}
}

1782 
u_ch¨
 *

1783 
	$ngx_hâp_•dy_°©e_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1784 
u_ch¨
 *
íd
)

1786 
size_t
 
size
;

1788 
size
 = 
íd
 - 
pos
;

1790 i‡(
size
 < 
sc
->
Àngth
) {

1791 
sc
->
Àngth
 -
size
;

1792  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
íd
,Énd,

1793 
ngx_hâp_•dy_°©e_skù
);

1796  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
 + sc->
Àngth
, 
íd
);

1797 
	}
}

1800 
u_ch¨
 *

1801 
	$ngx_hâp_•dy_°©e_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1802 
u_ch¨
 *
íd
)

1804 
ngx_uöt_t
 
fid
, 
vÆ
;

1806 i‡(
sc
->
íåõs
 == 0) {

1808 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SETTINGS_NUM_SIZE
) {

1809  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1810 
ngx_hâp_•dy_°©e_£âögs
);

1813 
sc
->
íåõs
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1815 
pos
 +
NGX_SPDY_SETTINGS_NUM_SIZE
;

1816 
sc
->
Àngth
 -
NGX_SPDY_SETTINGS_NUM_SIZE
;

1818 i‡(
sc
->
Àngth
 < sc->
íåõs
 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
) {

1820  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1823 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1825 
sc
->
íåõs
);

1828 
sc
->
íåõs
) {

1829 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SETTINGS_PAIR_SIZE
) {

1830  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1831 
ngx_hâp_•dy_°©e_£âögs
);

1834 
sc
->
íåõs
--;

1835 
sc
->
Àngth
 -
NGX_SPDY_SETTINGS_PAIR_SIZE
;

1837 
fid
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1839 
pos
 +
NGX_SPDY_SETTINGS_FID_SIZE
;

1841 
vÆ
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1843 
pos
 +
NGX_SPDY_SETTINGS_VAL_SIZE
;

1845 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1847 
	`ngx_•dy_‰ame_Êags
(
fid
), 
	`ngx_•dy_‰ame_id
(fid), 
vÆ
);

1849 i‡(
	`ngx_•dy_‰ame_Êags
(
fid
Ë=
NGX_SPDY_SETTINGS_FLAG_PERSISTED
) {

1853 
	`ngx_•dy_‰ame_id
(
fid
)) {

1855 
NGX_SPDY_SETTINGS_INIT_WINDOW
:

1857 i‡(
vÆ
 > 
NGX_SPDY_MAX_WINDOW
) {

1858 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1860 "öc‹ª˘ INIT_WINDOW vÆue: %ui", 
vÆ
);

1862  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1865 i‡(
	`ngx_hâp_•dy_adju°_wödows
(
sc
, 
vÆ
 - sc->
öô_wödow
)

1866 !
NGX_OK
)

1868  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1871 
sc
->
öô_wödow
 = 
vÆ
;

1877  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1878 
	}
}

1881 
u_ch¨
 *

1882 
	$ngx_hâp_•dy_°©e_com∂ëe
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1883 
u_ch¨
 *
íd
)

1885 
sc
->
h™dÀr
 = 
ngx_hâp_•dy_°©e_hód
;

1886  
pos
;

1887 
	}
}

1890 
u_ch¨
 *

1891 
	$ngx_hâp_•dy_°©e_ßve
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1892 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_•dy_h™dÀr_±
 
h™dÀr
)

1894 
size_t
 
size
;

1896 
size
 = 
íd
 - 
pos
;

1898 i‡(
size
 > 
NGX_SPDY_STATE_BUFFER_SIZE
) {

1899 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1901 "%uz byã†ªquúed", 
size
);

1902  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1905 
	`ngx_mem˝y
(
sc
->
buf„r
, 
pos
, 
NGX_SPDY_STATE_BUFFER_SIZE
);

1907 
sc
->
buf„r_u£d
 = 
size
;

1908 
sc
->
h™dÀr
 = handler;

1909 
sc
->
öcom∂ëe
 = 1;

1911  
íd
;

1912 
	}
}

1915 
u_ch¨
 *

1916 
	$ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

1918 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1922 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1923  
NULL
;

1924 
	}
}

1927 
u_ch¨
 *

1928 
	$ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

1930 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1934 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1935  
NULL
;

1936 
	}
}

1939 
ngx_öt_t


1940 
	$ngx_hâp_•dy_£nd_wödow_upd©e
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
,

1941 
ngx_uöt_t
 
dñè
)

1943 
u_ch¨
 *
p
;

1944 
ngx_buf_t
 *
buf
;

1945 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1947 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1948 "•dy wrôêWINDOW_UPDATE sid:%uòdñè:%ui", 
sid
, 
dñè
);

1950 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_WINDOW_UPDATE_SIZE
,

1951 
NGX_SPDY_HIGHEST_PRIORITY
);

1952 i‡(
‰ame
 =
NULL
) {

1953  
NGX_ERROR
;

1956 
buf
 = 
‰ame
->
fú°
->buf;

1958 
p
 = 
buf
->
pos
;

1960 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_WINDOW_UPDATE
);

1961 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_WINDOW_UPDATE_SIZE
);

1963 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sid
);

1964 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
dñè
);

1966 
buf
->
œ°
 = 
p
;

1968 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

1970  
NGX_OK
;

1971 
	}
}

1974 
ngx_öt_t


1975 
	$ngx_hâp_•dy_£nd_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
,

1976 
ngx_uöt_t
 
°©us
,Çgx_uöt_à
¥i‹ôy
)

1978 
u_ch¨
 *
p
;

1979 
ngx_buf_t
 *
buf
;

1980 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1982 i‡(
sc
->
c⁄√˘i⁄
->
îr‹
) {

1983  
NGX_OK
;

1986 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1987 "•dy wrôêRST_STREAM sid:%uò°:%ui", 
sid
, 
°©us
);

1989 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_RST_STREAM_SIZE
,

1990 
¥i‹ôy
);

1991 i‡(
‰ame
 =
NULL
) {

1992  
NGX_ERROR
;

1995 
buf
 = 
‰ame
->
fú°
->buf;

1997 
p
 = 
buf
->
pos
;

1999 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_RST_STREAM
);

2000 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_RST_STREAM_SIZE
);

2002 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sid
);

2003 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
°©us
);

2005 
buf
->
œ°
 = 
p
;

2007 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

2009  
NGX_OK
;

2010 
	}
}

2014 
ngx_öt_t


2015 
	$ngx_hâp_•dy_£nd_gﬂway
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

2017 
u_ch¨
 *
p
;

2018 
ngx_buf_t
 *
buf
;

2019 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2021 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2022 "•dy cª©êGOAWAY sid:%ui", 
sc
->
œ°_sid
);

2024 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_GOAWAY_SIZE
,

2025 
NGX_SPDY_HIGHEST_PRIORITY
);

2026 i‡(
‰ame
 =
NULL
) {

2027  
NGX_ERROR
;

2030 
buf
 = 
‰ame
->
fú°
->buf;

2032 
p
 = 
buf
->
pos
;

2034 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_GOAWAY
);

2035 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_GOAWAY_SIZE
);

2037 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sc
->
œ°_sid
);

2039 
buf
->
œ°
 = 
p
;

2041 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

2043  
NGX_OK
;

2044 
	}
}

2048 
ngx_öt_t


2049 
	$ngx_hâp_•dy_£nd_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

2051 
u_ch¨
 *
p
;

2052 
ngx_buf_t
 *
buf
;

2053 
ngx_chaö_t
 *
˛
;

2054 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2055 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2057 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2060 
‰ame
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

2061 i‡(
‰ame
 =
NULL
) {

2062  
NGX_ERROR
;

2065 
˛
 = 
	`ngx_Æloc_chaö_lök
(
sc
->
poﬁ
);

2066 i‡(
˛
 =
NULL
) {

2067  
NGX_ERROR
;

2070 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
sc
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE


2071 + 
NGX_SPDY_SETTINGS_NUM_SIZE


2072 + 2 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
);

2073 i‡(
buf
 =
NULL
) {

2074  
NGX_ERROR
;

2077 
buf
->
œ°_buf
 = 1;

2079 
˛
->
buf
 = buf;

2080 
˛
->
√xt
 = 
NULL
;

2082 
‰ame
->
fú°
 = 
˛
;

2083 
‰ame
->
œ°
 = 
˛
;

2084 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_£âögs_‰ame_h™dÀr
;

2085 
‰ame
->
°ªam
 = 
NULL
;

2086 #i‡(
NGX_DEBUG
)

2087 
‰ame
->
Àngth
 = 
NGX_SPDY_SETTINGS_NUM_SIZE


2088 + 2 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
;

2090 
‰ame
->
¥i‹ôy
 = 
NGX_SPDY_HIGHEST_PRIORITY
;

2091 
‰ame
->
blocked
 = 0;

2093 
p
 = 
buf
->
pos
;

2095 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_SETTINGS
);

2096 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
NGX_SPDY_FLAG_CLEAR_SETTINGS
,

2097 
NGX_SPDY_SETTINGS_NUM_SIZE


2098 + 2 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
);

2100 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(p, 2);

2102 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2103 
ngx_hâp_•dy_moduÀ
);

2105 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_id
’, 0, 
NGX_SPDY_SETTINGS_MAX_STREAMS
);

2106 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
sscf
->
c⁄cuºít_°ªams
);

2108 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_id
’, 0, 
NGX_SPDY_SETTINGS_INIT_WINDOW
);

2109 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
NGX_SPDY_STREAM_WINDOW
);

2111 
buf
->
œ°
 = 
p
;

2113 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

2115  
NGX_OK
;

2116 
	}
}

2119 
ngx_öt_t


2120 
	$ngx_hâp_•dy_£âögs_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

2121 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

2123 
ngx_buf_t
 *
buf
;

2125 
buf
 = 
‰ame
->
fú°
->buf;

2127 i‡(
buf
->
pos
 !buf->
œ°
) {

2128  
NGX_AGAIN
;

2131 
	`ngx_‰ì_chaö
(
sc
->
poﬁ
, 
‰ame
->
fú°
);

2133  
NGX_OK
;

2134 
	}
}

2137 
ngx_hâp_•dy_out_‰ame_t
 *

2138 
	$ngx_hâp_•dy_gë_˘l_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
size_t
 
Àngth
,

2139 
ngx_uöt_t
 
¥i‹ôy
)

2141 
ngx_chaö_t
 *
˛
;

2142 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2144 
‰ame
 = 
sc
->
‰ì_˘l_‰ames
;

2146 i‡(
‰ame
) {

2147 
sc
->
‰ì_˘l_‰ames
 = 
‰ame
->
√xt
;

2149 
˛
 = 
‰ame
->
fú°
;

2150 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

2153 
‰ame
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

2154 i‡(
‰ame
 =
NULL
) {

2155  
NULL
;

2158 
˛
 = 
	`ngx_Æloc_chaö_lök
(
sc
->
poﬁ
);

2159 i‡(
˛
 =
NULL
) {

2160  
NULL
;

2163 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
sc
->
poﬁ
,

2164 
NGX_SPDY_CTL_FRAME_BUFFER_SIZE
);

2165 i‡(
˛
->
buf
 =
NULL
) {

2166  
NULL
;

2169 
˛
->
buf
->
œ°_buf
 = 1;

2171 
‰ame
->
fú°
 = 
˛
;

2172 
‰ame
->
œ°
 = 
˛
;

2173 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_˘l_‰ame_h™dÀr
;

2174 
‰ame
->
°ªam
 = 
NULL
;

2177 #i‡(
NGX_DEBUG
)

2178 i‡(
Àngth
 > 
NGX_SPDY_CTL_FRAME_BUFFER_SIZE
 - 
NGX_SPDY_FRAME_HEADER_SIZE
) {

2179 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
poﬁ
->
log
, 0,

2180 "ªque°ed c⁄åﬁ fømêi†toÿbig: %uz", 
Àngth
);

2181  
NULL
;

2184 
‰ame
->
Àngth
 =Üength;

2187 
‰ame
->
¥i‹ôy
 =Öriority;

2188 
‰ame
->
blocked
 = 0;

2190  
‰ame
;

2191 
	}
}

2194 
ngx_öt_t


2195 
	$ngx_hâp_•dy_˘l_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

2196 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

2198 
ngx_buf_t
 *
buf
;

2200 
buf
 = 
‰ame
->
fú°
->buf;

2202 i‡(
buf
->
pos
 !buf->
œ°
) {

2203  
NGX_AGAIN
;

2206 
‰ame
->
√xt
 = 
sc
->
‰ì_˘l_‰ames
;

2207 
sc
->
‰ì_˘l_‰ames
 = 
‰ame
;

2209  
NGX_OK
;

2210 
	}
}

2213 
ngx_hâp_•dy_°ªam_t
 *

2214 
	$ngx_hâp_•dy_¸óã_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
id
,

2215 
ngx_uöt_t
 
¥i‹ôy
)

2217 
ngx_log_t
 *
log
;

2218 
ngx_uöt_t
 
ödex
;

2219 
ngx_evít_t
 *
ªv
, *
wev
;

2220 
ngx_c⁄√˘i⁄_t
 *
fc
;

2221 
ngx_hâp_log_˘x_t
 *
˘x
;

2222 
ngx_hâp_ªque°_t
 *
r
;

2223 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2224 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2225 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2227 
fc
 = 
sc
->
‰ì_Áke_c⁄√˘i⁄s
;

2229 i‡(
fc
) {

2230 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
->
d©a
;

2232 
ªv
 = 
fc
->
ªad
;

2233 
wev
 = 
fc
->
wrôe
;

2234 
log
 = 
fc
->log;

2235 
˘x
 = 
log
->
d©a
;

2238 
fc
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_c⁄√˘i⁄_t
));

2239 i‡(
fc
 =
NULL
) {

2240  
NULL
;

2243 
ªv
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_evít_t
));

2244 i‡(
ªv
 =
NULL
) {

2245  
NULL
;

2248 
wev
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_evít_t
));

2249 i‡(
wev
 =
NULL
) {

2250  
NULL
;

2253 
log
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_log_t
));

2254 i‡(
log
 =
NULL
) {

2255  
NULL
;

2258 
˘x
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

2259 i‡(
˘x
 =
NULL
) {

2260  
NULL
;

2263 
˘x
->
c⁄√˘i⁄
 = 
fc
;

2264 
˘x
->
ªque°
 = 
NULL
;

2267 
	`ngx_mem˝y
(
log
, 
sc
->
c⁄√˘i⁄
->log, (
ngx_log_t
));

2269 
log
->
d©a
 = 
˘x
;

2271 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

2273 
ªv
->
d©a
 = 
fc
;

2274 
ªv
->
ªady
 = 1;

2275 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_˛o£_°ªam_h™dÀr
;

2276 
ªv
->
log
 =Üog;

2278 
	`ngx_mem˝y
(
wev
, 
ªv
, (
ngx_evít_t
));

2280 
wev
->
wrôe
 = 1;

2282 
	`ngx_mem˝y
(
fc
, 
sc
->
c⁄√˘i⁄
, (
ngx_c⁄√˘i⁄_t
));

2284 
fc
->
d©a
 = 
sc
->
hâp_c⁄√˘i⁄
;

2285 
fc
->
ªad
 = 
ªv
;

2286 
fc
->
wrôe
 = 
wev
;

2287 
fc
->
£¡
 = 0;

2288 
fc
->
log
 =Üog;

2289 
fc
->
buf„ªd
 = 0;

2290 
fc
->
¢dlow©
 = 1;

2291 
fc
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

2293 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
fc
);

2294 i‡(
r
 =
NULL
) {

2295  
NULL
;

2298 
r
->
vÆid_loˇti⁄
 = 1;

2300 
fc
->
d©a
 = 
r
;

2301 
sc
->
c⁄√˘i⁄
->
ªque°s
++;

2303 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2305 
r
->
hódî_ö
 = 
	`ngx_¸óã_ãmp_buf
‘->
poﬁ
,

2306 
cscf
->
˛õ¡_hódî_buf„r_size
);

2307 i‡(
r
->
hódî_ö
 =
NULL
) {

2308 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2309  
NULL
;

2312 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

2314 
°ªam
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_•dy_°ªam_t
));

2315 i‡(
°ªam
 =
NULL
) {

2316 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2317  
NULL
;

2320 
r
->
•dy_°ªam
 = 
°ªam
;

2322 
°ªam
->
id
 = id;

2323 
°ªam
->
ªque°
 = 
r
;

2324 
°ªam
->
c⁄√˘i⁄
 = 
sc
;

2326 
°ªam
->
£nd_wödow
 = 
sc
->
öô_wödow
;

2327 
°ªam
->
ªcv_wödow
 = 
NGX_SPDY_STREAM_WINDOW
;

2329 
°ªam
->
¥i‹ôy
 =Öriority;

2331 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_•dy_moduÀ
);

2333 
ödex
 = 
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
id
);

2335 
°ªam
->
ödex
 = 
sc
->
°ªams_ödex
[index];

2336 
sc
->
°ªams_ödex
[
ödex
] = 
°ªam
;

2338 
sc
->
¥o˚ssög
++;

2340  
°ªam
;

2341 
	}
}

2344 
ngx_hâp_•dy_°ªam_t
 *

2345 
	$ngx_hâp_•dy_gë_°ªam_by_id
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

2346 
ngx_uöt_t
 
sid
)

2348 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2349 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2351 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2352 
ngx_hâp_•dy_moduÀ
);

2354 
°ªam
 = 
sc
->
°ªams_ödex
[
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
sid
)];

2356 
°ªam
) {

2357 i‡(
°ªam
->
id
 =
sid
) {

2358  
°ªam
;

2361 
°ªam
 = såóm->
ödex
;

2364  
NULL
;

2365 
	}
}

2368 
ngx_öt_t


2369 
	$ngx_hâp_•dy_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
)

2371 
u_ch¨
 *
p
, *
íd
, 
ch
;

2372 
ngx_uöt_t
 
hash
;

2373 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2376 
sw_«me_Àn
 = 0,

2377 
sw_«me
,

2378 
sw_vÆue_Àn
,

2379 
sw_vÆue


2380 } 
°©e
;

2382 
°©e
 = 
r
->state;

2384 
p
 = 
r
->
hódî_ö
->
pos
;

2385 
íd
 = 
r
->
hódî_ö
->
œ°
;

2387 
°©e
) {

2389 
sw_«me_Àn
:

2391 i‡(
íd
 - 
p
 < 
NGX_SPDY_NV_NLEN_SIZE
) {

2392  
NGX_AGAIN
;

2395 
r
->
lowˇ£_ödex
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
);

2397 i‡(
r
->
lowˇ£_ödex
 == 0) {

2398  
NGX_HTTP_PARSE_INVALID_HEADER
;

2402 *
p
 = '\0';

2404 
p
 +
NGX_SPDY_NV_NLEN_SIZE
;

2406 
r
->
övÆid_hódî
 = 0;

2408 
°©e
 = 
sw_«me
;

2412 
sw_«me
:

2414 i‡((
ngx_uöt_t
Ë(
íd
 - 
p
Ë< 
r
->
lowˇ£_ödex
) {

2418 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2420 
r
->
hódî_«me_°¨t
 = 
p
;

2421 
r
->
hódî_«me_íd
 = 
p
 +Ñ->
lowˇ£_ödex
;

2423 i‡(
p
[0] == ':') {

2424 
p
++;

2427 
hash
 = 0;

2429  ; 
p
 !
r
->
hódî_«me_íd
;Ö++) {

2431 
ch
 = *
p
;

2433 
hash
 = 
	`ngx_hash
(hash, 
ch
);

2435 i‡((
ch
 >= 'a' && ch <= 'z')

2436 || (
ch
 == '-')

2437 || (
ch
 >= '0' && ch <= '9')

2438 || (
ch
 ='_' && 
cscf
->
undîsc‹es_ö_hódîs
))

2443 
ch
) {

2445 
LF
:

2446 
CR
:

2448  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2451 i‡(
ch
 >= 'A' && ch <= 'Z') {

2452  
NGX_HTTP_PARSE_INVALID_HEADER
;

2455 
r
->
övÆid_hódî
 = 1;

2458 
r
->
hódî_hash
 = 
hash
;

2460 
°©e
 = 
sw_vÆue_Àn
;

2464 
sw_vÆue_Àn
:

2466 i‡(
íd
 - 
p
 < 
NGX_SPDY_NV_VLEN_SIZE
) {

2470 
r
->
lowˇ£_ödex
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
);

2473 *
p
 = '\0';

2475 
p
 +
NGX_SPDY_NV_VLEN_SIZE
;

2477 
°©e
 = 
sw_vÆue
;

2481 
sw_vÆue
:

2483 i‡((
ngx_uöt_t
Ë(
íd
 - 
p
Ë< 
r
->
lowˇ£_ödex
) {

2487 
r
->
hódî_°¨t
 = 
p
;

2489 
r
->
lowˇ£_ödex
--) {

2490 
ch
 = *
p
;

2492 i‡(
ch
 == '\0') {

2494 i‡(
p
 =
r
->
hódî_°¨t
) {

2495  
NGX_ERROR
;

2498 
r
->
hódî_íd
 = 
p
;

2499 
r
->
hódî_ö
->
pos
 = 
p
 + 1;

2501  
NGX_OK
;

2504 i‡(
ch
 =
CR
 || ch =
LF
) {

2505  
NGX_HTTP_PARSE_INVALID_HEADER
;

2508 
p
++;

2511 
r
->
hódî_íd
 = 
p
;

2512 
r
->
hódî_ö
->
pos
 = 
p
;

2514 
r
->
°©e
 = 0;

2516  
NGX_DONE
;

2519 
r
->
hódî_ö
->
pos
 = 
p
;

2520 
r
->
°©e
 = state;

2522  
NGX_AGAIN
;

2523 
	}
}

2526 
ngx_öt_t


2527 
	$ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
)

2529 
u_ch¨
 *
ﬁd
, *
√w
;

2530 
size_t
 
ª°
;

2531 
ngx_buf_t
 *
buf
;

2532 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2533 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2535 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2538 
°ªam
 = 
r
->
•dy_°ªam
;

2540 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2542 i‡(
°ªam
->
hódî_buf„rs


2543 =(
ngx_uöt_t
Ë
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
)

2545  
NGX_DECLINED
;

2548 
ª°
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

2550 i‡(
ª°
 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
) {

2551  
NGX_DECLINED
;

2554 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

2555 i‡(
buf
 =
NULL
) {

2556  
NGX_ERROR
;

2559 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2561 
buf
->
pos
, buf->
íd
 - buf->
œ°
);

2563 
ﬁd
 = 
r
->
hódî_ö
->
pos
;

2564 
√w
 = 
buf
->
pos
;

2566 i‡(
ª°
) {

2567 
buf
->
œ°
 = 
	`ngx_˝ymem
(
√w
, 
ﬁd
, 
ª°
);

2570 
r
->
hódî_ö
 = 
buf
;

2572 
°ªam
->
hódî_buf„rs
++;

2574  
NGX_OK
;

2575 
	}
}

2578 
ngx_öt_t


2579 
	$ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

2581 
ngx_uöt_t
 
i
;

2582 
ngx_èbÀ_ñt_t
 *
h
;

2583 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2584 
ngx_hâp_•dy_ªque°_hódî_t
 *
sh
;

2586 i‡(
r
->
övÆid_hódî
) {

2587 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2589 i‡(
cscf
->
ign‹e_övÆid_hódîs
) {

2590 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2592 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

2593 
r
->
hódî_«me_°¨t
);

2594  
NGX_OK
;

2599 i‡(
r
->
hódî_«me_°¨t
[0] == ':') {

2600 
r
->
hódî_«me_°¨t
++;

2602 
i
 = 0; i < 
NGX_SPDY_REQUEST_HEADERS
; i++) {

2603 
sh
 = &
ngx_hâp_•dy_ªque°_hódîs
[
i
];

2605 i‡(
sh
->
hash
 !
r
->
hódî_hash


2606 || 
sh
->
Àn
 !
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t


2607 || 
	`ngx_°∫cmp
(
sh
->
hódî
, 
r
->
hódî_«me_°¨t
, sh->
Àn
) != 0)

2612  
sh
->
	`h™dÀr
(
r
);

2615  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2618 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

2619 i‡(
h
 =
NULL
) {

2620 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
,

2621 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2622  
NGX_ERROR
;

2625 
h
->
hash
 = 
r
->
hódî_hash
;

2627 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

2628 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

2630 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

2631 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

2633 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

2635  
NGX_OK
;

2636 
	}
}

2640 
	$ngx_hâp_•dy_ªque°_hódîs_öô
()

2642 
ngx_uöt_t
 
i
;

2643 
ngx_hâp_•dy_ªque°_hódî_t
 *
h
;

2645 
i
 = 0; i < 
NGX_SPDY_REQUEST_HEADERS
; i++) {

2646 
h
 = &
ngx_hâp_•dy_ªque°_hódîs
[
i
];

2647 
h
->
hash
 = 
	`ngx_hash_key
(h->
hódî
, h->
Àn
);

2649 
	}
}

2652 
ngx_öt_t


2653 
	$ngx_hâp_•dy_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
)

2655 
size_t
 
k
, 
Àn
;

2656 
ngx_uöt_t
 
n
;

2657 c⁄° 
u_ch¨
 *
p
, *
m
;

2665 
u_ch¨
 
Àn
;

2666 c⁄° 
u_ch¨
 
mëhod
[11];

2667 
uöt32_t
 
vÆue
;

2668 } 
ã°s
[] = {

2669 { 3, "GET", 
NGX_HTTP_GET
 },

2670 { 4, "POST", 
NGX_HTTP_POST
 },

2671 { 4, "HEAD", 
NGX_HTTP_HEAD
 },

2672 { 7, "OPTIONS", 
NGX_HTTP_OPTIONS
 },

2673 { 8, "PROPFIND", 
NGX_HTTP_PROPFIND
 },

2674 { 3, "PUT", 
NGX_HTTP_PUT
 },

2675 { 5, "MKCOL", 
NGX_HTTP_MKCOL
 },

2676 { 6, "DELETE", 
NGX_HTTP_DELETE
 },

2677 { 4, "COPY", 
NGX_HTTP_COPY
 },

2678 { 4, "MOVE", 
NGX_HTTP_MOVE
 },

2679 { 9, "PROPPATCH", 
NGX_HTTP_PROPPATCH
 },

2680 { 4, "LOCK", 
NGX_HTTP_LOCK
 },

2681 { 6, "UNLOCK", 
NGX_HTTP_UNLOCK
 },

2682 { 5, "PATCH", 
NGX_HTTP_PATCH
 },

2683 { 5, "TRACE", 
NGX_HTTP_TRACE
 }

2684 }, *
ã°
;

2686 i‡(
r
->
mëhod_«me
.
Àn
) {

2687  
NGX_HTTP_PARSE_INVALID_HEADER
;

2690 
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

2692 
r
->
mëhod_«me
.
Àn
 =Üen;

2693 
r
->
mëhod_«me
.
d©a
 =Ñ->
hódî_°¨t
;

2695 
ã°
 = 
ã°s
;

2696 
n
 = (
ã°s
) / (tests[0]);

2699 i‡(
Àn
 =
ã°
->len) {

2700 
p
 = 
r
->
mëhod_«me
.
d©a
;

2701 
m
 = 
ã°
->
mëhod
;

2702 
k
 = 
Àn
;

2705 i‡(*
p
++ !*
m
++) {

2706 
√xt
;

2708 } --
k
);

2710 
r
->
mëhod
 = 
ã°
->
vÆue
;

2711  
NGX_OK
;

2714 
√xt
:

2715 
ã°
++;

2717 } --
n
);

2719 
p
 = 
r
->
mëhod_«me
.
d©a
;

2722 i‡((*
p
 < 'A' || *p > 'Z') && *p != '_') {

2723 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2725  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2728 
p
++;

2730 } --
Àn
);

2732  
NGX_OK
;

2733 
	}
}

2736 
ngx_öt_t


2737 
	$ngx_hâp_•dy_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
)

2739 i‡(
r
->
schema_°¨t
) {

2740  
NGX_HTTP_PARSE_INVALID_HEADER
;

2743 
r
->
schema_°¨t
 =Ñ->
hódî_°¨t
;

2744 
r
->
schema_íd
 =Ñ->
hódî_íd
;

2746  
NGX_OK
;

2747 
	}
}

2750 
ngx_öt_t


2751 
	$ngx_hâp_•dy_∑r£_ho°
(
ngx_hâp_ªque°_t
 *
r
)

2753 
ngx_èbÀ_ñt_t
 *
h
;

2755 i‡(
r
->
hódîs_ö
.
ho°
) {

2756  
NGX_HTTP_PARSE_INVALID_HEADER
;

2759 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

2760 i‡(
h
 =
NULL
) {

2761 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
,

2762 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2763  
NGX_ERROR
;

2766 
r
->
hódîs_ö
.
ho°
 = 
h
;

2768 
h
->
hash
 = 
r
->
hódî_hash
;

2770 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

2771 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

2773 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

2774 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

2776 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

2778  
NGX_OK
;

2779 
	}
}

2782 
ngx_öt_t


2783 
	$ngx_hâp_•dy_∑r£_∑th
(
ngx_hâp_ªque°_t
 *
r
)

2785 i‡(
r
->
u≈¨£d_uri
.
Àn
) {

2786  
NGX_HTTP_PARSE_INVALID_HEADER
;

2789 
r
->
uri_°¨t
 =Ñ->
hódî_°¨t
;

2790 
r
->
uri_íd
 =Ñ->
hódî_íd
;

2792 i‡(
	`ngx_hâp_∑r£_uri
(
r
Ë!
NGX_OK
) {

2793  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2796 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

2797  
NGX_ERROR
;

2800  
NGX_OK
;

2801 
	}
}

2804 
ngx_öt_t


2805 
	$ngx_hâp_•dy_∑r£_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
)

2807 
u_ch¨
 *
p
, 
ch
;

2809 i‡(
r
->
hâp_¥Ÿocﬁ
.
Àn
) {

2810  
NGX_HTTP_PARSE_INVALID_HEADER
;

2813 
p
 = 
r
->
hódî_°¨t
;

2815 i‡(
r
->
hódî_íd
 - 
p
 < 8 || !(
	`ngx_°r5cmp
(p, 'H', 'T', 'T', 'P', '/'))) {

2816  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2819 
ch
 = *(
p
 + 5);

2821 i‡(
ch
 < '1' || ch > '9') {

2822  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2825 
r
->
hâp_maj‹
 = 
ch
 - '0';

2827 
p
 +6;Ö !
r
->
hódî_íd
 - 2;Ö++) {

2829 
ch
 = *
p
;

2831 i‡(
ch
 == '.') {

2835 i‡(
ch
 < '0' || ch > '9') {

2836  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2839 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

2842 i‡(*
p
 != '.') {

2843  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2846 
ch
 = *(
p
 + 1);

2848 i‡(
ch
 < '0' || ch > '9') {

2849  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2852 
r
->
hâp_mö‹
 = 
ch
 - '0';

2854 
p
 +2;Ö !
r
->
hódî_íd
;Ö++) {

2856 
ch
 = *
p
;

2858 i‡(
ch
 < '0' || ch > '9') {

2859  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2862 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

2865 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
hódî_íd
 -Ñ->
hódî_°¨t
;

2866 
r
->
hâp_¥Ÿocﬁ
.
d©a
 =Ñ->
hódî_°¨t
;

2867 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

2869  
NGX_OK
;

2870 
	}
}

2873 
ngx_öt_t


2874 
	$ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
)

2876 
u_ch¨
 *
p
;

2878 i‡(
r
->
mëhod_«me
.
Àn
 == 0

2879 || 
r
->
u≈¨£d_uri
.
Àn
 == 0

2880 || 
r
->
hâp_¥Ÿocﬁ
.
Àn
 == 0)

2882 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

2883  
NGX_ERROR
;

2886 
r
->
ªque°_löe
.
Àn
 =Ñ->
mëhod_«me
.len + 1

2887 + 
r
->
u≈¨£d_uri
.
Àn
 + 1

2888 + 
r
->
hâp_¥Ÿocﬁ
.
Àn
;

2890 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
ªque°_löe
.
Àn
 + 1);

2891 i‡(
p
 =
NULL
) {

2892 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2893  
NGX_ERROR
;

2896 
r
->
ªque°_löe
.
d©a
 = 
p
;

2898 
p
 = 
	`ngx_˝ymem
’, 
r
->
mëhod_«me
.
d©a
,Ñ->mëhod_«me.
Àn
);

2900 *
p
++ = ' ';

2902 
p
 = 
	`ngx_˝ymem
’, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

2904 *
p
++ = ' ';

2906 
	`ngx_mem˝y
(
p
, 
r
->
hâp_¥Ÿocﬁ
.
d©a
,Ñ->hâp_¥Ÿocﬁ.
Àn
 + 1);

2909 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

2911  
NGX_OK
;

2912 
	}
}

2916 
	$ngx_hâp_•dy_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2918 
ngx_uöt_t
 
i
;

2919 
ngx_li°_∑π_t
 *
∑π
;

2920 
ngx_èbÀ_ñt_t
 *
h
;

2921 
ngx_hâp_hódî_t
 *
hh
;

2922 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2924 i‡(
	`ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
r
Ë!
NGX_OK
) {

2928 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2929 "•dy hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

2931 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2933 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

2934 
h
 = 
∑π
->
ñts
;

2936 
i
 = 0 ;; i++) {

2938 i‡(
i
 >
∑π
->
√…s
) {

2939 i‡(
∑π
->
√xt
 =
NULL
) {

2943 
∑π
 =Ö¨t->
√xt
;

2944 
h
 = 
∑π
->
ñts
;

2945 
i
 = 0;

2948 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2949 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2951 i‡(
hh
 && hh->
	`h™dÀr
(
r
, &
h
[
i
], hh->
off£t
Ë!
NGX_OK
) {

2955 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2956 "hâ∞hódî: \"%V: %V\"", &
h
[
i
].
key
, &h[i].
vÆue
);

2959 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

2961 i‡(
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
Ë!
NGX_OK
) {

2965 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0 &&Ñ->
•dy_°ªam
->
ö_˛o£d
) {

2966 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2969 
r
->
•dy_°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

2971 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

2975 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

2976 
	}
}

2979 
ngx_öt_t


2980 
	$ngx_hâp_•dy_öô_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

2982 
ngx_buf_t
 *
buf
;

2983 
ngx_ãmp_fûe_t
 *
tf
;

2984 
ngx_hâp_ªque°_body_t
 *
rb
;

2985 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2987 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

2988 i‡(
rb
 =
NULL
) {

2989  
NGX_ERROR
;

2992 
r
->
ªque°_body
 = 
rb
;

2994 i‡(
r
->
•dy_°ªam
->
ö_˛o£d
) {

2995  
NGX_OK
;

2998 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

3000 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3002 i‡(
r
->
ªque°_body_ö_fûe_⁄ly


3003 || 
rb
->
ª°
 > (
off_t
Ë
˛cf
->
˛õ¡_body_buf„r_size


3004 || 
rb
->
ª°
 < 0)

3006 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

3007 i‡(
tf
 =
NULL
) {

3008  
NGX_ERROR
;

3011 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

3012 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3013 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

3014 
tf
->
poﬁ
 = 
r
->pool;

3015 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

3016 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

3017 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

3018 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

3020 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

3021 
tf
->
ac˚ss
 = 0660;

3024 
rb
->
ãmp_fûe
 = 
tf
;

3026 i‡(
r
->
•dy_°ªam
->
ö_˛o£d


3027 && 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

3028 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

3029 !
NGX_OK
)

3031  
NGX_ERROR
;

3034 
buf
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3035 i‡(
buf
 =
NULL
) {

3036  
NGX_ERROR
;

3041 i‡(
rb
->
ª°
 == 0) {

3042  
NGX_OK
;

3045 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, (
size_t
Ë
rb
->
ª°
);

3046 i‡(
buf
 =
NULL
) {

3047  
NGX_ERROR
;

3051 
rb
->
buf
 = buf;

3053 
rb
->
bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

3054 i‡(
rb
->
bufs
 =
NULL
) {

3055  
NGX_ERROR
;

3058 
rb
->
bufs
->
buf
 = buf;

3059 
rb
->
bufs
->
√xt
 = 
NULL
;

3061 
rb
->
ª°
 = 0;

3063  
NGX_OK
;

3064 
	}
}

3067 
ngx_öt_t


3068 
	$ngx_hâp_•dy_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

3069 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

3071 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

3073 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3076 
°ªam
 = 
r
->
•dy_°ªam
;

3078 
°ªam
->
skù_d©a
) {

3080 
NGX_SPDY_DATA_DISCARD
:

3081 
	`po°_h™dÀr
(
r
);

3082  
NGX_OK
;

3084 
NGX_SPDY_DATA_ERROR
:

3085 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

3086  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

3088  
NGX_HTTP_BAD_REQUEST
;

3091 
NGX_SPDY_DATA_INTERNAL_ERROR
:

3092  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3095 i‡(!
r
->
ªque°_body
 && 
	`ngx_hâp_•dy_öô_ªque°_body
‘Ë!
NGX_OK
) {

3096 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

3097  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3100 i‡(
°ªam
->
ö_˛o£d
) {

3101 
	`po°_h™dÀr
(
r
);

3102  
NGX_OK
;

3105 
r
->
ªque°_body
->
po°_h™dÀr
 =Öost_handler;

3107 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

3108 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

3110  
NGX_AGAIN
;

3111 
	}
}

3114 
ngx_öt_t


3115 
	$ngx_hâp_•dy_ãrmö©e_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

3116 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_uöt_t
 
°©us
)

3118 
ngx_evít_t
 *
ªv
;

3119 
ngx_c⁄√˘i⁄_t
 *
fc
;

3121 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
°ªam
->
id
, 
°©us
,

3122 
NGX_SPDY_HIGHEST_PRIORITY
)

3123 =
NGX_ERROR
)

3125  
NGX_ERROR
;

3128 
°ªam
->
out_˛o£d
 = 1;

3130 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

3131 
fc
->
îr‹
 = 1;

3133 
ªv
 = 
fc
->
ªad
;

3134 
ªv
->
	`h™dÀr
(rev);

3136  
NGX_OK
;

3137 
	}
}

3141 
	$ngx_hâp_•dy_˛o£_°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

3143 
ngx_c⁄√˘i⁄_t
 *
fc
;

3144 
ngx_hâp_ªque°_t
 *
r
;

3146 
fc
 = 
ev
->
d©a
;

3147 
r
 = 
fc
->
d©a
;

3149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3152 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
, 0);

3153 
	}
}

3157 
	$ngx_hâp_•dy_˛o£_°ªam
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
)

3159 
ngx_evít_t
 *
ev
;

3160 
ngx_c⁄√˘i⁄_t
 *
fc
;

3161 
ngx_hâp_•dy_°ªam_t
 **
ödex
, *
s
;

3162 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3163 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

3165 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

3167 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3169 
°ªam
->
id
, såóm->
queued
, 
sc
->
¥o˚ssög
);

3171 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

3173 i‡(
°ªam
->
queued
) {

3174 
fc
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_˛o£_°ªam_h™dÀr
;

3178 i‡(!
°ªam
->
out_˛o£d
) {

3179 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
°ªam
->
id
,

3180 
NGX_SPDY_INTERNAL_ERROR
,

3181 
°ªam
->
¥i‹ôy
)

3182 !
NGX_OK
)

3184 
sc
->
c⁄√˘i⁄
->
îr‹
 = 1;

3188 i‡(
sc
->
°ªam
 == stream) {

3189 
sc
->
°ªam
 = 
NULL
;

3192 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3193 
ngx_hâp_•dy_moduÀ
);

3195 
ödex
 = 
sc
->
°ªams_ödex
 + 
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
°ªam
->
id
);

3198 
s
 = *
ödex
;

3200 i‡(
s
 =
NULL
) {

3204 i‡(
s
 =
°ªam
) {

3205 *
ödex
 = 
s
->index;

3209 
ödex
 = &
s
->index;

3212 
	`ngx_hâp_‰ì_ªque°
(
°ªam
->
ªque°
, 
rc
);

3214 
ev
 = 
fc
->
ªad
;

3216 i‡(
ev
->
a˘ive
 ||Év->
dißbÀd
) {

3217 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3221 i‡(
ev
->
timî_£t
) {

3222 
	`ngx_dñ_timî
(
ev
);

3225 i‡(
ev
->
¥ev
) {

3226 
	`ngx_dñëe_po°ed_evít
(
ev
);

3229 
ev
 = 
fc
->
wrôe
;

3231 i‡(
ev
->
a˘ive
 ||Év->
dißbÀd
) {

3232 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3236 i‡(
ev
->
timî_£t
) {

3237 
	`ngx_dñ_timî
(
ev
);

3240 i‡(
ev
->
¥ev
) {

3241 
	`ngx_dñëe_po°ed_evít
(
ev
);

3244 
fc
->
d©a
 = 
sc
->
‰ì_Áke_c⁄√˘i⁄s
;

3245 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
;

3247 
sc
->
¥o˚ssög
--;

3249 i‡(
sc
->
¥o˚ssög
 || sc->
blocked
) {

3253 
ev
 = 
sc
->
c⁄√˘i⁄
->
ªad
;

3255 
ev
->
h™dÀr
 = 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
;

3256 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

3257 
	}
}

3261 
	$ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
)

3263 
ngx_c⁄√˘i⁄_t
 *
c
;

3265 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

3267 i‡(
ªv
->
ªady
) {

3268 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

3272 
c
 = 
ªv
->
d©a
;

3274 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
c
->
d©a
);

3275 
	}
}

3279 
	$ngx_hâp_•dy_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

3281 
ngx_c⁄√˘i⁄_t
 *
c
;

3282 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3283 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

3285 
c
 = 
ªv
->
d©a
;

3287 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdy keepalive handler");

3289 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

3290 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3294 #i‡(
NGX_HAVE_KQUEUE
)

3296 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

3297 i‡(
ªv
->
≥ndög_eof
) {

3298 
c
->
log
->
h™dÀr
 = 
NULL
;

3299 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

3301 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3302 #i‡(
NGX_HTTP_SSL
)

3303 i‡(
c
->
s¶
) {

3304 
c
->
s¶
->
no_£nd_shutdown
 = 1;

3307 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3314 
c
->
de°royed
 = 0;

3315 
c
->
idÀ
 = 0;

3316 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

3318 
sc
 = 
c
->
d©a
;

3320 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3321 
ngx_hâp_•dy_moduÀ
);

3323 
sc
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
sscf
->
poﬁ_size
, sc->
c⁄√˘i⁄
->
log
);

3324 i‡(
sc
->
poﬁ
 =
NULL
) {

3325 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3329 
sc
->
°ªams_ödex
 = 
	`ngx_pˇŒoc
(sc->
poﬁ
,

3330 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
)

3331 * (
ngx_hâp_•dy_°ªam_t
 *));

3332 i‡(
sc
->
°ªams_ödex
 =
NULL
) {

3333 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3337 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_wrôe_h™dÀr
;

3339 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

3340 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

3341 
	}
}

3345 
	$ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

3346 
ngx_öt_t
 
rc
)

3348 
ngx_uöt_t
 
i
, 
size
;

3349 
ngx_evít_t
 *
ev
;

3350 
ngx_c⁄√˘i⁄_t
 *
c
, *
fc
;

3351 
ngx_hâp_ªque°_t
 *
r
;

3352 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

3353 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3355 
c
 = 
sc
->
c⁄√˘i⁄
;

3357 i‡(!
sc
->
¥o˚ssög
) {

3358 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3362 
c
->
îr‹
 = 1;

3363 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3364 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3366 
sc
->
œ°_out
 = 
NULL
;

3368 
sc
->
blocked
 = 1;

3370 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3371 
ngx_hâp_•dy_moduÀ
);

3373 
size
 = 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
);

3375 
i
 = 0; i < 
size
; i++) {

3376 
°ªam
 = 
sc
->
°ªams_ödex
[
i
];

3378 
°ªam
) {

3379 
°ªam
->
h™dÀd
 = 0;

3381 
r
 = 
°ªam
->
ªque°
;

3382 
fc
 = 
r
->
c⁄√˘i⁄
;

3384 
fc
->
îr‹
 = 1;

3386 i‡(
°ªam
->
queued
) {

3387 
°ªam
->
queued
 = 0;

3389 
ev
 = 
fc
->
wrôe
;

3390 
ev
->
dñayed
 = 0;

3393 
ev
 = 
fc
->
ªad
;

3396 
°ªam
 = såóm->
ödex
;

3398 
ev
->
eof
 = 1;

3399 
ev
->
	`h™dÀr
(ev);

3403 
sc
->
blocked
 = 0;

3405 i‡(
sc
->
¥o˚ssög
) {

3409 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3410 
	}
}

3413 
ngx_öt_t


3414 
	$ngx_hâp_•dy_adju°_wödows
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ssize_t
 
dñè
)

3416 
ngx_uöt_t
 
i
, 
size
;

3417 
ngx_evít_t
 *
wev
;

3418 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, *
¢
;

3419 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3421 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3422 
ngx_hâp_•dy_moduÀ
);

3424 
size
 = 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
);

3426 
i
 = 0; i < 
size
; i++) {

3428 
°ªam
 = 
sc
->
°ªams_ödex
[
i
]; såóm; såóm = 
¢
) {

3429 
¢
 = 
°ªam
->
ödex
;

3431 i‡(
dñè
 > 0

3432 && 
°ªam
->
£nd_wödow


3433 > (
ssize_t
Ë(
NGX_SPDY_MAX_WINDOW
 - 
dñè
))

3435 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

3436 
NGX_SPDY_FLOW_CONTROL_ERROR
)

3437 =
NGX_ERROR
)

3439  
NGX_ERROR
;

3445 
°ªam
->
£nd_wödow
 +
dñè
;

3447 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3449 
°ªam
->
id
, såóm->
£nd_wödow
);

3451 i‡(
°ªam
->
£nd_wödow
 > 0 && såóm->
exhau°ed
) {

3452 
°ªam
->
exhau°ed
 = 0;

3454 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

3456 i‡(!
wev
->
timî_£t
) {

3457 
wev
->
dñayed
 = 0;

3458 
wev
->
	`h™dÀr
(wev);

3464  
NGX_OK
;

3465 
	}
}

3469 
	$ngx_hâp_•dy_poﬁ_˛ónup
(*
d©a
)

3471 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
d©a
;

3473 i‡(
sc
->
poﬁ
) {

3474 
	`ngx_de°roy_poﬁ
(
sc
->
poﬁ
);

3476 
	}
}

3480 
	$ngx_hâp_•dy_zÆloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

3482 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
›aque
;

3484  
	`ngx_∑Œoc
(
sc
->
c⁄√˘i⁄
->
poﬁ
, 
ôems
 * 
size
);

3485 
	}
}

3489 
	$ngx_hâp_•dy_z‰ì
(*
›aque
, *
addªss
)

3492 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
›aque
;

3494 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3495 "•dy z‰ì: %p", 
addªss
);

3497 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy.h

7 #i‚de‡
_NGX_HTTP_SPDY_H_INCLUDED_


8 
	#_NGX_HTTP_SPDY_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_hâp.h
>

15 
	~<zlib.h
>

18 
	#NGX_SPDY_VERSION
 3

	)

20 
	#NGX_SPDY_NPN_ADVERTISE
 "\x08•dy/3.1"

	)

21 
	#NGX_SPDY_NPN_NEGOTIATED
 "•dy/3.1"

	)

23 
	#NGX_SPDY_STATE_BUFFER_SIZE
 16

	)

25 
	#NGX_SPDY_CTL_BIT
 1

	)

27 
	#NGX_SPDY_SYN_STREAM
 1

	)

28 
	#NGX_SPDY_SYN_REPLY
 2

	)

29 
	#NGX_SPDY_RST_STREAM
 3

	)

30 
	#NGX_SPDY_SETTINGS
 4

	)

31 
	#NGX_SPDY_PING
 6

	)

32 
	#NGX_SPDY_GOAWAY
 7

	)

33 
	#NGX_SPDY_HEADERS
 8

	)

34 
	#NGX_SPDY_WINDOW_UPDATE
 9

	)

36 
	#NGX_SPDY_FRAME_HEADER_SIZE
 8

	)

38 
	#NGX_SPDY_SID_SIZE
 4

	)

39 
	#NGX_SPDY_DELTA_SIZE
 4

	)

41 
	#NGX_SPDY_SYN_STREAM_SIZE
 10

	)

42 
	#NGX_SPDY_SYN_REPLY_SIZE
 4

	)

43 
	#NGX_SPDY_RST_STREAM_SIZE
 8

	)

44 
	#NGX_SPDY_PING_SIZE
 4

	)

45 
	#NGX_SPDY_GOAWAY_SIZE
 8

	)

46 
	#NGX_SPDY_WINDOW_UPDATE_SIZE
 8

	)

47 
	#NGX_SPDY_NV_NUM_SIZE
 4

	)

48 
	#NGX_SPDY_NV_NLEN_SIZE
 4

	)

49 
	#NGX_SPDY_NV_VLEN_SIZE
 4

	)

50 
	#NGX_SPDY_SETTINGS_NUM_SIZE
 4

	)

51 
	#NGX_SPDY_SETTINGS_FID_SIZE
 4

	)

52 
	#NGX_SPDY_SETTINGS_VAL_SIZE
 4

	)

54 
	#NGX_SPDY_SETTINGS_PAIR_SIZE
 \

55 (
NGX_SPDY_SETTINGS_FID_SIZE
 + 
NGX_SPDY_SETTINGS_VAL_SIZE
)

	)

57 
	#NGX_SPDY_HIGHEST_PRIORITY
 0

	)

58 
	#NGX_SPDY_LOWEST_PRIORITY
 7

	)

60 
	#NGX_SPDY_FLAG_FIN
 0x01

	)

61 
	#NGX_SPDY_FLAG_UNIDIRECTIONAL
 0x02

	)

62 
	#NGX_SPDY_FLAG_CLEAR_SETTINGS
 0x01

	)

64 
	#NGX_SPDY_MAX_FRAME_SIZE
 ((1 << 24Ë- 1)

	)

66 
	#NGX_SPDY_DATA_DISCARD
 1

	)

67 
	#NGX_SPDY_DATA_ERROR
 2

	)

68 
	#NGX_SPDY_DATA_INTERNAL_ERROR
 3

	)

71 
ngx_hâp_•dy_c⁄√˘i⁄_s
 
	tngx_hâp_•dy_c⁄√˘i⁄_t
;

72 
ngx_hâp_•dy_out_‰ame_s
 
	tngx_hâp_•dy_out_‰ame_t
;

75 
	gu_ch¨
 *(*
	tngx_hâp_•dy_h™dÀr_±
Ë(
	tngx_hâp_•dy_c⁄√˘i⁄_t
 *
	tsc
,

76 
	tu_ch¨
 *
	tpos
, u_ch¨ *
	tíd
);

78 
	sngx_hâp_•dy_c⁄√˘i⁄_s
 {

79 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

80 
ngx_hâp_c⁄√˘i⁄_t
 *
	mhâp_c⁄√˘i⁄
;

82 
ngx_uöt_t
 
	m¥o˚ssög
;

84 
size_t
 
	m£nd_wödow
;

85 
size_t
 
	mªcv_wödow
;

86 
size_t
 
	möô_wödow
;

88 
ngx_queue_t
 
	mwaôög
;

90 
u_ch¨
 
	mbuf„r
[
NGX_SPDY_STATE_BUFFER_SIZE
];

91 
size_t
 
	mbuf„r_u£d
;

92 
ngx_hâp_•dy_h™dÀr_±
 
	mh™dÀr
;

94 
z_°ªam
 
	mz°ªam_ö
;

95 
z_°ªam
 
	mz°ªam_out
;

97 
ngx_poﬁ_t
 *
	mpoﬁ
;

99 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_˘l_‰ames
;

100 
ngx_c⁄√˘i⁄_t
 *
	m‰ì_Áke_c⁄√˘i⁄s
;

102 
ngx_hâp_•dy_°ªam_t
 **
	m°ªams_ödex
;

104 
ngx_hâp_•dy_out_‰ame_t
 *
	mœ°_out
;

106 
ngx_queue_t
 
	mpo°ed
;

108 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

110 
ngx_uöt_t
 
	míåõs
;

111 
size_t
 
	mÀngth
;

112 
u_ch¨
 
	mÊags
;

114 
ngx_uöt_t
 
	mœ°_sid
;

116 
	mblocked
:1;

117 
	möcom∂ëe
:1;

121 
	sngx_hâp_•dy_°ªam_s
 {

122 
ngx_uöt_t
 
	mid
;

123 
ngx_hâp_ªque°_t
 *
	mªque°
;

124 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

125 
ngx_hâp_•dy_°ªam_t
 *
	mödex
;

127 
ngx_uöt_t
 
	mhódî_buf„rs
;

128 
ngx_uöt_t
 
	mqueued
;

134 
ssize_t
 
	m£nd_wödow
;

135 
size_t
 
	mªcv_wödow
;

137 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_‰ames
;

138 
ngx_chaö_t
 *
	m‰ì_d©a_hódîs
;

139 
ngx_chaö_t
 *
	m‰ì_bufs
;

141 
ngx_queue_t
 
	mqueue
;

143 
	m¥i‹ôy
:3;

144 
	mh™dÀd
:1;

145 
	mblocked
:1;

146 
	mexhau°ed
:1;

147 
	mö_˛o£d
:1;

148 
	mout_˛o£d
:1;

149 
	mskù_d©a
:2;

153 
	sngx_hâp_•dy_out_‰ame_s
 {

154 
ngx_hâp_•dy_out_‰ame_t
 *
	m√xt
;

155 
ngx_chaö_t
 *
	mfú°
;

156 
ngx_chaö_t
 *
	mœ°
;

157 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	msc
,

158 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ame
);

160 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

161 
size_t
 
	mÀngth
;

163 
ngx_uöt_t
 
	m¥i‹ôy
;

164 
	mblocked
:1;

165 
	mfö
:1;

169 
ngx_ölöe
 

170 
	$ngx_hâp_•dy_queue_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

171 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

173 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

175 
out
 = &
sc
->
œ°_out
; *out; ouà&(*out)->
√xt
)

180 i‡(
‰ame
->
¥i‹ôy
 >(*
out
)->priority) {

185 
‰ame
->
√xt
 = *
out
;

186 *
out
 = 
‰ame
;

187 
	}
}

190 
ngx_ölöe
 

191 
	$ngx_hâp_•dy_queue_blocked_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

192 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

194 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

196 
out
 = &
sc
->
œ°_out
; *out; ouà&(*out)->
√xt
)

198 i‡((*
out
)->
blocked
) {

203 
‰ame
->
√xt
 = *
out
;

204 *
out
 = 
‰ame
;

205 
	}
}

208 
ngx_hâp_•dy_öô
(
ngx_evít_t
 *
ªv
);

209 
ngx_hâp_•dy_ªque°_hódîs_öô
();

211 
ngx_öt_t
 
ngx_hâp_•dy_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

212 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

214 
ngx_hâp_•dy_˛o£_°ªam
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
);

216 
ngx_öt_t
 
ngx_hâp_•dy_£nd_ouçut_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

219 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt16
(
p
, 
s
) \

220 (*(
uöt16_t
 *Ë(
p
Ë
	`ht⁄s
((uöt16_tË(
s
)), (pË+ (uöt16_t))

	)

222 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
s
) \

223 (*(
uöt32_t
 *Ë(
p
Ë
	`ht⁄l
((uöt32_tË(
s
)), (pË+ (uöt32_t))

	)

225 #i‡(
NGX_HAVE_NONALIGNED
)

227 
	#ngx_•dy_‰ame_wrôe_uöt16
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt16


	)

228 
	#ngx_•dy_‰ame_wrôe_uöt32
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

232 
	#ngx_•dy_‰ame_wrôe_uöt16
(
p
, 
s
) \

233 ((
p
)[0] = (
u_ch¨
Ë(
s
Ë>> 8, (p)[1] = (u_ch¨Ë(s), (pË+ (
uöt16_t
))

	)

235 
	#ngx_•dy_‰ame_wrôe_uöt32
(
p
, 
s
) \

236 ((
p
)[0] = (
u_ch¨
Ë(
s
) >> 24, \

237 (
p
)[1] = (
u_ch¨
Ë(
s
) >> 16, \

238 (
p
)[2] = (
u_ch¨
Ë(
s
) >> 8, \

239 (
p
)[3] = (
u_ch¨
Ë(
s
), (pË+ (
uöt32_t
))

	)

244 
	#ngx_•dy_˘l_‰ame_hód
(
t
) \

245 ((
uöt32_t
Ë
NGX_SPDY_CTL_BIT
 << 31 | 
NGX_SPDY_VERSION
 << 16 | (
t
))

	)

247 
	#ngx_•dy_‰ame_wrôe_hód
(
p
, 
t
) \

248 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
	`ngx_•dy_˘l_‰ame_hód
(
t
))

	)

250 
	#ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(
p
, 
f
, 
l
) \

251 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, (
f
Ë<< 24 | (
l
))

	)

252 
	#ngx_•dy_‰ame_wrôe_Êags_™d_id
(
p
, 
f
, 
i
) \

253 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, (
f
Ë<< 24 | (
i
))

	)

255 
	#ngx_•dy_‰ame_wrôe_sid
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

256 
	#ngx_•dy_‰ame_wrôe_wödow
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

12 
	~<ngx_hâp_•dy_moduÀ.h
>

14 
	~<zlib.h
>

17 
	#ngx_hâp_•dy_nv_nsize
(
h
Ë(
NGX_SPDY_NV_NLEN_SIZE
 + (hË- 1)

	)

18 
	#ngx_hâp_•dy_nv_vsize
(
h
Ë(
NGX_SPDY_NV_VLEN_SIZE
 + (hË- 1)

	)

20 
	#ngx_hâp_•dy_nv_wrôe_num
 
ngx_•dy_‰ame_wrôe_uöt32


	)

21 
	#ngx_hâp_•dy_nv_wrôe_∆í
 
ngx_•dy_‰ame_wrôe_uöt32


	)

22 
	#ngx_hâp_•dy_nv_wrôe_vÀn
 
ngx_•dy_‰ame_wrôe_uöt32


	)

24 
	#ngx_hâp_•dy_nv_wrôe_«me
(
p
, 
h
) \

25 
	`ngx_˝ymem
(
	`ngx_hâp_•dy_nv_wrôe_∆í
(
p
, (
h
Ë- 1), h, (hË- 1)

	)

27 
	#ngx_hâp_•dy_nv_wrôe_vÆ
(
p
, 
h
) \

28 
	`ngx_˝ymem
(
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
, (
h
Ë- 1), h, (hË- 1)

	)

31 
ngx_chaö_t
 *
ngx_hâp_•dy_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
fc
,

32 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
);

34 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_•dy_fûãr_£nd
(

35 
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

36 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_•dy_Êow_c⁄åﬁ
(

37 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

38 
ngx_hâp_•dy_waôög_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

39 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

41 
ngx_chaö_t
 *
ngx_hâp_•dy_fûãr_gë_shadow
(

42 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_buf_t
 *
buf
, 
off_t
 
off£t
, off_à
size
);

43 
ngx_hâp_•dy_out_‰ame_t
 *
ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(

44 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
size_t
 
Àn
, 
ngx_chaö_t
 *
fú°
,

45 
ngx_chaö_t
 *
œ°
);

47 
ngx_öt_t
 
ngx_hâp_•dy_syn_‰ame_h™dÀr
(

48 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

49 
ngx_öt_t
 
ngx_hâp_•dy_d©a_‰ame_h™dÀr
(

50 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

51 
ngx_ölöe
 
ngx_hâp_•dy_h™dÀ_‰ame
(

52 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

53 
ngx_ölöe
 
ngx_hâp_•dy_h™dÀ_°ªam
(

54 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

56 
ngx_hâp_•dy_fûãr_˛ónup
(*
d©a
);

58 
ngx_öt_t
 
ngx_hâp_•dy_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

61 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•dy_fûãr_moduÀ_˘x
 = {

62 
NULL
,

63 
ngx_hâp_•dy_fûãr_öô
,

65 
NULL
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL


76 
ngx_moduÀ_t
 
	gngx_hâp_•dy_fûãr_moduÀ
 = {

77 
NGX_MODULE_V1
,

78 &
ngx_hâp_•dy_fûãr_moduÀ_˘x
,

79 
NULL
,

80 
NGX_HTTP_MODULE
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NGX_MODULE_V1_PADDING


92 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_•dy_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
rc
;

99 
size_t
 
Àn
;

100 
u_ch¨
 *
p
, *
buf
, *
œ°
;

101 
ngx_buf_t
 *
b
;

102 
ngx_°r_t
 
ho°
;

103 
ngx_uöt_t
 
i
, 
j
, 
cou¡
, 
p‹t
;

104 
ngx_chaö_t
 *
˛
;

105 
ngx_li°_∑π_t
 *
∑π
, *
±
;

106 
ngx_èbÀ_ñt_t
 *
hódî
, *
h
;

107 
ngx_c⁄√˘i⁄_t
 *
c
;

108 
ngx_hâp_˛ónup_t
 *
˛n
;

109 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

110 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

111 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

112 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

113 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

114 
sockaddr_ö
 *
sö
;

115 #i‡(
NGX_HAVE_INET6
)

116 
sockaddr_ö6
 *
sö6
;

118 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

120 i‡(!
r
->
•dy_°ªam
) {

121  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 i‡(
r
->
hódî_£¡
) {

128  
NGX_OK
;

131 
r
->
hódî_£¡
 = 1;

133 i‡(
r
 !r->
maö
) {

134  
NGX_OK
;

137 
c
 = 
r
->
c⁄√˘i⁄
;

139 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

140 
r
->
hódî_⁄ly
 = 1;

143 
r
->
hódîs_out
.
°©us
) {

145 
NGX_HTTP_OK
:

146 
NGX_HTTP_PARTIAL_CONTENT
:

149 
NGX_HTTP_NOT_MODIFIED
:

150 
r
->
hódî_⁄ly
 = 1;

153 
NGX_HTTP_NO_CONTENT
:

154 
r
->
hódî_⁄ly
 = 1;

156 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

158 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

159 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

164 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

165 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

168 
Àn
 = 
NGX_SPDY_NV_NUM_SIZE


169 + 
	`ngx_hâp_•dy_nv_nsize
(":version")

170 + 
	`ngx_hâp_•dy_nv_vsize
("HTTP/1.1")

171 + 
	`ngx_hâp_•dy_nv_nsize
(":status")

172 + (
r
->
hódîs_out
.
°©us_löe
.
Àn


173 ? 
NGX_SPDY_NV_VLEN_SIZE
 + 
r
->
hódîs_out
.
°©us_löe
.
Àn


174 : 
	`ngx_hâp_•dy_nv_vsize
("418"));

176 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

178 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

179 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("server");

180 
Àn
 +
˛cf
->
£rvî_tokís
 ? 
	`ngx_hâp_•dy_nv_vsize
(
NGINX_VER
)

181 : 
	`ngx_hâp_•dy_nv_vsize
("nginx");

184 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

185 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("date")

186 + 
	`ngx_hâp_•dy_nv_vsize
("Wed, 31 Dec 1986 10:00:00 GMT");

189 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

190 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("content-type")

191 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
;

193 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


194 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

196 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

200 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


201 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

203 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("content-length")

204 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
NGX_OFF_T_LEN
;

207 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


208 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

210 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("last-modified")

211 + 
	`ngx_hâp_•dy_nv_vsize
("Wed, 31 Dec 1986 10:00:00 GMT");

214 i‡(
r
->
hódîs_out
.
loˇti⁄


215 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


216 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

218 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

220 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

221 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

222 
ho°
 = 
cscf
->
£rvî_«me
;

224 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

225 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

228 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

229 
ho°
.
d©a
 = 
addr
;

231 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

232  
NGX_ERROR
;

236 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

238 #i‡(
NGX_HAVE_INET6
)

239 
AF_INET6
:

240 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

241 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

244 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

245 
AF_UNIX
:

246 
p‹t
 = 0;

250 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

251 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

255 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("location")

256 + 
	`ngx_hâp_•dy_nv_vsize
("https://")

257 + 
ho°
.
Àn


258 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
;

260 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

262 #i‡(
NGX_HTTP_SSL
)

263 i‡(
c
->
s¶
)

264 
p‹t
 = (port == 443) ? 0 :Öort;

267 
p‹t
 = (port == 80) ? 0 :Öort;

270 
p‹t
 = 0;

273 i‡(
p‹t
) {

274 
Àn
 += (":65535") - 1;

278 
	`ngx_°r_nuŒ
(&
ho°
);

279 
p‹t
 = 0;

282 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

283 
hódî
 = 
∑π
->
ñts
;

285 
i
 = 0; ; i++) {

287 i‡(
i
 >
∑π
->
√…s
) {

288 i‡(
∑π
->
√xt
 =
NULL
) {

292 
∑π
 =Ö¨t->
√xt
;

293 
hódî
 = 
∑π
->
ñts
;

294 
i
 = 0;

297 i‡(
hódî
[
i
].
hash
 == 0) {

301 
Àn
 +
NGX_SPDY_NV_NLEN_SIZE
 + 
hódî
[
i
].
key
.len

302 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
hódî
[
i
].
vÆue
.
Àn
;

305 
buf
 = 
	`ngx_Æloc
(
Àn
, 
r
->
poﬁ
->
log
);

306 i‡(
buf
 =
NULL
) {

307  
NGX_ERROR
;

310 
œ°
 = 
buf
 + 
NGX_SPDY_NV_NUM_SIZE
;

312 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, ":version");

313 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(last, "HTTP/1.1");

315 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, ":status");

317 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

318 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÀn
(last,

319 
r
->
hódîs_out
.
°©us_löe
.
Àn
);

320 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
°©us_löe
.
d©a
,

321 
r
->
hódîs_out
.
°©us_löe
.
Àn
);

323 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÀn
(last, 3);

324 
œ°
 = 
	`ngx_•rötf
÷a°, "%03ui", 
r
->
hódîs_out
.
°©us
);

327 
cou¡
 = 2;

329 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

330 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "server");

331 
œ°
 = 
˛cf
->
£rvî_tokís


332 ? 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(
œ°
, 
NGINX_VER
)

333 : 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(
œ°
, "nginx");

335 
cou¡
++;

338 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

339 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "date");

341 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÀn
÷a°, 
ngx_ˇched_hâp_time
.
Àn
);

343 
œ°
 = 
	`ngx_˝ymem
÷a°, 
ngx_ˇched_hâp_time
.
d©a
,

344 
ngx_ˇched_hâp_time
.
Àn
);

346 
cou¡
++;

349 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

351 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "content-type");

353 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

355 
œ°
 = 
	`ngx_˝ymem
(
p
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

356 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

358 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


359 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

361 
œ°
 = 
	`ngx_˝ymem
(last, "; charset=", ("; charset=") - 1);

363 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

364 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

368 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
œ°
 - 
p
;

369 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

372 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

373 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

375 
cou¡
++;

378 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


379 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

381 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "content-length");

383 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

385 
œ°
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

387 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

388 
œ°
 - 
p
);

390 
cou¡
++;

393 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


394 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

396 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "last-modified");

398 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

400 
œ°
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

402 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

403 
œ°
 - 
p
);

405 
cou¡
++;

408 i‡(
ho°
.
d©a
) {

410 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "location");

412 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

414 
œ°
 = 
	`ngx_˝ymem
(
p
, "http", ("http") - 1);

416 #i‡(
NGX_HTTP_SSL
)

417 i‡(
c
->
s¶
) {

418 *
œ°
++ ='s';

422 *
œ°
++ = ':'; *last++ = '/'; *last++ = '/';

424 
œ°
 = 
	`ngx_˝ymem
÷a°, 
ho°
.
d©a
, ho°.
Àn
);

426 i‡(
p‹t
) {

427 
œ°
 = 
	`ngx_•rötf
÷a°, ":%ui", 
p‹t
);

430 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

431 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

435 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
œ°
 - 
p
;

436 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

437 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "location");

439 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

440 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

442 
cou¡
++;

445 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

446 
hódî
 = 
∑π
->
ñts
;

448 
i
 = 0; ; i++) {

450 i‡(
i
 >
∑π
->
√…s
) {

451 i‡(
∑π
->
√xt
 =
NULL
) {

455 
∑π
 =Ö¨t->
√xt
;

456 
hódî
 = 
∑π
->
ñts
;

457 
i
 = 0;

460 i‡(
hódî
[
i
].
hash
 == 0 || header[i].hash == 2) {

464 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_∆í
÷a°, 
hódî
[
i
].
key
.
Àn
);

466 
	`ngx_°æow
(
œ°
, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

467 
œ°
 +
hódî
[
i
].
key
.
Àn
;

469 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

471 
œ°
 = 
	`ngx_˝ymem
(
p
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

473 
±
 = 
∑π
;

474 
h
 = 
hódî
;

476 
j
 = 
i
 + 1; ; j++) {

478 i‡(
j
 >
±
->
√…s
) {

479 i‡(
±
->
√xt
 =
NULL
) {

483 
±
 =Öt->
√xt
;

484 
h
 = 
±
->
ñts
;

485 
j
 = 0;

488 i‡(
h
[
j
].
hash
 == 0 || h[j].hash == 2

489 || 
h
[
j
].
key
.
Àn
 !
hódî
[
i
].key.len

490 || 
	`ngx_°∫ˇ£cmp
(
hódî
[
i
].
key
.
d©a
, 
h
[
j
].key.data,

491 
hódî
[
i
].
key
.
Àn
))

496 *
œ°
++ = '\0';

498 
œ°
 = 
	`ngx_˝ymem
÷a°, 
h
[
j
].
vÆue
.
d©a
, h[j].vÆue.
Àn
);

500 
h
[
j
].
hash
 = 2;

503 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

504 
œ°
 - 
p
);

506 
cou¡
++;

509 (Ë
	`ngx_hâp_•dy_nv_wrôe_num
(
buf
, 
cou¡
);

511 
°ªam
 = 
r
->
•dy_°ªam
;

512 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

514 
Àn
 = 
œ°
 - 
buf
;

516 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE


517 + 
NGX_SPDY_SYN_REPLY_SIZE


518 + 
	`deÊ©eBound
(&
sc
->
z°ªam_out
, 
Àn
));

519 i‡(
b
 =
NULL
) {

520 
	`ngx_‰ì
(
buf
);

521  
NGX_ERROR
;

524 
b
->
œ°
 +
NGX_SPDY_FRAME_HEADER_SIZE
 + 
NGX_SPDY_SYN_REPLY_SIZE
;

526 
sc
->
z°ªam_out
.
√xt_ö
 = 
buf
;

527 
sc
->
z°ªam_out
.
avaû_ö
 = 
Àn
;

528 
sc
->
z°ªam_out
.
√xt_out
 = 
b
->
œ°
;

529 
sc
->
z°ªam_out
.
avaû_out
 = 
b
->
íd
 - b->
œ°
;

531 
rc
 = 
	`deÊ©e
(&
sc
->
z°ªam_out
, 
Z_SYNC_FLUSH
);

533 
	`ngx_‰ì
(
buf
);

535 i‡(
rc
 !
Z_OK
) {

536 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

537 "•dy deÊ©e(ËÁûed: %d", 
rc
);

538  
NGX_ERROR
;

541 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

543 
sc
->
z°ªam_out
.
√xt_ö
, sc->z°ªam_out.
√xt_out
,

544 
sc
->
z°ªam_out
.
avaû_ö
, sc->z°ªam_out.
avaû_out
,

545 
rc
);

547 
b
->
œ°
 = 
sc
->
z°ªam_out
.
√xt_out
;

549 
p
 = 
b
->
pos
;

550 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_SYN_REPLY
);

552 
Àn
 = 
b
->
œ°
 - b->
pos
;

554 
r
->
hódî_size
 = 
Àn
;

556 
Àn
 -
NGX_SPDY_FRAME_HEADER_SIZE
;

558 i‡(
r
->
hódî_⁄ly
) {

559 
b
->
œ°_buf
 = 1;

560 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
NGX_SPDY_FLAG_FIN
, 
Àn
);

563 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
Àn
);

566 (Ë
	`ngx_•dy_‰ame_wrôe_sid
(
p
, 
°ªam
->
id
);

568 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

569 i‡(
˛
 =
NULL
) {

570  
NGX_ERROR
;

573 
˛
->
buf
 = 
b
;

574 
˛
->
√xt
 = 
NULL
;

576 
‰ame
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

577 i‡(
‰ame
 =
NULL
) {

578  
NGX_ERROR
;

581 
‰ame
->
fú°
 = 
˛
;

582 
‰ame
->
œ°
 = 
˛
;

583 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_syn_‰ame_h™dÀr
;

584 
‰ame
->
°ªam
 = stream;

585 
‰ame
->
Àngth
 = 
Àn
;

586 
‰ame
->
¥i‹ôy
 = 
°ªam
->priority;

587 
‰ame
->
blocked
 = 1;

588 
‰ame
->
fö
 = 
r
->
hódî_⁄ly
;

590 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

592 
°ªam
->
id
, 
‰ame
, føme->
Àngth
);

594 
	`ngx_hâp_•dy_queue_blocked_‰ame
(
sc
, 
‰ame
);

596 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

597 i‡(
˛n
 =
NULL
) {

598  
NGX_ERROR
;

601 
˛n
->
h™dÀr
 = 
ngx_hâp_•dy_fûãr_˛ónup
;

602 
˛n
->
d©a
 = 
°ªam
;

604 
°ªam
->
queued
 = 1;

606 
c
->
£nd_chaö
 = 
ngx_hâp_•dy_£nd_chaö
;

607 
c
->
√ed_œ°_buf
 = 1;

609  
	`ngx_hâp_•dy_fûãr_£nd
(
c
, 
°ªam
);

610 
	}
}

613 
ngx_chaö_t
 *

614 
	$ngx_hâp_•dy_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

616 
off_t
 
size
, 
off£t
;

617 
size_t
 
ª°
, 
‰ame_size
;

618 
ngx_chaö_t
 *
˛
, *
out
, **
 
;

619 
ngx_hâp_ªque°_t
 *
r
;

620 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

621 
ngx_hâp_•dy_loc_c⁄f_t
 *
¶cf
;

622 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

623 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

625 
r
 = 
fc
->
d©a
;

626 
°ªam
 = 
r
->
•dy_°ªam
;

628 #i‡(
NGX_SUPPRESS_WARN
)

629 
size
 = 0;

632 
ö
) {

633 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

635 i‡(
size
 || 
ö
->
buf
->
œ°_buf
) {

639 
ö
 = in->
√xt
;

642 i‡(
ö
 =
NULL
) {

644 i‡(
°ªam
->
queued
) {

645 
fc
->
wrôe
->
dñayed
 = 1;

647 
fc
->
buf„ªd
 &~
NGX_SPDY_BUFFERED
;

650  
NULL
;

653 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

655 i‡(
size
 && 
	`ngx_hâp_•dy_Êow_c⁄åﬁ
(
sc
, 
°ªam
Ë=
NGX_DECLINED
) {

656 
fc
->
wrôe
->
dñayed
 = 1;

657  
ö
;

660 i‡(
limô
 =0 ||Üimô > (
off_t
Ë
sc
->
£nd_wödow
) {

661 
limô
 = 
sc
->
£nd_wödow
;

664 i‡(
limô
 > 
°ªam
->
£nd_wödow
) {

665 
limô
 = (
°ªam
->
£nd_wödow
 > 0) ? stream->send_window : 0;

668 i‡(
ö
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
) {

669 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

670 i‡(
˛
 =
NULL
) {

671  
NGX_CHAIN_ERROR
;

674 
˛
->
buf
 = 
ö
->buf;

675 
ö
->
buf
 = 
˛
->buf->
shadow
;

677 
off£t
 = 
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)

678 ? (
˛
->
buf
->
pos
 - 
ö
->buf->pos)

679 : (
˛
->
buf
->
fûe_pos
 - 
ö
->buf->file_pos);

681 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

682 
°ªam
->
‰ì_bufs
 = 
˛
;

685 
off£t
 = 0;

688 #i‡(
NGX_SUPPRESS_WARN
)

689 
˛
 = 
NULL
;

692 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_•dy_moduÀ
);

694 
‰ame_size
 = (
limô
 <(
off_t
Ë
¶cf
->
chunk_size
Ë? (
size_t
)Üimit

695 : 
¶cf
->
chunk_size
;

698 
 
 = &
out
;

699 
ª°
 = 
‰ame_size
;

701 (
off_t
Ë
ª°
 >
size
) {

703 i‡(
off£t
) {

704 
˛
 = 
	`ngx_hâp_•dy_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
,

705 
off£t
, 
size
);

706 i‡(
˛
 =
NULL
) {

707  
NGX_CHAIN_ERROR
;

710 
off£t
 = 0;

713 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

714 i‡(
˛
 =
NULL
) {

715  
NGX_CHAIN_ERROR
;

718 
˛
->
buf
 = 
ö
->buf;

721 *
 
 = 
˛
;

722 
 
 = &
˛
->
√xt
;

724 
ª°
 -(
size_t
Ë
size
;

725 
ö
 = in->
√xt
;

727 i‡(
ö
 =
NULL
) {

728 
‰ame_size
 -
ª°
;

729 
ª°
 = 0;

733 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

736 i‡(
ª°
) {

737 
˛
 = 
	`ngx_hâp_•dy_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
,

738 
off£t
, 
ª°
);

739 i‡(
˛
 =
NULL
) {

740  
NGX_CHAIN_ERROR
;

743 
˛
->
buf
->
Êush
 = 0;

744 
˛
->
buf
->
œ°_buf
 = 0;

746 *
 
 = 
˛
;

748 
off£t
 +
ª°
;

749 
size
 -
ª°
;

752 
‰ame
 = 
	`ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(
°ªam
, 
‰ame_size
,

753 
out
, 
˛
);

754 i‡(
‰ame
 =
NULL
) {

755  
NGX_CHAIN_ERROR
;

758 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

760 
sc
->
£nd_wödow
 -
‰ame_size
;

762 
°ªam
->
£nd_wödow
 -
‰ame_size
;

763 
°ªam
->
queued
++;

765 i‡(
ö
 =
NULL
) {

769 
limô
 -
‰ame_size
;

771 i‡(
limô
 == 0) {

775 i‡(
limô
 < (
off_t
Ë
¶cf
->
chunk_size
) {

776 
‰ame_size
 = (
size_t
Ë
limô
;

780 i‡(
off£t
) {

781 
˛
 = 
	`ngx_hâp_•dy_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
, 
off£t
, 
size
);

782 i‡(
˛
 =
NULL
) {

783  
NGX_CHAIN_ERROR
;

786 
ö
->
buf
 = 
˛
->buf;

787 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
˛
);

790 i‡(
	`ngx_hâp_•dy_fûãr_£nd
(
fc
, 
°ªam
Ë=
NGX_ERROR
) {

791  
NGX_CHAIN_ERROR
;

794 i‡(
ö
 && 
	`ngx_hâp_•dy_Êow_c⁄åﬁ
(
sc
, 
°ªam
Ë=
NGX_DECLINED
) {

795 
fc
->
wrôe
->
dñayed
 = 1;

798  
ö
;

799 
	}
}

802 
ngx_chaö_t
 *

803 
	$ngx_hâp_•dy_fûãr_gë_shadow
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_buf_t
 *
buf
,

804 
off_t
 
off£t
, off_à
size
)

806 
ngx_buf_t
 *
chunk
;

807 
ngx_chaö_t
 *
˛
;

809 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
°ªam
->
ªque°
->
poﬁ
, &°ªam->
‰ì_bufs
);

810 i‡(
˛
 =
NULL
) {

811  
NULL
;

814 
chunk
 = 
˛
->
buf
;

816 
	`ngx_mem˝y
(
chunk
, 
buf
, (
ngx_buf_t
));

818 
chunk
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
;

819 
chunk
->
shadow
 = 
buf
;

821 i‡(
	`ngx_buf_ö_mem‹y
(
chunk
)) {

822 
chunk
->
pos
 +
off£t
;

823 
chunk
->
œ°
 = chunk->
pos
 + 
size
;

826 i‡(
chunk
->
ö_fûe
) {

827 
chunk
->
fûe_pos
 +
off£t
;

828 
chunk
->
fûe_œ°
 = chunk->
fûe_pos
 + 
size
;

831  
˛
;

832 
	}
}

835 
ngx_hâp_•dy_out_‰ame_t
 *

836 
	$ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
,

837 
size_t
 
Àn
, 
ngx_chaö_t
 *
fú°
,Çgx_chaö_à*
œ°
)

839 
u_ch¨
 *
p
;

840 
ngx_buf_t
 *
buf
;

841 
ngx_uöt_t
 
Êags
;

842 
ngx_chaö_t
 *
˛
;

843 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

846 
‰ame
 = 
°ªam
->
‰ì_‰ames
;

848 i‡(
‰ame
) {

849 
°ªam
->
‰ì_‰ames
 = 
‰ame
->
√xt
;

852 
‰ame
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
,

853 (
ngx_hâp_•dy_out_‰ame_t
));

854 i‡(
‰ame
 =
NULL
) {

855  
NULL
;

859 
Êags
 = 
œ°
->
buf
->
œ°_buf
 ? 
NGX_SPDY_FLAG_FIN
 : 0;

861 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

863 
°ªam
->
id
, 
‰ame
, 
Àn
, 
Êags
);

865 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
°ªam
->
ªque°
->
poﬁ
,

866 &
°ªam
->
‰ì_d©a_hódîs
);

867 i‡(
˛
 =
NULL
) {

868  
NULL
;

871 
buf
 = 
˛
->buf;

873 i‡(
buf
->
°¨t
) {

874 
p
 = 
buf
->
°¨t
;

875 
buf
->
pos
 = 
p
;

877 
p
 +
NGX_SPDY_SID_SIZE
;

879 (Ë
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(
p
, 
Êags
, 
Àn
);

882 
p
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE
);

883 i‡(
p
 =
NULL
) {

884  
NULL
;

887 
buf
->
pos
 = 
p
;

888 
buf
->
°¨t
 = 
p
;

890 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
°ªam
->
id
);

891 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
Êags
, 
Àn
);

893 
buf
->
œ°
 = 
p
;

894 
buf
->
íd
 = 
p
;

896 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_d©a_‰ame
;

897 
buf
->
mem‹y
 = 1;

900 
˛
->
√xt
 = 
fú°
;

901 
fú°
 = 
˛
;

903 
œ°
->
buf
->
Êush
 = 1;

905 
‰ame
->
fú°
 = first;

906 
‰ame
->
œ°
 =Üast;

907 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_d©a_‰ame_h™dÀr
;

908 
‰ame
->
°ªam
 = stream;

909 
‰ame
->
Àngth
 = 
Àn
;

910 
‰ame
->
¥i‹ôy
 = 
°ªam
->priority;

911 
‰ame
->
blocked
 = 0;

912 
‰ame
->
fö
 = 
œ°
->
buf
->
œ°_buf
;

914  
‰ame
;

915 
	}
}

918 
ngx_ölöe
 
ngx_öt_t


919 
	$ngx_hâp_•dy_fûãr_£nd
(
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

921 
°ªam
->
blocked
 = 1;

923 i‡(
	`ngx_hâp_•dy_£nd_ouçut_queue
(
°ªam
->
c⁄√˘i⁄
Ë=
NGX_ERROR
) {

924 
fc
->
îr‹
 = 1;

925  
NGX_ERROR
;

928 
°ªam
->
blocked
 = 0;

930 i‡(
°ªam
->
queued
) {

931 
fc
->
buf„ªd
 |
NGX_SPDY_BUFFERED
;

932 
fc
->
wrôe
->
dñayed
 = 1;

933  
NGX_AGAIN
;

936 
fc
->
buf„ªd
 &~
NGX_SPDY_BUFFERED
;

938  
NGX_OK
;

939 
	}
}

942 
ngx_ölöe
 
ngx_öt_t


943 
	$ngx_hâp_•dy_Êow_c⁄åﬁ
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

944 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

946 i‡(
°ªam
->
£nd_wödow
 <= 0) {

947 
°ªam
->
exhau°ed
 = 1;

948  
NGX_DECLINED
;

951 i‡(
sc
->
£nd_wödow
 == 0) {

952 
	`ngx_hâp_•dy_waôög_queue
(
sc
, 
°ªam
);

953  
NGX_DECLINED
;

956  
NGX_OK
;

957 
	}
}

961 
	$ngx_hâp_•dy_waôög_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

962 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

964 
ngx_queue_t
 *
q
;

965 
ngx_hâp_•dy_°ªam_t
 *
s
;

967 i‡(
°ªam
->
h™dÀd
) {

971 
°ªam
->
h™dÀd
 = 1;

973 
q
 = 
	`ngx_queue_œ°
(&
sc
->
waôög
);

974 
q
 !
	`ngx_queue_£¡öñ
(&
sc
->
waôög
);

975 
q
 = 
	`ngx_queue_¥ev
(q))

977 
s
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_•dy_°ªam_t
, 
queue
);

982 i‡(
°ªam
->
¥i‹ôy
 >
s
->priority) {

987 
	`ngx_queue_ö£π_a·î
(
q
, &
°ªam
->
queue
);

988 
	}
}

991 
ngx_öt_t


992 
	$ngx_hâp_•dy_syn_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

993 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

995 
ngx_buf_t
 *
buf
;

996 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

998 
buf
 = 
‰ame
->
fú°
->buf;

1000 i‡(
buf
->
pos
 !buf->
œ°
) {

1001  
NGX_AGAIN
;

1004 
°ªam
 = 
‰ame
->stream;

1006 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1007 "•dy:%uòSYN_REPLY fømê%∞wa†£¡", 
°ªam
->
id
, 
‰ame
);

1009 
	`ngx_‰ì_chaö
(
°ªam
->
ªque°
->
poﬁ
, 
‰ame
->
fú°
);

1011 
	`ngx_hâp_•dy_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

1013 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

1015  
NGX_OK
;

1016 
	}
}

1019 
ngx_öt_t


1020 
	$ngx_hâp_•dy_d©a_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1021 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

1023 
ngx_buf_t
 *
buf
;

1024 
ngx_chaö_t
 *
˛
, *
 
;

1025 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1027 
°ªam
 = 
‰ame
->stream;

1029 
˛
 = 
‰ame
->
fú°
;

1031 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_d©a_‰ame
) {

1033 i‡(
˛
->
buf
->
pos
 !˛->buf->
œ°
) {

1034 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1036 
°ªam
->
id
, 
‰ame
);

1038  
NGX_AGAIN
;

1041 
 
 = 
˛
->
√xt
;

1043 
˛
->
√xt
 = 
°ªam
->
‰ì_d©a_hódîs
;

1044 
°ªam
->
‰ì_d©a_hódîs
 = 
˛
;

1046 i‡(
˛
 =
‰ame
->
œ°
) {

1047 
d⁄e
;

1050 
˛
 = 
 
;

1054 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
) {

1055 
buf
 = 
˛
->buf->
shadow
;

1057 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

1058 
buf
->
pos
 = 
˛
->buf->pos;

1061 i‡(
buf
->
ö_fûe
) {

1062 
buf
->
fûe_pos
 = 
˛
->buf->file_pos;

1066 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

1068 i‡(
˛
 !
‰ame
->
fú°
) {

1069 
‰ame
->
fú°
 = 
˛
;

1070 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

1073 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1075 
°ªam
->
id
, 
‰ame
);

1077  
NGX_AGAIN
;

1080 
 
 = 
˛
->
√xt
;

1082 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
) {

1083 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

1084 
°ªam
->
‰ì_bufs
 = 
˛
;

1087 
	`ngx_‰ì_chaö
(
°ªam
->
ªque°
->
poﬁ
, 
˛
);

1090 i‡(
˛
 =
‰ame
->
œ°
) {

1091 
d⁄e
;

1094 
˛
 = 
 
;

1097 
d⁄e
:

1099 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1100 "•dy:%uòDATA fømê%∞wa†£¡", 
°ªam
->
id
, 
‰ame
);

1102 
°ªam
->
ªque°
->
hódî_size
 +
NGX_SPDY_FRAME_HEADER_SIZE
;

1104 
	`ngx_hâp_•dy_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

1106 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

1108  
NGX_OK
;

1109 
	}
}

1112 
ngx_ölöe
 

1113 
	$ngx_hâp_•dy_h™dÀ_‰ame
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
,

1114 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

1116 
ngx_hâp_ªque°_t
 *
r
;

1118 
r
 = 
°ªam
->
ªque°
;

1120 
r
->
c⁄√˘i⁄
->
£¡
 +
NGX_SPDY_FRAME_HEADER_SIZE
 + 
‰ame
->
Àngth
;

1122 i‡(
‰ame
->
fö
) {

1123 
°ªam
->
out_˛o£d
 = 1;

1126 
‰ame
->
√xt
 = 
°ªam
->
‰ì_‰ames
;

1127 
°ªam
->
‰ì_‰ames
 = 
‰ame
;

1129 
°ªam
->
queued
--;

1130 
	}
}

1133 
ngx_ölöe
 

1134 
	$ngx_hâp_•dy_h™dÀ_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1135 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

1137 
ngx_evít_t
 *
wev
;

1139 i‡(
°ªam
->
h™dÀd
 || såóm->
blocked
 || såóm->
exhau°ed
) {

1143 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

1145 i‡(!
wev
->
timî_£t
) {

1146 
wev
->
dñayed
 = 0;

1148 
°ªam
->
h™dÀd
 = 1;

1149 
	`ngx_queue_ö£π_èû
(&
sc
->
po°ed
, &
°ªam
->
queue
);

1151 
	}
}

1155 
	$ngx_hâp_•dy_fûãr_˛ónup
(*
d©a
)

1157 
ngx_hâp_•dy_°ªam_t
 *
°ªam
 = 
d©a
;

1159 
size_t
 
dñè
;

1160 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
, **
‚
;

1161 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

1163 i‡(
°ªam
->
h™dÀd
) {

1164 
°ªam
->
h™dÀd
 = 0;

1165 
	`ngx_queue_ªmove
(&
°ªam
->
queue
);

1168 i‡(
°ªam
->
queued
 == 0) {

1172 
dñè
 = 0;

1173 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

1174 
‚
 = &
sc
->
œ°_out
;

1177 
‰ame
 = *
‚
;

1179 i‡(
‰ame
 =
NULL
) {

1183 i‡(
‰ame
->
°ªam
 =°ªam && !‰ame->
blocked
) {

1184 *
‚
 = 
‰ame
->
√xt
;

1186 
dñè
 +
‰ame
->
Àngth
;

1188 i‡(--
°ªam
->
queued
 == 0) {

1195 
‚
 = &
‰ame
->
√xt
;

1198 i‡(
sc
->
£nd_wödow
 =0 && 
dñè
 && !
	`ngx_queue_em±y
(&sc->
waôög
)) {

1199 
	`ngx_queue_add
(&
sc
->
po°ed
, &sc->
waôög
);

1200 
	`ngx_queue_öô
(&
sc
->
waôög
);

1203 
sc
->
£nd_wödow
 +
dñè
;

1204 
	}
}

1207 
ngx_öt_t


1208 
	$ngx_hâp_•dy_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1210 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1211 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_•dy_hódî_fûãr
;

1213  
NGX_OK
;

1214 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_•dy_moduÀ.h
>

14 
ngx_öt_t
 
ngx_hâp_•dy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_öt_t
 
ngx_hâp_•dy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

21 
ngx_öt_t
 
ngx_hâp_•dy_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

23 *
ngx_hâp_•dy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_•dy_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

25 *
ngx_hâp_•dy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

26 *
ngx_hâp_•dy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

27 *
chûd
);

28 *
ngx_hâp_•dy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

29 *
ngx_hâp_•dy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

30 *
chûd
);

32 *
ngx_hâp_•dy_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
,

33 *
d©a
);

34 *
ngx_hâp_•dy_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

35 *
ngx_hâp_•dy_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
,

36 *
d©a
);

37 *
ngx_hâp_•dy_chunk_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

40 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_•dy_hódîs_comp_bounds
 = {

41 
ngx_c⁄f_check_num_bounds
, 0, 9

44 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_ªcv_buf„r_size_po°
 =

45 { 
ngx_hâp_•dy_ªcv_buf„r_size
 };

46 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_poﬁ_size_po°
 =

47 { 
ngx_hâp_•dy_poﬁ_size
 };

48 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_°ªams_ödex_mask_po°
 =

49 { 
ngx_hâp_•dy_°ªams_ödex_mask
 };

50 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_chunk_size_po°
 =

51 { 
ngx_hâp_•dy_chunk_size
 };

54 
ngx_comm™d_t
 
	gngx_hâp_•dy_comm™ds
[] = {

56 { 
ngx_°rög
("spdy_recv_buffer_size"),

57 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_size_¶Ÿ
,

59 
NGX_HTTP_MAIN_CONF_OFFSET
,

60 
off£tof
(
ngx_hâp_•dy_maö_c⁄f_t
, 
ªcv_buf„r_size
),

61 &
ngx_hâp_•dy_ªcv_buf„r_size_po°
 },

63 { 
ngx_°rög
("spdy_pool_size"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_size_¶Ÿ
,

66 
NGX_HTTP_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
poﬁ_size
),

68 &
ngx_hâp_•dy_poﬁ_size_po°
 },

70 { 
ngx_°rög
("spdy_max_concurrent_streams"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_num_¶Ÿ
,

73 
NGX_HTTP_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
c⁄cuºít_°ªams
),

75 
NULL
 },

77 { 
ngx_°rög
("spdy_streams_index_size"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_num_¶Ÿ
,

80 
NGX_HTTP_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
°ªams_ödex_mask
),

82 &
ngx_hâp_•dy_°ªams_ödex_mask_po°
 },

84 { 
ngx_°rög
("spdy_recv_timeout"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_m£c_¶Ÿ
,

87 
NGX_HTTP_SRV_CONF_OFFSET
,

88 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
ªcv_timeout
),

89 
NULL
 },

91 { 
ngx_°rög
("spdy_keepalive_timeout"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_m£c_¶Ÿ
,

94 
NGX_HTTP_SRV_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
kì∑live_timeout
),

96 
NULL
 },

98 { 
ngx_°rög
("spdy_headers_comp"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_num_¶Ÿ
,

101 
NGX_HTTP_SRV_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
hódîs_comp
),

103 &
ngx_hâp_•dy_hódîs_comp_bounds
 },

105 { 
ngx_°rög
("spdy_chunk_size"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_c⁄f_£t_size_¶Ÿ
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
off£tof
(
ngx_hâp_•dy_loc_c⁄f_t
, 
chunk_size
),

110 &
ngx_hâp_•dy_chunk_size_po°
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•dy_moduÀ_˘x
 = {

117 
ngx_hâp_•dy_add_v¨übÀs
,

118 
NULL
,

120 
ngx_hâp_•dy_¸óã_maö_c⁄f
,

121 
ngx_hâp_•dy_öô_maö_c⁄f
,

123 
ngx_hâp_•dy_¸óã_§v_c⁄f
,

124 
ngx_hâp_•dy_mîge_§v_c⁄f
,

126 
ngx_hâp_•dy_¸óã_loc_c⁄f
,

127 
ngx_hâp_•dy_mîge_loc_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_•dy_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_•dy_moduÀ_˘x
,

134 
ngx_hâp_•dy_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
ngx_hâp_•dy_moduÀ_öô
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_•dy_v¨s
[] = {

149 { 
ngx_°rög
("•dy"), 
NULL
,

150 
ngx_hâp_•dy_v¨übÀ
, 0, 0, 0 },

152 { 
ngx_°rög
("•dy_ªque°_¥i‹ôy"), 
NULL
,

153 
ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
, 0, 0, 0 },

155 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

159 
ngx_öt_t


160 
	$ngx_hâp_•dy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

162 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

164 
v
 = 
ngx_hâp_•dy_v¨s
; v->
«me
.
Àn
; v++) {

165 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

166 i‡(
v¨
 =
NULL
) {

167  
NGX_ERROR
;

170 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

171 
v¨
->
d©a
 = 
v
->data;

174  
NGX_OK
;

175 
	}
}

178 
ngx_öt_t


179 
	$ngx_hâp_•dy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

180 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

182 i‡(
r
->
•dy_°ªam
) {

183 
v
->
Àn
 = ("3.1") - 1;

184 
v
->
vÆid
 = 1;

185 
v
->
no_ˇchóbÀ
 = 0;

186 
v
->
nŸ_found
 = 0;

187 
v
->
d©a
 = (
u_ch¨
 *) "3.1";

189  
NGX_OK
;

192 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

194  
NGX_OK
;

195 
	}
}

198 
ngx_öt_t


199 
	$ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

200 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

202 i‡(
r
->
•dy_°ªam
) {

203 
v
->
Àn
 = 1;

204 
v
->
vÆid
 = 1;

205 
v
->
no_ˇchóbÀ
 = 0;

206 
v
->
nŸ_found
 = 0;

208 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 1);

209 i‡(
v
->
d©a
 =
NULL
) {

210  
NGX_ERROR
;

213 
v
->
d©a
[0] = '0' + (
u_ch¨
Ë
r
->
•dy_°ªam
->
¥i‹ôy
;

215  
NGX_OK
;

218 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

220  
NGX_OK
;

221 
	}
}

224 
ngx_öt_t


225 
	$ngx_hâp_•dy_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

227 
	`ngx_hâp_•dy_ªque°_hódîs_öô
();

229  
NGX_OK
;

230 
	}
}

234 
	$ngx_hâp_•dy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

238 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_maö_c⁄f_t
));

239 i‡(
smcf
 =
NULL
) {

240  
NULL
;

243 
smcf
->
ªcv_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

245  
smcf
;

246 
	}
}

250 
	$ngx_hâp_•dy_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

252 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

254 
	`ngx_c⁄f_öô_size_vÆue
(
smcf
->
ªcv_buf„r_size
, 256 * 1024);

256  
NGX_CONF_OK
;

257 
	}
}

261 
	$ngx_hâp_•dy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

263 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

265 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_§v_c⁄f_t
));

266 i‡(
sscf
 =
NULL
) {

267  
NULL
;

270 
sscf
->
poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

272 
sscf
->
c⁄cuºít_°ªams
 = 
NGX_CONF_UNSET_UINT
;

273 
sscf
->
°ªams_ödex_mask
 = 
NGX_CONF_UNSET_UINT
;

275 
sscf
->
ªcv_timeout
 = 
NGX_CONF_UNSET_MSEC
;

276 
sscf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

278 
sscf
->
hódîs_comp
 = 
NGX_CONF_UNSET
;

280  
sscf
;

281 
	}
}

285 
	$ngx_hâp_•dy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

287 
ngx_hâp_•dy_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

288 
ngx_hâp_•dy_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

290 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
poﬁ_size
, 
¥ev
->pool_size, 4096);

292 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
c⁄cuºít_°ªams
,

293 
¥ev
->
c⁄cuºít_°ªams
, 100);

295 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ªams_ödex_mask
,

296 
¥ev
->
°ªams_ödex_mask
, 32 - 1);

298 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªcv_timeout
,

299 
¥ev
->
ªcv_timeout
, 30000);

300 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

301 
¥ev
->
kì∑live_timeout
, 180000);

303 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
hódîs_comp
, 
¥ev
->headers_comp, 0);

305  
NGX_CONF_OK
;

306 
	}
}

310 
	$ngx_hâp_•dy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

312 
ngx_hâp_•dy_loc_c⁄f_t
 *
¶cf
;

314 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_loc_c⁄f_t
));

315 i‡(
¶cf
 =
NULL
) {

316  
NULL
;

319 
¶cf
->
chunk_size
 = 
NGX_CONF_UNSET_SIZE
;

321  
¶cf
;

322 
	}
}

326 
	$ngx_hâp_•dy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

328 
ngx_hâp_•dy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

329 
ngx_hâp_•dy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

331 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
chunk_size
, 
¥ev
->chunk_size, 8 * 1024);

333  
NGX_CONF_OK
;

334 
	}
}

338 
	$ngx_hâp_•dy_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

340 
size_t
 *
•
 = 
d©a
;

342 i‡(*
•
 <2 * 
NGX_SPDY_STATE_BUFFER_SIZE
) {

346  
NGX_CONF_OK
;

347 
	}
}

351 
	$ngx_hâp_•dy_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

353 
size_t
 *
•
 = 
d©a
;

355 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

358 
NGX_MIN_POOL_SIZE
);

359  
NGX_CONF_ERROR
;

362 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

363 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

365 
NGX_POOL_ALIGNMENT
);

366  
NGX_CONF_ERROR
;

369  
NGX_CONF_OK
;

370 
	}
}

374 
	$ngx_hâp_•dy_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

376 
ngx_uöt_t
 *
≈
 = 
d©a
;

378 
ngx_uöt_t
 
mask
;

380 
mask
 = *
≈
 - 1;

382 i‡(*
≈
 =0 || (*≈ & 
mask
)) {

386 *
≈
 = 
mask
;

388  
NGX_CONF_OK
;

389 
	}
}

393 
	$ngx_hâp_•dy_chunk_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

395 
size_t
 *
•
 = 
d©a
;

397 i‡(*
•
 == 0) {

398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

400  
NGX_CONF_ERROR
;

403 i‡(*
•
 > 
NGX_SPDY_MAX_FRAME_SIZE
) {

404 *
•
 = 
NGX_SPDY_MAX_FRAME_SIZE
;

407  
NGX_CONF_OK
;

408 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy_module.h

8 #i‚de‡
_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
size_t
 
	mªcv_buf„r_size
;

19 
u_ch¨
 *
	mªcv_buf„r
;

20 } 
	tngx_hâp_•dy_maö_c⁄f_t
;

24 
size_t
 
	mpoﬁ_size
;

25 
ngx_uöt_t
 
	mc⁄cuºít_°ªams
;

26 
ngx_uöt_t
 
	m°ªams_ödex_mask
;

27 
ngx_m£c_t
 
	mªcv_timeout
;

28 
ngx_m£c_t
 
	mkì∑live_timeout
;

29 
ngx_öt_t
 
	mhódîs_comp
;

30 } 
	tngx_hâp_•dy_§v_c⁄f_t
;

34 
size_t
 
	mchunk_size
;

35 } 
	tngx_hâp_•dy_loc_c⁄f_t
;

38 
ngx_moduÀ_t
 
ngx_hâp_•dy_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_special_response.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
);

16 
ngx_öt_t
 
ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
);

18 
ngx_öt_t
 
ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
);

21 
u_ch¨
 
	gngx_hâp_îr‹_fuŒ_èû
[] =

22 "<hr><˚¡î>" 
NGINX_VER
 "</˚¡î>" 
CRLF


23 "</body>" 
CRLF


24 "</html>" 
CRLF


28 
u_ch¨
 
	gngx_hâp_îr‹_èû
[] =

29 "<hr><˚¡î>ngöx</˚¡î>" 
CRLF


30 "</body>" 
CRLF


31 "</html>" 
CRLF


35 
u_ch¨
 
	gngx_hâp_msõ_∑ddög
[] =

36 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


37 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


38 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


39 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


40 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


41 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


45 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_hód
[] =

49 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_èû
[] =

50 "\"></hód><body></body></html>" 
CRLF
;

53 
	gngx_hâp_îr‹_301_∑ge
[] =

54 "<html>" 
CRLF


55 "<hód><tôÀ>301 Moved Pîm™íéy</tôÀ></hód>" 
CRLF


56 "<body bgcﬁ‹=\"whôe\">" 
CRLF


57 "<˚¡î><h1>301 Moved Pîm™íéy</h1></˚¡î>" 
CRLF


61 
	gngx_hâp_îr‹_302_∑ge
[] =

62 "<html>" 
CRLF


63 "<hód><tôÀ>302 Found</tôÀ></hód>" 
CRLF


64 "<body bgcﬁ‹=\"whôe\">" 
CRLF


65 "<˚¡î><h1>302 Found</h1></˚¡î>" 
CRLF


69 
	gngx_hâp_îr‹_303_∑ge
[] =

70 "<html>" 
CRLF


71 "<hód><tôÀ>303 Sì Othî</tôÀ></hód>" 
CRLF


72 "<body bgcﬁ‹=\"whôe\">" 
CRLF


73 "<˚¡î><h1>303 Sì Othî</h1></˚¡î>" 
CRLF


77 
	gngx_hâp_îr‹_307_∑ge
[] =

78 "<html>" 
CRLF


79 "<hód><tôÀ>307 Temp‹¨y Redúe˘</tôÀ></hód>" 
CRLF


80 "<body bgcﬁ‹=\"whôe\">" 
CRLF


81 "<˚¡î><h1>307 Temp‹¨y Redúe˘</h1></˚¡î>" 
CRLF


85 
	gngx_hâp_îr‹_400_∑ge
[] =

86 "<html>" 
CRLF


87 "<hód><tôÀ>400 Bad Reque°</tôÀ></hód>" 
CRLF


88 "<body bgcﬁ‹=\"whôe\">" 
CRLF


89 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


93 
	gngx_hâp_îr‹_401_∑ge
[] =

94 "<html>" 
CRLF


95 "<hód><tôÀ>401 Auth‹iz©i⁄ Requúed</tôÀ></hód>" 
CRLF


96 "<body bgcﬁ‹=\"whôe\">" 
CRLF


97 "<˚¡î><h1>401 Auth‹iz©i⁄ Requúed</h1></˚¡î>" 
CRLF


101 
	gngx_hâp_îr‹_402_∑ge
[] =

102 "<html>" 
CRLF


103 "<hód><tôÀ>402 PaymíàRequúed</tôÀ></hód>" 
CRLF


104 "<body bgcﬁ‹=\"whôe\">" 
CRLF


105 "<˚¡î><h1>402 PaymíàRequúed</h1></˚¡î>" 
CRLF


109 
	gngx_hâp_îr‹_403_∑ge
[] =

110 "<html>" 
CRLF


111 "<hód><tôÀ>403 F‹biddí</tôÀ></hód>" 
CRLF


112 "<body bgcﬁ‹=\"whôe\">" 
CRLF


113 "<˚¡î><h1>403 F‹biddí</h1></˚¡î>" 
CRLF


117 
	gngx_hâp_îr‹_404_∑ge
[] =

118 "<html>" 
CRLF


119 "<hód><tôÀ>404 NŸ Found</tôÀ></hód>" 
CRLF


120 "<body bgcﬁ‹=\"whôe\">" 
CRLF


121 "<˚¡î><h1>404 NŸ Found</h1></˚¡î>" 
CRLF


125 
	gngx_hâp_îr‹_405_∑ge
[] =

126 "<html>" 
CRLF


127 "<hód><tôÀ>405 NŸ AŒowed</tôÀ></hód>" 
CRLF


128 "<body bgcﬁ‹=\"whôe\">" 
CRLF


129 "<˚¡î><h1>405 NŸ AŒowed</h1></˚¡î>" 
CRLF


133 
	gngx_hâp_îr‹_406_∑ge
[] =

134 "<html>" 
CRLF


135 "<hód><tôÀ>406 NŸ Ac˚±abÀ</tôÀ></hód>" 
CRLF


136 "<body bgcﬁ‹=\"whôe\">" 
CRLF


137 "<˚¡î><h1>406 NŸ Ac˚±abÀ</h1></˚¡î>" 
CRLF


141 
	gngx_hâp_îr‹_408_∑ge
[] =

142 "<html>" 
CRLF


143 "<hód><tôÀ>408 Reque° Time-out</tôÀ></hód>" 
CRLF


144 "<body bgcﬁ‹=\"whôe\">" 
CRLF


145 "<˚¡î><h1>408 Reque° Time-out</h1></˚¡î>" 
CRLF


149 
	gngx_hâp_îr‹_409_∑ge
[] =

150 "<html>" 
CRLF


151 "<hód><tôÀ>409 C⁄Êi˘</tôÀ></hód>" 
CRLF


152 "<body bgcﬁ‹=\"whôe\">" 
CRLF


153 "<˚¡î><h1>409 C⁄Êi˘</h1></˚¡î>" 
CRLF


157 
	gngx_hâp_îr‹_410_∑ge
[] =

158 "<html>" 
CRLF


159 "<hód><tôÀ>410 G⁄e</tôÀ></hód>" 
CRLF


160 "<body bgcﬁ‹=\"whôe\">" 
CRLF


161 "<˚¡î><h1>410 G⁄e</h1></˚¡î>" 
CRLF


165 
	gngx_hâp_îr‹_411_∑ge
[] =

166 "<html>" 
CRLF


167 "<hód><tôÀ>411 Lígth Requúed</tôÀ></hód>" 
CRLF


168 "<body bgcﬁ‹=\"whôe\">" 
CRLF


169 "<˚¡î><h1>411 Lígth Requúed</h1></˚¡î>" 
CRLF


173 
	gngx_hâp_îr‹_412_∑ge
[] =

174 "<html>" 
CRLF


175 "<hód><tôÀ>412 Pªc⁄dôi⁄ Faûed</tôÀ></hód>" 
CRLF


176 "<body bgcﬁ‹=\"whôe\">" 
CRLF


177 "<˚¡î><h1>412 Pªc⁄dôi⁄ Faûed</h1></˚¡î>" 
CRLF


181 
	gngx_hâp_îr‹_413_∑ge
[] =

182 "<html>" 
CRLF


183 "<hód><tôÀ>413 Reque° E¡ôy ToÿL¨ge</tôÀ></hód>" 
CRLF


184 "<body bgcﬁ‹=\"whôe\">" 
CRLF


185 "<˚¡î><h1>413 Reque° E¡ôy ToÿL¨ge</h1></˚¡î>" 
CRLF


189 
	gngx_hâp_îr‹_414_∑ge
[] =

190 "<html>" 
CRLF


191 "<hód><tôÀ>414 Reque°-URI ToÿL¨ge</tôÀ></hód>" 
CRLF


192 "<body bgcﬁ‹=\"whôe\">" 
CRLF


193 "<˚¡î><h1>414 Reque°-URI ToÿL¨ge</h1></˚¡î>" 
CRLF


197 
	gngx_hâp_îr‹_415_∑ge
[] =

198 "<html>" 
CRLF


199 "<hód><tôÀ>415 Unsuµ‹ãd Medü Ty≥</tôÀ></hód>" 
CRLF


200 "<body bgcﬁ‹=\"whôe\">" 
CRLF


201 "<˚¡î><h1>415 Unsuµ‹ãd Medü Ty≥</h1></˚¡î>" 
CRLF


205 
	gngx_hâp_îr‹_416_∑ge
[] =

206 "<html>" 
CRLF


207 "<hód><tôÀ>416 Reque°ed R™gêNŸ S©isfübÀ</tôÀ></hód>" 
CRLF


208 "<body bgcﬁ‹=\"whôe\">" 
CRLF


209 "<˚¡î><h1>416 Reque°ed R™gêNŸ S©isfübÀ</h1></˚¡î>" 
CRLF


213 
	gngx_hâp_îr‹_494_∑ge
[] =

214 "<html>" 
CRLF


216 
CRLF


217 "<body bgcﬁ‹=\"whôe\">" 
CRLF


218 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


219 "<˚¡î>Reque° Hódî O∏Cookõ ToÿL¨ge</˚¡î>" 
CRLF


223 
	gngx_hâp_îr‹_495_∑ge
[] =

224 "<html>" 
CRLF


226 
CRLF


227 "<body bgcﬁ‹=\"whôe\">" 
CRLF


228 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


229 "<˚¡î>ThêSSL cîtifiˇãÉº‹</˚¡î>" 
CRLF


233 
	gngx_hâp_îr‹_496_∑ge
[] =

234 "<html>" 
CRLF


236 
CRLF


237 "<body bgcﬁ‹=\"whôe\">" 
CRLF


238 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


239 "<˚¡î>Nÿªquúed SSL cîtifiˇã wa†£¡</˚¡î>" 
CRLF


243 
	gngx_hâp_îr‹_497_∑ge
[] =

244 "<html>" 
CRLF


246 
CRLF


247 "<body bgcﬁ‹=\"whôe\">" 
CRLF


248 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


249 "<˚¡î>Thê∂aö HTTPÑeque° wa†£¡ÅÿHTTPSÖ‹t</˚¡î>" 
CRLF


253 
	gngx_hâp_îr‹_500_∑ge
[] =

254 "<html>" 
CRLF


255 "<hód><tôÀ>500 I¡î«»Sîvî Eº‹</tôÀ></hód>" 
CRLF


256 "<body bgcﬁ‹=\"whôe\">" 
CRLF


257 "<˚¡î><h1>500 I¡î«»Sîvî Eº‹</h1></˚¡î>" 
CRLF


261 
	gngx_hâp_îr‹_501_∑ge
[] =

262 "<html>" 
CRLF


263 "<hód><tôÀ>501 NŸ Im∂emíãd</tôÀ></hód>" 
CRLF


264 "<body bgcﬁ‹=\"whôe\">" 
CRLF


265 "<˚¡î><h1>501 NŸ Im∂emíãd</h1></˚¡î>" 
CRLF


269 
	gngx_hâp_îr‹_502_∑ge
[] =

270 "<html>" 
CRLF


271 "<hód><tôÀ>502 Bad G©eway</tôÀ></hód>" 
CRLF


272 "<body bgcﬁ‹=\"whôe\">" 
CRLF


273 "<˚¡î><h1>502 Bad G©eway</h1></˚¡î>" 
CRLF


277 
	gngx_hâp_îr‹_503_∑ge
[] =

278 "<html>" 
CRLF


279 "<hód><tôÀ>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</tôÀ></hód>" 
CRLF


280 "<body bgcﬁ‹=\"whôe\">" 
CRLF


281 "<˚¡î><h1>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</h1></˚¡î>" 
CRLF


285 
	gngx_hâp_îr‹_504_∑ge
[] =

286 "<html>" 
CRLF


287 "<hód><tôÀ>504 G©eway Time-out</tôÀ></hód>" 
CRLF


288 "<body bgcﬁ‹=\"whôe\">" 
CRLF


289 "<˚¡î><h1>504 G©eway Time-out</h1></˚¡î>" 
CRLF


293 
	gngx_hâp_îr‹_507_∑ge
[] =

294 "<html>" 
CRLF


295 "<hód><tôÀ>507 Insufficõ¡ St‹age</tôÀ></hód>" 
CRLF


296 "<body bgcﬁ‹=\"whôe\">" 
CRLF


297 "<˚¡î><h1>507 Insufficõ¡ St‹age</h1></˚¡î>" 
CRLF


301 
ngx_°r_t
 
	gngx_hâp_îr‹_∑ges
[] = {

303 
ngx_nuŒ_°rög
,

305 
	#NGX_HTTP_LAST_2XX
 202

	)

306 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 201)

	)

309 
ngx_°rög
(
ngx_hâp_îr‹_301_∑ge
),

310 
ngx_°rög
(
ngx_hâp_îr‹_302_∑ge
),

311 
ngx_°rög
(
ngx_hâp_îr‹_303_∑ge
),

312 
ngx_nuŒ_°rög
,

313 
ngx_nuŒ_°rög
,

314 
ngx_nuŒ_°rög
,

315 
ngx_°rög
(
ngx_hâp_îr‹_307_∑ge
),

317 
	#NGX_HTTP_LAST_3XX
 308

	)

318 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

320 
ngx_°rög
(
ngx_hâp_îr‹_400_∑ge
),

321 
ngx_°rög
(
ngx_hâp_îr‹_401_∑ge
),

322 
ngx_°rög
(
ngx_hâp_îr‹_402_∑ge
),

323 
ngx_°rög
(
ngx_hâp_îr‹_403_∑ge
),

324 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

325 
ngx_°rög
(
ngx_hâp_îr‹_405_∑ge
),

326 
ngx_°rög
(
ngx_hâp_îr‹_406_∑ge
),

327 
ngx_nuŒ_°rög
,

328 
ngx_°rög
(
ngx_hâp_îr‹_408_∑ge
),

329 
ngx_°rög
(
ngx_hâp_îr‹_409_∑ge
),

330 
ngx_°rög
(
ngx_hâp_îr‹_410_∑ge
),

331 
ngx_°rög
(
ngx_hâp_îr‹_411_∑ge
),

332 
ngx_°rög
(
ngx_hâp_îr‹_412_∑ge
),

333 
ngx_°rög
(
ngx_hâp_îr‹_413_∑ge
),

334 
ngx_°rög
(
ngx_hâp_îr‹_414_∑ge
),

335 
ngx_°rög
(
ngx_hâp_îr‹_415_∑ge
),

336 
ngx_°rög
(
ngx_hâp_îr‹_416_∑ge
),

338 
	#NGX_HTTP_LAST_4XX
 417

	)

339 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

341 
ngx_°rög
(
ngx_hâp_îr‹_494_∑ge
),

342 
ngx_°rög
(
ngx_hâp_îr‹_495_∑ge
),

343 
ngx_°rög
(
ngx_hâp_îr‹_496_∑ge
),

344 
ngx_°rög
(
ngx_hâp_îr‹_497_∑ge
),

345 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

346 
ngx_nuŒ_°rög
,

348 
ngx_°rög
(
ngx_hâp_îr‹_500_∑ge
),

349 
ngx_°rög
(
ngx_hâp_îr‹_501_∑ge
),

350 
ngx_°rög
(
ngx_hâp_îr‹_502_∑ge
),

351 
ngx_°rög
(
ngx_hâp_îr‹_503_∑ge
),

352 
ngx_°rög
(
ngx_hâp_îr‹_504_∑ge
),

353 
ngx_nuŒ_°rög
,

354 
ngx_nuŒ_°rög
,

355 
ngx_°rög
(
ngx_hâp_îr‹_507_∑ge
)

357 
	#NGX_HTTP_LAST_5XX
 508

	)

362 
ngx_°r_t
 
	gngx_hâp_gë_«me
 = { 3, (
u_ch¨
 *) "GET " };

365 
ngx_öt_t


366 
	$ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
)

368 
ngx_uöt_t
 
i
, 
îr
;

369 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

370 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

372 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

374 
îr‹
, &
r
->
uri
, &r->
¨gs
);

376 
r
->
îr_°©us
 = 
îr‹
;

378 i‡(
r
->
kì∑live
) {

379 
îr‹
) {

380 
NGX_HTTP_BAD_REQUEST
:

381 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
:

382 
NGX_HTTP_REQUEST_URI_TOO_LARGE
:

383 
NGX_HTTP_TO_HTTPS
:

384 
NGX_HTTPS_CERT_ERROR
:

385 
NGX_HTTPS_NO_CERT
:

386 
NGX_HTTP_INTERNAL_SERVER_ERROR
:

387 
NGX_HTTP_NOT_IMPLEMENTED
:

388 
r
->
kì∑live
 = 0;

392 i‡(
r
->
lögîög_˛o£
) {

393 
îr‹
) {

394 
NGX_HTTP_BAD_REQUEST
:

395 
NGX_HTTP_TO_HTTPS
:

396 
NGX_HTTPS_CERT_ERROR
:

397 
NGX_HTTPS_NO_CERT
:

398 
r
->
lögîög_˛o£
 = 0;

402 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

404 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

406 i‡(!
r
->
îr‹_∑ge
 && 
˛cf
->
îr‹_∑ges
 &&Ñ->
uri_ch™ges
 != 0) {

408 i‡(
˛cf
->
ªcursive_îr‹_∑ges
 == 0) {

409 
r
->
îr‹_∑ge
 = 1;

412 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

414 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

415 i‡(
îr_∑ge
[
i
].
°©us
 =
îr‹
) {

416  
	`ngx_hâp_£nd_îr‹_∑ge
(
r
, &
îr_∑ge
[
i
]);

421 
r
->
ex≥˘_ã°ed
 = 1;

423 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

424 
r
->
kì∑live
 = 0;

427 i‡(
˛cf
->
msõ_ª‰esh


428 && 
r
->
hódîs_ö
.
msõ


429 && (
îr‹
 =
NGX_HTTP_MOVED_PERMANENTLY


430 || 
îr‹
 =
NGX_HTTP_MOVED_TEMPORARILY
))

432  
	`ngx_hâp_£nd_ª‰esh
(
r
);

435 i‡(
îr‹
 =
NGX_HTTP_CREATED
) {

437 
îr
 = 0;

439 } i‡(
îr‹
 =
NGX_HTTP_NO_CONTENT
) {

441 
îr
 = 0;

443 } i‡(
îr‹
 >
NGX_HTTP_MOVED_PERMANENTLY


444 && 
îr‹
 < 
NGX_HTTP_LAST_3XX
)

447 
îr
 = 
îr‹
 - 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

449 } i‡(
îr‹
 >
NGX_HTTP_BAD_REQUEST


450 && 
îr‹
 < 
NGX_HTTP_LAST_4XX
)

453 
îr
 = 
îr‹
 - 
NGX_HTTP_BAD_REQUEST
 + 
NGX_HTTP_OFF_4XX
;

455 } i‡(
îr‹
 >
NGX_HTTP_NGINX_CODES


456 && 
îr‹
 < 
NGX_HTTP_LAST_5XX
)

459 
îr
 = 
îr‹
 - 
NGX_HTTP_NGINX_CODES
 + 
NGX_HTTP_OFF_5XX
;

460 
îr‹
) {

461 
NGX_HTTP_TO_HTTPS
:

462 
NGX_HTTPS_CERT_ERROR
:

463 
NGX_HTTPS_NO_CERT
:

464 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
:

465 
r
->
îr_°©us
 = 
NGX_HTTP_BAD_REQUEST
;

471 
îr
 = 0;

474  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
, 
îr
);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_moduÀ_t
 *
m
,

480 
ngx_öt_t
 
îr‹
)

482 *
˘x
;

483 
ngx_öt_t
 
rc
;

485 
	`ngx_hâp_˛ón_hódî
(
r
);

487 
˘x
 = 
NULL
;

489 i‡(
m
) {

490 
˘x
 = 
r
->˘x[
m
->
˘x_ödex
];

494 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

496 i‡(
m
) {

497 
r
->
˘x
[
m
->
˘x_ödex
] = ctx;

500 
r
->
fûãr_föÆize
 = 1;

502 
rc
 = 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
r
, 
îr‹
);

506 
rc
) {

508 
NGX_OK
:

509 
NGX_DONE
:

510  
NGX_ERROR
;

513  
rc
;

515 
	}
}

519 
	$ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
)

521 
	`ngx_memzîo
(&
r
->
hódîs_out
.
°©us
,

522 (
ngx_hâp_hódîs_out_t
)

523 - 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
°©us
));

525 
r
->
hódîs_out
.
hódîs
.
∑π
.
√…s
 = 0;

526 
r
->
hódîs_out
.
hódîs
.
∑π
.
√xt
 = 
NULL
;

527 
r
->
hódîs_out
.
hódîs
.
œ°
 = &r->hódîs_out.hódîs.
∑π
;

529 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

530 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
)

537 
ngx_öt_t
 
ovîwrôe
;

538 
ngx_°r_t
 
uri
, 
¨gs
;

539 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

540 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

542 
ovîwrôe
 = 
îr_∑ge
->overwrite;

544 i‡(
ovîwrôe
 && ovîwrôê!
NGX_HTTP_OK
) {

545 
r
->
ex≥˘_ã°ed
 = 1;

548 i‡(
ovîwrôe
 >= 0) {

549 
r
->
îr_°©us
 = 
ovîwrôe
;

552 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
îr_∑ge
->
vÆue
, &
uri
Ë!
NGX_OK
) {

553  
NGX_ERROR
;

556 i‡(
uri
.
d©a
[0] == '/') {

558 i‡(
îr_∑ge
->
vÆue
.
Àngths
) {

559 
	`ngx_hâp_•lô_¨gs
(
r
, &
uri
, &
¨gs
);

562 
¨gs
 = 
îr_∑ge
->args;

565 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

566 
r
->
mëhod
 = 
NGX_HTTP_GET
;

567 
r
->
mëhod_«me
 = 
ngx_hâp_gë_«me
;

570  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

573 i‡(
uri
.
d©a
[0] == '@') {

574  
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

577 
loˇti⁄
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

579 i‡(
loˇti⁄
 =
NULL
) {

580  
NGX_ERROR
;

583 i‡(
ovîwrôe
 !
NGX_HTTP_MOVED_PERMANENTLY


584 && 
ovîwrôe
 !
NGX_HTTP_MOVED_TEMPORARILY


585 && 
ovîwrôe
 !
NGX_HTTP_SEE_OTHER


586 && 
ovîwrôe
 !
NGX_HTTP_TEMPORARY_REDIRECT
)

588 
r
->
îr_°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

591 
loˇti⁄
->
hash
 = 1;

592 
	`ngx_°r_£t
(&
loˇti⁄
->
key
, "Location");

593 
loˇti⁄
->
vÆue
 = 
uri
;

595 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

597 
r
->
hódîs_out
.
loˇti⁄
 =Üocation;

599 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

601 i‡(
˛cf
->
msõ_ª‰esh
 && 
r
->
hódîs_ö
.
msõ
) {

602  
	`ngx_hâp_£nd_ª‰esh
(
r
);

605  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
,Ñ->
îr_°©us


606 - 
NGX_HTTP_MOVED_PERMANENTLY


607 + 
NGX_HTTP_OFF_3XX
);

608 
	}
}

611 
ngx_öt_t


612 
	$ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

613 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
)

615 
u_ch¨
 *
èû
;

616 
size_t
 
Àn
;

617 
ngx_öt_t
 
rc
;

618 
ngx_buf_t
 *
b
;

619 
ngx_uöt_t
 
msõ_∑ddög
;

620 
ngx_chaö_t
 
out
[3];

622 i‡(
˛cf
->
£rvî_tokís
) {

623 
Àn
 = (
ngx_hâp_îr‹_fuŒ_èû
) - 1;

624 
èû
 = 
ngx_hâp_îr‹_fuŒ_èû
;

627 
Àn
 = (
ngx_hâp_îr‹_èû
) - 1;

628 
èû
 = 
ngx_hâp_îr‹_èû
;

631 
msõ_∑ddög
 = 0;

633 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
) {

634 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 +Üen;

635 i‡(
˛cf
->
msõ_∑ddög


636 && (
r
->
hódîs_ö
.
msõ
 ||Ñ->hódîs_ö.
chrome
)

637 && 
r
->
hâp_vîsi⁄
 >
NGX_HTTP_VERSION_10


638 && 
îr
 >
NGX_HTTP_OFF_4XX
)

640 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 +=

641 (
ngx_hâp_msõ_∑ddög
) - 1;

642 
msõ_∑ddög
 = 1;

645 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

646 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

647 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

650 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

653 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

654 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

655 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

658 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

659 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

660 
	`ngx_hâp_˛ór_ëag
(
r
);

662 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

664 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

665  
rc
;

668 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 == 0) {

669  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

672 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

673 i‡(
b
 =
NULL
) {

674  
NGX_ERROR
;

677 
b
->
mem‹y
 = 1;

678 
b
->
pos
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
;

679 
b
->
œ°
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
 +Çgx_hâp_îr‹_∑ges[îr].
Àn
;

681 
out
[0].
buf
 = 
b
;

682 
out
[0].
√xt
 = &out[1];

684 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

685 i‡(
b
 =
NULL
) {

686  
NGX_ERROR
;

689 
b
->
mem‹y
 = 1;

691 
b
->
pos
 = 
èû
;

692 
b
->
œ°
 = 
èû
 + 
Àn
;

694 
out
[1].
buf
 = 
b
;

695 
out
[1].
√xt
 = 
NULL
;

697 i‡(
msõ_∑ddög
) {

698 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

699 i‡(
b
 =
NULL
) {

700  
NGX_ERROR
;

703 
b
->
mem‹y
 = 1;

704 
b
->
pos
 = 
ngx_hâp_msõ_∑ddög
;

705 
b
->
œ°
 = 
ngx_hâp_msõ_∑ddög
 + (ngx_http_msie_padding) - 1;

707 
out
[1].
√xt
 = &out[2];

708 
out
[2].
buf
 = 
b
;

709 
out
[2].
√xt
 = 
NULL
;

712 i‡(
r
 =r->
maö
) {

713 
b
->
œ°_buf
 = 1;

716 
b
->
œ°_ö_chaö
 = 1;

718  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[0]);

719 
	}
}

722 
ngx_öt_t


723 
	$ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
)

725 
u_ch¨
 *
p
, *
loˇti⁄
;

726 
size_t
 
Àn
, 
size
;

727 
uöçå_t
 
esˇ≥
;

728 
ngx_öt_t
 
rc
;

729 
ngx_buf_t
 *
b
;

730 
ngx_chaö_t
 
out
;

732 
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

733 
loˇti⁄
 = 
r
->
hódîs_out
.loˇti⁄->
vÆue
.
d©a
;

735 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

737 
size
 = (
ngx_hâp_msõ_ª‰esh_hód
) - 1

738 + 
esˇ≥
 + 
Àn


739 + (
ngx_hâp_msõ_ª‰esh_èû
) - 1;

741 
r
->
îr_°©us
 = 
NGX_HTTP_OK
;

743 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

744 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

745 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

747 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

748 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
;

750 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
size
;

752 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

753 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

754 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

757 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

758 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

759 
	`ngx_hâp_˛ór_ëag
(
r
);

761 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

763 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

764  
rc
;

767 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

768 i‡(
b
 =
NULL
) {

769  
NGX_ERROR
;

772 
p
 = 
	`ngx_˝ymem
(
b
->
pos
, 
ngx_hâp_msõ_ª‰esh_hód
,

773 (
ngx_hâp_msõ_ª‰esh_hód
) - 1);

775 i‡(
esˇ≥
 == 0) {

776 
p
 = 
	`ngx_˝ymem
’, 
loˇti⁄
, 
Àn
);

779 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

782 
b
->
œ°
 = 
	`ngx_˝ymem
(
p
, 
ngx_hâp_msõ_ª‰esh_èû
,

783 (
ngx_hâp_msõ_ª‰esh_èû
) - 1);

785 
b
->
œ°_buf
 = 1;

786 
b
->
œ°_ö_chaö
 = 1;

788 
out
.
buf
 = 
b
;

789 
out
.
√xt
 = 
NULL
;

791  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

792 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 #i‡(
NGX_HTTP_CACHE
)

14 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_up°ªam_t
 *
u
);

16 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_up°ªam_t
 *
u
);

18 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

24 
ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

26 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

27 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_evít_t
 *
ev
);

30 
ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_hâp_up°ªam_t
 *
u
);

32 
ngx_öt_t
 
ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_up°ªam_t
 *
u
);

34 
ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_up°ªam_t
 *
u
);

36 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_up°ªam_t
 *
u
);

38 
ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_up°ªam_t
 *
u
);

40 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_up°ªam_t
 *
u
);

42 
ngx_öt_t
 
ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_hâp_up°ªam_t
 *
u
);

44 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
);

45 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_up°ªam_t
 *
u
);

47 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_up°ªam_t
 *
u
);

49 
ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_up°ªam_t
 *
u
);

51 
ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
,

52 
ngx_hâp_up°ªam_t
 *
u
);

53 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

54 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

55 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_up°ªam_t
 *
u
);

57 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_hâp_up°ªam_t
 *
u
);

59 
ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
);

62 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_up°ªam_t
 *
u
);

67 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_uöt_t
 
do_wrôe
);

69 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
);

70 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
,

71 
ssize_t
 
byãs
);

72 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

73 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_up°ªam_t
 *
u
);

75 
ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

76 
ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_up°ªam_t
 *
u
);

78 
ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_up°ªam_t
 *
u
);

80 
ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
·_ty≥
);

82 
ngx_hâp_up°ªam_˛ónup
(*
d©a
);

83 
ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
);

86 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

88 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

90 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

92 
ngx_öt_t


93 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

95 
ngx_öt_t
 
ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

97 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

99 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

101 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

103 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

105 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

107 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

109 
ngx_öt_t


110 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

111 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

112 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

113 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

114 
ngx_öt_t


115 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

117 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

119 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

121 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

123 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
,

124 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

125 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

126 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

127 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

128 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

130 #i‡(
NGX_HTTP_GZIP
)

131 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

132 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

135 
ngx_öt_t
 
ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

136 
ngx_öt_t
 
ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

137 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

138 
ngx_öt_t
 
ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

139 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

140 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

141 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

142 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(

143 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

145 *
ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
);

146 *
ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

147 *
c⁄f
);

149 
ngx_addr_t
 *
ngx_hâp_up°ªam_gë_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

150 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
);

152 *
ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

153 *
ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

155 #i‡(
NGX_HTTP_SSL
)

156 
ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *,

157 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

158 
ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

162 
ngx_hâp_up°ªam_hódî_t
 
	gngx_hâp_up°ªam_hódîs_ö
[] = {

164 { 
ngx_°rög
("Status"),

165 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

166 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
°©us
),

167 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

169 { 
ngx_°rög
("Content-Type"),

170 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

171 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

172 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
, 0, 1 },

174 { 
ngx_°rög
("Content-Length"),

175 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
,

176 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

177 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

179 { 
ngx_°rög
("Date"),

180 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

181 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
d©e
),

182 
ngx_hâp_up°ªam_c›y_hódî_löe
,

183 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
), 0 },

185 { 
ngx_°rög
("Last-Modified"),

186 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

187 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
œ°_modifõd
),

188 
ngx_hâp_up°ªam_c›y_œ°_modifõd
, 0, 0 },

190 { 
ngx_°rög
("ETag"),

191 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

192 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ëag
),

193 
ngx_hâp_up°ªam_c›y_hódî_löe
,

194 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
), 0 },

196 { 
ngx_°rög
("Server"),

197 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

198 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
£rvî
),

199 
ngx_hâp_up°ªam_c›y_hódî_löe
,

200 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
), 0 },

202 { 
ngx_°rög
("WWW-Authenticate"),

203 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

204 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
www_authítiˇã
),

205 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

207 { 
ngx_°rög
("Location"),

208 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

209 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
loˇti⁄
),

210 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
, 0, 0 },

212 { 
ngx_°rög
("Refresh"),

213 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

214 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
, 0, 0 },

216 { 
ngx_°rög
("Set-Cookie"),

217 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
, 0,

218 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
, 0, 1 },

220 { 
ngx_°rög
("Content-Disposition"),

221 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

222 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 1 },

224 { 
ngx_°rög
("Cache-Control"),

225 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
, 0,

226 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
,

227 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
), 1 },

229 { 
ngx_°rög
("Expires"),

230 
ngx_hâp_up°ªam_¥o˚ss_expúes
, 0,

231 
ngx_hâp_up°ªam_c›y_hódî_löe
,

232 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
), 1 },

234 { 
ngx_°rög
("Accept-Ranges"),

235 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

236 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ac˚±_ønges
),

237 
ngx_hâp_up°ªam_c›y_Ælow_ønges
,

238 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
), 1 },

240 { 
ngx_°rög
("Connection"),

241 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
, 0,

242 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

244 { 
ngx_°rög
("Keep-Alive"),

245 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

246 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

248 { 
ngx_°rög
("X-Powered-By"),

249 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

250 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

252 { 
ngx_°rög
("X-Accel-Expires"),

253 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
, 0,

254 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

256 { 
ngx_°rög
("X-Accel-Redirect"),

257 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

258 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
x_ac˚l_ªdúe˘
),

259 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

261 { 
ngx_°rög
("X-Accel-Limit-Rate"),

262 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
, 0,

263 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

265 { 
ngx_°rög
("X-Accel-Buffering"),

266 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
, 0,

267 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

269 { 
ngx_°rög
("X-Accel-Charset"),

270 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
, 0,

271 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

273 { 
ngx_°rög
("Transfer-Encoding"),

274 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
, 0,

275 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

277 #i‡(
NGX_HTTP_GZIP
)

278 { 
ngx_°rög
("Content-Encoding"),

279 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

280 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ícodög
),

281 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
, 0, 0 },

284 { 
ngx_nuŒ_°rög
, 
NULL
, 0, NULL, 0, 0 }

288 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_comm™ds
[] = {

290 { 
ngx_°rög
("upstream"),

291 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

292 
ngx_hâp_up°ªam
,

295 
NULL
 },

297 { 
ngx_°rög
("server"),

298 
NGX_HTTP_UPS_CONF
|
NGX_CONF_1MORE
,

299 
ngx_hâp_up°ªam_£rvî
,

300 
NGX_HTTP_SRV_CONF_OFFSET
,

302 
NULL
 },

304 
ngx_nuŒ_comm™d


308 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ_˘x
 = {

309 
ngx_hâp_up°ªam_add_v¨übÀs
,

310 
NULL
,

312 
ngx_hâp_up°ªam_¸óã_maö_c⁄f
,

313 
ngx_hâp_up°ªam_öô_maö_c⁄f
,

315 
NULL
,

316 
NULL
,

318 
NULL
,

319 
NULL


323 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ
 = {

324 
NGX_MODULE_V1
,

325 &
ngx_hâp_up°ªam_moduÀ_˘x
,

326 
ngx_hâp_up°ªam_comm™ds
,

327 
NGX_HTTP_MODULE
,

328 
NULL
,

329 
NULL
,

330 
NULL
,

331 
NULL
,

332 
NULL
,

333 
NULL
,

334 
NULL
,

335 
NGX_MODULE_V1_PADDING


339 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_up°ªam_v¨s
[] = {

341 { 
ngx_°rög
("up°ªam_addr"), 
NULL
,

342 
ngx_hâp_up°ªam_addr_v¨übÀ
, 0,

343 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

345 { 
ngx_°rög
("up°ªam_°©us"), 
NULL
,

346 
ngx_hâp_up°ªam_°©us_v¨übÀ
, 0,

347 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

349 { 
ngx_°rög
("up°ªam_ª•⁄£_time"), 
NULL
,

350 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 0,

351 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

353 { 
ngx_°rög
("up°ªam_ª•⁄£_Àngth"), 
NULL
,

354 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
, 0,

355 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

357 #i‡(
NGX_HTTP_CACHE
)

359 { 
ngx_°rög
("up°ªam_ˇche_°©us"), 
NULL
,

360 
ngx_hâp_up°ªam_ˇche_°©us
, 0,

361 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

363 { 
ngx_°rög
("up°ªam_ˇche_œ°_modifõd"), 
NULL
,

364 
ngx_hâp_up°ªam_ˇche_œ°_modifõd
, 0,

365 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

369 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

373 
ngx_hâp_up°ªam_√xt_t
 
	gngx_hâp_up°ªam_√xt_îr‹s
[] = {

374 { 500, 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

375 { 502, 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

376 { 503, 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

377 { 504, 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

378 { 403, 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

379 { 404, 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

384 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ˇche_mëhod_mask
[] = {

385 { 
ngx_°rög
("GET"), 
NGX_HTTP_GET
},

386 { 
ngx_°rög
("HEAD"), 
NGX_HTTP_HEAD
 },

387 { 
ngx_°rög
("POST"), 
NGX_HTTP_POST
 },

388 { 
ngx_nuŒ_°rög
, 0 }

392 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ign‹e_hódîs_masks
[] = {

393 { 
ngx_°rög
("X-Ac˚l-Redúe˘"), 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 },

394 { 
ngx_°rög
("X-Ac˚l-Expúes"), 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 },

395 { 
ngx_°rög
("X-Ac˚l-Limô-R©e"), 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 },

396 { 
ngx_°rög
("X-Ac˚l-Buf„rög"), 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 },

397 { 
ngx_°rög
("X-Ac˚l-Ch¨£t"), 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 },

398 { 
ngx_°rög
("Expúes"), 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
 },

399 { 
ngx_°rög
("Cache-C⁄åﬁ"), 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 },

400 { 
ngx_°rög
("Së-Cookõ"), 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 },

401 { 
ngx_nuŒ_°rög
, 0 }

405 
ngx_öt_t


406 
	$ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

408 
ngx_hâp_up°ªam_t
 *
u
;

410 
u
 = 
r
->
up°ªam
;

412 i‡(
u
 && u->
˛ónup
) {

413 
r
->
maö
->
cou¡
++;

414 
	`ngx_hâp_up°ªam_˛ónup
(
r
);

417 
u
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_t
));

418 i‡(
u
 =
NULL
) {

419  
NGX_ERROR
;

422 
r
->
up°ªam
 = 
u
;

424 
u
->
≥î
.
log
 = 
r
->
c⁄√˘i⁄
->log;

425 
u
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

426 #i‡(
NGX_THREADS
)

427 
u
->
≥î
.
lock
 = &
r
->
c⁄√˘i⁄
->lock;

430 #i‡(
NGX_HTTP_CACHE
)

431 
r
->
ˇche
 = 
NULL
;

434 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

436  
NGX_OK
;

437 
	}
}

441 
	$ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
)

443 
ngx_c⁄√˘i⁄_t
 *
c
;

445 
c
 = 
r
->
c⁄√˘i⁄
;

447 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

448 "hâ∞öô up°ªam, clõ¡Åimî: %d", 
c
->
ªad
->
timî_£t
);

450 #i‡(
NGX_HTTP_SPDY
)

451 i‡(
r
->
•dy_°ªam
) {

452 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

457 i‡(
c
->
ªad
->
timî_£t
) {

458 
	`ngx_dñ_timî
(
c
->
ªad
);

461 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

463 i‡(!
c
->
wrôe
->
a˘ive
) {

464 i‡(
	`ngx_add_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLEAR_EVENT
)

465 =
NGX_ERROR
)

467 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

473 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

474 
	}
}

478 
	$ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

480 
ngx_°r_t
 *
ho°
;

481 
ngx_uöt_t
 
i
;

482 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ãmp
;

483 
ngx_hâp_˛ónup_t
 *
˛n
;

484 
ngx_hâp_up°ªam_t
 *
u
;

485 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

486 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

487 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

489 i‡(
r
->
aio
) {

493 
u
 = 
r
->
up°ªam
;

495 #i‡(
NGX_HTTP_CACHE
)

497 i‡(
u
->
c⁄f
->
ˇche
) {

498 
ngx_öt_t
 
rc
;

500 
rc
 = 
	`ngx_hâp_up°ªam_ˇche
(
r
, 
u
);

502 i‡(
rc
 =
NGX_BUSY
) {

503 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_öô_ªque°
;

507 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

509 i‡(
rc
 =
NGX_DONE
) {

513 i‡(
rc
 !
NGX_DECLINED
) {

514 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

521 
u
->
°‹e
 = (u->
c⁄f
->°‹ê|| u->c⁄f->
°‹e_Àngths
);

523 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

524 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

525 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
;

528 i‡(
r
->
ªque°_body
) {

529 
u
->
ªque°_bufs
 = 
r
->
ªque°_body
->
bufs
;

532 i‡(
u
->
	`¸óã_ªque°
(
r
Ë!
NGX_OK
) {

533 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

537 
u
->
≥î
.
loˇl
 = 
	`ngx_hâp_up°ªam_gë_loˇl
(
r
, u->
c⁄f
->local);

539 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

541 
u
->
ouçut
.
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

542 
u
->
ouçut
.
poﬁ
 = 
r
->pool;

543 
u
->
ouçut
.
bufs
.
num
 = 1;

544 
u
->
ouçut
.
bufs
.
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

545 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_chaö_wrôî
;

546 
u
->
ouçut
.
fûãr_˘x
 = &u->
wrôî
;

548 
u
->
wrôî
.
poﬁ
 = 
r
->pool;

550 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

552 
r
->
up°ªam_°©es
 = 
	`ngx_¨øy_¸óã
‘->
poﬁ
, 1,

553 (
ngx_hâp_up°ªam_°©e_t
));

554 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

555 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

561 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

562 i‡(
u
->
°©e
 =
NULL
) {

563 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

564 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

568 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

571 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

572 i‡(
˛n
 =
NULL
) {

573 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

577 
˛n
->
h™dÀr
 = 
ngx_hâp_up°ªam_˛ónup
;

578 
˛n
->
d©a
 = 
r
;

579 
u
->
˛ónup
 = &
˛n
->
h™dÀr
;

581 i‡(
u
->
ªsﬁved
 =
NULL
) {

583 
uscf
 = 
u
->
c⁄f
->
up°ªam
;

587 i‡(
u
->
ªsﬁved
->
sockaddr
) {

589 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
u
->
ªsﬁved
)

590 !
NGX_OK
)

592 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

593 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

597 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

602 
ho°
 = &
u
->
ªsﬁved
->host;

604 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

606 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

608 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

610 
uscf
 = 
uscÂ
[
i
];

612 i‡(
uscf
->
ho°
.
Àn
 == host->len

613 && ((
uscf
->
p‹t
 =0 && 
u
->
ªsﬁved
->
no_p‹t
)

614 || 
uscf
->
p‹t
 =
u
->
ªsﬁved
->port)

615 && 
	`ngx_°∫ˇ£cmp
(
uscf
->
ho°
.
d©a
, ho°->d©a, ho°->
Àn
) == 0)

617 
found
;

621 i‡(
u
->
ªsﬁved
->
p‹t
 == 0) {

622 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

623 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

624 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

625 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

629 
ãmp
.
«me
 = *
ho°
;

631 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
˛cf
->
ªsﬁvî
, &
ãmp
);

632 i‡(
˘x
 =
NULL
) {

633 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

634 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

638 i‡(
˘x
 =
NGX_NO_RESOLVER
) {

639 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

640 "nÿªsﬁvî deföedÅÿªsﬁvê%V", 
ho°
);

642 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

646 
˘x
->
«me
 = *
ho°
;

647 
˘x
->
h™dÀr
 = 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
;

648 
˘x
->
d©a
 = 
r
;

649 
˘x
->
timeout
 = 
˛cf
->
ªsﬁvî_timeout
;

651 
u
->
ªsﬁved
->
˘x
 = ctx;

653 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

654 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

655 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

656 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

663 
found
:

665 i‡(
uscf
 =
NULL
) {

666 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

668 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

669 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

673 i‡(
uscf
->
≥î
.
	`öô
(
r
, uscfË!
NGX_OK
) {

674 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

675 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

679 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

680 
	}
}

683 #i‡(
NGX_HTTP_CACHE
)

685 
ngx_öt_t


686 
	$ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

688 
ngx_öt_t
 
rc
;

689 
ngx_hâp_ˇche_t
 *
c
;

691 
c
 = 
r
->
ˇche
;

693 i‡(
c
 =
NULL
) {

695 i‡(!(
r
->
mëhod
 & 
u
->
c⁄f
->
ˇche_mëhods
)) {

696  
NGX_DECLINED
;

699 i‡(
r
->
mëhod
 & 
NGX_HTTP_HEAD
) {

700 
u
->
mëhod
 = 
ngx_hâp_c‹e_gë_mëhod
;

703 i‡(
	`ngx_hâp_fûe_ˇche_√w
(
r
Ë!
NGX_OK
) {

704  
NGX_ERROR
;

707 i‡(
u
->
	`¸óã_key
(
r
Ë!
NGX_OK
) {

708  
NGX_ERROR
;

713 
	`ngx_hâp_fûe_ˇche_¸óã_key
(
r
);

715 i‡(
r
->
ˇche
->
hódî_°¨t
 + 256 >
u
->
c⁄f
->
buf„r_size
) {

716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

719 &
u
->
c⁄f
->
moduÀ
, u->c⁄f->
buf„r_size
,

720 
	`ngx_Æign
(
r
->
ˇche
->
hódî_°¨t
 + 256, 1024));

722 
r
->
ˇche
 = 
NULL
;

723  
NGX_DECLINED
;

726 
u
->
ˇchóbÀ
 = 1;

728 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
ˇche_by∑ss
)) {

730 
NGX_ERROR
:

731  
NGX_ERROR
;

733 
NGX_DECLINED
:

734 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_BYPASS
;

735  
NGX_DECLINED
;

741 
c
 = 
r
->
ˇche
;

743 
c
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

744 
c
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

745 
c
->
fûe_ˇche
 = 
u
->
c⁄f
->
ˇche
->
d©a
;

747 
c
->
lock
 = 
u
->
c⁄f
->
ˇche_lock
;

748 
c
->
lock_timeout
 = 
u
->
c⁄f
->
ˇche_lock_timeout
;

750 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_MISS
;

753 
rc
 = 
	`ngx_hâp_fûe_ˇche_›í
(
r
);

755 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

756 "hâ∞up°ªam cache: %i", 
rc
);

758 
rc
) {

760 
NGX_HTTP_CACHE_UPDATING
:

762 i‡(
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_UPDATING
) {

763 
u
->
ˇche_°©us
 = 
rc
;

764 
rc
 = 
NGX_OK
;

767 
rc
 = 
NGX_HTTP_CACHE_STALE
;

772 
NGX_OK
:

773 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

776 
rc
) {

778 
NGX_OK
:

780 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

782 i‡(
rc
 !
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

783  
rc
;

788 
NGX_HTTP_CACHE_STALE
:

790 
c
->
vÆid_£c
 = 0;

791 
u
->
buf„r
.
°¨t
 = 
NULL
;

792 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_EXPIRED
;

796 
NGX_DECLINED
:

798 i‡((
size_t
Ë(
u
->
buf„r
.
íd
 - u->buf„r.
°¨t
Ë< u->
c⁄f
->
buf„r_size
) {

799 
u
->
buf„r
.
°¨t
 = 
NULL
;

802 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
 + 
c
->
hódî_°¨t
;

803 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

808 
NGX_HTTP_CACHE_SCARCE
:

810 
u
->
ˇchóbÀ
 = 0;

814 
NGX_AGAIN
:

816  
NGX_BUSY
;

818 
NGX_ERROR
:

820  
NGX_ERROR
;

826 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

828  
rc
;

831 
r
->
ˇched
 = 0;

833  
NGX_DECLINED
;

834 
	}
}

837 
ngx_öt_t


838 
	$ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

840 
ngx_öt_t
 
rc
;

841 
ngx_hâp_ˇche_t
 *
c
;

843 
r
->
ˇched
 = 1;

844 
c
 = 
r
->
ˇche
;

846 i‡(
c
->
hódî_°¨t
 =c->
body_°¨t
) {

847 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

848  
	`ngx_hâp_ˇche_£nd
(
r
);

853 
u
->
buf„r
 = *
c
->
buf
;

854 
u
->
buf„r
.
pos
 +
c
->
hódî_°¨t
;

856 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

857 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

859 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

860 (
ngx_èbÀ_ñt_t
))

861 !
NGX_OK
)

863  
NGX_ERROR
;

866 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

868 i‡(
rc
 =
NGX_OK
) {

870 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

871  
NGX_DONE
;

874  
	`ngx_hâp_ˇche_£nd
(
r
);

877 i‡(
rc
 =
NGX_ERROR
) {

878  
NGX_ERROR
;

885  
rc
;

886 
	}
}

892 
	$ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

894 
ngx_c⁄√˘i⁄_t
 *
c
;

895 
ngx_hâp_ªque°_t
 *
r
;

896 
ngx_hâp_up°ªam_t
 *
u
;

897 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
;

899 
r
 = 
˘x
->
d©a
;

900 
c
 = 
r
->
c⁄√˘i⁄
;

902 
u
 = 
r
->
up°ªam
;

903 
ur
 = 
u
->
ªsﬁved
;

905 i‡(
˘x
->
°©e
) {

906 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

908 &
˘x
->
«me
, ctx->
°©e
,

909 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

911 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

912 
Áûed
;

915 
ur
->
«ddrs
 = 
˘x
->naddrs;

916 
ur
->
addrs
 = 
˘x
->addrs;

918 #i‡(
NGX_DEBUG
)

920 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

921 
ngx_°r_t
 
addr
;

922 
ngx_uöt_t
 
i
;

924 
addr
.
d©a
 = 
ãxt
;

926 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

927 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
ur
->
addrs
[
i
].
sockaddr
, ur->addrs[i].
sockÀn
,

928 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

930 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

931 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

936 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
ur
Ë!
NGX_OK
) {

937 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

938 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

939 
Áûed
;

942 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

943 
ur
->
˘x
 = 
NULL
;

945 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

947 
Áûed
:

949 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

950 
	}
}

954 
	$ngx_hâp_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

956 
ngx_c⁄√˘i⁄_t
 *
c
;

957 
ngx_hâp_ªque°_t
 *
r
;

958 
ngx_hâp_log_˘x_t
 *
˘x
;

959 
ngx_hâp_up°ªam_t
 *
u
;

961 
c
 = 
ev
->
d©a
;

962 
r
 = 
c
->
d©a
;

964 
u
 = 
r
->
up°ªam
;

965 
c
 = 
r
->
c⁄√˘i⁄
;

967 
˘x
 = 
c
->
log
->
d©a
;

968 
˘x
->
cuºít_ªque°
 = 
r
;

970 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

971 "hâ∞up°ªamÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

973 i‡(
ev
->
wrôe
) {

974 
u
->
	`wrôe_evít_h™dÀr
(
r
, u);

977 
u
->
	`ªad_evít_h™dÀr
(
r
, u);

980 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

981 
	}
}

985 
	$ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

987 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
ªad
);

988 
	}
}

992 
	$ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

994 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
wrôe
);

995 
	}
}

999 
	$ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1000 
ngx_evít_t
 *
ev
)

1002 
n
;

1003 
buf
[1];

1004 
ngx_îr_t
 
îr
;

1005 
ngx_öt_t
 
evít
;

1006 
ngx_c⁄√˘i⁄_t
 *
c
;

1007 
ngx_hâp_up°ªam_t
 *
u
;

1009 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

1011 
ev
->
wrôe
, &
r
->
uri
);

1013 
c
 = 
r
->
c⁄√˘i⁄
;

1014 
u
 = 
r
->
up°ªam
;

1016 i‡(
c
->
îr‹
) {

1017 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1019 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1021 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1022 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1023 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1028 i‡(!
u
->
ˇchóbÀ
) {

1029 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1030 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1036 #i‡(
NGX_HTTP_SPDY
)

1037 i‡(
r
->
•dy_°ªam
) {

1042 #i‡(
NGX_HAVE_KQUEUE
)

1044 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1046 i‡(!
ev
->
≥ndög_eof
) {

1050 
ev
->
eof
 = 1;

1051 
c
->
îr‹
 = 1;

1053 i‡(
ev
->
kq_î∫o
) {

1054 
ev
->
îr‹
 = 1;

1057 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1058 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1061 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1062 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1066 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1070 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1071 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1072 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1080 #i‡(
NGX_HAVE_EPOLLRDHUP
)

1082 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
Ë&& 
ev
->
≥ndög_eof
) {

1083 
sockÀn_t
 
Àn
;

1085 
ev
->
eof
 = 1;

1086 
c
->
îr‹
 = 1;

1088 
îr
 = 0;

1089 
Àn
 = (
ngx_îr_t
);

1096 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1099 
îr
 = 
ngx_sockë_î∫o
;

1102 i‡(
îr
) {

1103 
ev
->
îr‹
 = 1;

1106 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1107 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1110 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1111 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1115 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1119 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1120 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1121 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1129 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

1131 
îr
 = 
ngx_sockë_î∫o
;

1133 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 
îr
,

1134 "hâ∞up°ªamÑecv(): %d", 
n
);

1136 i‡(
ev
->
wrôe
 && (
n
 >0 || 
îr
 =
NGX_EAGAIN
)) {

1140 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1142 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1144 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1145 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1146 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1151 i‡(
n
 > 0) {

1155 i‡(
n
 == -1) {

1156 i‡(
îr
 =
NGX_EAGAIN
) {

1160 
ev
->
îr‹
 = 1;

1163 
îr
 = 0;

1166 
ev
->
eof
 = 1;

1167 
c
->
îr‹
 = 1;

1169 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1170 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1173 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1174 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1178 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1181 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1182 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1183 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1185 
	}
}

1189 
	$ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1191 
ngx_öt_t
 
rc
;

1192 
ngx_time_t
 *
ç
;

1193 
ngx_c⁄√˘i⁄_t
 *
c
;

1195 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1197 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

1198 
ç
 = 
	`ngx_timeofday
();

1199 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

1200 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

1203 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

1204 i‡(
u
->
°©e
 =
NULL
) {

1205 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1206 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1210 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

1212 
ç
 = 
	`ngx_timeofday
();

1213 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
;

1214 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
;

1216 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
u
->
≥î
);

1218 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1219 "hâ∞up°ªam c⁄√˘: %i", 
rc
);

1221 i‡(
rc
 =
NGX_ERROR
) {

1222 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1223 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1227 
u
->
°©e
->
≥î
 = u->≥î.
«me
;

1229 i‡(
rc
 =
NGX_BUSY
) {

1230 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "noÜive upstreams");

1231 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_NOLIVE
);

1235 i‡(
rc
 =
NGX_DECLINED
) {

1236 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1242 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1244 
c
->
d©a
 = 
r
;

1246 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1247 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1249 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
;

1250 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_hódî
;

1252 
c
->
£ndfûe
 &
r
->
c⁄√˘i⁄
->sendfile;

1253 
u
->
ouçut
.
£ndfûe
 = 
c
->sendfile;

1255 i‡(
c
->
poﬁ
 =
NULL
) {

1259 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
r
->
c⁄√˘i⁄
->
log
);

1260 i‡(
c
->
poﬁ
 =
NULL
) {

1261 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1262 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1267 
c
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1268 
c
->
poﬁ
->
log
 = c->log;

1269 
c
->
ªad
->
log
 = c->log;

1270 
c
->
wrôe
->
log
 = c->log;

1274 
u
->
wrôî
.
out
 = 
NULL
;

1275 
u
->
wrôî
.
œ°
 = &u->wrôî.
out
;

1276 
u
->
wrôî
.
c⁄√˘i⁄
 = 
c
;

1277 
u
->
wrôî
.
limô
 = 0;

1279 i‡(
u
->
ªque°_£¡
) {

1280 i‡(
	`ngx_hâp_up°ªam_ªöô
(
r
, 
u
Ë!
NGX_OK
) {

1281 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1282 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1287 i‡(
r
->
ªque°_body


1288 && 
r
->
ªque°_body
->
buf


1289 && 
r
->
ªque°_body
->
ãmp_fûe


1290 && 
r
 =r->
maö
)

1297 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1298 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1299 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1300 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1304 
u
->
ouçut
.
‰ì
->
buf
 = 
r
->
ªque°_body
->buf;

1305 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1306 
u
->
ouçut
.
Æloˇãd
 = 1;

1308 
r
->
ªque°_body
->
buf
->
pos
 =Ñ->ªque°_body->buf->
°¨t
;

1309 
r
->
ªque°_body
->
buf
->
œ°
 =Ñ->ªque°_body->buf->
°¨t
;

1310 
r
->
ªque°_body
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1313 
u
->
ªque°_£¡
 = 0;

1315 i‡(
rc
 =
NGX_AGAIN
) {

1316 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1320 #i‡(
NGX_HTTP_SSL
)

1322 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1323 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1329 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1330 
	}
}

1333 #i‡(
NGX_HTTP_SSL
)

1336 
	$ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1337 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
)

1339 
ngx_öt_t
 
rc
;

1341 i‡(
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1342 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1346 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
u
->
c⁄f
->
s¶
, 
c
,

1347 
NGX_SSL_BUFFER
|
NGX_SSL_CLIENT
)

1348 !
NGX_OK
)

1350 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1351 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1355 
c
->
£ndfûe
 = 0;

1356 
u
->
ouçut
.
£ndfûe
 = 0;

1358 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1359 i‡(
u
->
≥î
.
	`£t_£ssi⁄
(&u->≥î, u->≥î.
d©a
Ë!
NGX_OK
) {

1360 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1361 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1366 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "SSL handshakingÅo upstream";

1368 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

1370 i‡(
rc
 =
NGX_AGAIN
) {

1371 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_s¶_h™dshake
;

1375 
	`ngx_hâp_up°ªam_s¶_h™dshake
(
c
);

1376 
	}
}

1380 
	$ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

1382 
ngx_hâp_ªque°_t
 *
r
;

1383 
ngx_hâp_up°ªam_t
 *
u
;

1385 
r
 = 
c
->
d©a
;

1386 
u
 = 
r
->
up°ªam
;

1388 i‡(
c
->
s¶
->
h™dshaked
) {

1390 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1391 
u
->
≥î
.
	`ßve_£ssi⁄
(&u->≥î, u->≥î.
d©a
);

1394 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1395 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1397 
c
 = 
r
->
c⁄√˘i⁄
;

1399 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1401 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1405 
c
 = 
r
->
c⁄√˘i⁄
;

1407 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1409 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1410 
	}
}

1415 
ngx_öt_t


1416 
	$ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1418 
ngx_chaö_t
 *
˛
;

1420 i‡(
u
->
	`ªöô_ªque°
(
r
Ë!
NGX_OK
) {

1421  
NGX_ERROR
;

1424 
u
->
kì∑live
 = 0;

1425 
u
->
upgøde
 = 0;

1427 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

1428 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1430 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1431 (
ngx_èbÀ_ñt_t
))

1432 !
NGX_OK
)

1434  
NGX_ERROR
;

1439 
˛
 = 
u
->
ªque°_bufs
; cl; c»˛->
√xt
) {

1440 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

1441 
˛
->
buf
->
fûe_pos
 = 0;

1446 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe


1447 && 
r
 !r->
maö
 && 
u
->
ouçut
.
buf
)

1449 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1450 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1451  
NGX_ERROR
;

1454 
u
->
ouçut
.
‰ì
->
buf
 = u->output.buf;

1455 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1457 
u
->
ouçut
.
buf
->
pos
 = u->ouçut.buf->
°¨t
;

1458 
u
->
ouçut
.
buf
->
œ°
 = u->ouçut.buf->
°¨t
;

1461 
u
->
ouçut
.
buf
 = 
NULL
;

1462 
u
->
ouçut
.
ö
 = 
NULL
;

1463 
u
->
ouçut
.
busy
 = 
NULL
;

1467 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1469 #i‡(
NGX_HTTP_CACHE
)

1471 i‡(
r
->
ˇche
) {

1472 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1477 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1479  
NGX_OK
;

1480 
	}
}

1484 
	$ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1486 
ngx_öt_t
 
rc
;

1487 
ngx_c⁄√˘i⁄_t
 *
c
;

1489 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1491 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1494 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1495 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1499 
c
->
log
->
a˘i⁄
 = "sendingÑequestÅo upstream";

1501 
rc
 = 
	`ngx_ouçut_chaö
(&
u
->
ouçut
, u->
ªque°_£¡
 ? 
NULL
 : u->
ªque°_bufs
);

1503 
u
->
ªque°_£¡
 = 1;

1505 i‡(
rc
 =
NGX_ERROR
) {

1506 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1510 i‡(
c
->
wrôe
->
timî_£t
) {

1511 
	`ngx_dñ_timî
(
c
->
wrôe
);

1514 i‡(
rc
 =
NGX_AGAIN
) {

1515 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

1517 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
Ë!
NGX_OK
) {

1518 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1519 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1528 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

1529 i‡(
	`ngx_t˝_push
(
c
->
fd
Ë=
NGX_ERROR
) {

1530 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
ngx_sockë_î∫o
,

1531 
ngx_t˝_push_n
 " failed");

1532 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1533 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1537 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

1540 
	`ngx_add_timî
(
c
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

1542 i‡(
c
->
ªad
->
ªady
) {

1543 
	`ngx_hâp_up°ªam_¥o˚ss_hódî
(
r
, 
u
);

1547 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1549 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1550 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1551 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1554 
	}
}

1558 
	$ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

1559 
ngx_hâp_up°ªam_t
 *
u
)

1561 
ngx_c⁄√˘i⁄_t
 *
c
;

1563 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1565 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1568 i‡(
c
->
wrôe
->
timedout
) {

1569 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1573 #i‡(
NGX_HTTP_SSL
)

1575 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1576 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1582 i‡(
u
->
hódî_£¡
) {

1583 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1585 (Ë
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0);

1590 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1591 
	}
}

1595 
	$ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1597 
ssize_t
 
n
;

1598 
ngx_öt_t
 
rc
;

1599 
ngx_c⁄√˘i⁄_t
 *
c
;

1601 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1603 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1606 
c
->
log
->
a˘i⁄
 = "readingÑesponse header from upstream";

1608 i‡(
c
->
ªad
->
timedout
) {

1609 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1613 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1614 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1618 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1619 
u
->
buf„r
.
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, u->
c⁄f
->
buf„r_size
);

1620 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1621 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1622 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1626 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1627 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

1628 
u
->
buf„r
.
íd
 = u->buf„r.
°¨t
 + u->
c⁄f
->
buf„r_size
;

1629 
u
->
buf„r
.
ãmp‹¨y
 = 1;

1631 
u
->
buf„r
.
èg
 = u->
ouçut
.tag;

1633 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1634 (
ngx_èbÀ_ñt_t
))

1635 !
NGX_OK
)

1637 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1638 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1642 #i‡(
NGX_HTTP_CACHE
)

1644 i‡(
r
->
ˇche
) {

1645 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1646 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1653 
n
 = 
c
->
	`ªcv
(c, 
u
->
buf„r
.
œ°
, u->buf„r.
íd
 - u->buffer.last);

1655 i‡(
n
 =
NGX_AGAIN
) {

1657 
	`ngx_add_timî
(
ªv
, 
u
->
ªad_timeout
);

1660 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1661 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1662 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1669 i‡(
n
 == 0) {

1670 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1674 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

1675 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1679 
u
->
buf„r
.
œ°
 +
n
;

1682 
u
->
vÆid_hódî_ö
 = 0;

1684 
u
->
≥î
.
ˇched
 = 0;

1687 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

1689 i‡(
rc
 =
NGX_AGAIN
) {

1691 i‡(
u
->
buf„r
.
œ°
 =u->buf„r.
íd
) {

1692 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1695 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
,

1696 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1706 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

1707 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1711 i‡(
rc
 =
NGX_ERROR
) {

1712 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1713 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1719 i‡(
u
->
hódîs_ö
.
°©us_n
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

1721 i‡(
	`ngx_hâp_up°ªam_ã°_√xt
(
r
, 
u
Ë=
NGX_OK
) {

1725 i‡(
	`ngx_hâp_up°ªam_öãr˚±_îr‹s
(
r
, 
u
Ë=
NGX_OK
) {

1730 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

1734 i‡(!
r
->
subªque°_ö_mem‹y
) {

1735 
	`ngx_hâp_up°ªam_£nd_ª•⁄£
(
r
, 
u
);

1741 i‡(
u
->
öput_fûãr
 =
NULL
) {

1742 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

1743 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

1744 
u
->
öput_fûãr_˘x
 = 
r
;

1747 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

1748 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

1752 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1754 i‡(
n
) {

1755 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1757 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

1759 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

1760 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

1765 i‡(
u
->
Àngth
 == 0) {

1766 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

1770 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
;

1772 
	`ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
r
, 
u
);

1773 
	}
}

1776 
ngx_öt_t


1777 
	$ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1779 
ngx_uöt_t
 
°©us
;

1780 
ngx_hâp_up°ªam_√xt_t
 *
un
;

1782 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1784 
un
 = 
ngx_hâp_up°ªam_√xt_îr‹s
; un->
°©us
; un++) {

1786 i‡(
°©us
 !
un
->status) {

1790 i‡(
u
->
≥î
.
åõs
 > 1 && (u->
c⁄f
->
√xt_up°ªam
 & 
un
->
mask
)) {

1791 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
un
->
mask
);

1792  
NGX_OK
;

1795 #i‡(
NGX_HTTP_CACHE
)

1797 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


1798 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
un
->
mask
))

1800 
ngx_öt_t
 
rc
;

1802 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

1804 i‡(
rc
 =
NGX_OK
) {

1805 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

1806 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

1809 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

1810  
NGX_OK
;

1816 #i‡(
NGX_HTTP_CACHE
)

1818 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED


1819 && 
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


1820 && 
u
->
c⁄f
->
ˇche_ªvÆid©e
)

1822 
time_t
 
now
, 
vÆid
;

1823 
ngx_öt_t
 
rc
;

1825 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1828 
now
 = 
	`ngx_time
();

1829 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

1831 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

1833 i‡(
rc
 !
NGX_OK
) {

1834 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

1835  
NGX_OK
;

1838 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_REVALIDATED
;

1839 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

1841 i‡(
vÆid
 == 0) {

1842 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

1845 i‡(
vÆid
 == 0) {

1846 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

1847 
u
->
hódîs_ö
.
°©us_n
);

1848 i‡(
vÆid
) {

1849 
vÆid
 = 
now
 + valid;

1853 i‡(
vÆid
) {

1854 
r
->
ˇche
->
vÆid_£c
 = 
vÆid
;

1855 
r
->
ˇche
->
d©e
 = 
now
;

1857 
	`ngx_hâp_fûe_ˇche_upd©e_hódî
(
r
);

1860 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

1861  
NGX_OK
;

1866  
NGX_DECLINED
;

1867 
	}
}

1870 
ngx_öt_t


1871 
	$ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

1872 
ngx_hâp_up°ªam_t
 *
u
)

1874 
ngx_öt_t
 
°©us
;

1875 
ngx_uöt_t
 
i
;

1876 
ngx_èbÀ_ñt_t
 *
h
;

1877 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

1878 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1880 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1882 i‡(
°©us
 =
NGX_HTTP_NOT_FOUND
 && 
u
->
c⁄f
->
öãr˚±_404
) {

1883 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_NOT_FOUND
);

1884  
NGX_OK
;

1887 i‡(!
u
->
c⁄f
->
öãr˚±_îr‹s
) {

1888  
NGX_DECLINED
;

1891 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1893 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

1894  
NGX_DECLINED
;

1897 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

1898 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

1900 i‡(
îr_∑ge
[
i
].
°©us
 == status) {

1902 i‡(
°©us
 =
NGX_HTTP_UNAUTHORIZED


1903 && 
u
->
hódîs_ö
.
www_authítiˇã
)

1905 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1907 i‡(
h
 =
NULL
) {

1908 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1909 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1910  
NGX_OK
;

1913 *
h
 = *
u
->
hódîs_ö
.
www_authítiˇã
;

1915 
r
->
hódîs_out
.
www_authítiˇã
 = 
h
;

1918 #i‡(
NGX_HTTP_CACHE
)

1920 i‡(
r
->
ˇche
) {

1921 
time_t
 
vÆid
;

1923 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
°©us
);

1925 i‡(
vÆid
) {

1926 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

1927 
r
->
ˇche
->
îr‹
 = 
°©us
;

1930 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

1933 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

1935  
NGX_OK
;

1939  
NGX_DECLINED
;

1940 
	}
}

1943 
ngx_öt_t


1944 
	$ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
)

1946 
îr
;

1947 
sockÀn_t
 
Àn
;

1949 #i‡(
NGX_HAVE_KQUEUE
)

1951 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1952 i‡(
c
->
wrôe
->
≥ndög_eof
 || c->
ªad
->pending_eof) {

1953 i‡(
c
->
wrôe
->
≥ndög_eof
) {

1954 
îr
 = 
c
->
wrôe
->
kq_î∫o
;

1957 
îr
 = 
c
->
ªad
->
kq_î∫o
;

1960 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1961 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

1963  
NGX_ERROR
;

1969 
îr
 = 0;

1970 
Àn
 = ();

1977 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1980 
îr
 = 
ngx_sockë_î∫o
;

1983 i‡(
îr
) {

1984 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1985 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "connect() failed");

1986  
NGX_ERROR
;

1990  
NGX_OK
;

1991 
	}
}

1994 
ngx_öt_t


1995 
	$ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1997 
ngx_°r_t
 
uri
, 
¨gs
;

1998 
ngx_uöt_t
 
i
, 
Êags
;

1999 
ngx_li°_∑π_t
 *
∑π
;

2000 
ngx_èbÀ_ñt_t
 *
h
;

2001 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

2002 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

2004 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

2006 i‡(
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘


2007 && !(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
))

2009 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DECLINED
);

2011 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

2012 
h
 = 
∑π
->
ñts
;

2014 
i
 = 0; ; i++) {

2016 i‡(
i
 >
∑π
->
√…s
) {

2017 i‡(
∑π
->
√xt
 =
NULL
) {

2021 
∑π
 =Ö¨t->
√xt
;

2022 
h
 = 
∑π
->
ñts
;

2023 
i
 = 0;

2026 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2027 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2029 i‡(
hh
 && hh->
ªdúe˘
) {

2030 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

2031 
	`ngx_hâp_föÆize_ªque°
(
r
,

2032 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2033  
NGX_DONE
;

2038 
uri
 = 
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘
->
vÆue
;

2039 
	`ngx_°r_nuŒ
(&
¨gs
);

2040 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2042 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2043 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

2044  
NGX_DONE
;

2047 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

2048 
r
->
mëhod
 = 
NGX_HTTP_GET
;

2051 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

2052 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

2053  
NGX_DONE
;

2056 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

2057 
h
 = 
∑π
->
ñts
;

2059 
i
 = 0; ; i++) {

2061 i‡(
i
 >
∑π
->
√…s
) {

2062 i‡(
∑π
->
√xt
 =
NULL
) {

2066 
∑π
 =Ö¨t->
√xt
;

2067 
h
 = 
∑π
->
ñts
;

2068 
i
 = 0;

2071 i‡(
	`ngx_hash_föd
(&
u
->
c⁄f
->
hide_hódîs_hash
, 
h
[
i
].
hash
,

2072 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
))

2077 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2078 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2080 i‡(
hh
) {

2081 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

2082 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2083 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2084  
NGX_DONE
;

2090 i‡(
	`ngx_hâp_up°ªam_c›y_hódî_löe
(
r
, &
h
[
i
], 0Ë!
NGX_OK
) {

2091 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2092 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2093  
NGX_DONE
;

2097 i‡(
r
->
hódîs_out
.
£rvî
 &&Ñ->hódîs_out.£rvî->
vÆue
.
d©a
 =
NULL
) {

2098 
r
->
hódîs_out
.
£rvî
->
hash
 = 0;

2101 i‡(
r
->
hódîs_out
.
d©e
 &&Ñ->hódîs_out.d©e->
vÆue
.
d©a
 =
NULL
) {

2102 
r
->
hódîs_out
.
d©e
->
hash
 = 0;

2105 
r
->
hódîs_out
.
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2106 
r
->
hódîs_out
.
°©us_löe
 = 
u
->
hódîs_ö
.status_line;

2108 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
u
->
hódîs_ö
.content_length_n;

2110 
u
->
Àngth
 = -1;

2112  
NGX_OK
;

2113 
	}
}

2117 
	$ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

2118 
ngx_hâp_up°ªam_t
 *
u
)

2120 
size_t
 
size
;

2121 
ssize_t
 
n
;

2122 
ngx_buf_t
 *
b
;

2123 
ngx_evít_t
 *
ªv
;

2124 
ngx_c⁄√˘i⁄_t
 *
c
;

2126 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2127 
ªv
 = 
c
->
ªad
;

2129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2132 i‡(
ªv
->
timedout
) {

2133 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2134 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

2138 
b
 = &
u
->
buf„r
;

2142 
size
 = 
b
->
íd
 - b->
œ°
;

2144 i‡(
size
 == 0) {

2145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2147 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2151 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

2153 i‡(
n
 =
NGX_AGAIN
) {

2157 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

2158 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
n
);

2162 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2164 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2165 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2169 i‡(!
ªv
->
ªady
) {

2174 i‡(
u
->
Àngth
 == 0) {

2175 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2179 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2180 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2184 i‡(
ªv
->
a˘ive
) {

2185 
	`ngx_add_timî
(
ªv
, 
u
->
c⁄f
->
ªad_timeout
);

2187 } i‡(
ªv
->
timî_£t
) {

2188 
	`ngx_dñ_timî
(
ªv
);

2190 
	}
}

2194 
	$ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2196 
t˝_nodñay
;

2197 
ssize_t
 
n
;

2198 
ngx_öt_t
 
rc
;

2199 
ngx_evít_pùe_t
 *
p
;

2200 
ngx_c⁄√˘i⁄_t
 *
c
;

2201 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2203 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

2205 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
po°_a˘i⁄
) {

2206 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2210 
u
->
hódî_£¡
 = 1;

2212 i‡(
u
->
upgøde
) {

2213 
	`ngx_hâp_up°ªam_upgøde
(
r
, 
u
);

2217 
c
 = 
r
->
c⁄√˘i⁄
;

2219 i‡(
r
->
hódî_⁄ly
) {

2221 i‡(
u
->
ˇchóbÀ
 || u->
°‹e
) {

2223 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

2224 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2225 
ngx_shutdown_sockë_n
 " failed");

2228 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2229 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2230 
c
->
îr‹
 = 1;

2233 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2238 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe
) {

2239 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
);

2240 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2243 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2245 i‡(!
u
->
buf„rög
) {

2247 i‡(
u
->
öput_fûãr
 =
NULL
) {

2248 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

2249 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

2250 
u
->
öput_fûãr_˘x
 = 
r
;

2253 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
;

2254 
r
->
wrôe_evít_h™dÀr
 =

2255 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
;

2257 
r
->
limô_øã
 = 0;

2259 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

2260 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2264 i‡(
˛cf
->
t˝_nodñay
 && 
c
->t˝_nodñay =
NGX_TCP_NODELAY_UNSET
) {

2265 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2267 
t˝_nodñay
 = 1;

2269 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2270 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2272 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2274 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2278 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2281 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2283 i‡(
n
) {

2284 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2286 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2288 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2289 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2293 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
r
);

2296 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2297 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2299 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

2300 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2304 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady
 || u->
Àngth
 == 0) {

2305 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
r
, 
u
);

2314 #i‡(
NGX_HTTP_CACHE
)

2316 i‡(
r
->
ˇche
 &&Ñ->ˇche->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

2317 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ˇche
->
fûe
.
fd
);

2318 
r
->
ˇche
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2321 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
no_ˇche
)) {

2323 
NGX_ERROR
:

2324 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2327 
NGX_DECLINED
:

2328 
u
->
ˇchóbÀ
 = 0;

2333 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_BYPASS
) {

2335 
r
->
ˇche
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

2336 
r
->
ˇche
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

2337 
r
->
ˇche
->
fûe_ˇche
 = 
u
->
c⁄f
->ˇche->
d©a
;

2339 i‡(
	`ngx_hâp_fûe_ˇche_¸óã
(
r
Ë!
NGX_OK
) {

2340 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2348 i‡(
u
->
ˇchóbÀ
) {

2349 
time_t
 
now
, 
vÆid
;

2351 
now
 = 
	`ngx_time
();

2353 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2355 i‡(
vÆid
 == 0) {

2356 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2357 
u
->
hódîs_ö
.
°©us_n
);

2358 i‡(
vÆid
) {

2359 
r
->
ˇche
->
vÆid_£c
 = 
now
 + 
vÆid
;

2363 i‡(
vÆid
) {

2364 
r
->
ˇche
->
œ°_modifõd
 =Ñ->
hódîs_out
.
œ°_modifõd_time
;

2365 
r
->
ˇche
->
d©e
 = 
now
;

2366 
r
->
ˇche
->
body_°¨t
 = (
u_sh‹t
Ë(
u
->
buf„r
.
pos
 - u->buf„r.
°¨t
);

2368 
	`ngx_hâp_fûe_ˇche_£t_hódî
(
r
, 
u
->
buf„r
.
°¨t
);

2371 
u
->
ˇchóbÀ
 = 0;

2372 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

2376 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2377 "hâ∞ˇchóbÀ: %d", 
u
->
ˇchóbÀ
);

2379 i‡(
u
->
ˇchóbÀ
 =0 && 
r
->
ˇche
) {

2380 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2385 
p
 = 
u
->
pùe
;

2387 
p
->
ouçut_fûãr
 = (
ngx_evít_pùe_ouçut_fûãr_±
Ë
ngx_hâp_ouçut_fûãr
;

2388 
p
->
ouçut_˘x
 = 
r
;

2389 
p
->
èg
 = 
u
->
ouçut
.tag;

2390 
p
->
bufs
 = 
u
->
c⁄f
->bufs;

2391 
p
->
busy_size
 = 
u
->
c⁄f
->
busy_buf„rs_size
;

2392 
p
->
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2393 
p
->
down°ªam
 = 
c
;

2394 
p
->
poﬁ
 = 
r
->pool;

2395 
p
->
log
 = 
c
->log;

2397 
p
->
ˇchóbÀ
 = 
u
->ˇchóbÀ || u->
°‹e
;

2399 
p
->
ãmp_fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2400 i‡(
p
->
ãmp_fûe
 =
NULL
) {

2401 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2405 
p
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2406 
p
->
ãmp_fûe
->
fûe
.
log
 = 
c
->log;

2407 
p
->
ãmp_fûe
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

2408 
p
->
ãmp_fûe
->
poﬁ
 = 
r
->pool;

2410 i‡(
p
->
ˇchóbÀ
) {

2411 
p
->
ãmp_fûe
->
≥rsi°ít
 = 1;

2414 
p
->
ãmp_fûe
->
log_Àvñ
 = 
NGX_LOG_WARN
;

2415 
p
->
ãmp_fûe
->
w¨n
 = "an upstreamÑesponse is buffered "

2419 
p
->
max_ãmp_fûe_size
 = 
u
->
c⁄f
->max_temp_file_size;

2420 
p
->
ãmp_fûe_wrôe_size
 = 
u
->
c⁄f
->temp_file_write_size;

2422 
p
->
¥îód_bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2423 i‡(
p
->
¥îód_bufs
 =
NULL
) {

2424 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2428 
p
->
¥îód_bufs
->
buf
 = &
u
->
buf„r
;

2429 
p
->
¥îód_bufs
->
√xt
 = 
NULL
;

2430 
u
->
buf„r
.
ªcy˛ed
 = 1;

2432 
p
->
¥îód_size
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2434 i‡(
u
->
ˇchóbÀ
) {

2436 
p
->
buf_to_fûe
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2437 i‡(
p
->
buf_to_fûe
 =
NULL
) {

2438 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2442 
p
->
buf_to_fûe
->
°¨t
 = 
u
->
buf„r
.start;

2443 
p
->
buf_to_fûe
->
pos
 = 
u
->
buf„r
.
°¨t
;

2444 
p
->
buf_to_fûe
->
œ°
 = 
u
->
buf„r
.
pos
;

2445 
p
->
buf_to_fûe
->
ãmp‹¨y
 = 1;

2448 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

2450 
p
->
sögÀ_buf
 = 1;

2454 
p
->
‰ì_bufs
 = 1;

2460 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2462 i‡(
u
->
c⁄f
->
cy˛ic_ãmp_fûe
) {

2470 
p
->
cy˛ic_ãmp_fûe
 = 1;

2471 
c
->
£ndfûe
 = 0;

2474 
p
->
cy˛ic_ãmp_fûe
 = 0;

2477 
p
->
ªad_timeout
 = 
u
->
c⁄f
->read_timeout;

2478 
p
->
£nd_timeout
 = 
˛cf
->send_timeout;

2479 
p
->
£nd_low©
 = 
˛cf
->send_lowat;

2481 
p
->
Àngth
 = -1;

2483 i‡(
u
->
öput_fûãr_öô


2484 && 
u
->
	`öput_fûãr_öô
(
p
->
öput_˘x
Ë!
NGX_OK
)

2486 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2490 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
;

2491 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
;

2493 
	`ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
r
, 
u
);

2494 
	}
}

2498 
	$ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2500 
t˝_nodñay
;

2501 
ngx_c⁄√˘i⁄_t
 *
c
;

2502 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2504 
c
 = 
r
->
c⁄√˘i⁄
;

2505 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2509 
r
->
kì∑live
 = 0;

2510 
c
->
log
->
a˘i⁄
 = "proxying upgraded connection";

2512 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
;

2513 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
;

2514 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
;

2515 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
;

2517 i‡(
˛cf
->
t˝_nodñay
) {

2518 
t˝_nodñay
 = 1;

2520 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

2521 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2523 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2524 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2526 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2528 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2532 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2535 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

2536 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
u
->
≥î
.
c⁄√˘i⁄
->
log
, 0,

2539 i‡(
	`£tsock›t
(
u
->
≥î
.
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2540 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2542 
	`ngx_c⁄√˘i⁄_îr‹
(
u
->
≥î
.
c⁄√˘i⁄
, 
ngx_sockë_î∫o
,

2544 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2548 
u
->
≥î
.
c⁄√˘i⁄
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2552 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

2553 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2557 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady


2558 || 
u
->
buf„r
.
pos
 !u->buf„r.
œ°
)

2560 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

2561 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

2565 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

2566 
	}
}

2570 
	$ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2572 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 0);

2573 
	}
}

2577 
	$ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2579 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

2580 
	}
}

2584 
	$ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2585 
ngx_hâp_up°ªam_t
 *
u
)

2587 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 0);

2588 
	}
}

2592 
	$ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2593 
ngx_hâp_up°ªam_t
 *
u
)

2595 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

2596 
	}
}

2600 
	$ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

2601 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
)

2603 
size_t
 
size
;

2604 
ssize_t
 
n
;

2605 
ngx_buf_t
 *
b
;

2606 
ngx_c⁄√˘i⁄_t
 *
c
, *
down°ªam
, *
up°ªam
, *
d°
, *
§c
;

2607 
ngx_hâp_up°ªam_t
 *
u
;

2608 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2610 
c
 = 
r
->
c⁄√˘i⁄
;

2611 
u
 = 
r
->
up°ªam
;

2613 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2614 "hâ∞up°ªamÖro˚s†upgøded, fu:%ui", 
‰om_up°ªam
);

2616 
down°ªam
 = 
c
;

2617 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2619 i‡(
down°ªam
->
wrôe
->
timedout
) {

2620 
c
->
timedout
 = 1;

2621 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2622 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2626 i‡(
up°ªam
->
ªad
->
timedout
 || up°ªam->
wrôe
->timedout) {

2627 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2628 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

2632 i‡(
‰om_up°ªam
) {

2633 
§c
 = 
up°ªam
;

2634 
d°
 = 
down°ªam
;

2635 
b
 = &
u
->
buf„r
;

2638 
§c
 = 
down°ªam
;

2639 
d°
 = 
up°ªam
;

2640 
b
 = &
u
->
‰om_˛õ¡
;

2642 i‡(
r
->
hódî_ö
->
œ°
 >Ñ->hódî_ö->
pos
) {

2643 
b
 = 
r
->
hódî_ö
;

2644 
b
->
íd
 = b->
œ°
;

2645 
do_wrôe
 = 1;

2648 i‡(
b
->
°¨t
 =
NULL
) {

2649 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
u
->
c⁄f
->
buf„r_size
);

2650 i‡(
b
->
°¨t
 =
NULL
) {

2651 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2655 
b
->
pos
 = b->
°¨t
;

2656 
b
->
œ°
 = b->
°¨t
;

2657 
b
->
íd
 = b->
°¨t
 + 
u
->
c⁄f
->
buf„r_size
;

2658 
b
->
ãmp‹¨y
 = 1;

2659 
b
->
èg
 = 
u
->
ouçut
.tag;

2665 i‡(
do_wrôe
) {

2667 
size
 = 
b
->
œ°
 - b->
pos
;

2669 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

2671 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

2673 i‡(
n
 =
NGX_ERROR
) {

2674 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2678 i‡(
n
 > 0) {

2679 
b
->
pos
 +
n
;

2681 i‡(
b
->
pos
 =b->
œ°
) {

2682 
b
->
pos
 = b->
°¨t
;

2683 
b
->
œ°
 = b->
°¨t
;

2689 
size
 = 
b
->
íd
 - b->
œ°
;

2691 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

2693 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

2695 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

2699 i‡(
n
 > 0) {

2700 
do_wrôe
 = 1;

2701 
b
->
œ°
 +
n
;

2706 i‡(
n
 =
NGX_ERROR
) {

2707 
§c
->
ªad
->
eof
 = 1;

2714 i‡((
up°ªam
->
ªad
->
eof
 && 
u
->
buf„r
.
pos
 =u->buf„r.
œ°
)

2715 || (
down°ªam
->
ªad
->
eof
 && 
u
->
‰om_˛õ¡
.
pos
 =u->‰om_˛õ¡.
œ°
)

2716 || (
down°ªam
->
ªad
->
eof
 && 
up°ªam
->read->eof))

2718 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2720 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2724 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2726 i‡(
	`ngx_h™dÀ_wrôe_evít
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
)

2727 !
NGX_OK
)

2729 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2733 i‡(
up°ªam
->
wrôe
->
a˘ive
 && !up°ªam->wrôe->
ªady
) {

2734 
	`ngx_add_timî
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

2736 } i‡(
up°ªam
->
wrôe
->
timî_£t
) {

2737 
	`ngx_dñ_timî
(
up°ªam
->
wrôe
);

2740 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2741 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2745 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

2746 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

2748 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

2749 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

2752 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

2753 !
NGX_OK
)

2755 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2759 i‡(
	`ngx_h™dÀ_ªad_evít
(
down°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2760 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2764 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

2765 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

2767 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

2768 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

2770 
	}
}

2774 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2776 
ngx_evít_t
 *
wev
;

2777 
ngx_c⁄√˘i⁄_t
 *
c
;

2778 
ngx_hâp_up°ªam_t
 *
u
;

2780 
c
 = 
r
->
c⁄√˘i⁄
;

2781 
u
 = 
r
->
up°ªam
;

2782 
wev
 = 
c
->
wrôe
;

2784 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2787 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

2789 i‡(
wev
->
timedout
) {

2790 
c
->
timedout
 = 1;

2791 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2792 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2796 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 1);

2797 
	}
}

2801 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2802 
ngx_hâp_up°ªam_t
 *
u
)

2804 
ngx_c⁄√˘i⁄_t
 *
c
;

2806 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2808 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2811 
c
->
log
->
a˘i⁄
 = "reading upstream";

2813 i‡(
c
->
ªad
->
timedout
) {

2814 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2815 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

2819 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 0);

2820 
	}
}

2824 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

2825 
ngx_uöt_t
 
do_wrôe
)

2827 
size_t
 
size
;

2828 
ssize_t
 
n
;

2829 
ngx_buf_t
 *
b
;

2830 
ngx_öt_t
 
rc
;

2831 
ngx_c⁄√˘i⁄_t
 *
down°ªam
, *
up°ªam
;

2832 
ngx_hâp_up°ªam_t
 *
u
;

2833 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2835 
u
 = 
r
->
up°ªam
;

2836 
down°ªam
 = 
r
->
c⁄√˘i⁄
;

2837 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2839 
b
 = &
u
->
buf„r
;

2841 
do_wrôe
 = do_wrôê|| 
u
->
Àngth
 == 0;

2845 i‡(
do_wrôe
) {

2847 i‡(
u
->
out_bufs
 || u->
busy_bufs
) {

2848 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
u
->
out_bufs
);

2850 i‡(
rc
 =
NGX_ERROR
) {

2851 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2855 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
u
->
‰ì_bufs
, &u->
busy_bufs
,

2856 &
u
->
out_bufs
, u->
ouçut
.
èg
);

2859 i‡(
u
->
busy_bufs
 =
NULL
) {

2861 i‡(
u
->
Àngth
 == 0

2862 || (
up°ªam
->
ªad
->
eof
 && 
u
->
Àngth
 == -1))

2864 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2868 i‡(
up°ªam
->
ªad
->
eof
) {

2869 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
up°ªam
->
log
, 0,

2872 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2873 
NGX_HTTP_BAD_GATEWAY
);

2877 i‡(
up°ªam
->
ªad
->
îr‹
) {

2878 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2879 
NGX_HTTP_BAD_GATEWAY
);

2883 
b
->
pos
 = b->
°¨t
;

2884 
b
->
œ°
 = b->
°¨t
;

2888 
size
 = 
b
->
íd
 - b->
œ°
;

2890 i‡(
size
 && 
up°ªam
->
ªad
->
ªady
) {

2892 
n
 = 
up°ªam
->
	`ªcv
(up°ªam, 
b
->
œ°
, 
size
);

2894 i‡(
n
 =
NGX_AGAIN
) {

2898 i‡(
n
 > 0) {

2899 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2901 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2902 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2907 
do_wrôe
 = 1;

2915 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2917 i‡(
down°ªam
->
d©a
 =
r
) {

2918 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

2919 !
NGX_OK
)

2921 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2926 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

2927 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

2929 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

2930 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

2933 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2934 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2938 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

2939 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

2941 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

2942 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

2944 
	}
}

2947 
ngx_öt_t


2948 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
)

2950  
NGX_OK
;

2951 
	}
}

2954 
ngx_öt_t


2955 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2957 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2959 
ngx_buf_t
 *
b
;

2960 
ngx_chaö_t
 *
˛
, **
Œ
;

2961 
ngx_hâp_up°ªam_t
 *
u
;

2963 
u
 = 
r
->
up°ªam
;

2965 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2966 
Œ
 = &
˛
->
√xt
;

2969 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2970 i‡(
˛
 =
NULL
) {

2971  
NGX_ERROR
;

2974 *
Œ
 = 
˛
;

2976 
˛
->
buf
->
Êush
 = 1;

2977 
˛
->
buf
->
mem‹y
 = 1;

2979 
b
 = &
u
->
buf„r
;

2981 
˛
->
buf
->
pos
 = 
b
->
œ°
;

2982 
b
->
œ°
 +
byãs
;

2983 
˛
->
buf
->
œ°
 = 
b
->last;

2984 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

2986 i‡(
u
->
Àngth
 == -1) {

2987  
NGX_OK
;

2990 
u
->
Àngth
 -
byãs
;

2992  
NGX_OK
;

2993 
	}
}

2997 
	$ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2999 
ngx_evít_t
 *
wev
;

3000 
ngx_c⁄√˘i⁄_t
 *
c
;

3001 
ngx_evít_pùe_t
 *
p
;

3002 
ngx_hâp_up°ªam_t
 *
u
;

3004 
c
 = 
r
->
c⁄√˘i⁄
;

3005 
u
 = 
r
->
up°ªam
;

3006 
p
 = 
u
->
pùe
;

3007 
wev
 = 
c
->
wrôe
;

3009 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3012 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

3014 i‡(
wev
->
timedout
) {

3016 i‡(
wev
->
dñayed
) {

3018 
wev
->
timedout
 = 0;

3019 
wev
->
dñayed
 = 0;

3021 i‡(!
wev
->
ªady
) {

3022 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

3024 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

3025 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3031 i‡(
	`ngx_evít_pùe
(
p
, 
wev
->
wrôe
Ë=
NGX_ABORT
) {

3032 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3037 
p
->
down°ªam_îr‹
 = 1;

3038 
c
->
timedout
 = 1;

3039 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

3044 i‡(
wev
->
dñayed
) {

3046 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3049 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

3050 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3056 i‡(
	`ngx_evít_pùe
(
p
, 1Ë=
NGX_ABORT
) {

3057 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3062 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

3063 
	}
}

3067 
	$ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3068 
ngx_hâp_up°ªam_t
 *
u
)

3070 
ngx_c⁄√˘i⁄_t
 *
c
;

3072 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3074 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3077 
c
->
log
->
a˘i⁄
 = "reading upstream";

3079 i‡(
c
->
ªad
->
timedout
) {

3080 
u
->
pùe
->
up°ªam_îr‹
 = 1;

3081 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

3084 i‡(
	`ngx_evít_pùe
(
u
->
pùe
, 0Ë=
NGX_ABORT
) {

3085 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3090 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

3091 
	}
}

3095 
	$ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3097 
ngx_ãmp_fûe_t
 *
tf
;

3098 
ngx_evít_pùe_t
 *
p
;

3099 
ngx_hâp_up°ªam_t
 *
u
;

3101 
u
 = 
r
->
up°ªam
;

3102 
p
 = 
u
->
pùe
;

3104 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3106 i‡(
u
->
°‹e
) {

3108 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_d⁄e
) {

3110 
tf
 = 
p
->
ãmp_fûe
;

3112 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


3113 && (
p
->
up°ªam_d⁄e
 ||Ö->
Àngth
 == -1)

3114 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3115 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
tf
->
off£t
))

3117 
	`ngx_hâp_up°ªam_°‹e
(
r
, 
u
);

3118 
u
->
°‹e
 = 0;

3123 #i‡(
NGX_HTTP_CACHE
)

3125 i‡(
u
->
ˇchóbÀ
) {

3127 i‡(
p
->
up°ªam_d⁄e
) {

3128 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
p
->
ãmp_fûe
);

3130 } i‡(
p
->
up°ªam_eof
) {

3132 
tf
 = 
p
->
ãmp_fûe
;

3134 i‡(
p
->
Àngth
 == -1

3135 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3136 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n


3137 =
tf
->
off£t
 - (
off_t
Ë
r
->
ˇche
->
body_°¨t
))

3139 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
tf
);

3142 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
tf
);

3145 } i‡(
p
->
up°ªam_îr‹
) {

3146 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
p
->
ãmp_fûe
);

3152 i‡(
p
->
up°ªam_d⁄e
 ||Ö->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
) {

3153 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3154 "hâ∞up°ªamÉxô: %p", 
p
->
out
);

3156 i‡(
p
->
up°ªam_d⁄e


3157 || (
p
->
up°ªam_eof
 &&Ö->
Àngth
 == -1))

3159 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3163 i‡(
p
->
up°ªam_eof
) {

3164 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3168 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

3173 i‡(
p
->
down°ªam_îr‹
) {

3174 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3177 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
 && u->
≥î
.
c⁄√˘i⁄
) {

3178 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3181 
	}
}

3185 
	$ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

3187 
size_t
 
roŸ
;

3188 
time_t
 
lm
;

3189 
ngx_°r_t
 
∑th
;

3190 
ngx_ãmp_fûe_t
 *
tf
;

3191 
ngx_ext_ª«me_fûe_t
 
ext
;

3193 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

3195 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

3199 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

3200 i‡(
tf
 =
NULL
) {

3204 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

3205 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3206 
tf
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

3207 
tf
->
poﬁ
 = 
r
->pool;

3208 
tf
->
≥rsi°ít
 = 1;

3210 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

3211 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

3212 !
NGX_OK
)

3217 
u
->
pùe
->
ãmp_fûe
 = 
tf
;

3220 
ext
.
ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

3221 
ext
.
∑th_ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

3222 
ext
.
time
 = -1;

3223 
ext
.
¸óã_∑th
 = 1;

3224 
ext
.
dñëe_fûe
 = 1;

3225 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3227 i‡(
u
->
hódîs_ö
.
œ°_modifõd
) {

3229 
lm
 = 
	`ngx_hâp_∑r£_time
(
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
d©a
,

3230 
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
Àn
);

3232 i‡(
lm
 !
NGX_ERROR
) {

3233 
ext
.
time
 = 
lm
;

3234 
ext
.
fd
 = 
tf
->
fûe
.fd;

3238 i‡(
u
->
c⁄f
->
°‹e_Àngths
 =
NULL
) {

3240 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

3243 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
u
->
c⁄f
->
°‹e_Àngths
->
ñts
, 0,

3244 
u
->
c⁄f
->
°‹e_vÆues
->
ñts
)

3245 =
NULL
)

3251 
∑th
.
Àn
--;

3253 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3255 
tf
->
fûe
.
«me
.
d©a
, 
∑th
.data);

3257 (Ë
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
∑th
, &
ext
);

3258 
	}
}

3262 
	$ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

3264 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3266 
	}
}

3270 
	$ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

3271 
ngx_uöt_t
 
·_ty≥
)

3273 
ngx_uöt_t
 
°©us
, 
°©e
;

3275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3276 "hâ∞√xàup°ªam, %xi", 
·_ty≥
);

3278 i‡(
u
->
≥î
.
sockaddr
) {

3280 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_403


3281 || 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

3283 
°©e
 = 
NGX_PEER_NEXT
;

3286 
°©e
 = 
NGX_PEER_FAILED
;

3289 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
°©e
);

3290 
u
->
≥î
.
sockaddr
 = 
NULL
;

3293 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_TIMEOUT
) {

3294 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ETIMEDOUT
,

3298 i‡(
u
->
≥î
.
ˇched
 && 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_ERROR
) {

3299 
°©us
 = 0;

3303 
u
->
≥î
.
åõs
++;

3306 
·_ty≥
) {

3308 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
:

3309 
°©us
 = 
NGX_HTTP_GATEWAY_TIME_OUT
;

3312 
NGX_HTTP_UPSTREAM_FT_HTTP_500
:

3313 
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3316 
NGX_HTTP_UPSTREAM_FT_HTTP_403
:

3317 
°©us
 = 
NGX_HTTP_FORBIDDEN
;

3320 
NGX_HTTP_UPSTREAM_FT_HTTP_404
:

3321 
°©us
 = 
NGX_HTTP_NOT_FOUND
;

3330 
°©us
 = 
NGX_HTTP_BAD_GATEWAY
;

3334 i‡(
r
->
c⁄√˘i⁄
->
îr‹
) {

3335 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

3336 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

3340 i‡(
°©us
) {

3341 
u
->
°©e
->
°©us
 = status;

3343 i‡(
u
->
≥î
.
åõs
 =0 || !(u->
c⁄f
->
√xt_up°ªam
 & 
·_ty≥
)) {

3345 #i‡(
NGX_HTTP_CACHE
)

3347 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


3348 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
·_ty≥
))

3350 
ngx_öt_t
 
rc
;

3352 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

3354 i‡(
rc
 =
NGX_OK
) {

3355 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

3356 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

3359 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

3364 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

3369 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3370 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3372 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

3373 #i‡(
NGX_HTTP_SSL
)

3375 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

3376 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

3377 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_£nd_shutdown
 = 1;

3379 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

3383 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

3384 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

3387 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

3388 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

3391 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

3392 
	}
}

3396 
	$ngx_hâp_up°ªam_˛ónup
(*
d©a
)

3398 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

3400 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3401 "˛ónu∞hâ∞up°ªamÑeque°: \"%V\"", &
r
->
uri
);

3403 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
,Ñ->
up°ªam
, 
NGX_DONE
);

3404 
	}
}

3408 
	$ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

3409 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
)

3411 
ngx_uöt_t
 
Êush
;

3412 
ngx_time_t
 *
ç
;

3414 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3415 "föÆizêhâ∞up°ªamÑeque°: %i", 
rc
);

3417 i‡(
u
->
˛ónup
) {

3418 *
u
->
˛ónup
 = 
NULL
;

3419 
u
->
˛ónup
 = 
NULL
;

3422 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

3423 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

3424 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

3427 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

3428 
ç
 = 
	`ngx_timeofday
();

3429 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

3430 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

3432 i‡(
u
->
pùe
 && u->pùe->
ªad_Àngth
) {

3433 
u
->
°©e
->
ª•⁄£_Àngth
 = u->
pùe
->
ªad_Àngth
;

3437 
u
->
	`föÆize_ªque°
(
r
, 
rc
);

3439 i‡(
u
->
≥î
.
‰ì
 && u->≥î.
sockaddr
) {

3440 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 0);

3441 
u
->
≥î
.
sockaddr
 = 
NULL
;

3444 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3446 #i‡(
NGX_HTTP_SSL
)

3450 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

3458 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

3460 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

3464 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3466 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

3468 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

3469 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

3472 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

3475 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

3477 i‡(
u
->
pùe
 && u->pùe->
ãmp_fûe
) {

3478 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3480 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
);

3483 i‡(
u
->
°‹e
 && u->
pùe
 && u->pùe->
ãmp_fûe


3484 && 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
)

3486 i‡(
	`ngx_dñëe_fûe
(
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
)

3487 =
NGX_FILE_ERROR
)

3489 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

3490 
ngx_dñëe_fûe_n
 " \"%s\" failed",

3491 
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
);

3495 #i‡(
NGX_HTTP_CACHE
)

3497 i‡(
r
->
ˇche
) {

3499 i‡(
u
->
ˇchóbÀ
) {

3501 i‡(
rc
 =
NGX_HTTP_BAD_GATEWAY
 ||Ñ¯=
NGX_HTTP_GATEWAY_TIME_OUT
) {

3502 
time_t
 
vÆid
;

3504 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
rc
);

3506 i‡(
vÆid
) {

3507 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

3508 
r
->
ˇche
->
îr‹
 = 
rc
;

3513 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

3518 i‡(
r
->
subªque°_ö_mem‹y


3519 && 
u
->
hódîs_ö
.
°©us_n
 >
NGX_HTTP_SPECIAL_RESPONSE
)

3521 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

3524 i‡(
rc
 =
NGX_DECLINED
) {

3528 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÅo client";

3530 i‡(!
u
->
hódî_£¡


3531 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


3532 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST
)

3534 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

3538 
Êush
 = 0;

3540 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

3541 
rc
 = 
NGX_ERROR
;

3542 
Êush
 = 1;

3545 i‡(
r
->
hódî_⁄ly
) {

3546 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

3550 i‡(
rc
 == 0) {

3551 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

3553 } i‡(
Êush
) {

3554 
r
->
kì∑live
 = 0;

3555 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
);

3558 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

3559 
	}
}

3562 
ngx_öt_t


3563 
	$ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3564 
ngx_uöt_t
 
off£t
)

3566 
ngx_èbÀ_ñt_t
 **
ph
;

3568 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
up°ªam
->
hódîs_ö
 + 
off£t
);

3570 i‡(*
ph
 =
NULL
) {

3571 *
ph
 = 
h
;

3574  
NGX_OK
;

3575 
	}
}

3578 
ngx_öt_t


3579 
	$ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3580 
ngx_uöt_t
 
off£t
)

3582  
NGX_OK
;

3583 
	}
}

3586 
ngx_öt_t


3587 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

3588 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3590 
ngx_hâp_up°ªam_t
 *
u
;

3592 
u
 = 
r
->
up°ªam
;

3594 
u
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
h
;

3595 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3597  
NGX_OK
;

3598 
	}
}

3601 
ngx_öt_t


3602 
	$ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3603 
ngx_uöt_t
 
off£t
)

3605 #i‡(
NGX_HTTP_CACHE
)

3606 
ngx_hâp_up°ªam_t
 *
u
;

3608 
u
 = 
r
->
up°ªam
;

3610 i‡(!(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
)) {

3611 
u
->
ˇchóbÀ
 = 0;

3615  
NGX_OK
;

3616 
	}
}

3619 
ngx_öt_t


3620 
	$ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

3621 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3623 
ngx_¨øy_t
 *
∑
;

3624 
ngx_èbÀ_ñt_t
 **
ph
;

3625 
ngx_hâp_up°ªam_t
 *
u
;

3627 
u
 = 
r
->
up°ªam
;

3628 
∑
 = &
u
->
hódîs_ö
.
ˇche_c⁄åﬁ
;

3630 i‡(
∑
->
ñts
 =
NULL
) {

3631 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3633  
NGX_ERROR
;

3637 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3638 i‡(
ph
 =
NULL
) {

3639  
NGX_ERROR
;

3642 *
ph
 = 
h
;

3644 #i‡(
NGX_HTTP_CACHE
)

3646 
u_ch¨
 *
p
, *
œ°
;

3647 
ngx_öt_t
 
n
;

3649 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
) {

3650  
NGX_OK
;

3653 i‡(
r
->
ˇche
 =
NULL
) {

3654  
NGX_OK
;

3657 i‡(
r
->
ˇche
->
vÆid_£c
 !0 && 
u
->
hódîs_ö
.
x_ac˚l_expúes
 !
NULL
) {

3658  
NGX_OK
;

3661 
p
 = 
h
->
vÆue
.
d©a
;

3662 
œ°
 = 
p
 + 
h
->
vÆue
.
Àn
;

3664 i‡(
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-ˇche", 8 - 1Ë!
NULL


3665 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-°‹e", 8 - 1Ë!
NULL


3666 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"¥iv©e", 7 - 1Ë!
NULL
)

3668 
u
->
ˇchóbÀ
 = 0;

3669  
NGX_OK
;

3672 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
, (
u_ch¨
 *) "max-age=", 8 - 1);

3674 i‡(
p
 =
NULL
) {

3675  
NGX_OK
;

3678 
n
 = 0;

3680 
p
 +8;Ö < 
œ°
;Ö++) {

3681 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

3685 i‡(*
p
 >= '0' && *p <= '9') {

3686 
n
 =Ç * 10 + *
p
 - '0';

3690 
u
->
ˇchóbÀ
 = 0;

3691  
NGX_OK
;

3694 i‡(
n
 == 0) {

3695 
u
->
ˇchóbÀ
 = 0;

3696  
NGX_OK
;

3699 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3703  
NGX_OK
;

3704 
	}
}

3707 
ngx_öt_t


3708 
	$ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3709 
ngx_uöt_t
 
off£t
)

3711 
ngx_hâp_up°ªam_t
 *
u
;

3713 
u
 = 
r
->
up°ªam
;

3714 
u
->
hódîs_ö
.
expúes
 = 
h
;

3716 #i‡(
NGX_HTTP_CACHE
)

3718 
time_t
 
expúes
;

3720 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
) {

3721  
NGX_OK
;

3724 i‡(
r
->
ˇche
 =
NULL
) {

3725  
NGX_OK
;

3728 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

3729  
NGX_OK
;

3732 
expúes
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3734 i‡(
expúes
 =
NGX_ERROR
 ||Éxpúe†< 
	`ngx_time
()) {

3735 
u
->
ˇchóbÀ
 = 0;

3736  
NGX_OK
;

3739 
r
->
ˇche
->
vÆid_£c
 = 
expúes
;

3743  
NGX_OK
;

3744 
	}
}

3747 
ngx_öt_t


3748 
	$ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

3749 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3751 
ngx_hâp_up°ªam_t
 *
u
;

3753 
u
 = 
r
->
up°ªam
;

3754 
u
->
hódîs_ö
.
x_ac˚l_expúes
 = 
h
;

3756 #i‡(
NGX_HTTP_CACHE
)

3758 
u_ch¨
 *
p
;

3759 
size_t
 
Àn
;

3760 
ngx_öt_t
 
n
;

3762 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
) {

3763  
NGX_OK
;

3766 i‡(
r
->
ˇche
 =
NULL
) {

3767  
NGX_OK
;

3770 
Àn
 = 
h
->
vÆue
.len;

3771 
p
 = 
h
->
vÆue
.
d©a
;

3773 i‡(
p
[0] != '@') {

3774 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3776 
n
) {

3778 
u
->
ˇchóbÀ
 = 0;

3781 
NGX_ERROR
:

3782  
NGX_OK
;

3785 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3786  
NGX_OK
;

3790 
p
++;

3791 
Àn
--;

3793 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3795 i‡(
n
 !
NGX_ERROR
) {

3796 
r
->
ˇche
->
vÆid_£c
 = 
n
;

3801  
NGX_OK
;

3802 
	}
}

3805 
ngx_öt_t


3806 
	$ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3807 
ngx_uöt_t
 
off£t
)

3809 
ngx_öt_t
 
n
;

3810 
ngx_hâp_up°ªam_t
 *
u
;

3812 
u
 = 
r
->
up°ªam
;

3813 
u
->
hódîs_ö
.
x_ac˚l_limô_øã
 = 
h
;

3815 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
) {

3816  
NGX_OK
;

3819 
n
 = 
	`ngx_©oi
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3821 i‡(
n
 !
NGX_ERROR
) {

3822 
r
->
limô_øã
 = (
size_t
Ë
n
;

3825  
NGX_OK
;

3826 
	}
}

3829 
ngx_öt_t


3830 
	$ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3831 
ngx_uöt_t
 
off£t
)

3833 
u_ch¨
 
c0
, 
c1
, 
c2
;

3834 
ngx_hâp_up°ªam_t
 *
u
;

3836 
u
 = 
r
->
up°ªam
;

3838 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
) {

3839  
NGX_OK
;

3842 i‡(
u
->
c⁄f
->
ch™ge_buf„rög
) {

3844 i‡(
h
->
vÆue
.
Àn
 == 2) {

3845 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3846 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3848 i‡(
c0
 ='n' && 
c1
 == 'o') {

3849 
u
->
buf„rög
 = 0;

3852 } i‡(
h
->
vÆue
.
Àn
 == 3) {

3853 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3854 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3855 
c2
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[2]);

3857 i‡(
c0
 ='y' && 
c1
 ='e' && 
c2
 == 's') {

3858 
u
->
buf„rög
 = 1;

3863  
NGX_OK
;

3864 
	}
}

3867 
ngx_öt_t


3868 
	$ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3869 
ngx_uöt_t
 
off£t
)

3871 i‡(
r
->
up°ªam
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
) {

3872  
NGX_OK
;

3875 
r
->
hódîs_out
.
ovîride_ch¨£t
 = &
h
->
vÆue
;

3877  
NGX_OK
;

3878 
	}
}

3881 
ngx_öt_t


3882 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3883 
ngx_uöt_t
 
off£t
)

3885 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄
 = 
h
;

3887 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

3888 (
u_ch¨
 *) "close", 5 - 1)

3889 !
NULL
)

3891 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

3894  
NGX_OK
;

3895 
	}
}

3898 
ngx_öt_t


3899 
	$ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

3900 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3902 
r
->
up°ªam
->
hódîs_ö
.
å™s„r_ícodög
 = 
h
;

3904 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

3905 (
u_ch¨
 *) "chunked", 7 - 1)

3906 !
NULL
)

3908 
r
->
up°ªam
->
hódîs_ö
.
chunked
 = 1;

3911  
NGX_OK
;

3912 
	}
}

3915 
ngx_öt_t


3916 
	$ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3917 
ngx_uöt_t
 
off£t
)

3919 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3921 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3922 i‡(
ho
 =
NULL
) {

3923  
NGX_ERROR
;

3926 *
ho
 = *
h
;

3928 i‡(
off£t
) {

3929 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3930 *
ph
 = 
ho
;

3933  
NGX_OK
;

3934 
	}
}

3937 
ngx_öt_t


3938 
	$ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

3939 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3941 
ngx_¨øy_t
 *
∑
;

3942 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3944 
∑
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3946 i‡(
∑
->
ñts
 =
NULL
) {

3947 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3949  
NGX_ERROR
;

3953 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3954 i‡(
ph
 =
NULL
) {

3955  
NGX_ERROR
;

3958 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3959 i‡(
ho
 =
NULL
) {

3960  
NGX_ERROR
;

3963 *
ho
 = *
h
;

3964 *
ph
 = 
ho
;

3966  
NGX_OK
;

3967 
	}
}

3970 
ngx_öt_t


3971 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3972 
ngx_uöt_t
 
off£t
)

3974 
u_ch¨
 *
p
, *
œ°
;

3976 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
h
->
vÆue
.
Àn
;

3977 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
h
->
vÆue
;

3978 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

3980 
p
 = 
h
->
vÆue
.
d©a
; *p;Ö++) {

3982 i‡(*
p
 != ';') {

3986 
œ°
 = 
p
;

3988 *++
p
 == ' ') { }

3990 i‡(*
p
 == '\0') {

3991  
NGX_OK
;

3994 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "charset=", 8) != 0) {

3998 
p
 += 8;

4000 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
œ°
 - 
h
->
vÆue
.
d©a
;

4002 i‡(*
p
 == '"') {

4003 
p
++;

4006 
œ°
 = 
h
->
vÆue
.
d©a
 + h->vÆue.
Àn
;

4008 i‡(*(
œ°
 - 1) == '"') {

4009 
œ°
--;

4012 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
œ°
 - 
p
;

4013 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
p
;

4015  
NGX_OK
;

4018  
NGX_OK
;

4019 
	}
}

4022 
ngx_öt_t


4023 
	$ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4024 
ngx_uöt_t
 
off£t
)

4026 
ngx_èbÀ_ñt_t
 *
ho
;

4028 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4029 i‡(
ho
 =
NULL
) {

4030  
NGX_ERROR
;

4033 *
ho
 = *
h
;

4035 
r
->
hódîs_out
.
œ°_modifõd
 = 
ho
;

4037 #i‡(
NGX_HTTP_CACHE
)

4039 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

4040 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
,

4041 
h
->
vÆue
.
Àn
);

4046  
NGX_OK
;

4047 
	}
}

4050 
ngx_öt_t


4051 
	$ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4052 
ngx_uöt_t
 
off£t
)

4054 
ngx_öt_t
 
rc
;

4055 
ngx_èbÀ_ñt_t
 *
ho
;

4057 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4058 i‡(
ho
 =
NULL
) {

4059  
NGX_ERROR
;

4062 *
ho
 = *
h
;

4064 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

4065 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 0);

4067 i‡(
rc
 =
NGX_DECLINED
) {

4068  
NGX_OK
;

4071 i‡(
rc
 =
NGX_OK
) {

4072 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

4074 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4075 "ªwrôã¿loˇti⁄: \"%V\"", &
ho
->
vÆue
);

4078  
rc
;

4081 i‡(
ho
->
vÆue
.
d©a
[0] != '/') {

4082 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

4090  
NGX_OK
;

4091 
	}
}

4094 
ngx_öt_t


4095 
	$ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4096 
ngx_uöt_t
 
off£t
)

4098 
u_ch¨
 *
p
;

4099 
ngx_öt_t
 
rc
;

4100 
ngx_èbÀ_ñt_t
 *
ho
;

4102 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4103 i‡(
ho
 =
NULL
) {

4104  
NGX_ERROR
;

4107 *
ho
 = *
h
;

4109 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

4111 
p
 = 
	`ngx_°rˇ£°∫
(
ho
->
vÆue
.
d©a
, "url=", 4 - 1);

4113 i‡(
p
) {

4114 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 
p
 + 4 - ho->
vÆue
.
d©a
);

4117  
NGX_OK
;

4120 i‡(
rc
 =
NGX_DECLINED
) {

4121  
NGX_OK
;

4124 i‡(
rc
 =
NGX_OK
) {

4125 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

4127 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4128 "ªwrôã¿ª‰esh: \"%V\"", &
ho
->
vÆue
);

4131  
rc
;

4134 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

4136  
NGX_OK
;

4137 
	}
}

4140 
ngx_öt_t


4141 
	$ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4142 
ngx_uöt_t
 
off£t
)

4144 
ngx_öt_t
 
rc
;

4145 
ngx_èbÀ_ñt_t
 *
ho
;

4147 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4148 i‡(
ho
 =
NULL
) {

4149  
NGX_ERROR
;

4152 *
ho
 = *
h
;

4154 i‡(
r
->
up°ªam
->
ªwrôe_cookõ
) {

4155 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_cookõ
‘, 
ho
);

4157 i‡(
rc
 =
NGX_DECLINED
) {

4158  
NGX_OK
;

4161 #i‡(
NGX_DEBUG
)

4162 i‡(
rc
 =
NGX_OK
) {

4163 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4164 "ªwrôã¿cookõ: \"%V\"", &
ho
->
vÆue
);

4168  
rc
;

4171  
NGX_OK
;

4172 
	}
}

4175 
ngx_öt_t


4176 
	$ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

4177 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4179 
ngx_èbÀ_ñt_t
 *
ho
;

4181 #i‡(
NGX_HTTP_CACHE
)

4183 i‡(
r
->
ˇched
) {

4184 
r
->
Ælow_ønges
 = 1;

4185  
NGX_OK
;

4188 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

4189 
r
->
Ælow_ønges
 = 1;

4190 
r
->
sögÀ_ønge
 = 1;

4191  
NGX_OK
;

4196 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4197 i‡(
ho
 =
NULL
) {

4198  
NGX_ERROR
;

4201 *
ho
 = *
h
;

4203 
r
->
hódîs_out
.
ac˚±_ønges
 = 
ho
;

4205  
NGX_OK
;

4206 
	}
}

4209 #i‡(
NGX_HTTP_GZIP
)

4211 
ngx_öt_t


4212 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

4213 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4215 
ngx_èbÀ_ñt_t
 *
ho
;

4217 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4218 i‡(
ho
 =
NULL
) {

4219  
NGX_ERROR
;

4222 *
ho
 = *
h
;

4224 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
ho
;

4226  
NGX_OK
;

4227 
	}
}

4232 
ngx_öt_t


4233 
	$ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

4235 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

4237 
v
 = 
ngx_hâp_up°ªam_v¨s
; v->
«me
.
Àn
; v++) {

4238 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

4239 i‡(
v¨
 =
NULL
) {

4240  
NGX_ERROR
;

4243 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

4244 
v¨
->
d©a
 = 
v
->data;

4247  
NGX_OK
;

4248 
	}
}

4251 
ngx_öt_t


4252 
	$ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4253 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4255 
u_ch¨
 *
p
;

4256 
size_t
 
Àn
;

4257 
ngx_uöt_t
 
i
;

4258 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4260 
v
->
vÆid
 = 1;

4261 
v
->
no_ˇchóbÀ
 = 0;

4262 
v
->
nŸ_found
 = 0;

4264 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4265 
v
->
nŸ_found
 = 1;

4266  
NGX_OK
;

4269 
Àn
 = 0;

4270 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4272 
i
 = 0; i < 
r
->
up°ªam_°©es
->
√…s
; i++) {

4273 i‡(
°©e
[
i
].
≥î
) {

4274 
Àn
 +
°©e
[
i
].
≥î
->len + 2;

4277 
Àn
 += 3;

4281 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4282 i‡(
p
 =
NULL
) {

4283  
NGX_ERROR
;

4286 
v
->
d©a
 = 
p
;

4288 
i
 = 0;

4291 i‡(
°©e
[
i
].
≥î
) {

4292 
p
 = 
	`ngx_˝ymem
’, 
°©e
[
i
].
≥î
->
d©a
, sèã[i].≥î->
Àn
);

4295 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4299 i‡(
°©e
[
i
].
≥î
) {

4300 *
p
++ = ',';

4301 *
p
++ = ' ';

4304 *
p
++ = ' ';

4305 *
p
++ = ':';

4306 *
p
++ = ' ';

4308 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4316 
v
->
Àn
 = 
p
 - v->
d©a
;

4318  
NGX_OK
;

4319 
	}
}

4322 
ngx_öt_t


4323 
	$ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4324 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4326 
u_ch¨
 *
p
;

4327 
size_t
 
Àn
;

4328 
ngx_uöt_t
 
i
;

4329 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4331 
v
->
vÆid
 = 1;

4332 
v
->
no_ˇchóbÀ
 = 0;

4333 
v
->
nŸ_found
 = 0;

4335 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4336 
v
->
nŸ_found
 = 1;

4337  
NGX_OK
;

4340 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (3 + 2);

4342 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4343 i‡(
p
 =
NULL
) {

4344  
NGX_ERROR
;

4347 
v
->
d©a
 = 
p
;

4349 
i
 = 0;

4350 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4353 i‡(
°©e
[
i
].
°©us
) {

4354 
p
 = 
	`ngx_•rötf
’, "%ui", 
°©e
[
i
].
°©us
);

4357 *
p
++ = '-';

4360 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4364 i‡(
°©e
[
i
].
≥î
) {

4365 *
p
++ = ',';

4366 *
p
++ = ' ';

4369 *
p
++ = ' ';

4370 *
p
++ = ':';

4371 *
p
++ = ' ';

4373 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4381 
v
->
Àn
 = 
p
 - v->
d©a
;

4383  
NGX_OK
;

4384 
	}
}

4387 
ngx_öt_t


4388 
	$ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4389 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4391 
u_ch¨
 *
p
;

4392 
size_t
 
Àn
;

4393 
ngx_uöt_t
 
i
;

4394 
ngx_m£c_öt_t
 
ms
;

4395 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4397 
v
->
vÆid
 = 1;

4398 
v
->
no_ˇchóbÀ
 = 0;

4399 
v
->
nŸ_found
 = 0;

4401 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4402 
v
->
nŸ_found
 = 1;

4403  
NGX_OK
;

4406 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_TIME_T_LEN
 + 4 + 2);

4408 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4409 i‡(
p
 =
NULL
) {

4410  
NGX_ERROR
;

4413 
v
->
d©a
 = 
p
;

4415 
i
 = 0;

4416 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4419 i‡(
°©e
[
i
].
°©us
) {

4420 
ms
 = (
ngx_m£c_öt_t
)

4421 (
°©e
[
i
].
ª•⁄£_£c
 * 1000 + sèã[i].
ª•⁄£_m£c
);

4422 
ms
 = 
	`ngx_max
(ms, 0);

4423 
p
 = 
	`ngx_•rötf
’, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000);

4426 *
p
++ = '-';

4429 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4433 i‡(
°©e
[
i
].
≥î
) {

4434 *
p
++ = ',';

4435 *
p
++ = ' ';

4438 *
p
++ = ' ';

4439 *
p
++ = ':';

4440 *
p
++ = ' ';

4442 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4450 
v
->
Àn
 = 
p
 - v->
d©a
;

4452  
NGX_OK
;

4453 
	}
}

4456 
ngx_öt_t


4457 
	$ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4458 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4460 
u_ch¨
 *
p
;

4461 
size_t
 
Àn
;

4462 
ngx_uöt_t
 
i
;

4463 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4465 
v
->
vÆid
 = 1;

4466 
v
->
no_ˇchóbÀ
 = 0;

4467 
v
->
nŸ_found
 = 0;

4469 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4470 
v
->
nŸ_found
 = 1;

4471  
NGX_OK
;

4474 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_OFF_T_LEN
 + 2);

4476 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4477 i‡(
p
 =
NULL
) {

4478  
NGX_ERROR
;

4481 
v
->
d©a
 = 
p
;

4483 
i
 = 0;

4484 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4487 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
ª•⁄£_Àngth
);

4489 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4493 i‡(
°©e
[
i
].
≥î
) {

4494 *
p
++ = ',';

4495 *
p
++ = ' ';

4498 *
p
++ = ' ';

4499 *
p
++ = ':';

4500 *
p
++ = ' ';

4502 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4510 
v
->
Àn
 = 
p
 - v->
d©a
;

4512  
NGX_OK
;

4513 
	}
}

4516 
ngx_öt_t


4517 
	$ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4518 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4520 i‡(
r
->
up°ªam
 =
NULL
) {

4521 
v
->
nŸ_found
 = 1;

4522  
NGX_OK
;

4525  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

4526 &
r
->
up°ªam
->
hódîs_ö
.
hódîs
.
∑π
,

4528 
	}
}

4531 #i‡(
NGX_HTTP_CACHE
)

4533 
ngx_öt_t


4534 
	$ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

4535 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4537 
ngx_uöt_t
 
n
;

4539 i‡(
r
->
up°ªam
 =
NULL
 ||Ñ->up°ªam->
ˇche_°©us
 == 0) {

4540 
v
->
nŸ_found
 = 1;

4541  
NGX_OK
;

4544 
n
 = 
r
->
up°ªam
->
ˇche_°©us
 - 1;

4546 
v
->
vÆid
 = 1;

4547 
v
->
no_ˇchóbÀ
 = 0;

4548 
v
->
nŸ_found
 = 0;

4549 
v
->
Àn
 = 
ngx_hâp_ˇche_°©us
[
n
].len;

4550 
v
->
d©a
 = 
ngx_hâp_ˇche_°©us
[
n
].data;

4552  
NGX_OK
;

4553 
	}
}

4556 
ngx_öt_t


4557 
	$ngx_hâp_up°ªam_ˇche_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

4558 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4560 
u_ch¨
 *
p
;

4562 i‡(
r
->
up°ªam
 =
NULL


4563 || !
r
->
up°ªam
->
c⁄f
->
ˇche_ªvÆid©e


4564 || 
r
->
up°ªam
->
ˇche_°©us
 !
NGX_HTTP_CACHE_EXPIRED


4565 || 
r
->
ˇche
->
œ°_modifõd
 == -1)

4567 
v
->
nŸ_found
 = 1;

4568  
NGX_OK
;

4571 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("Mon, 28 Sep 1970 06:00:00 GMT") - 1);

4572 i‡(
p
 =
NULL
) {

4573  
NGX_ERROR
;

4576 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
ˇche
->
œ°_modifõd
) -Ö;

4577 
v
->
vÆid
 = 1;

4578 
v
->
no_ˇchóbÀ
 = 0;

4579 
v
->
nŸ_found
 = 0;

4580 
v
->
d©a
 = 
p
;

4582  
NGX_OK
;

4583 
	}
}

4589 
	$ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

4591 *
rv
;

4592 *
mc⁄f
;

4593 
ngx_°r_t
 *
vÆue
;

4594 
ngx_uæ_t
 
u
;

4595 
ngx_uöt_t
 
m
;

4596 
ngx_c⁄f_t
 
pcf
;

4597 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4598 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

4599 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

4601 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4603 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4604 
u
.
ho°
 = 
vÆue
[1];

4605 
u
.
no_ªsﬁve
 = 1;

4606 
u
.
no_p‹t
 = 1;

4608 
uscf
 = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 
NGX_HTTP_UPSTREAM_CREATE


4609 |
NGX_HTTP_UPSTREAM_WEIGHT


4610 |
NGX_HTTP_UPSTREAM_MAX_FAILS


4611 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


4612 |
NGX_HTTP_UPSTREAM_DOWN


4613 |
NGX_HTTP_UPSTREAM_BACKUP
);

4614 i‡(
uscf
 =
NULL
) {

4615  
NGX_CONF_ERROR
;

4619 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4620 i‡(
˘x
 =
NULL
) {

4621  
NGX_CONF_ERROR
;

4624 
hâp_˘x
 = 
cf
->
˘x
;

4625 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

4629 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4630 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

4631  
NGX_CONF_ERROR
;

4634 
˘x
->
§v_c⁄f
[
ngx_hâp_up°ªam_moduÀ
.
˘x_ödex
] = 
uscf
;

4636 
uscf
->
§v_c⁄f
 = 
˘x
->srv_conf;

4641 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4642 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4643  
NGX_CONF_ERROR
;

4646 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

4647 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4651 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

4653 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

4654 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

4655 i‡(
mc⁄f
 =
NULL
) {

4656  
NGX_CONF_ERROR
;

4659 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4662 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4663 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4664 i‡(
mc⁄f
 =
NULL
) {

4665  
NGX_CONF_ERROR
;

4668 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4675 
pcf
 = *
cf
;

4676 
cf
->
˘x
 = ctx;

4677 
cf
->
cmd_ty≥
 = 
NGX_HTTP_UPS_CONF
;

4679 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4681 *
cf
 = 
pcf
;

4683 i‡(
rv
 !
NGX_CONF_OK
) {

4684  
rv
;

4687 i‡(
uscf
->
£rvîs
 =
NULL
) {

4688 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4690  
NGX_CONF_ERROR
;

4693  
rv
;

4694 
	}
}

4698 
	$ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4700 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
 = 
c⁄f
;

4702 
time_t
 
Áû_timeout
;

4703 
ngx_°r_t
 *
vÆue
, 
s
;

4704 
ngx_uæ_t
 
u
;

4705 
ngx_öt_t
 
weight
, 
max_Áûs
;

4706 
ngx_uöt_t
 
i
;

4707 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4709 i‡(
uscf
->
£rvîs
 =
NULL
) {

4710 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4711 (
ngx_hâp_up°ªam_£rvî_t
));

4712 i‡(
uscf
->
£rvîs
 =
NULL
) {

4713  
NGX_CONF_ERROR
;

4717 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4718 i‡(
us
 =
NULL
) {

4719  
NGX_CONF_ERROR
;

4722 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4724 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4726 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4728 
u
.
uæ
 = 
vÆue
[1];

4729 
u
.
deÁu…_p‹t
 = 80;

4731 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

4732 i‡(
u
.
îr
) {

4733 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4734 "%†ö up°ªam \"%V\"", 
u
.
îr
, &u.
uæ
);

4737  
NGX_CONF_ERROR
;

4740 
weight
 = 1;

4741 
max_Áûs
 = 1;

4742 
Áû_timeout
 = 10;

4744 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

4746 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "weight=", 7) == 0) {

4748 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_WEIGHT
)) {

4749 
övÆid
;

4752 
weight
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[7], vÆue[i].
Àn
 - 7);

4754 i‡(
weight
 =
NGX_ERROR
 || weight == 0) {

4755 
övÆid
;

4761 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_fails=", 10) == 0) {

4763 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_MAX_FAILS
)) {

4764 
övÆid
;

4767 
max_Áûs
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

4769 i‡(
max_Áûs
 =
NGX_ERROR
) {

4770 
övÆid
;

4776 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "fail_timeout=", 13) == 0) {

4778 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
)) {

4779 
övÆid
;

4782 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

4783 
s
.
d©a
 = &
vÆue
[
i
].data[13];

4785 
Áû_timeout
 = 
	`ngx_∑r£_time
(&
s
, 1);

4787 i‡(
Áû_timeout
 =(
time_t
Ë
NGX_ERROR
) {

4788 
övÆid
;

4794 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "backup") == 0) {

4796 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_BACKUP
)) {

4797 
övÆid
;

4800 
us
->
backup
 = 1;

4805 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "down") == 0) {

4807 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_DOWN
)) {

4808 
övÆid
;

4811 
us
->
down
 = 1;

4816 
övÆid
;

4819 
us
->
addrs
 = 
u
.addrs;

4820 
us
->
«ddrs
 = 
u
.naddrs;

4821 
us
->
weight
 = weight;

4822 
us
->
max_Áûs
 = max_fails;

4823 
us
->
Áû_timeout
 = fail_timeout;

4825  
NGX_CONF_OK
;

4827 
övÆid
:

4829 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4830 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

4832  
NGX_CONF_ERROR
;

4833 
	}
}

4836 
ngx_hâp_up°ªam_§v_c⁄f_t
 *

4837 
	$ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
)

4839 
ngx_uöt_t
 
i
;

4840 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4841 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

4842 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

4844 i‡(!(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)) {

4846 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

4847 i‡(
u
->
îr
) {

4848 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4849 "%†ö up°ªam \"%V\"", 
u
->
îr
, &u->
uæ
);

4852  
NULL
;

4856 
umcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

4858 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

4860 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

4862 i‡(
uscÂ
[
i
]->
ho°
.
Àn
 !
u
->host.len

4863 || 
	`ngx_°∫ˇ£cmp
(
uscÂ
[
i
]->
ho°
.
d©a
, 
u
->ho°.d©a, u->ho°.
Àn
)

4869 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)

4870 && (
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
))

4872 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4873 "du∂iˇã up°ªam \"%V\"", &
u
->
ho°
);

4874  
NULL
;

4877 i‡((
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
u
->
no_p‹t
) {

4878 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4880 &
u
->
ho°
, u->
p‹t
);

4881  
NULL
;

4884 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
uscÂ
[
i
]->
no_p‹t
) {

4885 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

4887 &
u
->
ho°
, 
uscÂ
[
i
]->
p‹t
,

4888 
uscÂ
[
i
]->
fûe_«me
, uscÂ[i]->
löe
);

4889  
NULL
;

4892 i‡(
uscÂ
[
i
]->
p‹t
 && 
u
->port

4893 && 
uscÂ
[
i
]->
p‹t
 !
u
->port)

4898 i‡(
uscÂ
[
i
]->
deÁu…_p‹t
 && 
u
->default_port

4899 && 
uscÂ
[
i
]->
deÁu…_p‹t
 !
u
->default_port)

4904 i‡(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
) {

4905 
uscÂ
[
i
]->
Êags
 = flags;

4908  
uscÂ
[
i
];

4911 
uscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_§v_c⁄f_t
));

4912 i‡(
uscf
 =
NULL
) {

4913  
NULL
;

4916 
uscf
->
Êags
 = flags;

4917 
uscf
->
ho°
 = 
u
->host;

4918 
uscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

4919 
uscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

4920 
uscf
->
p‹t
 = 
u
->port;

4921 
uscf
->
deÁu…_p‹t
 = 
u
->default_port;

4922 
uscf
->
no_p‹t
 = 
u
->no_port;

4924 i‡(
u
->
«ddrs
 == 1) {

4925 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

4926 (
ngx_hâp_up°ªam_£rvî_t
));

4927 i‡(
uscf
->
£rvîs
 =
NULL
) {

4928  
NULL
;

4931 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4932 i‡(
us
 =
NULL
) {

4933  
NULL
;

4936 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4938 
us
->
addrs
 = 
u
->addrs;

4939 
us
->
«ddrs
 = 1;

4942 
uscÂ
 = 
	`ngx_¨øy_push
(&
umcf
->
up°ªams
);

4943 i‡(
uscÂ
 =
NULL
) {

4944  
NULL
;

4947 *
uscÂ
 = 
uscf
;

4949  
uscf
;

4950 
	}
}

4954 
	$ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

4955 *
c⁄f
)

4957 *
p
 = 
c⁄f
;

4959 
ngx_öt_t
 
rc
;

4960 
ngx_°r_t
 *
vÆue
;

4961 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4962 
ngx_hâp_up°ªam_loˇl_t
 **
∂oˇl
, *
loˇl
;

4963 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4965 
∂oˇl
 = (
ngx_hâp_up°ªam_loˇl_t
 **Ë(
p
 + 
cmd
->
off£t
);

4967 i‡(*
∂oˇl
 !
NGX_CONF_UNSET_PTR
) {

4971 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4973 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4974 *
∂oˇl
 = 
NULL
;

4975  
NGX_CONF_OK
;

4978 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4980 
ccv
.
cf
 = cf;

4981 
ccv
.
vÆue
 = &value[1];

4982 
ccv
.
com∂ex_vÆue
 = &
cv
;

4984 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4985  
NGX_CONF_ERROR
;

4988 
loˇl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_loˇl_t
));

4989 i‡(
loˇl
 =
NULL
) {

4990  
NGX_CONF_ERROR
;

4993 *
∂oˇl
 = 
loˇl
;

4995 i‡(
cv
.
Àngths
) {

4996 
loˇl
->
vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

4997 i‡(
loˇl
->
vÆue
 =
NULL
) {

4998  
NGX_CONF_ERROR
;

5001 *
loˇl
->
vÆue
 = 
cv
;

5003  
NGX_CONF_OK
;

5006 
loˇl
->
addr
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_addr_t
));

5007 i‡(
loˇl
->
addr
 =
NULL
) {

5008  
NGX_CONF_ERROR
;

5011 
rc
 = 
	`ngx_∑r£_addr
(
cf
->
poﬁ
, 
loˇl
->
addr
, 
vÆue
[1].
d©a
, vÆue[1].
Àn
);

5013 
rc
) {

5014 
NGX_OK
:

5015 
loˇl
->
addr
->
«me
 = 
vÆue
[1];

5016  
NGX_CONF_OK
;

5018 
NGX_DECLINED
:

5019 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5020 "övÆidáddªs†\"%V\"", &
vÆue
[1]);

5024  
NGX_CONF_ERROR
;

5026 
	}
}

5029 
ngx_addr_t
 *

5030 
	$ngx_hâp_up°ªam_gë_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

5031 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
)

5033 
ngx_öt_t
 
rc
;

5034 
ngx_°r_t
 
vÆ
;

5035 
ngx_addr_t
 *
addr
;

5037 i‡(
loˇl
 =
NULL
) {

5038  
NULL
;

5041 i‡(
loˇl
->
vÆue
 =
NULL
) {

5042  
loˇl
->
addr
;

5045 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
loˇl
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

5046  
NULL
;

5049 i‡(
vÆ
.
Àn
 == 0) {

5050  
NULL
;

5053 
addr
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_addr_t
));

5054 i‡(
addr
 =
NULL
) {

5055  
NULL
;

5058 
rc
 = 
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
vÆ
.
d©a
, vÆ.
Àn
);

5060 
rc
) {

5061 
NGX_OK
:

5062 
addr
->
«me
 = 
vÆ
;

5063  
addr
;

5065 
NGX_DECLINED
:

5066 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

5067 "övÆidÜoˇ»addªs†\"%V\"", &
vÆ
);

5071  
NULL
;

5073 
	}
}

5077 
	$ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

5078 *
c⁄f
)

5080 *
p
 = 
c⁄f
;

5082 
ngx_°r_t
 *
vÆue
;

5083 
ngx_¨øy_t
 **
a
;

5084 
ngx_hâp_up°ªam_∑øm_t
 *
∑øm
;

5086 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

5088 i‡(*
a
 =
NULL
) {

5089 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_hâp_up°ªam_∑øm_t
));

5090 i‡(*
a
 =
NULL
) {

5091  
NGX_CONF_ERROR
;

5095 
∑øm
 = 
	`ngx_¨øy_push
(*
a
);

5096 i‡(
∑øm
 =
NULL
) {

5097  
NGX_CONF_ERROR
;

5100 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5102 
∑øm
->
key
 = 
vÆue
[1];

5103 
∑øm
->
vÆue
 = value[2];

5104 
∑øm
->
skù_em±y
 = 0;

5106 i‡(
cf
->
¨gs
->
√…s
 == 4) {

5107 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "if_not_empty") != 0) {

5108 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5109 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

5110  
NGX_CONF_ERROR
;

5113 
∑øm
->
skù_em±y
 = 1;

5116  
NGX_CONF_OK
;

5117 
	}
}

5120 
ngx_öt_t


5121 
	$ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

5122 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

5123 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
)

5125 
ngx_°r_t
 *
h
;

5126 
ngx_uöt_t
 
i
, 
j
;

5127 
ngx_¨øy_t
 
hide_hódîs
;

5128 
ngx_hash_key_t
 *
hk
;

5130 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR


5131 && 
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
)

5133 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

5134 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

5136 
c⁄f
->
hide_hódîs_hash
 = 
¥ev
->hide_headers_hash;

5138 i‡(
c⁄f
->
hide_hódîs_hash
.
buckës


5139 #i‡(
NGX_HTTP_CACHE
)

5140 && ((
c⁄f
->
ˇche
 =
NULL
Ë=(
¥ev
->cache == NULL))

5144  
NGX_OK
;

5148 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR
) {

5149 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

5152 i‡(
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
) {

5153 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

5157 i‡(
	`ngx_¨øy_öô
(&
hide_hódîs
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

5158 !
NGX_OK
)

5160  
NGX_ERROR
;

5163 
h
 = 
deÁu…_hide_hódîs
; h->
Àn
; h++) {

5164 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

5165 i‡(
hk
 =
NULL
) {

5166  
NGX_ERROR
;

5169 
hk
->
key
 = *
h
;

5170 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
->
d©a
, h->
Àn
);

5171 
hk
->
vÆue
 = (*) 1;

5174 i‡(
c⁄f
->
hide_hódîs
 !
NGX_CONF_UNSET_PTR
) {

5176 
h
 = 
c⁄f
->
hide_hódîs
->
ñts
;

5178 
i
 = 0; i < 
c⁄f
->
hide_hódîs
->
√…s
; i++) {

5180 
hk
 = 
hide_hódîs
.
ñts
;

5182 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

5183 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

5184 
exi°
;

5188 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

5189 i‡(
hk
 =
NULL
) {

5190  
NGX_ERROR
;

5193 
hk
->
key
 = 
h
[
i
];

5194 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
[
i
].
d©a
, h[i].
Àn
);

5195 
hk
->
vÆue
 = (*) 1;

5197 
exi°
:

5203 i‡(
c⁄f
->
∑ss_hódîs
 !
NGX_CONF_UNSET_PTR
) {

5205 
h
 = 
c⁄f
->
∑ss_hódîs
->
ñts
;

5206 
hk
 = 
hide_hódîs
.
ñts
;

5208 
i
 = 0; i < 
c⁄f
->
∑ss_hódîs
->
√…s
; i++) {

5209 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

5211 i‡(
hk
[
j
].
key
.
d©a
 =
NULL
) {

5215 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

5216 
hk
[
j
].
key
.
d©a
 = 
NULL
;

5223 
hash
->hash = &
c⁄f
->
hide_hódîs_hash
;

5224 
hash
->
key
 = 
ngx_hash_key_lc
;

5225 
hash
->
poﬁ
 = 
cf
->pool;

5226 
hash
->
ãmp_poﬁ
 = 
NULL
;

5228  
	`ngx_hash_öô
(
hash
, 
hide_hódîs
.
ñts
, hide_hódîs.
√…s
);

5229 
	}
}

5233 
	$ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

5235 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

5237 
umcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_maö_c⁄f_t
));

5238 i‡(
umcf
 =
NULL
) {

5239  
NULL
;

5242 i‡(
	`ngx_¨øy_öô
(&
umcf
->
up°ªams
, 
cf
->
poﬁ
, 4,

5243 (
ngx_hâp_up°ªam_§v_c⁄f_t
 *))

5244 !
NGX_OK
)

5246  
NULL
;

5249  
umcf
;

5250 
	}
}

5254 
	$ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

5256 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
 = 
c⁄f
;

5258 
ngx_uöt_t
 
i
;

5259 
ngx_¨øy_t
 
hódîs_ö
;

5260 
ngx_hash_key_t
 *
hk
;

5261 
ngx_hash_öô_t
 
hash
;

5262 
ngx_hâp_up°ªam_öô_±
 
öô
;

5263 
ngx_hâp_up°ªam_hódî_t
 *
hódî
;

5264 
ngx_hâp_up°ªam_§v_c⁄f_t
 **
uscÂ
;

5266 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

5268 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

5270 
öô
 = 
uscÂ
[
i
]->
≥î
.
öô_up°ªam
 ? uscfp[i]->peer.init_upstream:

5271 
ngx_hâp_up°ªam_öô_round_robö
;

5273 i‡(
	`öô
(
cf
, 
uscÂ
[
i
]Ë!
NGX_OK
) {

5274  
NGX_CONF_ERROR
;

5281 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

5282 !
NGX_OK
)

5284  
NGX_CONF_ERROR
;

5287 
hódî
 = 
ngx_hâp_up°ªam_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

5288 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

5289 i‡(
hk
 =
NULL
) {

5290  
NGX_CONF_ERROR
;

5293 
hk
->
key
 = 
hódî
->
«me
;

5294 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

5295 
hk
->
vÆue
 = 
hódî
;

5298 
hash
.hash = &
umcf
->
hódîs_ö_hash
;

5299 
hash
.
key
 = 
ngx_hash_key_lc
;

5300 
hash
.
max_size
 = 512;

5301 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

5302 
hash
.
«me
 = "upstream_headers_in_hash";

5303 
hash
.
poﬁ
 = 
cf
->pool;

5304 
hash
.
ãmp_poﬁ
 = 
NULL
;

5306 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

5307  
NGX_CONF_ERROR
;

5310  
NGX_CONF_OK
;

5311 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

16 
	~<ngx_evít_pùe.h
>

17 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_UPSTREAM_FT_ERROR
 0x00000002

	)

21 
	#NGX_HTTP_UPSTREAM_FT_TIMEOUT
 0x00000004

	)

22 
	#NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 0x00000008

	)

23 
	#NGX_HTTP_UPSTREAM_FT_HTTP_500
 0x00000010

	)

24 
	#NGX_HTTP_UPSTREAM_FT_HTTP_502
 0x00000020

	)

25 
	#NGX_HTTP_UPSTREAM_FT_HTTP_503
 0x00000040

	)

26 
	#NGX_HTTP_UPSTREAM_FT_HTTP_504
 0x00000080

	)

27 
	#NGX_HTTP_UPSTREAM_FT_HTTP_403
 0x00000100

	)

28 
	#NGX_HTTP_UPSTREAM_FT_HTTP_404
 0x00000200

	)

29 
	#NGX_HTTP_UPSTREAM_FT_UPDATING
 0x00000400

	)

30 
	#NGX_HTTP_UPSTREAM_FT_BUSY_LOCK
 0x00000800

	)

31 
	#NGX_HTTP_UPSTREAM_FT_MAX_WAITING
 0x00001000

	)

32 
	#NGX_HTTP_UPSTREAM_FT_NOLIVE
 0x40000000

	)

33 
	#NGX_HTTP_UPSTREAM_FT_OFF
 0x80000000

	)

35 
	#NGX_HTTP_UPSTREAM_FT_STATUS
 (
NGX_HTTP_UPSTREAM_FT_HTTP_500
 \

36 |
NGX_HTTP_UPSTREAM_FT_HTTP_502
 \

37 |
NGX_HTTP_UPSTREAM_FT_HTTP_503
 \

38 |
NGX_HTTP_UPSTREAM_FT_HTTP_504
 \

39 |
NGX_HTTP_UPSTREAM_FT_HTTP_403
 \

40 |
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

	)

42 
	#NGX_HTTP_UPSTREAM_INVALID_HEADER
 40

	)

45 
	#NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 0x00000002

	)

46 
	#NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 0x00000004

	)

47 
	#NGX_HTTP_UPSTREAM_IGN_EXPIRES
 0x00000008

	)

48 
	#NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 0x00000010

	)

49 
	#NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 0x00000020

	)

50 
	#NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 0x00000040

	)

51 
	#NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 0x00000080

	)

52 
	#NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 0x00000100

	)

56 
ngx_m£c_t
 
	mbl_time
;

57 
ngx_uöt_t
 
	mbl_°©e
;

59 
ngx_uöt_t
 
	m°©us
;

60 
time_t
 
	mª•⁄£_£c
;

61 
ngx_uöt_t
 
	mª•⁄£_m£c
;

62 
off_t
 
	mª•⁄£_Àngth
;

64 
ngx_°r_t
 *
	m≥î
;

65 } 
	tngx_hâp_up°ªam_°©e_t
;

69 
ngx_hash_t
 
	mhódîs_ö_hash
;

70 
ngx_¨øy_t
 
	mup°ªams
;

72 } 
	tngx_hâp_up°ªam_maö_c⁄f_t
;

74 
ngx_hâp_up°ªam_§v_c⁄f_s
 
	tngx_hâp_up°ªam_§v_c⁄f_t
;

76 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

77 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

78 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_≥î_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

79 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

83 
ngx_hâp_up°ªam_öô_±
 
öô_up°ªam
;

84 
ngx_hâp_up°ªam_öô_≥î_±
 
öô
;

85 *
d©a
;

86 } 
	tngx_hâp_up°ªam_≥î_t
;

90 
ngx_addr_t
 *
addrs
;

91 
ngx_uöt_t
 
«ddrs
;

92 
ngx_uöt_t
 
weight
;

93 
ngx_uöt_t
 
max_Áûs
;

94 
time_t
 
Áû_timeout
;

96 
down
:1;

97 
backup
:1;

98 } 
	tngx_hâp_up°ªam_£rvî_t
;

101 
	#NGX_HTTP_UPSTREAM_CREATE
 0x0001

	)

102 
	#NGX_HTTP_UPSTREAM_WEIGHT
 0x0002

	)

103 
	#NGX_HTTP_UPSTREAM_MAX_FAILS
 0x0004

	)

104 
	#NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

105 
	#NGX_HTTP_UPSTREAM_DOWN
 0x0010

	)

106 
	#NGX_HTTP_UPSTREAM_BACKUP
 0x0020

	)

109 
	sngx_hâp_up°ªam_§v_c⁄f_s
 {

110 
ngx_hâp_up°ªam_≥î_t
 
≥î
;

111 **
§v_c⁄f
;

113 
ngx_¨øy_t
 *
£rvîs
;

115 
ngx_uöt_t
 
Êags
;

116 
ngx_°r_t
 
ho°
;

117 
u_ch¨
 *
fûe_«me
;

118 
ngx_uöt_t
 
löe
;

119 
ö_p‹t_t
 
p‹t
;

120 
ö_p‹t_t
 
deÁu…_p‹t
;

121 
ngx_uöt_t
 
no_p‹t
;

126 
ngx_addr_t
 *
addr
;

127 
ngx_hâp_com∂ex_vÆue_t
 *
vÆue
;

128 } 
	tngx_hâp_up°ªam_loˇl_t
;

132 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

134 
ngx_m£c_t
 
c⁄√˘_timeout
;

135 
ngx_m£c_t
 
£nd_timeout
;

136 
ngx_m£c_t
 
ªad_timeout
;

137 
ngx_m£c_t
 
timeout
;

139 
size_t
 
£nd_low©
;

140 
size_t
 
buf„r_size
;

142 
size_t
 
busy_buf„rs_size
;

143 
size_t
 
max_ãmp_fûe_size
;

144 
size_t
 
ãmp_fûe_wrôe_size
;

146 
size_t
 
busy_buf„rs_size_c⁄f
;

147 
size_t
 
max_ãmp_fûe_size_c⁄f
;

148 
size_t
 
ãmp_fûe_wrôe_size_c⁄f
;

150 
ngx_bufs_t
 
bufs
;

152 
ngx_uöt_t
 
ign‹e_hódîs
;

153 
ngx_uöt_t
 
√xt_up°ªam
;

154 
ngx_uöt_t
 
°‹e_ac˚ss
;

155 
ngx_Êag_t
 
buf„rög
;

156 
ngx_Êag_t
 
∑ss_ªque°_hódîs
;

157 
ngx_Êag_t
 
∑ss_ªque°_body
;

159 
ngx_Êag_t
 
ign‹e_˛õ¡_ab‹t
;

160 
ngx_Êag_t
 
öãr˚±_îr‹s
;

161 
ngx_Êag_t
 
cy˛ic_ãmp_fûe
;

163 
ngx_∑th_t
 *
ãmp_∑th
;

165 
ngx_hash_t
 
hide_hódîs_hash
;

166 
ngx_¨øy_t
 *
hide_hódîs
;

167 
ngx_¨øy_t
 *
∑ss_hódîs
;

169 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
;

171 #i‡(
NGX_HTTP_CACHE
)

172 
ngx_shm_z⁄e_t
 *
ˇche
;

174 
ngx_uöt_t
 
ˇche_mö_u£s
;

175 
ngx_uöt_t
 
ˇche_u£_°Æe
;

176 
ngx_uöt_t
 
ˇche_mëhods
;

178 
ngx_Êag_t
 
ˇche_lock
;

179 
ngx_m£c_t
 
ˇche_lock_timeout
;

181 
ngx_Êag_t
 
ˇche_ªvÆid©e
;

183 
ngx_¨øy_t
 *
ˇche_vÆid
;

184 
ngx_¨øy_t
 *
ˇche_by∑ss
;

185 
ngx_¨øy_t
 *
no_ˇche
;

188 
ngx_¨øy_t
 *
°‹e_Àngths
;

189 
ngx_¨øy_t
 *
°‹e_vÆues
;

191 sig√d 
°‹e
:2;

192 
öãr˚±_404
:1;

193 
ch™ge_buf„rög
:1;

195 #i‡(
NGX_HTTP_SSL
)

196 
ngx_s¶_t
 *
s¶
;

197 
ngx_Êag_t
 
s¶_£ssi⁄_ªu£
;

200 
ngx_°r_t
 
moduÀ
;

201 } 
	tngx_hâp_up°ªam_c⁄f_t
;

205 
ngx_°r_t
 
«me
;

206 
ngx_hâp_hódî_h™dÀr_±
 
h™dÀr
;

207 
ngx_uöt_t
 
off£t
;

208 
ngx_hâp_hódî_h™dÀr_±
 
c›y_h™dÀr
;

209 
ngx_uöt_t
 
c⁄f
;

210 
ngx_uöt_t
 
ªdúe˘
;

211 } 
	tngx_hâp_up°ªam_hódî_t
;

215 
ngx_li°_t
 
hódîs
;

217 
ngx_uöt_t
 
°©us_n
;

218 
ngx_°r_t
 
°©us_löe
;

220 
ngx_èbÀ_ñt_t
 *
°©us
;

221 
ngx_èbÀ_ñt_t
 *
d©e
;

222 
ngx_èbÀ_ñt_t
 *
£rvî
;

223 
ngx_èbÀ_ñt_t
 *
c⁄√˘i⁄
;

225 
ngx_èbÀ_ñt_t
 *
expúes
;

226 
ngx_èbÀ_ñt_t
 *
ëag
;

227 
ngx_èbÀ_ñt_t
 *
x_ac˚l_expúes
;

228 
ngx_èbÀ_ñt_t
 *
x_ac˚l_ªdúe˘
;

229 
ngx_èbÀ_ñt_t
 *
x_ac˚l_limô_øã
;

231 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ty≥
;

232 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_Àngth
;

234 
ngx_èbÀ_ñt_t
 *
œ°_modifõd
;

235 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

236 
ngx_èbÀ_ñt_t
 *
ac˚±_ønges
;

237 
ngx_èbÀ_ñt_t
 *
www_authítiˇã
;

238 
ngx_èbÀ_ñt_t
 *
å™s„r_ícodög
;

240 #i‡(
NGX_HTTP_GZIP
)

241 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ícodög
;

244 
off_t
 
c⁄ã¡_Àngth_n
;

246 
ngx_¨øy_t
 
ˇche_c⁄åﬁ
;

248 
c⁄√˘i⁄_˛o£
:1;

249 
chunked
:1;

250 } 
	tngx_hâp_up°ªam_hódîs_ö_t
;

254 
ngx_°r_t
 
ho°
;

255 
ö_p‹t_t
 
p‹t
;

256 
ngx_uöt_t
 
no_p‹t
;

258 
ngx_uöt_t
 
«ddrs
;

259 
ngx_addr_t
 *
addrs
;

261 
sockaddr
 *sockaddr;

262 
sockÀn_t
 
sockÀn
;

264 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

265 } 
	tngx_hâp_up°ªam_ªsﬁved_t
;

268 (*
	tngx_hâp_up°ªam_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

269 
	tngx_hâp_up°ªam_t
 *
	tu
);

272 
	sngx_hâp_up°ªam_s
 {

273 
ngx_hâp_up°ªam_h™dÀr_±
 
ªad_evít_h™dÀr
;

274 
ngx_hâp_up°ªam_h™dÀr_±
 
wrôe_evít_h™dÀr
;

276 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

278 
ngx_evít_pùe_t
 *
pùe
;

280 
ngx_chaö_t
 *
ªque°_bufs
;

282 
ngx_ouçut_chaö_˘x_t
 
ouçut
;

283 
ngx_chaö_wrôî_˘x_t
 
wrôî
;

285 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
;

287 
ngx_hâp_up°ªam_hódîs_ö_t
 
hódîs_ö
;

289 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

291 
ngx_buf_t
 
‰om_˛õ¡
;

293 
ngx_buf_t
 
buf„r
;

294 
off_t
 
Àngth
;

296 
ngx_chaö_t
 *
out_bufs
;

297 
ngx_chaö_t
 *
busy_bufs
;

298 
ngx_chaö_t
 *
‰ì_bufs
;

300 
	`ngx_öt_t
 (*
öput_fûãr_öô
)(*
d©a
);

301 
	`ngx_öt_t
 (*
öput_fûãr
)(*
d©a
, 
ssize_t
 
byãs
);

302 *
öput_fûãr_˘x
;

304 #i‡(
NGX_HTTP_CACHE
)

305 
	`ngx_öt_t
 (*
¸óã_key
)(
ngx_hâp_ªque°_t
 *
r
);

307 
	`ngx_öt_t
 (*
¸óã_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

308 
	`ngx_öt_t
 (*
ªöô_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

309 
	`ngx_öt_t
 (*
¥o˚ss_hódî
)(
ngx_hâp_ªque°_t
 *
r
);

310 (*
ab‹t_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

311 (*
föÆize_ªque°
)(
ngx_hâp_ªque°_t
 *
r
,

312 
ngx_öt_t
 
rc
);

313 
	`ngx_öt_t
 (*
ªwrôe_ªdúe˘
)(
ngx_hâp_ªque°_t
 *
r
,

314 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

315 
	`ngx_öt_t
 (*
ªwrôe_cookõ
)(
ngx_hâp_ªque°_t
 *
r
,

316 
ngx_èbÀ_ñt_t
 *
h
);

318 
ngx_m£c_t
 
timeout
;

320 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

322 
ngx_°r_t
 
mëhod
;

323 
ngx_°r_t
 
schema
;

324 
ngx_°r_t
 
uri
;

326 
ngx_hâp_˛ónup_±
 *
˛ónup
;

328 
°‹e
:1;

329 
ˇchóbÀ
:1;

330 
ac˚l
:1;

331 
s¶
:1;

332 #i‡(
NGX_HTTP_CACHE
)

333 
ˇche_°©us
:3;

336 
buf„rög
:1;

337 
kì∑live
:1;

338 
upgøde
:1;

340 
ªque°_£¡
:1;

341 
hódî_£¡
:1;

346 
ngx_uöt_t
 
°©us
;

347 
ngx_uöt_t
 
mask
;

348 } 
	tngx_hâp_up°ªam_√xt_t
;

352 
ngx_°r_t
 
key
;

353 
ngx_°r_t
 
vÆue
;

354 
ngx_uöt_t
 
skù_em±y
;

355 } 
	tngx_hâp_up°ªam_∑øm_t
;

358 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

359 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

361 
ngx_öt_t
 
	`ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

362 
	`ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
);

363 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
	`ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

364 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

365 *
	`ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

366 *
c⁄f
);

367 *
	`ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

368 *
c⁄f
);

369 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

370 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

371 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
);

374 
	#ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

375 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

378 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

379 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ˇche_mëhod_mask
[];

380 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ign‹e_hódîs_masks
[];

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream_round_robin.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_up°ªam_º_≥î_t
 *
ngx_hâp_up°ªam_gë_≥î
(

14 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
);

16 #i‡(
NGX_HTTP_SSL
)

18 
ngx_öt_t
 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

19 *
d©a
);

20 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

21 *
d©a
);

26 
ngx_öt_t


27 
	$ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

30 
ngx_uæ_t
 
u
;

31 
ngx_uöt_t
 
i
, 
j
, 
n
, 
w
;

32 
ngx_hâp_up°ªam_£rvî_t
 *
£rvî
;

33 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

35 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_round_robö_≥î
;

37 i‡(
us
->
£rvîs
) {

38 
£rvî
 = 
us
->
£rvîs
->
ñts
;

40 
n
 = 0;

41 
w
 = 0;

43 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

44 i‡(
£rvî
[
i
].
backup
) {

48 
n
 +
£rvî
[
i
].
«ddrs
;

49 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

52 i‡(
n
 == 0) {

53 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

55 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

56  
NGX_ERROR
;

59 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

60 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

61 i‡(
≥îs
 =
NULL
) {

62  
NGX_ERROR
;

65 
≥îs
->
sögÀ
 = (
n
 == 1);

66 
≥îs
->
numbî
 = 
n
;

67 
≥îs
->
weighãd
 = (
w
 !
n
);

68 
≥îs
->
tŸÆ_weight
 = 
w
;

69 
≥îs
->
«me
 = &
us
->
ho°
;

71 
n
 = 0;

73 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

74 i‡(
£rvî
[
i
].
backup
) {

78 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

79 
≥îs
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

80 
≥îs
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

81 
≥îs
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

82 
≥îs
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

83 
≥îs
->
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

84 
≥îs
->
≥î
[
n
].
cuºít_weight
 = 0;

85 
≥îs
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

86 
≥îs
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

87 
≥îs
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

88 
n
++;

92 
us
->
≥î
.
d©a
 = 
≥îs
;

96 
n
 = 0;

97 
w
 = 0;

99 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

100 i‡(!
£rvî
[
i
].
backup
) {

104 
n
 +
£rvî
[
i
].
«ddrs
;

105 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

108 i‡(
n
 == 0) {

109  
NGX_OK
;

112 
backup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

113 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

114 i‡(
backup
 =
NULL
) {

115  
NGX_ERROR
;

118 
≥îs
->
sögÀ
 = 0;

119 
backup
->
sögÀ
 = 0;

120 
backup
->
numbî
 = 
n
;

121 
backup
->
weighãd
 = (
w
 !
n
);

122 
backup
->
tŸÆ_weight
 = 
w
;

123 
backup
->
«me
 = &
us
->
ho°
;

125 
n
 = 0;

127 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

128 i‡(!
£rvî
[
i
].
backup
) {

132 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

133 
backup
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

134 
backup
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

135 
backup
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

136 
backup
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

137 
backup
->
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

138 
backup
->
≥î
[
n
].
cuºít_weight
 = 0;

139 
backup
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

140 
backup
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

141 
backup
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

142 
n
++;

146 
≥îs
->
√xt
 = 
backup
;

148  
NGX_OK
;

154 i‡(
us
->
p‹t
 == 0) {

155 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

157 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

158  
NGX_ERROR
;

161 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

163 
u
.
ho°
 = 
us
->host;

164 
u
.
p‹t
 = 
us
->port;

166 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

167 i‡(
u
.
îr
) {

168 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

170 
u
.
îr
, &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

173  
NGX_ERROR
;

176 
n
 = 
u
.
«ddrs
;

178 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

179 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

180 i‡(
≥îs
 =
NULL
) {

181  
NGX_ERROR
;

184 
≥îs
->
sögÀ
 = (
n
 == 1);

185 
≥îs
->
numbî
 = 
n
;

186 
≥îs
->
weighãd
 = 0;

187 
≥îs
->
tŸÆ_weight
 = 
n
;

188 
≥îs
->
«me
 = &
us
->
ho°
;

190 
i
 = 0; i < 
u
.
«ddrs
; i++) {

191 
≥îs
->
≥î
[
i
].
sockaddr
 = 
u
.
addrs
[i].sockaddr;

192 
≥îs
->
≥î
[
i
].
sockÀn
 = 
u
.
addrs
[i].socklen;

193 
≥îs
->
≥î
[
i
].
«me
 = 
u
.
addrs
[i].name;

194 
≥îs
->
≥î
[
i
].
weight
 = 1;

195 
≥îs
->
≥î
[
i
].
ef„˘ive_weight
 = 1;

196 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 0;

197 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

198 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

201 
us
->
≥î
.
d©a
 = 
≥îs
;

205  
NGX_OK
;

206 
	}
}

209 
ngx_öt_t


210 
	$ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

211 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

213 
ngx_uöt_t
 
n
;

214 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

216 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

218 i‡(
ºp
 =
NULL
) {

219 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

220 i‡(
ºp
 =
NULL
) {

221  
NGX_ERROR
;

224 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

227 
ºp
->
≥îs
 = 
us
->
≥î
.
d©a
;

228 
ºp
->
cuºít
 = 0;

230 
n
 = 
ºp
->
≥îs
->
numbî
;

232 i‡(
ºp
->
≥îs
->
√xt
 &&ÑΩ->≥îs->√xt->
numbî
 > 
n
) {

233 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
;

236 i‡(
n
 <8 * (
uöçå_t
)) {

237 
ºp
->
åõd
 = &ºp->
d©a
;

238 
ºp
->
d©a
 = 0;

241 
n
 = (¿+ (8 * (
uöçå_t
) - 1)) / (8 * (uintptr_t));

243 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

244 i‡(
ºp
->
åõd
 =
NULL
) {

245  
NGX_ERROR
;

249 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

250 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

251 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

252 #i‡(
NGX_HTTP_SSL
)

253 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 =

254 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
;

255 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 =

256 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
;

259  
NGX_OK
;

260 
	}
}

263 
ngx_öt_t


264 
	$ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

265 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
)

267 
u_ch¨
 *
p
;

268 
size_t
 
Àn
;

269 
sockÀn_t
 
sockÀn
;

270 
ngx_uöt_t
 
i
, 
n
;

271 
sockaddr
 *sockaddr;

272 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

273 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

275 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

277 i‡(
ºp
 =
NULL
) {

278 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

279 i‡(
ºp
 =
NULL
) {

280  
NGX_ERROR
;

283 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

286 
≥îs
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

287 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
ur
->
«ddrs
 - 1));

288 i‡(
≥îs
 =
NULL
) {

289  
NGX_ERROR
;

292 
≥îs
->
sögÀ
 = (
ur
->
«ddrs
 == 1);

293 
≥îs
->
numbî
 = 
ur
->
«ddrs
;

294 
≥îs
->
«me
 = &
ur
->
ho°
;

296 i‡(
ur
->
sockaddr
) {

297 
≥îs
->
≥î
[0].
sockaddr
 = 
ur
->sockaddr;

298 
≥îs
->
≥î
[0].
sockÀn
 = 
ur
->socklen;

299 
≥îs
->
≥î
[0].
«me
 = 
ur
->
ho°
;

300 
≥îs
->
≥î
[0].
weight
 = 1;

301 
≥îs
->
≥î
[0].
ef„˘ive_weight
 = 1;

302 
≥îs
->
≥î
[0].
cuºít_weight
 = 0;

303 
≥îs
->
≥î
[0].
max_Áûs
 = 1;

304 
≥îs
->
≥î
[0].
Áû_timeout
 = 10;

308 
i
 = 0; i < 
ur
->
«ddrs
; i++) {

310 
sockÀn
 = 
ur
->
addrs
[
i
].socklen;

312 
sockaddr
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
sockÀn
);

313 i‡(
sockaddr
 =
NULL
) {

314  
NGX_ERROR
;

317 
	`ngx_mem˝y
(
sockaddr
, 
ur
->
addrs
[
i
].sockaddr, 
sockÀn
);

319 
sockaddr
->
ß_Ámûy
) {

320 #i‡(
NGX_HAVE_INET6
)

321 
AF_INET6
:

322 ((
sockaddr_ö6
 *Ë
sockaddr
)->
sö6_p‹t
 = 
	`ht⁄s
(
ur
->
p‹t
);

326 ((
sockaddr_ö
 *Ë
sockaddr
)->
sö_p‹t
 = 
	`ht⁄s
(
ur
->
p‹t
);

329 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

330 i‡(
p
 =
NULL
) {

331  
NGX_ERROR
;

334 
Àn
 = 
	`ngx_sock_¡›
(
sockaddr
, 
sockÀn
, 
p
, 
NGX_SOCKADDR_STRLEN
, 1);

336 
≥îs
->
≥î
[
i
].
sockaddr
 = sockaddr;

337 
≥îs
->
≥î
[
i
].
sockÀn
 = socklen;

338 
≥îs
->
≥î
[
i
].
«me
.
Àn
 =Üen;

339 
≥îs
->
≥î
[
i
].
«me
.
d©a
 = 
p
;

340 
≥îs
->
≥î
[
i
].
weight
 = 1;

341 
≥îs
->
≥î
[
i
].
ef„˘ive_weight
 = 1;

342 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 0;

343 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

344 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

348 
ºp
->
≥îs
 =Öeers;

349 
ºp
->
cuºít
 = 0;

351 i‡(
ºp
->
≥îs
->
numbî
 <8 * (
uöçå_t
)) {

352 
ºp
->
åõd
 = &ºp->
d©a
;

353 
ºp
->
d©a
 = 0;

356 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

357 / (8 * (
uöçå_t
));

359 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

360 i‡(
ºp
->
åõd
 =
NULL
) {

361  
NGX_ERROR
;

365 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

366 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

367 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

368 #i‡(
NGX_HTTP_SSL
)

369 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
;

370 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
;

373  
NGX_OK
;

374 
	}
}

377 
ngx_öt_t


378 
	$ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

380 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

382 
ngx_öt_t
 
rc
;

383 
ngx_uöt_t
 
i
, 
n
;

384 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

385 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

387 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

388 "gëÑ∏≥î,Åry: %ui", 
pc
->
åõs
);

392 
pc
->
ˇched
 = 0;

393 
pc
->
c⁄√˘i⁄
 = 
NULL
;

395 i‡(
ºp
->
≥îs
->
sögÀ
) {

396 
≥î
 = &
ºp
->
≥îs
->peer[0];

398 i‡(
≥î
->
down
) {

399 
Áûed
;

406 
≥î
 = 
	`ngx_hâp_up°ªam_gë_≥î
(
ºp
);

408 i‡(
≥î
 =
NULL
) {

409 
Áûed
;

412 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

414 
ºp
->
cuºít
, 
≥î
->
cuºít_weight
);

417 
pc
->
sockaddr
 = 
≥î
->sockaddr;

418 
pc
->
sockÀn
 = 
≥î
->socklen;

419 
pc
->
«me
 = &
≥î
->name;

423 i‡(
pc
->
åõs
 =1 && 
ºp
->
≥îs
->
√xt
) {

424 
pc
->
åõs
 +
ºp
->
≥îs
->
√xt
->
numbî
;

427  
NGX_OK
;

429 
Áûed
:

431 
≥îs
 = 
ºp
->peers;

433 i‡(
≥îs
->
√xt
) {

437 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0, "backup servers");

439 
ºp
->
≥îs
 =Öìrs->
√xt
;

440 
pc
->
åõs
 = 
ºp
->
≥îs
->
numbî
;

442 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

443 / (8 * (
uöçå_t
));

445 
i
 = 0; i < 
n
; i++) {

446 
ºp
->
åõd
[
i
] = 0;

449 
rc
 = 
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

451 i‡(
rc
 !
NGX_BUSY
) {

452  
rc
;

460 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

461 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

466 
pc
->
«me
 = 
≥îs
->name;

468  
NGX_BUSY
;

469 
	}
}

472 
ngx_hâp_up°ªam_º_≥î_t
 *

473 
	$ngx_hâp_up°ªam_gë_≥î
(
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
)

475 
time_t
 
now
;

476 
uöçå_t
 
m
;

477 
ngx_öt_t
 
tŸÆ
;

478 
ngx_uöt_t
 
i
, 
n
;

479 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

481 
now
 = 
	`ngx_time
();

483 
be°
 = 
NULL
;

484 
tŸÆ
 = 0;

486 
i
 = 0; i < 
ºp
->
≥îs
->
numbî
; i++) {

488 
n
 = 
i
 / (8 * (
uöçå_t
));

489 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

491 i‡(
ºp
->
åõd
[
n
] & 
m
) {

495 
≥î
 = &
ºp
->
≥îs
->≥î[
i
];

497 i‡(
≥î
->
down
) {

501 i‡(
≥î
->
max_Áûs


502 && 
≥î
->
Áûs
 >≥î->
max_Áûs


503 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

508 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

509 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

511 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

512 
≥î
->
ef„˘ive_weight
++;

515 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

516 
be°
 = 
≥î
;

520 i‡(
be°
 =
NULL
) {

521  
NULL
;

524 
i
 = 
be°
 - &
ºp
->
≥îs
->
≥î
[0];

526 
ºp
->
cuºít
 = 
i
;

528 
n
 = 
i
 / (8 * (
uöçå_t
));

529 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

531 
ºp
->
åõd
[
n
] |
m
;

533 
be°
->
cuºít_weight
 -
tŸÆ
;

535 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

536 
be°
->
checked
 = 
now
;

539  
be°
;

540 
	}
}

544 
	$ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

545 
ngx_uöt_t
 
°©e
)

547 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

549 
time_t
 
now
;

550 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

552 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

553 "‰ìÑ∏≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

557 i‡(
ºp
->
≥îs
->
sögÀ
) {

558 
pc
->
åõs
 = 0;

562 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

564 i‡(
°©e
 & 
NGX_PEER_FAILED
) {

565 
now
 = 
	`ngx_time
();

569 
≥î
->
Áûs
++;

570 
≥î
->
ac˚s£d
 = 
now
;

571 
≥î
->
checked
 = 
now
;

573 i‡(
≥î
->
max_Áûs
) {

574 
≥î
->
ef„˘ive_weight
 -≥î->
weight
 /Öìr->
max_Áûs
;

577 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

579 
ºp
->
cuºít
, 
≥î
->
ef„˘ive_weight
);

581 i‡(
≥î
->
ef„˘ive_weight
 < 0) {

582 
≥î
->
ef„˘ive_weight
 = 0;

591 i‡(
≥î
->
ac˚s£d
 <Öìr->
checked
) {

592 
≥î
->
Áûs
 = 0;

596 i‡(
pc
->
åõs
) {

597 
pc
->
åõs
--;

601 
	}
}

604 #i‡(
NGX_HTTP_SSL
)

606 
ngx_öt_t


607 
	$ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

608 *
d©a
)

610 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

612 
ngx_öt_t
 
rc
;

613 
ngx_s¶_£ssi⁄_t
 *
s¶_£ssi⁄
;

614 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

616 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

621 
s¶_£ssi⁄
 = 
≥î
->ssl_session;

623 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

625 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

627 
s¶_£ssi⁄
, s¶_£ssi⁄ ? s¶_£ssi⁄->
ª„ªn˚s
 : 0);

631  
rc
;

632 
	}
}

636 
	$ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

637 *
d©a
)

639 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

641 
ngx_s¶_£ssi⁄_t
 *
ﬁd_s¶_£ssi⁄
, *
s¶_£ssi⁄
;

642 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

644 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

646 i‡(
s¶_£ssi⁄
 =
NULL
) {

650 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

651 "ßvê£ssi⁄: %p:%d", 
s¶_£ssi⁄
, s¶_£ssi⁄->
ª„ªn˚s
);

653 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

658 
ﬁd_s¶_£ssi⁄
 = 
≥î
->
s¶_£ssi⁄
;

659 
≥î
->
s¶_£ssi⁄
 = ssl_session;

663 i‡(
ﬁd_s¶_£ssi⁄
) {

665 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

667 
ﬁd_s¶_£ssi⁄
, old_s¶_£ssi⁄->
ª„ªn˚s
);

671 
	`ngx_s¶_‰ì_£ssi⁄
(
ﬁd_s¶_£ssi⁄
);

673 
	}
}

676 
ngx_öt_t


677 
	$ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

679  
NGX_OK
;

680 
	}
}

684 
	$ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

687 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream_round_robin.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
sockaddr
 *
	msockaddr
;

19 
sockÀn_t
 
	msockÀn
;

20 
ngx_°r_t
 
	m«me
;

22 
ngx_öt_t
 
	mcuºít_weight
;

23 
ngx_öt_t
 
	mef„˘ive_weight
;

24 
ngx_öt_t
 
	mweight
;

26 
ngx_uöt_t
 
	mÁûs
;

27 
time_t
 
	mac˚s£d
;

28 
time_t
 
	mchecked
;

30 
ngx_uöt_t
 
	mmax_Áûs
;

31 
time_t
 
	mÁû_timeout
;

33 
ngx_uöt_t
 
	mdown
;

35 #i‡(
NGX_HTTP_SSL
)

36 
ngx_s¶_£ssi⁄_t
 *
	ms¶_£ssi⁄
;

38 } 
	tngx_hâp_up°ªam_º_≥î_t
;

41 
ngx_hâp_up°ªam_º_≥îs_s
 
	tngx_hâp_up°ªam_º_≥îs_t
;

43 
	sngx_hâp_up°ªam_º_≥îs_s
 {

44 
ngx_uöt_t
 
	mnumbî
;

48 
ngx_uöt_t
 
	mtŸÆ_weight
;

50 
	msögÀ
:1;

51 
	mweighãd
:1;

53 
ngx_°r_t
 *
	m«me
;

55 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m√xt
;

57 
ngx_hâp_up°ªam_º_≥î_t
 
	m≥î
[1];

62 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m≥îs
;

63 
ngx_uöt_t
 
	mcuºít
;

64 
uöçå_t
 *
	måõd
;

65 
uöçå_t
 
	md©a
;

66 } 
	tngx_hâp_up°ªam_º_≥î_d©a_t
;

69 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

70 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

71 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

73 
ngx_öt_t
 
ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
);

75 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

76 *
d©a
);

77 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

78 *
d©a
, 
ngx_uöt_t
 
°©e
);

80 #i‡(
NGX_HTTP_SSL
)

81 
ngx_öt_t


82 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

83 *
d©a
);

84 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

85 *
d©a
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_variables.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

16 
ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

25 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

27 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
);

32 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

34 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

36 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

38 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

42 #i‡(
NGX_HAVE_TCP_INFO
)

43 
ngx_öt_t
 
ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

47 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

49 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

51 
ngx_öt_t
 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

52 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

53 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

55 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

57 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

59 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

61 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

62 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_öt_t
 
ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

65 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

66 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

67 
ngx_öt_t
 
ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

81 
ngx_öt_t
 
ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

83 
ngx_öt_t
 
ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

85 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

87 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

89 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

91 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

93 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

95 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

97 
ngx_öt_t
 
ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

100 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

102 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

104 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

106 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

108 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

110 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

111 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

112 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

113 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

115 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

117 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

120 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

121 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

122 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

124 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

126 
ngx_öt_t
 
ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

127 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

128 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

130 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

149 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_c‹e_v¨übÀs
[] = {

151 { 
ngx_°rög
("hâp_ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

152 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ho°
), 0, 0 },

154 { 
ngx_°rög
("hâp_u£r_agít"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

155 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
u£r_agít
), 0, 0 },

157 { 
ngx_°rög
("hâp_ª„ªr"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

158 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ª„ªr
), 0, 0 },

160 #i‡(
NGX_HTTP_GZIP
)

161 { 
ngx_°rög
("hâp_vü"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

162 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
vü
), 0, 0 },

165 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

166 { 
ngx_°rög
("hâp_x_f‹w¨ded_f‹"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

167 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
x_f‹w¨ded_f‹
), 0, 0 },

170 { 
ngx_°rög
("hâp_cookõ"), 
NULL
, 
ngx_hâp_v¨übÀ_cookõs
,

171 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
cookõs
), 0, 0 },

173 { 
ngx_°rög
("c⁄ã¡_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
,

176 { 
ngx_°rög
("c⁄ã¡_ty≥"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

177 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_ty≥
), 0, 0 },

179 { 
ngx_°rög
("ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°
, 0, 0, 0 },

181 { 
ngx_°rög
("bö¨y_ªmŸe_addr"), 
NULL
,

182 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
, 0, 0, 0 },

184 { 
ngx_°rög
("ªmŸe_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_addr
, 0, 0, 0 },

186 { 
ngx_°rög
("ªmŸe_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
, 0, 0, 0 },

188 { 
ngx_°rög
("¥oxy_¥Ÿocﬁ_addr"), 
NULL
,

189 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
, 0, 0, 0 },

191 { 
ngx_°rög
("£rvî_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_addr
, 0, 0, 0 },

193 { 
ngx_°rög
("£rvî_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_p‹t
, 0, 0, 0 },

195 { 
ngx_°rög
("£rvî_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

196 
off£tof
(
ngx_hâp_ªque°_t
, 
hâp_¥Ÿocﬁ
), 0, 0 },

198 { 
ngx_°rög
("scheme"), 
NULL
, 
ngx_hâp_v¨übÀ_scheme
, 0, 0, 0 },

200 { 
ngx_°rög
("hâps"), 
NULL
, 
ngx_hâp_v¨übÀ_hâps
, 0, 0, 0 },

202 { 
ngx_°rög
("ªque°_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

203 
off£tof
(
ngx_hâp_ªque°_t
, 
u≈¨£d_uri
), 0, 0 },

205 { 
ngx_°rög
("uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

206 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

207 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

209 { 
ngx_°rög
("documít_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

210 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

211 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

213 { 
ngx_°rög
("ªque°"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_löe
, 0, 0, 0 },

215 { 
ngx_°rög
("documít_roŸ"), 
NULL
,

216 
ngx_hâp_v¨übÀ_documít_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

218 { 
ngx_°rög
("ªÆ∑th_roŸ"), 
NULL
,

219 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

221 { 
ngx_°rög
("quîy_°rög"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

222 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

223 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

225 { 
ngx_°rög
("args"),

226 
ngx_hâp_v¨übÀ_ªque°_£t
,

227 
ngx_hâp_v¨übÀ_ªque°
,

228 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

229 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

231 { 
ngx_°rög
("is_¨gs"), 
NULL
, 
ngx_hâp_v¨übÀ_is_¨gs
,

232 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

234 { 
ngx_°rög
("ªque°_fûíame"), 
NULL
,

235 
ngx_hâp_v¨übÀ_ªque°_fûíame
, 0,

236 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

238 { 
ngx_°rög
("£rvî_«me"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_«me
, 0, 0, 0 },

240 { 
ngx_°rög
("ªque°_mëhod"), 
NULL
,

241 
ngx_hâp_v¨übÀ_ªque°_mëhod
, 0,

242 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

244 { 
ngx_°rög
("ªmŸe_u£r"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_u£r
, 0, 0, 0 },

246 { 
ngx_°rög
("byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_byãs_£¡
,

249 { 
ngx_°rög
("body_byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_body_byãs_£¡
,

252 { 
ngx_°rög
("pùe"), 
NULL
, 
ngx_hâp_v¨übÀ_pùe
,

255 { 
ngx_°rög
("ªque°_com∂ëi⁄"), 
NULL
,

256 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
,

259 { 
ngx_°rög
("ªque°_body"), 
NULL
,

260 
ngx_hâp_v¨übÀ_ªque°_body
,

263 { 
ngx_°rög
("ªque°_body_fûe"), 
NULL
,

264 
ngx_hâp_v¨übÀ_ªque°_body_fûe
,

267 { 
ngx_°rög
("ªque°_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_Àngth
,

268 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

270 { 
ngx_°rög
("ªque°_time"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_time
,

271 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

273 { 
ngx_°rög
("°©us"), 
NULL
,

274 
ngx_hâp_v¨übÀ_°©us
, 0,

275 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

277 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_ty≥"), 
NULL
,

278 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
, 0, 0, 0 },

280 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_Àngth"), 
NULL
,

281 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
, 0, 0, 0 },

283 { 
ngx_°rög
("£¡_hâp_loˇti⁄"), 
NULL
,

284 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
, 0, 0, 0 },

286 { 
ngx_°rög
("£¡_hâp_œ°_modifõd"), 
NULL
,

287 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
, 0, 0, 0 },

289 { 
ngx_°rög
("£¡_hâp_c⁄√˘i⁄"), 
NULL
,

290 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
, 0, 0, 0 },

292 { 
ngx_°rög
("£¡_hâp_kìp_Æive"), 
NULL
,

293 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
, 0, 0, 0 },

295 { 
ngx_°rög
("£¡_hâp_å™s„r_ícodög"), 
NULL
,

296 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
, 0, 0, 0 },

298 { 
ngx_°rög
("£¡_hâp_ˇche_c⁄åﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

299 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_out
.
ˇche_c⁄åﬁ
), 0, 0 },

301 { 
ngx_°rög
("limô_øã"), 
ngx_hâp_v¨übÀ_ªque°_£t_size
,

302 
ngx_hâp_v¨übÀ_ªque°_gë_size
,

303 
off£tof
(
ngx_hâp_ªque°_t
, 
limô_øã
),

304 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

306 { 
ngx_°rög
("c⁄√˘i⁄"), 
NULL
,

307 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
, 0, 0, 0 },

309 { 
ngx_°rög
("c⁄√˘i⁄_ªque°s"), 
NULL
,

310 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
, 0, 0, 0 },

312 { 
ngx_°rög
("ngöx_vîsi⁄"), 
NULL
, 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
,

315 { 
ngx_°rög
("ho°«me"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°«me
,

318 { 
ngx_°rög
("pid"), 
NULL
, 
ngx_hâp_v¨übÀ_pid
,

321 { 
ngx_°rög
("m£c"), 
NULL
, 
ngx_hâp_v¨übÀ_m£c
,

322 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

324 { 
ngx_°rög
("time_iso8601"), 
NULL
, 
ngx_hâp_v¨übÀ_time_iso8601
,

325 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

327 { 
ngx_°rög
("time_loˇl"), 
NULL
, 
ngx_hâp_v¨übÀ_time_loˇl
,

328 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

330 #i‡(
NGX_HAVE_TCP_INFO
)

331 { 
ngx_°rög
("t˝öfo_πt"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

332 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

334 { 
ngx_°rög
("t˝öfo_πtv¨"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

335 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

337 { 
ngx_°rög
("t˝öfo_¢d_cwnd"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

338 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

340 { 
ngx_°rög
("t˝öfo_rcv_•a˚"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

341 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

344 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

348 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_nuŒ_vÆue
 =

349 
ngx_hâp_v¨übÀ
("");

350 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_åue_vÆue
 =

351 
ngx_hâp_v¨übÀ
("1");

354 
ngx_hâp_v¨übÀ_t
 *

355 
	$ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

357 
ngx_öt_t
 
rc
;

358 
ngx_uöt_t
 
i
;

359 
ngx_hash_key_t
 *
key
;

360 
ngx_hâp_v¨übÀ_t
 *
v
;

361 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

363 i‡(
«me
->
Àn
 == 0) {

364 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

366  
NULL
;

369 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

371 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

372 
i
 = 0; i < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
; i++) {

373 i‡(
«me
->
Àn
 !
key
[
i
].key.len

374 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
key
[
i
].key.d©a,Çame->
Àn
) != 0)

379 
v
 = 
key
[
i
].
vÆue
;

381 i‡(!(
v
->
Êags
 & 
NGX_HTTP_VAR_CHANGEABLE
)) {

382 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

383 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

384  
NULL
;

387  
v
;

390 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

391 i‡(
v
 =
NULL
) {

392  
NULL
;

395 
v
->
«me
.
Àn
 =Çame->len;

396 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

397 i‡(
v
->
«me
.
d©a
 =
NULL
) {

398  
NULL
;

401 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

403 
v
->
£t_h™dÀr
 = 
NULL
;

404 
v
->
gë_h™dÀr
 = 
NULL
;

405 
v
->
d©a
 = 0;

406 
v
->
Êags
 = flags;

407 
v
->
ödex
 = 0;

409 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v, 0);

411 i‡(
rc
 =
NGX_ERROR
) {

412  
NULL
;

415 i‡(
rc
 =
NGX_BUSY
) {

416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

417 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", 
«me
);

418  
NULL
;

421  
v
;

422 
	}
}

425 
ngx_öt_t


426 
	$ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

428 
ngx_uöt_t
 
i
;

429 
ngx_hâp_v¨übÀ_t
 *
v
;

430 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

432 i‡(
«me
->
Àn
 == 0) {

433 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

435  
NGX_ERROR
;

438 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

440 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

442 i‡(
v
 =
NULL
) {

443 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
v¨übÀs
, 
cf
->
poﬁ
, 4,

444 (
ngx_hâp_v¨übÀ_t
))

445 !
NGX_OK
)

447  
NGX_ERROR
;

451 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

452 i‡(
«me
->
Àn
 !
v
[
i
].name.len

453 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

458  
i
;

462 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
v¨übÀs
);

463 i‡(
v
 =
NULL
) {

464  
NGX_ERROR
;

467 
v
->
«me
.
Àn
 =Çame->len;

468 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

469 i‡(
v
->
«me
.
d©a
 =
NULL
) {

470  
NGX_ERROR
;

473 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

475 
v
->
£t_h™dÀr
 = 
NULL
;

476 
v
->
gë_h™dÀr
 = 
NULL
;

477 
v
->
d©a
 = 0;

478 
v
->
Êags
 = 0;

479 
v
->
ödex
 = 
cmcf
->
v¨übÀs
.
√…s
 - 1;

481  
v
->
ödex
;

482 
	}
}

485 
ngx_hâp_v¨übÀ_vÆue_t
 *

486 
	$ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

488 
ngx_hâp_v¨übÀ_t
 *
v
;

489 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

491 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

493 i‡(
cmcf
->
v¨übÀs
.
√…s
 <
ödex
) {

494 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

495 "unknow¿v¨übÀ index: %ui", 
ödex
);

496  
NULL
;

499 i‡(
r
->
v¨übÀs
[
ödex
].
nŸ_found
 ||Ñ->v¨übÀs[ödex].
vÆid
) {

500  &
r
->
v¨übÀs
[
ödex
];

503 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

505 i‡(
v
[
ödex
].
	`gë_h™dÀr
(
r
, &r->
v¨übÀs
[ödex], v[ödex].
d©a
)

506 =
NGX_OK
)

508 i‡(
v
[
ödex
].
Êags
 & 
NGX_HTTP_VAR_NOCACHEABLE
) {

509 
r
->
v¨übÀs
[
ödex
].
no_ˇchóbÀ
 = 1;

512  &
r
->
v¨übÀs
[
ödex
];

515 
r
->
v¨übÀs
[
ödex
].
vÆid
 = 0;

516 
r
->
v¨übÀs
[
ödex
].
nŸ_found
 = 1;

518  
NULL
;

519 
	}
}

522 
ngx_hâp_v¨übÀ_vÆue_t
 *

523 
	$ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

525 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

527 
v
 = &
r
->
v¨übÀs
[
ödex
];

529 i‡(
v
->
vÆid
 || v->
nŸ_found
) {

530 i‡(!
v
->
no_ˇchóbÀ
) {

531  
v
;

534 
v
->
vÆid
 = 0;

535 
v
->
nŸ_found
 = 0;

538  
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ödex
);

539 
	}
}

542 
ngx_hâp_v¨übÀ_vÆue_t
 *

543 
	$ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
)

545 
ngx_hâp_v¨übÀ_t
 *
v
;

546 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

547 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

549 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

551 
v
 = 
	`ngx_hash_föd
(&
cmcf
->
v¨übÀs_hash
, 
key
, 
«me
->
d©a
,Çame->
Àn
);

553 i‡(
v
) {

554 i‡(
v
->
Êags
 & 
NGX_HTTP_VAR_INDEXED
) {

555  
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
v
->
ödex
);

559 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

561 i‡(
vv
 && 
v
->
	`gë_h™dÀr
(
r
, vv, v->
d©a
Ë=
NGX_OK
) {

562  
vv
;

565  
NULL
;

569 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

570 i‡(
vv
 =
NULL
) {

571  
NULL
;

574 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "http_", 5) == 0) {

576 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_ö
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

577 =
NGX_OK
)

579  
vv
;

582  
NULL
;

585 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "sent_http_", 10) == 0) {

587 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_out
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

588 =
NGX_OK
)

590  
vv
;

593  
NULL
;

596 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "upstream_http_", 14) == 0) {

598 i‡(
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

599 =
NGX_OK
)

601  
vv
;

604  
NULL
;

607 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "cookie_", 7) == 0) {

609 i‡(
	`ngx_hâp_v¨übÀ_cookõ
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

610  
vv
;

613  
NULL
;

616 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "arg_", 4) == 0) {

618 i‡(
	`ngx_hâp_v¨übÀ_¨gumít
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

619  
vv
;

622  
NULL
;

625 
vv
->
nŸ_found
 = 1;

627  
vv
;

628 
	}
}

631 
ngx_öt_t


632 
	$ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

633 
uöçå_t
 
d©a
)

635 
ngx_°r_t
 *
s
;

637 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

639 i‡(
s
->
d©a
) {

640 
v
->
Àn
 = 
s
->len;

641 
v
->
vÆid
 = 1;

642 
v
->
no_ˇchóbÀ
 = 0;

643 
v
->
nŸ_found
 = 0;

644 
v
->
d©a
 = 
s
->data;

647 
v
->
nŸ_found
 = 1;

650  
NGX_OK
;

651 
	}
}

655 
	$ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

656 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

658 
ngx_°r_t
 *
s
;

660 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

662 
s
->
Àn
 = 
v
->len;

663 
s
->
d©a
 = 
v
->data;

664 
	}
}

667 
ngx_öt_t


668 
	$ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

669 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

671 
size_t
 *
•
;

673 
•
 = (
size_t
 *Ë((*Ë
r
 + 
d©a
);

675 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
);

676 i‡(
v
->
d©a
 =
NULL
) {

677  
NGX_ERROR
;

680 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", *
•
) - v->data;

681 
v
->
vÆid
 = 1;

682 
v
->
no_ˇchóbÀ
 = 0;

683 
v
->
nŸ_found
 = 0;

685  
NGX_OK
;

686 
	}
}

690 
	$ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

691 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

693 
ssize_t
 
s
, *
•
;

694 
ngx_°r_t
 
vÆ
;

696 
vÆ
.
Àn
 = 
v
->len;

697 
vÆ
.
d©a
 = 
v
->data;

699 
s
 = 
	`ngx_∑r£_size
(&
vÆ
);

701 i‡(
s
 =
NGX_ERROR
) {

702 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

703 "övÆid sizê\"%V\"", &
vÆ
);

707 
•
 = (
ssize_t
 *Ë((*Ë
r
 + 
d©a
);

709 *
•
 = 
s
;

712 
	}
}

715 
ngx_öt_t


716 
	$ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

717 
uöçå_t
 
d©a
)

719 
ngx_èbÀ_ñt_t
 *
h
;

721 
h
 = *(
ngx_èbÀ_ñt_t
 **Ë((*Ë
r
 + 
d©a
);

723 i‡(
h
) {

724 
v
->
Àn
 = 
h
->
vÆue
.len;

725 
v
->
vÆid
 = 1;

726 
v
->
no_ˇchóbÀ
 = 0;

727 
v
->
nŸ_found
 = 0;

728 
v
->
d©a
 = 
h
->
vÆue
.data;

731 
v
->
nŸ_found
 = 1;

734  
NGX_OK
;

735 
	}
}

738 
ngx_öt_t


739 
	$ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

740 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

742  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ';');

743 
	}
}

746 
ngx_öt_t


747 
	$ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

748 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

750  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ',');

751 
	}
}

754 
ngx_öt_t


755 
	$ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

756 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
)

758 
size_t
 
Àn
;

759 
u_ch¨
 *
p
, *
íd
;

760 
ngx_uöt_t
 
i
, 
n
;

761 
ngx_¨øy_t
 *
a
;

762 
ngx_èbÀ_ñt_t
 **
h
;

764 
a
 = (
ngx_¨øy_t
 *Ë((*Ë
r
 + 
d©a
);

766 
n
 = 
a
->
√…s
;

767 
h
 = 
a
->
ñts
;

769 
Àn
 = 0;

771 
i
 = 0; i < 
n
; i++) {

773 i‡(
h
[
i
]->
hash
 == 0) {

777 
Àn
 +
h
[
i
]->
vÆue
.len + 2;

780 i‡(
Àn
 == 0) {

781 
v
->
nŸ_found
 = 1;

782  
NGX_OK
;

785 
Àn
 -= 2;

787 
v
->
vÆid
 = 1;

788 
v
->
no_ˇchóbÀ
 = 0;

789 
v
->
nŸ_found
 = 0;

791 i‡(
n
 == 1) {

792 
v
->
Àn
 = (*
h
)->
vÆue
.len;

793 
v
->
d©a
 = (*
h
)->
vÆue
.data;

795  
NGX_OK
;

798 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

799 i‡(
p
 =
NULL
) {

800  
NGX_ERROR
;

803 
v
->
Àn
 =Üen;

804 
v
->
d©a
 = 
p
;

806 
íd
 = 
p
 + 
Àn
;

808 
i
 = 0; ; i++) {

810 i‡(
h
[
i
]->
hash
 == 0) {

814 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

816 i‡(
p
 =
íd
) {

820 *
p
++ = 
£p
; *p++ = ' ';

823  
NGX_OK
;

824 
	}
}

827 
ngx_öt_t


828 
	$ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

829 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

831  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

832 &
r
->
hódîs_ö
.
hódîs
.
∑π
,

834 
	}
}

837 
ngx_öt_t


838 
	$ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

839 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

841  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

842 &
r
->
hódîs_out
.
hódîs
.
∑π
,

844 
	}
}

847 
ngx_öt_t


848 
	$ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
v¨
,

849 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
)

851 
u_ch¨
 
ch
;

852 
ngx_uöt_t
 
i
, 
n
;

853 
ngx_èbÀ_ñt_t
 *
hódî
;

855 
hódî
 = 
∑π
->
ñts
;

857 
i
 = 0; ; i++) {

859 i‡(
i
 >
∑π
->
√…s
) {

860 i‡(
∑π
->
√xt
 =
NULL
) {

864 
∑π
 =Ö¨t->
√xt
;

865 
hódî
 = 
∑π
->
ñts
;

866 
i
 = 0;

869 i‡(
hódî
[
i
].
hash
 == 0) {

873 
n
 = 0;Ç + 
¥efix
 < 
v¨
->
Àn
 &&Ç < 
hódî
[
i
].
key
.len;Ç++) {

874 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

876 i‡(
ch
 >= 'A' && ch <= 'Z') {

877 
ch
 |= 0x20;

879 } i‡(
ch
 == '-') {

880 
ch
 = '_';

883 i‡(
v¨
->
d©a
[
n
 + 
¥efix
] !
ch
) {

888 i‡(
n
 + 
¥efix
 =
v¨
->
Àn
 &&Ç =
hódî
[
i
].
key
.len) {

889 
v
->
Àn
 = 
hódî
[
i
].
vÆue
.len;

890 
v
->
vÆid
 = 1;

891 
v
->
no_ˇchóbÀ
 = 0;

892 
v
->
nŸ_found
 = 0;

893 
v
->
d©a
 = 
hódî
[
i
].
vÆue
.data;

895  
NGX_OK
;

899 
v
->
nŸ_found
 = 1;

901  
NGX_OK
;

902 
	}
}

905 
ngx_öt_t


906 
	$ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

907 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

909 
u_ch¨
 *
p
, *
s
;

911 
s
 = 
r
->
ªque°_löe
.
d©a
;

913 i‡(
s
 =
NULL
) {

914 
s
 = 
r
->
ªque°_°¨t
;

916 i‡(
s
 =
NULL
) {

917 
v
->
nŸ_found
 = 1;

918  
NGX_OK
;

921 
p
 = 
s
;Ö < 
r
->
hódî_ö
->
œ°
;Ö++) {

922 i‡(*
p
 =
CR
 || *∞=
LF
) {

927 
r
->
ªque°_löe
.
Àn
 = 
p
 - 
s
;

928 
r
->
ªque°_löe
.
d©a
 = 
s
;

931 
v
->
Àn
 = 
r
->
ªque°_löe
.len;

932 
v
->
vÆid
 = 1;

933 
v
->
no_ˇchóbÀ
 = 0;

934 
v
->
nŸ_found
 = 0;

935 
v
->
d©a
 = 
s
;

937  
NGX_OK
;

938 
	}
}

941 
ngx_öt_t


942 
	$ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

943 
uöçå_t
 
d©a
)

945 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

947 
ngx_°r_t
 
cookõ
, 
s
;

949 
s
.
Àn
 = 
«me
->len - (("cookie_") - 1);

950 
s
.
d©a
 = 
«me
->data + ("cookie_") - 1;

952 i‡(
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
s
, &
cookõ
)

953 =
NGX_DECLINED
)

955 
v
->
nŸ_found
 = 1;

956  
NGX_OK
;

959 
v
->
Àn
 = 
cookõ
.len;

960 
v
->
vÆid
 = 1;

961 
v
->
no_ˇchóbÀ
 = 0;

962 
v
->
nŸ_found
 = 0;

963 
v
->
d©a
 = 
cookõ
.data;

965  
NGX_OK
;

966 
	}
}

969 
ngx_öt_t


970 
	$ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

971 
uöçå_t
 
d©a
)

973 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

975 
u_ch¨
 *
¨g
;

976 
size_t
 
Àn
;

977 
ngx_°r_t
 
vÆue
;

979 
Àn
 = 
«me
->len - (("arg_") - 1);

980 
¨g
 = 
«me
->
d©a
 + ("arg_") - 1;

982 i‡(
	`ngx_hâp_¨g
(
r
, 
¨g
, 
Àn
, &
vÆue
Ë!
NGX_OK
) {

983 
v
->
nŸ_found
 = 1;

984  
NGX_OK
;

987 
v
->
d©a
 = 
vÆue
.data;

988 
v
->
Àn
 = 
vÆue
.len;

989 
v
->
vÆid
 = 1;

990 
v
->
no_ˇchóbÀ
 = 0;

991 
v
->
nŸ_found
 = 0;

993  
NGX_OK
;

994 
	}
}

997 #i‡(
NGX_HAVE_TCP_INFO
)

999 
ngx_öt_t


1000 
	$ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1001 
uöçå_t
 
d©a
)

1003 
t˝_öfo
 
ti
;

1004 
sockÀn_t
 
Àn
;

1005 
uöt32_t
 
vÆue
;

1007 
Àn
 = (
t˝_öfo
);

1008 i‡(
	`gësock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_INFO
, &
ti
, &
Àn
) == -1) {

1009 
v
->
nŸ_found
 = 1;

1010  
NGX_OK
;

1013 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
);

1014 i‡(
v
->
d©a
 =
NULL
) {

1015  
NGX_ERROR
;

1018 
d©a
) {

1020 
vÆue
 = 
ti
.
t˝i_πt
;

1024 
vÆue
 = 
ti
.
t˝i_πtv¨
;

1028 
vÆue
 = 
ti
.
t˝i_¢d_cwnd
;

1032 
vÆue
 = 
ti
.
t˝i_rcv_•a˚
;

1037 
vÆue
 = 0;

1041 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uD", 
vÆue
) - v->data;

1042 
v
->
vÆid
 = 1;

1043 
v
->
no_ˇchóbÀ
 = 0;

1044 
v
->
nŸ_found
 = 0;

1046  
NGX_OK
;

1047 
	}
}

1052 
ngx_öt_t


1053 
	$ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1054 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1056 
u_ch¨
 *
p
;

1058 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1059 
v
->
Àn
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.len;

1060 
v
->
d©a
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.data;

1061 
v
->
vÆid
 = 1;

1062 
v
->
no_ˇchóbÀ
 = 0;

1063 
v
->
nŸ_found
 = 0;

1065 } i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 >= 0) {

1066 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1067 i‡(
p
 =
NULL
) {

1068  
NGX_ERROR
;

1071 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) -Ö;

1072 
v
->
d©a
 = 
p
;

1073 
v
->
vÆid
 = 1;

1074 
v
->
no_ˇchóbÀ
 = 0;

1075 
v
->
nŸ_found
 = 0;

1078 
v
->
nŸ_found
 = 1;

1081  
NGX_OK
;

1082 
	}
}

1085 
ngx_öt_t


1086 
	$ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1087 
uöçå_t
 
d©a
)

1089 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1091 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1092 
v
->
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

1093 
v
->
d©a
 = 
r
->
hódîs_ö
.
£rvî
.data;

1096 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1098 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1099 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1102 
v
->
vÆid
 = 1;

1103 
v
->
no_ˇchóbÀ
 = 0;

1104 
v
->
nŸ_found
 = 0;

1106  
NGX_OK
;

1107 
	}
}

1110 
ngx_öt_t


1111 
	$ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1114 
sockaddr_ö
 *
sö
;

1115 #i‡(
NGX_HAVE_INET6
)

1116 
sockaddr_ö6
 *
sö6
;

1119 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1121 #i‡(
NGX_HAVE_INET6
)

1122 
AF_INET6
:

1123 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1125 
v
->
Àn
 = (
ö6_addr
);

1126 
v
->
vÆid
 = 1;

1127 
v
->
no_ˇchóbÀ
 = 0;

1128 
v
->
nŸ_found
 = 0;

1129 
v
->
d©a
 = 
sö6
->
sö6_addr
.
s6_addr
;

1135 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1137 
v
->
Àn
 = (
ö_addr_t
);

1138 
v
->
vÆid
 = 1;

1139 
v
->
no_ˇchóbÀ
 = 0;

1140 
v
->
nŸ_found
 = 0;

1141 
v
->
d©a
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

1146  
NGX_OK
;

1147 
	}
}

1150 
ngx_öt_t


1151 
	$ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1152 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1154 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

1155 
v
->
vÆid
 = 1;

1156 
v
->
no_ˇchóbÀ
 = 0;

1157 
v
->
nŸ_found
 = 0;

1158 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

1160  
NGX_OK
;

1161 
	}
}

1164 
ngx_öt_t


1165 
	$ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1166 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1168 
ngx_uöt_t
 
p‹t
;

1169 
sockaddr_ö
 *
sö
;

1170 #i‡(
NGX_HAVE_INET6
)

1171 
sockaddr_ö6
 *
sö6
;

1174 
v
->
Àn
 = 0;

1175 
v
->
vÆid
 = 1;

1176 
v
->
no_ˇchóbÀ
 = 0;

1177 
v
->
nŸ_found
 = 0;

1179 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1180 i‡(
v
->
d©a
 =
NULL
) {

1181  
NGX_ERROR
;

1184 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1186 #i‡(
NGX_HAVE_INET6
)

1187 
AF_INET6
:

1188 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1189 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1193 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1194 
AF_UNIX
:

1195 
p‹t
 = 0;

1200 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1201 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1205 i‡(
p‹t
 > 0 &&Öort < 65536) {

1206 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1209  
NGX_OK
;

1210 
	}
}

1213 
ngx_öt_t


1214 
	$ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(
ngx_hâp_ªque°_t
 *
r
,

1215 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1217 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.len;

1218 
v
->
vÆid
 = 1;

1219 
v
->
no_ˇchóbÀ
 = 0;

1220 
v
->
nŸ_found
 = 0;

1221 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.data;

1223  
NGX_OK
;

1224 
	}
}

1227 
ngx_öt_t


1228 
	$ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

1229 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1231 
ngx_°r_t
 
s
;

1232 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

1234 
s
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

1235 
s
.
d©a
 = 
addr
;

1237 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, &
s
, 0Ë!
NGX_OK
) {

1238  
NGX_ERROR
;

1241 
s
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, s.
Àn
);

1242 i‡(
s
.
d©a
 =
NULL
) {

1243  
NGX_ERROR
;

1246 
	`ngx_mem˝y
(
s
.
d©a
, 
addr
, s.
Àn
);

1248 
v
->
Àn
 = 
s
.len;

1249 
v
->
vÆid
 = 1;

1250 
v
->
no_ˇchóbÀ
 = 0;

1251 
v
->
nŸ_found
 = 0;

1252 
v
->
d©a
 = 
s
.data;

1254  
NGX_OK
;

1255 
	}
}

1258 
ngx_öt_t


1259 
	$ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1260 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1262 
ngx_uöt_t
 
p‹t
;

1263 
sockaddr_ö
 *
sö
;

1264 #i‡(
NGX_HAVE_INET6
)

1265 
sockaddr_ö6
 *
sö6
;

1268 
v
->
Àn
 = 0;

1269 
v
->
vÆid
 = 1;

1270 
v
->
no_ˇchóbÀ
 = 0;

1271 
v
->
nŸ_found
 = 0;

1273 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, 
NULL
, 0Ë!
NGX_OK
) {

1274  
NGX_ERROR
;

1277 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1278 i‡(
v
->
d©a
 =
NULL
) {

1279  
NGX_ERROR
;

1282 
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
->
ß_Ámûy
) {

1284 #i‡(
NGX_HAVE_INET6
)

1285 
AF_INET6
:

1286 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1287 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1291 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1292 
AF_UNIX
:

1293 
p‹t
 = 0;

1298 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1299 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1303 i‡(
p‹t
 > 0 &&Öort < 65536) {

1304 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1307  
NGX_OK
;

1308 
	}
}

1311 
ngx_öt_t


1312 
	$ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

1313 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1315 #i‡(
NGX_HTTP_SSL
)

1317 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1318 
v
->
Àn
 = ("https") - 1;

1319 
v
->
vÆid
 = 1;

1320 
v
->
no_ˇchóbÀ
 = 0;

1321 
v
->
nŸ_found
 = 0;

1322 
v
->
d©a
 = (
u_ch¨
 *) "https";

1324  
NGX_OK
;

1329 
v
->
Àn
 = ("http") - 1;

1330 
v
->
vÆid
 = 1;

1331 
v
->
no_ˇchóbÀ
 = 0;

1332 
v
->
nŸ_found
 = 0;

1333 
v
->
d©a
 = (
u_ch¨
 *) "http";

1335  
NGX_OK
;

1336 
	}
}

1339 
ngx_öt_t


1340 
	$ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

1341 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1343 #i‡(
NGX_HTTP_SSL
)

1345 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1346 
v
->
Àn
 = ("on") - 1;

1347 
v
->
vÆid
 = 1;

1348 
v
->
no_ˇchóbÀ
 = 0;

1349 
v
->
nŸ_found
 = 0;

1350 
v
->
d©a
 = (
u_ch¨
 *) "on";

1352  
NGX_OK
;

1357 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1359  
NGX_OK
;

1360 
	}
}

1363 
ngx_öt_t


1364 
	$ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1365 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1367 
v
->
vÆid
 = 1;

1368 
v
->
no_ˇchóbÀ
 = 0;

1369 
v
->
nŸ_found
 = 0;

1371 i‡(
r
->
¨gs
.
Àn
 == 0) {

1372 
v
->
Àn
 = 0;

1373 
v
->
d©a
 = 
NULL
;

1374  
NGX_OK
;

1377 
v
->
Àn
 = 1;

1378 
v
->
d©a
 = (
u_ch¨
 *) "?";

1380  
NGX_OK
;

1381 
	}
}

1384 
ngx_öt_t


1385 
	$ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1386 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1388 
ngx_°r_t
 
∑th
;

1389 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1391 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1393 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1394 
v
->
Àn
 = 
˛cf
->
roŸ
.len;

1395 
v
->
vÆid
 = 1;

1396 
v
->
no_ˇchóbÀ
 = 0;

1397 
v
->
nŸ_found
 = 0;

1398 
v
->
d©a
 = 
˛cf
->
roŸ
.data;

1401 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 0,

1402 
˛cf
->
roŸ_vÆues
->
ñts
)

1403 =
NULL
)

1405  
NGX_ERROR
;

1408 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, &
∑th
)

1409 !
NGX_OK
)

1411  
NGX_ERROR
;

1414 
v
->
Àn
 = 
∑th
.len;

1415 
v
->
vÆid
 = 1;

1416 
v
->
no_ˇchóbÀ
 = 0;

1417 
v
->
nŸ_found
 = 0;

1418 
v
->
d©a
 = 
∑th
.data;

1421  
NGX_OK
;

1422 
	}
}

1425 
ngx_öt_t


1426 
	$ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1427 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1429 
u_ch¨
 *
ªÆ
;

1430 
size_t
 
Àn
;

1431 
ngx_°r_t
 
∑th
;

1432 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1433 #i‡(
NGX_HAVE_MAX_PATH
)

1434 
u_ch¨
 
buf„r
[
NGX_MAX_PATH
];

1437 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1439 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1440 
∑th
 = 
˛cf
->
roŸ
;

1443 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 1,

1444 
˛cf
->
roŸ_vÆues
->
ñts
)

1445 =
NULL
)

1447  
NGX_ERROR
;

1450 
∑th
.
d©a
[∑th.
Àn
 - 1] = '\0';

1452 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, &
∑th
)

1453 !
NGX_OK
)

1455  
NGX_ERROR
;

1459 #i‡(
NGX_HAVE_MAX_PATH
)

1460 
ªÆ
 = 
buf„r
;

1462 
ªÆ
 = 
NULL
;

1465 
ªÆ
 = 
	`ngx_ªÆ∑th
(
∑th
.
d©a
,Ñeal);

1467 i‡(
ªÆ
 =
NULL
) {

1468 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1469 
ngx_ªÆ∑th_n
 " \"%s\" faûed", 
∑th
.
d©a
);

1470  
NGX_ERROR
;

1473 
Àn
 = 
	`ngx_°æí
(
ªÆ
);

1475 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1476 i‡(
v
->
d©a
 =
NULL
) {

1477 #i‡!(
NGX_HAVE_MAX_PATH
)

1478 
	`ngx_‰ì
(
ªÆ
);

1480  
NGX_ERROR
;

1483 
v
->
Àn
 =Üen;

1484 
v
->
vÆid
 = 1;

1485 
v
->
no_ˇchóbÀ
 = 0;

1486 
v
->
nŸ_found
 = 0;

1488 
	`ngx_mem˝y
(
v
->
d©a
, 
ªÆ
, 
Àn
);

1490 #i‡!(
NGX_HAVE_MAX_PATH
)

1491 
	`ngx_‰ì
(
ªÆ
);

1494  
NGX_OK
;

1495 
	}
}

1498 
ngx_öt_t


1499 
	$ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

1500 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1502 
size_t
 
roŸ
;

1503 
ngx_°r_t
 
∑th
;

1505 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

1506  
NGX_ERROR
;

1511 
v
->
Àn
 = 
∑th
.len - 1;

1512 
v
->
vÆid
 = 1;

1513 
v
->
no_ˇchóbÀ
 = 0;

1514 
v
->
nŸ_found
 = 0;

1515 
v
->
d©a
 = 
∑th
.data;

1517  
NGX_OK
;

1518 
	}
}

1521 
ngx_öt_t


1522 
	$ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

1523 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1525 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1527 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1529 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1530 
v
->
vÆid
 = 1;

1531 
v
->
no_ˇchóbÀ
 = 0;

1532 
v
->
nŸ_found
 = 0;

1533 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1535  
NGX_OK
;

1536 
	}
}

1539 
ngx_öt_t


1540 
	$ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

1541 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1543 i‡(
r
->
maö
->
mëhod_«me
.
d©a
) {

1544 
v
->
Àn
 = 
r
->
maö
->
mëhod_«me
.len;

1545 
v
->
vÆid
 = 1;

1546 
v
->
no_ˇchóbÀ
 = 0;

1547 
v
->
nŸ_found
 = 0;

1548 
v
->
d©a
 = 
r
->
maö
->
mëhod_«me
.data;

1551 
v
->
nŸ_found
 = 1;

1554  
NGX_OK
;

1555 
	}
}

1558 
ngx_öt_t


1559 
	$ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

1560 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1562 
ngx_öt_t
 
rc
;

1564 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

1566 i‡(
rc
 =
NGX_DECLINED
) {

1567 
v
->
nŸ_found
 = 1;

1568  
NGX_OK
;

1571 i‡(
rc
 =
NGX_ERROR
) {

1572  
NGX_ERROR
;

1575 
v
->
Àn
 = 
r
->
hódîs_ö
.
u£r
.len;

1576 
v
->
vÆid
 = 1;

1577 
v
->
no_ˇchóbÀ
 = 0;

1578 
v
->
nŸ_found
 = 0;

1579 
v
->
d©a
 = 
r
->
hódîs_ö
.
u£r
.data;

1581  
NGX_OK
;

1582 
	}
}

1585 
ngx_öt_t


1586 
	$ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1587 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1589 
u_ch¨
 *
p
;

1591 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1592 i‡(
p
 =
NULL
) {

1593  
NGX_ERROR
;

1596 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
) -Ö;

1597 
v
->
vÆid
 = 1;

1598 
v
->
no_ˇchóbÀ
 = 0;

1599 
v
->
nŸ_found
 = 0;

1600 
v
->
d©a
 = 
p
;

1602  
NGX_OK
;

1603 
	}
}

1606 
ngx_öt_t


1607 
	$ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1608 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1610 
off_t
 
£¡
;

1611 
u_ch¨
 *
p
;

1613 
£¡
 = 
r
->
c⁄√˘i⁄
->£¡ -Ñ->
hódî_size
;

1615 i‡(
£¡
 < 0) {

1616 
£¡
 = 0;

1619 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1620 i‡(
p
 =
NULL
) {

1621  
NGX_ERROR
;

1624 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
£¡
) -Ö;

1625 
v
->
vÆid
 = 1;

1626 
v
->
no_ˇchóbÀ
 = 0;

1627 
v
->
nŸ_found
 = 0;

1628 
v
->
d©a
 = 
p
;

1630  
NGX_OK
;

1631 
	}
}

1634 
ngx_öt_t


1635 
	$ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

1636 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1638 
v
->
d©a
 = (
u_ch¨
 *Ë(
r
->
pùñöe
 ? "p" : ".");

1639 
v
->
Àn
 = 1;

1640 
v
->
vÆid
 = 1;

1641 
v
->
no_ˇchóbÀ
 = 0;

1642 
v
->
nŸ_found
 = 0;

1644  
NGX_OK
;

1645 
	}
}

1648 
ngx_öt_t


1649 
	$ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

1650 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1652 
ngx_uöt_t
 
°©us
;

1654 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

1655 i‡(
v
->
d©a
 =
NULL
) {

1656  
NGX_ERROR
;

1659 i‡(
r
->
îr_°©us
) {

1660 
°©us
 = 
r
->
îr_°©us
;

1662 } i‡(
r
->
hódîs_out
.
°©us
) {

1663 
°©us
 = 
r
->
hódîs_out
.status;

1665 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

1666 
°©us
 = 9;

1669 
°©us
 = 0;

1672 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%03ui", 
°©us
) - v->data;

1673 
v
->
vÆid
 = 1;

1674 
v
->
no_ˇchóbÀ
 = 0;

1675 
v
->
nŸ_found
 = 0;

1677  
NGX_OK
;

1678 
	}
}

1681 
ngx_öt_t


1682 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

1683 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1685 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1686 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len;

1687 
v
->
vÆid
 = 1;

1688 
v
->
no_ˇchóbÀ
 = 0;

1689 
v
->
nŸ_found
 = 0;

1690 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.data;

1693 
v
->
nŸ_found
 = 1;

1696  
NGX_OK
;

1697 
	}
}

1700 
ngx_öt_t


1701 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1702 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1704 
u_ch¨
 *
p
;

1706 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

1707 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.len;

1708 
v
->
vÆid
 = 1;

1709 
v
->
no_ˇchóbÀ
 = 0;

1710 
v
->
nŸ_found
 = 0;

1711 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.data;

1713  
NGX_OK
;

1716 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0) {

1717 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1718 i‡(
p
 =
NULL
) {

1719  
NGX_ERROR
;

1722 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
) -Ö;

1723 
v
->
vÆid
 = 1;

1724 
v
->
no_ˇchóbÀ
 = 0;

1725 
v
->
nŸ_found
 = 0;

1726 
v
->
d©a
 = 
p
;

1728  
NGX_OK
;

1731 
v
->
nŸ_found
 = 1;

1733  
NGX_OK
;

1734 
	}
}

1737 
ngx_öt_t


1738 
	$ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1739 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1741 
ngx_°r_t
 
«me
;

1743 i‡(
r
->
hódîs_out
.
loˇti⁄
) {

1744 
v
->
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

1745 
v
->
vÆid
 = 1;

1746 
v
->
no_ˇchóbÀ
 = 0;

1747 
v
->
nŸ_found
 = 0;

1748 
v
->
d©a
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.data;

1750  
NGX_OK
;

1753 
	`ngx_°r_£t
(&
«me
, "sent_http_location");

1755  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, &
«me
,

1756 &
r
->
hódîs_out
.
hódîs
.
∑π
,

1758 
	}
}

1761 
ngx_öt_t


1762 
	$ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

1763 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1765 
u_ch¨
 *
p
;

1767 i‡(
r
->
hódîs_out
.
œ°_modifõd
) {

1768 
v
->
Àn
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.len;

1769 
v
->
vÆid
 = 1;

1770 
v
->
no_ˇchóbÀ
 = 0;

1771 
v
->
nŸ_found
 = 0;

1772 
v
->
d©a
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.data;

1774  
NGX_OK
;

1777 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 >= 0) {

1778 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("Mon, 28 Sep 1970 06:00:00 GMT") - 1);

1779 i‡(
p
 =
NULL
) {

1780  
NGX_ERROR
;

1783 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
) -Ö;

1784 
v
->
vÆid
 = 1;

1785 
v
->
no_ˇchóbÀ
 = 0;

1786 
v
->
nŸ_found
 = 0;

1787 
v
->
d©a
 = 
p
;

1789  
NGX_OK
;

1792 
v
->
nŸ_found
 = 1;

1794  
NGX_OK
;

1795 
	}
}

1798 
ngx_öt_t


1799 
	$ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1800 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1802 
size_t
 
Àn
;

1803 *
p
;

1805 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1806 
Àn
 = ("upgrade") - 1;

1807 
p
 = "upgrade";

1809 } i‡(
r
->
kì∑live
) {

1810 
Àn
 = ("keep-alive") - 1;

1811 
p
 = "keep-alive";

1814 
Àn
 = ("close") - 1;

1815 
p
 = "close";

1818 
v
->
Àn
 =Üen;

1819 
v
->
vÆid
 = 1;

1820 
v
->
no_ˇchóbÀ
 = 0;

1821 
v
->
nŸ_found
 = 0;

1822 
v
->
d©a
 = (
u_ch¨
 *Ë
p
;

1824  
NGX_OK
;

1825 
	}
}

1828 
ngx_öt_t


1829 
	$ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

1830 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1832 
u_ch¨
 *
p
;

1833 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1835 i‡(
r
->
kì∑live
) {

1836 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1838 i‡(
˛cf
->
kì∑live_hódî
) {

1840 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("timeout="Ë- 1 + 
NGX_TIME_T_LEN
);

1841 i‡(
p
 =
NULL
) {

1842  
NGX_ERROR
;

1845 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "timeout=%T", 
˛cf
->
kì∑live_hódî
) -Ö;

1846 
v
->
vÆid
 = 1;

1847 
v
->
no_ˇchóbÀ
 = 0;

1848 
v
->
nŸ_found
 = 0;

1849 
v
->
d©a
 = 
p
;

1851  
NGX_OK
;

1855 
v
->
nŸ_found
 = 1;

1857  
NGX_OK
;

1858 
	}
}

1861 
ngx_öt_t


1862 
	$ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

1863 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1865 i‡(
r
->
chunked
) {

1866 
v
->
Àn
 = ("chunked") - 1;

1867 
v
->
vÆid
 = 1;

1868 
v
->
no_ˇchóbÀ
 = 0;

1869 
v
->
nŸ_found
 = 0;

1870 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

1873 
v
->
nŸ_found
 = 1;

1876  
NGX_OK
;

1877 
	}
}

1880 
ngx_öt_t


1881 
	$ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

1882 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1884 i‡(
r
->
ªque°_com∂ëe
) {

1885 
v
->
Àn
 = 2;

1886 
v
->
vÆid
 = 1;

1887 
v
->
no_ˇchóbÀ
 = 0;

1888 
v
->
nŸ_found
 = 0;

1889 
v
->
d©a
 = (
u_ch¨
 *) "OK";

1891  
NGX_OK
;

1894 
v
->
Àn
 = 0;

1895 
v
->
vÆid
 = 1;

1896 
v
->
no_ˇchóbÀ
 = 0;

1897 
v
->
nŸ_found
 = 0;

1898 
v
->
d©a
 = (
u_ch¨
 *) "";

1900  
NGX_OK
;

1901 
	}
}

1904 
ngx_öt_t


1905 
	$ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

1906 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1908 
u_ch¨
 *
p
;

1909 
size_t
 
Àn
;

1910 
ngx_buf_t
 *
buf
;

1911 
ngx_chaö_t
 *
˛
;

1913 i‡(
r
->
ªque°_body
 =
NULL


1914 || 
r
->
ªque°_body
->
bufs
 =
NULL


1915 || 
r
->
ªque°_body
->
ãmp_fûe
)

1917 
v
->
nŸ_found
 = 1;

1919  
NGX_OK
;

1922 
˛
 = 
r
->
ªque°_body
->
bufs
;

1923 
buf
 = 
˛
->buf;

1925 i‡(
˛
->
√xt
 =
NULL
) {

1926 
v
->
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1927 
v
->
vÆid
 = 1;

1928 
v
->
no_ˇchóbÀ
 = 0;

1929 
v
->
nŸ_found
 = 0;

1930 
v
->
d©a
 = 
buf
->
pos
;

1932  
NGX_OK
;

1935 
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1936 
˛
 = cl->
√xt
;

1938  ; 
˛
; c»˛->
√xt
) {

1939 
buf
 = 
˛
->buf;

1940 
Àn
 +
buf
->
œ°
 - buf->
pos
;

1943 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1944 i‡(
p
 =
NULL
) {

1945  
NGX_ERROR
;

1948 
v
->
d©a
 = 
p
;

1949 
˛
 = 
r
->
ªque°_body
->
bufs
;

1951  ; 
˛
; c»˛->
√xt
) {

1952 
buf
 = 
˛
->buf;

1953 
p
 = 
	`ngx_˝ymem
’, 
buf
->
pos
, buf->
œ°
 - buf->pos);

1956 
v
->
Àn
 =Üen;

1957 
v
->
vÆid
 = 1;

1958 
v
->
no_ˇchóbÀ
 = 0;

1959 
v
->
nŸ_found
 = 0;

1961  
NGX_OK
;

1962 
	}
}

1965 
ngx_öt_t


1966 
	$ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

1967 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1969 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

1970 
v
->
nŸ_found
 = 1;

1972  
NGX_OK
;

1975 
v
->
Àn
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.len;

1976 
v
->
vÆid
 = 1;

1977 
v
->
no_ˇchóbÀ
 = 0;

1978 
v
->
nŸ_found
 = 0;

1979 
v
->
d©a
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.data;

1981  
NGX_OK
;

1982 
	}
}

1985 
ngx_öt_t


1986 
	$ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1987 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1989 
u_ch¨
 *
p
;

1991 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1992 i‡(
p
 =
NULL
) {

1993  
NGX_ERROR
;

1996 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
ªque°_Àngth
) -Ö;

1997 
v
->
vÆid
 = 1;

1998 
v
->
no_ˇchóbÀ
 = 0;

1999 
v
->
nŸ_found
 = 0;

2000 
v
->
d©a
 = 
p
;

2002  
NGX_OK
;

2003 
	}
}

2006 
ngx_öt_t


2007 
	$ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

2008 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2010 
u_ch¨
 *
p
;

2011 
ngx_time_t
 *
ç
;

2012 
ngx_m£c_öt_t
 
ms
;

2014 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2015 i‡(
p
 =
NULL
) {

2016  
NGX_ERROR
;

2019 
ç
 = 
	`ngx_timeofday
();

2021 
ms
 = (
ngx_m£c_öt_t
)

2022 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

2023 
ms
 = 
	`ngx_max
(ms, 0);

2025 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000) -Ö;

2026 
v
->
vÆid
 = 1;

2027 
v
->
no_ˇchóbÀ
 = 0;

2028 
v
->
nŸ_found
 = 0;

2029 
v
->
d©a
 = 
p
;

2031  
NGX_OK
;

2032 
	}
}

2035 
ngx_öt_t


2036 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

2037 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2039 
u_ch¨
 *
p
;

2041 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

2042 i‡(
p
 =
NULL
) {

2043  
NGX_ERROR
;

2046 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
r
->
c⁄√˘i⁄
->
numbî
) -Ö;

2047 
v
->
vÆid
 = 1;

2048 
v
->
no_ˇchóbÀ
 = 0;

2049 
v
->
nŸ_found
 = 0;

2050 
v
->
d©a
 = 
p
;

2052  
NGX_OK
;

2053 
	}
}

2056 
ngx_öt_t


2057 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

2058 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2060 
u_ch¨
 *
p
;

2062 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

2063 i‡(
p
 =
NULL
) {

2064  
NGX_ERROR
;

2067 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%ui", 
r
->
c⁄√˘i⁄
->
ªque°s
) -Ö;

2068 
v
->
vÆid
 = 1;

2069 
v
->
no_ˇchóbÀ
 = 0;

2070 
v
->
nŸ_found
 = 0;

2071 
v
->
d©a
 = 
p
;

2073  
NGX_OK
;

2074 
	}
}

2077 
ngx_öt_t


2078 
	$ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

2079 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2081 
v
->
Àn
 = (
NGINX_VERSION
) - 1;

2082 
v
->
vÆid
 = 1;

2083 
v
->
no_ˇchóbÀ
 = 0;

2084 
v
->
nŸ_found
 = 0;

2085 
v
->
d©a
 = (
u_ch¨
 *Ë
NGINX_VERSION
;

2087  
NGX_OK
;

2088 
	}
}

2091 
ngx_öt_t


2092 
	$ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

2093 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2095 
v
->
Àn
 = 
ngx_cy˛e
->
ho°«me
.len;

2096 
v
->
vÆid
 = 1;

2097 
v
->
no_ˇchóbÀ
 = 0;

2098 
v
->
nŸ_found
 = 0;

2099 
v
->
d©a
 = 
ngx_cy˛e
->
ho°«me
.data;

2101  
NGX_OK
;

2102 
	}
}

2105 
ngx_öt_t


2106 
	$ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

2107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2109 
u_ch¨
 *
p
;

2111 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

2112 i‡(
p
 =
NULL
) {

2113  
NGX_ERROR
;

2116 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%P", 
ngx_pid
) -Ö;

2117 
v
->
vÆid
 = 1;

2118 
v
->
no_ˇchóbÀ
 = 0;

2119 
v
->
nŸ_found
 = 0;

2120 
v
->
d©a
 = 
p
;

2122  
NGX_OK
;

2123 
	}
}

2126 
ngx_öt_t


2127 
	$ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

2128 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2130 
u_ch¨
 *
p
;

2131 
ngx_time_t
 *
ç
;

2133 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2134 i‡(
p
 =
NULL
) {

2135  
NGX_ERROR
;

2138 
ç
 = 
	`ngx_timeofday
();

2140 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
) -Ö;

2141 
v
->
vÆid
 = 1;

2142 
v
->
no_ˇchóbÀ
 = 0;

2143 
v
->
nŸ_found
 = 0;

2144 
v
->
d©a
 = 
p
;

2146  
NGX_OK
;

2147 
	}
}

2150 
ngx_öt_t


2151 
	$ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

2152 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2154 
u_ch¨
 *
p
;

2156 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2157 i‡(
p
 =
NULL
) {

2158  
NGX_ERROR
;

2161 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

2162 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2164 
v
->
Àn
 = 
ngx_ˇched_hâp_log_iso8601
.len;

2165 
v
->
vÆid
 = 1;

2166 
v
->
no_ˇchóbÀ
 = 0;

2167 
v
->
nŸ_found
 = 0;

2168 
v
->
d©a
 = 
p
;

2170  
NGX_OK
;

2171 
	}
}

2174 
ngx_öt_t


2175 
	$ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

2176 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2178 
u_ch¨
 *
p
;

2180 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_time
.
Àn
);

2181 i‡(
p
 =
NULL
) {

2182  
NGX_ERROR
;

2185 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_time
.
d©a
,Çgx_ˇched_hâp_log_time.
Àn
);

2187 
v
->
Àn
 = 
ngx_ˇched_hâp_log_time
.len;

2188 
v
->
vÆid
 = 1;

2189 
v
->
no_ˇchóbÀ
 = 0;

2190 
v
->
nŸ_found
 = 0;

2191 
v
->
d©a
 = 
p
;

2193  
NGX_OK
;

2194 
	}
}

2198 
	$ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
, 
ngx_°r_t
 *
m©ch
)

2200 *
vÆue
;

2201 
u_ch¨
 *
low
;

2202 
size_t
 
Àn
;

2203 
ngx_uöt_t
 
key
;

2205 
Àn
 = 
m©ch
->len;

2207 i‡(
Àn
) {

2208 
low
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2209 i‡(
low
 =
NULL
) {

2210  
NULL
;

2214 
low
 = 
NULL
;

2217 
key
 = 
	`ngx_hash_°æow
(
low
, 
m©ch
->
d©a
, 
Àn
);

2219 
vÆue
 = 
	`ngx_hash_föd_comböed
(&
m≠
->
hash
, 
key
, 
low
, 
Àn
);

2220 i‡(
vÆue
) {

2221  
vÆue
;

2224 #i‡(
NGX_PCRE
)

2226 i‡(
Àn
 && 
m≠
->
ƒegex
) {

2227 
ngx_öt_t
 
n
;

2228 
ngx_uöt_t
 
i
;

2229 
ngx_hâp_m≠_ªgex_t
 *
ªg
;

2231 
ªg
 = 
m≠
->
ªgex
;

2233 
i
 = 0; i < 
m≠
->
ƒegex
; i++) {

2235 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
ªg
[
i
].
ªgex
, 
m©ch
);

2237 i‡(
n
 =
NGX_OK
) {

2238  
ªg
[
i
].
vÆue
;

2241 i‡(
n
 =
NGX_DECLINED
) {

2247  
NULL
;

2253  
NULL
;

2254 
	}
}

2257 #i‡(
NGX_PCRE
)

2259 
ngx_öt_t


2260 
	$ngx_hâp_v¨übÀ_nŸ_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

2261 
uöçå_t
 
d©a
)

2263 
v
->
nŸ_found
 = 1;

2264  
NGX_OK
;

2265 
	}
}

2268 
ngx_hâp_ªgex_t
 *

2269 
	$ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_ªgex_compûe_t
 *
rc
)

2271 
u_ch¨
 *
p
;

2272 
size_t
 
size
;

2273 
ngx_°r_t
 
«me
;

2274 
ngx_uöt_t
 
i
, 
n
;

2275 
ngx_hâp_v¨übÀ_t
 *
v
;

2276 
ngx_hâp_ªgex_t
 *
ª
;

2277 
ngx_hâp_ªgex_v¨übÀ_t
 *
rv
;

2278 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2280 
rc
->
poﬁ
 = 
cf
->pool;

2282 i‡(
	`ngx_ªgex_compûe
(
rc
Ë!
NGX_OK
) {

2283 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
->
îr
);

2284  
NULL
;

2287 
ª
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªgex_t
));

2288 i‡(
ª
 =
NULL
) {

2289  
NULL
;

2292 
ª
->
ªgex
 = 
rc
->regex;

2293 
ª
->
nˇ±uªs
 = 
rc
->
ˇ±uªs
;

2294 
ª
->
«me
 = 
rc
->
∑âîn
;

2296 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2297 
cmcf
->
nˇ±uªs
 = 
	`ngx_max
(cmcf->nˇ±uªs, 
ª
->ncaptures);

2299 
n
 = (
ngx_uöt_t
Ë
rc
->
«med_ˇ±uªs
;

2301 i‡(
n
 == 0) {

2302  
ª
;

2305 
rv
 = 
	`ngx_∑Œoc
(
rc
->
poﬁ
, 
n
 * (
ngx_hâp_ªgex_v¨übÀ_t
));

2306 i‡(
rv
 =
NULL
) {

2307  
NULL
;

2310 
ª
->
v¨übÀs
 = 
rv
;

2311 
ª
->
nv¨übÀs
 = 
n
;

2313 
size
 = 
rc
->
«me_size
;

2314 
p
 = 
rc
->
«mes
;

2316 
i
 = 0; i < 
n
; i++) {

2317 
rv
[
i
].
ˇ±uª
 = 2 * ((
p
[0] << 8) +Ö[1]);

2319 
«me
.
d©a
 = &
p
[2];

2320 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

2322 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

2323 i‡(
v
 =
NULL
) {

2324  
NULL
;

2327 
rv
[
i
].
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

2328 i‡(
rv
[
i
].
ödex
 =
NGX_ERROR
) {

2329  
NULL
;

2332 
v
->
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_nŸ_found
;

2334 
p
 +
size
;

2337  
ª
;

2338 
	}
}

2341 
ngx_öt_t


2342 
	$ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
, 
ngx_°r_t
 *
s
)

2344 
ngx_öt_t
 
rc
, 
ödex
;

2345 
ngx_uöt_t
 
i
, 
n
, 
Àn
;

2346 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2347 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2349 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2351 i‡(
ª
->
nˇ±uªs
) {

2352 
Àn
 = 
cmcf
->
nˇ±uªs
;

2354 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2355 
r
->
ˇ±uªs
 = 
	`ngx_∑Œoc
‘->
poﬁ
, 
Àn
 * ());

2356 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2357  
NGX_ERROR
;

2362 
Àn
 = 0;

2365 
rc
 = 
	`ngx_ªgex_exec
(
ª
->
ªgex
, 
s
, 
r
->
ˇ±uªs
, 
Àn
);

2367 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

2368  
NGX_DECLINED
;

2371 i‡(
rc
 < 0) {

2372 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2373 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2374 
rc
, 
s
, &
ª
->
«me
);

2375  
NGX_ERROR
;

2378 
i
 = 0; i < 
ª
->
nv¨übÀs
; i++) {

2380 
n
 = 
ª
->
v¨übÀs
[
i
].
ˇ±uª
;

2381 
ödex
 = 
ª
->
v¨übÀs
[
i
].index;

2382 
vv
 = &
r
->
v¨übÀs
[
ödex
];

2384 
vv
->
Àn
 = 
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

2385 
vv
->
vÆid
 = 1;

2386 
vv
->
no_ˇchóbÀ
 = 0;

2387 
vv
->
nŸ_found
 = 0;

2388 
vv
->
d©a
 = &
s
->d©a[
r
->
ˇ±uªs
[
n
]];

2390 #i‡(
NGX_DEBUG
)

2392 
ngx_hâp_v¨übÀ_t
 *
v
;

2394 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2396 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2398 &
v
[
ödex
].
«me
, 
vv
->
Àn
, vv->
d©a
);

2403 
r
->
nˇ±uªs
 = 
rc
 * 2;

2404 
r
->
ˇ±uªs_d©a
 = 
s
->
d©a
;

2406  
NGX_OK
;

2407 
	}
}

2412 
ngx_öt_t


2413 
	$ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
)

2415 
ngx_öt_t
 
rc
;

2416 
ngx_hâp_v¨übÀ_t
 *
cv
, *
v
;

2417 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2419 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2421 
cmcf
->
v¨übÀs_keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
,

2422 (
ngx_hash_keys_¨øys_t
));

2423 i‡(
cmcf
->
v¨übÀs_keys
 =
NULL
) {

2424  
NGX_ERROR
;

2427 
cmcf
->
v¨übÀs_keys
->
poﬁ
 = 
cf
->pool;

2428 
cmcf
->
v¨übÀs_keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

2430 i‡(
	`ngx_hash_keys_¨øy_öô
(
cmcf
->
v¨übÀs_keys
, 
NGX_HASH_SMALL
)

2431 !
NGX_OK
)

2433  
NGX_ERROR
;

2436 
cv
 = 
ngx_hâp_c‹e_v¨übÀs
; cv->
«me
.
Àn
; cv++) {

2437 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

2438 i‡(
v
 =
NULL
) {

2439  
NGX_ERROR
;

2442 *
v
 = *
cv
;

2444 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v,

2445 
NGX_HASH_READONLY_KEY
);

2447 i‡(
rc
 =
NGX_OK
) {

2451 i‡(
rc
 =
NGX_BUSY
) {

2452 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2453 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", &
v
->
«me
);

2456  
NGX_ERROR
;

2459  
NGX_OK
;

2460 
	}
}

2463 
ngx_öt_t


2464 
	$ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
)

2466 
ngx_uöt_t
 
i
, 
n
;

2467 
ngx_hash_key_t
 *
key
;

2468 
ngx_hash_öô_t
 
hash
;

2469 
ngx_hâp_v¨übÀ_t
 *
v
, *
av
;

2470 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2474 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2476 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2477 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

2479 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

2481 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2483 
av
 = 
key
[
n
].
vÆue
;

2485 i‡(
av
->
gë_h™dÀr


2486 && 
v
[
i
].
«me
.
Àn
 =
key
[
n
].key.len

2487 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
key
[
n
].key.d©a, v[i].«me.
Àn
)

2490 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

2491 
v
[
i
].
d©a
 = 
av
->data;

2493 
av
->
Êags
 |
NGX_HTTP_VAR_INDEXED
;

2494 
v
[
i
].
Êags
 = 
av
->flags;

2496 
av
->
ödex
 = 
i
;

2498 
√xt
;

2502 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "http_", 5) == 0) {

2503 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_ö
;

2504 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2509 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "sent_http_", 10) == 0) {

2510 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_out
;

2511 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2516 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "upstream_http_", 14) == 0) {

2517 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_up°ªam_hódî_v¨übÀ
;

2518 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2519 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2524 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "cookie_", 7) == 0) {

2525 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_cookõ
;

2526 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2531 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "arg_", 4) == 0) {

2532 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_¨gumít
;

2533 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2534 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2539 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2540 "unknow¿\"%V\" v¨übÀ", &
v
[
i
].
«me
);

2542  
NGX_ERROR
;

2544 
√xt
:

2549 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2550 
av
 = 
key
[
n
].
vÆue
;

2552 i‡(
av
->
Êags
 & 
NGX_HTTP_VAR_NOHASH
) {

2553 
key
[
n
].key.
d©a
 = 
NULL
;

2558 
hash
.hash = &
cmcf
->
v¨übÀs_hash
;

2559 
hash
.
key
 = 
ngx_hash_key
;

2560 
hash
.
max_size
 = 
cmcf
->
v¨übÀs_hash_max_size
;

2561 
hash
.
buckë_size
 = 
cmcf
->
v¨übÀs_hash_buckë_size
;

2562 
hash
.
«me
 = "variables_hash";

2563 
hash
.
poﬁ
 = 
cf
->pool;

2564 
hash
.
ãmp_poﬁ
 = 
NULL
;

2566 i‡(
	`ngx_hash_öô
(&
hash
, 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
,

2567 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
)

2568 !
NGX_OK
)

2570  
NGX_ERROR
;

2573 
cmcf
->
v¨übÀs_keys
 = 
NULL
;

2575  
NGX_OK
;

2576 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_variables.h

8 #i‚de‡
_NGX_HTTP_VARIABLES_H_INCLUDED_


9 
	#_NGX_HTTP_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_hâp_v¨übÀ_vÆue_t
;

19 
	#ngx_hâp_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_hâp_v¨übÀ_s
 
	tngx_hâp_v¨übÀ_t
;

23 (*
	tngx_hâp_£t_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

24 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_hâp_gë_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

26 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_HTTP_VAR_CHANGEABLE
 1

	)

30 
	#NGX_HTTP_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_HTTP_VAR_INDEXED
 4

	)

32 
	#NGX_HTTP_VAR_NOHASH
 8

	)

35 
	sngx_hâp_v¨übÀ_s
 {

36 
ngx_°r_t
 
«me
;

37 
ngx_hâp_£t_v¨übÀ_±
 
£t_h™dÀr
;

38 
ngx_hâp_gë_v¨übÀ_±
 
gë_h™dÀr
;

39 
uöçå_t
 
d©a
;

40 
ngx_uöt_t
 
Êags
;

41 
ngx_uöt_t
 
ödex
;

45 
ngx_hâp_v¨übÀ_t
 *
	`ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

46 
ngx_uöt_t
 
Êags
);

47 
ngx_öt_t
 
	`ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_uöt_t
 
ödex
);

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_uöt_t
 
ödex
);

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

56 
ngx_öt_t
 
	`ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

57 
ngx_°r_t
 *
v¨
, 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
);

60 #i‡(
NGX_PCRE
)

63 
ngx_uöt_t
 
ˇ±uª
;

64 
ngx_öt_t
 
ödex
;

65 } 
	tngx_hâp_ªgex_v¨übÀ_t
;

69 
ngx_ªgex_t
 *
ªgex
;

70 
ngx_uöt_t
 
nˇ±uªs
;

71 
ngx_hâp_ªgex_v¨übÀ_t
 *
v¨übÀs
;

72 
ngx_uöt_t
 
nv¨übÀs
;

73 
ngx_°r_t
 
«me
;

74 } 
	tngx_hâp_ªgex_t
;

78 
ngx_hâp_ªgex_t
 *
ªgex
;

79 *
vÆue
;

80 } 
	tngx_hâp_m≠_ªgex_t
;

83 
ngx_hâp_ªgex_t
 *
	`ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

84 
ngx_ªgex_compûe_t
 *
rc
);

85 
ngx_öt_t
 
	`ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
,

86 
ngx_°r_t
 *
s
);

92 
ngx_hash_comböed_t
 
hash
;

93 #i‡(
NGX_PCRE
)

94 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

95 
ngx_uöt_t
 
ƒegex
;

97 } 
	tngx_hâp_m≠_t
;

100 *
	`ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
,

101 
ngx_°r_t
 *
m©ch
);

104 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

105 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

109 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_åue_vÆue
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_write_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_hâp_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ_˘x
 = {

17 
NULL
,

18 
ngx_hâp_wrôe_fûãr_öô
,

20 
NULL
,

21 
NULL
,

23 
NULL
,

24 
NULL
,

26 
NULL
,

27 
NULL
,

31 
ngx_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 &
ngx_hâp_wrôe_fûãr_moduÀ_˘x
,

34 
NULL
,

35 
NGX_HTTP_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


47 
ngx_öt_t


48 
	$ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

50 
off_t
 
size
, 
£¡
, 
n£¡
, 
limô
;

51 
ngx_uöt_t
 
œ°
, 
Êush
;

52 
ngx_m£c_t
 
dñay
;

53 
ngx_chaö_t
 *
˛
, *
 
, **
Œ
, *
chaö
;

54 
ngx_c⁄√˘i⁄_t
 *
c
;

55 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

57 
c
 = 
r
->
c⁄√˘i⁄
;

59 i‡(
c
->
îr‹
) {

60  
NGX_ERROR
;

63 
size
 = 0;

64 
Êush
 = 0;

65 
œ°
 = 0;

66 
Œ
 = &
r
->
out
;

70 
˛
 = 
r
->
out
; cl; c»˛->
√xt
) {

71 
Œ
 = &
˛
->
√xt
;

73 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

76 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

77 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

78 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

79 
˛
->
buf
->
fûe_pos
,

80 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

83 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

84 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

87 
˛
->
buf
->
ãmp‹¨y
,

88 
˛
->
buf
->
ªcy˛ed
,

89 
˛
->
buf
->
ö_fûe
,

90 
˛
->
buf
->
°¨t
,

91 
˛
->
buf
->
pos
,

92 
˛
->
buf
->
œ°
,

93 
˛
->
buf
->
fûe
,

94 
˛
->
buf
->
fûe_pos
,

95 
˛
->
buf
->
fûe_œ°
);

97 
	`ngx_debug_poöt
();

98  
NGX_ERROR
;

102 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

104 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

105 
Êush
 = 1;

108 i‡(
˛
->
buf
->
œ°_buf
) {

109 
œ°
 = 1;

115 
 
 = 
ö
;Ün;Ü¿ ->
√xt
) {

116 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

117 i‡(
˛
 =
NULL
) {

118  
NGX_ERROR
;

121 
˛
->
buf
 = 
 
->buf;

122 *
Œ
 = 
˛
;

123 
Œ
 = &
˛
->
√xt
;

125 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

128 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

129 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

130 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

131 
˛
->
buf
->
fûe_pos
,

132 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

135 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

139 
˛
->
buf
->
ãmp‹¨y
,

140 
˛
->
buf
->
ªcy˛ed
,

141 
˛
->
buf
->
ö_fûe
,

142 
˛
->
buf
->
°¨t
,

143 
˛
->
buf
->
pos
,

144 
˛
->
buf
->
œ°
,

145 
˛
->
buf
->
fûe
,

146 
˛
->
buf
->
fûe_pos
,

147 
˛
->
buf
->
fûe_œ°
);

149 
	`ngx_debug_poöt
();

150  
NGX_ERROR
;

154 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

156 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

157 
Êush
 = 1;

160 i‡(
˛
->
buf
->
œ°_buf
) {

161 
œ°
 = 1;

165 *
Œ
 = 
NULL
;

167 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

168 "hâ∞wrôêfûãr:Ü:%d f:%d s:%O", 
œ°
, 
Êush
, 
size
);

170 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

178 i‡(!
œ°
 && !
Êush
 && 
ö
 && 
size
 < (
off_t
Ë
˛cf
->
po°p⁄e_ouçut
) {

179  
NGX_OK
;

182 i‡(
c
->
wrôe
->
dñayed
) {

183 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

184  
NGX_AGAIN
;

187 i‡(
size
 == 0

188 && !(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
)

189 && !(
œ°
 && 
c
->
√ed_œ°_buf
))

191 i‡(
œ°
 || 
Êush
) {

192 
˛
 = 
r
->
out
; cl; ) {

193 
 
 = 
˛
;

194 
˛
 = cl->
√xt
;

195 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

198 
r
->
out
 = 
NULL
;

199 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

201  
NGX_OK
;

204 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

207 
	`ngx_debug_poöt
();

209  
NGX_ERROR
;

212 i‡(
r
->
limô_øã
) {

213 i‡(
r
->
limô_øã_a·î
 == 0) {

214 
r
->
limô_øã_a·î
 = 
˛cf
->limit_rate_after;

217 
limô
 = (
off_t
Ë
r
->
limô_øã
 * (
	`ngx_time
(Ë-Ñ->
°¨t_£c
 + 1)

218 - (
c
->
£¡
 - 
r
->
limô_øã_a·î
);

220 i‡(
limô
 <= 0) {

221 
c
->
wrôe
->
dñayed
 = 1;

222 
	`ngx_add_timî
(
c
->
wrôe
,

223 (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
r
->
limô_øã
 + 1));

225 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

227  
NGX_AGAIN
;

230 i‡(
˛cf
->
£ndfûe_max_chunk


231 && (
off_t
Ë
˛cf
->
£ndfûe_max_chunk
 < 
limô
)

233 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

237 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

240 
£¡
 = 
c
->sent;

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

243 "hâ∞wrôêfûã∏limô %O", 
limô
);

245 
chaö
 = 
c
->
	`£nd_chaö
(c, 
r
->
out
, 
limô
);

247 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

248 "hâ∞wrôêfûã∏%p", 
chaö
);

250 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

251 
c
->
îr‹
 = 1;

252  
NGX_ERROR
;

255 i‡(
r
->
limô_øã
) {

257 
n£¡
 = 
c
->
£¡
;

259 i‡(
r
->
limô_øã_a·î
) {

261 
£¡
 -
r
->
limô_øã_a·î
;

262 i‡(
£¡
 < 0) {

263 
£¡
 = 0;

266 
n£¡
 -
r
->
limô_øã_a·î
;

267 i‡(
n£¡
 < 0) {

268 
n£¡
 = 0;

272 
dñay
 = (
ngx_m£c_t
Ë((
n£¡
 - 
£¡
Ë* 1000 / 
r
->
limô_øã
);

274 i‡(
dñay
 > 0) {

275 
limô
 = 0;

276 
c
->
wrôe
->
dñayed
 = 1;

277 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

281 i‡(
limô


282 && 
c
->
wrôe
->
ªady


283 && 
c
->
£¡
 - síà>
limô
 - (
off_t
Ë(2 * 
ngx_∑gesize
))

285 
c
->
wrôe
->
dñayed
 = 1;

286 
	`ngx_add_timî
(
c
->
wrôe
, 1);

289 
˛
 = 
r
->
out
; c»&& c»!
chaö
; ) {

290 
 
 = 
˛
;

291 
˛
 = cl->
√xt
;

292 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

295 
r
->
out
 = 
chaö
;

297 i‡(
chaö
) {

298 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

299  
NGX_AGAIN
;

302 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

304 i‡((
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
Ë&& 
r
->
po°p⁄ed
 =
NULL
) {

305  
NGX_AGAIN
;

308  
NGX_OK
;

309 
	}
}

312 
ngx_öt_t


313 
	$ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

315 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_wrôe_fûãr
;

317  
NGX_OK
;

318 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

16 
ngx_maû_li°í_t
 *
li°í
);

17 *
ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

18 
ngx_öt_t
 
ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

19 
ngx_maû_c⁄f_addr_t
 *
addr
);

20 #i‡(
NGX_HAVE_INET6
)

21 
ngx_öt_t
 
ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

22 
ngx_maû_c⁄f_addr_t
 *
addr
);

24 
ngx_öt_t
 
ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

27 
ngx_uöt_t
 
	gngx_maû_max_moduÀ
;

30 
ngx_comm™d_t
 
	gngx_maû_comm™ds
[] = {

32 { 
ngx_°rög
("mail"),

33 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

34 
ngx_maû_block
,

37 
NULL
 },

39 { 
ngx_°rög
("imap"),

40 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

41 
ngx_maû_block
,

44 
NULL
 },

46 
ngx_nuŒ_comm™d


50 
ngx_c‹e_moduÀ_t
 
	gngx_maû_moduÀ_˘x
 = {

51 
ngx_°rög
("mail"),

52 
NULL
,

53 
NULL


57 
ngx_moduÀ_t
 
	gngx_maû_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_maû_moduÀ_˘x
,

60 
ngx_maû_comm™ds
,

61 
NGX_CORE_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


74 
	$ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

76 *
rv
;

77 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

78 
ngx_c⁄f_t
 
pcf
;

79 
ngx_¨øy_t
 
p‹ts
;

80 
ngx_maû_li°í_t
 *
li°í
;

81 
ngx_maû_moduÀ_t
 *
moduÀ
;

82 
ngx_maû_c⁄f_˘x_t
 *
˘x
;

83 
ngx_maû_c‹e_§v_c⁄f_t
 **
cscÂ
;

84 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

86 i‡(
cmd
->
«me
.
d©a
[0] == 'i') {

87 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

94 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

95 i‡(
˘x
 =
NULL
) {

96  
NGX_CONF_ERROR
;

99 *(
ngx_maû_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

103 
ngx_maû_max_moduÀ
 = 0;

104 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

105 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

109 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_maû_max_moduÀ
++;

115 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

116 (*Ë* 
ngx_maû_max_moduÀ
);

117 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

118  
NGX_CONF_ERROR
;

127 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

128 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

129  
NGX_CONF_ERROR
;

138 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

139 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

143 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

144 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

146 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

147 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

148 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

149  
NGX_CONF_ERROR
;

153 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

154 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

155 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

156  
NGX_CONF_ERROR
;

164 
pcf
 = *
cf
;

165 
cf
->
˘x
 = ctx;

167 
cf
->
moduÀ_ty≥
 = 
NGX_MAIL_MODULE
;

168 
cf
->
cmd_ty≥
 = 
NGX_MAIL_MAIN_CONF
;

169 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

171 i‡(
rv
 !
NGX_CONF_OK
) {

172 *
cf
 = 
pcf
;

173  
rv
;

179 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

180 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

182 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

183 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

187 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

188 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

192 
cf
->
˘x
 = ctx;

194 i‡(
moduÀ
->
öô_maö_c⁄f
) {

195 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

196 i‡(
rv
 !
NGX_CONF_OK
) {

197 *
cf
 = 
pcf
;

198  
rv
;

202 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

206 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

208 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

209 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

210 
˘x
->
§v_c⁄f
[
mi
],

211 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

212 i‡(
rv
 !
NGX_CONF_OK
) {

213 *
cf
 = 
pcf
;

214  
rv
;

220 *
cf
 = 
pcf
;

223 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_maû_c⁄f_p‹t_t
))

224 !
NGX_OK
)

226  
NGX_CONF_ERROR
;

229 
li°í
 = 
cmcf
->li°í.
ñts
;

231 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

232 i‡(
	`ngx_maû_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

233  
NGX_CONF_ERROR
;

237  
	`ngx_maû_›timize_£rvîs
(
cf
, &
p‹ts
);

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

243 
ngx_maû_li°í_t
 *
li°í
)

245 
ö_p‹t_t
 
p
;

246 
ngx_uöt_t
 
i
;

247 
sockaddr
 *
ß
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

250 
ngx_maû_c⁄f_addr_t
 *
addr
;

251 #i‡(
NGX_HAVE_INET6
)

252 
sockaddr_ö6
 *
sö6
;

255 
ß
 = (
sockaddr
 *Ë&
li°í
->sockaddr;

257 
ß
->
ß_Ámûy
) {

259 #i‡(
NGX_HAVE_INET6
)

260 
AF_INET6
:

261 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

262 
p
 = 
sö6
->
sö6_p‹t
;

266 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

267 
AF_UNIX
:

268 
p
 = 0;

273 
sö
 = (
sockaddr_ö
 *Ë
ß
;

274 
p
 = 
sö
->
sö_p‹t
;

278 
p‹t
 = 
p‹ts
->
ñts
;

279 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

280 i‡(
p
 =
p‹t
[
i
].p‹à&& 
ß
->
ß_Ámûy
 =p‹t[i].
Ámûy
) {

284 
p‹t
 = &p‹t[
i
];

285 
found
;

291 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

292 i‡(
p‹t
 =
NULL
) {

293  
NGX_ERROR
;

296 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

297 
p‹t
->p‹à
p
;

299 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

300 (
ngx_maû_c⁄f_addr_t
))

301 !
NGX_OK
)

303  
NGX_ERROR
;

306 
found
:

308 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

309 i‡(
addr
 =
NULL
) {

310  
NGX_ERROR
;

313 
addr
->
sockaddr
 = (sockadd∏*Ë&
li°í
->sockaddr;

314 
addr
->
sockÀn
 = 
li°í
->socklen;

315 
addr
->
˘x
 = 
li°í
->ctx;

316 
addr
->
böd
 = 
li°í
->bind;

317 
addr
->
wûdˇrd
 = 
li°í
->wildcard;

318 
addr
->
so_kì∑live
 = 
li°í
->so_keepalive;

319 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

320 
addr
->
t˝_kìpidÀ
 = 
li°í
->tcp_keepidle;

321 
addr
->
t˝_kìpötvl
 = 
li°í
->tcp_keepintvl;

322 
addr
->
t˝_kìp˙t
 = 
li°í
->tcp_keepcnt;

324 #i‡(
NGX_MAIL_SSL
)

325 
addr
->
s¶
 = 
li°í
->ssl;

327 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

328 
addr
->
ùv6⁄ly
 = 
li°í
->ipv6only;

331  
NGX_OK
;

332 
	}
}

336 
	$ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

338 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

339 
ngx_li°íög_t
 *
ls
;

340 
ngx_maû_p‹t_t
 *
mp‹t
;

341 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

342 
ngx_maû_c⁄f_addr_t
 *
addr
;

344 
p‹t
 = 
p‹ts
->
ñts
;

345 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

347 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

348 (
ngx_maû_c⁄f_addr_t
), 
ngx_maû_cmp_c⁄f_addrs
);

350 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

351 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

358 i‡(
addr
[
œ°
 - 1].
wûdˇrd
) {

359 
addr
[
œ°
 - 1].
böd
 = 1;

360 
böd_wûdˇrd
 = 1;

363 
böd_wûdˇrd
 = 0;

366 
i
 = 0;

368 
i
 < 
œ°
) {

370 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
böd
) {

371 
i
++;

375 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, 
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
);

376 i‡(
ls
 =
NULL
) {

377  
NGX_CONF_ERROR
;

380 
ls
->
addr_¡›
 = 1;

381 
ls
->
h™dÀr
 = 
ngx_maû_öô_c⁄√˘i⁄
;

382 
ls
->
poﬁ_size
 = 256;

385 
ls
->
logp
 = &
cf
->
cy˛e
->
√w_log
;

386 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

387 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

389 
ls
->
kì∑live
 = 
addr
[
i
].
so_kì∑live
;

390 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

391 
ls
->
kìpidÀ
 = 
addr
[
i
].
t˝_kìpidÀ
;

392 
ls
->
kìpötvl
 = 
addr
[
i
].
t˝_kìpötvl
;

393 
ls
->
kìp˙t
 = 
addr
[
i
].
t˝_kìp˙t
;

396 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

397 
ls
->
ùv6⁄ly
 = 
addr
[
i
].ipv6only;

400 
mp‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_maû_p‹t_t
));

401 i‡(
mp‹t
 =
NULL
) {

402  
NGX_CONF_ERROR
;

405 
ls
->
£rvîs
 = 
mp‹t
;

407 i‡(
i
 =
œ°
 - 1) {

408 
mp‹t
->
«ddrs
 = 
œ°
;

411 
mp‹t
->
«ddrs
 = 1;

412 
i
 = 0;

415 
ls
->
sockaddr
->
ß_Ámûy
) {

416 #i‡(
NGX_HAVE_INET6
)

417 
AF_INET6
:

418 i‡(
	`ngx_maû_add_addrs6
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

419  
NGX_CONF_ERROR
;

424 i‡(
	`ngx_maû_add_addrs
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

425  
NGX_CONF_ERROR
;

430 
addr
++;

431 
œ°
--;

435  
NGX_CONF_OK
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

441 
ngx_maû_c⁄f_addr_t
 *
addr
)

443 
u_ch¨
 *
p
;

444 
size_t
 
Àn
;

445 
ngx_uöt_t
 
i
;

446 
ngx_maû_ö_addr_t
 *
addrs
;

447 
sockaddr_ö
 *
sö
;

448 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

450 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

451 
mp‹t
->
«ddrs
 * (
ngx_maû_ö_addr_t
));

452 i‡(
mp‹t
->
addrs
 =
NULL
) {

453  
NGX_ERROR
;

456 
addrs
 = 
mp‹t
->addrs;

458 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

460 
sö
 = (
sockaddr_ö
 *Ë
addr
[
i
].
sockaddr
;

461 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

463 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

464 #i‡(
NGX_MAIL_SSL
)

465 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

468 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
, 
buf
,

469 
NGX_SOCKADDR_STRLEN
, 1);

471 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

472 i‡(
p
 =
NULL
) {

473  
NGX_ERROR
;

476 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

478 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

479 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

482  
NGX_OK
;

483 
	}
}

486 #i‡(
NGX_HAVE_INET6
)

488 
ngx_öt_t


489 
	$ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

490 
ngx_maû_c⁄f_addr_t
 *
addr
)

492 
u_ch¨
 *
p
;

493 
size_t
 
Àn
;

494 
ngx_uöt_t
 
i
;

495 
ngx_maû_ö6_addr_t
 *
addrs6
;

496 
sockaddr_ö6
 *
sö6
;

497 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

499 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

500 
mp‹t
->
«ddrs
 * (
ngx_maû_ö6_addr_t
));

501 i‡(
mp‹t
->
addrs
 =
NULL
) {

502  
NGX_ERROR
;

505 
addrs6
 = 
mp‹t
->
addrs
;

507 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

509 
sö6
 = (
sockaddr_ö6
 *Ë
addr
[
i
].
sockaddr
;

510 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

512 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

513 #i‡(
NGX_MAIL_SSL
)

514 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

517 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
, 
buf
,

518 
NGX_SOCKADDR_STRLEN
, 1);

520 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

521 i‡(
p
 =
NULL
) {

522  
NGX_ERROR
;

525 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

527 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

528 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

531  
NGX_OK
;

532 
	}
}

537 
ngx_öt_t


538 
	$ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

540 
ngx_maû_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

542 
fú°
 = (
ngx_maû_c⁄f_addr_t
 *Ë
⁄e
;

543 
£c⁄d
 = (
ngx_maû_c⁄f_addr_t
 *Ë
two
;

545 i‡(
fú°
->
wûdˇrd
) {

550 i‡(
£c⁄d
->
wûdˇrd
) {

555 i‡(
fú°
->
böd
 && !
£c⁄d
->bind) {

560 i‡(!
fú°
->
böd
 && 
£c⁄d
->bind) {

568 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail.h

8 #i‚de‡
_NGX_MAIL_H_INCLUDED_


9 
	#_NGX_MAIL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

17 #i‡(
NGX_MAIL_SSL
)

18 
	~<ngx_maû_s¶_moduÀ.h
>

24 **
	mmaö_c⁄f
;

25 **
	m§v_c⁄f
;

26 } 
	tngx_maû_c⁄f_˘x_t
;

30 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

31 
sockÀn_t
 
	msockÀn
;

34 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

36 
	mböd
:1;

37 
	mwûdˇrd
:1;

38 #i‡(
NGX_MAIL_SSL
)

39 
	ms¶
:1;

41 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

42 
	mùv6⁄ly
:1;

44 
	mso_kì∑live
:2;

45 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

46 
	mt˝_kìpidÀ
;

47 
	mt˝_kìpötvl
;

48 
	mt˝_kìp˙t
;

50 } 
	tngx_maû_li°í_t
;

54 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

55 
ngx_°r_t
 
	maddr_ãxt
;

56 #i‡(
NGX_MAIL_SSL
)

57 
ngx_uöt_t
 
	ms¶
;

59 } 
	tngx_maû_addr_c⁄f_t
;

62 
ö_addr_t
 
	maddr
;

63 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

64 } 
	tngx_maû_ö_addr_t
;

67 #i‡(
NGX_HAVE_INET6
)

70 
ö6_addr
 
	maddr6
;

71 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

72 } 
	tngx_maû_ö6_addr_t
;

79 *
	maddrs
;

80 
ngx_uöt_t
 
	m«ddrs
;

81 } 
	tngx_maû_p‹t_t
;

85 
	mÁmûy
;

86 
ö_p‹t_t
 
	mp‹t
;

87 
ngx_¨øy_t
 
	maddrs
;

88 } 
	tngx_maû_c⁄f_p‹t_t
;

92 
sockaddr
 *
	msockaddr
;

93 
sockÀn_t
 
	msockÀn
;

95 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

97 
	mböd
:1;

98 
	mwûdˇrd
:1;

99 #i‡(
NGX_MAIL_SSL
)

100 
	ms¶
:1;

102 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

103 
	mùv6⁄ly
:1;

105 
	mso_kì∑live
:2;

106 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

107 
	mt˝_kìpidÀ
;

108 
	mt˝_kìpötvl
;

109 
	mt˝_kìp˙t
;

111 } 
	tngx_maû_c⁄f_addr_t
;

115 
ngx_¨øy_t
 
	m£rvîs
;

116 
ngx_¨øy_t
 
	mli°í
;

117 } 
	tngx_maû_c‹e_maö_c⁄f_t
;

120 
	#NGX_MAIL_POP3_PROTOCOL
 0

	)

121 
	#NGX_MAIL_IMAP_PROTOCOL
 1

	)

122 
	#NGX_MAIL_SMTP_PROTOCOL
 2

	)

125 
ngx_maû_¥Ÿocﬁ_s
 
	tngx_maû_¥Ÿocﬁ_t
;

129 
ngx_maû_¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

131 
ngx_m£c_t
 
	mtimeout
;

132 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

134 
ngx_Êag_t
 
	mso_kì∑live
;

136 
ngx_°r_t
 
	m£rvî_«me
;

138 
u_ch¨
 *
	mfûe_«me
;

139 
ngx_öt_t
 
	mlöe
;

141 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

144 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

145 } 
	tngx_maû_c‹e_§v_c⁄f_t
;

149 
	mngx_p›3_°¨t
 = 0,

150 
	mngx_p›3_u£r
,

151 
	mngx_p›3_∑sswd
,

152 
	mngx_p›3_auth_logö_u£∫ame
,

153 
	mngx_p›3_auth_logö_∑ssw‹d
,

154 
	mngx_p›3_auth_∂aö
,

155 
	mngx_p›3_auth_¸am_md5


156 } 
	tngx_p›3_°©e_e
;

160 
	mngx_im≠_°¨t
 = 0,

161 
	mngx_im≠_auth_logö_u£∫ame
,

162 
	mngx_im≠_auth_logö_∑ssw‹d
,

163 
	mngx_im≠_auth_∂aö
,

164 
	mngx_im≠_auth_¸am_md5
,

165 
	mngx_im≠_logö
,

166 
	mngx_im≠_u£r
,

167 
	mngx_im≠_∑sswd


168 } 
	tngx_im≠_°©e_e
;

172 
	mngx_smç_°¨t
 = 0,

173 
	mngx_smç_auth_logö_u£∫ame
,

174 
	mngx_smç_auth_logö_∑ssw‹d
,

175 
	mngx_smç_auth_∂aö
,

176 
	mngx_smç_auth_¸am_md5
,

177 
	mngx_smç_hño
,

178 
	mngx_smç_hño_x˛õ¡
,

179 
	mngx_smç_hño_‰om
,

180 
	mngx_smç_x˛õ¡
,

181 
	mngx_smç_x˛õ¡_‰om
,

182 
	mngx_smç_x˛õ¡_hño
,

183 
	mngx_smç_‰om
,

184 
	mngx_smç_to


185 } 
	tngx_smç_°©e_e
;

189 
ngx_≥î_c⁄√˘i⁄_t
 
	mup°ªam
;

190 
ngx_buf_t
 *
	mbuf„r
;

191 } 
	tngx_maû_¥oxy_˘x_t
;

195 
uöt32_t
 
	msig«tuª
;

197 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

199 
ngx_°r_t
 
	mout
;

200 
ngx_buf_t
 *
	mbuf„r
;

202 **
	m˘x
;

203 **
	mmaö_c⁄f
;

204 **
	m§v_c⁄f
;

206 
ngx_ªsﬁvî_˘x_t
 *
	mªsﬁvî_˘x
;

208 
ngx_maû_¥oxy_˘x_t
 *
	m¥oxy
;

210 
ngx_uöt_t
 
	mmaû_°©e
;

212 
	m¥Ÿocﬁ
:3;

213 
	mblocked
:1;

214 
	mquô
:1;

215 
	mquŸed
:1;

216 
	mback¶ash
:1;

217 
	mno_sync_lôîÆ
:1;

218 
	m°¨âls
:1;

219 
	mesmç
:1;

220 
	mauth_mëhod
:3;

221 
	mauth_waô
:1;

223 
ngx_°r_t
 
	mlogö
;

224 
ngx_°r_t
 
	m∑sswd
;

226 
ngx_°r_t
 
	mß…
;

227 
ngx_°r_t
 
	mèg
;

228 
ngx_°r_t
 
	mègged_löe
;

229 
ngx_°r_t
 
	mãxt
;

231 
ngx_°r_t
 *
	maddr_ãxt
;

232 
ngx_°r_t
 
	mho°
;

233 
ngx_°r_t
 
	msmç_hño
;

234 
ngx_°r_t
 
	msmç_‰om
;

235 
ngx_°r_t
 
	msmç_to
;

237 
ngx_°r_t
 
	mcmd
;

239 
ngx_uöt_t
 
	mcomm™d
;

240 
ngx_¨øy_t
 
	m¨gs
;

242 
ngx_uöt_t
 
	mlogö_©ãm±
;

246 
ngx_uöt_t
 
	m°©e
;

247 
u_ch¨
 *
	mcmd_°¨t
;

248 
u_ch¨
 *
	m¨g_°¨t
;

249 
u_ch¨
 *
	m¨g_íd
;

250 
ngx_uöt_t
 
	mlôîÆ_Àn
;

251 } 
	tngx_maû_£ssi⁄_t
;

255 
ngx_°r_t
 *
	m˛õ¡
;

256 
ngx_maû_£ssi⁄_t
 *
	m£ssi⁄
;

257 } 
	tngx_maû_log_˘x_t
;

260 
	#NGX_POP3_USER
 1

	)

261 
	#NGX_POP3_PASS
 2

	)

262 
	#NGX_POP3_CAPA
 3

	)

263 
	#NGX_POP3_QUIT
 4

	)

264 
	#NGX_POP3_NOOP
 5

	)

265 
	#NGX_POP3_STLS
 6

	)

266 
	#NGX_POP3_APOP
 7

	)

267 
	#NGX_POP3_AUTH
 8

	)

268 
	#NGX_POP3_STAT
 9

	)

269 
	#NGX_POP3_LIST
 10

	)

270 
	#NGX_POP3_RETR
 11

	)

271 
	#NGX_POP3_DELE
 12

	)

272 
	#NGX_POP3_RSET
 13

	)

273 
	#NGX_POP3_TOP
 14

	)

274 
	#NGX_POP3_UIDL
 15

	)

277 
	#NGX_IMAP_LOGIN
 1

	)

278 
	#NGX_IMAP_LOGOUT
 2

	)

279 
	#NGX_IMAP_CAPABILITY
 3

	)

280 
	#NGX_IMAP_NOOP
 4

	)

281 
	#NGX_IMAP_STARTTLS
 5

	)

283 
	#NGX_IMAP_NEXT
 6

	)

285 
	#NGX_IMAP_AUTHENTICATE
 7

	)

288 
	#NGX_SMTP_HELO
 1

	)

289 
	#NGX_SMTP_EHLO
 2

	)

290 
	#NGX_SMTP_AUTH
 3

	)

291 
	#NGX_SMTP_QUIT
 4

	)

292 
	#NGX_SMTP_NOOP
 5

	)

293 
	#NGX_SMTP_MAIL
 6

	)

294 
	#NGX_SMTP_RSET
 7

	)

295 
	#NGX_SMTP_RCPT
 8

	)

296 
	#NGX_SMTP_DATA
 9

	)

297 
	#NGX_SMTP_VRFY
 10

	)

298 
	#NGX_SMTP_EXPN
 11

	)

299 
	#NGX_SMTP_HELP
 12

	)

300 
	#NGX_SMTP_STARTTLS
 13

	)

303 
	#NGX_MAIL_AUTH_PLAIN
 0

	)

304 
	#NGX_MAIL_AUTH_LOGIN
 1

	)

305 
	#NGX_MAIL_AUTH_LOGIN_USERNAME
 2

	)

306 
	#NGX_MAIL_AUTH_APOP
 3

	)

307 
	#NGX_MAIL_AUTH_CRAM_MD5
 4

	)

308 
	#NGX_MAIL_AUTH_NONE
 5

	)

311 
	#NGX_MAIL_AUTH_PLAIN_ENABLED
 0x0002

	)

312 
	#NGX_MAIL_AUTH_LOGIN_ENABLED
 0x0004

	)

313 
	#NGX_MAIL_AUTH_APOP_ENABLED
 0x0008

	)

314 
	#NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 0x0010

	)

315 
	#NGX_MAIL_AUTH_NONE_ENABLED
 0x0020

	)

318 
	#NGX_MAIL_PARSE_INVALID_COMMAND
 20

	)

321 (*
	tngx_maû_öô_£ssi⁄_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

322 
	tngx_c⁄√˘i⁄_t
 *
	tc
);

323 (*
	tngx_maû_öô_¥Ÿocﬁ_±
)(
	tngx_evít_t
 *
	tªv
);

324 (*
	tngx_maû_auth_°©e_±
)(
	tngx_evít_t
 *
	tªv
);

325 
	$ngx_öt_t
 (*
	tngx_maû_∑r£_comm™d_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
);

328 
	sngx_maû_¥Ÿocﬁ_s
 {

329 
ngx_°r_t
 
«me
;

330 
ö_p‹t_t
 
p‹t
[4];

331 
ngx_uöt_t
 
ty≥
;

333 
ngx_maû_öô_£ssi⁄_±
 
öô_£ssi⁄
;

334 
ngx_maû_öô_¥Ÿocﬁ_±
 
öô_¥Ÿocﬁ
;

335 
ngx_maû_∑r£_comm™d_±
 
∑r£_comm™d
;

336 
ngx_maû_auth_°©e_±
 
auth_°©e
;

338 
ngx_°r_t
 
öã∫Æ_£rvî_îr‹
;

343 
ngx_maû_¥Ÿocﬁ_t
 *
¥Ÿocﬁ
;

345 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

346 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

348 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

349 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

350 *
c⁄f
);

351 } 
	tngx_maû_moduÀ_t
;

354 
	#NGX_MAIL_MODULE
 0x4C49414D

	)

356 
	#NGX_MAIL_MAIN_CONF
 0x02000000

	)

357 
	#NGX_MAIL_SRV_CONF
 0x04000000

	)

360 
	#NGX_MAIL_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

361 
	#NGX_MAIL_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

364 
	#ngx_maû_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

365 
	#ngx_maû_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

366 
	#ngx_maû_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

369 
	#ngx_maû_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

370 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

371 
	#ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

373 
	#ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

374 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

375 
	#ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

376 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

379 #i‡(
NGX_MAIL_SSL
)

380 
	`ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
);

381 
ngx_öt_t
 
	`ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

385 
	`ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

387 
ngx_öt_t
 
	`ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

388 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
);

389 
ngx_öt_t
 
	`ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

390 
ngx_uöt_t
 
n
);

391 
ngx_öt_t
 
	`ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
,

392 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
);

393 
ngx_öt_t
 
	`ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
,

394 
ngx_c⁄√˘i⁄_t
 *
c
);

395 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
,

396 
ngx_c⁄√˘i⁄_t
 *
c
, *
¥efix
, 
size_t
 
Àn
);

397 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

398 
ngx_öt_t
 
	`ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

400 
	`ngx_maû_£nd
(
ngx_evít_t
 *
wev
);

401 
ngx_öt_t
 
	`ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

402 
	`ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

403 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

404 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

405 
u_ch¨
 *
	`ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

408 *
	`ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

412 
	`ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
);

413 
	`ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
);

417 
ngx_uöt_t
 
ngx_maû_max_moduÀ
;

418 
ngx_moduÀ_t
 
ngx_maû_c‹e_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_auth_http_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_addr_t
 *
	m≥î
;

18 
ngx_m£c_t
 
	mtimeout
;

20 
ngx_°r_t
 
	mho°_hódî
;

21 
ngx_°r_t
 
	muri
;

22 
ngx_°r_t
 
	mhódî
;

24 
ngx_¨øy_t
 *
	mhódîs
;

26 
u_ch¨
 *
	mfûe
;

27 
ngx_uöt_t
 
	mlöe
;

28 } 
	tngx_maû_auth_hâp_c⁄f_t
;

31 
ngx_maû_auth_hâp_˘x_s
 
	tngx_maû_auth_hâp_˘x_t
;

33 (*
	tngx_maû_auth_hâp_h™dÀr_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

34 
	tngx_maû_auth_hâp_˘x_t
 *
	t˘x
);

36 
	sngx_maû_auth_hâp_˘x_s
 {

37 
ngx_buf_t
 *
ªque°
;

38 
ngx_buf_t
 *
ª•⁄£
;

39 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

41 
ngx_maû_auth_hâp_h™dÀr_±
 
h™dÀr
;

43 
ngx_uöt_t
 
°©e
;

45 
u_ch¨
 *
hódî_«me_°¨t
;

46 
u_ch¨
 *
hódî_«me_íd
;

47 
u_ch¨
 *
hódî_°¨t
;

48 
u_ch¨
 *
hódî_íd
;

50 
ngx_°r_t
 
addr
;

51 
ngx_°r_t
 
p‹t
;

52 
ngx_°r_t
 
îr
;

53 
ngx_°r_t
 
îrmsg
;

54 
ngx_°r_t
 
îrcode
;

56 
time_t
 
¶ìp
;

58 
ngx_poﬁ_t
 *
poﬁ
;

62 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

63 
	`ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

64 
	`ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

65 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

66 
	`ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

67 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

68 
	`ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
);

69 
ngx_öt_t
 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

70 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

71 
	`ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
);

72 
	`ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

73 
ngx_buf_t
 *
	`ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
,

74 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
);

75 
ngx_öt_t
 
	`ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,

76 
ngx_°r_t
 *
esˇ≥d
);

78 *
	`ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

79 *
	`ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

80 *
chûd
);

81 *
	`ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

82 *
	`ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

83 *
c⁄f
);

86 
ngx_comm™d_t
 
ngx_maû_auth_hâp_comm™ds
[] = {

88 { 
	`ngx_°rög
("auth_http"),

89 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_maû_auth_hâp
,

91 
NGX_MAIL_SRV_CONF_OFFSET
,

93 
NULL
 },

95 { 
	`ngx_°rög
("auth_http_timeout"),

96 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_m£c_¶Ÿ
,

98 
NGX_MAIL_SRV_CONF_OFFSET
,

99 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
timeout
),

100 
NULL
 },

102 { 
	`ngx_°rög
("auth_http_header"),

103 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE2
,

104 
ngx_maû_auth_hâp_hódî
,

105 
NGX_MAIL_SRV_CONF_OFFSET
,

107 
NULL
 },

109 
ngx_nuŒ_comm™d


110 
	}
};

113 
ngx_maû_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ_˘x
 = {

114 
NULL
,

116 
NULL
,

117 
NULL
,

119 
ngx_maû_auth_hâp_¸óã_c⁄f
,

120 
ngx_maû_auth_hâp_mîge_c⁄f


124 
ngx_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_maû_auth_hâp_moduÀ_˘x
,

127 
ngx_maû_auth_hâp_comm™ds
,

128 
NGX_MAIL_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


140 
ngx_°r_t
 
	gngx_maû_auth_hâp_mëhod
[] = {

141 
ngx_°rög
("plain"),

142 
ngx_°rög
("plain"),

143 
ngx_°rög
("plain"),

144 
ngx_°rög
("apop"),

145 
ngx_°rög
("cram-md5"),

146 
ngx_°rög
("none")

149 
ngx_°r_t
 
	gngx_maû_smç_îrcode
 = 
ngx_°rög
("535 5.7.0");

153 
	$ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
)

155 
ngx_öt_t
 
rc
;

156 
ngx_poﬁ_t
 *
poﬁ
;

157 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

158 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

160 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "in httpáuth state";

162 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
s
->
c⁄√˘i⁄
->
log
);

163 i‡(
poﬁ
 =
NULL
) {

164 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

168 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_maû_auth_hâp_˘x_t
));

169 i‡(
˘x
 =
NULL
) {

170 
	`ngx_de°roy_poﬁ
(
poﬁ
);

171 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

175 
˘x
->
poﬁ
 =Öool;

177 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

179 
˘x
->
ªque°
 = 
	`ngx_maû_auth_hâp_¸óã_ªque°
(
s
, 
poﬁ
, 
ahcf
);

180 i‡(
˘x
->
ªque°
 =
NULL
) {

181 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

182 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

186 
	`ngx_maû_£t_˘x
(
s
, 
˘x
, 
ngx_maû_auth_hâp_moduÀ
);

188 
˘x
->
≥î
.
sockaddr
 = 
ahcf
->peer->sockaddr;

189 
˘x
->
≥î
.
sockÀn
 = 
ahcf
->peer->socklen;

190 
˘x
->
≥î
.
«me
 = &
ahcf
->peer->name;

191 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

192 
˘x
->
≥î
.
log
 = 
s
->
c⁄√˘i⁄
->log;

193 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

195 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

197 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

198 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

199 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

202 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

203 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

207 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = 
s
;

208 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

210 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_block_ªad
;

211 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_ªad_h™dÀr
;

212 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_auth_hâp_wrôe_h™dÀr
;

214 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_ign‹e_°©us_löe
;

216 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, 
ahcf
->
timeout
);

217 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, 
ahcf
->
timeout
);

219 i‡(
rc
 =
NGX_OK
) {

220 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

223 
	}
}

227 
	$ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

229 
ssize_t
 
n
, 
size
;

230 
ngx_c⁄√˘i⁄_t
 *
c
;

231 
ngx_maû_£ssi⁄_t
 *
s
;

232 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

233 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

235 
c
 = 
wev
->
d©a
;

236 
s
 = 
c
->
d©a
;

238 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

240 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0,

243 i‡(
wev
->
timedout
) {

244 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

245 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

246 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

247 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

248 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

252 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

254 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

256 i‡(
n
 =
NGX_ERROR
) {

257 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

258 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

259 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

263 i‡(
n
 > 0) {

264 
˘x
->
ªque°
->
pos
 +
n
;

266 i‡(
n
 =
size
) {

267 
wev
->
h™dÀr
 = 
ngx_maû_auth_hâp_dummy_h™dÀr
;

269 i‡(
wev
->
timî_£t
) {

270 
	`ngx_dñ_timî
(
wev
);

273 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

274 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

275 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

276 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

283 i‡(!
wev
->
timî_£t
) {

284 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

285 
	`ngx_add_timî
(
wev
, 
ahcf
->
timeout
);

287 
	}
}

291 
	$ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

293 
ssize_t
 
n
, 
size
;

294 
ngx_c⁄√˘i⁄_t
 *
c
;

295 
ngx_maû_£ssi⁄_t
 *
s
;

296 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

298 
c
 = 
ªv
->
d©a
;

299 
s
 = 
c
->
d©a
;

301 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

304 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

306 i‡(
ªv
->
timedout
) {

307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

308 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

309 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

310 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

311 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

315 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

316 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 1024);

317 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

318 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

319 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

320 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

325 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

327 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
pos
, 
size
);

329 i‡(
n
 > 0) {

330 
˘x
->
ª•⁄£
->
œ°
 +
n
;

332 
˘x
->
	`h™dÀr
(
s
, ctx);

336 i‡(
n
 =
NGX_AGAIN
) {

340 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

341 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

342 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

343 
	}
}

347 
	$ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

348 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

350 
u_ch¨
 *
p
, 
ch
;

352 
sw_°¨t
 = 0,

353 
sw_H
,

354 
sw_HT
,

355 
sw_HTT
,

356 
sw_HTTP
,

357 
sw_skù
,

358 
sw_Æmo°_d⁄e


359 } 
°©e
;

361 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

364 
°©e
 = 
˘x
->state;

366 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

367 
ch
 = *
p
;

369 
°©e
) {

372 
sw_°¨t
:

373 i‡(
ch
 == 'H') {

374 
°©e
 = 
sw_H
;

377 
√xt
;

379 
sw_H
:

380 i‡(
ch
 == 'T') {

381 
°©e
 = 
sw_HT
;

384 
√xt
;

386 
sw_HT
:

387 i‡(
ch
 == 'T') {

388 
°©e
 = 
sw_HTT
;

391 
√xt
;

393 
sw_HTT
:

394 i‡(
ch
 == 'P') {

395 
°©e
 = 
sw_HTTP
;

398 
√xt
;

400 
sw_HTTP
:

401 i‡(
ch
 == '/') {

402 
°©e
 = 
sw_skù
;

405 
√xt
;

408 
sw_skù
:

409 
ch
) {

410 
CR
:

411 
°©e
 = 
sw_Æmo°_d⁄e
;

414 
LF
:

415 
d⁄e
;

420 
sw_Æmo°_d⁄e
:

421 i‡(
ch
 =
LF
) {

422 
d⁄e
;

425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

427 
˘x
->
≥î
.
«me
);

428 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

429 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

430 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

435 
˘x
->
ª•⁄£
->
pos
 = 
p
;

436 
˘x
->
°©e
 = state;

440 
√xt
:

442 
p
 = 
˘x
->
ª•⁄£
->
°¨t
 - 1;

444 
d⁄e
:

446 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

447 
˘x
->
°©e
 = 0;

448 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_¥o˚ss_hódîs
;

449 
˘x
->
	`h™dÀr
(
s
, ctx);

450 
	}
}

454 
	$ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

455 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

457 
u_ch¨
 *
p
;

458 
time_t
 
timî
;

459 
size_t
 
Àn
, 
size
;

460 
ngx_öt_t
 
rc
, 
p‹t
, 
n
;

461 
ngx_addr_t
 *
≥î
;

462 
sockaddr_ö
 *
sö
;

463 #i‡(
NGX_HAVE_INET6
)

464 
sockaddr_ö6
 *
sö6
;

467 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

471 
rc
 = 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
s
, 
˘x
);

473 i‡(
rc
 =
NGX_OK
) {

475 #i‡(
NGX_DEBUG
)

477 
ngx_°r_t
 
key
, 
vÆue
;

479 
key
.
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

480 
key
.
d©a
 = 
˘x
->
hódî_«me_°¨t
;

481 
vÆue
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

482 
vÆue
.
d©a
 = 
˘x
->
hódî_°¨t
;

484 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

486 &
key
, &
vÆue
);

490 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

492 i‡(
Àn
 == ("Auth-Status") - 1

493 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

494 (
u_ch¨
 *) "Auth-Status",

498 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

500 i‡(
Àn
 == 2

501 && 
˘x
->
hódî_°¨t
[0] == 'O'

502 && 
˘x
->
hódî_°¨t
[1] == 'K')

507 i‡(
Àn
 == 4

508 && 
˘x
->
hódî_°¨t
[0] == 'W'

509 && 
˘x
->
hódî_°¨t
[1] == 'A'

510 && 
˘x
->
hódî_°¨t
[2] == 'I'

511 && 
˘x
->
hódî_°¨t
[3] == 'T')

513 
s
->
auth_waô
 = 1;

517 
˘x
->
îrmsg
.
Àn
 =Üen;

518 
˘x
->
îrmsg
.
d©a
 = ctx->
hódî_°¨t
;

520 
s
->
¥Ÿocﬁ
) {

522 
NGX_MAIL_POP3_PROTOCOL
:

523 
size
 = ("-ERR "Ë- 1 + 
Àn
 + (
CRLF
) - 1;

526 
NGX_MAIL_IMAP_PROTOCOL
:

527 
size
 = 
s
->
èg
.
Àn
 + ("NO ") - 1 +Üen

528 + (
CRLF
) - 1;

532 
˘x
->
îr
 = ctx->
îrmsg
;

536 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
size
);

537 i‡(
p
 =
NULL
) {

538 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

539 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

540 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

544 
˘x
->
îr
.
d©a
 = 
p
;

546 
s
->
¥Ÿocﬁ
) {

548 
NGX_MAIL_POP3_PROTOCOL
:

549 *
p
++ = '-'; *p++ = 'E'; *p++ = 'R'; *p++ = 'R'; *p++ = ' ';

552 
NGX_MAIL_IMAP_PROTOCOL
:

553 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

554 *
p
++ = 'N'; *p++ = 'O'; *p++ = ' ';

561 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
hódî_°¨t
, 
Àn
);

562 *
p
++ = 
CR
; *p++ = 
LF
;

564 
˘x
->
îr
.
Àn
 = 
p
 - ctx->îr.
d©a
;

569 i‡(
Àn
 == ("Auth-Server") - 1

570 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

571 (
u_ch¨
 *) "Auth-Server",

575 
˘x
->
addr
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

576 
˘x
->
addr
.
d©a
 = ctx->
hódî_°¨t
;

581 i‡(
Àn
 == ("Auth-Port") - 1

582 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

583 (
u_ch¨
 *) "Auth-Port",

587 
˘x
->
p‹t
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

588 
˘x
->
p‹t
.
d©a
 = ctx->
hódî_°¨t
;

593 i‡(
Àn
 == ("Auth-User") - 1

594 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

595 (
u_ch¨
 *) "Auth-User",

599 
s
->
logö
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

601 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
, s->logö.
Àn
);

602 i‡(
s
->
logö
.
d©a
 =
NULL
) {

603 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

604 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

605 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

609 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
˘x
->
hódî_°¨t
, s->logö.
Àn
);

614 i‡(
Àn
 == ("Auth-Pass") - 1

615 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

616 (
u_ch¨
 *) "Auth-Pass",

620 
s
->
∑sswd
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

622 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
,

623 
s
->
∑sswd
.
Àn
);

624 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

625 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

626 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

627 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

631 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
˘x
->
hódî_°¨t
, s->∑sswd.
Àn
);

636 i‡(
Àn
 == ("Auth-Wait") - 1

637 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

638 (
u_ch¨
 *) "Auth-Wait",

642 
n
 = 
	`ngx_©oi
(
˘x
->
hódî_°¨t
,

643 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
);

645 i‡(
n
 !
NGX_ERROR
) {

646 
˘x
->
¶ìp
 = 
n
;

652 i‡(
Àn
 == ("Auth-Error-Code") - 1

653 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

654 (
u_ch¨
 *) "Auth-Error-Code",

658 
˘x
->
îrcode
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

660 
˘x
->
îrcode
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

661 
˘x
->
îrcode
.
Àn
);

662 i‡(
˘x
->
îrcode
.
d©a
 =
NULL
) {

663 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

664 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

665 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

669 
	`ngx_mem˝y
(
˘x
->
îrcode
.
d©a
, ctx->
hódî_°¨t
,

670 
˘x
->
îrcode
.
Àn
);

680 i‡(
rc
 =
NGX_DONE
) {

681 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

684 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

686 i‡(
˘x
->
îr
.
Àn
) {

688 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

689 "˛õ¡Üogö faûed: \"%V\"", &
˘x
->
îrmsg
);

691 i‡(
s
->
¥Ÿocﬁ
 =
NGX_MAIL_SMTP_PROTOCOL
) {

693 i‡(
˘x
->
îrcode
.
Àn
 == 0) {

694 
˘x
->
îrcode
 = 
ngx_maû_smç_îrcode
;

697 
˘x
->
îr
.
Àn
 = ctx->
îrcode
.À¿+ ctx->
îrmsg
.len

698 + (" " 
CRLF
) - 1;

700 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
˘x
->
îr
.
Àn
);

701 i‡(
p
 =
NULL
) {

702 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

703 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

707 
˘x
->
îr
.
d©a
 = 
p
;

709 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrcode
.
d©a
, ctx->îrcode.
Àn
);

710 *
p
++ = ' ';

711 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrmsg
.
d©a
, ctx->îrmsg.
Àn
);

712 *
p
++ = 
CR
; *∞
LF
;

715 
s
->
out
 = 
˘x
->
îr
;

716 
timî
 = 
˘x
->
¶ìp
;

718 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

720 i‡(
timî
 == 0) {

721 
s
->
quô
 = 1;

722 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

726 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

728 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

733 i‡(
s
->
auth_waô
) {

734 
timî
 = 
˘x
->
¶ìp
;

736 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

738 i‡(
timî
 == 0) {

739 
	`ngx_maû_auth_hâp_öô
(
s
);

743 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

745 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

750 i‡(
˘x
->
addr
.
Àn
 =0 || ctx->
p‹t
.len == 0) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

753 
˘x
->
≥î
.
«me
);

754 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

755 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

759 i‡(
s
->
∑sswd
.
d©a
 =
NULL


760 && 
s
->
¥Ÿocﬁ
 !
NGX_MAIL_SMTP_PROTOCOL
)

762 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

764 
˘x
->
≥î
.
«me
);

765 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

766 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

770 
≥î
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_addr_t
));

771 i‡(
≥î
 =
NULL
) {

772 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

773 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

777 
rc
 = 
	`ngx_∑r£_addr
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
≥î
,

778 
˘x
->
addr
.
d©a
, ctx->addr.
Àn
);

780 
rc
) {

781 
NGX_OK
:

784 
NGX_DECLINED
:

785 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

788 
˘x
->
≥î
.
«me
, &˘x->
addr
);

792 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

793 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

797 
p‹t
 = 
	`ngx_©oi
(
˘x
->p‹t.
d©a
, ctx->p‹t.
Àn
);

798 i‡(
p‹t
 =
NGX_ERROR
 ||Öort < 1 ||Öort > 65535) {

799 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

802 
˘x
->
≥î
.
«me
, &˘x->
p‹t
);

803 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

804 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

808 
≥î
->
sockaddr
->
ß_Ámûy
) {

810 #i‡(
NGX_HAVE_INET6
)

811 
AF_INET6
:

812 
sö6
 = (
sockaddr_ö6
 *Ë
≥î
->
sockaddr
;

813 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

818 
sö
 = (
sockaddr_ö
 *Ë
≥î
->
sockaddr
;

819 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

823 
Àn
 = 
˘x
->
addr
.À¿+ 1 + ctx->
p‹t
.len;

825 
≥î
->
«me
.
Àn
 =Üen;

827 
≥î
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

828 i‡(
≥î
->
«me
.
d©a
 =
NULL
) {

829 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

830 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

834 
Àn
 = 
˘x
->
addr
.len;

836 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
, 
˘x
->
addr
.d©a, 
Àn
);

838 
≥î
->
«me
.
d©a
[
Àn
++] = ':';

840 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
 + 
Àn
, 
˘x
->
p‹t
.data, ctx->port.len);

842 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

843 
	`ngx_maû_¥oxy_öô
(
s
, 
≥î
);

848 i‡(
rc
 =
NGX_AGAIN
 ) {

854 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

856 
˘x
->
≥î
.
«me
);

857 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

858 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

859 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

863 
	}
}

867 
	$ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
)

869 
ngx_c⁄√˘i⁄_t
 *
c
;

870 
ngx_maû_£ssi⁄_t
 *
s
;

871 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

873 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailáuth sleep handler");

875 
c
 = 
ªv
->
d©a
;

876 
s
 = 
c
->
d©a
;

878 i‡(
ªv
->
timedout
) {

880 
ªv
->
timedout
 = 0;

882 i‡(
s
->
auth_waô
) {

883 
s
->
auth_waô
 = 0;

884 
	`ngx_maû_auth_hâp_öô
(
s
);

888 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

890 
ªv
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
auth_°©e
;

892 
s
->
maû_°©e
 = 0;

893 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_PLAIN
;

895 
c
->
log
->
a˘i⁄
 = "ináuth state";

897 
	`ngx_maû_£nd
(
c
->
wrôe
);

899 i‡(
c
->
de°royed
) {

903 
	`ngx_add_timî
(
ªv
, 
cscf
->
timeout
);

905 i‡(
ªv
->
ªady
) {

906 
ªv
->
	`h™dÀr
(rev);

910 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

911 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

917 i‡(
ªv
->
a˘ive
) {

918 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

919 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

922 
	}
}

925 
ngx_öt_t


926 
	$ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

927 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

929 
u_ch¨
 
c
, 
ch
, *
p
;

931 
sw_°¨t
 = 0,

932 
sw_«me
,

933 
sw_•a˚_bef‹e_vÆue
,

934 
sw_vÆue
,

935 
sw_•a˚_a·î_vÆue
,

936 
sw_Æmo°_d⁄e
,

937 
sw_hódî_Æmo°_d⁄e


938 } 
°©e
;

940 
°©e
 = 
˘x
->state;

942 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

943 
ch
 = *
p
;

945 
°©e
) {

948 
sw_°¨t
:

950 
ch
) {

951 
CR
:

952 
˘x
->
hódî_íd
 = 
p
;

953 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

955 
LF
:

956 
˘x
->
hódî_íd
 = 
p
;

957 
hódî_d⁄e
;

959 
°©e
 = 
sw_«me
;

960 
˘x
->
hódî_«me_°¨t
 = 
p
;

962 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

963 i‡(
c
 >= 'a' && c <= 'z') {

967 i‡(
ch
 >= '0' && ch <= '9') {

971  
NGX_ERROR
;

976 
sw_«me
:

977 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

978 i‡(
c
 >= 'a' && c <= 'z') {

982 i‡(
ch
 == ':') {

983 
˘x
->
hódî_«me_íd
 = 
p
;

984 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

988 i‡(
ch
 == '-') {

992 i‡(
ch
 >= '0' && ch <= '9') {

996 i‡(
ch
 =
CR
) {

997 
˘x
->
hódî_«me_íd
 = 
p
;

998 
˘x
->
hódî_°¨t
 = 
p
;

999 
˘x
->
hódî_íd
 = 
p
;

1000 
°©e
 = 
sw_Æmo°_d⁄e
;

1004 i‡(
ch
 =
LF
) {

1005 
˘x
->
hódî_«me_íd
 = 
p
;

1006 
˘x
->
hódî_°¨t
 = 
p
;

1007 
˘x
->
hódî_íd
 = 
p
;

1008 
d⁄e
;

1011  
NGX_ERROR
;

1014 
sw_•a˚_bef‹e_vÆue
:

1015 
ch
) {

1018 
CR
:

1019 
˘x
->
hódî_°¨t
 = 
p
;

1020 
˘x
->
hódî_íd
 = 
p
;

1021 
°©e
 = 
sw_Æmo°_d⁄e
;

1023 
LF
:

1024 
˘x
->
hódî_°¨t
 = 
p
;

1025 
˘x
->
hódî_íd
 = 
p
;

1026 
d⁄e
;

1028 
˘x
->
hódî_°¨t
 = 
p
;

1029 
°©e
 = 
sw_vÆue
;

1035 
sw_vÆue
:

1036 
ch
) {

1038 
˘x
->
hódî_íd
 = 
p
;

1039 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1041 
CR
:

1042 
˘x
->
hódî_íd
 = 
p
;

1043 
°©e
 = 
sw_Æmo°_d⁄e
;

1045 
LF
:

1046 
˘x
->
hódî_íd
 = 
p
;

1047 
d⁄e
;

1052 
sw_•a˚_a·î_vÆue
:

1053 
ch
) {

1056 
CR
:

1057 
°©e
 = 
sw_Æmo°_d⁄e
;

1059 
LF
:

1060 
d⁄e
;

1062 
°©e
 = 
sw_vÆue
;

1068 
sw_Æmo°_d⁄e
:

1069 
ch
) {

1070 
LF
:

1071 
d⁄e
;

1073  
NGX_ERROR
;

1077 
sw_hódî_Æmo°_d⁄e
:

1078 
ch
) {

1079 
LF
:

1080 
hódî_d⁄e
;

1082  
NGX_ERROR
;

1087 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1088 
˘x
->
°©e
 = state;

1090  
NGX_AGAIN
;

1092 
d⁄e
:

1094 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1095 
˘x
->
°©e
 = 
sw_°¨t
;

1097  
NGX_OK
;

1099 
hódî_d⁄e
:

1101 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1102 
˘x
->
°©e
 = 
sw_°¨t
;

1104  
NGX_DONE
;

1105 
	}
}

1109 
	$ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
)

1111 
ngx_c⁄√˘i⁄_t
 *
c
;

1112 
ngx_maû_£ssi⁄_t
 *
s
;

1113 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

1115 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

1118 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1119 
c
 = 
ªv
->
d©a
;

1120 
s
 = 
c
->
d©a
;

1122 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

1124 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

1125 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

1126 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1128 
	}
}

1132 
	$ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1134 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

1136 
	}
}

1139 
ngx_buf_t
 *

1140 
	$ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

1141 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
)

1143 
size_t
 
Àn
;

1144 
ngx_buf_t
 *
b
;

1145 
ngx_°r_t
 
logö
, 
∑sswd
;

1146 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

1148 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
logö
, &logöË!
NGX_OK
) {

1149  
NULL
;

1152 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
∑sswd
, &∑sswdË!
NGX_OK
) {

1153  
NULL
;

1156 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

1158 
Àn
 = ("GET "Ë- 1 + 
ahcf
->
uri
.À¿+ (" HTTP/1.0" 
CRLF
) - 1

1159 + ("Ho°: "Ë- 1 + 
ahcf
->
ho°_hódî
.
Àn
 + (
CRLF
) - 1

1161 + 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn


1162 + (
CRLF
) - 1

1163 + ("Auth-U£r: "Ë- 1 + 
logö
.
Àn
 + (
CRLF
) - 1

1164 + ("Auth-Pass: "Ë- 1 + 
∑sswd
.
Àn
 + (
CRLF
) - 1

1165 + ("Auth-SÆt: "Ë- 1 + 
s
->
ß…
.
Àn


1166 + ("Auth-PrŸocﬁ: "Ë- 1 + 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn


1167 + (
CRLF
) - 1

1168 + ("Auth-Logö-Aâem±: "Ë- 1 + 
NGX_INT_T_LEN


1169 + (
CRLF
) - 1

1170 + ("Clõ¡-IP: "Ë- 1 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn


1171 + (
CRLF
) - 1

1172 + ("Clõ¡-Ho°: "Ë- 1 + 
s
->
ho°
.
Àn
 + (
CRLF
) - 1

1173 + ("Auth-SMTP-Hño: "Ë- 1 + 
s
->
smç_hño
.
Àn


1174 + ("Auth-SMTP-From: "Ë- 1 + 
s
->
smç_‰om
.
Àn


1175 + ("Auth-SMTP-To: "Ë- 1 + 
s
->
smç_to
.
Àn


1176 + 
ahcf
->
hódî
.
Àn


1177 + (
CRLF
) - 1;

1179 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
Àn
);

1180 i‡(
b
 =
NULL
) {

1181  
NULL
;

1184 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "GET ", ("GET ") - 1);

1185 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
uri
.
d©a
,áhcf->uri.
Àn
);

1186 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, " HTTP/1.0" 
CRLF
,

1187 (" HTTP/1.0" 
CRLF
) - 1);

1189 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Host: ", ("Host: ") - 1);

1190 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
ho°_hódî
.
d©a
,

1191 
ahcf
->
ho°_hódî
.
Àn
);

1192 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1194 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Method: ",

1196 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last,

1197 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
d©a
,

1198 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn
);

1199 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1201 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-User: ", ("Auth-User: ") - 1);

1202 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
logö
.
d©a
,Üogö.
Àn
);

1203 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1205 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Pass: ", ("Auth-Pass: ") - 1);

1206 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
∑sswd
.
d©a
,Öasswd.
Àn
);

1207 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1209 i‡(
s
->
auth_mëhod
 !
NGX_MAIL_AUTH_PLAIN
 && s->
ß…
.
Àn
) {

1210 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Salt: ", ("Auth-Salt: ") - 1);

1211 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

1213 
s
->
∑sswd
.
d©a
 = 
NULL
;

1216 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Protocol: ",

1218 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
cscf
->
¥Ÿocﬁ
->
«me
.
d©a
,

1219 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn
);

1220 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1222 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Auth-Logö-Aâem±: %ui" 
CRLF
,

1223 
s
->
logö_©ãm±
);

1225 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-IP: ", ("Client-IP: ") - 1);

1226 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

1227 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

1228 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1230 i‡(
s
->
ho°
.
Àn
) {

1231 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-Host: ",

1233 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

1234 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1237 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

1241 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-Helo: ",

1243 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_hño
.
d©a
, s->smç_hño.
Àn
);

1244 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1246 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-From: ",

1248 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_‰om
.
d©a
, s->smç_‰om.
Àn
);

1249 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1251 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-To: ",

1253 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_to
.
d©a
, s->smç_to.
Àn
);

1254 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1258 i‡(
ahcf
->
hódî
.
Àn
) {

1259 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
hódî
.
d©a
,áhcf->hódî.
Àn
);

1263 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1265 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

1267 
ngx_°r_t
 
l
;

1269 
l
.
Àn
 = 
b
->
œ°
 - b->
pos
;

1270 
l
.
d©a
 = 
b
->
pos
;

1271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1272 "maûáuth hâ∞hódî:\n\"%V\"", &
l
);

1276  
b
;

1277 
	}
}

1280 
ngx_öt_t


1281 
	$ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,Çgx_°r_à*
esˇ≥d
)

1283 
u_ch¨
 *
p
;

1284 
uöçå_t
 
n
;

1286 
n
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1288 i‡(
n
 == 0) {

1289 *
esˇ≥d
 = *
ãxt
;

1290  
NGX_OK
;

1293 
esˇ≥d
->
Àn
 = 
ãxt
->À¿+ 
n
 * 2;

1295 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
esˇ≥d
->
Àn
);

1296 i‡(
p
 =
NULL
) {

1297  
NGX_ERROR
;

1300 (Ë
	`ngx_esˇ≥_uri
(
p
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1302 
esˇ≥d
->
d©a
 = 
p
;

1304  
NGX_OK
;

1305 
	}
}

1309 
	$ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1311 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

1313 
ahcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_auth_hâp_c⁄f_t
));

1314 i‡(
ahcf
 =
NULL
) {

1315  
NULL
;

1318 
ahcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1320 
ahcf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

1321 
ahcf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1323  
ahcf
;

1324 
	}
}

1328 
	$ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1330 
ngx_maû_auth_hâp_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1331 
ngx_maû_auth_hâp_c⁄f_t
 *
c⁄f
 = 
chûd
;

1333 
u_ch¨
 *
p
;

1334 
size_t
 
Àn
;

1335 
ngx_uöt_t
 
i
;

1336 
ngx_èbÀ_ñt_t
 *
hódî
;

1338 i‡(
c⁄f
->
≥î
 =
NULL
) {

1339 
c⁄f
->
≥î
 = 
¥ev
->peer;

1340 
c⁄f
->
ho°_hódî
 = 
¥ev
->host_header;

1341 
c⁄f
->
uri
 = 
¥ev
->uri;

1343 i‡(
c⁄f
->
≥î
 =
NULL
) {

1344 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1346 
c⁄f
->
fûe
, c⁄f->
löe
);

1348  
NGX_CONF_ERROR
;

1352 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

1354 i‡(
c⁄f
->
hódîs
 =
NULL
) {

1355 
c⁄f
->
hódîs
 = 
¥ev
->headers;

1356 
c⁄f
->
hódî
 = 
¥ev
->header;

1359 i‡(
c⁄f
->
hódîs
 && c⁄f->
hódî
.
Àn
 == 0) {

1360 
Àn
 = 0;

1361 
hódî
 = 
c⁄f
->
hódîs
->
ñts
;

1362 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1363 
Àn
 +
hódî
[
i
].
key
.À¿+ 2 + hódî[i].
vÆue
.len + 2;

1366 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1367 i‡(
p
 =
NULL
) {

1368  
NGX_CONF_ERROR
;

1371 
c⁄f
->
hódî
.
Àn
 =Üen;

1372 
c⁄f
->
hódî
.
d©a
 = 
p
;

1374 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1375 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1376 *
p
++ = ':'; *p++ = ' ';

1377 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1378 *
p
++ = 
CR
; *p++ = 
LF
;

1382  
NGX_CONF_OK
;

1383 
	}
}

1387 
	$ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1389 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1391 
ngx_°r_t
 *
vÆue
;

1392 
ngx_uæ_t
 
u
;

1394 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1396 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1398 
u
.
uæ
 = 
vÆue
[1];

1399 
u
.
deÁu…_p‹t
 = 80;

1400 
u
.
uri_∑π
 = 1;

1402 i‡(
	`ngx_°∫cmp
(
u
.
uæ
.
d©a
, "http://", 7) == 0) {

1403 
u
.
uæ
.
Àn
 -= 7;

1404 
u
.
uæ
.
d©a
 += 7;

1407 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1408 i‡(
u
.
îr
) {

1409 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1410 "%†öáuth_hâ∞\"%V\"", 
u
.
îr
, &u.
uæ
);

1413  
NGX_CONF_ERROR
;

1416 
ahcf
->
≥î
 = 
u
.
addrs
;

1418 i‡(
u
.
Ámûy
 !
AF_UNIX
) {

1419 
ahcf
->
ho°_hódî
 = 
u
.
ho°
;

1422 
	`ngx_°r_£t
(&
ahcf
->
ho°_hódî
, "localhost");

1425 
ahcf
->
uri
 = 
u
.uri;

1427 i‡(
ahcf
->
uri
.
Àn
 == 0) {

1428 
	`ngx_°r_£t
(&
ahcf
->
uri
, "/");

1431  
NGX_CONF_OK
;

1432 
	}
}

1436 
	$ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1438 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1440 
ngx_°r_t
 *
vÆue
;

1441 
ngx_èbÀ_ñt_t
 *
hódî
;

1443 i‡(
ahcf
->
hódîs
 =
NULL
) {

1444 
ahcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
));

1445 i‡(
ahcf
->
hódîs
 =
NULL
) {

1446  
NGX_CONF_ERROR
;

1450 
hódî
 = 
	`ngx_¨øy_push
(
ahcf
->
hódîs
);

1451 i‡(
hódî
 =
NULL
) {

1452  
NGX_CONF_ERROR
;

1455 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1457 
hódî
->
key
 = 
vÆue
[1];

1458 
hódî
->
vÆue
 = value[2];

1460  
NGX_CONF_OK
;

1461 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

18 *
ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

19 *
c⁄f
);

20 *
ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_so_kì∑live
 = {

29 
ngx_c⁄f_dïªˇãd
, "so_keepalive",

34 
ngx_comm™d_t
 
	gngx_maû_c‹e_comm™ds
[] = {

36 { 
ngx_°rög
("server"),

37 
NGX_MAIL_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

38 
ngx_maû_c‹e_£rvî
,

41 
NULL
 },

43 { 
ngx_°rög
("listen"),

44 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

45 
ngx_maû_c‹e_li°í
,

46 
NGX_MAIL_SRV_CONF_OFFSET
,

48 
NULL
 },

50 { 
ngx_°rög
("protocol"),

51 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

52 
ngx_maû_c‹e_¥Ÿocﬁ
,

53 
NGX_MAIL_SRV_CONF_OFFSET
,

55 
NULL
 },

57 { 
ngx_°rög
("so_keepalive"),

58 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

59 
ngx_c⁄f_£t_Êag_¶Ÿ
,

60 
NGX_MAIL_SRV_CONF_OFFSET
,

61 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
so_kì∑live
),

62 &
ngx_c⁄f_dïªˇãd_so_kì∑live
 },

64 { 
ngx_°rög
("timeout"),

65 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_m£c_¶Ÿ
,

67 
NGX_MAIL_SRV_CONF_OFFSET
,

68 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
timeout
),

69 
NULL
 },

71 { 
ngx_°rög
("server_name"),

72 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_°r_¶Ÿ
,

74 
NGX_MAIL_SRV_CONF_OFFSET
,

75 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
£rvî_«me
),

76 
NULL
 },

78 { 
ngx_°rög
("resolver"),

79 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

80 
ngx_maû_c‹e_ªsﬁvî
,

81 
NGX_MAIL_SRV_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("resolver_timeout"),

86 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_m£c_¶Ÿ
,

88 
NGX_MAIL_SRV_CONF_OFFSET
,

89 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
ªsﬁvî_timeout
),

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_maû_moduÀ_t
 
	gngx_maû_c‹e_moduÀ_˘x
 = {

97 
NULL
,

99 
ngx_maû_c‹e_¸óã_maö_c⁄f
,

100 
NULL
,

102 
ngx_maû_c‹e_¸óã_§v_c⁄f
,

103 
ngx_maû_c‹e_mîge_§v_c⁄f


107 
ngx_moduÀ_t
 
	gngx_maû_c‹e_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_maû_c‹e_moduÀ_˘x
,

110 
ngx_maû_c‹e_comm™ds
,

111 
NGX_MAIL_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


124 
	$ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

126 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

128 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_maö_c⁄f_t
));

129 i‡(
cmcf
 =
NULL
) {

130  
NULL
;

133 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

134 (
ngx_maû_c‹e_§v_c⁄f_t
 *))

135 !
NGX_OK
)

137  
NULL
;

140 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_maû_li°í_t
))

141 !
NGX_OK
)

143  
NULL
;

146  
cmcf
;

147 
	}
}

151 
	$ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

155 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_§v_c⁄f_t
));

156 i‡(
cscf
 =
NULL
) {

157  
NULL
;

166 
cscf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

167 
cscf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

168 
cscf
->
so_kì∑live
 = 
NGX_CONF_UNSET
;

170 
cscf
->
ªsﬁvî
 = 
NGX_CONF_UNSET_PTR
;

172 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

173 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

175  
cscf
;

176 
	}
}

180 
	$ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

182 
ngx_maû_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

183 
ngx_maû_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

185 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

186 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
, 
¥ev
->resolver_timeout,

189 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
so_kì∑live
, 
¥ev
->so_keepalive, 0);

192 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
£rvî_«me
, 
¥ev
->server_name, "");

194 i‡(
c⁄f
->
£rvî_«me
.
Àn
 == 0) {

195 
c⁄f
->
£rvî_«me
 = 
cf
->
cy˛e
->
ho°«me
;

198 i‡(
c⁄f
->
¥Ÿocﬁ
 =
NULL
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

201 
c⁄f
->
fûe_«me
, c⁄f->
löe
);

202  
NGX_CONF_ERROR
;

205 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªsﬁvî
, 
¥ev
->ªsﬁvî, 
NULL
);

207  
NGX_CONF_OK
;

208 
	}
}

212 
	$ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
rv
;

215 *
mc⁄f
;

216 
ngx_uöt_t
 
m
;

217 
ngx_c⁄f_t
 
pcf
;

218 
ngx_maû_moduÀ_t
 *
moduÀ
;

219 
ngx_maû_c⁄f_˘x_t
 *
˘x
, *
maû_˘x
;

220 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

221 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

223 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

224 i‡(
˘x
 =
NULL
) {

225  
NGX_CONF_ERROR
;

228 
maû_˘x
 = 
cf
->
˘x
;

229 
˘x
->
maö_c⁄f
 = 
maû_˘x
->main_conf;

233 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

234 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

235  
NGX_CONF_ERROR
;

238 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

239 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

243 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

245 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

246 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

247 i‡(
mc⁄f
 =
NULL
) {

248  
NGX_CONF_ERROR
;

251 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

257 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

258 
cscf
->
˘x
 = ctx;

260 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

262 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

263 i‡(
cscÂ
 =
NULL
) {

264  
NGX_CONF_ERROR
;

267 *
cscÂ
 = 
cscf
;

272 
pcf
 = *
cf
;

273 
cf
->
˘x
 = ctx;

274 
cf
->
cmd_ty≥
 = 
NGX_MAIL_SRV_CONF
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
pcf
;

280  
rv
;

281 
	}
}

285 
	$ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

287 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

289 
size_t
 
Àn
, 
off
;

290 
ö_p‹t_t
 
p‹t
;

291 
ngx_°r_t
 *
vÆue
;

292 
ngx_uæ_t
 
u
;

293 
ngx_uöt_t
 
i
, 
m
;

294 
sockaddr
 *
ß
;

295 
ngx_maû_li°í_t
 *
ls
;

296 
ngx_maû_moduÀ_t
 *
moduÀ
;

297 
sockaddr_ö
 *
sö
;

298 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

299 #i‡(
NGX_HAVE_INET6
)

300 
sockaddr_ö6
 *
sö6
;

303 
vÆue
 = 
cf
->
¨gs
->
ñts
;

305 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

307 
u
.
uæ
 = 
vÆue
[1];

308 
u
.
li°í
 = 1;

310 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

311 i‡(
u
.
îr
) {

312 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

314 
u
.
îr
, &u.
uæ
);

317  
NGX_CONF_ERROR
;

320 
cmcf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

322 
ls
 = 
cmcf
->
li°í
.
ñts
;

324 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

326 
ß
 = (
sockaddr
 *Ë
ls
[
i
].sockaddr;

328 i‡(
ß
->
ß_Ámûy
 !
u
.
Ámûy
) {

332 
ß
->
ß_Ámûy
) {

334 #i‡(
NGX_HAVE_INET6
)

335 
AF_INET6
:

336 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

337 
Àn
 = 16;

338 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

339 
p‹t
 = 
sö6
->
sö6_p‹t
;

343 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

344 
AF_UNIX
:

345 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

346 
Àn
 = (((
sockaddr_un
 *Ë
ß
)->
sun_∑th
);

347 
p‹t
 = 0;

352 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

353 
Àn
 = 4;

354 
sö
 = (
sockaddr_ö
 *Ë
ß
;

355 
p‹t
 = 
sö
->
sö_p‹t
;

359 i‡(
	`ngx_memcmp
(
ls
[
i
].
sockaddr
 + 
off
, 
u
.sockadd∏+ off, 
Àn
) != 0) {

363 i‡(
p‹t
 !
u
.port) {

367 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

368 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

369  
NGX_CONF_ERROR
;

372 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

373 i‡(
ls
 =
NULL
) {

374  
NGX_CONF_ERROR
;

377 
	`ngx_memzîo
(
ls
, (
ngx_maû_li°í_t
));

379 
	`ngx_mem˝y
(
ls
->
sockaddr
, 
u
.sockaddr, u.
sockÀn
);

381 
ls
->
sockÀn
 = 
u
.socklen;

382 
ls
->
wûdˇrd
 = 
u
.wildcard;

383 
ls
->
˘x
 = 
cf
->ctx;

385 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

386 
ls
->
ùv6⁄ly
 = 1;

389 i‡(
cscf
->
¥Ÿocﬁ
 =
NULL
) {

390 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

391 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

395 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

397 i‡(
moduÀ
->
¥Ÿocﬁ
 =
NULL
) {

401 
i
 = 0; 
moduÀ
->
¥Ÿocﬁ
->
p‹t
[i]; i++) {

402 i‡(
moduÀ
->
¥Ÿocﬁ
->
p‹t
[
i
] =
u
.port) {

403 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

410 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

412 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

413 
ls
->
böd
 = 1;

417 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

418 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

419 
sockaddr
 *
ß
;

420 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

422 
ß
 = (
sockaddr
 *Ë
ls
->sockaddr;

424 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

426 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

427 
ls
->
ùv6⁄ly
 = 1;

429 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

430 
ls
->
ùv6⁄ly
 = 0;

433 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

435 &
vÆue
[
i
].
d©a
[9]);

436  
NGX_CONF_ERROR
;

439 
ls
->
böd
 = 1;

442 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
ls
->
sockÀn
, 
buf
,

443 
NGX_SOCKADDR_STRLEN
, 1);

445 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

447 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

452 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

455  
NGX_CONF_ERROR
;

459 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "ssl") == 0) {

460 #i‡(
NGX_MAIL_SSL
)

461 
ls
->
s¶
 = 1;

464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

467  
NGX_CONF_ERROR
;

471 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "so_keepalive=", 13) == 0) {

473 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "on") == 0) {

474 
ls
->
so_kì∑live
 = 1;

476 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "off") == 0) {

477 
ls
->
so_kì∑live
 = 2;

481 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

482 
u_ch¨
 *
p
, *
íd
;

483 
ngx_°r_t
 
s
;

485 
íd
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

486 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

488 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

489 i‡(
p
 =
NULL
) {

490 
p
 = 
íd
;

493 i‡(
p
 > 
s
.
d©a
) {

494 
s
.
Àn
 = 
p
 - s.
d©a
;

496 
ls
->
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

497 i‡(
ls
->
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

498 
övÆid_so_kì∑live
;

502 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

504 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

505 i‡(
p
 =
NULL
) {

506 
p
 = 
íd
;

509 i‡(
p
 > 
s
.
d©a
) {

510 
s
.
Àn
 = 
p
 - s.
d©a
;

512 
ls
->
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

513 i‡(
ls
->
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

514 
övÆid_so_kì∑live
;

518 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

520 i‡(
s
.
d©a
 < 
íd
) {

521 
s
.
Àn
 = 
íd
 - s.
d©a
;

523 
ls
->
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

524 i‡(
ls
->
t˝_kìp˙t
 =
NGX_ERROR
) {

525 
övÆid_so_kì∑live
;

529 i‡(
ls
->
t˝_kìpidÀ
 =0 &&Üs->
t˝_kìpötvl
 == 0

530 && 
ls
->
t˝_kìp˙t
 == 0)

532 
övÆid_so_kì∑live
;

535 
ls
->
so_kì∑live
 = 1;

539 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

542  
NGX_CONF_ERROR
;

547 
ls
->
böd
 = 1;

551 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

552 
övÆid_so_kì∑live
:

554 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

556 &
vÆue
[
i
].
d©a
[13]);

557  
NGX_CONF_ERROR
;

561 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

562 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

563  
NGX_CONF_ERROR
;

566  
NGX_CONF_OK
;

567 
	}
}

571 
	$ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

573 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

575 
ngx_°r_t
 *
vÆue
;

576 
ngx_uöt_t
 
m
;

577 
ngx_maû_moduÀ_t
 *
moduÀ
;

579 
vÆue
 = 
cf
->
¨gs
->
ñts
;

581 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

582 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

586 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

588 i‡(
moduÀ
->
¥Ÿocﬁ


589 && 
	`ngx_°rcmp
(
moduÀ
->
¥Ÿocﬁ
->
«me
.
d©a
, 
vÆue
[1].data) == 0)

591 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

593  
NGX_CONF_OK
;

597 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

598 "unknow¿¥Ÿocﬁ \"%V\"", &
vÆue
[1]);

599  
NGX_CONF_ERROR
;

600 
	}
}

604 
	$ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

606 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

608 
ngx_°r_t
 *
vÆue
;

610 
vÆue
 = 
cf
->
¨gs
->
ñts
;

612 i‡(
cscf
->
ªsﬁvî
 !
NGX_CONF_UNSET_PTR
) {

616 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

617 
cscf
->
ªsﬁvî
 = 
NULL
;

618  
NGX_CONF_OK
;

621 
cscf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

622 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

623  
NGX_CONF_ERROR
;

626  
NGX_CONF_OK
;

627 
	}
}

631 
	$ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

633 *
p
 = 
c⁄f
;

635 
ngx_°r_t
 *
c
, *
vÆue
;

636 
ngx_uöt_t
 
i
;

637 
ngx_¨øy_t
 *
a
;

639 
a
 = (
ngx_¨øy_t
 *Ë(
p
 + 
cmd
->
off£t
);

641 
vÆue
 = 
cf
->
¨gs
->
ñts
;

643 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

644 
c
 = 
	`ngx_¨øy_push
(
a
);

645 i‡(
c
 =
NULL
) {

646  
NGX_CONF_ERROR
;

649 *
c
 = 
vÆue
[
i
];

652  
NGX_CONF_OK
;

653 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 
ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

16 #i‡(
NGX_MAIL_SSL
)

17 
ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
);

18 
ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

23 
	$ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

25 
ngx_uöt_t
 
i
;

26 
ngx_maû_p‹t_t
 *
p‹t
;

27 
sockaddr
 *
ß
;

28 
sockaddr_ö
 *
sö
;

29 
ngx_maû_log_˘x_t
 *
˘x
;

30 
ngx_maû_ö_addr_t
 *
addr
;

31 
ngx_maû_£ssi⁄_t
 *
s
;

32 
ngx_maû_addr_c⁄f_t
 *
addr_c⁄f
;

33 #i‡(
NGX_HAVE_INET6
)

34 
sockaddr_ö6
 *
sö6
;

35 
ngx_maû_ö6_addr_t
 *
addr6
;

41 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

43 i‡(
p‹t
->
«ddrs
 > 1) {

53 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

54 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

58 
ß
 = 
c
->
loˇl_sockaddr
;

60 
ß
->
ß_Ámûy
) {

62 #i‡(
NGX_HAVE_INET6
)

63 
AF_INET6
:

64 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

66 
addr6
 = 
p‹t
->
addrs
;

70 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

71 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

76 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

82 
sö
 = (
sockaddr_ö
 *Ë
ß
;

84 
addr
 = 
p‹t
->
addrs
;

88 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

89 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

94 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

100 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

102 #i‡(
NGX_HAVE_INET6
)

103 
AF_INET6
:

104 
addr6
 = 
p‹t
->
addrs
;

105 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

110 
addr
 = 
p‹t
->
addrs
;

111 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

116 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_maû_£ssi⁄_t
));

117 i‡(
s
 =
NULL
) {

118 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

122 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

123 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

125 
s
->
addr_ãxt
 = &
addr_c⁄f
->addr_text;

127 
c
->
d©a
 = 
s
;

128 
s
->
c⁄√˘i⁄
 = 
c
;

130 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%uA client %V connectedÅo %V",

131 
c
->
numbî
, &c->
addr_ãxt
, 
s
->addr_text);

133 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_maû_log_˘x_t
));

134 i‡(
˘x
 =
NULL
) {

135 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

139 
˘x
->
˛õ¡
 = &
c
->
addr_ãxt
;

140 
˘x
->
£ssi⁄
 = 
s
;

142 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

143 
c
->
log
->
h™dÀr
 = 
ngx_maû_log_îr‹
;

144 
c
->
log
->
d©a
 = 
˘x
;

145 
c
->
log
->
a˘i⁄
 = "sending client greetingÜine";

147 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

149 #i‡(
NGX_MAIL_SSL
)

151 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

153 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

155 i‡(
s¶cf
->
íabÀ
) {

156 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

158 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

162 i‡(
addr_c⁄f
->
s¶
) {

164 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

166 i‡(
s¶cf
->
s¶
.
˘x
 =
NULL
) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

170 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

174 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

181 
	`ngx_maû_öô_£ssi⁄
(
c
);

182 
	}
}

185 #i‡(
NGX_MAIL_SSL
)

188 
	$ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
)

190 
ngx_c⁄√˘i⁄_t
 *
c
;

191 
ngx_maû_£ssi⁄_t
 *
s
;

192 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

194 
c
 = 
ªv
->
d©a
;

195 
s
 = 
c
->
d©a
;

196 
s
->
°¨âls
 = 1;

198 
c
->
log
->
a˘i⁄
 = "in starttls state";

200 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

202 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

203 
	}
}

207 
	$ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
)

209 
ngx_maû_£ssi⁄_t
 *
s
;

210 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

212 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
s¶
, 
c
, 0Ë=
NGX_ERROR
) {

213 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

217 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

219 
s
 = 
c
->
d©a
;

221 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

223 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

225 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_s¶_h™dshake_h™dÀr
;

230 
	`ngx_maû_s¶_h™dshake_h™dÀr
(
c
);

231 
	}
}

235 
	$ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

237 
ngx_maû_£ssi⁄_t
 *
s
;

238 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

240 i‡(
c
->
s¶
->
h™dshaked
) {

242 
s
 = 
c
->
d©a
;

244 i‡(
s
->
°¨âls
) {

245 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

247 
c
->
ªad
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
öô_¥Ÿocﬁ
;

248 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

250 
cscf
->
¥Ÿocﬁ
->
	`öô_¥Ÿocﬁ
(
c
->
ªad
);

255 
c
->
ªad
->
ªady
 = 0;

257 
	`ngx_maû_öô_£ssi⁄
(
c
);

261 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

262 
	}
}

268 
	$ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

270 
ngx_maû_£ssi⁄_t
 *
s
;

271 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

273 
s
 = 
c
->
d©a
;

275 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

277 
s
->
¥Ÿocﬁ
 = 
cscf
->¥Ÿocﬁ->
ty≥
;

279 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

280 i‡(
s
->
˘x
 =
NULL
) {

281 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

285 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

287 
cscf
->
¥Ÿocﬁ
->
	`öô_£ssi⁄
(
s
, 
c
);

288 
	}
}

291 
ngx_öt_t


292 
	$ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

293 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
)

295 
s
->
ß…
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

296 (" <18446744073709551616.@>" 
CRLF
) - 1

297 + 
NGX_TIME_T_LEN


298 + 
cscf
->
£rvî_«me
.
Àn
);

299 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

300  
NGX_ERROR
;

303 
s
->
ß…
.
Àn
 = 
	`ngx_•rötf
(s->ß….
d©a
, "<%ul.%T@%V>" 
CRLF
,

304 
	`ngx_øndom
(), 
	`ngx_time
(), &
cscf
->
£rvî_«me
)

305 - 
s
->
ß…
.
d©a
;

307  
NGX_OK
;

308 
	}
}

311 #i‡(
NGX_MAIL_SSL
)

313 
ngx_öt_t


314 
	$ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

316 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

318 i‡(
c
->
s¶
) {

322 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

324 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

329 
	}
}

334 
ngx_öt_t


335 
	$ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
)

337 
u_ch¨
 *
p
, *
œ°
;

338 
ngx_°r_t
 *
¨g
, 
∂aö
;

340 
¨g
 = 
s
->
¨gs
.
ñts
;

342 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

343 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

344 "maûáuthÖœö: \"%V\"", &
¨g
[
n
]);

347 
∂aö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

348 i‡(
∂aö
.
d©a
 =
NULL
) {

349  
NGX_ERROR
;

352 i‡(
	`ngx_decode_ba£64
(&
∂aö
, &
¨g
[
n
]Ë!
NGX_OK
) {

353 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

355  
NGX_MAIL_PARSE_INVALID_COMMAND
;

358 
p
 = 
∂aö
.
d©a
;

359 
œ°
 = 
p
 + 
∂aö
.
Àn
;

361 
p
 < 
œ°
 && *p++) { }

363 i‡(
p
 =
œ°
) {

364 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

366  
NGX_MAIL_PARSE_INVALID_COMMAND
;

369 
s
->
logö
.
d©a
 = 
p
;

371 
p
 < 
œ°
 && *p) {Ö++; }

373 i‡(
p
 =
œ°
) {

374 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

376  
NGX_MAIL_PARSE_INVALID_COMMAND
;

379 
s
->
logö
.
Àn
 = 
p
++ - s->logö.
d©a
;

381 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

382 
s
->
∑sswd
.
d©a
 = 
p
;

384 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

385 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

386 "maûáuthÖœö: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

389  
NGX_DONE
;

390 
	}
}

393 
ngx_öt_t


394 
	$ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

395 
ngx_uöt_t
 
n
)

397 
ngx_°r_t
 *
¨g
;

399 
¨g
 = 
s
->
¨gs
.
ñts
;

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

402 "maûáuthÜogö u£∫ame: \"%V\"", &
¨g
[
n
]);

404 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

405 i‡(
s
->
logö
.
d©a
 =
NULL
) {

406  
NGX_ERROR
;

409 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[
n
]Ë!
NGX_OK
) {

410 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

412  
NGX_MAIL_PARSE_INVALID_COMMAND
;

415 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

416 "maûáuthÜogö u£∫ame: \"%V\"", &
s
->
logö
);

418  
NGX_OK
;

419 
	}
}

422 
ngx_öt_t


423 
	$ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

425 
ngx_°r_t
 *
¨g
;

427 
¨g
 = 
s
->
¨gs
.
ñts
;

429 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

430 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "maûáuthÜogöÖassw‹d: \"%V\"", &
¨g
[0]);

434 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

435 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

436 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

437  
NGX_ERROR
;

440 i‡(
	`ngx_decode_ba£64
(&
s
->
∑sswd
, &
¨g
[0]Ë!
NGX_OK
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

443  
NGX_MAIL_PARSE_INVALID_COMMAND
;

446 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

447 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

448 "maûáuthÜogöÖassw‹d: \"%V\"", &
s
->
∑sswd
);

451  
NGX_DONE
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

457 *
¥efix
, 
size_t
 
Àn
)

459 
u_ch¨
 *
p
;

460 
ngx_°r_t
 
ß…
;

461 
ngx_uöt_t
 
n
;

463 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
 + 
	`ngx_ba£64_ícoded_Àngth
(
s
->
ß…
.len) + 2);

464 i‡(
p
 =
NULL
) {

465  
NGX_ERROR
;

468 
ß…
.
d©a
 = 
	`ngx_˝ymem
(
p
, 
¥efix
, 
Àn
);

469 
s
->
ß…
.
Àn
 -= 2;

471 
	`ngx_ícode_ba£64
(&
ß…
, &
s
->salt);

473 
s
->
ß…
.
Àn
 += 2;

474 
n
 = 
Àn
 + 
ß…
.len;

475 
p
[
n
++] = 
CR
;Ö[n++] = 
LF
;

477 
s
->
out
.
Àn
 = 
n
;

478 
s
->
out
.
d©a
 = 
p
;

480  
NGX_OK
;

481 
	}
}

484 
ngx_öt_t


485 
	$ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

487 
u_ch¨
 *
p
, *
œ°
;

488 
ngx_°r_t
 *
¨g
;

490 
¨g
 = 
s
->
¨gs
.
ñts
;

492 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

493 "maûáuth cøm-md5: \"%V\"", &
¨g
[0]);

495 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

496 i‡(
s
->
logö
.
d©a
 =
NULL
) {

497  
NGX_ERROR
;

500 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[0]Ë!
NGX_OK
) {

501 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

503  
NGX_MAIL_PARSE_INVALID_COMMAND
;

506 
p
 = 
s
->
logö
.
d©a
;

507 
œ°
 = 
p
 + 
s
->
logö
.
Àn
;

509 
p
 < 
œ°
) {

510 i‡(*
p
++ == ' ') {

511 
s
->
logö
.
Àn
 = 
p
 - s->logö.
d©a
 - 1;

512 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

513 
s
->
∑sswd
.
d©a
 = 
p
;

518 i‡(
s
->
∑sswd
.
Àn
 != 32) {

519 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

521  
NGX_MAIL_PARSE_INVALID_COMMAND
;

524 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

525 "maûáuth cøm-md5: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

527 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_CRAM_MD5
;

529  
NGX_DONE
;

530 
	}
}

534 
	$ngx_maû_£nd
(
ngx_evít_t
 *
wev
)

536 
ngx_öt_t
 
n
;

537 
ngx_c⁄√˘i⁄_t
 *
c
;

538 
ngx_maû_£ssi⁄_t
 *
s
;

539 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

541 
c
 = 
wev
->
d©a
;

542 
s
 = 
c
->
d©a
;

544 i‡(
wev
->
timedout
) {

545 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

546 
c
->
timedout
 = 1;

547 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

551 i‡(
s
->
out
.
Àn
 == 0) {

552 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

553 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

559 
n
 = 
c
->
	`£nd
(c, 
s
->
out
.
d©a
, s->out.
Àn
);

561 i‡(
n
 > 0) {

562 
s
->
out
.
d©a
 +
n
;

563 
s
->
out
.
Àn
 -
n
;

565 i‡(
s
->
out
.
Àn
 != 0) {

566 
agaö
;

569 i‡(
wev
->
timî_£t
) {

570 
	`ngx_dñ_timî
(
wev
);

573 i‡(
s
->
quô
) {

574 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

578 i‡(
s
->
blocked
) {

579 
c
->
ªad
->
	`h™dÀr
(c->read);

585 i‡(
n
 =
NGX_ERROR
) {

586 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

592 
agaö
:

594 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

596 
	`ngx_add_timî
(
c
->
wrôe
, 
cscf
->
timeout
);

598 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

599 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

602 
	}
}

605 
ngx_öt_t


606 
	$ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

608 
ssize_t
 
n
;

609 
ngx_öt_t
 
rc
;

610 
ngx_°r_t
 
l
;

611 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

613 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

615 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

616 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

617  
NGX_ERROR
;

620 i‡(
n
 > 0) {

621 
s
->
buf„r
->
œ°
 +
n
;

624 i‡(
n
 =
NGX_AGAIN
) {

625 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

626 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

627  
NGX_ERROR
;

630 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

631  
NGX_AGAIN
;

635 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

637 
rc
 = 
cscf
->
¥Ÿocﬁ
->
	`∑r£_comm™d
(
s
);

639 i‡(
rc
 =
NGX_AGAIN
) {

641 i‡(
s
->
buf„r
->
œ°
 < s->buf„r->
íd
) {

642  
rc
;

645 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

646 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

648 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

649 "˛õ¡ síàtoÿl⁄g comm™d \"%V\"", &
l
);

651 
s
->
quô
 = 1;

653  
NGX_MAIL_PARSE_INVALID_COMMAND
;

656 i‡(
rc
 =
NGX_IMAP_NEXT
 ||Ñ¯=
NGX_MAIL_PARSE_INVALID_COMMAND
) {

657  
rc
;

660 i‡(
rc
 =
NGX_ERROR
) {

661 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

662  
NGX_ERROR
;

665  
NGX_OK
;

666 
	}
}

670 
	$ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

672 
s
->
¨gs
.
√…s
 = 0;

674 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

675 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

676 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

679 
s
->
°©e
 = 0;

681 i‡(
c
->
ªad
->
timî_£t
) {

682 
	`ngx_dñ_timî
(
c
->
ªad
);

685 
s
->
logö_©ãm±
++;

687 
	`ngx_maû_auth_hâp_öô
(
s
);

688 
	}
}

692 
	$ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

694 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

696 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

698 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
öã∫Æ_£rvî_îr‹
;

699 
s
->
quô
 = 1;

701 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

702 
	}
}

706 
	$ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

708 
ngx_poﬁ_t
 *
poﬁ
;

710 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

711 "˛o£ maû c⁄√˘i⁄: %d", 
c
->
fd
);

713 #i‡(
NGX_MAIL_SSL
)

715 i‡(
c
->
s¶
) {

716 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

717 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_˛o£_c⁄√˘i⁄
;

724 #i‡(
NGX_STAT_STUB
)

725 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

728 
c
->
de°royed
 = 1;

730 
poﬁ
 = 
c
->pool;

732 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

734 
	`ngx_de°roy_poﬁ
(
poﬁ
);

735 
	}
}

738 
u_ch¨
 *

739 
	$ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

741 
u_ch¨
 *
p
;

742 
ngx_maû_£ssi⁄_t
 *
s
;

743 
ngx_maû_log_˘x_t
 *
˘x
;

745 i‡(
log
->
a˘i⁄
) {

746 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

747 
Àn
 -
p
 - 
buf
;

748 
buf
 = 
p
;

751 
˘x
 = 
log
->
d©a
;

753 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", 
˘x
->
˛õ¡
);

754 
Àn
 -
p
 - 
buf
;

755 
buf
 = 
p
;

757 
s
 = 
˘x
->
£ssi⁄
;

759 i‡(
s
 =
NULL
) {

760  
p
;

763 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, "%s, server: %V",

764 
s
->
°¨âls
 ? " using starttls" : "",

765 
s
->
addr_ãxt
);

766 
Àn
 -
p
 - 
buf
;

767 
buf
 = 
p
;

769 i‡(
s
->
logö
.
Àn
 == 0) {

770  
p
;

773 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Üogö: \"%V\"", &
s
->
logö
);

774 
Àn
 -
p
 - 
buf
;

775 
buf
 = 
p
;

777 i‡(
s
->
¥oxy
 =
NULL
) {

778  
p
;

781 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", up°ªam: %V", 
s
->
¥oxy
->
up°ªam
.
«me
);

783  
p
;

784 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_imap_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
,

16 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
,

18 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

22 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
u_ch¨
 
	gim≠_gªëög
[] = "* OK IMAP4Ñódy" 
CRLF
;

26 
u_ch¨
 
	gim≠_°¨
[] = "* ";

27 
u_ch¨
 
	gim≠_ok
[] = "OK com∂ëed" 
CRLF
;

28 
u_ch¨
 
	gim≠_√xt
[] = "+ OK" 
CRLF
;

29 
u_ch¨
 
	gim≠_∂aö_√xt
[] = "+ " 
CRLF
;

30 
u_ch¨
 
	gim≠_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

31 
u_ch¨
 
	gim≠_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

32 
u_ch¨
 
	gim≠_bye
[] = "* BYE" 
CRLF
;

33 
u_ch¨
 
	gim≠_övÆid_comm™d
[] = "BAD invÆid comm™d" 
CRLF
;

37 
	$ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

39 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

41 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

43 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_gªëög
);

45 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_öô_¥Ÿocﬁ
;

47 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

49 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

50 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

53 
	`ngx_maû_£nd
(
c
->
wrôe
);

54 
	}
}

58 
	$ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

60 
ngx_c⁄√˘i⁄_t
 *
c
;

61 
ngx_maû_£ssi⁄_t
 *
s
;

62 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

64 
c
 = 
ªv
->
d©a
;

66 
c
->
log
->
a˘i⁄
 = "ináuth state";

68 i‡(
ªv
->
timedout
) {

69 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

70 
c
->
timedout
 = 1;

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

75 
s
 = 
c
->
d©a
;

77 i‡(
s
->
buf„r
 =
NULL
) {

78 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

79 =
NGX_ERROR
)

81 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

85 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

87 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
iscf
->
˛õ¡_buf„r_size
);

88 i‡(
s
->
buf„r
 =
NULL
) {

89 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

94 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

95 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_auth_°©e
;

97 
	`ngx_maû_im≠_auth_°©e
(
ªv
);

98 
	}
}

102 
	$ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
)

104 
u_ch¨
 *
p
, *
d°
, *
§c
, *
íd
;

105 
ngx_°r_t
 *
¨g
;

106 
ngx_öt_t
 
rc
;

107 
ngx_uöt_t
 
èg
, 
i
;

108 
ngx_c⁄√˘i⁄_t
 *
c
;

109 
ngx_maû_£ssi⁄_t
 *
s
;

111 
c
 = 
ªv
->
d©a
;

112 
s
 = 
c
->
d©a
;

114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth state");

116 i‡(
ªv
->
timedout
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

118 
c
->
timedout
 = 1;

119 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

123 i‡(
s
->
out
.
Àn
) {

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imap send handler busy");

125 
s
->
blocked
 = 1;

129 
s
->
blocked
 = 0;

131 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

133 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

137 
èg
 = 1;

138 
s
->
ãxt
.
Àn
 = 0;

139 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_ok
);

141 i‡(
rc
 =
NGX_OK
) {

143 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth command: %i",

144 
s
->
comm™d
);

146 i‡(
s
->
back¶ash
) {

148 
¨g
 = 
s
->
¨gs
.
ñts
;

150 
i
 = 0; i < 
s
->
¨gs
.
√…s
; i++) {

151 
d°
 = 
¨g
[
i
].
d©a
;

152 
íd
 = 
d°
 + 
¨g
[
i
].
Àn
;

154 
§c
 = 
d°
; sr¯< 
íd
; dst++) {

155 *
d°
 = *
§c
;

156 i‡(*
§c
++ == '\\') {

157 *
d°
 = *
§c
++;

161 
¨g
[
i
].
Àn
 = 
d°
 -árg[i].
d©a
;

164 
s
->
back¶ash
 = 0;

167 
s
->
maû_°©e
) {

169 
ngx_im≠_°¨t
:

171 
s
->
comm™d
) {

173 
NGX_IMAP_LOGIN
:

174 
rc
 = 
	`ngx_maû_im≠_logö
(
s
, 
c
);

177 
NGX_IMAP_AUTHENTICATE
:

178 
rc
 = 
	`ngx_maû_im≠_authítiˇã
(
s
, 
c
);

179 
èg
 = (
rc
 !
NGX_OK
);

182 
NGX_IMAP_CAPABILITY
:

183 
rc
 = 
	`ngx_maû_im≠_ˇ∑bûôy
(
s
, 
c
);

186 
NGX_IMAP_LOGOUT
:

187 
s
->
quô
 = 1;

188 
	`ngx_°r_£t
(&
s
->
ãxt
, 
im≠_bye
);

191 
NGX_IMAP_NOOP
:

194 
NGX_IMAP_STARTTLS
:

195 
rc
 = 
	`ngx_maû_im≠_°¨âls
(
s
, 
c
);

199 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

205 
ngx_im≠_auth_logö_u£∫ame
:

206 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

208 
èg
 = 0;

209 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

210 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

214 
ngx_im≠_auth_logö_∑ssw‹d
:

215 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

218 
ngx_im≠_auth_∂aö
:

219 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

222 
ngx_im≠_auth_¸am_md5
:

223 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

227 } i‡(
rc
 =
NGX_IMAP_NEXT
) {

228 
èg
 = 0;

229 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_√xt
);

232 
rc
) {

234 
NGX_DONE
:

235 
	`ngx_maû_auth
(
s
, 
c
);

238 
NGX_ERROR
:

239 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

242 
NGX_MAIL_PARSE_INVALID_COMMAND
:

243 
s
->
°©e
 = 0;

244 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_övÆid_comm™d
);

245 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

249 i‡(
èg
) {

250 i‡(
s
->
èg
.
Àn
 == 0) {

251 
	`ngx_°r_£t
(&
s
->
èg
, 
im≠_°¨
);

254 i‡(
s
->
ègged_löe
.
Àn
 < s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len) {

255 
s
->
ègged_löe
.
Àn
 = s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len;

256 
s
->
ègged_löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->ègged_löe.
Àn
);

257 i‡(
s
->
ègged_löe
.
d©a
 =
NULL
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

263 
p
 = 
s
->
ègged_löe
.
d©a
;

265 i‡(
s
->
ãxt
.
Àn
) {

266 
p
 = 
	`ngx_˝ymem
’, 
s
->
ãxt
.
d©a
, s->ãxt.
Àn
);

269 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

270 
	`ngx_mem˝y
(
p
, 
s
->
out
.
d©a
, s->out.
Àn
);

272 
s
->
out
.
Àn
 = s->
ãxt
.À¿+ s->
èg
.len + s->out.len;

273 
s
->
out
.
d©a
 = s->
ègged_löe
.data;

276 i‡(
rc
 !
NGX_IMAP_NEXT
) {

277 
s
->
¨gs
.
√…s
 = 0;

279 i‡(
s
->
°©e
) {

281 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
 + s->
èg
.
Àn
;

282 
s
->
buf„r
->
pos
 = s->
¨g_°¨t
;

283 
s
->
buf„r
->
œ°
 = s->
¨g_°¨t
;

286 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

287 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

288 
s
->
èg
.
Àn
 = 0;

292 
	`ngx_maû_£nd
(
c
->
wrôe
);

293 
	}
}

296 
ngx_öt_t


297 
	$ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

299 
ngx_°r_t
 *
¨g
;

301 #i‡(
NGX_MAIL_SSL
)

302 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

303  
NGX_MAIL_PARSE_INVALID_COMMAND
;

307 
¨g
 = 
s
->
¨gs
.
ñts
;

309 i‡(
s
->
¨gs
.
√…s
 !2 || 
¨g
[0].
Àn
 == 0) {

310  
NGX_MAIL_PARSE_INVALID_COMMAND
;

313 
s
->
logö
.
Àn
 = 
¨g
[0].len;

314 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

315 i‡(
s
->
logö
.
d©a
 =
NULL
) {

316  
NGX_ERROR
;

319 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

321 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

332 &
s
->
logö
, &s->
∑sswd
);

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

335 "im≠Üogö:\"%V\"", &
s
->
logö
);

338  
NGX_DONE
;

339 
	}
}

342 
ngx_öt_t


343 
	$ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

345 
ngx_öt_t
 
rc
;

346 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

347 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

349 #i‡(
NGX_MAIL_SSL
)

350 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

351  
NGX_MAIL_PARSE_INVALID_COMMAND
;

355 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

357 
rc
) {

359 
NGX_MAIL_AUTH_LOGIN
:

361 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_u£∫ame
);

362 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_u£∫ame
;

364  
NGX_OK
;

366 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

368 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

369 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

371  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

373 
NGX_MAIL_AUTH_PLAIN
:

375 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∂aö_√xt
);

376 
s
->
maû_°©e
 = 
ngx_im≠_auth_∂aö
;

378  
NGX_OK
;

380 
NGX_MAIL_AUTH_CRAM_MD5
:

382 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

384 i‡(!(
iscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

385  
NGX_MAIL_PARSE_INVALID_COMMAND
;

388 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

389 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

391 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

392  
NGX_ERROR
;

396 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

397 
s
->
maû_°©e
 = 
ngx_im≠_auth_¸am_md5
;

398  
NGX_OK
;

401  
NGX_ERROR
;

404  
rc
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

411 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

413 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

415 #i‡(
NGX_MAIL_SSL
)

417 i‡(
c
->
s¶
 =
NULL
) {

418 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

420 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

422 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

423 
s
->
ãxt
 = 
iscf
->
°¨âls_ˇ∑bûôy
;

424  
NGX_OK
;

427 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

428 
s
->
ãxt
 = 
iscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

429  
NGX_OK
;

434 
s
->
ãxt
 = 
iscf
->
ˇ∑bûôy
;

436  
NGX_OK
;

437 
	}
}

440 
ngx_öt_t


441 
	$ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

443 #i‡(
NGX_MAIL_SSL
)

444 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

446 i‡(
c
->
s¶
 =
NULL
) {

447 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

448 i‡(
s¶cf
->
°¨âls
) {

449 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

450  
NGX_OK
;

456  
NGX_MAIL_PARSE_INVALID_COMMAND
;

457 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_imap_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 *
ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_im≠_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("IMAP4"),

22 
ngx_°rög
("IMAP4rev1"),

23 
ngx_°rög
("UIDPLUS"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_im≠_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_im≠_auth_mëhods_«mes
[] = {

37 
ngx_°rög
("AUTH=PLAIN"),

38 
ngx_°rög
("AUTH=LOGIN"),

39 
ngx_nuŒ_°rög
,

40 
ngx_°rög
("AUTH=CRAM-MD5"),

41 
ngx_nuŒ_°rög


45 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_im≠_¥Ÿocﬁ
 = {

46 
ngx_°rög
("imap"),

48 
NGX_MAIL_IMAP_PROTOCOL
,

50 
ngx_maû_im≠_öô_£ssi⁄
,

51 
ngx_maû_im≠_öô_¥Ÿocﬁ
,

52 
ngx_maû_im≠_∑r£_comm™d
,

53 
ngx_maû_im≠_auth_°©e
,

55 
ngx_°rög
("* BAD i¡î«»£rvîÉº‹" 
CRLF
)

59 
ngx_comm™d_t
 
	gngx_maû_im≠_comm™ds
[] = {

61 { 
ngx_°rög
("imap_client_buffer"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_size_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

66 
NULL
 },

68 { 
ngx_°rög
("imap_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("imap_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_im≠_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_im≠_moduÀ_˘x
 = {

87 &
ngx_maû_im≠_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_im≠_¸óã_§v_c⁄f
,

93 
ngx_maû_im≠_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_im≠_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_im≠_moduÀ_˘x
,

100 
ngx_maû_im≠_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

118 
iscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_im≠_§v_c⁄f_t
));

119 i‡(
iscf
 =
NULL
) {

120  
NULL
;

123 
iscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

125 i‡(
	`ngx_¨øy_öô
(&
iscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

126 !
NGX_OK
)

128  
NULL
;

131  
iscf
;

132 
	}
}

136 
	$ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

138 
ngx_maû_im≠_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

139 
ngx_maû_im≠_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

141 
u_ch¨
 *
p
, *
auth
;

142 
size_t
 
size
;

143 
ngx_°r_t
 *
c
, *
d
;

144 
ngx_uöt_t
 
i
, 
m
;

146 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

147 
¥ev
->
˛õ¡_buf„r_size
,

148 (
size_t
Ë
ngx_∑gesize
);

150 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

151 
¥ev
->
auth_mëhods
,

152 (
NGX_CONF_BITMASK_SET


153 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

156 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

157 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

160 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

162 
d
 = 
ngx_maû_im≠_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

163 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

164 i‡(
c
 =
NULL
) {

165  
NGX_CONF_ERROR
;

168 *
c
 = *
d
;

172 
size
 = ("* CAPABILITY" 
CRLF
) - 1;

174 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

175 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

176 
size
 +1 + 
c
[
i
].
Àn
;

179 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

180 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

181 
m
 <<1, 
i
++)

183 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

184 
size
 +1 + 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
;

188 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

189 i‡(
p
 =
NULL
) {

190  
NGX_CONF_ERROR
;

193 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

194 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

196 
p
 = 
	`ngx_˝ymem
(p, "* CAPABILITY", ("* CAPABILITY") - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 *
p
++ = ' ';

200 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

203 
auth
 = 
p
;

205 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

206 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

207 
m
 <<1, 
i
++)

209 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

210 *
p
++ = ' ';

211 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
d©a
,

212 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
);

216 *
p
++ = 
CR
; *∞
LF
;

219 
size
 += (" STARTTLS") - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

229 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

230 
c⁄f
->
ˇ∑bûôy
.
Àn
 - ((
CRLF
) - 1));

231 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS", (" STARTTLS") - 1);

232 *
p
++ = 
CR
; *∞
LF
;

235 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
Ë+ (
CRLF
) - 1

238 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

239 i‡(
p
 =
NULL
) {

240  
NGX_CONF_ERROR
;

243 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

244 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

246 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

247 
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
);

248 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS LOGINDISABLED",

250 *
p
++ = 
CR
; *∞
LF
;

252  
NGX_CONF_OK
;

253 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_imap_module.h

8 #i‚de‡
_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
size_t
 
	m˛õ¡_buf„r_size
;

20 
ngx_°r_t
 
	mˇ∑bûôy
;

21 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

22 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

24 
ngx_uöt_t
 
	mauth_mëhods
;

26 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

27 } 
	tngx_maû_im≠_§v_c⁄f_t
;

30 
ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

32 
ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
);

33 
ngx_öt_t
 
ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

36 
ngx_moduÀ_t
 
ngx_maû_im≠_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

13 
	~<ngx_maû_im≠_moduÀ.h
>

14 
	~<ngx_maû_smç_moduÀ.h
>

17 
ngx_öt_t


18 
	$ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

20 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

21 
ngx_°r_t
 *
¨g
;

23 
sw_°¨t
 = 0,

24 
sw_•a˚s_bef‹e_¨gumít
,

25 
sw_¨gumít
,

26 
sw_Æmo°_d⁄e


27 } 
°©e
;

29 
°©e
 = 
s
->state;

31 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

32 
ch
 = *
p
;

34 
°©e
) {

37 
sw_°¨t
:

38 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

39 
c
 = 
s
->
buf„r
->
°¨t
;

41 i‡(
p
 - 
c
 == 4) {

43 
c0
 = 
	`ngx_touµî
(
c
[0]);

44 
c1
 = 
	`ngx_touµî
(
c
[1]);

45 
c2
 = 
	`ngx_touµî
(
c
[2]);

46 
c3
 = 
	`ngx_touµî
(
c
[3]);

48 i‡(
c0
 ='U' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'R')

50 
s
->
comm™d
 = 
NGX_POP3_USER
;

52 } i‡(
c0
 ='P' && 
c1
 ='A' && 
c2
 ='S' && 
c3
 == 'S')

54 
s
->
comm™d
 = 
NGX_POP3_PASS
;

56 } i‡(
c0
 ='A' && 
c1
 ='P' && 
c2
 ='O' && 
c3
 == 'P')

58 
s
->
comm™d
 = 
NGX_POP3_APOP
;

60 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

62 
s
->
comm™d
 = 
NGX_POP3_QUIT
;

64 } i‡(
c0
 ='C' && 
c1
 ='A' && 
c2
 ='P' && 
c3
 == 'A')

66 
s
->
comm™d
 = 
NGX_POP3_CAPA
;

68 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

70 
s
->
comm™d
 = 
NGX_POP3_AUTH
;

72 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

74 
s
->
comm™d
 = 
NGX_POP3_NOOP
;

75 #i‡(
NGX_MAIL_SSL
)

76 } i‡(
c0
 ='S' && 
c1
 ='T' && 
c2
 ='L' && 
c3
 == 'S')

78 
s
->
comm™d
 = 
NGX_POP3_STLS
;

81 
övÆid
;

85 
övÆid
;

88 
ch
) {

90 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

92 
CR
:

93 
°©e
 = 
sw_Æmo°_d⁄e
;

95 
LF
:

96 
d⁄e
;

101 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

102 
övÆid
;

107 
sw_•a˚s_bef‹e_¨gumít
:

108 
ch
) {

111 
CR
:

112 
°©e
 = 
sw_Æmo°_d⁄e
;

113 
s
->
¨g_íd
 = 
p
;

115 
LF
:

116 
s
->
¨g_íd
 = 
p
;

117 
d⁄e
;

119 i‡(
s
->
¨gs
.
√…s
 <= 2) {

120 
°©e
 = 
sw_¨gumít
;

121 
s
->
¨g_°¨t
 = 
p
;

124 
övÆid
;

128 
sw_¨gumít
:

129 
ch
) {

138 i‡(
s
->
comm™d
 =
NGX_POP3_USER


139 || 
s
->
comm™d
 =
NGX_POP3_PASS
)

146 
CR
:

147 
LF
:

148 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

149 i‡(
¨g
 =
NULL
) {

150  
NGX_ERROR
;

152 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

153 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

154 
s
->
¨g_°¨t
 = 
NULL
;

156 
ch
) {

158 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

160 
CR
:

161 
°©e
 = 
sw_Æmo°_d⁄e
;

163 
LF
:

164 
d⁄e
;

173 
sw_Æmo°_d⁄e
:

174 
ch
) {

175 
LF
:

176 
d⁄e
;

178 
övÆid
;

183 
s
->
buf„r
->
pos
 = 
p
;

184 
s
->
°©e
 = state;

186  
NGX_AGAIN
;

188 
d⁄e
:

190 
s
->
buf„r
->
pos
 = 
p
 + 1;

192 i‡(
s
->
¨g_°¨t
) {

193 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

194 i‡(
¨g
 =
NULL
) {

195  
NGX_ERROR
;

197 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

198 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

199 
s
->
¨g_°¨t
 = 
NULL
;

202 
s
->
°©e
 = (s->
comm™d
 !
NGX_POP3_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

204  
NGX_OK
;

206 
övÆid
:

208 
s
->
°©e
 = 
sw_°¨t
;

209 
s
->
¨g_°¨t
 = 
NULL
;

211  
NGX_MAIL_PARSE_INVALID_COMMAND
;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

218 
u_ch¨
 
ch
, *
p
, *
c
;

219 
ngx_°r_t
 *
¨g
;

221 
sw_°¨t
 = 0,

222 
sw_•a˚s_bef‹e_comm™d
,

223 
sw_comm™d
,

224 
sw_•a˚s_bef‹e_¨gumít
,

225 
sw_¨gumít
,

226 
sw_back¶ash
,

227 
sw_lôîÆ
,

228 
sw_no_sync_lôîÆ_¨gumít
,

229 
sw_°¨t_lôîÆ_¨gumít
,

230 
sw_lôîÆ_¨gumít
,

231 
sw_íd_lôîÆ_¨gumít
,

232 
sw_Æmo°_d⁄e


233 } 
°©e
;

235 
°©e
 = 
s
->state;

237 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

238 
ch
 = *
p
;

240 
°©e
) {

243 
sw_°¨t
:

244 
ch
) {

246 
s
->
èg
.
Àn
 = 
p
 - s->
buf„r
->
°¨t
 + 1;

247 
s
->
èg
.
d©a
 = s->
buf„r
->
°¨t
;

248 
°©e
 = 
sw_•a˚s_bef‹e_comm™d
;

250 
CR
:

251 
s
->
°©e
 = 
sw_°¨t
;

252  
NGX_MAIL_PARSE_INVALID_COMMAND
;

253 
LF
:

254 
s
->
°©e
 = 
sw_°¨t
;

255  
NGX_MAIL_PARSE_INVALID_COMMAND
;

259 
sw_•a˚s_bef‹e_comm™d
:

260 
ch
) {

263 
CR
:

264 
s
->
°©e
 = 
sw_°¨t
;

265  
NGX_MAIL_PARSE_INVALID_COMMAND
;

266 
LF
:

267 
s
->
°©e
 = 
sw_°¨t
;

268  
NGX_MAIL_PARSE_INVALID_COMMAND
;

270 
s
->
cmd_°¨t
 = 
p
;

271 
°©e
 = 
sw_comm™d
;

276 
sw_comm™d
:

277 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

279 
c
 = 
s
->
cmd_°¨t
;

281 
p
 - 
c
) {

284 i‡((
c
[0] == 'N' || c[0] == 'n')

285 && (
c
[1] == 'O'|| c[1] == 'o')

286 && (
c
[2] == 'O'|| c[2] == 'o')

287 && (
c
[3] == 'P'|| c[3] == 'p'))

289 
s
->
comm™d
 = 
NGX_IMAP_NOOP
;

292 
övÆid
;

297 i‡((
c
[0] == 'L'|| c[0] == 'l')

298 && (
c
[1] == 'O'|| c[1] == 'o')

299 && (
c
[2] == 'G'|| c[2] == 'g')

300 && (
c
[3] == 'I'|| c[3] == 'i')

301 && (
c
[4] == 'N'|| c[4] == 'n'))

303 
s
->
comm™d
 = 
NGX_IMAP_LOGIN
;

306 
övÆid
;

311 i‡((
c
[0] == 'L'|| c[0] == 'l')

312 && (
c
[1] == 'O'|| c[1] == 'o')

313 && (
c
[2] == 'G'|| c[2] == 'g')

314 && (
c
[3] == 'O'|| c[3] == 'o')

315 && (
c
[4] == 'U'|| c[4] == 'u')

316 && (
c
[5] == 'T'|| c[5] == 't'))

318 
s
->
comm™d
 = 
NGX_IMAP_LOGOUT
;

321 
övÆid
;

325 #i‡(
NGX_MAIL_SSL
)

327 i‡((
c
[0] == 'S'|| c[0] == 's')

328 && (
c
[1] == 'T'|| c[1] == 't')

329 && (
c
[2] == 'A'|| c[2] == 'a')

330 && (
c
[3] == 'R'|| c[3] == 'r')

331 && (
c
[4] == 'T'|| c[4] == 't')

332 && (
c
[5] == 'T'|| c[5] == 't')

333 && (
c
[6] == 'L'|| c[6] == 'l')

334 && (
c
[7] == 'S'|| c[7] == 's'))

336 
s
->
comm™d
 = 
NGX_IMAP_STARTTLS
;

339 
övÆid
;

345 i‡((
c
[0] == 'C'|| c[0] == 'c')

346 && (
c
[1] == 'A'|| c[1] == 'a')

347 && (
c
[2] == 'P'|| c[2] == 'p')

348 && (
c
[3] == 'A'|| c[3] == 'a')

349 && (
c
[4] == 'B'|| c[4] == 'b')

350 && (
c
[5] == 'I'|| c[5] == 'i')

351 && (
c
[6] == 'L'|| c[6] == 'l')

352 && (
c
[7] == 'I'|| c[7] == 'i')

353 && (
c
[8] == 'T'|| c[8] == 't')

354 && (
c
[9] == 'Y'|| c[9] == 'y'))

356 
s
->
comm™d
 = 
NGX_IMAP_CAPABILITY
;

359 
övÆid
;

364 i‡((
c
[0] == 'A'|| c[0] == 'a')

365 && (
c
[1] == 'U'|| c[1] == 'u')

366 && (
c
[2] == 'T'|| c[2] == 't')

367 && (
c
[3] == 'H'|| c[3] == 'h')

368 && (
c
[4] == 'E'|| c[4] == 'e')

369 && (
c
[5] == 'N'|| c[5] == 'n')

370 && (
c
[6] == 'T'|| c[6] == 't')

371 && (
c
[7] == 'I'|| c[7] == 'i')

372 && (
c
[8] == 'C'|| c[8] == 'c')

373 && (
c
[9] == 'A'|| c[9] == 'a')

374 && (
c
[10] == 'T'|| c[10] == 't')

375 && (
c
[11] == 'E'|| c[11] == 'e'))

377 
s
->
comm™d
 = 
NGX_IMAP_AUTHENTICATE
;

380 
övÆid
;

385 
övÆid
;

388 
ch
) {

390 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

392 
CR
:

393 
°©e
 = 
sw_Æmo°_d⁄e
;

395 
LF
:

396 
d⁄e
;

401 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

402 
övÆid
;

407 
sw_•a˚s_bef‹e_¨gumít
:

408 
ch
) {

411 
CR
:

412 
°©e
 = 
sw_Æmo°_d⁄e
;

413 
s
->
¨g_íd
 = 
p
;

415 
LF
:

416 
s
->
¨g_íd
 = 
p
;

417 
d⁄e
;

419 i‡(
s
->
¨gs
.
√…s
 <= 2) {

420 
s
->
quŸed
 = 1;

421 
s
->
¨g_°¨t
 = 
p
 + 1;

422 
°©e
 = 
sw_¨gumít
;

425 
övÆid
;

427 i‡(
s
->
¨gs
.
√…s
 <= 2) {

428 
°©e
 = 
sw_lôîÆ
;

431 
övÆid
;

433 i‡(
s
->
¨gs
.
√…s
 <= 2) {

434 
s
->
¨g_°¨t
 = 
p
;

435 
°©e
 = 
sw_¨gumít
;

438 
övÆid
;

442 
sw_¨gumít
:

443 i‡(
ch
 =' ' && 
s
->
quŸed
) {

447 
ch
) {

449 i‡(!
s
->
quŸed
) {

452 
s
->
quŸed
 = 0;

455 
CR
:

456 
LF
:

457 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

458 i‡(
¨g
 =
NULL
) {

459  
NGX_ERROR
;

461 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

462 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

463 
s
->
¨g_°¨t
 = 
NULL
;

465 
ch
) {

468 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

470 
CR
:

471 
°©e
 = 
sw_Æmo°_d⁄e
;

473 
LF
:

474 
d⁄e
;

478 i‡(
s
->
quŸed
) {

479 
s
->
back¶ash
 = 1;

480 
°©e
 = 
sw_back¶ash
;

486 
sw_back¶ash
:

487 
ch
) {

488 
CR
:

489 
LF
:

490 
övÆid
;

492 
°©e
 = 
sw_¨gumít
;

496 
sw_lôîÆ
:

497 i‡(
ch
 >= '0' && ch <= '9') {

498 
s
->
lôîÆ_Àn
 = s->lôîÆ_À¿* 10 + (
ch
 - '0');

501 i‡(
ch
 == '}') {

502 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

505 i‡(
ch
 == '+') {

506 
°©e
 = 
sw_no_sync_lôîÆ_¨gumít
;

509 
övÆid
;

511 
sw_no_sync_lôîÆ_¨gumít
:

512 i‡(
ch
 == '}') {

513 
s
->
no_sync_lôîÆ
 = 1;

514 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

517 
övÆid
;

519 
sw_°¨t_lôîÆ_¨gumít
:

520 
ch
) {

521 
CR
:

523 
LF
:

524 
s
->
buf„r
->
pos
 = 
p
 + 1;

525 
s
->
¨g_°¨t
 = 
p
 + 1;

526 i‡(
s
->
no_sync_lôîÆ
 == 0) {

527 
s
->
°©e
 = 
sw_lôîÆ_¨gumít
;

528  
NGX_IMAP_NEXT
;

530 
°©e
 = 
sw_lôîÆ_¨gumít
;

531 
s
->
no_sync_lôîÆ
 = 0;

534 
övÆid
;

538 
sw_lôîÆ_¨gumít
:

539 i‡(
s
->
lôîÆ_Àn
 && --s->literal_len) {

543 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

544 i‡(
¨g
 =
NULL
) {

545  
NGX_ERROR
;

547 
¨g
->
Àn
 = 
p
 + 1 - 
s
->
¨g_°¨t
;

548 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

549 
s
->
¨g_°¨t
 = 
NULL
;

550 
°©e
 = 
sw_íd_lôîÆ_¨gumít
;

554 
sw_íd_lôîÆ_¨gumít
:

555 
ch
) {

557 i‡(
s
->
¨gs
.
√…s
 <= 2) {

558 
°©e
 = 
sw_lôîÆ
;

561 
övÆid
;

562 
CR
:

563 
°©e
 = 
sw_Æmo°_d⁄e
;

565 
LF
:

566 
d⁄e
;

568 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

573 
sw_Æmo°_d⁄e
:

574 
ch
) {

575 
LF
:

576 
d⁄e
;

578 
övÆid
;

583 
s
->
buf„r
->
pos
 = 
p
;

584 
s
->
°©e
 = state;

586  
NGX_AGAIN
;

588 
d⁄e
:

590 
s
->
buf„r
->
pos
 = 
p
 + 1;

592 i‡(
s
->
¨g_°¨t
) {

593 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

594 i‡(
¨g
 =
NULL
) {

595  
NGX_ERROR
;

597 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

598 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

600 
s
->
¨g_°¨t
 = 
NULL
;

601 
s
->
cmd_°¨t
 = 
NULL
;

602 
s
->
quŸed
 = 0;

603 
s
->
no_sync_lôîÆ
 = 0;

604 
s
->
lôîÆ_Àn
 = 0;

607 
s
->
°©e
 = (s->
comm™d
 !
NGX_IMAP_AUTHENTICATE
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

609  
NGX_OK
;

611 
övÆid
:

613 
s
->
°©e
 = 
sw_°¨t
;

614 
s
->
quŸed
 = 0;

615 
s
->
no_sync_lôîÆ
 = 0;

616 
s
->
lôîÆ_Àn
 = 0;

618  
NGX_MAIL_PARSE_INVALID_COMMAND
;

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

625 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

626 
ngx_°r_t
 *
¨g
;

628 
sw_°¨t
 = 0,

629 
sw_comm™d
,

630 
sw_övÆid
,

631 
sw_•a˚s_bef‹e_¨gumít
,

632 
sw_¨gumít
,

633 
sw_Æmo°_d⁄e


634 } 
°©e
;

636 
°©e
 = 
s
->state;

638 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

639 
ch
 = *
p
;

641 
°©e
) {

644 
sw_°¨t
:

645 
s
->
cmd_°¨t
 = 
p
;

646 
°©e
 = 
sw_comm™d
;

650 
sw_comm™d
:

651 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

652 
c
 = 
s
->
cmd_°¨t
;

654 i‡(
p
 - 
c
 == 4) {

656 
c0
 = 
	`ngx_touµî
(
c
[0]);

657 
c1
 = 
	`ngx_touµî
(
c
[1]);

658 
c2
 = 
	`ngx_touµî
(
c
[2]);

659 
c3
 = 
	`ngx_touµî
(
c
[3]);

661 i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'O')

663 
s
->
comm™d
 = 
NGX_SMTP_HELO
;

665 } i‡(
c0
 ='E' && 
c1
 ='H' && 
c2
 ='L' && 
c3
 == 'O')

667 
s
->
comm™d
 = 
NGX_SMTP_EHLO
;

669 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

671 
s
->
comm™d
 = 
NGX_SMTP_QUIT
;

673 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

675 
s
->
comm™d
 = 
NGX_SMTP_AUTH
;

677 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

679 
s
->
comm™d
 = 
NGX_SMTP_NOOP
;

681 } i‡(
c0
 ='M' && 
c1
 ='A' && 
c2
 ='I' && 
c3
 == 'L')

683 
s
->
comm™d
 = 
NGX_SMTP_MAIL
;

685 } i‡(
c0
 ='R' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'T')

687 
s
->
comm™d
 = 
NGX_SMTP_RSET
;

689 } i‡(
c0
 ='R' && 
c1
 ='C' && 
c2
 ='P' && 
c3
 == 'T')

691 
s
->
comm™d
 = 
NGX_SMTP_RCPT
;

693 } i‡(
c0
 ='V' && 
c1
 ='R' && 
c2
 ='F' && 
c3
 == 'Y')

695 
s
->
comm™d
 = 
NGX_SMTP_VRFY
;

697 } i‡(
c0
 ='E' && 
c1
 ='X' && 
c2
 ='P' && 
c3
 == 'N')

699 
s
->
comm™d
 = 
NGX_SMTP_EXPN
;

701 } i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'P')

703 
s
->
comm™d
 = 
NGX_SMTP_HELP
;

706 
övÆid
;

708 #i‡(
NGX_MAIL_SSL
)

709 } i‡(
p
 - 
c
 == 8) {

711 i‡((
c
[0] == 'S'|| c[0] == 's')

712 && (
c
[1] == 'T'|| c[1] == 't')

713 && (
c
[2] == 'A'|| c[2] == 'a')

714 && (
c
[3] == 'R'|| c[3] == 'r')

715 && (
c
[4] == 'T'|| c[4] == 't')

716 && (
c
[5] == 'T'|| c[5] == 't')

717 && (
c
[6] == 'L'|| c[6] == 'l')

718 && (
c
[7] == 'S'|| c[7] == 's'))

720 
s
->
comm™d
 = 
NGX_SMTP_STARTTLS
;

723 
övÆid
;

727 
övÆid
;

730 
s
->
cmd
.
d©a
 = s->
cmd_°¨t
;

731 
s
->
cmd
.
Àn
 = 
p
 - s->
cmd_°¨t
;

733 
ch
) {

735 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

737 
CR
:

738 
°©e
 = 
sw_Æmo°_d⁄e
;

740 
LF
:

741 
d⁄e
;

746 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

747 
övÆid
;

752 
sw_övÆid
:

753 
övÆid
;

755 
sw_•a˚s_bef‹e_¨gumít
:

756 
ch
) {

759 
CR
:

760 
°©e
 = 
sw_Æmo°_d⁄e
;

761 
s
->
¨g_íd
 = 
p
;

763 
LF
:

764 
s
->
¨g_íd
 = 
p
;

765 
d⁄e
;

767 i‡(
s
->
¨gs
.
√…s
 <= 10) {

768 
°©e
 = 
sw_¨gumít
;

769 
s
->
¨g_°¨t
 = 
p
;

772 
övÆid
;

776 
sw_¨gumít
:

777 
ch
) {

779 
CR
:

780 
LF
:

781 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

782 i‡(
¨g
 =
NULL
) {

783  
NGX_ERROR
;

785 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

786 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

787 
s
->
¨g_°¨t
 = 
NULL
;

789 
ch
) {

791 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

793 
CR
:

794 
°©e
 = 
sw_Æmo°_d⁄e
;

796 
LF
:

797 
d⁄e
;

806 
sw_Æmo°_d⁄e
:

807 
ch
) {

808 
LF
:

809 
d⁄e
;

811 
övÆid
;

816 
s
->
buf„r
->
pos
 = 
p
;

817 
s
->
°©e
 = state;

819  
NGX_AGAIN
;

821 
d⁄e
:

823 
s
->
buf„r
->
pos
 = 
p
 + 1;

825 i‡(
s
->
¨g_°¨t
) {

826 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

827 i‡(
¨g
 =
NULL
) {

828  
NGX_ERROR
;

830 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

831 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

832 
s
->
¨g_°¨t
 = 
NULL
;

835 
s
->
°©e
 = (s->
comm™d
 !
NGX_SMTP_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

837  
NGX_OK
;

839 
övÆid
:

841 
s
->
°©e
 = 
sw_övÆid
;

842 
s
->
¨g_°¨t
 = 
NULL
;

846 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

847 i‡(*
p
 =
LF
) {

848 
s
->
°©e
 = 
sw_°¨t
;

849 
p
++;

854 
s
->
buf„r
->
pos
 = 
p
;

856  
NGX_MAIL_PARSE_INVALID_COMMAND
;

857 
	}
}

860 
ngx_öt_t


861 
	$ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

863 
ngx_°r_t
 *
¨g
;

865 #i‡(
NGX_MAIL_SSL
)

866 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

867  
NGX_MAIL_PARSE_INVALID_COMMAND
;

871 i‡(
s
->
¨gs
.
√…s
 == 0) {

872  
NGX_MAIL_PARSE_INVALID_COMMAND
;

875 
¨g
 = 
s
->
¨gs
.
ñts
;

877 i‡(
¨g
[0].
Àn
 == 5) {

879 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "LOGIN", 5) == 0) {

881 i‡(
s
->
¨gs
.
√…s
 == 1) {

882  
NGX_MAIL_AUTH_LOGIN
;

885 i‡(
s
->
¨gs
.
√…s
 == 2) {

886  
NGX_MAIL_AUTH_LOGIN_USERNAME
;

889  
NGX_MAIL_PARSE_INVALID_COMMAND
;

892 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "PLAIN", 5) == 0) {

894 i‡(
s
->
¨gs
.
√…s
 == 1) {

895  
NGX_MAIL_AUTH_PLAIN
;

898 i‡(
s
->
¨gs
.
√…s
 == 2) {

899  
	`ngx_maû_auth_∂aö
(
s
, 
c
, 1);

903  
NGX_MAIL_PARSE_INVALID_COMMAND
;

906 i‡(
¨g
[0].
Àn
 == 8) {

908 i‡(
s
->
¨gs
.
√…s
 != 1) {

909  
NGX_MAIL_PARSE_INVALID_COMMAND
;

912 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "CRAM-MD5", 8) == 0) {

913  
NGX_MAIL_AUTH_CRAM_MD5
;

917  
NGX_MAIL_PARSE_INVALID_COMMAND
;

918 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_pop3_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

16 
ngx_öt_t
 
ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

18 
ngx_öt_t
 
°ls
);

19 
ngx_öt_t
 
ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

20 
ngx_öt_t
 
ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
u_ch¨
 
	gp›3_gªëög
[] = "+OK POP3Ñódy" 
CRLF
;

25 
u_ch¨
 
	gp›3_ok
[] = "+OK" 
CRLF
;

26 
u_ch¨
 
	gp›3_√xt
[] = "+ " 
CRLF
;

27 
u_ch¨
 
	gp›3_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

28 
u_ch¨
 
	gp›3_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

29 
u_ch¨
 
	gp›3_övÆid_comm™d
[] = "-ERR invÆid comm™d" 
CRLF
;

33 
	$ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

35 
u_ch¨
 *
p
;

36 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

37 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

39 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

40 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

42 i‡(
pscf
->
auth_mëhods


43 & (
NGX_MAIL_AUTH_APOP_ENABLED
|
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
))

45 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

46 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

50 
s
->
out
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, (
p›3_gªëög
Ë+ s->
ß…
.
Àn
);

51 i‡(
s
->
out
.
d©a
 =
NULL
) {

52 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

56 
p
 = 
	`ngx_˝ymem
(
s
->
out
.
d©a
, 
p›3_gªëög
, (pop3_greeting) - 3);

57 *
p
++ = ' ';

58 
p
 = 
	`ngx_˝ymem
’, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

60 
s
->
out
.
Àn
 = 
p
 - s->out.
d©a
;

63 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_gªëög
);

66 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_öô_¥Ÿocﬁ
;

68 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

70 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

74 
	`ngx_maû_£nd
(
c
->
wrôe
);

75 
	}
}

79 
	$ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

81 
ngx_c⁄√˘i⁄_t
 *
c
;

82 
ngx_maû_£ssi⁄_t
 *
s
;

84 
c
 = 
ªv
->
d©a
;

86 
c
->
log
->
a˘i⁄
 = "ináuth state";

88 i‡(
ªv
->
timedout
) {

89 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

90 
c
->
timedout
 = 1;

91 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

95 
s
 = 
c
->
d©a
;

97 i‡(
s
->
buf„r
 =
NULL
) {

98 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

99 =
NGX_ERROR
)

101 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

105 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 128);

106 i‡(
s
->
buf„r
 =
NULL
) {

107 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

112 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

113 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_auth_°©e
;

115 
	`ngx_maû_p›3_auth_°©e
(
ªv
);

116 
	}
}

120 
	$ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
)

122 
ngx_öt_t
 
rc
;

123 
ngx_c⁄√˘i⁄_t
 *
c
;

124 
ngx_maû_£ssi⁄_t
 *
s
;

126 
c
 = 
ªv
->
d©a
;

127 
s
 = 
c
->
d©a
;

129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3áuth state");

131 i‡(
ªv
->
timedout
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

133 
c
->
timedout
 = 1;

134 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

138 i‡(
s
->
out
.
Àn
) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3 send handler busy");

140 
s
->
blocked
 = 1;

144 
s
->
blocked
 = 0;

146 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

148 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

152 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_ok
);

154 i‡(
rc
 =
NGX_OK
) {

155 
s
->
maû_°©e
) {

157 
ngx_p›3_°¨t
:

159 
s
->
comm™d
) {

161 
NGX_POP3_USER
:

162 
rc
 = 
	`ngx_maû_p›3_u£r
(
s
, 
c
);

165 
NGX_POP3_CAPA
:

166 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 1);

169 
NGX_POP3_APOP
:

170 
rc
 = 
	`ngx_maû_p›3_≠›
(
s
, 
c
);

173 
NGX_POP3_AUTH
:

174 
rc
 = 
	`ngx_maû_p›3_auth
(
s
, 
c
);

177 
NGX_POP3_QUIT
:

178 
s
->
quô
 = 1;

181 
NGX_POP3_NOOP
:

184 
NGX_POP3_STLS
:

185 
rc
 = 
	`ngx_maû_p›3_°ls
(
s
, 
c
);

189 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

195 
ngx_p›3_u£r
:

197 
s
->
comm™d
) {

199 
NGX_POP3_PASS
:

200 
rc
 = 
	`ngx_maû_p›3_∑ss
(
s
, 
c
);

203 
NGX_POP3_CAPA
:

204 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 0);

207 
NGX_POP3_QUIT
:

208 
s
->
quô
 = 1;

211 
NGX_POP3_NOOP
:

215 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

222 
ngx_p›3_∑sswd
:

225 
ngx_p›3_auth_logö_u£∫ame
:

226 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

228 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

229 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

232 
ngx_p›3_auth_logö_∑ssw‹d
:

233 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

236 
ngx_p›3_auth_∂aö
:

237 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

240 
ngx_p›3_auth_¸am_md5
:

241 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

246 
rc
) {

248 
NGX_DONE
:

249 
	`ngx_maû_auth
(
s
, 
c
);

252 
NGX_ERROR
:

253 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

256 
NGX_MAIL_PARSE_INVALID_COMMAND
:

257 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

258 
s
->
°©e
 = 0;

260 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_övÆid_comm™d
);

264 
NGX_OK
:

266 
s
->
¨gs
.
√…s
 = 0;

267 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

268 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

270 i‡(
s
->
°©e
) {

271 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

274 
	`ngx_maû_£nd
(
c
->
wrôe
);

276 
	}
}

278 
ngx_öt_t


279 
	$ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

281 
ngx_°r_t
 *
¨g
;

283 #i‡(
NGX_MAIL_SSL
)

284 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

285  
NGX_MAIL_PARSE_INVALID_COMMAND
;

289 i‡(
s
->
¨gs
.
√…s
 != 1) {

290  
NGX_MAIL_PARSE_INVALID_COMMAND
;

293 
¨g
 = 
s
->
¨gs
.
ñts
;

294 
s
->
logö
.
Àn
 = 
¨g
[0].len;

295 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

296 i‡(
s
->
logö
.
d©a
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

303 "p›3Üogö: \"%V\"", &
s
->
logö
);

305 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

307  
NGX_OK
;

308 
	}
}

311 
ngx_öt_t


312 
	$ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

314 
ngx_°r_t
 *
¨g
;

316 i‡(
s
->
¨gs
.
√…s
 != 1) {

317  
NGX_MAIL_PARSE_INVALID_COMMAND
;

320 
¨g
 = 
s
->
¨gs
.
ñts
;

321 
s
->
∑sswd
.
Àn
 = 
¨g
[0].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[0].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

331 "p›3Öasswd: \"%V\"", &
s
->
∑sswd
);

334  
NGX_DONE
;

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_öt_t
 
°ls
)

341 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

343 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

345 #i‡(
NGX_MAIL_SSL
)

347 i‡(
°ls
 && 
c
->
s¶
 =
NULL
) {

348 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

350 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

352 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

353 
s
->
out
 = 
pscf
->
°¨âls_ˇ∑bûôy
;

354  
NGX_OK
;

357 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

358 
s
->
out
 = 
pscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

359  
NGX_OK
;

365 
s
->
out
 = 
pscf
->
ˇ∑bûôy
;

366  
NGX_OK
;

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

373 #i‡(
NGX_MAIL_SSL
)

374 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

376 i‡(
c
->
s¶
 =
NULL
) {

377 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

378 i‡(
s¶cf
->
°¨âls
) {

379 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

380  
NGX_OK
;

386  
NGX_MAIL_PARSE_INVALID_COMMAND
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

393 
ngx_°r_t
 *
¨g
;

394 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

396 #i‡(
NGX_MAIL_SSL
)

397 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

398  
NGX_MAIL_PARSE_INVALID_COMMAND
;

402 i‡(
s
->
¨gs
.
√…s
 != 2) {

403  
NGX_MAIL_PARSE_INVALID_COMMAND
;

406 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

408 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_APOP_ENABLED
)) {

409  
NGX_MAIL_PARSE_INVALID_COMMAND
;

412 
¨g
 = 
s
->
¨gs
.
ñts
;

414 
s
->
logö
.
Àn
 = 
¨g
[0].len;

415 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

416 i‡(
s
->
logö
.
d©a
 =
NULL
) {

417  
NGX_ERROR
;

420 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

422 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

423 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

424 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

425  
NGX_ERROR
;

428 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

430 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "p›3áp›: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

433 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_APOP
;

435  
NGX_DONE
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

442 
ngx_öt_t
 
rc
;

443 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

445 #i‡(
NGX_MAIL_SSL
)

446 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

447  
NGX_MAIL_PARSE_INVALID_COMMAND
;

451 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

453 i‡(
s
->
¨gs
.
√…s
 == 0) {

454 
s
->
out
 = 
pscf
->
auth_ˇ∑bûôy
;

455 
s
->
°©e
 = 0;

457  
NGX_OK
;

460 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

462 
rc
) {

464 
NGX_MAIL_AUTH_LOGIN
:

466 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_u£∫ame
);

467 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_u£∫ame
;

469  
NGX_OK
;

471 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

473 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

476  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

478 
NGX_MAIL_AUTH_PLAIN
:

480 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_√xt
);

481 
s
->
maû_°©e
 = 
ngx_p›3_auth_∂aö
;

483  
NGX_OK
;

485 
NGX_MAIL_AUTH_CRAM_MD5
:

487 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

488  
NGX_MAIL_PARSE_INVALID_COMMAND
;

491 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

492 
s
->
maû_°©e
 = 
ngx_p›3_auth_¸am_md5
;

493  
NGX_OK
;

496  
NGX_ERROR
;

499  
rc
;

500 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_pop3_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 *
ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_p›3_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("TOP"),

22 
ngx_°rög
("USER"),

23 
ngx_°rög
("UIDL"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_p›3_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("≠›"), 
NGX_MAIL_AUTH_APOP_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_p›3_auth_∂aö_ˇ∑bûôy
 =

37 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


38 "LOGIN" 
CRLF


39 "PLAIN" 
CRLF


40 "." 
CRLF
);

43 
ngx_°r_t
 
	gngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
 =

44 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


45 "LOGIN" 
CRLF


46 "PLAIN" 
CRLF


47 "CRAM-MD5" 
CRLF


48 "." 
CRLF
);

51 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_p›3_¥Ÿocﬁ
 = {

52 
ngx_°rög
("pop3"),

54 
NGX_MAIL_POP3_PROTOCOL
,

56 
ngx_maû_p›3_öô_£ssi⁄
,

57 
ngx_maû_p›3_öô_¥Ÿocﬁ
,

58 
ngx_maû_p›3_∑r£_comm™d
,

59 
ngx_maû_p›3_auth_°©e
,

61 
ngx_°rög
("-ERR i¡î«»£rvîÉº‹" 
CRLF
)

65 
ngx_comm™d_t
 
	gngx_maû_p›3_comm™ds
[] = {

67 { 
ngx_°rög
("pop3_capabilities"),

68 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

69 
ngx_maû_ˇ∑bûôõs
,

70 
NGX_MAIL_SRV_CONF_OFFSET
,

71 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
ˇ∑bûôõs
),

72 
NULL
 },

74 { 
ngx_°rög
("pop3_auth"),

75 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

76 
ngx_c⁄f_£t_bômask_¶Ÿ
,

77 
NGX_MAIL_SRV_CONF_OFFSET
,

78 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
auth_mëhods
),

79 &
ngx_maû_p›3_auth_mëhods
 },

81 
ngx_nuŒ_comm™d


85 
ngx_maû_moduÀ_t
 
	gngx_maû_p›3_moduÀ_˘x
 = {

86 &
ngx_maû_p›3_¥Ÿocﬁ
,

88 
NULL
,

89 
NULL
,

91 
ngx_maû_p›3_¸óã_§v_c⁄f
,

92 
ngx_maû_p›3_mîge_§v_c⁄f


96 
ngx_moduÀ_t
 
	gngx_maû_p›3_moduÀ
 = {

97 
NGX_MODULE_V1
,

98 &
ngx_maû_p›3_moduÀ_˘x
,

99 
ngx_maû_p›3_comm™ds
,

100 
NGX_MAIL_MODULE
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NGX_MODULE_V1_PADDING


113 
	$ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

115 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

117 
pscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_p›3_§v_c⁄f_t
));

118 i‡(
pscf
 =
NULL
) {

119  
NULL
;

122 i‡(
	`ngx_¨øy_öô
(&
pscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

123 !
NGX_OK
)

125  
NULL
;

128  
pscf
;

129 
	}
}

133 
	$ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

135 
ngx_maû_p›3_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

136 
ngx_maû_p›3_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

138 
u_ch¨
 *
p
;

139 
size_t
 
size
, 
°ls_⁄ly_size
;

140 
ngx_°r_t
 *
c
, *
d
;

141 
ngx_uöt_t
 
i
;

143 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

144 
¥ev
->
auth_mëhods
,

145 (
NGX_CONF_BITMASK_SET


146 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

148 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

149 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

152 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

154 
d
 = 
ngx_maû_p›3_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

155 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

156 i‡(
c
 =
NULL
) {

157  
NGX_CONF_ERROR
;

160 *
c
 = *
d
;

164 
size
 = ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1

165 + ("." 
CRLF
) - 1;

167 
°ls_⁄ly_size
 = 
size
 + ("STLS" 
CRLF
) - 1;

169 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

170 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

171 
size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

173 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

177 
°ls_⁄ly_size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

180 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

181 
size
 +("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1;

184 
size
 +("SASL LOGIN PLAIN" 
CRLF
) - 1;

187 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

188 i‡(
p
 =
NULL
) {

189  
NGX_CONF_ERROR
;

192 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

193 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

195 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

196 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

200 *
p
++ = 
CR
; *p++ = 
LF
;

203 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

204 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN CRAM-MD5" 
CRLF
,

205 ("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1);

208 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN" 
CRLF
,

209 ("SASL LOGIN PLAIN" 
CRLF
) - 1);

212 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

215 
size
 +("STLS" 
CRLF
) - 1;

217 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

218 i‡(
p
 =
NULL
) {

219  
NGX_CONF_ERROR
;

222 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

223 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

225 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 - (("." 
CRLF
) - 1));

228 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

229 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

232 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

233 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
;

236 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_∂aö_ˇ∑bûôy
;

240 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
°ls_⁄ly_size
);

241 i‡(
p
 =
NULL
) {

242  
NGX_CONF_ERROR
;

245 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
°ls_⁄ly_size
;

246 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

248 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

249 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

251 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

252 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

256 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

257 *
p
++ = 
CR
; *p++ = 
LF
;

260 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

261 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

263  
NGX_CONF_OK
;

264 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_pop3_module.h

8 #i‚de‡
_NGX_MAIL_POP3_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_POP3_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
ngx_°r_t
 
	mˇ∑bûôy
;

19 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

20 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

21 
ngx_°r_t
 
	mauth_ˇ∑bûôy
;

23 
ngx_uöt_t
 
	mauth_mëhods
;

25 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

26 } 
	tngx_maû_p›3_§v_c⁄f_t
;

29 
ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

30 
ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

31 
ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
);

32 
ngx_öt_t
 
ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

35 
ngx_moduÀ_t
 
ngx_maû_p›3_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	m∑ss_îr‹_mesßge
;

18 
ngx_Êag_t
 
	mx˛õ¡
;

19 
size_t
 
	mbuf„r_size
;

20 
ngx_m£c_t
 
	mtimeout
;

21 } 
	tngx_maû_¥oxy_c⁄f_t
;

24 
ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
);

25 
ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
);

26 
ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
);

27 
ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
);

28 
ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

29 
ngx_öt_t
 
ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
,

30 
ngx_uöt_t
 
°©e
);

31 
ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

33 
ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

34 
ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
);

35 *
ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

40 
ngx_comm™d_t
 
	gngx_maû_¥oxy_comm™ds
[] = {

42 { 
ngx_°rög
("proxy"),

43 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

44 
ngx_c⁄f_£t_Êag_¶Ÿ
,

45 
NGX_MAIL_SRV_CONF_OFFSET
,

46 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
íabÀ
),

47 
NULL
 },

49 { 
ngx_°rög
("proxy_buffer"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

51 
ngx_c⁄f_£t_size_¶Ÿ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
buf„r_size
),

54 
NULL
 },

56 { 
ngx_°rög
("proxy_timeout"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
timeout
),

61 
NULL
 },

63 { 
ngx_°rög
("proxy_pass_error_message"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
∑ss_îr‹_mesßge
),

68 
NULL
 },

70 { 
ngx_°rög
("xclient"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
x˛õ¡
),

75 
NULL
 },

77 
ngx_nuŒ_comm™d


81 
ngx_maû_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ_˘x
 = {

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_maû_¥oxy_¸óã_c⁄f
,

88 
ngx_maû_¥oxy_mîge_c⁄f


92 
ngx_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_maû_¥oxy_moduÀ_˘x
,

95 
ngx_maû_¥oxy_comm™ds
,

96 
NGX_MAIL_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
u_ch¨
 
	gsmç_auth_ok
[] = "235 2.0.0 OK" 
CRLF
;

112 
	$ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
)

114 
kì∑live
;

115 
ngx_öt_t
 
rc
;

116 
ngx_maû_¥oxy_˘x_t
 *
p
;

117 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

118 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

120 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

122 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

124 i‡(
cscf
->
so_kì∑live
) {

125 
kì∑live
 = 1;

127 i‡(
	`£tsock›t
(
s
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

128 (c⁄° *Ë&
kì∑live
, ())

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_sockë_î∫o
,

136 
p
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_maû_¥oxy_˘x_t
));

137 i‡(
p
 =
NULL
) {

138 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

142 
s
->
¥oxy
 = 
p
;

144 
p
->
up°ªam
.
sockaddr
 = 
≥î
->sockaddr;

145 
p
->
up°ªam
.
sockÀn
 = 
≥î
->socklen;

146 
p
->
up°ªam
.
«me
 = &
≥î
->name;

147 
p
->
up°ªam
.
gë
 = 
ngx_evít_gë_≥î
;

148 
p
->
up°ªam
.
log
 = 
s
->
c⁄√˘i⁄
->log;

149 
p
->
up°ªam
.
log_îr‹
 = 
NGX_ERROR_ERR
;

151 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
p
->
up°ªam
);

153 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

154 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

158 
	`ngx_add_timî
(
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
, 
cscf
->
timeout
);

160 
p
->
up°ªam
.
c⁄√˘i⁄
->
d©a
 = 
s
;

161 
p
->
up°ªam
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

163 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_block_ªad
;

164 
p
->
up°ªam
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_dummy_h™dÀr
;

166 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

168 
s
->
¥oxy
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(s->
c⁄√˘i⁄
->
poﬁ
,

169 
pcf
->
buf„r_size
);

170 i‡(
s
->
¥oxy
->
buf„r
 =
NULL
) {

171 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

175 
s
->
out
.
Àn
 = 0;

177 
s
->
¥Ÿocﬁ
) {

179 
NGX_MAIL_POP3_PROTOCOL
:

180 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_p›3_h™dÀr
;

181 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

184 
NGX_MAIL_IMAP_PROTOCOL
:

185 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_im≠_h™dÀr
;

186 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

190 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_smç_h™dÀr
;

191 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

194 
	}
}

198 
	$ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
)

200 
ngx_c⁄√˘i⁄_t
 *
c
;

201 
ngx_maû_£ssi⁄_t
 *
s
;

203 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy blockÑead");

205 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

206 
c
 = 
ªv
->
d©a
;

207 
s
 = 
c
->
d©a
;

209 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

211 
	}
}

215 
	$ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
)

217 
u_ch¨
 *
p
;

218 
ngx_öt_t
 
rc
;

219 
ngx_°r_t
 
löe
;

220 
ngx_c⁄√˘i⁄_t
 *
c
;

221 
ngx_maû_£ssi⁄_t
 *
s
;

222 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

224 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

227 
c
 = 
ªv
->
d©a
;

228 
s
 = 
c
->
d©a
;

230 i‡(
ªv
->
timedout
) {

231 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

233 
c
->
timedout
 = 1;

234 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

238 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, 0);

240 i‡(
rc
 =
NGX_AGAIN
) {

244 i‡(
rc
 =
NGX_ERROR
) {

245 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

249 
s
->
maû_°©e
) {

251 
ngx_p›3_°¨t
:

252 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

254 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

256 
löe
.
Àn
 = ("USER "Ë- 1 + 
s
->
logö
.len + 2;

257 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

258 i‡(
löe
.
d©a
 =
NULL
) {

259 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

263 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "USER ", ("USER ") - 1);

264 
p
 = 
	`ngx_˝ymem
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

265 *
p
++ = 
CR
; *∞
LF
;

267 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

270 
ngx_p›3_u£r
:

271 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÖass");

273 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

275 
löe
.
Àn
 = ("PASS "Ë- 1 + 
s
->
∑sswd
.len + 2;

276 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

277 i‡(
löe
.
d©a
 =
NULL
) {

278 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

282 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "PASS ", ("PASS ") - 1);

283 
p
 = 
	`ngx_˝ymem
’, 
s
->
∑sswd
.
d©a
, s->∑sswd.
Àn
);

284 *
p
++ = 
CR
; *∞
LF
;

286 
s
->
maû_°©e
 = 
ngx_p›3_∑sswd
;

289 
ngx_p›3_∑sswd
:

290 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

291 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

292 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

293 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

295 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

296 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

297 
	`ngx_dñ_timî
(
c
->
ªad
);

299 
c
->
log
->
a˘i⁄
 = 
NULL
;

300 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

302 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

307 #i‡(
NGX_SUPPRESS_WARN
)

308 
	`ngx_°r_nuŒ
(&
löe
);

313 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

318 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

322 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

323 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

324 
	}
}

328 
	$ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
)

330 
u_ch¨
 *
p
;

331 
ngx_öt_t
 
rc
;

332 
ngx_°r_t
 
löe
;

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

335 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

337 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

340 
c
 = 
ªv
->
d©a
;

341 
s
 = 
c
->
d©a
;

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

346 
c
->
timedout
 = 1;

347 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

351 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

353 i‡(
rc
 =
NGX_AGAIN
) {

357 i‡(
rc
 =
NGX_ERROR
) {

358 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

362 
s
->
maû_°©e
) {

364 
ngx_im≠_°¨t
:

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

368 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending LOGIN commandÅo upstream";

370 
löe
.
Àn
 = 
s
->
èg
.len + ("LOGIN ") - 1

371 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

372 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

373 i‡(
löe
.
d©a
 =
NULL
) {

374 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

378 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%VLOGIN {%uz}" 
CRLF
,

379 &
s
->
èg
, s->
logö
.
Àn
)

380 - 
löe
.
d©a
;

382 
s
->
maû_°©e
 = 
ngx_im≠_logö
;

385 
ngx_im≠_logö
:

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

388 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

390 
löe
.
Àn
 = 
s
->
logö
.À¿+ 1 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

391 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

392 i‡(
löe
.
d©a
 =
NULL
) {

393 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

397 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%V {%uz}" 
CRLF
,

398 &
s
->
logö
, s->
∑sswd
.
Àn
)

399 - 
löe
.
d©a
;

401 
s
->
maû_°©e
 = 
ngx_im≠_u£r
;

404 
ngx_im≠_u£r
:

405 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

408 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

410 
löe
.
Àn
 = 
s
->
∑sswd
.len + 2;

411 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

412 i‡(
löe
.
d©a
 =
NULL
) {

413 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

417 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
∑sswd
.d©a, s->∑sswd.
Àn
);

418 *
p
++ = 
CR
; *∞
LF
;

420 
s
->
maû_°©e
 = 
ngx_im≠_∑sswd
;

423 
ngx_im≠_∑sswd
:

424 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

425 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

426 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

427 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

429 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

430 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

431 
	`ngx_dñ_timî
(
c
->
ªad
);

433 
c
->
log
->
a˘i⁄
 = 
NULL
;

434 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

436 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

441 #i‡(
NGX_SUPPRESS_WARN
)

442 
	`ngx_°r_nuŒ
(&
löe
);

447 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

452 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

456 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

457 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

458 
	}
}

462 
	$ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
)

464 
u_ch¨
 *
p
;

465 
ngx_öt_t
 
rc
;

466 
ngx_°r_t
 
löe
;

467 
ngx_buf_t
 *
b
;

468 
ngx_c⁄√˘i⁄_t
 *
c
;

469 
ngx_maû_£ssi⁄_t
 *
s
;

470 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

471 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

473 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

476 
c
 = 
ªv
->
d©a
;

477 
s
 = 
c
->
d©a
;

479 i‡(
ªv
->
timedout
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

482 
c
->
timedout
 = 1;

483 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

487 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

489 i‡(
rc
 =
NGX_AGAIN
) {

493 i‡(
rc
 =
NGX_ERROR
) {

494 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

498 
s
->
maû_°©e
) {

500 
ngx_smç_°¨t
:

501 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÉhlo");

503 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending HELO/EHLOÅo upstream";

505 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

507 
löe
.
Àn
 = ("HELO "Ë- 1 + 
cscf
->
£rvî_«me
.len + 2;

508 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

509 i‡(
löe
.
d©a
 =
NULL
) {

510 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

514 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

516 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
,

517 ((
s
->
esmç
 || 
pcf
->
x˛õ¡
) ? "EHLO " : "HELO "),

520 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

521 *
p
++ = 
CR
; *∞
LF
;

523 i‡(
pcf
->
x˛õ¡
) {

524 
s
->
maû_°©e
 = 
ngx_smç_hño_x˛õ¡
;

526 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

527 
s
->
maû_°©e
 = 
ngx_smç_hño_‰om
;

530 
s
->
maû_°©e
 = 
ngx_smç_hño
;

535 
ngx_smç_hño_x˛õ¡
:

536 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

539 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending XCLIENTÅo upstream";

541 
löe
.
Àn
 = ("XCLIENT ADDR= LOGIN= NAME="

542 
CRLF
) - 1

543 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
 + s->
logö
.À¿+ s->
ho°
.len;

545 #i‡(
NGX_HAVE_INET6
)

546 i‡(
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

547 
löe
.
Àn
 += ("IPV6:") - 1;

551 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

552 i‡(
löe
.
d©a
 =
NULL
) {

553 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

557 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "XCLIENT ADDR=", ("XCLIENT ADDR=") - 1);

559 #i‡(
NGX_HAVE_INET6
)

560 i‡(
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

561 
p
 = 
	`ngx_˝ymem
(p, "IPV6:", ("IPV6:") - 1);

565 
p
 = 
	`ngx_c›y
’, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

566 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

568 i‡(
s
->
logö
.
Àn
) {

569 
p
 = 
	`ngx_˝ymem
(p, " LOGIN=", (" LOGIN=") - 1);

570 
p
 = 
	`ngx_c›y
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

573 
p
 = 
	`ngx_˝ymem
(p, " NAME=", (" NAME=") - 1);

574 
p
 = 
	`ngx_c›y
’, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

576 *
p
++ = 
CR
; *p++ = 
LF
;

578 
löe
.
Àn
 = 
p
 -Üöe.
d©a
;

580 i‡(
s
->
smç_hño
.
Àn
) {

581 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_hño
;

583 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

584 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_‰om
;

587 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡
;

592 
ngx_smç_x˛õ¡_hño
:

593 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

596 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending client HELO/EHLOÅo upstream";

598 
löe
.
Àn
 = ("HELO " 
CRLF
Ë- 1 + 
s
->
smç_hño
.len;

600 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

601 i‡(
löe
.
d©a
 =
NULL
) {

602 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

606 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

607 ((
s
->
esmç
Ë? "EHLO %V" 
CRLF
 : "HELO %V" CRLF),

608 &
s
->
smç_hño
)

609 - 
löe
.
d©a
;

611 
s
->
maû_°©e
 = (s->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) ?

612 
ngx_smç_hño_‰om
 : 
ngx_smç_hño
;

616 
ngx_smç_hño_‰om
:

617 
ngx_smç_x˛õ¡_‰om
:

618 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

621 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending MAIL FROMÅo upstream";

623 
löe
.
Àn
 = 
s
->
smç_‰om
.À¿+ (
CRLF
) - 1;

624 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

625 i‡(
löe
.
d©a
 =
NULL
) {

626 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

630 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_‰om
.d©a, s->smç_‰om.
Àn
);

631 *
p
++ = 
CR
; *∞
LF
;

633 
s
->
maû_°©e
 = 
ngx_smç_‰om
;

637 
ngx_smç_‰om
:

638 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

641 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending RCPT TOÅo upstream";

643 
löe
.
Àn
 = 
s
->
smç_to
.À¿+ (
CRLF
) - 1;

644 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

645 i‡(
löe
.
d©a
 =
NULL
) {

646 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

650 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_to
.d©a, s->smç_to.
Àn
);

651 *
p
++ = 
CR
; *∞
LF
;

653 
s
->
maû_°©e
 = 
ngx_smç_to
;

657 
ngx_smç_hño
:

658 
ngx_smç_x˛õ¡
:

659 
ngx_smç_to
:

661 
b
 = 
s
->
¥oxy
->
buf„r
;

663 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

664 
b
->
pos
 = b->
°¨t
;

667 
	`ngx_mem˝y
(
b
->
°¨t
, 
smç_auth_ok
, (smtp_auth_ok) - 1);

668 
b
->
œ°
 = b->
°¨t
 + (
smç_auth_ok
) - 1;

671 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

672 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

673 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

674 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

676 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

677 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

678 
	`ngx_dñ_timî
(
c
->
ªad
);

680 
c
->
log
->
a˘i⁄
 = 
NULL
;

681 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

683 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

684 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

687 
	`ngx_maû_¥oxy_h™dÀr
(
c
->
wrôe
);

693 #i‡(
NGX_SUPPRESS_WARN
)

694 
	`ngx_°r_nuŒ
(&
löe
);

699 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

704 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

708 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

709 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

710 
	}
}

714 
	$ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
wev
)

716 
ngx_c⁄√˘i⁄_t
 *
c
;

717 
ngx_maû_£ssi⁄_t
 *
s
;

719 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0, "mailÖroxy dummy handler");

721 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

722 
c
 = 
wev
->
d©a
;

723 
s
 = 
c
->
d©a
;

725 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

727 
	}
}

730 
ngx_öt_t


731 
	$ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
°©e
)

733 
u_ch¨
 *
p
, *
m
;

734 
ssize_t
 
n
;

735 
ngx_buf_t
 *
b
;

736 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

738 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "readingÑesponse from upstream";

740 
b
 = 
s
->
¥oxy
->
buf„r
;

742 
n
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
	`ªcv
(s->proxy->upstream.connection,

743 
b
->
œ°
, b->
íd
 - b->last);

745 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

746  
NGX_ERROR
;

749 i‡(
n
 =
NGX_AGAIN
) {

750  
NGX_AGAIN
;

753 
b
->
œ°
 +
n
;

755 i‡(
b
->
œ°
 - b->
pos
 < 4) {

756  
NGX_AGAIN
;

759 i‡(*(
b
->
œ°
 - 2Ë!
CR
 || *(b->œ° - 1Ë!
LF
) {

760 i‡(
b
->
œ°
 =b->
íd
) {

761 *(
b
->
œ°
 - 1) = '\0';

762 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

764 
b
->
pos
);

765  
NGX_ERROR
;

768  
NGX_AGAIN
;

771 
p
 = 
b
->
pos
;

773 
s
->
¥Ÿocﬁ
) {

775 
NGX_MAIL_POP3_PROTOCOL
:

776 i‡(
p
[0] == '+' &&Ö[1] == 'O' &&Ö[2] == 'K') {

777  
NGX_OK
;

781 
NGX_MAIL_IMAP_PROTOCOL
:

782 
°©e
) {

784 
ngx_im≠_°¨t
:

785 i‡(
p
[0] == '*' &&Ö[1] == ' ' &&Ö[2] == 'O' &&Ö[3] == 'K') {

786  
NGX_OK
;

790 
ngx_im≠_logö
:

791 
ngx_im≠_u£r
:

792 i‡(
p
[0] == '+') {

793  
NGX_OK
;

797 
ngx_im≠_∑sswd
:

798 i‡(
	`ngx_°∫cmp
(
p
, 
s
->
èg
.
d©a
, s->èg.
Àn
) == 0) {

799 
p
 +
s
->
èg
.
Àn
;

800 i‡(
p
[0] == 'O' &&Ö[1] == 'K') {

801  
NGX_OK
;

811 i‡(
p
[3] == '-') {

814 
m
 = 
b
->
œ°
 - ((
CRLF
 "200" CRLF) - 1);

816 
m
 > 
p
) {

817 i‡(
m
[0] =
CR
 && m[1] =
LF
) {

821 
m
--;

824 i‡(
m
 <
p
 || m[5] == '-') {

825  
NGX_AGAIN
;

829 
°©e
) {

831 
ngx_smç_°¨t
:

832 i‡(
p
[0] == '2' &&Ö[1] == '2' &&Ö[2] == '0') {

833  
NGX_OK
;

837 
ngx_smç_hño
:

838 
ngx_smç_hño_x˛õ¡
:

839 
ngx_smç_hño_‰om
:

840 
ngx_smç_‰om
:

841 i‡(
p
[0] == '2' &&Ö[1] == '5' &&Ö[2] == '0') {

842  
NGX_OK
;

846 
ngx_smç_x˛õ¡
:

847 
ngx_smç_x˛õ¡_‰om
:

848 
ngx_smç_x˛õ¡_hño
:

849 i‡(
p
[0] == '2' && (p[1] == '2' ||Ö[1] == '5') &&Ö[2] == '0') {

850  
NGX_OK
;

854 
ngx_smç_to
:

855  
NGX_OK
;

861 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

863 i‡(
pcf
->
∑ss_îr‹_mesßge
 == 0) {

864 *(
b
->
œ°
 - 2) = '\0';

865 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

866 "up°ªam síàövÆidÑe•⁄£: \"%s\"", 
p
);

867  
NGX_ERROR
;

870 
s
->
out
.
Àn
 = 
b
->
œ°
 - 
p
 - 2;

871 
s
->
out
.
d©a
 = 
p
;

873 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

874 "up°ªam síàövÆidÑe•⁄£: \"%V\"", &
s
->
out
);

876 
s
->
out
.
Àn
 = 
b
->
œ°
 - b->
pos
;

877 
s
->
out
.
d©a
 = 
b
->
pos
;

879  
NGX_ERROR
;

880 
	}
}

884 
	$ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
)

886 *
a˘i⁄
, *
ªcv_a˘i⁄
, *
£nd_a˘i⁄
;

887 
size_t
 
size
;

888 
ssize_t
 
n
;

889 
ngx_buf_t
 *
b
;

890 
ngx_uöt_t
 
do_wrôe
;

891 
ngx_c⁄√˘i⁄_t
 *
c
, *
§c
, *
d°
;

892 
ngx_maû_£ssi⁄_t
 *
s
;

893 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

895 
c
 = 
ev
->
d©a
;

896 
s
 = 
c
->
d©a
;

898 i‡(
ev
->
timedout
) {

899 
c
->
log
->
a˘i⁄
 = "proxying";

901 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

902 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

904 
c
->
timedout
 = 1;

907 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

911 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

915 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

916 i‡(
ev
->
wrôe
) {

917 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

918 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

919 
§c
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

920 
d°
 = 
c
;

921 
b
 = 
s
->
¥oxy
->
buf„r
;

924 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

925 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

926 
§c
 = 
c
;

927 
d°
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

928 
b
 = 
s
->
buf„r
;

932 i‡(
ev
->
wrôe
) {

933 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

934 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

935 
§c
 = 
s
->
c⁄√˘i⁄
;

936 
d°
 = 
c
;

937 
b
 = 
s
->
buf„r
;

940 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

941 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

942 
§c
 = 
c
;

943 
d°
 = 
s
->
c⁄√˘i⁄
;

944 
b
 = 
s
->
¥oxy
->
buf„r
;

948 
do_wrôe
 = 
ev
->
wrôe
 ? 1 : 0;

950 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

952 
do_wrôe
, 
§c
->
fd
, 
d°
->fd);

956 i‡(
do_wrôe
) {

958 
size
 = 
b
->
œ°
 - b->
pos
;

960 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

961 
c
->
log
->
a˘i⁄
 = 
£nd_a˘i⁄
;

963 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

965 i‡(
n
 =
NGX_ERROR
) {

966 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

970 i‡(
n
 > 0) {

971 
b
->
pos
 +
n
;

973 i‡(
b
->
pos
 =b->
œ°
) {

974 
b
->
pos
 = b->
°¨t
;

975 
b
->
œ°
 = b->
°¨t
;

981 
size
 = 
b
->
íd
 - b->
œ°
;

983 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

984 
c
->
log
->
a˘i⁄
 = 
ªcv_a˘i⁄
;

986 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

988 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

992 i‡(
n
 > 0) {

993 
do_wrôe
 = 1;

994 
b
->
œ°
 +
n
;

999 i‡(
n
 =
NGX_ERROR
) {

1000 
§c
->
ªad
->
eof
 = 1;

1007 
c
->
log
->
a˘i⁄
 = "proxying";

1009 i‡((
s
->
c⁄√˘i⁄
->
ªad
->
eof
 && s->
buf„r
->
pos
 =s->buf„r->
œ°
)

1010 || (
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof


1011 && 
s
->
¥oxy
->
buf„r
->
pos
 =s->¥oxy->buf„r->
œ°
)

1012 || (
s
->
c⁄√˘i⁄
->
ªad
->
eof


1013 && 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof
))

1015 
a˘i⁄
 = 
c
->
log
->action;

1016 
c
->
log
->
a˘i⁄
 = 
NULL
;

1017 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "proxied session done");

1018 
c
->
log
->
a˘i⁄
 =áction;

1020 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1024 i‡(
	`ngx_h™dÀ_wrôe_evít
(
d°
->
wrôe
, 0Ë!
NGX_OK
) {

1025 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1029 i‡(
	`ngx_h™dÀ_ªad_evít
(
d°
->
ªad
, 0Ë!
NGX_OK
) {

1030 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1034 i‡(
	`ngx_h™dÀ_wrôe_evít
(
§c
->
wrôe
, 0Ë!
NGX_OK
) {

1035 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1039 i‡(
	`ngx_h™dÀ_ªad_evít
(
§c
->
ªad
, 0Ë!
NGX_OK
) {

1040 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1044 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

1045 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

1046 
	`ngx_add_timî
(
c
->
ªad
, 
pcf
->
timeout
);

1048 
	}
}

1052 
	$ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1054 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1055 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1057 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1059 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1062 i‡(
s
->
out
.
Àn
 == 0) {

1063 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1067 
s
->
quô
 = 1;

1068 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

1069 
	}
}

1073 
	$ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1075 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1076 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1078 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1080 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1083 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1084 
	}
}

1088 
	$ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
)

1090 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1091 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1093 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1095 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1098 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
s
->
c⁄√˘i⁄
);

1099 
	}
}

1103 
	$ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1105 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

1107 
pcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_¥oxy_c⁄f_t
));

1108 i‡(
pcf
 =
NULL
) {

1109  
NULL
;

1112 
pcf
->
íabÀ
 = 
NGX_CONF_UNSET
;

1113 
pcf
->
∑ss_îr‹_mesßge
 = 
NGX_CONF_UNSET
;

1114 
pcf
->
x˛õ¡
 = 
NGX_CONF_UNSET
;

1115 
pcf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1116 
pcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1118  
pcf
;

1119 
	}
}

1123 
	$ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1125 
ngx_maû_¥oxy_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1126 
ngx_maû_¥oxy_c⁄f_t
 *
c⁄f
 = 
chûd
;

1128 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1129 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_îr‹_mesßge
, 
¥ev
->pass_error_message, 0);

1130 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
x˛õ¡
, 
¥ev
->xclient, 1);

1131 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1132 (
size_t
Ë
ngx_∑gesize
);

1133 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 24 * 60 * 60000);

1135  
NGX_CONF_OK
;

1136 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_smtp_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

16 
ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
);

17 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

18 
ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
);

20 
ngx_öt_t
 
ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
,

21 
ngx_c⁄√˘i⁄_t
 *
c
);

23 
ngx_öt_t
 
ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
ngx_öt_t
 
ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
ngx_öt_t
 
ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

26 
ngx_öt_t
 
ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

27 
ngx_c⁄√˘i⁄_t
 *
c
);

28 
ngx_öt_t
 
ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

29 
ngx_öt_t
 
ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_öt_t
 
ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

32 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

33 
ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

34 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

37 
u_ch¨
 
	gsmç_ok
[] = "250 2.0.0 OK" 
CRLF
;

38 
u_ch¨
 
	gsmç_bye
[] = "221 2.0.0 Bye" 
CRLF
;

39 
u_ch¨
 
	gsmç_°¨âls
[] = "220 2.0.0 Sèπ TLS" 
CRLF
;

40 
u_ch¨
 
	gsmç_√xt
[] = "334 " 
CRLF
;

41 
u_ch¨
 
	gsmç_u£∫ame
[] = "334 VXNlcm5hbWU6" 
CRLF
;

42 
u_ch¨
 
	gsmç_∑ssw‹d
[] = "334 UGFzc3dvcmQ6" 
CRLF
;

43 
u_ch¨
 
	gsmç_övÆid_comm™d
[] = "500 5.5.1 InvÆid comm™d" 
CRLF
;

44 
u_ch¨
 
	gsmç_övÆid_pùñöög
[] =

45 "503 5.5.0 Im¥›î u£ o‡SMTP comm™dÖùñöög" 
CRLF
;

46 
u_ch¨
 
	gsmç_övÆid_¨gumít
[] = "501 5.5.4 InvÆidárgumít" 
CRLF
;

47 
u_ch¨
 
	gsmç_auth_ªquúed
[] = "530 5.7.1 Authítiˇti⁄Ñequúed" 
CRLF
;

48 
u_ch¨
 
	gsmç_bad_£quí˚
[] = "503 5.5.1 Bad sequí˚ o‡comm™ds" 
CRLF
;

51 
ngx_°r_t
 
	gsmç_u«vaûabÀ
 = 
ngx_°rög
("[UNAVAILABLE]");

52 
ngx_°r_t
 
	gsmç_ãmpu«vaû
 = 
ngx_°rög
("[TEMPUNAVAIL]");

56 
	$ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

58 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

59 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

61 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

63 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

64 
s
->
ho°
 = 
smç_u«vaûabÀ
;

65 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

69 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

70 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

71 
s
->
ho°
 = 
smç_ãmpu«vaû
;

72 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

77 
c
->
log
->
a˘i⁄
 = "inÑesolving clientáddress";

79 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

80 i‡(
˘x
 =
NULL
) {

81 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

85 
˘x
->
addr
.
sockaddr
 = 
c
->sockaddr;

86 
˘x
->
addr
.
sockÀn
 = 
c
->socklen;

87 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
;

88 
˘x
->
d©a
 = 
s
;

89 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

91 i‡(
	`ngx_ªsﬁve_addr
(
˘x
Ë!
NGX_OK
) {

92 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

94 
	}
}

98 
	$ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

100 
ngx_c⁄√˘i⁄_t
 *
c
;

101 
ngx_maû_£ssi⁄_t
 *
s
;

103 
s
 = 
˘x
->
d©a
;

104 
c
 = 
s
->
c⁄√˘i⁄
;

106 i‡(
˘x
->
°©e
) {

107 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

109 &
c
->
addr_ãxt
, 
˘x
->
°©e
,

110 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

112 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

113 
s
->
ho°
 = 
smç_u«vaûabÀ
;

116 
s
->
ho°
 = 
smç_ãmpu«vaû
;

119 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

121 
	`ngx_maû_smç_gªëög
(
s
, s->
c⁄√˘i⁄
);

126 
c
->
log
->
a˘i⁄
 = "inÑesolving client hostname";

128 
s
->
ho°
.
d©a
 = 
	`ngx_p°rdup
(
c
->
poﬁ
, &
˘x
->
«me
);

129 i‡(
s
->
ho°
.
d©a
 =
NULL
) {

130 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

131 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

135 
s
->
ho°
.
Àn
 = 
˘x
->
«me
.len;

137 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

139 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

140 "addªs†ªsﬁved: %V", &
s
->
ho°
);

142 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me
;

144 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

145 
	}
}

149 
	$ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
)

151 
ngx_c⁄√˘i⁄_t
 *
c
;

152 
ngx_maû_£ssi⁄_t
 *
s
;

153 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

154 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

156 
c
 = 
ªv
->
d©a
;

157 
s
 = 
c
->
d©a
;

159 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

161 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

162 i‡(
˘x
 =
NULL
) {

163 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

167 
˘x
->
«me
 = 
s
->
ho°
;

168 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
;

169 
˘x
->
d©a
 = 
s
;

170 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

172 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

173 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

175 
	}
}

179 
	$ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

181 
ngx_uöt_t
 
i
;

182 
ngx_c⁄√˘i⁄_t
 *
c
;

183 
ngx_maû_£ssi⁄_t
 *
s
;

185 
s
 = 
˘x
->
d©a
;

186 
c
 = 
s
->
c⁄√˘i⁄
;

188 i‡(
˘x
->
°©e
) {

189 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

191 &
˘x
->
«me
, ctx->
°©e
,

192 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

194 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

195 
s
->
ho°
 = 
smç_u«vaûabÀ
;

198 
s
->
ho°
 = 
smç_ãmpu«vaû
;

203 #i‡(
NGX_DEBUG
)

205 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

206 
ngx_°r_t
 
addr
;

208 
addr
.
d©a
 = 
ãxt
;

210 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

211 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
˘x
->
addrs
[
i
].
sockaddr
,

212 
˘x
->
addrs
[
i
].
sockÀn
,

213 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

216 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

221 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

222 i‡(
	`ngx_cmp_sockaddr
(
˘x
->
addrs
[
i
].
sockaddr
, ctx->addrs[i].
sockÀn
,

223 
c
->
sockaddr
, c->
sockÀn
, 0)

224 =
NGX_OK
)

226 
found
;

230 
s
->
ho°
 = 
smç_u«vaûabÀ
;

233 
found
:

235 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

237 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

238 
	}
}

242 
	$ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

244 
ngx_m£c_t
 
timeout
;

245 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

246 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

248 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

249 "smç gªëög f‹ \"%V\"", &
s
->
ho°
);

251 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

252 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

254 
timeout
 = 
sscf
->
gªëög_dñay
 ? sscf->gªëög_dñay : 
cscf
->timeout;

255 
	`ngx_add_timî
(
c
->
ªad
, 
timeout
);

257 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

261 i‡(
sscf
->
gªëög_dñay
) {

262 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_övÆid_pùñöög
;

266 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

268 
s
->
out
 = 
sscf
->
gªëög
;

270 
	`ngx_maû_£nd
(
c
->
wrôe
);

271 
	}
}

275 
	$ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
)

277 
ngx_c⁄√˘i⁄_t
 *
c
;

278 
ngx_maû_£ssi⁄_t
 *
s
;

279 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

280 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

282 
c
 = 
ªv
->
d©a
;

283 
s
 = 
c
->
d©a
;

285 
c
->
log
->
a˘i⁄
 = "in delayÖipelining state";

287 i‡(
ªv
->
timedout
) {

289 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "delay greeting");

291 
ªv
->
timedout
 = 0;

293 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

295 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

297 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

299 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

300 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

304 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

306 
s
->
out
 = 
sscf
->
gªëög
;

310 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "invalidÖipelining");

312 i‡(
s
->
buf„r
 =
NULL
) {

313 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

318 i‡(
	`ngx_maû_smç_disˇrd_comm™d
(
s
, 
c
,

320 !
NGX_OK
)

325 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_pùñöög
);

326 
s
->
quô
 = 1;

329 
	`ngx_maû_£nd
(
c
->
wrôe
);

330 
	}
}

334 
	$ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

336 
ngx_c⁄√˘i⁄_t
 *
c
;

337 
ngx_maû_£ssi⁄_t
 *
s
;

339 
c
 = 
ªv
->
d©a
;

341 
c
->
log
->
a˘i⁄
 = "ináuth state";

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

345 
c
->
timedout
 = 1;

346 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

350 
s
 = 
c
->
d©a
;

352 i‡(
s
->
buf„r
 =
NULL
) {

353 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

358 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

359 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_auth_°©e
;

361 
	`ngx_maû_smç_auth_°©e
(
ªv
);

362 
	}
}

365 
ngx_öt_t


366 
	$ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

368 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

370 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
)Ë=
NGX_ERROR
) {

371 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

372  
NGX_ERROR
;

375 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

377 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
sscf
->
˛õ¡_buf„r_size
);

378 i‡(
s
->
buf„r
 =
NULL
) {

379 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

380  
NGX_ERROR
;

383  
NGX_OK
;

384 
	}
}

388 
	$ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
)

390 
ngx_öt_t
 
rc
;

391 
ngx_c⁄√˘i⁄_t
 *
c
;

392 
ngx_maû_£ssi⁄_t
 *
s
;

394 
c
 = 
ªv
->
d©a
;

395 
s
 = 
c
->
d©a
;

397 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtpáuth state");

399 i‡(
ªv
->
timedout
) {

400 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

401 
c
->
timedout
 = 1;

402 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

406 i‡(
s
->
out
.
Àn
) {

407 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtp send handler busy");

408 
s
->
blocked
 = 1;

412 
s
->
blocked
 = 0;

414 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

416 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

420 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

422 i‡(
rc
 =
NGX_OK
) {

423 
s
->
maû_°©e
) {

425 
ngx_smç_°¨t
:

427 
s
->
comm™d
) {

429 
NGX_SMTP_HELO
:

430 
NGX_SMTP_EHLO
:

431 
rc
 = 
	`ngx_maû_smç_hño
(
s
, 
c
);

434 
NGX_SMTP_AUTH
:

435 
rc
 = 
	`ngx_maû_smç_auth
(
s
, 
c
);

438 
NGX_SMTP_QUIT
:

439 
s
->
quô
 = 1;

440 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bye
);

443 
NGX_SMTP_MAIL
:

444 
rc
 = 
	`ngx_maû_smç_maû
(
s
, 
c
);

447 
NGX_SMTP_RCPT
:

448 
rc
 = 
	`ngx_maû_smç_r˝t
(
s
, 
c
);

451 
NGX_SMTP_RSET
:

452 
rc
 = 
	`ngx_maû_smç_r£t
(
s
, 
c
);

455 
NGX_SMTP_NOOP
:

458 
NGX_SMTP_STARTTLS
:

459 
rc
 = 
	`ngx_maû_smç_°¨âls
(
s
, 
c
);

460 
	`ngx_°r_£t
(&
s
->
out
, 
smç_°¨âls
);

464 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

470 
ngx_smç_auth_logö_u£∫ame
:

471 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

473 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

477 
ngx_smç_auth_logö_∑ssw‹d
:

478 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

481 
ngx_smç_auth_∂aö
:

482 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

485 
ngx_smç_auth_¸am_md5
:

486 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

491 i‡(
s
->
buf„r
->
pos
 < s->buf„r->
œ°
) {

492 
s
->
blocked
 = 1;

495 
rc
) {

497 
NGX_DONE
:

498 
	`ngx_maû_auth
(
s
, 
c
);

501 
NGX_ERROR
:

502 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

505 
NGX_MAIL_PARSE_INVALID_COMMAND
:

506 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

507 
s
->
°©e
 = 0;

508 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_comm™d
);

512 
NGX_OK
:

513 
s
->
¨gs
.
√…s
 = 0;

515 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

516 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

517 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

520 i‡(
s
->
°©e
) {

521 
s
->
¨g_°¨t
 = s->
buf„r
->
pos
;

524 
	`ngx_maû_£nd
(
c
->
wrôe
);

526 
	}
}

529 
ngx_öt_t


530 
	$ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

532 
ngx_°r_t
 *
¨g
;

533 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

535 i‡(
s
->
¨gs
.
√…s
 != 1) {

536 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

537 
s
->
°©e
 = 0;

538  
NGX_OK
;

541 
¨g
 = 
s
->
¨gs
.
ñts
;

543 
s
->
smç_hño
.
Àn
 = 
¨g
[0].len;

545 
s
->
smç_hño
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
¨g
[0].
Àn
);

546 i‡(
s
->
smç_hño
.
d©a
 =
NULL
) {

547  
NGX_ERROR
;

550 
	`ngx_mem˝y
(
s
->
smç_hño
.
d©a
, 
¨g
[0].d©a,árg[0].
Àn
);

552 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

553 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

555 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

557 i‡(
s
->
comm™d
 =
NGX_SMTP_HELO
) {

558 
s
->
out
 = 
sscf
->
£rvî_«me
;

561 
s
->
esmç
 = 1;

563 #i‡(
NGX_MAIL_SSL
)

565 i‡(
c
->
s¶
 =
NULL
) {

566 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

568 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

570 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

571 
s
->
out
 = 
sscf
->
°¨âls_ˇ∑bûôy
;

572  
NGX_OK
;

575 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

576 
s
->
out
 = 
sscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

577  
NGX_OK
;

582 
s
->
out
 = 
sscf
->
ˇ∑bûôy
;

585  
NGX_OK
;

586 
	}
}

589 
ngx_öt_t


590 
	$ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

592 
ngx_öt_t
 
rc
;

593 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

594 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

596 #i‡(
NGX_MAIL_SSL
)

597 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

598  
NGX_MAIL_PARSE_INVALID_COMMAND
;

602 i‡(
s
->
¨gs
.
√…s
 == 0) {

603 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

604 
s
->
°©e
 = 0;

605  
NGX_OK
;

608 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

610 
rc
) {

612 
NGX_MAIL_AUTH_LOGIN
:

614 
	`ngx_°r_£t
(&
s
->
out
, 
smç_u£∫ame
);

615 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_u£∫ame
;

617  
NGX_OK
;

619 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

621 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

622 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

624  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

626 
NGX_MAIL_AUTH_PLAIN
:

628 
	`ngx_°r_£t
(&
s
->
out
, 
smç_√xt
);

629 
s
->
maû_°©e
 = 
ngx_smç_auth_∂aö
;

631  
NGX_OK
;

633 
NGX_MAIL_AUTH_CRAM_MD5
:

635 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

637 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

638  
NGX_MAIL_PARSE_INVALID_COMMAND
;

641 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

642 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

644 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

645  
NGX_ERROR
;

649 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "334 ", 4Ë=
NGX_OK
) {

650 
s
->
maû_°©e
 = 
ngx_smç_auth_¸am_md5
;

651  
NGX_OK
;

654  
NGX_ERROR
;

657  
rc
;

658 
	}
}

661 
ngx_öt_t


662 
	$ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

664 
ngx_°r_t
 *
¨g
, 
cmd
;

665 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

667 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

669 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_NONE_ENABLED
)) {

670 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, "client wasÑejected: \"%V\"");

671 
	`ngx_°r_£t
(&
s
->
out
, 
smç_auth_ªquúed
);

672  
NGX_OK
;

677 i‡(
s
->
smç_‰om
.
Àn
) {

678 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

679  
NGX_OK
;

682 i‡(
s
->
¨gs
.
√…s
 == 0) {

683 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

684  
NGX_OK
;

687 
¨g
 = 
s
->
¨gs
.
ñts
;

688 
¨g
 +
s
->
¨gs
.
√…s
 - 1;

690 
cmd
.
Àn
 = 
¨g
->
d©a
 +árg->À¿- 
s
->cmd.data;

691 
cmd
.
d©a
 = 
s
->cmd.data;

693 
s
->
smç_‰om
.
Àn
 = 
cmd
.len;

695 
s
->
smç_‰om
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
cmd
.
Àn
);

696 i‡(
s
->
smç_‰om
.
d©a
 =
NULL
) {

697  
NGX_ERROR
;

700 
	`ngx_mem˝y
(
s
->
smç_‰om
.
d©a
, 
cmd
.d©a, cmd.
Àn
);

702 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

703 "smç maû from:\"%V\"", &
s
->
smç_‰om
);

705 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

707  
NGX_OK
;

708 
	}
}

711 
ngx_öt_t


712 
	$ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

714 
ngx_°r_t
 *
¨g
, 
cmd
;

716 i‡(
s
->
smç_‰om
.
Àn
 == 0) {

717 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

718  
NGX_OK
;

721 i‡(
s
->
¨gs
.
√…s
 == 0) {

722 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

723  
NGX_OK
;

726 
¨g
 = 
s
->
¨gs
.
ñts
;

727 
¨g
 +
s
->
¨gs
.
√…s
 - 1;

729 
cmd
.
Àn
 = 
¨g
->
d©a
 +árg->À¿- 
s
->cmd.data;

730 
cmd
.
d©a
 = 
s
->cmd.data;

732 
s
->
smç_to
.
Àn
 = 
cmd
.len;

734 
s
->
smç_to
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
cmd
.
Àn
);

735 i‡(
s
->
smç_to
.
d©a
 =
NULL
) {

736  
NGX_ERROR
;

739 
	`ngx_mem˝y
(
s
->
smç_to
.
d©a
, 
cmd
.d©a, cmd.
Àn
);

741 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

742 "smçÑ˝àto:\"%V\"", &
s
->
smç_to
);

744 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_NONE
;

746  
NGX_DONE
;

747 
	}
}

750 
ngx_öt_t


751 
	$ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

753 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

754 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

755 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

757  
NGX_OK
;

758 
	}
}

761 
ngx_öt_t


762 
	$ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

764 #i‡(
NGX_MAIL_SSL
)

765 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

767 i‡(
c
->
s¶
 =
NULL
) {

768 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

769 i‡(
s¶cf
->
°¨âls
) {

776 
	`ngx_°r_nuŒ
(&
s
->
smç_hño
);

777 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

778 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

780 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

781 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

783 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

784  
NGX_OK
;

790  
NGX_MAIL_PARSE_INVALID_COMMAND
;

791 
	}
}

794 
ngx_öt_t


795 
	$ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

796 *
îr
)

798 
ssize_t
 
n
;

800 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

802 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

803 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

804  
NGX_ERROR
;

807 i‡(
n
 > 0) {

808 
s
->
buf„r
->
œ°
 +
n
;

811 i‡(
n
 =
NGX_AGAIN
) {

812 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

813 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

814  
NGX_ERROR
;

817  
NGX_AGAIN
;

820 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, 
îr
);

822 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

823 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

825  
NGX_OK
;

826 
	}
}

830 
	$ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

831 *
îr
)

833 
u_ch¨
 
ch
;

834 
ngx_°r_t
 
cmd
;

835 
ngx_uöt_t
 
i
;

837 i‡(
c
->
log
->
log_Àvñ
 < 
NGX_LOG_INFO
) {

841 
cmd
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

842 
cmd
.
d©a
 = 
s
->
buf„r
->
°¨t
;

844 
i
 = 0; i < 
cmd
.
Àn
; i++) {

845 
ch
 = 
cmd
.
d©a
[
i
];

847 i‡(
ch
 !
CR
 && ch !
LF
) {

851 
cmd
.
d©a
[
i
] = '_';

854 
cmd
.
Àn
 = 
i
;

856 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, 
îr
, &
cmd
);

857 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_smtp_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 *
ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_c⁄f_bômask_t
 
	gngx_maû_smç_auth_mëhods
[] = {

21 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

22 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

23 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

24 { 
ngx_°rög
("n⁄e"), 
NGX_MAIL_AUTH_NONE_ENABLED
 },

25 { 
ngx_nuŒ_°rög
, 0 }

29 
ngx_°r_t
 
	gngx_maû_smç_auth_mëhods_«mes
[] = {

30 
ngx_°rög
("PLAIN"),

31 
ngx_°rög
("LOGIN"),

32 
ngx_nuŒ_°rög
,

33 
ngx_°rög
("CRAM-MD5"),

34 
ngx_nuŒ_°rög


38 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_smç_¥Ÿocﬁ
 = {

39 
ngx_°rög
("smtp"),

41 
NGX_MAIL_SMTP_PROTOCOL
,

43 
ngx_maû_smç_öô_£ssi⁄
,

44 
ngx_maû_smç_öô_¥Ÿocﬁ
,

45 
ngx_maû_smç_∑r£_comm™d
,

46 
ngx_maû_smç_auth_°©e
,

48 
ngx_°rög
("451 4.3.2 I¡î«»£rvîÉº‹" 
CRLF
)

52 
ngx_comm™d_t
 
	gngx_maû_smç_comm™ds
[] = {

54 { 
ngx_°rög
("smtp_client_buffer"),

55 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

56 
ngx_c⁄f_£t_size_¶Ÿ
,

57 
NGX_MAIL_SRV_CONF_OFFSET
,

58 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

59 
NULL
 },

61 { 
ngx_°rög
("smtp_greeting_delay"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_m£c_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
gªëög_dñay
),

66 
NULL
 },

68 { 
ngx_°rög
("smtp_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("smtp_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_smç_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_smç_moduÀ_˘x
 = {

87 &
ngx_maû_smç_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_smç_¸óã_§v_c⁄f
,

93 
ngx_maû_smç_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_smç_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_smç_moduÀ_˘x
,

100 
ngx_maû_smç_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

118 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_smç_§v_c⁄f_t
));

119 i‡(
sscf
 =
NULL
) {

120  
NULL
;

123 
sscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

124 
sscf
->
gªëög_dñay
 = 
NGX_CONF_UNSET_MSEC
;

126 i‡(
	`ngx_¨øy_öô
(&
sscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

127 !
NGX_OK
)

129  
NULL
;

132  
sscf
;

133 
	}
}

137 
	$ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

139 
ngx_maû_smç_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

140 
ngx_maû_smç_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

142 
u_ch¨
 *
p
, *
auth
, *
œ°
;

143 
size_t
 
size
;

144 
ngx_°r_t
 *
c
;

145 
ngx_uöt_t
 
i
, 
m
, 
auth_íabÀd
;

146 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

148 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

149 
¥ev
->
˛õ¡_buf„r_size
,

150 (
size_t
Ë
ngx_∑gesize
);

152 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
gªëög_dñay
,

153 
¥ev
->
gªëög_dñay
, 0);

155 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

156 
¥ev
->
auth_mëhods
,

157 (
NGX_CONF_BITMASK_SET


158 |
NGX_MAIL_AUTH_PLAIN_ENABLED


159 |
NGX_MAIL_AUTH_LOGIN_ENABLED
));

162 
cscf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

164 
size
 = ("220 ESMTPÑódy" 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

166 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

167 i‡(
p
 =
NULL
) {

168  
NGX_CONF_ERROR
;

171 
c⁄f
->
gªëög
.
Àn
 = 
size
;

172 
c⁄f
->
gªëög
.
d©a
 = 
p
;

174 *
p
++ = '2'; *p++ = '2'; *p++ = '0'; *p++ = ' ';

175 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

176 
	`ngx_mem˝y
(
p
, " ESMTPÑódy" 
CRLF
, (" ESMTPÑeady" CRLF) - 1);

179 
size
 = ("250 " 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

181 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

182 i‡(
p
 =
NULL
) {

183  
NGX_CONF_ERROR
;

186 
c⁄f
->
£rvî_«me
.
Àn
 = 
size
;

187 
c⁄f
->
£rvî_«me
.
d©a
 = 
p
;

189 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

190 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

191 *
p
++ = 
CR
; *∞
LF
;

194 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

195 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

198 
size
 = ("250-"Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
 + (
CRLF
) - 1;

200 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

201 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

202 
size
 +("250 "Ë- 1 + 
c
[
i
].
Àn
 + (
CRLF
) - 1;

205 
auth_íabÀd
 = 0;

207 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

208 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

209 
m
 <<1, 
i
++)

211 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

212 
size
 +1 + 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
;

213 
auth_íabÀd
 = 1;

217 i‡(
auth_íabÀd
) {

218 
size
 +("250 AUTH"Ë- 1 + (
CRLF
) - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

229 
œ°
 = 
p
;

231 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

232 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

233 *
p
++ = 
CR
; *p++ = 
LF
;

235 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

236 
œ°
 = 
p
;

237 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

238 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

239 *
p
++ = 
CR
; *p++ = 
LF
;

242 
auth
 = 
p
;

244 i‡(
auth_íabÀd
) {

245 
œ°
 = 
p
;

247 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

248 *
p
++ = 'A'; *p++ = 'U'; *p++ = 'T'; *p++ = 'H';

250 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

251 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

252 
m
 <<1, 
i
++)

254 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

255 *
p
++ = ' ';

256 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
d©a
,

257 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
);

261 *
p
++ = 
CR
; *∞
LF
;

264 
œ°
[3] = ' ';

267 
size
 +("250 STARTTLS" 
CRLF
) - 1;

269 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

270 i‡(
p
 =
NULL
) {

271  
NGX_CONF_ERROR
;

274 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

275 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

277 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, c⁄f->ˇ∑bûôy.
Àn
);

279 
p
 = 
	`ngx_˝ymem
’, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

281 
p
 = 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a


282 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

283 *
p
 = '-';

285 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
)

286 + ("250 STARTTLS" 
CRLF
) - 1;

288 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

289 i‡(
p
 =
NULL
) {

290  
NGX_CONF_ERROR
;

293 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

294 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

296 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, 
auth
 - conf->capability.data);

298 
	`ngx_mem˝y
(
p
, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

300 i‡(
œ°
 < 
auth
) {

301 
p
 = 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a


302 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

303 *
p
 = '-';

306  
NGX_CONF_OK
;

307 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_smtp_module.h

8 #i‚de‡
_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

15 
	~<ngx_maû_smç_moduÀ.h
>

19 
ngx_m£c_t
 
	mgªëög_dñay
;

21 
size_t
 
	m˛õ¡_buf„r_size
;

23 
ngx_°r_t
 
	mˇ∑bûôy
;

24 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

25 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

27 
ngx_°r_t
 
	m£rvî_«me
;

28 
ngx_°r_t
 
	mgªëög
;

30 
ngx_uöt_t
 
	mauth_mëhods
;

32 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

33 } 
	tngx_maû_smç_§v_c⁄f_t
;

36 
ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

37 
ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

38 
ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
);

39 
ngx_öt_t
 
ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

42 
ngx_moduÀ_t
 
ngx_maû_smç_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_maû.h
>

13 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

14 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

17 *
ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 *
ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

20 *
ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_maû_°¨âls_°©e
[] = {

29 { 
ngx_°rög
("off"), 
NGX_MAIL_STARTTLS_OFF
 },

30 { 
ngx_°rög
("⁄"), 
NGX_MAIL_STARTTLS_ON
 },

31 { 
ngx_°rög
("⁄ly"), 
NGX_MAIL_STARTTLS_ONLY
 },

32 { 
ngx_nuŒ_°rög
, 0 }

37 
ngx_c⁄f_bômask_t
 
	gngx_maû_s¶_¥Ÿocﬁs
[] = {

38 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

39 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

40 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

41 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

42 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

43 { 
ngx_nuŒ_°rög
, 0 }

47 
ngx_comm™d_t
 
	gngx_maû_s¶_comm™ds
[] = {

49 { 
ngx_°rög
("ssl"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

51 
ngx_maû_s¶_íabÀ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
íabÀ
),

54 
NULL
 },

56 { 
ngx_°rög
("starttls"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_maû_s¶_°¨âls
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
°¨âls
),

61 
ngx_maû_°¨âls_°©e
 },

63 { 
ngx_°rög
("ssl_certificate"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_°r_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã
),

68 
NULL
 },

70 { 
ngx_°rög
("ssl_certificate_key"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_°r_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã_key
),

75 
NULL
 },

77 { 
ngx_°rög
("ssl_dhparam"),

78 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_°r_¶Ÿ
,

80 
NGX_MAIL_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
dh∑øm
),

82 
NULL
 },

84 { 
ngx_°rög
("ssl_ecdh_curve"),

85 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_°r_¶Ÿ
,

87 
NGX_MAIL_SRV_CONF_OFFSET
,

88 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
ecdh_curve
),

89 
NULL
 },

91 { 
ngx_°rög
("ssl_protocols"),

92 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

93 
ngx_c⁄f_£t_bômask_¶Ÿ
,

94 
NGX_MAIL_SRV_CONF_OFFSET
,

95 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥Ÿocﬁs
),

96 &
ngx_maû_s¶_¥Ÿocﬁs
 },

98 { 
ngx_°rög
("ssl_ciphers"),

99 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_°r_¶Ÿ
,

101 
NGX_MAIL_SRV_CONF_OFFSET
,

102 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
cùhîs
),

103 
NULL
 },

105 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

106 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

107 
ngx_c⁄f_£t_Êag_¶Ÿ
,

108 
NGX_MAIL_SRV_CONF_OFFSET
,

109 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

110 
NULL
 },

112 { 
ngx_°rög
("ssl_session_cache"),

113 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

114 
ngx_maû_s¶_£ssi⁄_ˇche
,

115 
NGX_MAIL_SRV_CONF_OFFSET
,

117 
NULL
 },

119 { 
ngx_°rög
("ssl_session_tickets"),

120 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

121 
ngx_c⁄f_£t_Êag_¶Ÿ
,

122 
NGX_MAIL_SRV_CONF_OFFSET
,

123 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_tickës
),

124 
NULL
 },

126 { 
ngx_°rög
("ssl_session_ticket_key"),

127 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

128 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

129 
NGX_MAIL_SRV_CONF_OFFSET
,

130 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_tickë_keys
),

131 
NULL
 },

133 { 
ngx_°rög
("ssl_session_timeout"),

134 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

135 
ngx_c⁄f_£t_£c_¶Ÿ
,

136 
NGX_MAIL_SRV_CONF_OFFSET
,

137 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_timeout
),

138 
NULL
 },

140 
ngx_nuŒ_comm™d


144 
ngx_maû_moduÀ_t
 
	gngx_maû_s¶_moduÀ_˘x
 = {

145 
NULL
,

147 
NULL
,

148 
NULL
,

150 
ngx_maû_s¶_¸óã_c⁄f
,

151 
ngx_maû_s¶_mîge_c⁄f


155 
ngx_moduÀ_t
 
	gngx_maû_s¶_moduÀ
 = {

156 
NGX_MODULE_V1
,

157 &
ngx_maû_s¶_moduÀ_˘x
,

158 
ngx_maû_s¶_comm™ds
,

159 
NGX_MAIL_MODULE
,

160 
NULL
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NULL
,

165 
NULL
,

166 
NULL
,

167 
NGX_MODULE_V1_PADDING


171 
ngx_°r_t
 
	gngx_maû_s¶_£ss_id_˘x
 = 
ngx_°rög
("MAIL");

175 
	$ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

177 
ngx_maû_s¶_c⁄f_t
 *
scf
;

179 
scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_s¶_c⁄f_t
));

180 i‡(
scf
 =
NULL
) {

181  
NULL
;

196 
scf
->
íabÀ
 = 
NGX_CONF_UNSET
;

197 
scf
->
°¨âls
 = 
NGX_CONF_UNSET_UINT
;

198 
scf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

199 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

200 
scf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

201 
scf
->
£ssi⁄_tickës
 = 
NGX_CONF_UNSET
;

202 
scf
->
£ssi⁄_tickë_keys
 = 
NGX_CONF_UNSET_PTR
;

204  
scf
;

205 
	}
}

209 
	$ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

211 
ngx_maû_s¶_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

212 
ngx_maû_s¶_c⁄f_t
 *
c⁄f
 = 
chûd
;

214 *
mode
;

215 
ngx_poﬁ_˛ónup_t
 *
˛n
;

217 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

218 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°¨âls
, 
¥ev
->starttls,

219 
NGX_MAIL_STARTTLS_OFF
);

221 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

222 
¥ev
->
£ssi⁄_timeout
, 300);

224 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

225 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

227 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

228 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


229 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

231 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

232 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

234 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

236 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

237 
NGX_DEFAULT_ECDH_CURVE
);

239 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

242 
c⁄f
->
s¶
.
log
 = 
cf
->log;

244 i‡(
c⁄f
->
íabÀ
) {

245 
mode
 = "ssl";

247 } i‡(
c⁄f
->
°¨âls
 !
NGX_MAIL_STARTTLS_OFF
) {

248 
mode
 = "starttls";

251 
mode
 = "";

254 i‡(
c⁄f
->
fûe
 =
NULL
) {

255 
c⁄f
->
fûe
 = 
¥ev
->file;

256 
c⁄f
->
löe
 = 
¥ev
->line;

259 i‡(*
mode
) {

261 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

262 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

265 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

266  
NGX_CONF_ERROR
;

269 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

270 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

273 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

274  
NGX_CONF_ERROR
;

279 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

280  
NGX_CONF_OK
;

283 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

284 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

287 &
c⁄f
->
˚πifiˇã
);

288  
NGX_CONF_ERROR
;

292 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

293  
NGX_CONF_ERROR
;

296 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

297 i‡(
˛n
 =
NULL
) {

298  
NGX_CONF_ERROR
;

301 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

302 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

304 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

305 &
c⁄f
->
˚πifiˇã_key
)

306 !
NGX_OK
)

308  
NGX_CONF_ERROR
;

311 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

312 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

315 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

317 &
c⁄f
->
cùhîs
);

318  
NGX_CONF_ERROR
;

321 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

322 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

325 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

327 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

328  
NGX_CONF_ERROR
;

331 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

332  
NGX_CONF_ERROR
;

335 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

336 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

338 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

339 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

342 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_maû_s¶_£ss_id_˘x
,

343 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

344 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

345 !
NGX_OK
)

347  
NGX_CONF_ERROR
;

350 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_tickës
,

351 
¥ev
->
£ssi⁄_tickës
, 1);

353 #ifde‡
SSL_OP_NO_TICKET


354 i‡(!
c⁄f
->
£ssi⁄_tickës
) {

355 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_NO_TICKET
);

359 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£ssi⁄_tickë_keys
,

360 
¥ev
->
£ssi⁄_tickë_keys
, 
NULL
);

362 i‡(
	`ngx_s¶_£ssi⁄_tickë_keys
(
cf
, &
c⁄f
->
s¶
, c⁄f->
£ssi⁄_tickë_keys
)

363 !
NGX_OK
)

365  
NGX_CONF_ERROR
;

368  
NGX_CONF_OK
;

369 
	}
}

373 
	$ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

375 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

377 *
rv
;

379 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

381 i‡(
rv
 !
NGX_CONF_OK
) {

382  
rv
;

385 i‡(
scf
->
íabÀ
 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

386 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

388  
NGX_CONF_ERROR
;

391 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

392 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

394  
NGX_CONF_OK
;

395 
	}
}

399 
	$ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

401 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

403 *
rv
;

405 
rv
 = 
	`ngx_c⁄f_£t_íum_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

407 i‡(
rv
 !
NGX_CONF_OK
) {

408  
rv
;

411 i‡(
scf
->
íabÀ
 =1 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

412 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

414  
NGX_CONF_ERROR
;

417 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

418 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

420  
NGX_CONF_OK
;

421 
	}
}

425 
	$ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

427 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

429 
size_t
 
Àn
;

430 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

431 
ngx_öt_t
 
n
;

432 
ngx_uöt_t
 
i
, 
j
;

434 
vÆue
 = 
cf
->
¨gs
->
ñts
;

436 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

438 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

439 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

443 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

444 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

448 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

449 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

453 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

454 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

457 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

458 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

460 i‡(
n
 =
NGX_ERROR
) {

461 
övÆid
;

464 
scf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

469 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

470 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

473 
Àn
 = 0;

475 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

476 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

480 
Àn
++;

483 i‡(
Àn
 == 0) {

484 
övÆid
;

487 
«me
.
Àn
 =Üen;

488 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

490 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

491 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

493 
n
 = 
	`ngx_∑r£_size
(&
size
);

495 i‡(
n
 =
NGX_ERROR
) {

496 
övÆid
;

499 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

500 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

502 &
vÆue
[
i
]);

504  
NGX_CONF_ERROR
;

507 
scf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

508 &
ngx_maû_s¶_moduÀ
);

509 i‡(
scf
->
shm_z⁄e
 =
NULL
) {

510  
NGX_CONF_ERROR
;

513 
scf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

518 
övÆid
;

521 i‡(
scf
->
shm_z⁄e
 && scf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

522 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

525  
NGX_CONF_OK
;

527 
övÆid
:

529 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

530 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

532  
NGX_CONF_ERROR
;

533 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_ssl_module.h

8 #i‚de‡
_NGX_MAIL_SSL_H_INCLUDED_


9 
	#_NGX_MAIL_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

17 
	#NGX_MAIL_STARTTLS_OFF
 0

	)

18 
	#NGX_MAIL_STARTTLS_ON
 1

	)

19 
	#NGX_MAIL_STARTTLS_ONLY
 2

	)

23 
ngx_Êag_t
 
	míabÀ
;

24 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

26 
ngx_s¶_t
 
	ms¶
;

28 
ngx_uöt_t
 
	m°¨âls
;

29 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

40 
ngx_°r_t
 
	mcùhîs
;

42 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

44 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

45 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

47 
u_ch¨
 *
	mfûe
;

48 
ngx_uöt_t
 
	mlöe
;

49 } 
	tngx_maû_s¶_c⁄f_t
;

52 
ngx_moduÀ_t
 
ngx_maû_s¶_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/misc/ngx_google_perftools_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

16 
ProfûîSèπ
(
u_ch¨
* 
‚ame
);

17 
ProfûîSt›
();

18 
ProfûîRegi°îThªad
();

21 *
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_öt_t
 
ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_°r_t
 
	m¥ofûes
;

27 } 
	tngx_googÀ_≥r·oﬁs_c⁄f_t
;

30 
ngx_comm™d_t
 
	gngx_googÀ_≥r·oﬁs_comm™ds
[] = {

32 { 
ngx_°rög
("google_perftools_profiles"),

33 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

34 
ngx_c⁄f_£t_°r_¶Ÿ
,

36 
off£tof
(
ngx_googÀ_≥r·oﬁs_c⁄f_t
, 
¥ofûes
),

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_c‹e_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ_˘x
 = {

44 
ngx_°rög
("google_perftools"),

45 
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_googÀ_≥r·oﬁs_moduÀ_˘x
,

53 
ngx_googÀ_≥r·oﬁs_comm™ds
,

54 
NGX_CORE_MODULE
,

55 
NULL
,

56 
NULL
,

57 
ngx_googÀ_≥r·oﬁs_w‹kî
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

69 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

71 
g±cf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_googÀ_≥r·oﬁs_c⁄f_t
));

72 i‡(
g±cf
 =
NULL
) {

73  
NULL
;

82  
g±cf
;

83 
	}
}

86 
ngx_öt_t


87 
	$ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

89 
u_ch¨
 *
¥ofûe
;

90 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

92 
g±cf
 = (
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *)

93 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_googÀ_≥r·oﬁs_moduÀ
);

95 i‡(
g±cf
->
¥ofûes
.
Àn
 == 0) {

96  
NGX_OK
;

99 
¥ofûe
 = 
	`ngx_Æloc
(
g±cf
->
¥ofûes
.
Àn
 + 
NGX_INT_T_LEN
 + 2, 
cy˛e
->
log
);

100 i‡(
¥ofûe
 =
NULL
) {

101  
NGX_OK
;

104 i‡(
	`gëív
("CPUPROFILE")) {

106 
	`ProfûîSt›
();

109 
	`ngx_•rötf
(
¥ofûe
, "%V.%d%Z", &
g±cf
->
¥ofûes
, 
ngx_pid
);

111 i‡(
	`ProfûîSèπ
(
¥ofûe
)) {

113 
	`ProfûîRegi°îThªad
();

116 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_î∫o
,

117 "ProfûîSèπ(%sËÁûed", 
¥ofûe
);

120 
	`ngx_‰ì
(
¥ofûe
);

122  
NGX_OK
;

123 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/config

1 
	gngx_add⁄_«me
="ngx_rtmp_module"

3 
CORE_MODULES
="$CORE_MODULES

4 
ngx_πmp_moduÀ
 \

5 
ngx_πmp_c‹e_moduÀ
 \

6 
ngx_πmp_cmd_moduÀ
 \

7 
ngx_πmp_codec_moduÀ
 \

8 
ngx_πmp_ac˚ss_moduÀ
 \

9 
ngx_πmp_ªc‹d_moduÀ
 \

10 
ngx_πmp_live_moduÀ
 \

11 
ngx_πmp_∂ay_moduÀ
 \

12 
ngx_πmp_Êv_moduÀ
 \

13 
ngx_πmp_mp4_moduÀ
 \

14 
ngx_πmp_√tˇŒ_moduÀ
 \

15 
ngx_πmp_ªœy_moduÀ
 \

16 
ngx_πmp_exec_moduÀ
 \

17 
ngx_πmp_auto_push_moduÀ
 \

18 
ngx_πmp_nŸify_moduÀ
 \

19 
ngx_πmp_log_moduÀ
 \

20 
ngx_πmp_limô_moduÀ
 \

21 
ngx_πmp_hls_moduÀ
 \

22 
ngx_πmp_dash_moduÀ
 \

26 
HTTP_MODULES
="$HTTP_MODULES \
_πmp_°©_moduÀ \
_πmp_c⁄åﬁ_moduÀ \
"

32 
NGX_ADDON_DEPS
="$NGX_ADDON_DEPS \
$ngx_addon_dir/ngx_rtmp_amf.h \
$ngx_addon_dir/ngx_rtmp_bandwidth.h \
$ngx_addon_dir/ngx_rtmp_cmd_module.h \
$ngx_addon_dir/ngx_rtmp_codec_module.h \
$ngx_addon_dir/ngx_rtmp_eval.h \
$ngx_addon_dir/ngx_rtmp.h \
$ngx_addon_dir/ngx_rtmp_version.h \
$ngx_addon_dir/ngx_rtmp_live_module.h \
$ngx_addon_dir/ngx_rtmp_netcall_module.h \
$ngx_addon_dir/ngx_rtmp_play_module.h \
$ngx_addon_dir/ngx_rtmp_record_module.h \
$ngx_addon_dir/ngx_rtmp_relay_module.h \
$ngx_addon_dir/ngx_rtmp_streams.h \
$ngx_addon_dir/ngx_rtmp_bitop.h \
$ngx_addon_dir/ngx_rtmp_proxy_protocol.h \
$ngx_addon_dir/hls/ngx_rtmp_mpegts.h \
$ngx_addon_dir/dash/ngx_rtmp_mp4.h \
"

53 
NGX_ADDON_SRCS
="$NGX_ADDON_SRCS \
$ngx_addon_dir/ngx_rtmp.c \
$ngx_addon_dir/ngx_rtmp_init.c \
$ngx_addon_dir/ngx_rtmp_handshake.c \
$ngx_addon_dir/ngx_rtmp_handler.c \
$ngx_addon_dir/ngx_rtmp_amf.c \
$ngx_addon_dir/ngx_rtmp_send.c \
$ngx_addon_dir/ngx_rtmp_shared.c \
$ngx_addon_dir/ngx_rtmp_eval.c \
$ngx_addon_dir/ngx_rtmp_receive.c \
$ngx_addon_dir/ngx_rtmp_core_module.c \
$ngx_addon_dir/ngx_rtmp_cmd_module.c \
$ngx_addon_dir/ngx_rtmp_codec_module.c \
$ngx_addon_dir/ngx_rtmp_access_module.c \
$ngx_addon_dir/ngx_rtmp_record_module.c \
$ngx_addon_dir/ngx_rtmp_live_module.c \
$ngx_addon_dir/ngx_rtmp_play_module.c \
$ngx_addon_dir/ngx_rtmp_flv_module.c \
$ngx_addon_dir/ngx_rtmp_mp4_module.c \
$ngx_addon_dir/ngx_rtmp_netcall_module.c \
$ngx_addon_dir/ngx_rtmp_stat_module.c \
$ngx_addon_dir/ngx_rtmp_control_module.c \
$ngx_addon_dir/ngx_rtmp_relay_module.c \
$ngx_addon_dir/ngx_rtmp_bandwidth.c \
$ngx_addon_dir/ngx_rtmp_exec_module.c \
$ngx_addon_dir/ngx_rtmp_auto_push_module.c \
$ngx_addon_dir/ngx_rtmp_notify_module.c \
$ngx_addon_dir/ngx_rtmp_log_module.c \
$ngx_addon_dir/ngx_rtmp_limit_module.c \
$ngx_addon_dir/ngx_rtmp_bitop.c \
$ngx_addon_dir/ngx_rtmp_proxy_protocol.c \
$ngx_addon_dir/hls/ngx_rtmp_hls_module.c \
$ngx_addon_dir/dash/ngx_rtmp_dash_module.c \
$ngx_addon_dir/hls/ngx_rtmp_mpegts.c \
$ngx_addon_dir/dash/ngx_rtmp_mp4.c \
"

89 
CFLAGS
="$CFLAGS -I$ngx_addon_dir"

91 
USE_OPENSSL
=
YES


	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/dash/ngx_rtmp_dash_module.c

3 
	~<ngx_c⁄fig.h
>

4 
	~<ngx_c‹e.h
>

5 
	~<ngx_πmp.h
>

6 
	~<ngx_πmp_codec_moduÀ.h
>

7 
	~"ngx_πmp_live_moduÀ.h
"

8 
	~"ngx_πmp_mp4.h
"

11 
ngx_πmp_publish_±
 
	g√xt_publish
;

12 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

13 
ngx_πmp_°ªam_begö_±
 
	g√xt_°ªam_begö
;

14 
ngx_πmp_°ªam_eof_±
 
	g√xt_°ªam_eof
;

17 
ngx_öt_t
 
ngx_πmp_dash_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

18 * 
ngx_πmp_dash_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

19 * 
ngx_πmp_dash_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

20 *
∑ª¡
, *
chûd
);

21 
ngx_öt_t
 
ngx_πmp_dash_wrôe_öô_£gmíts
(
ngx_πmp_£ssi⁄_t
 *
s
);

24 
	#NGX_RTMP_DASH_BUFSIZE
 (1024*1024)

	)

25 
	#NGX_RTMP_DASH_MAX_MDAT
 (10*1024*1024)

	)

26 
	#NGX_RTMP_DASH_MAX_SAMPLES
 1024

	)

27 
	#NGX_RTMP_DASH_DIR_ACCESS
 0744

	)

31 
uöt32_t
 
	mtime°amp
;

32 
uöt32_t
 
	mduøti⁄
;

33 } 
	tngx_πmp_dash_‰ag_t
;

37 
ngx_uöt_t
 
	mid
;

38 
ngx_uöt_t
 
	m›íed
;

39 
ngx_uöt_t
 
	mmd©_size
;

40 
ngx_uöt_t
 
	mßm∂e_cou¡
;

41 
ngx_uöt_t
 
	mßm∂e_mask
;

42 
ngx_fd_t
 
	mfd
;

43 
	mty≥
;

44 
uöt32_t
 
	móæõ°_¥es_time
;

45 
uöt32_t
 
	mœã°_¥es_time
;

46 
ngx_πmp_mp4_ßm∂e_t
 
	mßm∂es
[
NGX_RTMP_DASH_MAX_SAMPLES
];

47 } 
	tngx_πmp_dash_åack_t
;

51 
ngx_°r_t
 
	m∂ayli°
;

52 
ngx_°r_t
 
	m∂ayli°_bak
;

53 
ngx_°r_t
 
	m«me
;

54 
ngx_°r_t
 
	m°ªam
;

55 
ngx_time_t
 
	m°¨t_time
;

57 
ngx_uöt_t
 
	mn‰ags
;

58 
ngx_uöt_t
 
	m‰ag
;

59 
ngx_πmp_dash_‰ag_t
 *
	m‰ags
;

61 
	m›íed
:1;

62 
	mhas_video
:1;

63 
	mhas_audio
:1;

65 
ngx_fûe_t
 
	mvideo_fûe
;

66 
ngx_fûe_t
 
	maudio_fûe
;

68 
ngx_uöt_t
 
	mid
;

70 
ngx_πmp_dash_åack_t
 
	maudio
;

71 
ngx_πmp_dash_åack_t
 
	mvideo
;

72 } 
	tngx_πmp_dash_˘x_t
;

76 
ngx_°r_t
 
	m∑th
;

77 
ngx_m£c_t
 
	m∂ayÀn
;

78 } 
	tngx_πmp_dash_˛ónup_t
;

82 
ngx_Êag_t
 
	mdash
;

83 
ngx_m£c_t
 
	m‰agÀn
;

84 
ngx_m£c_t
 
	m∂ayÀn
;

85 
ngx_Êag_t
 
	m√°ed
;

86 
ngx_°r_t
 
	m∑th
;

87 
ngx_uöt_t
 
	mwö‰ags
;

88 
ngx_Êag_t
 
	m˛ónup
;

89 
ngx_∑th_t
 *
	m¶Ÿ
;

90 } 
	tngx_πmp_dash_≠p_c⁄f_t
;

93 
ngx_comm™d_t
 
	gngx_πmp_dash_comm™ds
[] = {

95 { 
ngx_°rög
("dash"),

96 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_Êag_¶Ÿ
,

98 
NGX_RTMP_APP_CONF_OFFSET
,

99 
off£tof
(
ngx_πmp_dash_≠p_c⁄f_t
, 
dash
),

100 
NULL
 },

102 { 
ngx_°rög
("dash_fragment"),

103 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

104 
ngx_c⁄f_£t_m£c_¶Ÿ
,

105 
NGX_RTMP_APP_CONF_OFFSET
,

106 
off£tof
(
ngx_πmp_dash_≠p_c⁄f_t
, 
‰agÀn
),

107 
NULL
 },

109 { 
ngx_°rög
("dash_path"),

110 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

111 
ngx_c⁄f_£t_°r_¶Ÿ
,

112 
NGX_RTMP_APP_CONF_OFFSET
,

113 
off£tof
(
ngx_πmp_dash_≠p_c⁄f_t
, 
∑th
),

114 
NULL
 },

116 { 
ngx_°rög
("dash_playlist_length"),

117 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

118 
ngx_c⁄f_£t_m£c_¶Ÿ
,

119 
NGX_RTMP_APP_CONF_OFFSET
,

120 
off£tof
(
ngx_πmp_dash_≠p_c⁄f_t
, 
∂ayÀn
),

121 
NULL
 },

123 { 
ngx_°rög
("dash_cleanup"),

124 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

125 
ngx_c⁄f_£t_Êag_¶Ÿ
,

126 
NGX_RTMP_APP_CONF_OFFSET
,

127 
off£tof
(
ngx_πmp_dash_≠p_c⁄f_t
, 
˛ónup
),

128 
NULL
 },

130 { 
ngx_°rög
("dash_nested"),

131 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

132 
ngx_c⁄f_£t_Êag_¶Ÿ
,

133 
NGX_RTMP_APP_CONF_OFFSET
,

134 
off£tof
(
ngx_πmp_dash_≠p_c⁄f_t
, 
√°ed
),

135 
NULL
 },

137 
ngx_nuŒ_comm™d


141 
ngx_πmp_moduÀ_t
 
	gngx_πmp_dash_moduÀ_˘x
 = {

142 
NULL
,

143 
ngx_πmp_dash_po°c⁄figuøti⁄
,

145 
NULL
,

146 
NULL
,

148 
NULL
,

149 
NULL
,

151 
ngx_πmp_dash_¸óã_≠p_c⁄f
,

152 
ngx_πmp_dash_mîge_≠p_c⁄f
,

156 
ngx_moduÀ_t
 
	gngx_πmp_dash_moduÀ
 = {

157 
NGX_MODULE_V1
,

158 &
ngx_πmp_dash_moduÀ_˘x
,

159 
ngx_πmp_dash_comm™ds
,

160 
NGX_RTMP_MODULE
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NULL
,

165 
NULL
,

166 
NULL
,

167 
NULL
,

168 
NGX_MODULE_V1_PADDING


172 
ngx_πmp_dash_‰ag_t
 *

173 
	$ngx_πmp_dash_gë_‰ag
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_öt_t
 
n
)

175 
ngx_πmp_dash_˘x_t
 *
˘x
;

176 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

178 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

179 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

181  &
˘x
->
‰ags
[(˘x->
‰ag
 + 
n
Ë% (
dacf
->
wö‰ags
 * 2 + 1)];

182 
	}
}

186 
	$ngx_πmp_dash_√xt_‰ag
(
ngx_πmp_£ssi⁄_t
 *
s
)

188 
ngx_πmp_dash_˘x_t
 *
˘x
;

189 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

191 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

192 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

194 i‡(
˘x
->
n‰ags
 =
dacf
->
wö‰ags
) {

195 
˘x
->
‰ag
++;

197 
˘x
->
n‰ags
++;

199 
	}
}

202 
ngx_öt_t


203 
	$ngx_πmp_dash_ª«me_fûe
(
u_ch¨
 *
§c
, u_ch¨ *
d°
)

207 #i‡(
NGX_WIN32
)

208  
	`MoveFûeEx
((
LPCTSTR
Ë
§c
, (LPCTSTRË
d°
, 
MOVEFILE_REPLACE_EXISTING
);

210  
	`ngx_ª«me_fûe
(
§c
, 
d°
);

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_πmp_dash_wrôe_∂ayli°
(
ngx_πmp_£ssi⁄_t
 *
s
)

218 *
£p
;

219 
u_ch¨
 *
p
, *
œ°
;

220 
ssize_t
 
n
;

221 
ngx_fd_t
 
fd
;

222 
tm
Åm;

223 
ngx_°r_t
 
n⁄ame
, *
«me
;

224 
ngx_uöt_t
 
i
;

225 
ngx_πmp_dash_˘x_t
 *
˘x
;

226 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

227 
ngx_πmp_dash_‰ag_t
 *
f
;

228 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

230 
u_ch¨
 
buf„r
[
NGX_RTMP_DASH_BUFSIZE
];

231 
u_ch¨
 
°¨t_time
[("1970-09-28T12:00:00+06:00")];

232 
u_ch¨
 
íd_time
[("1970-09-28T12:00:00+06:00")];

234 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

235 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

236 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

238 i‡(
dacf
 =
NULL
 || 
˘x
 =NULL || 
codec_˘x
 == NULL) {

239  
NGX_ERROR
;

242 i‡(
˘x
->
id
 == 0) {

243 
	`ngx_πmp_dash_wrôe_öô_£gmíts
(
s
);

246 
fd
 = 
	`ngx_›í_fûe
(
˘x
->
∂ayli°_bak
.
d©a
, 
NGX_FILE_WRONLY
,

247 
NGX_FILE_TRUNCATE
, 
NGX_FILE_DEFAULT_ACCESS
);

249 i‡(
fd
 =
NGX_INVALID_FILE
) {

250 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

251 "dash: o≥¿Áûed: '%V'", &
˘x
->
∂ayli°_bak
);

252  
NGX_ERROR
;

256 
	#NGX_RTMP_DASH_MANIFEST_HEADER
 \

271 " <Pîiod sèπ=\"PT0S\" id=\"dash\">\n"

	)

274 
	#NGX_RTMP_DASH_MANIFEST_VIDEO
 \

296 " <SegmítTimñöe>\n"

	)

299 
	#NGX_RTMP_DASH_MANIFEST_VIDEO_FOOTER
 \

303 " </Ad≠èti⁄Së>\n"

	)

306 
	#NGX_RTMP_DASH_MANIFEST_TIME
 \

307 " <SÅ=\"%uD\" d=\"%uD\"/>\n"

	)

310 
	#NGX_RTMP_DASH_MANIFEST_AUDIO
 \

330 " <SegmítTimñöe>\n"

	)

333 
	#NGX_RTMP_DASH_MANIFEST_AUDIO_FOOTER
 \

337 " </Ad≠èti⁄Së>\n"

	)

340 
	#NGX_RTMP_DASH_MANIFEST_FOOTER
 \

342 "</MPD>\n"

	)

344 
	`ngx_libc_loˇ…ime
(
˘x
->
°¨t_time
.
£c
 +

345 
	`ngx_πmp_dash_gë_‰ag
(
s
, 0)->
time°amp
 / 1000, &
tm
);

347 *
	`ngx_•rötf
(
°¨t_time
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",

348 
tm
.
tm_yór
 + 1900,Åm.
tm_m⁄
 + 1,

349 
tm
.
tm_mday
,Åm.
tm_hour
,

350 
tm
.
tm_mö
,Åm.
tm_£c
,

351 
˘x
->
°¨t_time
.
gmtoff
 < 0 ? '-' : '+',

352 
	`ngx_abs
(
˘x
->
°¨t_time
.
gmtoff
 / 60),

353 
	`ngx_abs
(
˘x
->
°¨t_time
.
gmtoff
 % 60)) = 0;

355 
	`ngx_libc_loˇ…ime
(
˘x
->
°¨t_time
.
£c
 +

356 (
	`ngx_πmp_dash_gë_‰ag
(
s
, 
˘x
->
n‰ags
 - 1)->
time°amp
 +

357 
	`ngx_πmp_dash_gë_‰ag
(
s
, 
˘x
->
n‰ags
 - 1)->
duøti⁄
) /

358 1000, &
tm
);

360 *
	`ngx_•rötf
(
íd_time
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",

361 
tm
.
tm_yór
 + 1900,Åm.
tm_m⁄
 + 1,

362 
tm
.
tm_mday
,Åm.
tm_hour
,

363 
tm
.
tm_mö
,Åm.
tm_£c
,

364 
˘x
->
°¨t_time
.
gmtoff
 < 0 ? '-' : '+',

365 
	`ngx_abs
(
˘x
->
°¨t_time
.
gmtoff
 / 60),

366 
	`ngx_abs
(
˘x
->
°¨t_time
.
gmtoff
 % 60)) = 0;

368 
œ°
 = 
buf„r
 + (buffer);

370 
p
 = 
	`ngx_¶¥ötf
(
buf„r
, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_HEADER
,

371 
°¨t_time
,

372 
íd_time
,

373 (
ngx_uöt_t
Ë(
dacf
->
‰agÀn
 / 1000),

374 (
ngx_uöt_t
Ë(
dacf
->
‰agÀn
 / 1000),

375 (
ngx_uöt_t
Ë(
dacf
->
‰agÀn
 / 500));

377 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, 
p
 - buffer);

379 
	`ngx_°r_nuŒ
(&
n⁄ame
);

381 
«me
 = (
dacf
->
√°ed
 ? &
n⁄ame
 : &
˘x
->name);

382 
£p
 = (
dacf
->
√°ed
 ? "" : "-");

384 i‡(
˘x
->
has_video
) {

385 
p
 = 
	`ngx_¶¥ötf
(
buf„r
, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_VIDEO
,

386 
codec_˘x
->
width
,

387 
codec_˘x
->
height
,

388 
codec_˘x
->
‰ame_øã
,

389 &
˘x
->
«me
,

390 
codec_˘x
->
avc_¥ofûe
,

391 
codec_˘x
->
avc_com∑t
,

392 
codec_˘x
->
avc_Àvñ
,

393 
codec_˘x
->
width
,

394 
codec_˘x
->
height
,

395 
codec_˘x
->
‰ame_øã
,

396 (
ngx_uöt_t
Ë(
codec_˘x
->
video_d©a_øã
 * 1000),

397 
«me
, 
£p
,

398 
«me
, 
£p
);

400 
i
 = 0; i < 
˘x
->
n‰ags
; i++) {

401 
f
 = 
	`ngx_πmp_dash_gë_‰ag
(
s
, 
i
);

402 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_TIME
,

403 
f
->
time°amp
, f->
duøti⁄
);

406 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_VIDEO_FOOTER
);

408 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, 
p
 - buffer);

411 i‡(
˘x
->
has_audio
) {

412 
p
 = 
	`ngx_¶¥ötf
(
buf„r
, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_AUDIO
,

413 &
˘x
->
«me
,

414 
codec_˘x
->
audio_codec_id
 =
NGX_RTMP_AUDIO_AAC
 ?

415 (
codec_˘x
->
Øc_sbr
 ? "40.5" : "40.2") : "6b",

416 
codec_˘x
->
ßm∂e_øã
,

417 (
ngx_uöt_t
Ë(
codec_˘x
->
audio_d©a_øã
 * 1000),

418 
«me
, 
£p
,

419 
«me
, 
£p
);

421 
i
 = 0; i < 
˘x
->
n‰ags
; i++) {

422 
f
 = 
	`ngx_πmp_dash_gë_‰ag
(
s
, 
i
);

423 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_TIME
,

424 
f
->
time°amp
, f->
duøti⁄
);

427 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_AUDIO_FOOTER
);

429 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, 
p
 - buffer);

432 
p
 = 
	`ngx_¶¥ötf
(
buf„r
, 
œ°
, 
NGX_RTMP_DASH_MANIFEST_FOOTER
);

433 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, 
p
 - buffer);

435 i‡(
n
 < 0) {

436 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

437 "dash: wrôêÁûed: '%V'", &
˘x
->
∂ayli°_bak
);

438 
	`ngx_˛o£_fûe
(
fd
);

439  
NGX_ERROR
;

442 
	`ngx_˛o£_fûe
(
fd
);

444 i‡(
	`ngx_πmp_dash_ª«me_fûe
(
˘x
->
∂ayli°_bak
.
d©a
, ctx->
∂ayli°
.data)

445 =
NGX_FILE_ERROR
)

447 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

449 &
˘x
->
∂ayli°_bak
, &˘x->
∂ayli°
);

450  
NGX_ERROR
;

453  
NGX_OK
;

454 
	}
}

457 
ngx_öt_t


458 
	$ngx_πmp_dash_wrôe_öô_£gmíts
(
ngx_πmp_£ssi⁄_t
 *
s
)

460 
ngx_fd_t
 
fd
;

461 
ngx_öt_t
 
rc
;

462 
ngx_buf_t
 
b
;

463 
ngx_πmp_dash_˘x_t
 *
˘x
;

464 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

466 
u_ch¨
 
buf„r
[
NGX_RTMP_DASH_BUFSIZE
];

468 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

469 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

471 i‡(
˘x
 =
NULL
 || 
codec_˘x
 == NULL) {

472  
NGX_ERROR
;

477 *
	`ngx_•rötf
(
˘x
->
°ªam
.
d©a
 + ctx->°ªam.
Àn
, "init.m4v") = 0;

479 
fd
 = 
	`ngx_›í_fûe
(
˘x
->
°ªam
.
d©a
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

480 
NGX_FILE_DEFAULT_ACCESS
);

482 i‡(
fd
 =
NGX_INVALID_FILE
) {

483 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

485  
NGX_ERROR
;

488 
b
.
°¨t
 = 
buf„r
;

489 
b
.
íd
 = b.
°¨t
 + (
buf„r
);

490 
b
.
pos
 = b.
œ°
 = b.
°¨t
;

492 
	`ngx_πmp_mp4_wrôe_·yp
(&
b
);

493 
	`ngx_πmp_mp4_wrôe_moov
(
s
, &
b
, 
NGX_RTMP_MP4_VIDEO_TRACK
);

495 
rc
 = 
	`ngx_wrôe_fd
(
fd
, 
b
.
°¨t
, (
size_t
Ë(b.
œ°
 - b.start));

496 i‡(
rc
 =
NGX_ERROR
) {

497 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

501 
	`ngx_˛o£_fûe
(
fd
);

505 *
	`ngx_•rötf
(
˘x
->
°ªam
.
d©a
 + ctx->°ªam.
Àn
, "init.m4a") = 0;

507 
fd
 = 
	`ngx_›í_fûe
(
˘x
->
°ªam
.
d©a
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

508 
NGX_FILE_DEFAULT_ACCESS
);

510 i‡(
fd
 =
NGX_INVALID_FILE
) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

513  
NGX_ERROR
;

516 
b
.
pos
 = b.
œ°
 = b.
°¨t
;

518 
	`ngx_πmp_mp4_wrôe_·yp
(&
b
);

519 
	`ngx_πmp_mp4_wrôe_moov
(
s
, &
b
, 
NGX_RTMP_MP4_AUDIO_TRACK
);

521 
rc
 = 
	`ngx_wrôe_fd
(
fd
, 
b
.
°¨t
, (
size_t
Ë(b.
œ°
 - b.start));

522 i‡(
rc
 =
NGX_ERROR
) {

523 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

527 
	`ngx_˛o£_fûe
(
fd
);

529  
NGX_OK
;

530 
	}
}

534 
	$ngx_πmp_dash_˛o£_‰agmít
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_dash_åack_t
 *
t
)

536 
u_ch¨
 *
pos
, *
pos1
;

537 
size_t
 
À·
;

538 
ssize_t
 
n
;

539 
ngx_fd_t
 
fd
;

540 
ngx_buf_t
 
b
;

541 
ngx_πmp_dash_˘x_t
 *
˘x
;

542 
ngx_πmp_dash_‰ag_t
 *
f
;

544 
u_ch¨
 
buf„r
[
NGX_RTMP_DASH_BUFSIZE
];

546 i‡(!
t
->
›íed
) {

550 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

552 
t
->
id
,Å->
ty≥
,Å->
óæõ°_¥es_time
);

554 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

556 
b
.
°¨t
 = 
buf„r
;

557 
b
.
íd
 = 
buf„r
 + (buffer);

558 
b
.
pos
 = b.
œ°
 = b.
°¨t
;

560 
	`ngx_πmp_mp4_wrôe_°yp
(&
b
);

562 
pos
 = 
b
.
œ°
;

563 
b
.
œ°
 += 44;

565 
	`ngx_πmp_mp4_wrôe_moof
(&
b
, 
t
->
óæõ°_¥es_time
,Å->
ßm∂e_cou¡
,

566 
t
->
ßm∂es
,Å->
ßm∂e_mask
,Å->
id
);

567 
pos1
 = 
b
.
œ°
;

568 
b
.
œ°
 = 
pos
;

570 
	`ngx_πmp_mp4_wrôe_sidx
(&
b
, 
t
->
md©_size
 + 8 + (
pos1
 - (
pos
 + 44)),

571 
t
->
óæõ°_¥es_time
,Å->
œã°_¥es_time
);

572 
b
.
œ°
 = 
pos1
;

573 
	`ngx_πmp_mp4_wrôe_md©
(&
b
, 
t
->
md©_size
 + 8);

577 
f
 = 
	`ngx_πmp_dash_gë_‰ag
(
s
, 
˘x
->
n‰ags
);

579 *
	`ngx_•rötf
(
˘x
->
°ªam
.
d©a
 + ctx->°ªam.
Àn
, "%uD.m4%c",

580 
f
->
time°amp
, 
t
->
ty≥
) = 0;

582 
fd
 = 
	`ngx_›í_fûe
(
˘x
->
°ªam
.
d©a
, 
NGX_FILE_RDWR
,

583 
NGX_FILE_TRUNCATE
, 
NGX_FILE_DEFAULT_ACCESS
);

585 i‡(
fd
 =
NGX_INVALID_FILE
) {

586 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

588 
d⁄e
;

591 i‡(
	`ngx_wrôe_fd
(
fd
, 
b
.
pos
, (
size_t
Ë(b.
œ°
 - b.pos)Ë=
NGX_ERROR
) {

592 
d⁄e
;

595 
À·
 = (
size_t
Ë
t
->
md©_size
;

597 #i‡(
NGX_WIN32
)

598 i‡(
	`SëFûePoöãr
(
t
->
fd
, 0, 0, 
FILE_BEGIN
Ë=
INVALID_SET_FILE_POINTER
) {

599 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

601 
d⁄e
;

604 i‡(
	`l£ek
(
t
->
fd
, 0, 
SEEK_SET
) == -1) {

605 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

607 
d⁄e
;

611 
À·
 > 0) {

613 
n
 = 
	`ngx_ªad_fd
(
t
->
fd
, 
buf„r
, 
	`ngx_mö
((buf„r), 
À·
));

614 i‡(
n
 =
NGX_ERROR
) {

618 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, (
size_t
)Ç);

619 i‡(
n
 =
NGX_ERROR
) {

623 
À·
 -
n
;

626 
d⁄e
:

628 i‡(
fd
 !
NGX_INVALID_FILE
) {

629 
	`ngx_˛o£_fûe
(
fd
);

632 
	`ngx_˛o£_fûe
(
t
->
fd
);

634 
t
->
fd
 = 
NGX_INVALID_FILE
;

635 
t
->
›íed
 = 0;

636 
	}
}

639 
ngx_öt_t


640 
	$ngx_πmp_dash_˛o£_‰agmíts
(
ngx_πmp_£ssi⁄_t
 *
s
)

642 
ngx_πmp_dash_˘x_t
 *
˘x
;

644 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

645 i‡(
˘x
 =
NULL
 || !˘x->
›íed
) {

646  
NGX_OK
;

649 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

652 
	`ngx_πmp_dash_˛o£_‰agmít
(
s
, &
˘x
->
video
);

653 
	`ngx_πmp_dash_˛o£_‰agmít
(
s
, &
˘x
->
audio
);

655 
	`ngx_πmp_dash_√xt_‰ag
(
s
);

657 
	`ngx_πmp_dash_wrôe_∂ayli°
(
s
);

659 
˘x
->
id
++;

660 
˘x
->
›íed
 = 0;

662  
NGX_OK
;

663 
	}
}

666 
ngx_öt_t


667 
	$ngx_πmp_dash_›í_‰agmít
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_dash_åack_t
 *
t
,

668 
ngx_uöt_t
 
id
, 
ty≥
)

670 
ngx_πmp_dash_˘x_t
 *
˘x
;

672 i‡(
t
->
›íed
) {

673  
NGX_OK
;

676 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

677 "dash: o≥¿‰agmíàid=%ui,Åy≥='%c'", 
id
, 
ty≥
);

679 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

681 *
	`ngx_•rötf
(
˘x
->
°ªam
.
d©a
 + ctx->°ªam.
Àn
, "øw.m4%c", 
ty≥
) = 0;

683 
t
->
fd
 = 
	`ngx_›í_fûe
(
˘x
->
°ªam
.
d©a
, 
NGX_FILE_RDWR
,

684 
NGX_FILE_TRUNCATE
, 
NGX_FILE_DEFAULT_ACCESS
);

686 i‡(
t
->
fd
 =
NGX_INVALID_FILE
) {

687 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

689  
NGX_ERROR
;

692 
t
->
id
 = id;

693 
t
->
ty≥
 =Åype;

694 
t
->
ßm∂e_cou¡
 = 0;

695 
t
->
óæõ°_¥es_time
 = 0;

696 
t
->
œã°_¥es_time
 = 0;

697 
t
->
md©_size
 = 0;

698 
t
->
›íed
 = 1;

700 i‡(
ty≥
 == 'v') {

701 
t
->
ßm∂e_mask
 = 
NGX_RTMP_MP4_SAMPLE_SIZE
|

702 
NGX_RTMP_MP4_SAMPLE_DURATION
|

703 
NGX_RTMP_MP4_SAMPLE_DELAY
|

704 
NGX_RTMP_MP4_SAMPLE_KEY
;

706 
t
->
ßm∂e_mask
 = 
NGX_RTMP_MP4_SAMPLE_SIZE
|

707 
NGX_RTMP_MP4_SAMPLE_DURATION
;

710  
NGX_OK
;

711 
	}
}

714 
ngx_öt_t


715 
	$ngx_πmp_dash_›í_‰agmíts
(
ngx_πmp_£ssi⁄_t
 *
s
)

717 
ngx_πmp_dash_˘x_t
 *
˘x
;

719 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

722 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

724 i‡(
˘x
->
›íed
) {

725  
NGX_OK
;

728 
	`ngx_πmp_dash_›í_‰agmít
(
s
, &
˘x
->
video
, ctx->
id
, 'v');

730 
	`ngx_πmp_dash_›í_‰agmít
(
s
, &
˘x
->
audio
, ctx->
id
, 'a');

732 
˘x
->
›íed
 = 1;

734  
NGX_OK
;

735 
	}
}

738 
ngx_öt_t


739 
	$ngx_πmp_dash_ísuª_dúe˘‹y
(
ngx_πmp_£ssi⁄_t
 *
s
)

741 
size_t
 
Àn
;

742 
ngx_fûe_öfo_t
 
fi
;

743 
ngx_πmp_dash_˘x_t
 *
˘x
;

744 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

746 
u_ch¨
 
∑th
[
NGX_MAX_PATH
 + 1];

748 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

750 *
	`ngx_¢¥ötf
(
∑th
, ’©hË- 1, "%V", &
dacf
->path) = 0;

752 i‡(
	`ngx_fûe_öfo
(
∑th
, &
fi
Ë=
NGX_FILE_ERROR
) {

754 i‡(
ngx_î∫o
 !
NGX_ENOENT
) {

755 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

756 "dash: " 
ngx_fûe_öfo_n
 " failed on '%V'",

757 &
dacf
->
∑th
);

758  
NGX_ERROR
;

763 i‡(
	`ngx_¸óã_dú
(
∑th
, 
NGX_RTMP_DASH_DIR_ACCESS
Ë=
NGX_FILE_ERROR
) {

764 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

765 "dash: " 
ngx_¸óã_dú_n
 " failed on '%V'",

766 &
dacf
->
∑th
);

767  
NGX_ERROR
;

770 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

771 "dash: dúe˘‹y '%V' cª©ed", &
dacf
->
∑th
);

775 i‡(!
	`ngx_is_dú
(&
fi
)) {

776 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

778 &
dacf
->
∑th
);

779  
NGX_ERROR
;

782 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

783 "dash: dúe˘‹y '%V'Éxi°s", &
dacf
->
∑th
);

786 i‡(!
dacf
->
√°ed
) {

787  
NGX_OK
;

790 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

792 
Àn
 = 
dacf
->
∑th
.len;

793 i‡(
dacf
->
∑th
.
d©a
[
Àn
 - 1] == '/') {

794 
Àn
--;

797 *
	`ngx_¢¥ötf
(
∑th
, ’©hË- 1, "%*s/%V", 
Àn
, 
dacf
->∑th.
d©a
,

798 &
˘x
->
«me
) = 0;

800 i‡(
	`ngx_fûe_öfo
(
∑th
, &
fi
Ë!
NGX_FILE_ERROR
) {

802 i‡(
	`ngx_is_dú
(&
fi
)) {

803 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

804 "dash: dúe˘‹y '%s'Éxi°s", 
∑th
);

805  
NGX_OK
;

808 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

809 "dash: '%s'Éxi°†™d i†nŸá dúe˘‹y", 
∑th
);

811  
NGX_ERROR
;

814 i‡(
ngx_î∫o
 !
NGX_ENOENT
) {

815 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

816 "dash: " 
ngx_fûe_öfo_n
 " faûed o¿'%s'", 
∑th
);

817  
NGX_ERROR
;

822 i‡(
	`ngx_¸óã_dú
(
∑th
, 
NGX_RTMP_DASH_DIR_ACCESS
Ë=
NGX_FILE_ERROR
) {

823 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

824 "dash: " 
ngx_¸óã_dú_n
 " faûed o¿'%s'", 
∑th
);

825  
NGX_ERROR
;

828 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

829 "dash: dúe˘‹y '%s' cª©ed", 
∑th
);

831  
NGX_OK
;

832 
	}
}

835 
ngx_öt_t


836 
	$ngx_πmp_dash_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

838 
u_ch¨
 *
p
;

839 
size_t
 
Àn
;

840 
ngx_πmp_dash_˘x_t
 *
˘x
;

841 
ngx_πmp_dash_‰ag_t
 *
f
;

842 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

844 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

845 i‡(
dacf
 =
NULL
 || !dacf->
dash
 || dacf->
∑th
.
Àn
 == 0) {

846 
√xt
;

849 i‡(
s
->
auto_pushed
) {

850 
√xt
;

853 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

854 "dash:Öublish:Çame='%s'Åy≥='%s'", 
v
->
«me
, v->
ty≥
);

856 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

858 i‡(
˘x
 =
NULL
) {

859 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_dash_˘x_t
));

860 i‡(
˘x
 =
NULL
) {

861 
√xt
;

863 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_dash_moduÀ
);

866 i‡(
˘x
->
›íed
) {

867 
√xt
;

870 
f
 = 
˘x
->
‰ags
;

871 
	`ngx_memzîo
(
˘x
, (
ngx_πmp_dash_˘x_t
));

872 
˘x
->
‰ags
 = 
f
;

875 i‡(
˘x
->
‰ags
 =
NULL
) {

876 
˘x
->
‰ags
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

877 (
ngx_πmp_dash_‰ag_t
) *

878 (
dacf
->
wö‰ags
 * 2 + 1));

879 i‡(
˘x
->
‰ags
 =
NULL
) {

880  
NGX_ERROR
;

884 
˘x
->
id
 = 0;

886 i‡(
	`ngx_°r°r
(
v
->
«me
, "..")) {

887 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

888 "dash: bad såómÇame: '%s'", 
v
->
«me
);

889  
NGX_ERROR
;

892 
˘x
->
«me
.
Àn
 = 
	`ngx_°æí
(
v
->name);

893 
˘x
->
«me
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, ctx->«me.
Àn
 + 1);

895 i‡(
˘x
->
«me
.
d©a
 =
NULL
) {

896  
NGX_ERROR
;

899 *
	`ngx_˝ymem
(
˘x
->
«me
.
d©a
, 
v
->«me, ctx->«me.
Àn
) = 0;

901 
Àn
 = 
dacf
->
∑th
.À¿+ 1 + 
˘x
->
«me
.len + (".mpd");

902 i‡(
dacf
->
√°ed
) {

903 
Àn
 += ("/index") - 1;

906 
˘x
->
∂ayli°
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

907 
p
 = 
	`ngx_˝ymem
(
˘x
->
∂ayli°
.
d©a
, 
dacf
->
∑th
.d©a, dacf->∑th.
Àn
);

909 i‡(
p
[-1] != '/') {

910 *
p
++ = '/';

913 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

921 
˘x
->
°ªam
.
Àn
 = 
p
 - ctx->
∂ayli°
.
d©a
 + 1;

922 
˘x
->
°ªam
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

923 
˘x
->
°ªam
.
Àn
 + 
NGX_INT32_LEN
 +

926 
	`ngx_mem˝y
(
˘x
->
°ªam
.
d©a
, ctx->
∂ayli°
.d©a, ctx->°ªam.
Àn
 - 1);

927 
˘x
->
°ªam
.
d©a
[˘x->°ªam.
Àn
 - 1] = (
dacf
->
√°ed
 ? '/' : '-');

929 i‡(
dacf
->
√°ed
) {

930 
p
 = 
	`ngx_˝ymem
(p, "/index.mpd", ("/index.mpd") - 1);

932 
p
 = 
	`ngx_˝ymem
(p, ".mpd", (".mpd") - 1);

935 
˘x
->
∂ayli°
.
Àn
 = 
p
 - ctx->∂ayli°.
d©a
;

937 *
p
 = 0;

941 
˘x
->
∂ayli°_bak
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

942 
˘x
->
∂ayli°
.
Àn
 + (".bak"));

943 
p
 = 
	`ngx_˝ymem
(
˘x
->
∂ayli°_bak
.
d©a
, ctx->
∂ayli°
.data,

944 
˘x
->
∂ayli°
.
Àn
);

945 
p
 = 
	`ngx_˝ymem
(p, ".bak", (".bak") - 1);

947 
˘x
->
∂ayli°_bak
.
Àn
 = 
p
 - ctx->∂ayli°_bak.
d©a
;

949 *
p
 = 0;

951 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

953 &
˘x
->
∂ayli°
, &˘x->
∂ayli°_bak
, &˘x->
°ªam
);

955 
˘x
->
°¨t_time
 = *
ngx_ˇched_time
;

957 i‡(
	`ngx_πmp_dash_ísuª_dúe˘‹y
(
s
Ë!
NGX_OK
) {

958  
NGX_ERROR
;

961 
√xt
:

962  
	`√xt_publish
(
s
, 
v
);

963 
	}
}

966 
ngx_öt_t


967 
	$ngx_πmp_dash_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_˛o£_°ªam_t
 *
v
)

969 
ngx_πmp_dash_˘x_t
 *
˘x
;

970 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

972 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

974 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

976 i‡(
dacf
 =
NULL
 || !dacf->
dash
 || 
˘x
 == NULL) {

977 
√xt
;

980 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

983 
	`ngx_πmp_dash_˛o£_‰agmíts
(
s
);

985 
√xt
:

986  
	`√xt_˛o£_°ªam
(
s
, 
v
);

987 
	}
}

991 
	$ngx_πmp_dash_upd©e_‰agmíts
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_öt_t
 
bound¨y
,

992 
uöt32_t
 
time°amp
)

994 
öt32_t
 
d
;

995 
ngx_öt_t
 
hô
;

996 
ngx_πmp_dash_˘x_t
 *
˘x
;

997 
ngx_πmp_dash_‰ag_t
 *
f
;

998 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

1000 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

1001 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

1002 
f
 = 
	`ngx_πmp_dash_gë_‰ag
(
s
, 
˘x
->
n‰ags
);

1004 
d
 = (
öt32_t
Ë(
time°amp
 - 
f
->timestamp);

1006 i‡(
d
 >= 0) {

1008 
f
->
duøti⁄
 = 
time°amp
 - f->timestamp;

1009 
hô
 = (
f
->
duøti⁄
 >
dacf
->
‰agÀn
);

1015 
hô
 = (-
d
 > 1000);

1018 i‡(
˘x
->
has_video
 && !
hô
) {

1019 
bound¨y
 = 0;

1022 i‡(!
˘x
->
has_video
 && ctx->
has_audio
) {

1023 
bound¨y
 = 
hô
;

1026 i‡(
˘x
->
audio
.
md©_size
 >
NGX_RTMP_DASH_MAX_MDAT
) {

1027 
bound¨y
 = 1;

1030 i‡(
˘x
->
video
.
md©_size
 >
NGX_RTMP_DASH_MAX_MDAT
) {

1031 
bound¨y
 = 1;

1034 i‡(!
˘x
->
›íed
) {

1035 
bound¨y
 = 1;

1038 i‡(
bound¨y
) {

1039 
	`ngx_πmp_dash_˛o£_‰agmíts
(
s
);

1040 
	`ngx_πmp_dash_›í_‰agmíts
(
s
);

1042 
f
 = 
	`ngx_πmp_dash_gë_‰ag
(
s
, 
˘x
->
n‰ags
);

1043 
f
->
time°amp
 =Åimestamp;

1045 
	}
}

1048 
ngx_öt_t


1049 
	$ngx_πmp_dash_≠≥nd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
,

1050 
ngx_πmp_dash_åack_t
 *
t
, 
ngx_öt_t
 
key
, 
uöt32_t
 
time°amp
, uöt32_à
dñay
)

1052 
u_ch¨
 *
p
;

1053 
size_t
 
size
, 
bsize
;

1054 
ngx_πmp_mp4_ßm∂e_t
 *
sm∂
;

1056 
u_ch¨
 
buf„r
[
NGX_RTMP_DASH_BUFSIZE
];

1058 
p
 = 
buf„r
;

1059 
size
 = 0;

1061 ; 
ö
 && 
size
 < (
buf„r
); i¿ö->
√xt
) {

1063 
bsize
 = (
size_t
Ë(
ö
->
buf
->
œ°
 - in->buf->
pos
);

1064 i‡(
size
 + 
bsize
 > (
buf„r
)) {

1065 
bsize
 = (
size_t
Ë((
buf„r
Ë- 
size
);

1068 
p
 = 
	`ngx_˝ymem
’, 
ö
->
buf
->
pos
, 
bsize
);

1069 
size
 +
bsize
;

1072 
	`ngx_πmp_dash_upd©e_‰agmíts
(
s
, 
key
, 
time°amp
);

1074 i‡(
t
->
ßm∂e_cou¡
 == 0) {

1075 
t
->
óæõ°_¥es_time
 = 
time°amp
;

1078 
t
->
œã°_¥es_time
 = 
time°amp
;

1080 i‡(
t
->
ßm∂e_cou¡
 < 
NGX_RTMP_DASH_MAX_SAMPLES
) {

1082 i‡(
	`ngx_wrôe_fd
(
t
->
fd
, 
buf„r
, 
size
Ë=
NGX_ERROR
) {

1083 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1084 "dash: " 
ngx_wrôe_fd_n
 " failed");

1085  
NGX_ERROR
;

1088 
sm∂
 = &
t
->
ßm∂es
[t->
ßm∂e_cou¡
];

1090 
sm∂
->
dñay
 = delay;

1091 
sm∂
->
size
 = (
uöt32_t
) size;

1092 
sm∂
->
duøti⁄
 = 0;

1093 
sm∂
->
time°amp
 =Åimestamp;

1094 
sm∂
->
key
 = (key ? 1 : 0);

1096 i‡(
t
->
ßm∂e_cou¡
 > 0) {

1097 
sm∂
 = &
t
->
ßm∂es
[t->
ßm∂e_cou¡
 - 1];

1098 
sm∂
->
duøti⁄
 = 
time°amp
 - smpl->timestamp;

1101 
t
->
ßm∂e_cou¡
++;

1102 
t
->
md©_size
 +(
ngx_uöt_t
Ë
size
;

1105  
NGX_OK
;

1106 
	}
}

1109 
ngx_öt_t


1110 
	$ngx_πmp_dash_audio
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1111 
ngx_chaö_t
 *
ö
)

1113 
u_ch¨
 
hty≥
;

1114 
ngx_πmp_dash_˘x_t
 *
˘x
;

1115 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

1116 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

1118 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

1119 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

1120 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

1122 i‡(
dacf
 =
NULL
 || !dacf->
dash
 || 
˘x
 == NULL ||

1123 
codec_˘x
 =
NULL
 || 
h
->
mÀn
 < 2)

1125  
NGX_OK
;

1130 i‡(
codec_˘x
->
audio_codec_id
 !
NGX_RTMP_AUDIO_AAC
 ||

1131 
codec_˘x
->
Øc_hódî
 =
NULL
)

1133  
NGX_OK
;

1136 i‡(
ö
->
buf
->
œ°
 - in->buf->
pos
 < 2) {

1137  
NGX_ERROR
;

1142 
hty≥
 = 
ö
->
buf
->
pos
[1];

1143 i‡(
hty≥
 != 1) {

1144  
NGX_OK
;

1147 
˘x
->
has_audio
 = 1;

1151 
ö
->
buf
->
pos
 += 2;

1153  
	`ngx_πmp_dash_≠≥nd
(
s
, 
ö
, &
˘x
->
audio
, 0, 
h
->
time°amp
, 0);

1154 
	}
}

1157 
ngx_öt_t


1158 
	$ngx_πmp_dash_video
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1159 
ngx_chaö_t
 *
ö
)

1161 
u_ch¨
 *
p
;

1162 
uöt8_t
 
·y≥
, 
hty≥
;

1163 
uöt32_t
 
dñay
;

1164 
ngx_πmp_dash_˘x_t
 *
˘x
;

1165 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

1166 
ngx_πmp_dash_≠p_c⁄f_t
 *
dacf
;

1168 
dacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_dash_moduÀ
);

1169 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_dash_moduÀ
);

1170 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

1172 i‡(
dacf
 =
NULL
 || !dacf->
dash
 || 
˘x
 =NULL || 
codec_˘x
 == NULL ||

1173 
codec_˘x
->
avc_hódî
 =
NULL
 || 
h
->
mÀn
 < 5)

1175  
NGX_OK
;

1180 i‡(
codec_˘x
->
video_codec_id
 !
NGX_RTMP_VIDEO_H264
) {

1181  
NGX_OK
;

1184 i‡(
ö
->
buf
->
œ°
 - in->buf->
pos
 < 5) {

1185  
NGX_ERROR
;

1188 
·y≥
 = (
ö
->
buf
->
pos
[0] & 0xf0) >> 4;

1192 
hty≥
 = 
ö
->
buf
->
pos
[1];

1193 i‡(
hty≥
 != 1) {

1194  
NGX_OK
;

1197 
p
 = (
u_ch¨
 *Ë&
dñay
;

1199 
p
[0] = 
ö
->
buf
->
pos
[4];

1200 
p
[1] = 
ö
->
buf
->
pos
[3];

1201 
p
[2] = 
ö
->
buf
->
pos
[2];

1202 
p
[3] = 0;

1204 
˘x
->
has_video
 = 1;

1208 
ö
->
buf
->
pos
 += 5;

1210  
	`ngx_πmp_dash_≠≥nd
(
s
, 
ö
, &
˘x
->
video
, 
·y≥
 =1, 
h
->
time°amp
,

1211 
dñay
);

1212 
	}
}

1215 
ngx_öt_t


1216 
	$ngx_πmp_dash_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_begö_t
 *
v
)

1218  
	`√xt_°ªam_begö
(
s
, 
v
);

1219 
	}
}

1222 
ngx_öt_t


1223 
	$ngx_πmp_dash_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_eof_t
 *
v
)

1225 
	`ngx_πmp_dash_˛o£_‰agmíts
(
s
);

1227  
	`√xt_°ªam_eof
(
s
, 
v
);

1228 
	}
}

1231 
ngx_öt_t


1232 
	$ngx_πmp_dash_˛ónup_dú
(
ngx_°r_t
 *
µ©h
, 
ngx_m£c_t
 
∂ayÀn
)

1234 
time_t
 
mtime
, 
max_age
;

1235 
u_ch¨
 *
p
;

1236 
u_ch¨
 
∑th
[
NGX_MAX_PATH
 + 1], 
mpd_∑th
[NGX_MAX_PATH + 1];

1237 
ngx_dú_t
 
dú
;

1238 
ngx_îr_t
 
îr
;

1239 
ngx_°r_t
 
«me
, 
•©h
, 
mpd
;

1240 
ngx_öt_t
 
√¡rõs
, 
√ø£d
;

1241 
ngx_fûe_öfo_t
 
fi
;

1243 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

1244 "dash: cÀ™u∞∑th='%V'ÖœyÀn=%M", 
µ©h
, 
∂ayÀn
);

1246 i‡(
	`ngx_›í_dú
(
µ©h
, &
dú
Ë!
NGX_OK
) {

1247 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1248 "dash: cÀ™u∞›í dú faûed '%V'", 
µ©h
);

1249  
NGX_ERROR
;

1252 
√¡rõs
 = 0;

1253 
√ø£d
 = 0;

1256 
	`ngx_£t_î∫o
(0);

1258 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

1259 
îr
 = 
ngx_î∫o
;

1261 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

1262 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1263 "dash: cÀ™u∞" 
ngx_˛o£_dú_n
 " \"%V\" failed",

1264 
µ©h
);

1267 i‡(
îr
 =
NGX_ENOMOREFILES
) {

1268  
√¡rõs
 - 
√ø£d
;

1271 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
îr
,

1272 "dash: cÀ™u∞" 
ngx_ªad_dú_n


1273 " '%V' faûed", 
µ©h
);

1274  
NGX_ERROR
;

1277 
«me
.
d©a
 = 
	`ngx_de_«me
(&
dú
);

1278 i‡(
«me
.
d©a
[0] == '.') {

1282 
«me
.
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

1284 
p
 = 
	`ngx_¢¥ötf
(
∑th
, ’©hË- 1, "%V/%V", 
µ©h
, &
«me
);

1285 *
p
 = 0;

1287 
•©h
.
d©a
 = 
∑th
;

1288 
•©h
.
Àn
 = 
p
 - 
∑th
;

1290 
√¡rõs
++;

1292 i‡(!
dú
.
vÆid_öfo
 && 
	`ngx_de_öfo
(
∑th
, &dúË=
NGX_FILE_ERROR
) {

1293 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1294 "dash: cÀ™u∞" 
ngx_de_öfo_n
 " \"%V\" failed",

1295 &
•©h
);

1300 i‡(
	`ngx_de_is_dú
(&
dú
)) {

1302 i‡(
	`ngx_πmp_dash_˛ónup_dú
(&
•©h
, 
∂ayÀn
) == 0) {

1303 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

1304 "dash: cÀ™u∞dú '%V'", &
«me
);

1311 *
p
 = 0;

1313 i‡(
	`ngx_dñëe_dú
(
∑th
Ë=
NGX_FILE_ERROR
) {

1314 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1315 "dash: cÀ™u∞" 
ngx_dñëe_dú_n


1316 " faûed o¿'%V'", &
•©h
);

1318 
√ø£d
++;

1325 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

1329 i‡(
«me
.
Àn
 >8 &&Çame.
d©a
[name.len - 8] == 'i' &&

1330 
«me
.
d©a
[«me.
Àn
 - 7] == 'n' &&

1331 
«me
.
d©a
[«me.
Àn
 - 6] == 'i' &&

1332 
«me
.
d©a
[«me.
Àn
 - 5] == 't' &&

1333 
«me
.
d©a
[«me.
Àn
 - 4] == '.' &&

1334 
«me
.
d©a
[«me.
Àn
 - 3] == 'm' &&

1335 
«me
.
d©a
[«me.
Àn
 - 2] == '4')

1337 i‡(
«me
.
Àn
 == 8) {

1338 
	`ngx_°r_£t
(&
mpd
, "index");

1340 
mpd
.
d©a
 = 
«me
.data;

1341 
mpd
.
Àn
 = 
«me
.len - 9;

1344 
p
 = 
	`ngx_¢¥ötf
(
mpd_∑th
, (mpd_path) - 1, "%V/%V.mpd",

1345 
µ©h
, &
mpd
);

1346 *
p
 = 0;

1348 i‡(
	`ngx_fûe_öfo
(
mpd_∑th
, &
fi
Ë!
NGX_FILE_ERROR
) {

1349 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

1351 &
«me
, 
mpd_∑th
);

1355 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

1357 &
«me
, 
mpd_∑th
);

1359 
max_age
 = 0;

1361 } i‡(
«me
.
Àn
 >4 &&Çame.
d©a
[name.len - 4] == '.' &&

1362 
«me
.
d©a
[«me.
Àn
 - 3] == 'm' &&

1363 
«me
.
d©a
[«me.
Àn
 - 2] == '4' &&

1364 
«me
.
d©a
[«me.
Àn
 - 1] == 'v')

1366 
max_age
 = 
∂ayÀn
 / 500;

1368 } i‡(
«me
.
Àn
 >4 &&Çame.
d©a
[name.len - 4] == '.' &&

1369 
«me
.
d©a
[«me.
Àn
 - 3] == 'm' &&

1370 
«me
.
d©a
[«me.
Àn
 - 2] == '4' &&

1371 
«me
.
d©a
[«me.
Àn
 - 1] == 'a')

1373 
max_age
 = 
∂ayÀn
 / 500;

1375 } i‡(
«me
.
Àn
 >4 &&Çame.
d©a
[name.len - 4] == '.' &&

1376 
«me
.
d©a
[«me.
Àn
 - 3] == 'm' &&

1377 
«me
.
d©a
[«me.
Àn
 - 2] == 'p' &&

1378 
«me
.
d©a
[«me.
Àn
 - 1] == 'd')

1380 
max_age
 = 
∂ayÀn
 / 500;

1382 } i‡(
«me
.
Àn
 >4 &&Çame.
d©a
[name.len - 4] == '.' &&

1383 
«me
.
d©a
[«me.
Àn
 - 3] == 'r' &&

1384 
«me
.
d©a
[«me.
Àn
 - 2] == 'a' &&

1385 
«me
.
d©a
[«me.
Àn
 - 1] == 'w')

1387 
max_age
 = 
∂ayÀn
 / 1000;

1390 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

1391 "dash: cÀ™u∞skù unknow¿fûêty≥ '%V'", &
«me
);

1395 
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1396 i‡(
mtime
 + 
max_age
 > 
ngx_ˇched_time
->
£c
) {

1400 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

1402 &
«me
, 
mtime
, 
ngx_ˇched_time
->
£c
 - mtime);

1404 i‡(
	`ngx_dñëe_fûe
(
∑th
Ë=
NGX_FILE_ERROR
) {

1405 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1406 "dash: cÀ™u∞" 
ngx_dñëe_fûe_n
 " failed on '%V'",

1407 &
•©h
);

1411 
√ø£d
++;

1413 
	}
}

1416 
time_t


1417 
	$ngx_πmp_dash_˛ónup
(*
d©a
)

1419 
ngx_πmp_dash_˛ónup_t
 *
˛ónup
 = 
d©a
;

1421 
	`ngx_πmp_dash_˛ónup_dú
(&
˛ónup
->
∑th
, cÀ™up->
∂ayÀn
);

1423  
˛ónup
->
∂ayÀn
 / 500;

1424 
	}
}

1428 
	$ngx_πmp_dash_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1430 
ngx_πmp_dash_≠p_c⁄f_t
 *
c⁄f
;

1432 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_dash_≠p_c⁄f_t
));

1433 i‡(
c⁄f
 =
NULL
) {

1434  
NULL
;

1437 
c⁄f
->
dash
 = 
NGX_CONF_UNSET
;

1438 
c⁄f
->
‰agÀn
 = 
NGX_CONF_UNSET_MSEC
;

1439 
c⁄f
->
∂ayÀn
 = 
NGX_CONF_UNSET_MSEC
;

1440 
c⁄f
->
˛ónup
 = 
NGX_CONF_UNSET
;

1441 
c⁄f
->
√°ed
 = 
NGX_CONF_UNSET
;

1443  
c⁄f
;

1444 
	}
}

1448 
	$ngx_πmp_dash_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1450 
ngx_πmp_dash_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1451 
ngx_πmp_dash_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

1452 
ngx_πmp_dash_˛ónup_t
 *
˛ónup
;

1454 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
dash
, 
¥ev
->dash, 0);

1455 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
‰agÀn
, 
¥ev
->fraglen, 5000);

1456 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
∂ayÀn
, 
¥ev
->playlen, 30000);

1457 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛ónup
, 
¥ev
->cleanup, 1);

1458 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
√°ed
, 
¥ev
->nested, 0);

1460 i‡(
c⁄f
->
‰agÀn
) {

1461 
c⁄f
->
wö‰ags
 = c⁄f->
∂ayÀn
 / c⁄f->
‰agÀn
;

1466 i‡(
c⁄f
->
dash
 && c⁄f->
∑th
.
Àn
 && c⁄f->
˛ónup
) {

1467 i‡(
c⁄f
->
∑th
.
d©a
[c⁄f->∑th.
Àn
 - 1] == '/') {

1468 
c⁄f
->
∑th
.
Àn
--;

1471 
˛ónup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*cleanup));

1472 i‡(
˛ónup
 =
NULL
) {

1473  
NGX_CONF_ERROR
;

1476 
˛ónup
->
∑th
 = 
c⁄f
->path;

1477 
˛ónup
->
∂ayÀn
 = 
c⁄f
->playlen;

1479 
c⁄f
->
¶Ÿ
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*conf->slot));

1480 i‡(
c⁄f
->
¶Ÿ
 =
NULL
) {

1481  
NGX_CONF_ERROR
;

1484 
c⁄f
->
¶Ÿ
->
m™agî
 = 
ngx_πmp_dash_˛ónup
;

1485 
c⁄f
->
¶Ÿ
->
«me
 = c⁄f->
∑th
;

1486 
c⁄f
->
¶Ÿ
->
d©a
 = 
˛ónup
;

1487 
c⁄f
->
¶Ÿ
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

1488 
c⁄f
->
¶Ÿ
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1490 i‡(
	`ngx_add_∑th
(
cf
, &
c⁄f
->
¶Ÿ
Ë!
NGX_OK
) {

1491  
NGX_CONF_ERROR
;

1495 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, "");

1497  
NGX_CONF_OK
;

1498 
	}
}

1501 
ngx_öt_t


1502 
	$ngx_πmp_dash_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1504 
ngx_πmp_h™dÀr_±
 *
h
;

1505 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

1507 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

1509 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_VIDEO
]);

1510 *
h
 = 
ngx_πmp_dash_video
;

1512 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_AUDIO
]);

1513 *
h
 = 
ngx_πmp_dash_audio
;

1515 
√xt_publish
 = 
ngx_πmp_publish
;

1516 
ngx_πmp_publish
 = 
ngx_πmp_dash_publish
;

1518 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

1519 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_dash_˛o£_°ªam
;

1521 
√xt_°ªam_begö
 = 
ngx_πmp_°ªam_begö
;

1522 
ngx_πmp_°ªam_begö
 = 
ngx_πmp_dash_°ªam_begö
;

1524 
√xt_°ªam_eof
 = 
ngx_πmp_°ªam_eof
;

1525 
ngx_πmp_°ªam_eof
 = 
ngx_πmp_dash_°ªam_eof
;

1527  
NGX_OK
;

1528 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/dash/ngx_rtmp_mp4.c

3 
	~<ngx_c⁄fig.h
>

4 
	~<ngx_c‹e.h
>

5 
	~"ngx_πmp_mp4.h
"

6 
	~<ngx_πmp_codec_moduÀ.h
>

9 
ngx_öt_t


10 
	$ngx_πmp_mp4_fõld_32
(
ngx_buf_t
 *
b
, 
uöt32_t
 
n
)

12 
u_ch¨
 
byãs
[4];

14 
byãs
[0] = ((
uöt32_t
Ë
n
 >> 24) & 0xFF;

15 
byãs
[1] = ((
uöt32_t
Ë
n
 >> 16) & 0xFF;

16 
byãs
[2] = ((
uöt32_t
Ë
n
 >> 8) & 0xFF;

17 
byãs
[3] = (
uöt32_t
Ë
n
 & 0xFF;

19 i‡(
b
->
œ°
 + (
byãs
Ë> b->
íd
) {

20  
NGX_ERROR
;

23 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
byãs
, (bytes));

25  
NGX_OK
;

26 
	}
}

29 
ngx_öt_t


30 
	$ngx_πmp_mp4_fõld_24
(
ngx_buf_t
 *
b
, 
uöt32_t
 
n
)

32 
u_ch¨
 
byãs
[3];

34 
byãs
[0] = ((
uöt32_t
Ë
n
 >> 16) & 0xFF;

35 
byãs
[1] = ((
uöt32_t
Ë
n
 >> 8) & 0xFF;

36 
byãs
[2] = (
uöt32_t
Ë
n
 & 0xFF;

38 i‡(
b
->
œ°
 + (
byãs
Ë> b->
íd
) {

39  
NGX_ERROR
;

42 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
byãs
, (bytes));

44  
NGX_OK
;

45 
	}
}

48 
ngx_öt_t


49 
	$ngx_πmp_mp4_fõld_16
(
ngx_buf_t
 *
b
, 
uöt16_t
 
n
)

51 
u_ch¨
 
byãs
[2];

53 
byãs
[0] = ((
uöt32_t
Ë
n
 >> 8) & 0xFF;

54 
byãs
[1] = (
uöt32_t
Ë
n
 & 0xFF;

56 i‡(
b
->
œ°
 + (
byãs
Ë> b->
íd
) {

57  
NGX_ERROR
;

60 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
byãs
, (bytes));

62  
NGX_OK
;

63 
	}
}

66 
ngx_öt_t


67 
	$ngx_πmp_mp4_fõld_8
(
ngx_buf_t
 *
b
, 
uöt8_t
 
n
)

69 
u_ch¨
 
byãs
[1];

71 
byãs
[0] = 
n
 & 0xFF;

73 i‡(
b
->
œ°
 + (
byãs
Ë> b->
íd
) {

74  
NGX_ERROR
;

77 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
byãs
, (bytes));

79  
NGX_OK
;

80 
	}
}

83 
ngx_öt_t


84 
	$ngx_πmp_mp4_put_des¸
(
ngx_buf_t
 *
b
, 
èg
, 
size_t
 
size
)

86 
	`ngx_πmp_mp4_fõld_8
(
b
, (
uöt8_t
Ë
èg
);

87 
	`ngx_πmp_mp4_fõld_8
(
b
, 
size
 & 0x7F);

89  
NGX_OK
;

90 
	}
}

93 
ngx_öt_t


94 
	$ngx_πmp_mp4_d©a
(
ngx_buf_t
 *
b
, *
d©a
, 
size_t
 
n
)

96 i‡(
b
->
œ°
 + 
n
 > b->
íd
) {

97  
NGX_ERROR
;

100 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
 *Ë
d©a
, 
n
);

102  
NGX_OK
;

103 
	}
}

106 
ngx_öt_t


107 
	$ngx_πmp_mp4_box
(
ngx_buf_t
 *
b
, c⁄° 
box
[4])

109 i‡(
b
->
œ°
 + 4 > b->
íd
) {

110  
NGX_ERROR
;

113 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
 *Ë
box
, 4);

115  
NGX_OK
;

116 
	}
}

119 
u_ch¨
 *

120 
	$ngx_πmp_mp4_°¨t_box
(
ngx_buf_t
 *
b
, c⁄° 
box
[4])

122 
u_ch¨
 *
p
;

124 
p
 = 
b
->
œ°
;

126 i‡(
	`ngx_πmp_mp4_fõld_32
(
b
, 0Ë!
NGX_OK
) {

127  
NULL
;

130 i‡(
	`ngx_πmp_mp4_box
(
b
, 
box
Ë!
NGX_OK
) {

131  
NULL
;

134  
p
;

135 
	}
}

138 
ngx_öt_t


139 
	$ngx_πmp_mp4_upd©e_box_size
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
p
)

141 
u_ch¨
 *
cuΩos
;

143 i‡(
p
 =
NULL
) {

144  
NGX_ERROR
;

147 
cuΩos
 = 
b
->
œ°
;

149 
b
->
œ°
 = 
p
;

151 
	`ngx_πmp_mp4_fõld_32
(
b
, (
uöt32_t
Ë(
cuΩos
 - 
p
));

153 
b
->
œ°
 = 
cuΩos
;

155  
NGX_OK
;

156 
	}
}

159 
ngx_öt_t


160 
	$ngx_πmp_mp4_wrôe_m©rix
(
ngx_buf_t
 *
buf
, 
uöt32_t
 
a
, uöt32_à
b
, uöt32_à
c
,

161 
uöt32_t
 
d
, uöt32_à
tx
, uöt32_à
ty
)

171 
	`ngx_πmp_mp4_fõld_32
(
buf
, 
a
 << 16);

172 
	`ngx_πmp_mp4_fõld_32
(
buf
, 
b
 << 16);

173 
	`ngx_πmp_mp4_fõld_32
(
buf
, 0);

174 
	`ngx_πmp_mp4_fõld_32
(
buf
, 
c
 << 16);

175 
	`ngx_πmp_mp4_fõld_32
(
buf
, 
d
 << 16);

176 
	`ngx_πmp_mp4_fõld_32
(
buf
, 0);

177 
	`ngx_πmp_mp4_fõld_32
(
buf
, 
tx
 << 16);

178 
	`ngx_πmp_mp4_fõld_32
(
buf
, 
ty
 << 16);

179 
	`ngx_πmp_mp4_fõld_32
(
buf
, 1 << 30);

181  
NGX_OK
;

182 
	}
}

185 
ngx_öt_t


186 
	$ngx_πmp_mp4_wrôe_·yp
(
ngx_buf_t
 *
b
)

188 
u_ch¨
 *
pos
;

190 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "ftyp");

193 
	`ngx_πmp_mp4_box
(
b
, "iso6");

196 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

199 
	`ngx_πmp_mp4_box
(
b
, "isom");

200 
	`ngx_πmp_mp4_box
(
b
, "iso6");

201 
	`ngx_πmp_mp4_box
(
b
, "dash");

203 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

205  
NGX_OK
;

206 
	}
}

209 
ngx_öt_t


210 
	$ngx_πmp_mp4_wrôe_°yp
(
ngx_buf_t
 *
b
)

212 
u_ch¨
 *
pos
;

214 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "styp");

217 
	`ngx_πmp_mp4_box
(
b
, "iso6");

220 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

223 
	`ngx_πmp_mp4_box
(
b
, "isom");

224 
	`ngx_πmp_mp4_box
(
b
, "iso6");

225 
	`ngx_πmp_mp4_box
(
b
, "dash");

227 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

229  
NGX_OK
;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_πmp_mp4_wrôe_mvhd
(
ngx_buf_t
 *
b
)

236 
u_ch¨
 *
pos
;

238 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "mvhd");

241 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

244 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

247 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

250 
	`ngx_πmp_mp4_fõld_32
(
b
, 1000);

253 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

256 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x00010000);

257 
	`ngx_πmp_mp4_fõld_16
(
b
, 0x0100);

258 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

259 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

260 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

262 
	`ngx_πmp_mp4_wrôe_m©rix
(
b
, 1, 0, 0, 1, 0, 0);

265 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

266 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

267 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

268 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

269 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

270 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

273 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

275 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

277  
NGX_OK
;

278 
	}
}

281 
ngx_öt_t


282 
	$ngx_πmp_mp4_wrôe_tkhd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

283 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

285 
u_ch¨
 *
pos
;

286 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

288 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

290 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "tkhd");

293 
	`ngx_πmp_mp4_fõld_8
(
b
, 0);

296 
	`ngx_πmp_mp4_fõld_24
(
b
, 0x0000000f);

299 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

302 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

305 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

308 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

311 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

314 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

315 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

316 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

319 
	`ngx_πmp_mp4_fõld_16
(
b
, 
ây≥
 =
NGX_RTMP_MP4_VIDEO_TRACK
 ? 0 : 0x0100);

322 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

324 
	`ngx_πmp_mp4_wrôe_m©rix
(
b
, 1, 0, 0, 1, 0, 0);

326 i‡(
ây≥
 =
NGX_RTMP_MP4_VIDEO_TRACK
) {

327 
	`ngx_πmp_mp4_fõld_32
(
b
, (
uöt32_t
Ë
codec_˘x
->
width
 << 16);

328 
	`ngx_πmp_mp4_fõld_32
(
b
, (
uöt32_t
Ë
codec_˘x
->
height
 << 16);

330 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

331 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

334 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

336  
NGX_OK
;

337 
	}
}

340 
ngx_öt_t


341 
	$ngx_πmp_mp4_wrôe_mdhd
(
ngx_buf_t
 *
b
)

343 
u_ch¨
 *
pos
;

345 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "mdhd");

348 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

351 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

354 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

357 
	`ngx_πmp_mp4_fõld_32
(
b
, 1000);

360 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

363 
	`ngx_πmp_mp4_fõld_16
(
b
, 0x15C7);

366 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

368 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

370  
NGX_OK
;

371 
	}
}

374 
ngx_öt_t


375 
	$ngx_πmp_mp4_wrôe_hdÃ
(
ngx_buf_t
 *
b
, 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

377 
u_ch¨
 *
pos
;

379 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "hdlr");

382 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

385 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

387 i‡(
ây≥
 =
NGX_RTMP_MP4_VIDEO_TRACK
) {

388 
	`ngx_πmp_mp4_box
(
b
, "vide");

390 
	`ngx_πmp_mp4_box
(
b
, "soun");

394 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

395 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

396 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

398 i‡(
ây≥
 =
NGX_RTMP_MP4_VIDEO_TRACK
) {

400 
	`ngx_πmp_mp4_d©a
(
b
, "VideoHandler", ("VideoHandler"));

403 
	`ngx_πmp_mp4_d©a
(
b
, "SoundHandler", ("SoundHandler"));

406 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

408  
NGX_OK
;

409 
	}
}

412 
ngx_öt_t


413 
	$ngx_πmp_mp4_wrôe_vmhd
(
ngx_buf_t
 *
b
)

416 
	`ngx_πmp_mp4_fõld_32
(
b
, 20);

418 
	`ngx_πmp_mp4_box
(
b
, "vmhd");

421 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x01);

424 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

425 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

427  
NGX_OK
;

428 
	}
}

431 
ngx_öt_t


432 
	$ngx_πmp_mp4_wrôe_smhd
(
ngx_buf_t
 *
b
)

435 
	`ngx_πmp_mp4_fõld_32
(
b
, 16);

437 
	`ngx_πmp_mp4_box
(
b
, "smhd");

440 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

443 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

444 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

446  
NGX_OK
;

447 
	}
}

450 
ngx_öt_t


451 
	$ngx_πmp_mp4_wrôe_dªf
(
ngx_buf_t
 *
b
)

453 
u_ch¨
 *
pos
;

455 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "dref");

458 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

461 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

464 
	`ngx_πmp_mp4_fõld_32
(
b
, 0xc);

466 
	`ngx_πmp_mp4_box
(
b
, "url ");

469 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x00000001);

471 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

473  
NGX_OK
;

474 
	}
}

477 
ngx_öt_t


478 
	$ngx_πmp_mp4_wrôe_döf
(
ngx_buf_t
 *
b
)

480 
u_ch¨
 *
pos
;

482 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "dinf");

484 
	`ngx_πmp_mp4_wrôe_dªf
(
b
);

486 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

488  
NGX_OK
;

489 
	}
}

492 
ngx_öt_t


493 
	$ngx_πmp_mp4_wrôe_avcc
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
)

495 
u_ch¨
 *
pos
, *
p
;

496 
ngx_chaö_t
 *
ö
;

497 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

499 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

501 i‡(
codec_˘x
 =
NULL
) {

502  
NGX_ERROR
;

505 
ö
 = 
codec_˘x
->
avc_hódî
;

506 i‡(
ö
 =
NULL
) {

507  
NGX_ERROR
;

510 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "avcC");

523 
p
 = 
ö
->
buf
->
pos
 + 5;

525 i‡(
p
 < 
ö
->
buf
->
œ°
) {

526 
	`ngx_πmp_mp4_d©a
(
b
, 
p
, (
size_t
Ë(
ö
->
buf
->
œ°
 -Ö));

528 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

532 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

534  
NGX_OK
;

535 
	}
}

538 
ngx_öt_t


539 
	$ngx_πmp_mp4_wrôe_video
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
)

541 
u_ch¨
 *
pos
;

542 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

544 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

546 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "avc1");

549 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

550 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

553 
	`ngx_πmp_mp4_fõld_16
(
b
, 1);

556 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

557 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

560 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

561 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

562 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

565 
	`ngx_πmp_mp4_fõld_16
(
b
, (
uöt16_t
Ë
codec_˘x
->
width
);

566 
	`ngx_πmp_mp4_fõld_16
(
b
, (
uöt16_t
Ë
codec_˘x
->
height
);

569 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x00480000);

570 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x00480000);

573 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

576 
	`ngx_πmp_mp4_fõld_16
(
b
, 1);

579 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

580 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

581 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

584 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

585 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

586 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

587 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

588 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

589 
	`ngx_πmp_mp4_fõld_16
(
b
, 0x18);

590 
	`ngx_πmp_mp4_fõld_16
(
b
, 0xffff);

592 
	`ngx_πmp_mp4_wrôe_avcc
(
s
, 
b
);

594 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

596  
NGX_OK
;

597 
	}
}

600 
ngx_öt_t


601 
	$ngx_πmp_mp4_wrôe_esds
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
)

603 
size_t
 
dsi_Àn
;

604 
u_ch¨
 *
pos
, *
dsi
;

605 
ngx_buf_t
 *
db
;

606 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

608 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

610 i‡(
codec_˘x
 =
NULL
 || codec_˘x->
Øc_hódî
 == NULL) {

611  
NGX_ERROR
;

614 
db
 = 
codec_˘x
->
Øc_hódî
->
buf
;

615 i‡(
db
 =
NULL
) {

616  
NGX_ERROR
;

619 
dsi
 = 
db
->
pos
 + 2;

620 i‡(
dsi
 > 
db
->
œ°
) {

621  
NGX_ERROR
;

624 
dsi_Àn
 = 
db
->
œ°
 - 
dsi
;

626 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "esds");

629 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

634 
	`ngx_πmp_mp4_put_des¸
(
b
, 0x03, 23 + 
dsi_Àn
);

637 
	`ngx_πmp_mp4_fõld_16
(
b
, 1);

640 
	`ngx_πmp_mp4_fõld_8
(
b
, 0);

645 
	`ngx_πmp_mp4_put_des¸
(
b
, 0x04, 15 + 
dsi_Àn
);

648 
	`ngx_πmp_mp4_fõld_8
(
b
, 0x40);

651 
	`ngx_πmp_mp4_fõld_8
(
b
, 0x15);

654 
	`ngx_πmp_mp4_fõld_24
(
b
, 0);

657 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x0001F151);

660 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x0001F14D);

665 
	`ngx_πmp_mp4_put_des¸
(
b
, 0x05, 
dsi_Àn
);

666 
	`ngx_πmp_mp4_d©a
(
b
, 
dsi
, 
dsi_Àn
);

671 
	`ngx_πmp_mp4_put_des¸
(
b
, 0x06, 1);

672 
	`ngx_πmp_mp4_fõld_8
(
b
, 0x02);

674 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

676  
NGX_OK
;

677 
	}
}

680 
ngx_öt_t


681 
	$ngx_πmp_mp4_wrôe_audio
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
)

683 
u_ch¨
 *
pos
;

684 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

686 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

688 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "mp4a");

691 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

692 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

695 
	`ngx_πmp_mp4_fõld_16
(
b
, 1);

698 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

699 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

702 
	`ngx_πmp_mp4_fõld_16
(
b
, (
uöt16_t
Ë
codec_˘x
->
audio_ch™√ls
);

705 
	`ngx_πmp_mp4_fõld_16
(
b
, (
uöt16_t
Ë(
codec_˘x
->
ßm∂e_size
 * 8));

708 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

711 
	`ngx_πmp_mp4_fõld_16
(
b
, 1000);

714 
	`ngx_πmp_mp4_fõld_16
(
b
, (
uöt16_t
Ë
codec_˘x
->
ßm∂e_øã
);

716 
	`ngx_πmp_mp4_wrôe_esds
(
s
, 
b
);

719 
	`ngx_πmp_mp4_fõld_32
(
b
, 8);

722 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

724 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

726  
NGX_OK
;

727 
	}
}

730 
ngx_öt_t


731 
	$ngx_πmp_mp4_wrôe_°sd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

732 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

734 
u_ch¨
 *
pos
;

736 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "stsd");

739 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

742 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

744 i‡(
ây≥
 =
NGX_RTMP_MP4_VIDEO_TRACK
) {

745 
	`ngx_πmp_mp4_wrôe_video
(
s
, 
b
);

747 
	`ngx_πmp_mp4_wrôe_audio
(
s
, 
b
);

750 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

752  
NGX_OK
;

753 
	}
}

756 
ngx_öt_t


757 
	$ngx_πmp_mp4_wrôe_°ts
(
ngx_buf_t
 *
b
)

759 
u_ch¨
 *
pos
;

761 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "stts");

763 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

764 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

766 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

768  
NGX_OK
;

769 
	}
}

772 
ngx_öt_t


773 
	$ngx_πmp_mp4_wrôe_°sc
(
ngx_buf_t
 *
b
)

775 
u_ch¨
 *
pos
;

777 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "stsc");

779 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

780 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

782 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

784  
NGX_OK
;

785 
	}
}

788 
ngx_öt_t


789 
	$ngx_πmp_mp4_wrôe_°sz
(
ngx_buf_t
 *
b
)

791 
u_ch¨
 *
pos
;

793 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "stsz");

795 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

796 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

797 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

799 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

801  
NGX_OK
;

802 
	}
}

805 
ngx_öt_t


806 
	$ngx_πmp_mp4_wrôe_°co
(
ngx_buf_t
 *
b
)

808 
u_ch¨
 *
pos
;

810 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "stco");

812 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

813 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

815 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

817  
NGX_OK
;

818 
	}
}

821 
ngx_öt_t


822 
	$ngx_πmp_mp4_wrôe_°bl
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

823 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

825 
u_ch¨
 *
pos
;

827 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "stbl");

829 
	`ngx_πmp_mp4_wrôe_°sd
(
s
, 
b
, 
ây≥
);

830 
	`ngx_πmp_mp4_wrôe_°ts
(
b
);

831 
	`ngx_πmp_mp4_wrôe_°sc
(
b
);

832 
	`ngx_πmp_mp4_wrôe_°sz
(
b
);

833 
	`ngx_πmp_mp4_wrôe_°co
(
b
);

835 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

837  
NGX_OK
;

838 
	}
}

841 
ngx_öt_t


842 
	$ngx_πmp_mp4_wrôe_möf
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

843 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

845 
u_ch¨
 *
pos
;

847 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "minf");

849 i‡(
ây≥
 =
NGX_RTMP_MP4_VIDEO_TRACK
) {

850 
	`ngx_πmp_mp4_wrôe_vmhd
(
b
);

852 
	`ngx_πmp_mp4_wrôe_smhd
(
b
);

855 
	`ngx_πmp_mp4_wrôe_döf
(
b
);

856 
	`ngx_πmp_mp4_wrôe_°bl
(
s
, 
b
, 
ây≥
);

858 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

860  
NGX_OK
;

861 
	}
}

864 
ngx_öt_t


865 
	$ngx_πmp_mp4_wrôe_mdü
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

866 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

868 
u_ch¨
 *
pos
;

870 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "mdia");

872 
	`ngx_πmp_mp4_wrôe_mdhd
(
b
);

873 
	`ngx_πmp_mp4_wrôe_hdÃ
(
b
, 
ây≥
);

874 
	`ngx_πmp_mp4_wrôe_möf
(
s
, 
b
, 
ây≥
);

876 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

878  
NGX_OK
;

879 
	}
}

881 
ngx_öt_t


882 
	$ngx_πmp_mp4_wrôe_åak
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

883 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

885 
u_ch¨
 *
pos
;

887 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "trak");

889 
	`ngx_πmp_mp4_wrôe_tkhd
(
s
, 
b
, 
ây≥
);

890 
	`ngx_πmp_mp4_wrôe_mdü
(
s
, 
b
, 
ây≥
);

892 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

894  
NGX_OK
;

895 
	}
}

898 
ngx_öt_t


899 
	$ngx_πmp_mp4_wrôe_mvex
(
ngx_buf_t
 *
b
)

901 
u_ch¨
 *
pos
;

903 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "mvex");

905 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x20);

907 
	`ngx_πmp_mp4_box
(
b
, "trex");

910 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

913 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

916 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

919 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

922 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

925 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

927 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

929  
NGX_OK
;

930 
	}
}

933 
ngx_öt_t


934 
	$ngx_πmp_mp4_wrôe_moov
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

935 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
)

937 
u_ch¨
 *
pos
;

939 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "moov");

941 
	`ngx_πmp_mp4_wrôe_mvhd
(
b
);

942 
	`ngx_πmp_mp4_wrôe_mvex
(
b
);

943 
	`ngx_πmp_mp4_wrôe_åak
(
s
, 
b
, 
ây≥
);

945 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

947  
NGX_OK
;

948 
	}
}

951 
ngx_öt_t


952 
	$ngx_πmp_mp4_wrôe_tfhd
(
ngx_buf_t
 *
b
)

954 
u_ch¨
 *
pos
;

956 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "tfhd");

959 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x00020000);

962 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

964 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

966  
NGX_OK
;

967 
	}
}

970 
ngx_öt_t


971 
	$ngx_πmp_mp4_wrôe_tfdt
(
ngx_buf_t
 *
b
, 
uöt32_t
 
óæõ°_¥es_time
)

973 
u_ch¨
 *
pos
;

975 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "tfdt");

978 
	`ngx_πmp_mp4_fõld_32
(
b
, 0x00000000);

979 
	`ngx_πmp_mp4_fõld_32
(
b
, 
óæõ°_¥es_time
);

981 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

983  
NGX_OK
;

984 
	}
}

987 
ngx_öt_t


988 
	$ngx_πmp_mp4_wrôe_åun
(
ngx_buf_t
 *
b
, 
uöt32_t
 
ßm∂e_cou¡
,

989 
ngx_πmp_mp4_ßm∂e_t
 *
ßm∂es
, 
ngx_uöt_t
 
ßm∂e_mask
, 
u_ch¨
 *
moof_pos
)

991 
u_ch¨
 *
pos
;

992 
uöt32_t
 
i
, 
off£t
, 
nôems
, 
Êags
;

994 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "trun");

996 
nôems
 = 0;

999 
Êags
 = 0x01;

1001 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_DURATION
) {

1002 
nôems
++;

1003 
Êags
 |= 0x000100;

1006 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_SIZE
) {

1007 
nôems
++;

1008 
Êags
 |= 0x000200;

1011 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_KEY
) {

1012 
nôems
++;

1013 
Êags
 |= 0x000400;

1016 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_DELAY
) {

1017 
nôems
++;

1018 
Êags
 |= 0x000800;

1021 
off£t
 = (
pos
 - 
moof_pos
Ë+ 20 + (
ßm∂e_cou¡
 * 
nôems
 * 4) + 8;

1023 
	`ngx_πmp_mp4_fõld_32
(
b
, 
Êags
);

1024 
	`ngx_πmp_mp4_fõld_32
(
b
, 
ßm∂e_cou¡
);

1025 
	`ngx_πmp_mp4_fõld_32
(
b
, 
off£t
);

1027 
i
 = 0; i < 
ßm∂e_cou¡
; i++, 
ßm∂es
++) {

1029 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_DURATION
) {

1030 
	`ngx_πmp_mp4_fõld_32
(
b
, 
ßm∂es
->
duøti⁄
);

1033 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_SIZE
) {

1034 
	`ngx_πmp_mp4_fõld_32
(
b
, 
ßm∂es
->
size
);

1037 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_KEY
) {

1038 
	`ngx_πmp_mp4_fõld_32
(
b
, 
ßm∂es
->
key
 ? 0x00000000 : 0x00010000);

1041 i‡(
ßm∂e_mask
 & 
NGX_RTMP_MP4_SAMPLE_DELAY
) {

1042 
	`ngx_πmp_mp4_fõld_32
(
b
, 
ßm∂es
->
dñay
);

1046 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

1048  
NGX_OK
;

1049 
	}
}

1052 
ngx_öt_t


1053 
	$ngx_πmp_mp4_wrôe_åaf
(
ngx_buf_t
 *
b
, 
uöt32_t
 
óæõ°_¥es_time
,

1054 
uöt32_t
 
ßm∂e_cou¡
, 
ngx_πmp_mp4_ßm∂e_t
 *
ßm∂es
,

1055 
ngx_uöt_t
 
ßm∂e_mask
, 
u_ch¨
 *
moof_pos
)

1057 
u_ch¨
 *
pos
;

1059 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "traf");

1061 
	`ngx_πmp_mp4_wrôe_tfhd
(
b
);

1062 
	`ngx_πmp_mp4_wrôe_tfdt
(
b
, 
óæõ°_¥es_time
);

1063 
	`ngx_πmp_mp4_wrôe_åun
(
b
, 
ßm∂e_cou¡
, 
ßm∂es
, 
ßm∂e_mask
, 
moof_pos
);

1065 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

1067  
NGX_OK
;

1068 
	}
}

1071 
ngx_öt_t


1072 
	$ngx_πmp_mp4_wrôe_mfhd
(
ngx_buf_t
 *
b
, 
uöt32_t
 
ödex
)

1074 
u_ch¨
 *
pos
;

1076 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "mfhd");

1079 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

1082 
	`ngx_πmp_mp4_fõld_32
(
b
, 
ödex
);

1084 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

1086  
NGX_OK
;

1087 
	}
}

1090 
ngx_öt_t


1091 
	$ngx_πmp_mp4_wrôe_sidx
(
ngx_buf_t
 *
b
, 
ngx_uöt_t
 
ª„ªn˚_size
,

1092 
uöt32_t
 
óæõ°_¥es_time
, uöt32_à
œã°_¥es_time
)

1094 
u_ch¨
 *
pos
;

1095 
uöt32_t
 
duøti⁄
;

1097 
duøti⁄
 = 
œã°_¥es_time
 - 
óæõ°_¥es_time
;

1099 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "sidx");

1102 
	`ngx_πmp_mp4_fõld_32
(
b
, 0);

1105 
	`ngx_πmp_mp4_fõld_32
(
b
, 1);

1108 
	`ngx_πmp_mp4_fõld_32
(
b
, 1000);

1111 
	`ngx_πmp_mp4_fõld_32
(
b
, 
óæõ°_¥es_time
);

1114 
	`ngx_πmp_mp4_fõld_32
(
b
, 
duøti⁄
);

1117 
	`ngx_πmp_mp4_fõld_16
(
b
, 0);

1120 
	`ngx_πmp_mp4_fõld_16
(
b
, 1);

1123 
	`ngx_πmp_mp4_fõld_32
(
b
, 
ª„ªn˚_size
);

1126 
	`ngx_πmp_mp4_fõld_32
(
b
, 
duøti⁄
);

1129 
	`ngx_πmp_mp4_fõld_8
(
b
, 0x90);

1132 
	`ngx_πmp_mp4_fõld_24
(
b
, 0);

1134 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

1136  
NGX_OK
;

1137 
	}
}

1140 
ngx_öt_t


1141 
	$ngx_πmp_mp4_wrôe_moof
(
ngx_buf_t
 *
b
, 
uöt32_t
 
óæõ°_¥es_time
,

1142 
uöt32_t
 
ßm∂e_cou¡
, 
ngx_πmp_mp4_ßm∂e_t
 *
ßm∂es
,

1143 
ngx_uöt_t
 
ßm∂e_mask
, 
uöt32_t
 
ödex
)

1145 
u_ch¨
 *
pos
;

1147 
pos
 = 
	`ngx_πmp_mp4_°¨t_box
(
b
, "moof");

1149 
	`ngx_πmp_mp4_wrôe_mfhd
(
b
, 
ödex
);

1150 
	`ngx_πmp_mp4_wrôe_åaf
(
b
, 
óæõ°_¥es_time
, 
ßm∂e_cou¡
, 
ßm∂es
,

1151 
ßm∂e_mask
, 
pos
);

1153 
	`ngx_πmp_mp4_upd©e_box_size
(
b
, 
pos
);

1155  
NGX_OK
;

1156 
	}
}

1159 
ngx_uöt_t


1160 
	$ngx_πmp_mp4_wrôe_md©
(
ngx_buf_t
 *
b
, 
ngx_uöt_t
 
size
)

1162 
	`ngx_πmp_mp4_fõld_32
(
b
, 
size
);

1164 
	`ngx_πmp_mp4_box
(
b
, "mdat");

1166  
NGX_OK
;

1167 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/dash/ngx_rtmp_mp4.h

3 #i‚de‡
_NGX_RTMP_MP4_H_INCLUDED_


4 
	#_NGX_RTMP_MP4_H_INCLUDED_


	)

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_πmp.h
>

12 
	#NGX_RTMP_MP4_SAMPLE_SIZE
 0x01

	)

13 
	#NGX_RTMP_MP4_SAMPLE_DURATION
 0x02

	)

14 
	#NGX_RTMP_MP4_SAMPLE_DELAY
 0x04

	)

15 
	#NGX_RTMP_MP4_SAMPLE_KEY
 0x08

	)

19 
uöt32_t
 
	msize
;

20 
uöt32_t
 
	mduøti⁄
;

21 
uöt32_t
 
	mdñay
;

22 
uöt32_t
 
	mtime°amp
;

23 
	mkey
:1;

24 } 
	tngx_πmp_mp4_ßm∂e_t
;

28 
	mNGX_RTMP_MP4_FILETYPE_INIT
,

29 
	mNGX_RTMP_MP4_FILETYPE_SEG


30 } 
	tngx_πmp_mp4_fûe_ty≥_t
;

34 
	mNGX_RTMP_MP4_VIDEO_TRACK
,

35 
	mNGX_RTMP_MP4_AUDIO_TRACK


36 } 
	tngx_πmp_mp4_åack_ty≥_t
;

39 
ngx_öt_t
 
ngx_πmp_mp4_wrôe_·yp
(
ngx_buf_t
 *
b
);

40 
ngx_öt_t
 
ngx_πmp_mp4_wrôe_°yp
(
ngx_buf_t
 *
b
);

41 
ngx_öt_t
 
ngx_πmp_mp4_wrôe_moov
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
b
,

42 
ngx_πmp_mp4_åack_ty≥_t
 
ây≥
);

43 
ngx_öt_t
 
ngx_πmp_mp4_wrôe_moof
(
ngx_buf_t
 *
b
, 
uöt32_t
 
óæõ°_¥es_time
,

44 
uöt32_t
 
ßm∂e_cou¡
, 
ngx_πmp_mp4_ßm∂e_t
 *
ßm∂es
,

45 
ngx_uöt_t
 
ßm∂e_mask
, 
uöt32_t
 
ödex
);

46 
ngx_öt_t
 
ngx_πmp_mp4_wrôe_sidx
(
ngx_buf_t
 *
b
,

47 
ngx_uöt_t
 
ª„ªn˚_size
, 
uöt32_t
 
óæõ°_¥es_time
,

48 
uöt32_t
 
œã°_¥es_time
);

49 
ngx_uöt_t
 
ngx_πmp_mp4_wrôe_md©
(
ngx_buf_t
 *
b
,Çgx_uöt_à
size
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/hls/ngx_rtmp_hls_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_πmp.h
>

10 
	~<ngx_πmp_cmd_moduÀ.h
>

11 
	~<ngx_πmp_codec_moduÀ.h
>

12 
	~"ngx_πmp_m≥gts.h
"

15 
ngx_πmp_publish_±
 
	g√xt_publish
;

16 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

17 
ngx_πmp_°ªam_begö_±
 
	g√xt_°ªam_begö
;

18 
ngx_πmp_°ªam_eof_±
 
	g√xt_°ªam_eof
;

21 * 
ngx_πmp_hls_v¨ü¡
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

22 *
c⁄f
);

23 
ngx_öt_t
 
ngx_πmp_hls_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

24 * 
ngx_πmp_hls_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 * 
ngx_πmp_hls_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

27 
ngx_öt_t
 
ngx_πmp_hls_Êush_audio
(
ngx_πmp_£ssi⁄_t
 *
s
);

28 
ngx_öt_t
 
ngx_πmp_hls_ísuª_dúe˘‹y
(
ngx_πmp_£ssi⁄_t
 *
s
,

29 
ngx_°r_t
 *
∑th
);

32 
	#NGX_RTMP_HLS_BUFSIZE
 (1024*1024)

	)

33 
	#NGX_RTMP_HLS_DIR_ACCESS
 0744

	)

37 
uöt64_t
 
	mid
;

38 
uöt64_t
 
	mkey_id
;

39 
	mduøti⁄
;

40 
	ma˘ive
:1;

41 
	mdisc⁄t
:1;

42 } 
	tngx_πmp_hls_‰ag_t
;

46 
ngx_°r_t
 
	msuffix
;

47 
ngx_¨øy_t
 
	m¨gs
;

48 } 
	tngx_πmp_hls_v¨ü¡_t
;

52 
	m›íed
:1;

54 
ngx_πmp_m≥gts_fûe_t
 
	mfûe
;

56 
ngx_°r_t
 
	m∂ayli°
;

57 
ngx_°r_t
 
	m∂ayli°_bak
;

58 
ngx_°r_t
 
	mv¨_∂ayli°
;

59 
ngx_°r_t
 
	mv¨_∂ayli°_bak
;

60 
ngx_°r_t
 
	m°ªam
;

61 
ngx_°r_t
 
	mkeyfûe
;

62 
ngx_°r_t
 
	m«me
;

63 
u_ch¨
 
	mkey
[16];

65 
uöt64_t
 
	m‰ag
;

66 
uöt64_t
 
	m‰ag_ts
;

67 
uöt64_t
 
	mkey_id
;

68 
ngx_uöt_t
 
	mn‰ags
;

69 
ngx_πmp_hls_‰ag_t
 *
	m‰ags
;

71 
ngx_uöt_t
 
	maudio_cc
;

72 
ngx_uöt_t
 
	mvideo_cc
;

73 
ngx_uöt_t
 
	mkey_‰ags
;

75 
uöt64_t
 
	ma‰ame_ba£
;

76 
uöt64_t
 
	ma‰ame_num
;

78 
ngx_buf_t
 *
	ma‰ame
;

79 
uöt64_t
 
	ma‰ame_±s
;

81 
ngx_πmp_hls_v¨ü¡_t
 *
	mv¨
;

82 } 
	tngx_πmp_hls_˘x_t
;

86 
ngx_°r_t
 
	m∑th
;

87 
ngx_m£c_t
 
	m∂ayÀn
;

88 
ngx_uöt_t
 
	m‰ags_≥r_key
;

89 } 
	tngx_πmp_hls_˛ónup_t
;

93 
ngx_Êag_t
 
	mhls
;

94 
ngx_m£c_t
 
	m‰agÀn
;

95 
ngx_m£c_t
 
	mmax_‰agÀn
;

96 
ngx_m£c_t
 
	mmuxdñay
;

97 
ngx_m£c_t
 
	msync
;

98 
ngx_m£c_t
 
	m∂ayÀn
;

99 
ngx_uöt_t
 
	mwö‰ags
;

100 
ngx_Êag_t
 
	mc⁄töuous
;

101 
ngx_Êag_t
 
	m√°ed
;

102 
ngx_°r_t
 
	m∑th
;

103 
ngx_uöt_t
 
	m«mög
;

104 
ngx_uöt_t
 
	m¶icög
;

105 
ngx_uöt_t
 
	mty≥
;

106 
ngx_∑th_t
 *
	m¶Ÿ
;

107 
ngx_m£c_t
 
	mmax_audio_dñay
;

108 
size_t
 
	maudio_buf„r_size
;

109 
ngx_Êag_t
 
	m˛ónup
;

110 
ngx_¨øy_t
 *
	mv¨ü¡
;

111 
ngx_°r_t
 
	mba£_uæ
;

112 
ngx_öt_t
 
	mgønuœrôy
;

113 
ngx_Êag_t
 
	mkeys
;

114 
ngx_°r_t
 
	mkey_∑th
;

115 
ngx_°r_t
 
	mkey_uæ
;

116 
ngx_uöt_t
 
	m‰ags_≥r_key
;

117 } 
	tngx_πmp_hls_≠p_c⁄f_t
;

120 
	#NGX_RTMP_HLS_NAMING_SEQUENTIAL
 1

	)

121 
	#NGX_RTMP_HLS_NAMING_TIMESTAMP
 2

	)

122 
	#NGX_RTMP_HLS_NAMING_SYSTEM
 3

	)

125 
	#NGX_RTMP_HLS_SLICING_PLAIN
 1

	)

126 
	#NGX_RTMP_HLS_SLICING_ALIGNED
 2

	)

129 
	#NGX_RTMP_HLS_TYPE_LIVE
 1

	)

130 
	#NGX_RTMP_HLS_TYPE_EVENT
 2

	)

133 
ngx_c⁄f_íum_t
 
	gngx_πmp_hls_«mög_¶Ÿs
[] = {

134 { 
ngx_°rög
("£quítül"), 
NGX_RTMP_HLS_NAMING_SEQUENTIAL
 },

135 { 
ngx_°rög
("time°amp"), 
NGX_RTMP_HLS_NAMING_TIMESTAMP
 },

136 { 
ngx_°rög
("sy°em"), 
NGX_RTMP_HLS_NAMING_SYSTEM
 },

137 { 
ngx_nuŒ_°rög
, 0 }

141 
ngx_c⁄f_íum_t
 
	gngx_πmp_hls_¶icög_¶Ÿs
[] = {

142 { 
ngx_°rög
("∂aö"), 
NGX_RTMP_HLS_SLICING_PLAIN
 },

143 { 
ngx_°rög
("Æig√d"), 
NGX_RTMP_HLS_SLICING_ALIGNED
 },

144 { 
ngx_nuŒ_°rög
, 0 }

148 
ngx_c⁄f_íum_t
 
	gngx_πmp_hls_ty≥_¶Ÿs
[] = {

149 { 
ngx_°rög
("live"), 
NGX_RTMP_HLS_TYPE_LIVE
 },

150 { 
ngx_°rög
("evít"), 
NGX_RTMP_HLS_TYPE_EVENT
 },

151 { 
ngx_nuŒ_°rög
, 0 }

155 
ngx_comm™d_t
 
	gngx_πmp_hls_comm™ds
[] = {

157 { 
ngx_°rög
("hls"),

158 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

159 
ngx_c⁄f_£t_Êag_¶Ÿ
,

160 
NGX_RTMP_APP_CONF_OFFSET
,

161 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
hls
),

162 
NULL
 },

164 { 
ngx_°rög
("hls_fragment"),

165 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

166 
ngx_c⁄f_£t_m£c_¶Ÿ
,

167 
NGX_RTMP_APP_CONF_OFFSET
,

168 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
‰agÀn
),

169 
NULL
 },

171 { 
ngx_°rög
("hls_max_fragment"),

172 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

173 
ngx_c⁄f_£t_m£c_¶Ÿ
,

174 
NGX_RTMP_APP_CONF_OFFSET
,

175 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
max_‰agÀn
),

176 
NULL
 },

178 { 
ngx_°rög
("hls_path"),

179 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

180 
ngx_c⁄f_£t_°r_¶Ÿ
,

181 
NGX_RTMP_APP_CONF_OFFSET
,

182 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
∑th
),

183 
NULL
 },

185 { 
ngx_°rög
("hls_playlist_length"),

186 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

187 
ngx_c⁄f_£t_m£c_¶Ÿ
,

188 
NGX_RTMP_APP_CONF_OFFSET
,

189 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
∂ayÀn
),

190 
NULL
 },

192 { 
ngx_°rög
("hls_muxdelay"),

193 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

194 
ngx_c⁄f_£t_m£c_¶Ÿ
,

195 
NGX_RTMP_APP_CONF_OFFSET
,

196 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
muxdñay
),

197 
NULL
 },

199 { 
ngx_°rög
("hls_sync"),

200 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

201 
ngx_c⁄f_£t_m£c_¶Ÿ
,

202 
NGX_RTMP_APP_CONF_OFFSET
,

203 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
sync
),

204 
NULL
 },

206 { 
ngx_°rög
("hls_continuous"),

207 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

208 
ngx_c⁄f_£t_Êag_¶Ÿ
,

209 
NGX_RTMP_APP_CONF_OFFSET
,

210 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
c⁄töuous
),

211 
NULL
 },

213 { 
ngx_°rög
("hls_nested"),

214 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

215 
ngx_c⁄f_£t_Êag_¶Ÿ
,

216 
NGX_RTMP_APP_CONF_OFFSET
,

217 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
√°ed
),

218 
NULL
 },

220 { 
ngx_°rög
("hls_fragment_naming"),

221 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

222 
ngx_c⁄f_£t_íum_¶Ÿ
,

223 
NGX_RTMP_APP_CONF_OFFSET
,

224 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
«mög
),

225 &
ngx_πmp_hls_«mög_¶Ÿs
 },

227 { 
ngx_°rög
("hls_fragment_slicing"),

228 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

229 
ngx_c⁄f_£t_íum_¶Ÿ
,

230 
NGX_RTMP_APP_CONF_OFFSET
,

231 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
¶icög
),

232 &
ngx_πmp_hls_¶icög_¶Ÿs
 },

234 { 
ngx_°rög
("hls_type"),

235 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

236 
ngx_c⁄f_£t_íum_¶Ÿ
,

237 
NGX_RTMP_APP_CONF_OFFSET
,

238 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
ty≥
),

239 &
ngx_πmp_hls_ty≥_¶Ÿs
 },

241 { 
ngx_°rög
("hls_max_audio_delay"),

242 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

243 
ngx_c⁄f_£t_m£c_¶Ÿ
,

244 
NGX_RTMP_APP_CONF_OFFSET
,

245 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
max_audio_dñay
),

246 
NULL
 },

248 { 
ngx_°rög
("hls_audio_buffer_size"),

249 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

250 
ngx_c⁄f_£t_size_¶Ÿ
,

251 
NGX_RTMP_APP_CONF_OFFSET
,

252 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
audio_buf„r_size
),

253 
NULL
 },

255 { 
ngx_°rög
("hls_cleanup"),

256 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

257 
ngx_c⁄f_£t_Êag_¶Ÿ
,

258 
NGX_RTMP_APP_CONF_OFFSET
,

259 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
˛ónup
),

260 
NULL
 },

262 { 
ngx_°rög
("hls_variant"),

263 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

264 
ngx_πmp_hls_v¨ü¡
,

265 
NGX_RTMP_APP_CONF_OFFSET
,

267 
NULL
 },

269 { 
ngx_°rög
("hls_base_url"),

270 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

271 
ngx_c⁄f_£t_°r_¶Ÿ
,

272 
NGX_RTMP_APP_CONF_OFFSET
,

273 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
ba£_uæ
),

274 
NULL
 },

276 { 
ngx_°rög
("hls_fragment_naming_granularity"),

277 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

278 
ngx_c⁄f_£t_num_¶Ÿ
,

279 
NGX_RTMP_APP_CONF_OFFSET
,

280 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
gønuœrôy
),

281 
NULL
 },

283 { 
ngx_°rög
("hls_keys"),

284 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

285 
ngx_c⁄f_£t_Êag_¶Ÿ
,

286 
NGX_RTMP_APP_CONF_OFFSET
,

287 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
keys
),

288 
NULL
 },

290 { 
ngx_°rög
("hls_key_path"),

291 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

292 
ngx_c⁄f_£t_°r_¶Ÿ
,

293 
NGX_RTMP_APP_CONF_OFFSET
,

294 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
key_∑th
),

295 
NULL
 },

297 { 
ngx_°rög
("hls_key_url"),

298 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

299 
ngx_c⁄f_£t_°r_¶Ÿ
,

300 
NGX_RTMP_APP_CONF_OFFSET
,

301 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
key_uæ
),

302 
NULL
 },

304 { 
ngx_°rög
("hls_fragments_per_key"),

305 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

306 
ngx_c⁄f_£t_num_¶Ÿ
,

307 
NGX_RTMP_APP_CONF_OFFSET
,

308 
off£tof
(
ngx_πmp_hls_≠p_c⁄f_t
, 
‰ags_≥r_key
),

309 
NULL
 },

311 
ngx_nuŒ_comm™d


315 
ngx_πmp_moduÀ_t
 
	gngx_πmp_hls_moduÀ_˘x
 = {

316 
NULL
,

317 
ngx_πmp_hls_po°c⁄figuøti⁄
,

319 
NULL
,

320 
NULL
,

322 
NULL
,

323 
NULL
,

325 
ngx_πmp_hls_¸óã_≠p_c⁄f
,

326 
ngx_πmp_hls_mîge_≠p_c⁄f
,

330 
ngx_moduÀ_t
 
	gngx_πmp_hls_moduÀ
 = {

331 
NGX_MODULE_V1
,

332 &
ngx_πmp_hls_moduÀ_˘x
,

333 
ngx_πmp_hls_comm™ds
,

334 
NGX_RTMP_MODULE
,

335 
NULL
,

336 
NULL
,

337 
NULL
,

338 
NULL
,

339 
NULL
,

340 
NULL
,

341 
NULL
,

342 
NGX_MODULE_V1_PADDING


346 
ngx_πmp_hls_‰ag_t
 *

347 
	$ngx_πmp_hls_gë_‰ag
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_öt_t
 
n
)

349 
ngx_πmp_hls_˘x_t
 *
˘x
;

350 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

352 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

353 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

355  &
˘x
->
‰ags
[(˘x->
‰ag
 + 
n
Ë% (
hacf
->
wö‰ags
 * 2 + 1)];

356 
	}
}

360 
	$ngx_πmp_hls_√xt_‰ag
(
ngx_πmp_£ssi⁄_t
 *
s
)

362 
ngx_πmp_hls_˘x_t
 *
˘x
;

363 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

365 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

366 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

368 i‡(
˘x
->
n‰ags
 =
hacf
->
wö‰ags
) {

369 
˘x
->
‰ag
++;

371 
˘x
->
n‰ags
++;

373 
	}
}

376 
ngx_öt_t


377 
	$ngx_πmp_hls_ª«me_fûe
(
u_ch¨
 *
§c
, u_ch¨ *
d°
)

381 #i‡(
NGX_WIN32
)

382  
	`MoveFûeEx
((
LPCTSTR
Ë
§c
, (LPCTSTRË
d°
, 
MOVEFILE_REPLACE_EXISTING
);

384  
	`ngx_ª«me_fûe
(
§c
, 
d°
);

386 
	}
}

389 
ngx_öt_t


390 
	$ngx_πmp_hls_wrôe_v¨ü¡_∂ayli°
(
ngx_πmp_£ssi⁄_t
 *
s
)

392 
u_ch¨
 
buf„r
[1024];

394 
u_ch¨
 *
p
, *
œ°
;

395 
ssize_t
 
rc
;

396 
ngx_fd_t
 
fd
;

397 
ngx_°r_t
 *
¨g
;

398 
ngx_uöt_t
 
n
, 
k
;

399 
ngx_πmp_hls_˘x_t
 *
˘x
;

400 
ngx_πmp_hls_v¨ü¡_t
 *
v¨
;

401 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

403 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

404 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

406 
fd
 = 
	`ngx_›í_fûe
(
˘x
->
v¨_∂ayli°_bak
.
d©a
, 
NGX_FILE_WRONLY
,

407 
NGX_FILE_TRUNCATE
, 
NGX_FILE_DEFAULT_ACCESS
);

409 i‡(
fd
 =
NGX_INVALID_FILE
) {

410 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

411 "hls: " 
ngx_›í_fûe_n
 " failed: '%V'",

412 &
˘x
->
v¨_∂ayli°_bak
);

414  
NGX_ERROR
;

417 
	#NGX_RTMP_HLS_VAR_HEADER
 "#EXTM3U\n#EXT-X-VERSION:3\n"

	)

419 
rc
 = 
	`ngx_wrôe_fd
(
fd
, 
NGX_RTMP_HLS_VAR_HEADER
,

420 (
NGX_RTMP_HLS_VAR_HEADER
) - 1);

421 i‡(
rc
 < 0) {

422 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

423 "hls: " 
ngx_wrôe_fd_n
 " failed: '%V'",

424 &
˘x
->
v¨_∂ayli°_bak
);

425 
	`ngx_˛o£_fûe
(
fd
);

426  
NGX_ERROR
;

429 
v¨
 = 
hacf
->
v¨ü¡
->
ñts
;

430 
n
 = 0;Ç < 
hacf
->
v¨ü¡
->
√…s
;Ç++, 
v¨
++)

432 
p
 = 
buf„r
;

433 
œ°
 = 
buf„r
 + (buffer);

435 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "#EXT-X-STREAM-INF:PROGRAM-ID=1");

437 
¨g
 = 
v¨
->
¨gs
.
ñts
;

438 
k
 = 0; k < 
v¨
->
¨gs
.
√…s
; k++, 
¨g
++) {

439 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, ",%V", 
¨g
);

442 i‡(
p
 < 
œ°
) {

443 *
p
++ = '\n';

446 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%V%*s%V",

447 &
hacf
->
ba£_uæ
,

448 
˘x
->
«me
.
Àn
 - ctx->
v¨
->
suffix
.Àn, ctx->«me.
d©a
,

449 &
v¨
->
suffix
);

450 i‡(
hacf
->
√°ed
) {

451 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%s", "/index");

454 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%s", ".m3u8\n");

456 
rc
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, 
p
 - buffer);

457 i‡(
rc
 < 0) {

458 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

459 "hls: " 
ngx_wrôe_fd_n
 " failed '%V'",

460 &
˘x
->
v¨_∂ayli°_bak
);

461 
	`ngx_˛o£_fûe
(
fd
);

462  
NGX_ERROR
;

466 
	`ngx_˛o£_fûe
(
fd
);

468 i‡(
	`ngx_πmp_hls_ª«me_fûe
(
˘x
->
v¨_∂ayli°_bak
.
d©a
,

469 
˘x
->
v¨_∂ayli°
.
d©a
)

470 =
NGX_FILE_ERROR
)

472 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

474 &
˘x
->
v¨_∂ayli°_bak
, &˘x->
v¨_∂ayli°
);

475  
NGX_ERROR
;

478  
NGX_OK
;

479 
	}
}

482 
ngx_öt_t


483 
	$ngx_πmp_hls_wrôe_∂ayli°
(
ngx_πmp_£ssi⁄_t
 *
s
)

485 
u_ch¨
 
buf„r
[1024];

486 
ngx_fd_t
 
fd
;

487 
u_ch¨
 *
p
, *
íd
;

488 
ngx_πmp_hls_˘x_t
 *
˘x
;

489 
ssize_t
 
n
;

490 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

491 
ngx_πmp_hls_‰ag_t
 *
f
;

492 
ngx_uöt_t
 
i
, 
max_‰ag
;

493 
ngx_°r_t
 
«me_∑π
, 
key_«me_∑π
;

494 
uöt64_t
 
¥ev_key_id
;

495 c⁄° *
£p
, *
key_£p
;

498 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

499 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

501 
fd
 = 
	`ngx_›í_fûe
(
˘x
->
∂ayli°_bak
.
d©a
, 
NGX_FILE_WRONLY
,

502 
NGX_FILE_TRUNCATE
, 
NGX_FILE_DEFAULT_ACCESS
);

504 i‡(
fd
 =
NGX_INVALID_FILE
) {

505 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

506 "hls: " 
ngx_›í_fûe_n
 " failed: '%V'",

507 &
˘x
->
∂ayli°_bak
);

508  
NGX_ERROR
;

511 
max_‰ag
 = 
hacf
->
‰agÀn
 / 1000;

513 
i
 = 0; i < 
˘x
->
n‰ags
; i++) {

514 
f
 = 
	`ngx_πmp_hls_gë_‰ag
(
s
, 
i
);

515 i‡(
f
->
duøti⁄
 > 
max_‰ag
) {

516 
max_‰ag
 = (
ngx_uöt_t
Ë(
f
->
duøti⁄
 + .5);

520 
p
 = 
buf„r
;

521 
íd
 = 
p
 + (
buf„r
);

523 
p
 = 
	`ngx_¶¥ötf
’, 
íd
,

528 
˘x
->
‰ag
, 
max_‰ag
);

530 i‡(
hacf
->
ty≥
 =
NGX_RTMP_HLS_TYPE_EVENT
) {

531 
p
 = 
	`ngx_¶¥ötf
’, 
íd
, "#EXT-X-PLAYLIST-TYPE: EVENT\n");

534 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, 
p
 - buffer);

535 i‡(
n
 < 0) {

536 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

537 "hls: " 
ngx_wrôe_fd_n
 " failed: '%V'",

538 &
˘x
->
∂ayli°_bak
);

539 
	`ngx_˛o£_fûe
(
fd
);

540  
NGX_ERROR
;

543 
£p
 = 
hacf
->
√°ed
 ? (hacf->
ba£_uæ
.
Àn
 ? "/" : "") : "-";

544 
key_£p
 = 
hacf
->
√°ed
 ? (hacf->
key_uæ
.
Àn
 ? "/" : "") : "-";

546 
«me_∑π
.
Àn
 = 0;

547 i‡(!
hacf
->
√°ed
 || hacf->
ba£_uæ
.
Àn
) {

548 
«me_∑π
 = 
˘x
->
«me
;

551 
key_«me_∑π
.
Àn
 = 0;

552 i‡(!
hacf
->
√°ed
 || hacf->
key_uæ
.
Àn
) {

553 
key_«me_∑π
 = 
˘x
->
«me
;

556 
¥ev_key_id
 = 0;

558 
i
 = 0; i < 
˘x
->
n‰ags
; i++) {

559 
f
 = 
	`ngx_πmp_hls_gë_‰ag
(
s
, 
i
);

561 
p
 = 
buf„r
;

562 
íd
 = 
p
 + (
buf„r
);

564 i‡(
f
->
disc⁄t
) {

565 
p
 = 
	`ngx_¶¥ötf
’, 
íd
, "#EXT-X-DISCONTINUITY\n");

568 i‡(
hacf
->
keys
 && (
i
 =0 || 
f
->
key_id
 !
¥ev_key_id
)) {

569 
p
 = 
	`ngx_¶¥ötf
’, 
íd
, "#EXT-X-KEY:METHOD=AES-128,"

571 &
hacf
->
key_uæ
, &
key_«me_∑π
,

572 
key_£p
, 
f
->
key_id
, f->key_id);

575 
¥ev_key_id
 = 
f
->
key_id
;

577 
p
 = 
	`ngx_¶¥ötf
’, 
íd
,

580 
f
->
duøti⁄
, &
hacf
->
ba£_uæ
, &
«me_∑π
, 
£p
, f->
id
);

582 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

585 
˘x
->
‰ag
, 
i
 + 1, ctx->
n‰ags
, 
f
->
duøti⁄
, f->
disc⁄t
);

587 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
buf„r
, 
p
 - buffer);

588 i‡(
n
 < 0) {

589 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

590 "hls: " 
ngx_wrôe_fd_n
 " failed '%V'",

591 &
˘x
->
∂ayli°_bak
);

592 
	`ngx_˛o£_fûe
(
fd
);

593  
NGX_ERROR
;

597 
	`ngx_˛o£_fûe
(
fd
);

599 i‡(
	`ngx_πmp_hls_ª«me_fûe
(
˘x
->
∂ayli°_bak
.
d©a
, ctx->
∂ayli°
.data)

600 =
NGX_FILE_ERROR
)

602 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

604 &
˘x
->
∂ayli°_bak
, &˘x->
∂ayli°
);

605  
NGX_ERROR
;

608 i‡(
˘x
->
v¨
) {

609  
	`ngx_πmp_hls_wrôe_v¨ü¡_∂ayli°
(
s
);

612  
NGX_OK
;

613 
	}
}

616 
ngx_öt_t


617 
	$ngx_πmp_hls_c›y
(
ngx_πmp_£ssi⁄_t
 *
s
, *
d°
, 
u_ch¨
 **
§c
, 
size_t
 
n
,

618 
ngx_chaö_t
 **
ö
)

620 
u_ch¨
 *
œ°
;

621 
size_t
 
≤
;

623 i‡(*
ö
 =
NULL
) {

624  
NGX_ERROR
;

628 
œ°
 = (*
ö
)->
buf
->last;

630 i‡((
size_t
)(
œ°
 - *
§c
Ë>
n
) {

631 i‡(
d°
) {

632 
	`ngx_mem˝y
(
d°
, *
§c
, 
n
);

635 *
§c
 +
n
;

637 *
ö
 && *
§c
 =(*ö)->
buf
->
œ°
) {

638 *
ö
 = (*ö)->
√xt
;

639 i‡(*
ö
) {

640 *
§c
 = (*
ö
)->
buf
->
pos
;

644  
NGX_OK
;

647 
≤
 = 
œ°
 - *
§c
;

649 i‡(
d°
) {

650 
	`ngx_mem˝y
(
d°
, *
§c
, 
≤
);

651 
d°
 = (
u_ch¨
 *)d° + 
≤
;

654 
n
 -
≤
;

655 *
ö
 = (*ö)->
√xt
;

657 i‡(*
ö
 =
NULL
) {

658 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

659 "hls: faûedÅÿªad %uz byã(s)", 
n
);

660  
NGX_ERROR
;

663 *
§c
 = (*
ö
)->
buf
->
pos
;

665 
	}
}

668 
ngx_öt_t


669 
	$ngx_πmp_hls_≠≥nd_aud
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
out
)

671 
u_ch¨
 
aud_«l
[] = { 0x00, 0x00, 0x00, 0x01, 0x09, 0xf0 };

673 i‡(
out
->
œ°
 + (
aud_«l
Ë> out->
íd
) {

674  
NGX_ERROR
;

677 
out
->
œ°
 = 
	`ngx_˝ymem
(out->œ°, 
aud_«l
, (aud_nal));

679  
NGX_OK
;

680 
	}
}

683 
ngx_öt_t


684 
	$ngx_πmp_hls_≠≥nd_•s_µs
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_buf_t
 *
out
)

686 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

687 
u_ch¨
 *
p
;

688 
ngx_chaö_t
 *
ö
;

689 
ngx_πmp_hls_˘x_t
 *
˘x
;

690 
öt8_t
 
¬Æs
;

691 
uöt16_t
 
Àn
, 
æí
;

692 
ngx_öt_t
 
n
;

694 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

696 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

698 i‡(
˘x
 =
NULL
 || 
codec_˘x
 == NULL) {

699  
NGX_ERROR
;

702 
ö
 = 
codec_˘x
->
avc_hódî
;

703 i‡(
ö
 =
NULL
) {

704  
NGX_ERROR
;

707 
p
 = 
ö
->
buf
->
pos
;

723 i‡(
	`ngx_πmp_hls_c›y
(
s
, 
NULL
, &
p
, 10, &
ö
Ë!
NGX_OK
) {

724  
NGX_ERROR
;

728 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
¬Æs
, &
p
, 1, &
ö
Ë!
NGX_OK
) {

729  
NGX_ERROR
;

732 
¬Æs
 &= 0x1f;

734 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

735 "hls: SPSÇumbî: %uz", 
¬Æs
);

738 
n
 = 0; ; ++n) {

739 ; 
¬Æs
; --nnals) {

742 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
æí
, &
p
, 2, &
ö
Ë!
NGX_OK
) {

743  
NGX_ERROR
;

746 
	`ngx_πmp_rmem˝y
(&
Àn
, &
æí
, 2);

748 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

749 "hls: hódî NALÜígth: %uz", (
size_t
Ë
Àn
);

752 i‡(
out
->
íd
 - out->
œ°
 < 4) {

753 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

755  
NGX_ERROR
;

758 *
out
->
œ°
++ = 0;

759 *
out
->
œ°
++ = 0;

760 *
out
->
œ°
++ = 0;

761 *
out
->
œ°
++ = 1;

764 i‡(
out
->
íd
 - out->
œ°
 < 
Àn
) {

765 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

767  
NGX_ERROR
;

770 i‡(
	`ngx_πmp_hls_c›y
(
s
, 
out
->
œ°
, &
p
, 
Àn
, &
ö
Ë!
NGX_OK
) {

771  
NGX_ERROR
;

774 
out
->
œ°
 +
Àn
;

777 i‡(
n
 == 1) {

782 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
¬Æs
, &
p
, 1, &
ö
Ë!
NGX_OK
) {

783  
NGX_ERROR
;

786 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

787 "hls: PPSÇumbî: %uz", 
¬Æs
);

790  
NGX_OK
;

791 
	}
}

794 
uöt64_t


795 
	$ngx_πmp_hls_gë_‰agmít_id
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt64_t
 
ts
)

797 
ngx_πmp_hls_˘x_t
 *
˘x
;

798 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

800 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

802 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

804 
hacf
->
«mög
) {

806 
NGX_RTMP_HLS_NAMING_TIMESTAMP
:

807  
ts
;

809 
NGX_RTMP_HLS_NAMING_SYSTEM
:

810  (
uöt64_t
Ë
ngx_ˇched_time
->
£c
 * 1000 +Çgx_ˇched_time->
m£c
;

813  
˘x
->
‰ag
 + ctx->
n‰ags
;

815 
	}
}

818 
ngx_öt_t


819 
	$ngx_πmp_hls_˛o£_‰agmít
(
ngx_πmp_£ssi⁄_t
 *
s
)

821 
ngx_πmp_hls_˘x_t
 *
˘x
;

823 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

824 i‡(
˘x
 =
NULL
 || !˘x->
›íed
) {

825  
NGX_OK
;

828 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

829 "hls: clo£ føgmíàn=%uL", 
˘x
->
‰ag
);

831 
	`ngx_πmp_m≥gts_˛o£_fûe
(&
˘x
->
fûe
);

833 
˘x
->
›íed
 = 0;

835 
	`ngx_πmp_hls_√xt_‰ag
(
s
);

837 
	`ngx_πmp_hls_wrôe_∂ayli°
(
s
);

839  
NGX_OK
;

840 
	}
}

843 
ngx_öt_t


844 
	$ngx_πmp_hls_›í_‰agmít
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt64_t
 
ts
,

845 
ngx_öt_t
 
disc⁄t
)

847 
uöt64_t
 
id
;

848 
ngx_fd_t
 
fd
;

849 
ngx_uöt_t
 
g
;

850 
ngx_πmp_hls_˘x_t
 *
˘x
;

851 
ngx_πmp_hls_‰ag_t
 *
f
;

852 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

854 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

856 i‡(
˘x
->
›íed
) {

857  
NGX_OK
;

860 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

862 i‡(
	`ngx_πmp_hls_ísuª_dúe˘‹y
(
s
, &
hacf
->
∑th
Ë!
NGX_OK
) {

863  
NGX_ERROR
;

866 i‡(
hacf
->
keys
 &&

867 
	`ngx_πmp_hls_ísuª_dúe˘‹y
(
s
, &
hacf
->
key_∑th
Ë!
NGX_OK
)

869  
NGX_ERROR
;

872 
id
 = 
	`ngx_πmp_hls_gë_‰agmít_id
(
s
, 
ts
);

874 i‡(
hacf
->
gønuœrôy
) {

875 
g
 = (
ngx_uöt_t
Ë
hacf
->
gønuœrôy
;

876 
id
 = (
uöt64_t
Ë(id / 
g
) * g;

879 
	`ngx_•rötf
(
˘x
->
°ªam
.
d©a
 + ctx->°ªam.
Àn
, "%uL.ts%Z", 
id
);

881 i‡(
hacf
->
keys
) {

882 i‡(
˘x
->
key_‰ags
 == 0) {

884 
˘x
->
key_‰ags
 = 
hacf
->
‰ags_≥r_key
 - 1;

885 
˘x
->
key_id
 = 
id
;

887 i‡(
	`RAND_byãs
(
˘x
->
key
, 16) < 0) {

888 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

890  
NGX_ERROR
;

893 
	`ngx_•rötf
(
˘x
->
keyfûe
.
d©a
 + ctx->keyfûe.
Àn
, "%uL.key%Z", 
id
);

895 
fd
 = 
	`ngx_›í_fûe
(
˘x
->
keyfûe
.
d©a
, 
NGX_FILE_WRONLY
,

896 
NGX_FILE_TRUNCATE
, 
NGX_FILE_DEFAULT_ACCESS
);

898 i‡(
fd
 =
NGX_INVALID_FILE
) {

899 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

901 
˘x
->
keyfûe
.
d©a
);

902  
NGX_ERROR
;

905 i‡(
	`ngx_wrôe_fd
(
fd
, 
˘x
->
key
, 16) != 16) {

906 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

908 
˘x
->
keyfûe
.
d©a
);

909 
	`ngx_˛o£_fûe
(
fd
);

910  
NGX_ERROR
;

913 
	`ngx_˛o£_fûe
(
fd
);

916 i‡(
hacf
->
‰ags_≥r_key
) {

917 
˘x
->
key_‰ags
--;

920 i‡(
	`ngx_£t_fûe_time
(
˘x
->
keyfûe
.
d©a
, 0, 
ngx_ˇched_time
->
£c
)

921 !
NGX_OK
)

923 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

924 
ngx_£t_fûe_time_n
 " '%s' failed",

925 
˘x
->
keyfûe
.
d©a
);

930 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

933 
˘x
->
°ªam
.
d©a
,

934 
˘x
->
keyfûe
.
d©a
 ? ctx->keyfûe.d©®: (
u_ch¨
 *) "",

935 
˘x
->
‰ag
, ctx->
n‰ags
, 
ts
, 
disc⁄t
);

937 i‡(
hacf
->
keys
 &&

938 
	`ngx_πmp_m≥gts_öô_í¸y±i⁄
(&
˘x
->
fûe
, ctx->
key
, 16, ctx->
key_id
)

939 !
NGX_OK
)

941 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

943  
NGX_ERROR
;

946 i‡(
	`ngx_πmp_m≥gts_›í_fûe
(&
˘x
->
fûe
, ctx->
°ªam
.
d©a
,

947 
s
->
c⁄√˘i⁄
->
log
)

948 !
NGX_OK
)

950  
NGX_ERROR
;

953 
˘x
->
›íed
 = 1;

955 
f
 = 
	`ngx_πmp_hls_gë_‰ag
(
s
, 
˘x
->
n‰ags
);

957 
	`ngx_memzîo
(
f
, (*f));

959 
f
->
a˘ive
 = 1;

960 
f
->
disc⁄t
 = discont;

961 
f
->
id
 = id;

962 
f
->
key_id
 = 
˘x
->key_id;

964 
˘x
->
‰ag_ts
 = 
ts
;

968 
	`ngx_πmp_hls_Êush_audio
(
s
);

970  
NGX_OK
;

971 
	}
}

975 
	$ngx_πmp_hls_ª°‹e_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
)

977 
ngx_πmp_hls_˘x_t
 *
˘x
;

978 
ngx_fûe_t
 
fûe
;

979 
ssize_t
 
ªt
;

980 
off_t
 
off£t
;

981 
u_ch¨
 *
p
, *
œ°
, *
íd
, *
√xt
, *
∑
, *
µ
, 
c
;

982 
ngx_πmp_hls_‰ag_t
 *
f
;

983 
duøti⁄
;

984 
ngx_öt_t
 
disc⁄t
;

985 
uöt64_t
 
mag
, 
key_id
, 
ba£
;

986 
u_ch¨
 
buf„r
[4096];

988 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

990 
	`ngx_memzîo
(&
fûe
, (file));

992 
fûe
.
log
 = 
s
->
c⁄√˘i⁄
->log;

994 
	`ngx_°r_£t
(&
fûe
.
«me
, "m3u8");

996 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
˘x
->
∂ayli°
.
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
,

998 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1002 
off£t
 = 0;

1003 
˘x
->
n‰ags
 = 0;

1004 
f
 = 
NULL
;

1005 
duøti⁄
 = 0;

1006 
disc⁄t
 = 0;

1007 
key_id
 = 0;

1011 
ªt
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf„r
, (buf„r), 
off£t
);

1012 i‡(
ªt
 <= 0) {

1013 
d⁄e
;

1016 
p
 = 
buf„r
;

1017 
íd
 = 
buf„r
 + 
ªt
;

1020 
œ°
 = 
	`ngx_°æchr
(
p
, 
íd
, '\n');

1022 i‡(
œ°
 =
NULL
) {

1023 i‡(
p
 =
buf„r
) {

1024 
d⁄e
;

1029 
√xt
 = 
œ°
 + 1;

1030 
off£t
 +(
√xt
 - 
p
);

1032 i‡(
p
 !
œ°
 &&Üast[-1] == '\r') {

1033 
œ°
--;

1037 
	#NGX_RTMP_MSEQ
 "#EXT-X-MEDIA-SEQUENCE:"

	)

1038 
	#NGX_RTMP_MSEQ_LEN
 ((
NGX_RTMP_MSEQ
Ë- 1)

	)

1041 i‡(
	`ngx_memcmp
(
p
, 
NGX_RTMP_MSEQ
, 
NGX_RTMP_MSEQ_LEN
) == 0) {

1043 
˘x
->
‰ag
 = (
uöt64_t
Ë
	`°πod
((const *)

1044 &
p
[
NGX_RTMP_MSEQ_LEN
], 
NULL
);

1046 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1047 "hls:Ñe°‹ê£quí˚ føg=%uL", 
˘x
->
‰ag
);

1051 
	#NGX_RTMP_XKEY
 "#EXT-X-KEY:"

	)

1052 
	#NGX_RTMP_XKEY_LEN
 ((
NGX_RTMP_XKEY
Ë- 1)

	)

1054 i‡(
	`ngx_memcmp
(
p
, 
NGX_RTMP_XKEY
, 
NGX_RTMP_XKEY_LEN
) == 0) {

1058 
key_id
 = 0;

1059 
ba£
 = 1;

1060 
µ
 = 
œ°
 - 1;

1063 i‡(
µ
 < 
p
) {

1064 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1069 
c
 = *
µ
;

1070 i‡(
c
 == 'x') {

1074 i‡(
c
 >= '0' && c <= '9') {

1075 
c
 -= '0';

1076 
√xt
;

1079 
c
 |= 0x20;

1081 i‡(
c
 >= 'a' && c <= 'f') {

1082 
c
 -= 'a' - 10;

1083 
√xt
;

1086 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1090 
√xt
:

1092 
key_id
 +
ba£
 * 
c
;

1093 
ba£
 *= 0x10;

1094 
µ
--;

1099 
	#NGX_RTMP_EXTINF
 "#EXTINF:"

	)

1100 
	#NGX_RTMP_EXTINF_LEN
 ((
NGX_RTMP_EXTINF
Ë- 1)

	)

1103 i‡(
	`ngx_memcmp
(
p
, 
NGX_RTMP_EXTINF
, 
NGX_RTMP_EXTINF_LEN
) == 0) {

1105 
duøti⁄
 = 
	`°πod
((c⁄° *Ë&
p
[
NGX_RTMP_EXTINF_LEN
], 
NULL
);

1107 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1108 "hls:Ñe°‹êduøri⁄=%.3f", 
duøti⁄
);

1112 
	#NGX_RTMP_DISCONT
 "#EXT-X-DISCONTINUITY"

	)

1113 
	#NGX_RTMP_DISCONT_LEN
 ((
NGX_RTMP_DISCONT
Ë- 1)

	)

1116 i‡(
	`ngx_memcmp
(
p
, 
NGX_RTMP_DISCONT
, 
NGX_RTMP_DISCONT_LEN
) == 0) {

1118 
disc⁄t
 = 1;

1120 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1126 i‡(
p
 + 4 <
œ°
 &&

1127 
œ°
[-3] == '.' &&Üast[-2] == 't' &&Üast[-1] == 's')

1129 
f
 = 
	`ngx_πmp_hls_gë_‰ag
(
s
, 
˘x
->
n‰ags
);

1131 
	`ngx_memzîo
(
f
, (*f));

1133 
f
->
duøti⁄
 = duration;

1134 
f
->
disc⁄t
 = discont;

1135 
f
->
a˘ive
 = 1;

1136 
f
->
id
 = 0;

1138 
disc⁄t
 = 0;

1140 
mag
 = 1;

1141 
∑
 = 
œ°
 - 4;Ö®>
p
;Öa--) {

1142 i‡(*
∑
 < '0' || *pa > '9') {

1145 
f
->
id
 +(*
∑
 - '0'Ë* 
mag
;

1146 
mag
 *= 10;

1149 
f
->
key_id
 = key_id;

1151 
	`ngx_πmp_hls_√xt_‰ag
(
s
);

1153 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1156 (
size_t
Ë(
œ°
 - 
p
),Ö, 
f
->
id
, f->
duøti⁄
,

1157 
˘x
->
‰ag
, ctx->
n‰ags
);

1160 
p
 = 
√xt
;

1164 
d⁄e
:

1165 
	`ngx_˛o£_fûe
(
fûe
.
fd
);

1166 
	}
}

1169 
ngx_öt_t


1170 
	$ngx_πmp_hls_ísuª_dúe˘‹y
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
∑th
)

1172 
size_t
 
Àn
;

1173 
ngx_fûe_öfo_t
 
fi
;

1174 
ngx_πmp_hls_˘x_t
 *
˘x
;

1175 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

1177 
u_ch¨
 
z∑th
[
NGX_MAX_PATH
 + 1];

1179 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

1181 i‡(
∑th
->
Àn
 + 1 > (
z∑th
)) {

1182 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0, "hls:ÅooÜongÖath");

1183  
NGX_ERROR
;

1186 
	`ngx_¢¥ötf
(
z∑th
, (z∑th), "%V%Z", 
∑th
);

1188 i‡(
	`ngx_fûe_öfo
(
z∑th
, &
fi
Ë=
NGX_FILE_ERROR
) {

1190 i‡(
ngx_î∫o
 !
NGX_ENOENT
) {

1191 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1192 "hls: " 
ngx_fûe_öfo_n
 " faûed o¿'%V'", 
∑th
);

1193  
NGX_ERROR
;

1198 i‡(
	`ngx_¸óã_dú
(
z∑th
, 
NGX_RTMP_HLS_DIR_ACCESS
Ë=
NGX_FILE_ERROR
) {

1199 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1200 "hls: " 
ngx_¸óã_dú_n
 " faûed o¿'%V'", 
∑th
);

1201  
NGX_ERROR
;

1204 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1205 "hls: dúe˘‹y '%V' cª©ed", 
∑th
);

1209 i‡(!
	`ngx_is_dú
(&
fi
)) {

1210 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1211 "hls: '%V'Éxi°†™d i†nŸá dúe˘‹y", 
∑th
);

1212  
NGX_ERROR
;

1215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1216 "hls: dúe˘‹y '%V'Éxi°s", 
∑th
);

1219 i‡(!
hacf
->
√°ed
) {

1220  
NGX_OK
;

1223 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

1225 
Àn
 = 
∑th
->len;

1226 i‡(
∑th
->
d©a
[
Àn
 - 1] == '/') {

1227 
Àn
--;

1230 i‡(
Àn
 + 1 + 
˘x
->
«me
.À¿+ 1 > (
z∑th
)) {

1231 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0, "hls:ÅooÜongÖath");

1232  
NGX_ERROR
;

1235 
	`ngx_¢¥ötf
(
z∑th
, (z∑thË- 1, "%*s/%V%Z", 
Àn
, 
∑th
->
d©a
,

1236 &
˘x
->
«me
);

1238 i‡(
	`ngx_fûe_öfo
(
z∑th
, &
fi
Ë!
NGX_FILE_ERROR
) {

1240 i‡(
	`ngx_is_dú
(&
fi
)) {

1241 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1242 "hls: dúe˘‹y '%s'Éxi°s", 
z∑th
);

1243  
NGX_OK
;

1246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1247 "hls: '%s'Éxi°†™d i†nŸá dúe˘‹y", 
z∑th
);

1249  
NGX_ERROR
;

1252 i‡(
ngx_î∫o
 !
NGX_ENOENT
) {

1253 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1254 "hls: " 
ngx_fûe_öfo_n
 " faûed o¿'%s'", 
z∑th
);

1255  
NGX_ERROR
;

1260 i‡(
	`ngx_¸óã_dú
(
z∑th
, 
NGX_RTMP_HLS_DIR_ACCESS
Ë=
NGX_FILE_ERROR
) {

1261 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1262 "hls: " 
ngx_¸óã_dú_n
 " faûed o¿'%s'", 
z∑th
);

1263  
NGX_ERROR
;

1266 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1267 "hls: dúe˘‹y '%s' cª©ed", 
z∑th
);

1269  
NGX_OK
;

1270 
	}
}

1273 
ngx_öt_t


1274 
	$ngx_πmp_hls_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

1276 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

1277 
ngx_πmp_hls_˘x_t
 *
˘x
;

1278 
u_ch¨
 *
p
, *
µ
;

1279 
ngx_πmp_hls_‰ag_t
 *
f
;

1280 
ngx_buf_t
 *
b
;

1281 
size_t
 
Àn
;

1282 
ngx_πmp_hls_v¨ü¡_t
 *
v¨
;

1283 
ngx_uöt_t
 
n
;

1285 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

1286 i‡(
hacf
 =
NULL
 || !hacf->
hls
 || hacf->
∑th
.
Àn
 == 0) {

1287 
√xt
;

1290 i‡(
s
->
auto_pushed
) {

1291 
√xt
;

1294 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1296 
v
->
«me
, v->
ty≥
);

1298 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

1300 i‡(
˘x
 =
NULL
) {

1302 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_hls_˘x_t
));

1303 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_hls_moduÀ
);

1307 
f
 = 
˘x
->
‰ags
;

1308 
b
 = 
˘x
->
a‰ame
;

1310 
	`ngx_memzîo
(
˘x
, (
ngx_πmp_hls_˘x_t
));

1312 
˘x
->
‰ags
 = 
f
;

1313 
˘x
->
a‰ame
 = 
b
;

1315 i‡(
b
) {

1316 
b
->
pos
 = b->
œ°
 = b->
°¨t
;

1320 i‡(
˘x
->
‰ags
 =
NULL
) {

1321 
˘x
->
‰ags
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

1322 (
ngx_πmp_hls_‰ag_t
) *

1323 (
hacf
->
wö‰ags
 * 2 + 1));

1324 i‡(
˘x
->
‰ags
 =
NULL
) {

1325  
NGX_ERROR
;

1329 i‡(
	`ngx_°r°r
(
v
->
«me
, "..")) {

1330 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1331 "hls: bad såómÇame: '%s'", 
v
->
«me
);

1332  
NGX_ERROR
;

1335 
˘x
->
«me
.
Àn
 = 
	`ngx_°æí
(
v
->name);

1336 
˘x
->
«me
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, ctx->«me.
Àn
 + 1);

1338 i‡(
˘x
->
«me
.
d©a
 =
NULL
) {

1339  
NGX_ERROR
;

1342 *
	`ngx_˝ymem
(
˘x
->
«me
.
d©a
, 
v
->«me, ctx->«me.
Àn
) = 0;

1344 
Àn
 = 
hacf
->
∑th
.À¿+ 1 + 
˘x
->
«me
.len + (".m3u8");

1345 i‡(
hacf
->
√°ed
) {

1346 
Àn
 += ("/index") - 1;

1349 
˘x
->
∂ayli°
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

1350 
p
 = 
	`ngx_˝ymem
(
˘x
->
∂ayli°
.
d©a
, 
hacf
->
∑th
.d©a, hacf->∑th.
Àn
);

1352 i‡(
p
[-1] != '/') {

1353 *
p
++ = '/';

1356 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

1364 
˘x
->
°ªam
.
Àn
 = 
p
 - ctx->
∂ayli°
.
d©a
 + 1;

1365 
˘x
->
°ªam
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

1366 
˘x
->
°ªam
.
Àn
 + 
NGX_INT64_LEN
 +

1369 
	`ngx_mem˝y
(
˘x
->
°ªam
.
d©a
, ctx->
∂ayli°
.d©a, ctx->°ªam.
Àn
 - 1);

1370 
˘x
->
°ªam
.
d©a
[˘x->°ªam.
Àn
 - 1] = (
hacf
->
√°ed
 ? '/' : '-');

1374 i‡(
hacf
->
v¨ü¡
) {

1375 
v¨
 = 
hacf
->
v¨ü¡
->
ñts
;

1376 
n
 = 0;Ç < 
hacf
->
v¨ü¡
->
√…s
;Ç++, 
v¨
++) {

1377 i‡(
˘x
->
«me
.
Àn
 > 
v¨
->
suffix
.len &&

1378 
	`ngx_memcmp
(
v¨
->
suffix
.
d©a
,

1379 
˘x
->
«me
.
d©a
 + ctx->«me.
Àn
 - 
v¨
->
suffix
.len,

1380 
v¨
->
suffix
.
Àn
)

1383 
˘x
->
v¨
 = var;

1385 
Àn
 = (
size_t
Ë(
p
 - 
˘x
->
∂ayli°
.
d©a
);

1387 
˘x
->
v¨_∂ayli°
.
Àn
 =Üí - 
v¨
->
suffix
.len + (".m3u8")

1389 
˘x
->
v¨_∂ayli°
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

1390 
˘x
->
v¨_∂ayli°
.
Àn
 + 1);

1392 
µ
 = 
	`ngx_˝ymem
(
˘x
->
v¨_∂ayli°
.
d©a
, ctx->
∂ayli°
.data,

1393 
Àn
 - 
v¨
->
suffix
.len);

1394 
µ
 = 
	`ngx_˝ymem
(pp, ".m3u8", (".m3u8") - 1);

1395 *
µ
 = 0;

1397 
˘x
->
v¨_∂ayli°_bak
.
Àn
 = ctx->
v¨_∂ayli°
.len +

1399 
˘x
->
v¨_∂ayli°_bak
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

1400 
˘x
->
v¨_∂ayli°_bak
.
Àn
 + 1);

1402 
µ
 = 
	`ngx_˝ymem
(
˘x
->
v¨_∂ayli°_bak
.
d©a
,

1403 
˘x
->
v¨_∂ayli°
.
d©a
,

1404 
˘x
->
v¨_∂ayli°
.
Àn
);

1405 
µ
 = 
	`ngx_˝ymem
(pp, ".bak", (".bak") - 1);

1406 *
µ
 = 0;

1416 i‡(
hacf
->
√°ed
) {

1417 
p
 = 
	`ngx_˝ymem
(p, "/index.m3u8", ("/index.m3u8") - 1);

1419 
p
 = 
	`ngx_˝ymem
(p, ".m3u8", (".m3u8") - 1);

1422 
˘x
->
∂ayli°
.
Àn
 = 
p
 - ctx->∂ayli°.
d©a
;

1424 *
p
 = 0;

1428 
˘x
->
∂ayli°_bak
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

1429 
˘x
->
∂ayli°
.
Àn
 + (".bak"));

1430 
p
 = 
	`ngx_˝ymem
(
˘x
->
∂ayli°_bak
.
d©a
, ctx->
∂ayli°
.data,

1431 
˘x
->
∂ayli°
.
Àn
);

1432 
p
 = 
	`ngx_˝ymem
(p, ".bak", (".bak") - 1);

1434 
˘x
->
∂ayli°_bak
.
Àn
 = 
p
 - ctx->∂ayli°_bak.
d©a
;

1436 *
p
 = 0;

1440 i‡(
hacf
->
keys
) {

1441 
Àn
 = 
hacf
->
key_∑th
.À¿+ 1 + 
˘x
->
«me
.À¿+ 1 + 
NGX_INT64_LEN


1444 
˘x
->
keyfûe
.
d©a
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

1445 i‡(
˘x
->
keyfûe
.
d©a
 =
NULL
) {

1446  
NGX_ERROR
;

1449 
p
 = 
	`ngx_˝ymem
(
˘x
->
keyfûe
.
d©a
, 
hacf
->
key_∑th
.data,

1450 
hacf
->
key_∑th
.
Àn
);

1452 i‡(
p
[-1] != '/') {

1453 *
p
++ = '/';

1456 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

1457 *
p
++ = (
hacf
->
√°ed
 ? '/' : '-');

1459 
˘x
->
keyfûe
.
Àn
 = 
p
 - ctx->keyfûe.
d©a
;

1462 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1465 &
˘x
->
∂ayli°
, &˘x->
∂ayli°_bak
,

1466 &
˘x
->
°ªam
, &˘x->
keyfûe
);

1468 i‡(
hacf
->
c⁄töuous
) {

1469 
	`ngx_πmp_hls_ª°‹e_°ªam
(
s
);

1472 
√xt
:

1473  
	`√xt_publish
(
s
, 
v
);

1474 
	}
}

1477 
ngx_öt_t


1478 
	$ngx_πmp_hls_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_˛o£_°ªam_t
 *
v
)

1480 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

1481 
ngx_πmp_hls_˘x_t
 *
˘x
;

1483 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

1485 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

1487 i‡(
hacf
 =
NULL
 || !hacf->
hls
 || 
˘x
 == NULL) {

1488 
√xt
;

1491 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1494 
	`ngx_πmp_hls_˛o£_‰agmít
(
s
);

1496 
√xt
:

1497  
	`√xt_˛o£_°ªam
(
s
, 
v
);

1498 
	}
}

1501 
ngx_öt_t


1502 
	$ngx_πmp_hls_∑r£_Øc_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 *
objty≥
,

1503 
ngx_uöt_t
 *
§ödex
,Çgx_uöt_à*
chc⁄f
)

1505 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

1506 
ngx_chaö_t
 *
˛
;

1507 
u_ch¨
 *
p
, 
b0
, 
b1
;

1509 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

1511 
˛
 = 
codec_˘x
->
Øc_hódî
;

1513 
p
 = 
˛
->
buf
->
pos
;

1515 i‡(
	`ngx_πmp_hls_c›y
(
s
, 
NULL
, &
p
, 2, &
˛
Ë!
NGX_OK
) {

1516  
NGX_ERROR
;

1519 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
b0
, &
p
, 1, &
˛
Ë!
NGX_OK
) {

1520  
NGX_ERROR
;

1523 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
b1
, &
p
, 1, &
˛
Ë!
NGX_OK
) {

1524  
NGX_ERROR
;

1527 *
objty≥
 = 
b0
 >> 3;

1528 i‡(*
objty≥
 == 0 || *objtype == 0x1f) {

1529 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1530 "hls: unsuµ‹ãdádt†obje˘Åy≥:%ui", *
objty≥
);

1531  
NGX_ERROR
;

1534 i‡(*
objty≥
 > 4) {

1541 *
objty≥
 = 2;

1544 *
§ödex
 = ((
b0
 << 1Ë& 0x0fË| ((
b1
 & 0x80) >> 7);

1545 i‡(*
§ödex
 == 0x0f) {

1546 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1547 "hls: unsuµ‹ãdádt†ßm∂êøã:%ui", *
§ödex
);

1548  
NGX_ERROR
;

1551 *
chc⁄f
 = (
b1
 >> 3) & 0x0f;

1553 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1555 "ch™√l_c⁄fig:%ui", *
objty≥
, *
§ödex
, *
chc⁄f
);

1557  
NGX_OK
;

1558 
	}
}

1562 
	$ngx_πmp_hls_upd©e_‰agmít
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt64_t
 
ts
,

1563 
ngx_öt_t
 
bound¨y
, 
ngx_uöt_t
 
Êush_øã
)

1565 
ngx_πmp_hls_˘x_t
 *
˘x
;

1566 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

1567 
ngx_πmp_hls_‰ag_t
 *
f
;

1568 
ngx_m£c_t
 
ts_‰ag_Àn
;

1569 
ngx_öt_t
 
ßme_‰ag
, 
f‹˚
,
disc⁄t
;

1570 
ngx_buf_t
 *
b
;

1571 
öt64_t
 
d
;

1573 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

1574 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

1575 
f
 = 
NULL
;

1576 
f‹˚
 = 0;

1577 
disc⁄t
 = 1;

1579 i‡(
˘x
->
›íed
) {

1580 
f
 = 
	`ngx_πmp_hls_gë_‰ag
(
s
, 
˘x
->
n‰ags
);

1581 
d
 = (
öt64_t
Ë(
ts
 - 
˘x
->
‰ag_ts
);

1583 i‡(
d
 > (
öt64_t
Ë
hacf
->
max_‰agÀn
 * 90 || d < -90000) {

1584 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1585 "hls: f‹˚ føgmíà•lô: %.3‡£c, ", 
d
 / 90000.);

1586 
f‹˚
 = 1;

1589 
f
->
duøti⁄
 = (
ts
 - 
˘x
->
‰ag_ts
) / 90000.;

1590 
disc⁄t
 = 0;

1594 
hacf
->
¶icög
) {

1595 
NGX_RTMP_HLS_SLICING_PLAIN
:

1596 i‡(
f
 && f->
duøti⁄
 < 
hacf
->
‰agÀn
 / 1000.) {

1597 
bound¨y
 = 0;

1601 
NGX_RTMP_HLS_SLICING_ALIGNED
:

1603 
ts_‰ag_Àn
 = 
hacf
->
‰agÀn
 * 90;

1604 
ßme_‰ag
 = 
˘x
->
‰ag_ts
 / 
ts_‰ag_Àn
 =
ts
 /Ås_frag_len;

1606 i‡(
f
 && 
ßme_‰ag
) {

1607 
bound¨y
 = 0;

1610 i‡(
f
 =
NULL
 && (
˘x
->
‰ag_ts
 =0 || 
ßme_‰ag
)) {

1611 
˘x
->
‰ag_ts
 = 
ts
;

1612 
bound¨y
 = 0;

1618 i‡(
bound¨y
 || 
f‹˚
) {

1619 
	`ngx_πmp_hls_˛o£_‰agmít
(
s
);

1620 
	`ngx_πmp_hls_›í_‰agmít
(
s
, 
ts
, 
disc⁄t
);

1623 
b
 = 
˘x
->
a‰ame
;

1624 i‡(
˘x
->
›íed
 && 
b
 && b->
œ°
 > b->
pos
 &&

1625 
˘x
->
a‰ame_±s
 + (
uöt64_t
Ë
hacf
->
max_audio_dñay
 * 90 / 
Êush_øã


1626 < 
ts
)

1628 
	`ngx_πmp_hls_Êush_audio
(
s
);

1630 
	}
}

1633 
ngx_öt_t


1634 
	$ngx_πmp_hls_Êush_audio
(
ngx_πmp_£ssi⁄_t
 *
s
)

1636 
ngx_πmp_hls_˘x_t
 *
˘x
;

1637 
ngx_πmp_m≥gts_‰ame_t
 
‰ame
;

1638 
ngx_öt_t
 
rc
;

1639 
ngx_buf_t
 *
b
;

1641 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

1643 i‡(
˘x
 =
NULL
 || !˘x->
›íed
) {

1644  
NGX_OK
;

1647 
b
 = 
˘x
->
a‰ame
;

1649 i‡(
b
 =
NULL
 || b->
pos
 =b->
œ°
) {

1650  
NGX_OK
;

1653 
	`ngx_memzîo
(&
‰ame
, (frame));

1655 
‰ame
.
dts
 = 
˘x
->
a‰ame_±s
;

1656 
‰ame
.
±s
 = føme.
dts
;

1657 
‰ame
.
cc
 = 
˘x
->
audio_cc
;

1658 
‰ame
.
pid
 = 0x101;

1659 
‰ame
.
sid
 = 0xc0;

1661 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1662 "hls: flusháudiÿ±s=%uL", 
‰ame
.
±s
);

1664 
rc
 = 
	`ngx_πmp_m≥gts_wrôe_‰ame
(&
˘x
->
fûe
, &
‰ame
, 
b
);

1666 i‡(
rc
 !
NGX_OK
) {

1667 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1671 
˘x
->
audio_cc
 = 
‰ame
.
cc
;

1672 
b
->
pos
 = b->
œ°
 = b->
°¨t
;

1674  
rc
;

1675 
	}
}

1678 
ngx_öt_t


1679 
	$ngx_πmp_hls_audio
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1680 
ngx_chaö_t
 *
ö
)

1682 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

1683 
ngx_πmp_hls_˘x_t
 *
˘x
;

1684 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

1685 
uöt64_t
 
±s
, 
e°_±s
;

1686 
öt64_t
 
d±s
;

1687 
size_t
 
bsize
;

1688 
ngx_buf_t
 *
b
;

1689 
u_ch¨
 *
p
;

1690 
ngx_uöt_t
 
objty≥
, 
§ödex
, 
chc⁄f
, 
size
;

1692 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

1694 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

1696 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

1698 i‡(
hacf
 =
NULL
 || !hacf->
hls
 || 
˘x
 == NULL ||

1699 
codec_˘x
 =
NULL
 || 
h
->
mÀn
 < 2)

1701  
NGX_OK
;

1704 i‡(
codec_˘x
->
audio_codec_id
 !
NGX_RTMP_AUDIO_AAC
 ||

1705 
codec_˘x
->
Øc_hódî
 =
NULL
 || 
	`ngx_πmp_is_codec_hódî
(
ö
))

1707  
NGX_OK
;

1710 
b
 = 
˘x
->
a‰ame
;

1712 i‡(
b
 =
NULL
) {

1714 
b
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_buf_t
));

1715 i‡(
b
 =
NULL
) {

1716  
NGX_ERROR
;

1719 
˘x
->
a‰ame
 = 
b
;

1721 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
hacf
->
audio_buf„r_size
);

1722 i‡(
b
->
°¨t
 =
NULL
) {

1723  
NGX_ERROR
;

1726 
b
->
íd
 = b->
°¨t
 + 
hacf
->
audio_buf„r_size
;

1727 
b
->
pos
 = b->
œ°
 = b->
°¨t
;

1730 
size
 = 
h
->
mÀn
 - 2 + 7;

1731 
±s
 = (
uöt64_t
Ë
h
->
time°amp
 * 90;

1733 i‡(
b
->
°¨t
 + 
size
 > b->
íd
) {

1734 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1736  
NGX_OK
;

1745 
	`ngx_πmp_hls_upd©e_‰agmít
(
s
, 
±s
, 
codec_˘x
->
avc_hódî
 =
NULL
, 2);

1747 i‡(
b
->
œ°
 + 
size
 > b->
íd
) {

1748 
	`ngx_πmp_hls_Êush_audio
(
s
);

1751 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1752 "hls:áudiÿ±s=%uL", 
±s
);

1754 i‡(
b
->
œ°
 + 7 > b->
íd
) {

1755 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1757  
NGX_OK
;

1760 
p
 = 
b
->
œ°
;

1761 
b
->
œ°
 += 5;

1765 ; 
ö
 && 
b
->
œ°
 < b->
íd
; i¿ö->
√xt
) {

1767 
bsize
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

1768 i‡(
b
->
œ°
 + 
bsize
 > b->
íd
) {

1769 
bsize
 = 
b
->
íd
 - b->
œ°
;

1772 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ö
->
buf
->
pos
, 
bsize
);

1777 i‡(
	`ngx_πmp_hls_∑r£_Øc_hódî
(
s
, &
objty≥
, &
§ödex
, &
chc⁄f
)

1778 !
NGX_OK
)

1780 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1782  
NGX_OK
;

1787 
p
[0] = 0xff;

1788 
p
[1] = 0xf1;

1789 
p
[2] = (
u_ch¨
Ë(((
objty≥
 - 1Ë<< 6Ë| (
§ödex
 << 2) |

1790 ((
chc⁄f
 & 0x04) >> 2));

1791 
p
[3] = (
u_ch¨
Ë(((
chc⁄f
 & 0x03Ë<< 6Ë| ((
size
 >> 11) & 0x03));

1792 
p
[4] = (
u_ch¨
Ë(
size
 >> 3);

1793 
p
[5] = (
u_ch¨
Ë((
size
 << 5) | 0x1f);

1794 
p
[6] = 0xfc;

1796 i‡(
p
 !
b
->
°¨t
) {

1797 
˘x
->
a‰ame_num
++;

1798  
NGX_OK
;

1801 
˘x
->
a‰ame_±s
 = 
±s
;

1803 i‡(!
hacf
->
sync
 || 
codec_˘x
->
ßm∂e_øã
 == 0) {

1804  
NGX_OK
;

1812 
e°_±s
 = 
˘x
->
a‰ame_ba£
 + ctx->
a‰ame_num
 * 90000 * 1024 /

1813 
codec_˘x
->
ßm∂e_øã
;

1814 
d±s
 = (
öt64_t
Ë(
e°_±s
 - 
±s
);

1816 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1818 
d±s
, dpts / 90000.);

1820 i‡(
d±s
 <(
öt64_t
Ë
hacf
->
sync
 * 90 &&

1821 
d±s
 >(
öt64_t
Ë
hacf
->
sync
 * -90)

1823 
˘x
->
a‰ame_num
++;

1824 
˘x
->
a‰ame_±s
 = 
e°_±s
;

1825  
NGX_OK
;

1828 
˘x
->
a‰ame_ba£
 = 
±s
;

1829 
˘x
->
a‰ame_num
 = 1;

1831 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1833 
d±s
, dpts / 90000.);

1835  
NGX_OK
;

1836 
	}
}

1839 
ngx_öt_t


1840 
	$ngx_πmp_hls_video
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1841 
ngx_chaö_t
 *
ö
)

1843 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
;

1844 
ngx_πmp_hls_˘x_t
 *
˘x
;

1845 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

1846 
u_ch¨
 *
p
;

1847 
uöt8_t
 
fmt
, 
·y≥
, 
hty≥
, 
«l_ty≥
, 
§c_«l_ty≥
;

1848 
uöt32_t
 
Àn
, 
æí
;

1849 
ngx_buf_t
 
out
, *
b
;

1850 
uöt32_t
 
˘s
;

1851 
ngx_πmp_m≥gts_‰ame_t
 
‰ame
;

1852 
ngx_uöt_t
 
«l_byãs
;

1853 
ngx_öt_t
 
aud_£¡
, 
•s_µs_£¡
, 
bound¨y
;

1854 
u_ch¨
 
buf„r
[
NGX_RTMP_HLS_BUFSIZE
];

1856 
hacf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_hls_moduÀ
);

1858 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_hls_moduÀ
);

1860 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

1862 i‡(
hacf
 =
NULL
 || !hacf->
hls
 || 
˘x
 =NULL || 
codec_˘x
 == NULL ||

1863 
codec_˘x
->
avc_hódî
 =
NULL
 || 
h
->
mÀn
 < 1)

1865  
NGX_OK
;

1869 i‡(
codec_˘x
->
video_codec_id
 !
NGX_RTMP_VIDEO_H264
) {

1870  
NGX_OK
;

1873 
p
 = 
ö
->
buf
->
pos
;

1874 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
fmt
, &
p
, 1, &
ö
Ë!
NGX_OK
) {

1875  
NGX_ERROR
;

1882 
·y≥
 = (
fmt
 & 0xf0) >> 4;

1886 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
hty≥
, &
p
, 1, &
ö
Ë!
NGX_OK
) {

1887  
NGX_ERROR
;

1892 i‡(
hty≥
 != 1) {

1893  
NGX_OK
;

1898 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
˘s
, &
p
, 3, &
ö
Ë!
NGX_OK
) {

1899  
NGX_ERROR
;

1902 
˘s
 = ((cts & 0x00FF0000) >> 16) | ((cts & 0x000000FF) << 16) |

1903 (
˘s
 & 0x0000FF00);

1905 
	`ngx_memzîo
(&
out
, (out));

1907 
out
.
°¨t
 = 
buf„r
;

1908 
out
.
íd
 = 
buf„r
 + (buffer);

1909 
out
.
pos
 = out.
°¨t
;

1910 
out
.
œ°
 = out.
pos
;

1912 
«l_byãs
 = 
codec_˘x
->
avc_«l_byãs
;

1913 
aud_£¡
 = 0;

1914 
•s_µs_£¡
 = 0;

1916 
ö
) {

1917 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
æí
, &
p
, 
«l_byãs
, &
ö
Ë!
NGX_OK
) {

1918  
NGX_OK
;

1921 
Àn
 = 0;

1922 
	`ngx_πmp_rmem˝y
(&
Àn
, &
æí
, 
«l_byãs
);

1924 i‡(
Àn
 == 0) {

1928 i‡(
	`ngx_πmp_hls_c›y
(
s
, &
§c_«l_ty≥
, &
p
, 1, &
ö
Ë!
NGX_OK
) {

1929  
NGX_OK
;

1932 
«l_ty≥
 = 
§c_«l_ty≥
 & 0x1f;

1934 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1936 (
ngx_uöt_t
Ë
«l_ty≥
, 
Àn
);

1938 i‡(
«l_ty≥
 >= 7 &&Çal_type <= 9) {

1939 i‡(
	`ngx_πmp_hls_c›y
(
s
, 
NULL
, &
p
, 
Àn
 - 1, &
ö
Ë!
NGX_OK
) {

1940  
NGX_ERROR
;

1945 i‡(!
aud_£¡
) {

1946 
«l_ty≥
) {

1950 i‡(
	`ngx_πmp_hls_≠≥nd_aud
(
s
, &
out
Ë!
NGX_OK
) {

1951 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1955 
aud_£¡
 = 1;

1960 
«l_ty≥
) {

1962 
•s_µs_£¡
 = 0;

1965 i‡(
•s_µs_£¡
) {

1968 i‡(
	`ngx_πmp_hls_≠≥nd_•s_µs
(
s
, &
out
Ë!
NGX_OK
) {

1969 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1972 
•s_µs_£¡
 = 1;

1978 i‡(
out
.
íd
 - out.
œ°
 < 5) {

1979 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1981  
NGX_OK
;

1986 i‡(
out
.
œ°
 =out.
pos
) {

1987 *
out
.
œ°
++ = 0;

1990 *
out
.
œ°
++ = 0;

1991 *
out
.
œ°
++ = 0;

1992 *
out
.
œ°
++ = 1;

1993 *
out
.
œ°
++ = 
§c_«l_ty≥
;

1997 i‡(
out
.
íd
 - out.
œ°
 < (
ngx_öt_t
Ë
Àn
) {

1998 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2000  
NGX_OK
;

2003 i‡(
	`ngx_πmp_hls_c›y
(
s
, 
out
.
œ°
, &
p
, 
Àn
 - 1, &
ö
Ë!
NGX_OK
) {

2004  
NGX_ERROR
;

2007 
out
.
œ°
 +(
Àn
 - 1);

2010 
	`ngx_memzîo
(&
‰ame
, (frame));

2012 
‰ame
.
cc
 = 
˘x
->
video_cc
;

2013 
‰ame
.
dts
 = (
uöt64_t
Ë
h
->
time°amp
 * 90;

2014 
‰ame
.
±s
 = føme.
dts
 + 
˘s
 * 90;

2015 
‰ame
.
pid
 = 0x100;

2016 
‰ame
.
sid
 = 0xe0;

2017 
‰ame
.
key
 = (
·y≥
 == 1);

2025 
b
 = 
˘x
->
a‰ame
;

2026 
bound¨y
 = 
‰ame
.
key
 && (
codec_˘x
->
Øc_hódî
 =
NULL
 || !
˘x
->
›íed
 ||

2027 (
b
 && b->
œ°
 > b->
pos
));

2029 
	`ngx_πmp_hls_upd©e_‰agmít
(
s
, 
‰ame
.
dts
, 
bound¨y
, 1);

2031 i‡(!
˘x
->
›íed
) {

2032  
NGX_OK
;

2035 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2036 "hls: videÿ±s=%uL, dts=%uL", 
‰ame
.
±s
, føme.
dts
);

2038 i‡(
	`ngx_πmp_m≥gts_wrôe_‰ame
(&
˘x
->
fûe
, &
‰ame
, &
out
Ë!
NGX_OK
) {

2039 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2043 
˘x
->
video_cc
 = 
‰ame
.
cc
;

2045  
NGX_OK
;

2046 
	}
}

2049 
ngx_öt_t


2050 
	$ngx_πmp_hls_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_begö_t
 *
v
)

2052  
	`√xt_°ªam_begö
(
s
, 
v
);

2053 
	}
}

2056 
ngx_öt_t


2057 
	$ngx_πmp_hls_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_eof_t
 *
v
)

2059 
	`ngx_πmp_hls_Êush_audio
(
s
);

2061 
	`ngx_πmp_hls_˛o£_‰agmít
(
s
);

2063  
	`√xt_°ªam_eof
(
s
, 
v
);

2064 
	}
}

2067 
ngx_öt_t


2068 
	$ngx_πmp_hls_˛ónup_dú
(
ngx_°r_t
 *
µ©h
, 
ngx_m£c_t
 
∂ayÀn
)

2070 
ngx_dú_t
 
dú
;

2071 
time_t
 
mtime
, 
max_age
;

2072 
ngx_îr_t
 
îr
;

2073 
ngx_°r_t
 
«me
, 
•©h
;

2074 
u_ch¨
 *
p
;

2075 
ngx_öt_t
 
√¡rõs
, 
√ø£d
;

2076 
u_ch¨
 
∑th
[
NGX_MAX_PATH
 + 1];

2078 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

2080 
µ©h
, 
∂ayÀn
);

2082 i‡(
	`ngx_›í_dú
(
µ©h
, &
dú
Ë!
NGX_OK
) {

2083 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

2084 "hls: cÀ™u∞›í dú faûed '%V'", 
µ©h
);

2085  
NGX_ERROR
;

2088 
√¡rõs
 = 0;

2089 
√ø£d
 = 0;

2092 
	`ngx_£t_î∫o
(0);

2094 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

2095 
îr
 = 
ngx_î∫o
;

2097 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

2098 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

2099 "hls: cÀ™u∞" 
ngx_˛o£_dú_n
 " \"%V\" failed",

2100 
µ©h
);

2103 i‡(
îr
 =
NGX_ENOMOREFILES
) {

2104  
√¡rõs
 - 
√ø£d
;

2107 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
îr
,

2108 "hls: cÀ™u∞" 
ngx_ªad_dú_n


2109 " '%V' faûed", 
µ©h
);

2110  
NGX_ERROR
;

2113 
«me
.
d©a
 = 
	`ngx_de_«me
(&
dú
);

2114 i‡(
«me
.
d©a
[0] == '.') {

2118 
«me
.
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

2120 
p
 = 
	`ngx_¢¥ötf
(
∑th
, ’©hË- 1, "%V/%V", 
µ©h
, &
«me
);

2121 *
p
 = 0;

2123 
•©h
.
d©a
 = 
∑th
;

2124 
•©h
.
Àn
 = 
p
 - 
∑th
;

2126 
√¡rõs
++;

2128 i‡(!
dú
.
vÆid_öfo
 && 
	`ngx_de_öfo
(
∑th
, &dúË=
NGX_FILE_ERROR
) {

2129 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

2130 "hls: cÀ™u∞" 
ngx_de_öfo_n
 " \"%V\" failed",

2131 &
•©h
);

2136 i‡(
	`ngx_de_is_dú
(&
dú
)) {

2138 i‡(
	`ngx_πmp_hls_˛ónup_dú
(&
•©h
, 
∂ayÀn
) == 0) {

2139 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

2140 "hls: cÀ™u∞dú '%V'", &
«me
);

2147 *
p
 = 0;

2149 i‡(
	`ngx_dñëe_dú
(
∑th
Ë=
NGX_FILE_ERROR
) {

2150 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

2151 "hls: cÀ™u∞" 
ngx_dñëe_dú_n


2152 " faûed o¿'%V'", &
•©h
);

2154 
√ø£d
++;

2161 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

2165 i‡(
«me
.
Àn
 >3 &&Çame.
d©a
[name.len - 3] == '.' &&

2166 
«me
.
d©a
[«me.
Àn
 - 2] == 't' &&

2167 
«me
.
d©a
[«me.
Àn
 - 1] == 's')

2169 
max_age
 = 
∂ayÀn
 / 500;

2171 } i‡(
«me
.
Àn
 >5 &&Çame.
d©a
[name.len - 5] == '.' &&

2172 
«me
.
d©a
[«me.
Àn
 - 4] == 'm' &&

2173 
«me
.
d©a
[«me.
Àn
 - 3] == '3' &&

2174 
«me
.
d©a
[«me.
Àn
 - 2] == 'u' &&

2175 
«me
.
d©a
[«me.
Àn
 - 1] == '8')

2177 
max_age
 = 
∂ayÀn
 / 1000;

2179 } i‡(
«me
.
Àn
 >4 &&Çame.
d©a
[name.len - 4] == '.' &&

2180 
«me
.
d©a
[«me.
Àn
 - 3] == 'k' &&

2181 
«me
.
d©a
[«me.
Àn
 - 2] == 'e' &&

2182 
«me
.
d©a
[«me.
Àn
 - 1] == 'y')

2184 
max_age
 = 
∂ayÀn
 / 500;

2187 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

2188 "hls: cÀ™u∞skù unknow¿fûêty≥ '%V'", &
«me
);

2192 
mtime
 = 
	`ngx_de_mtime
(&
dú
);

2193 i‡(
mtime
 + 
max_age
 > 
ngx_ˇched_time
->
£c
) {

2197 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
ngx_cy˛e
->
log
, 0,

2199 &
«me
, 
mtime
, 
ngx_ˇched_time
->
£c
 - mtime);

2201 i‡(
	`ngx_dñëe_fûe
(
∑th
Ë=
NGX_FILE_ERROR
) {

2202 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

2203 "hls: cÀ™u∞" 
ngx_dñëe_fûe_n
 " failed on '%V'",

2204 &
•©h
);

2208 
√ø£d
++;

2210 
	}
}

2213 
time_t


2214 
	$ngx_πmp_hls_˛ónup
(*
d©a
)

2216 
ngx_πmp_hls_˛ónup_t
 *
˛ónup
 = 
d©a
;

2218 
	`ngx_πmp_hls_˛ónup_dú
(&
˛ónup
->
∑th
, cÀ™up->
∂ayÀn
);

2220  
˛ónup
->
∂ayÀn
 / 500;

2221 
	}
}

2225 
	$ngx_πmp_hls_v¨ü¡
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2227 
ngx_πmp_hls_≠p_c⁄f_t
 *
hacf
 = 
c⁄f
;

2229 
ngx_°r_t
 *
vÆue
, *
¨g
;

2230 
ngx_uöt_t
 
n
;

2231 
ngx_πmp_hls_v¨ü¡_t
 *
v¨
;

2233 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2235 i‡(
hacf
->
v¨ü¡
 =
NULL
) {

2236 
hacf
->
v¨ü¡
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

2237 (
ngx_πmp_hls_v¨ü¡_t
));

2238 i‡(
hacf
->
v¨ü¡
 =
NULL
) {

2239  
NGX_CONF_ERROR
;

2243 
v¨
 = 
	`ngx_¨øy_push
(
hacf
->
v¨ü¡
);

2244 i‡(
v¨
 =
NULL
) {

2245  
NGX_CONF_ERROR
;

2248 
	`ngx_memzîo
(
v¨
, (
ngx_πmp_hls_v¨ü¡_t
));

2250 
v¨
->
suffix
 = 
vÆue
[1];

2252 i‡(
cf
->
¨gs
->
√…s
 == 2) {

2253  
NGX_CONF_OK
;

2256 i‡(
	`ngx_¨øy_öô
(&
v¨
->
¨gs
, 
cf
->
poﬁ
, cf->¨gs->
√…s
 - 2,

2257 (
ngx_°r_t
))

2258 !
NGX_OK
)

2260  
NGX_CONF_ERROR
;

2263 
¨g
 = 
	`ngx_¨øy_push_n
(&
v¨
->
¨gs
, 
cf
->¨gs->
√…s
 - 2);

2264 i‡(
¨g
 =
NULL
) {

2265  
NGX_CONF_ERROR
;

2268 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

2269 *
¨g
++ = 
vÆue
[
n
];

2272  
NGX_CONF_OK
;

2273 
	}
}

2277 
	$ngx_πmp_hls_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2279 
ngx_πmp_hls_≠p_c⁄f_t
 *
c⁄f
;

2281 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_hls_≠p_c⁄f_t
));

2282 i‡(
c⁄f
 =
NULL
) {

2283  
NULL
;

2286 
c⁄f
->
hls
 = 
NGX_CONF_UNSET
;

2287 
c⁄f
->
‰agÀn
 = 
NGX_CONF_UNSET_MSEC
;

2288 
c⁄f
->
max_‰agÀn
 = 
NGX_CONF_UNSET_MSEC
;

2289 
c⁄f
->
muxdñay
 = 
NGX_CONF_UNSET_MSEC
;

2290 
c⁄f
->
sync
 = 
NGX_CONF_UNSET_MSEC
;

2291 
c⁄f
->
∂ayÀn
 = 
NGX_CONF_UNSET_MSEC
;

2292 
c⁄f
->
c⁄töuous
 = 
NGX_CONF_UNSET
;

2293 
c⁄f
->
√°ed
 = 
NGX_CONF_UNSET
;

2294 
c⁄f
->
«mög
 = 
NGX_CONF_UNSET_UINT
;

2295 
c⁄f
->
¶icög
 = 
NGX_CONF_UNSET_UINT
;

2296 
c⁄f
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

2297 
c⁄f
->
max_audio_dñay
 = 
NGX_CONF_UNSET_MSEC
;

2298 
c⁄f
->
audio_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2299 
c⁄f
->
˛ónup
 = 
NGX_CONF_UNSET
;

2300 
c⁄f
->
gønuœrôy
 = 
NGX_CONF_UNSET
;

2301 
c⁄f
->
keys
 = 
NGX_CONF_UNSET
;

2302 
c⁄f
->
‰ags_≥r_key
 = 
NGX_CONF_UNSET_UINT
;

2304  
c⁄f
;

2305 
	}
}

2309 
	$ngx_πmp_hls_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2311 
ngx_πmp_hls_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2312 
ngx_πmp_hls_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

2313 
ngx_πmp_hls_˛ónup_t
 *
˛ónup
;

2315 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
hls
, 
¥ev
->hls, 0);

2316 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
‰agÀn
, 
¥ev
->fraglen, 5000);

2317 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
max_‰agÀn
, 
¥ev
->max_fraglen,

2318 
c⁄f
->
‰agÀn
 * 10);

2319 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
muxdñay
, 
¥ev
->muxdelay, 700);

2320 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
sync
, 
¥ev
->sync, 2);

2321 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
∂ayÀn
, 
¥ev
->playlen, 30000);

2322 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
c⁄töuous
, 
¥ev
->continuous, 1);

2323 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
√°ed
, 
¥ev
->nested, 0);

2324 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
«mög
, 
¥ev
->naming,

2325 
NGX_RTMP_HLS_NAMING_SEQUENTIAL
);

2326 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
¶icög
, 
¥ev
->slicing,

2327 
NGX_RTMP_HLS_SLICING_PLAIN
);

2328 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥
, 
¥ev
->type,

2329 
NGX_RTMP_HLS_TYPE_LIVE
);

2330 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
max_audio_dñay
, 
¥ev
->max_audio_delay,

2332 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
audio_buf„r_size
, 
¥ev
->audio_buffer_size,

2333 
NGX_RTMP_HLS_BUFSIZE
);

2334 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛ónup
, 
¥ev
->cleanup, 1);

2335 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ba£_uæ
, 
¥ev
->base_url, "");

2336 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
gønuœrôy
, 
¥ev
->granularity, 0);

2337 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
keys
, 
¥ev
->keys, 0);

2338 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
key_∑th
, 
¥ev
->key_path, "");

2339 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
key_uæ
, 
¥ev
->key_url, "");

2340 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
‰ags_≥r_key
, 
¥ev
->frags_per_key, 0);

2342 i‡(
c⁄f
->
‰agÀn
) {

2343 
c⁄f
->
wö‰ags
 = c⁄f->
∂ayÀn
 / c⁄f->
‰agÀn
;

2348 i‡(
c⁄f
->
hls
 && c⁄f->
∑th
.
Àn
 && c⁄f->
˛ónup
 &&

2349 
c⁄f
->
ty≥
 !
NGX_RTMP_HLS_TYPE_EVENT
)

2351 i‡(
c⁄f
->
∑th
.
d©a
[c⁄f->∑th.
Àn
 - 1] == '/') {

2352 
c⁄f
->
∑th
.
Àn
--;

2355 
˛ónup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*cleanup));

2356 i‡(
˛ónup
 =
NULL
) {

2357  
NGX_CONF_ERROR
;

2360 
˛ónup
->
∑th
 = 
c⁄f
->path;

2361 
˛ónup
->
∂ayÀn
 = 
c⁄f
->playlen;

2363 
c⁄f
->
¶Ÿ
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*conf->slot));

2364 i‡(
c⁄f
->
¶Ÿ
 =
NULL
) {

2365  
NGX_CONF_ERROR
;

2368 
c⁄f
->
¶Ÿ
->
m™agî
 = 
ngx_πmp_hls_˛ónup
;

2369 
c⁄f
->
¶Ÿ
->
«me
 = c⁄f->
∑th
;

2370 
c⁄f
->
¶Ÿ
->
d©a
 = 
˛ónup
;

2371 
c⁄f
->
¶Ÿ
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

2372 
c⁄f
->
¶Ÿ
->
löe
 = 
cf
->
c⁄f_fûe
->line;

2374 i‡(
	`ngx_add_∑th
(
cf
, &
c⁄f
->
¶Ÿ
Ë!
NGX_OK
) {

2375  
NGX_CONF_ERROR
;

2379 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, "");

2381 i‡(
c⁄f
->
keys
 && c⁄f->
˛ónup
 && c⁄f->
key_∑th
.
Àn
 &&

2382 
	`ngx_°rcmp
(
c⁄f
->
key_∑th
.
d©a
, c⁄f->
∑th
.data) != 0 &&

2383 
c⁄f
->
ty≥
 !
NGX_RTMP_HLS_TYPE_EVENT
)

2385 i‡(
c⁄f
->
key_∑th
.
d©a
[c⁄f->key_∑th.
Àn
 - 1] == '/') {

2386 
c⁄f
->
key_∑th
.
Àn
--;

2389 
˛ónup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*cleanup));

2390 i‡(
˛ónup
 =
NULL
) {

2391  
NGX_CONF_ERROR
;

2394 
˛ónup
->
∑th
 = 
c⁄f
->
key_∑th
;

2395 
˛ónup
->
∂ayÀn
 = 
c⁄f
->playlen;

2397 
c⁄f
->
¶Ÿ
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*conf->slot));

2398 i‡(
c⁄f
->
¶Ÿ
 =
NULL
) {

2399  
NGX_CONF_ERROR
;

2402 
c⁄f
->
¶Ÿ
->
m™agî
 = 
ngx_πmp_hls_˛ónup
;

2403 
c⁄f
->
¶Ÿ
->
«me
 = c⁄f->
key_∑th
;

2404 
c⁄f
->
¶Ÿ
->
d©a
 = 
˛ónup
;

2405 
c⁄f
->
¶Ÿ
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

2406 
c⁄f
->
¶Ÿ
->
löe
 = 
cf
->
c⁄f_fûe
->line;

2408 i‡(
	`ngx_add_∑th
(
cf
, &
c⁄f
->
¶Ÿ
Ë!
NGX_OK
) {

2409  
NGX_CONF_ERROR
;

2413 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
key_∑th
, 
¥ev
->key_path, "");

2415 i‡(
c⁄f
->
key_∑th
.
Àn
 == 0) {

2416 
c⁄f
->
key_∑th
 = c⁄f->
∑th
;

2419  
NGX_CONF_OK
;

2420 
	}
}

2423 
ngx_öt_t


2424 
	$ngx_πmp_hls_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2426 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

2427 
ngx_πmp_h™dÀr_±
 *
h
;

2429 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

2431 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_VIDEO
]);

2432 *
h
 = 
ngx_πmp_hls_video
;

2434 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_AUDIO
]);

2435 *
h
 = 
ngx_πmp_hls_audio
;

2437 
√xt_publish
 = 
ngx_πmp_publish
;

2438 
ngx_πmp_publish
 = 
ngx_πmp_hls_publish
;

2440 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

2441 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_hls_˛o£_°ªam
;

2443 
√xt_°ªam_begö
 = 
ngx_πmp_°ªam_begö
;

2444 
ngx_πmp_°ªam_begö
 = 
ngx_πmp_hls_°ªam_begö
;

2446 
√xt_°ªam_eof
 = 
ngx_πmp_°ªam_eof
;

2447 
ngx_πmp_°ªam_eof
 = 
ngx_πmp_hls_°ªam_eof
;

2449  
NGX_OK
;

2450 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/hls/ngx_rtmp_mpegts.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_m≥gts.h
"

12 
u_ch¨
 
	gngx_πmp_m≥gts_hódî
[] = {

75 
	#NGX_RTMP_HLS_DELAY
 63000

	)

78 
ngx_öt_t


79 
	$ngx_πmp_m≥gts_wrôe_fûe
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
, 
u_ch¨
 *
ö
,

80 
size_t
 
ö_size
)

82 
u_ch¨
 *
out
;

83 
size_t
 
out_size
, 
n
;

84 
ssize_t
 
rc
;

86 
u_ch¨
 
buf
[1024];

88 i‡(!
fûe
->
í¸y±
) {

89 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

90 "m≥gts: wrôê%uz byãs", 
ö_size
);

92 
rc
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
ö
, 
ö_size
);

93 i‡(
rc
 < 0) {

94  
NGX_ERROR
;

97  
NGX_OK
;

102 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

103 "m≥gts: wrôê%uzÉn¸y±ed byãs", 
ö_size
);

105 
out
 = 
buf
;

106 
out_size
 = (
buf
);

108 i‡(
fûe
->
size
 > 0 && fûe->sizê+ 
ö_size
 >= 16) {

109 
	`ngx_mem˝y
(
fûe
->
buf
 + fûe->
size
, 
ö
, 16 - file->size);

111 
ö
 +16 - 
fûe
->
size
;

112 
ö_size
 -16 - 
fûe
->
size
;

114 
	`AES_cbc_í¸y±
(
fûe
->
buf
, 
out
, 16, &fûe->
key
, fûe->
iv
, 
AES_ENCRYPT
);

116 
out
 += 16;

117 
out_size
 -= 16;

119 
fûe
->
size
 = 0;

123 
n
 = 
ö_size
 & ~0x0f;

125 i‡(
n
 > 0) {

126 i‡(
n
 > 
out_size
) {

127 
n
 = 
out_size
;

130 
	`AES_cbc_í¸y±
(
ö
, 
out
, 
n
, &
fûe
->
key
, fûe->
iv
, 
AES_ENCRYPT
);

132 
ö
 +
n
;

133 
ö_size
 -
n
;

135 } i‡(
out
 =
buf
) {

139 
rc
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf
, 
out
 - bu‡+ 
n
);

140 i‡(
rc
 < 0) {

141  
NGX_ERROR
;

144 
out
 = 
buf
;

145 
out_size
 = (
buf
);

148 i‡(
ö_size
) {

149 
	`ngx_mem˝y
(
fûe
->
buf
 + fûe->
size
, 
ö
, 
ö_size
);

150 
fûe
->
size
 +
ö_size
;

153  
NGX_OK
;

154 
	}
}

157 
ngx_öt_t


158 
	$ngx_πmp_m≥gts_wrôe_hódî
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
)

160  
	`ngx_πmp_m≥gts_wrôe_fûe
(
fûe
, 
ngx_πmp_m≥gts_hódî
,

161 (
ngx_πmp_m≥gts_hódî
));

162 
	}
}

165 
u_ch¨
 *

166 
	$ngx_πmp_m≥gts_wrôe_p¸
(
u_ch¨
 *
p
, 
uöt64_t
 
p¸
)

168 *
p
++ = (
u_ch¨
Ë(
p¸
 >> 25);

169 *
p
++ = (
u_ch¨
Ë(
p¸
 >> 17);

170 *
p
++ = (
u_ch¨
Ë(
p¸
 >> 9);

171 *
p
++ = (
u_ch¨
Ë(
p¸
 >> 1);

172 *
p
++ = (
u_ch¨
Ë(
p¸
 << 7 | 0x7e);

173 *
p
++ = 0;

175  
p
;

176 
	}
}

179 
u_ch¨
 *

180 
	$ngx_πmp_m≥gts_wrôe_±s
(
u_ch¨
 *
p
, 
ngx_uöt_t
 
fb
, 
uöt64_t
 
±s
)

182 
ngx_uöt_t
 
vÆ
;

184 
vÆ
 = 
fb
 << 4 | (((
±s
 >> 30) & 0x07) << 1) | 1;

185 *
p
++ = (
u_ch¨
Ë
vÆ
;

187 
vÆ
 = (((
±s
 >> 15) & 0x7fff) << 1) | 1;

188 *
p
++ = (
u_ch¨
Ë(
vÆ
 >> 8);

189 *
p
++ = (
u_ch¨
Ë
vÆ
;

191 
vÆ
 = (((
±s
) & 0x7fff) << 1) | 1;

192 *
p
++ = (
u_ch¨
Ë(
vÆ
 >> 8);

193 *
p
++ = (
u_ch¨
Ë
vÆ
;

195  
p
;

196 
	}
}

199 
ngx_öt_t


200 
	$ngx_πmp_m≥gts_wrôe_‰ame
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
,

201 
ngx_πmp_m≥gts_‰ame_t
 *
f
, 
ngx_buf_t
 *
b
)

203 
ngx_uöt_t
 
≥s_size
, 
hódî_size
, 
body_size
, 
ö_size
, 
°uff_size
, 
Êags
;

204 
u_ch¨
 
∑ckë
[188], *
p
, *
ba£
;

205 
ngx_öt_t
 
fú°
, 
rc
;

207 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

210 
f
->
pid
, f->
sid
, f->
±s
, f->
dts
,

211 (
ngx_uöt_t
Ë
f
->
key
, (
size_t
Ë(
b
->
œ°
 - b->
pos
));

213 
fú°
 = 1;

215 
b
->
pos
 < b->
œ°
) {

216 
p
 = 
∑ckë
;

218 
f
->
cc
++;

220 *
p
++ = 0x47;

221 *
p
++ = (
u_ch¨
Ë(
f
->
pid
 >> 8);

223 i‡(
fú°
) {

224 
p
[-1] |= 0x40;

227 *
p
++ = (
u_ch¨
Ë
f
->
pid
;

228 *
p
++ = 0x10 | (
f
->
cc
 & 0x0f);

230 i‡(
fú°
) {

232 i‡(
f
->
key
) {

233 
∑ckë
[3] |= 0x20;

235 *
p
++ = 7;

236 *
p
++ = 0x50;

238 
p
 = 
	`ngx_πmp_m≥gts_wrôe_p¸
’, 
f
->
dts
 - 
NGX_RTMP_HLS_DELAY
);

243 *
p
++ = 0x00;

244 *
p
++ = 0x00;

245 *
p
++ = 0x01;

246 *
p
++ = (
u_ch¨
Ë
f
->
sid
;

248 
hódî_size
 = 5;

249 
Êags
 = 0x80;

251 i‡(
f
->
dts
 !f->
±s
) {

252 
hódî_size
 += 5;

253 
Êags
 |= 0x40;

256 
≥s_size
 = (
b
->
œ°
 - b->
pos
Ë+ 
hódî_size
 + 3;

257 i‡(
≥s_size
 > 0xffff) {

258 
≥s_size
 = 0;

261 *
p
++ = (
u_ch¨
Ë(
≥s_size
 >> 8);

262 *
p
++ = (
u_ch¨
Ë
≥s_size
;

263 *
p
++ = 0x80;

264 *
p
++ = (
u_ch¨
Ë
Êags
;

265 *
p
++ = (
u_ch¨
Ë
hódî_size
;

267 
p
 = 
	`ngx_πmp_m≥gts_wrôe_±s
’, 
Êags
 >> 6, 
f
->
±s
 +

268 
NGX_RTMP_HLS_DELAY
);

270 i‡(
f
->
dts
 !f->
±s
) {

271 
p
 = 
	`ngx_πmp_m≥gts_wrôe_±s
’, 1, 
f
->
dts
 +

272 
NGX_RTMP_HLS_DELAY
);

275 
fú°
 = 0;

278 
body_size
 = (
ngx_uöt_t
Ë(
∑ckë
 + ’ackëË- 
p
);

279 
ö_size
 = (
ngx_uöt_t
Ë(
b
->
œ°
 - b->
pos
);

281 i‡(
body_size
 <
ö_size
) {

282 
	`ngx_mem˝y
(
p
, 
b
->
pos
, 
body_size
);

283 
b
->
pos
 +
body_size
;

286 
°uff_size
 = (
body_size
 - 
ö_size
);

288 i‡(
∑ckë
[3] & 0x20) {

292 
ba£
 = &
∑ckë
[5] +Öacket[4];

293 
p
 = 
	`ngx_movemem
(
ba£
 + 
°uff_size
, base,Ö - base);

294 
	`ngx_mem£t
(
ba£
, 0xff, 
°uff_size
);

295 
∑ckë
[4] +(
u_ch¨
Ë
°uff_size
;

301 
∑ckë
[3] |= 0x20;

302 
p
 = 
	`ngx_movemem
(&
∑ckë
[4] + 
°uff_size
, &packet[4],

303 
p
 - &
∑ckë
[4]);

305 
∑ckë
[4] = (
u_ch¨
Ë(
°uff_size
 - 1);

306 i‡(
°uff_size
 >= 2) {

307 
∑ckë
[5] = 0;

308 
	`ngx_mem£t
(&
∑ckë
[6], 0xff, 
°uff_size
 - 2);

312 
	`ngx_mem˝y
(
p
, 
b
->
pos
, 
ö_size
);

313 
b
->
pos
 = b->
œ°
;

316 
rc
 = 
	`ngx_πmp_m≥gts_wrôe_fûe
(
fûe
, 
∑ckë
, (packet));

317 i‡(
rc
 !
NGX_OK
) {

318  
rc
;

322  
NGX_OK
;

323 
	}
}

326 
ngx_öt_t


327 
	$ngx_πmp_m≥gts_öô_í¸y±i⁄
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
,

328 
u_ch¨
 *
key
, 
size_t
 
key_Àn
, 
uöt64_t
 
iv
)

330 i‡(
	`AES_£t_í¸y±_key
(
key
, 
key_Àn
 * 8, &
fûe
->key)) {

331  
NGX_ERROR
;

334 
	`ngx_memzîo
(
fûe
->
iv
, 8);

336 
fûe
->
iv
[8] = (
u_ch¨
) (iv >> 56);

337 
fûe
->
iv
[9] = (
u_ch¨
) (iv >> 48);

338 
fûe
->
iv
[10] = (
u_ch¨
) (iv >> 40);

339 
fûe
->
iv
[11] = (
u_ch¨
) (iv >> 32);

340 
fûe
->
iv
[12] = (
u_ch¨
) (iv >> 24);

341 
fûe
->
iv
[13] = (
u_ch¨
) (iv >> 16);

342 
fûe
->
iv
[14] = (
u_ch¨
) (iv >> 8);

343 
fûe
->
iv
[15] = (
u_ch¨
) (iv);

345 
fûe
->
í¸y±
 = 1;

347  
NGX_OK
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_πmp_m≥gts_›í_fûe
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
, 
u_ch¨
 *
∑th
,

353 
ngx_log_t
 *
log
)

355 
fûe
->
log
 =Üog;

357 
fûe
->
fd
 = 
	`ngx_›í_fûe
(
∑th
, 
NGX_FILE_WRONLY
, 
NGX_FILE_TRUNCATE
,

358 
NGX_FILE_DEFAULT_ACCESS
);

360 i‡(
fûe
->
fd
 =
NGX_INVALID_FILE
) {

361 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
log
, 
ngx_î∫o
,

363  
NGX_ERROR
;

366 
fûe
->
size
 = 0;

368 i‡(
	`ngx_πmp_m≥gts_wrôe_hódî
(
fûe
Ë!
NGX_OK
) {

369 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
log
, 
ngx_î∫o
,

371 
	`ngx_˛o£_fûe
(
fûe
->
fd
);

372  
NGX_ERROR
;

375  
NGX_OK
;

376 
	}
}

379 
ngx_öt_t


380 
	$ngx_πmp_m≥gts_˛o£_fûe
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
)

382 
u_ch¨
 
buf
[16];

383 
ssize_t
 
rc
;

385 i‡(
fûe
->
í¸y±
) {

386 
	`ngx_mem£t
(
fûe
->
buf
 + fûe->
size
, 16 - file->size, 16 - file->size);

388 
	`AES_cbc_í¸y±
(
fûe
->
buf
, buf, 16, &fûe->
key
, fûe->
iv
, 
AES_ENCRYPT
);

390 
rc
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf
, 16);

391 i‡(
rc
 < 0) {

392  
NGX_ERROR
;

396 
	`ngx_˛o£_fûe
(
fûe
->
fd
);

398  
NGX_OK
;

399 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/hls/ngx_rtmp_mpegts.h

7 #i‚de‡
_NGX_RTMP_MPEGTS_H_INCLUDED_


8 
	#_NGX_RTMP_MPEGTS_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<›ís¶/´s.h
>

17 
ngx_fd_t
 
	mfd
;

18 
ngx_log_t
 *
	mlog
;

19 
	mí¸y±
:1;

20 
	msize
:4;

21 
u_ch¨
 
	mbuf
[16];

22 
u_ch¨
 
	miv
[16];

23 
AES_KEY
 
	mkey
;

24 } 
	tngx_πmp_m≥gts_fûe_t
;

28 
uöt64_t
 
	m±s
;

29 
uöt64_t
 
	mdts
;

30 
ngx_uöt_t
 
	mpid
;

31 
ngx_uöt_t
 
	msid
;

32 
ngx_uöt_t
 
	mcc
;

33 
	mkey
:1;

34 } 
	tngx_πmp_m≥gts_‰ame_t
;

37 
ngx_öt_t
 
ngx_πmp_m≥gts_öô_í¸y±i⁄
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
,

38 
u_ch¨
 *
key
, 
size_t
 
key_Àn
, 
uöt64_t
 
iv
);

39 
ngx_öt_t
 
ngx_πmp_m≥gts_›í_fûe
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
, 
u_ch¨
 *
∑th
,

40 
ngx_log_t
 *
log
);

41 
ngx_öt_t
 
ngx_πmp_m≥gts_˛o£_fûe
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
);

42 
ngx_öt_t
 
ngx_πmp_m≥gts_wrôe_‰ame
(
ngx_πmp_m≥gts_fûe_t
 *
fûe
,

43 
ngx_πmp_m≥gts_‰ame_t
 *
f
, 
ngx_buf_t
 *
b
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_evít.h
>

10 
	~<ngöx.h
>

11 
	~"ngx_πmp.h
"

14 *
ngx_πmp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_πmp_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

16 
ngx_πmp_li°í_t
 *
li°í
);

17 *
ngx_πmp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

18 
ngx_öt_t
 
ngx_πmp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_πmp_p‹t_t
 *
mp‹t
,

19 
ngx_πmp_c⁄f_addr_t
 *
addr
);

20 #i‡(
NGX_HAVE_INET6
)

21 
ngx_öt_t
 
ngx_πmp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_πmp_p‹t_t
 *
mp‹t
,

22 
ngx_πmp_c⁄f_addr_t
 *
addr
);

24 
ngx_öt_t
 
ngx_πmp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

25 
ngx_öt_t
 
ngx_πmp_öô_evíts
(
ngx_c⁄f_t
 *
cf
,

26 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
);

27 
ngx_öt_t
 
ngx_πmp_öô_evít_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
);

29 * 
ngx_πmp_mîge_≠∂iˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

30 
ngx_¨øy_t
 *
≠∂iˇti⁄s
, **
≠p_c⁄f
, 
ngx_πmp_moduÀ_t
 *
moduÀ
,

31 
ngx_uöt_t
 
˘x_ödex
);

32 
ngx_öt_t
 
ngx_πmp_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
);

35 #i‡(
ngöx_vîsi⁄
 >= 1007005)

36 
ngx_thªad_vﬁ©ûe
 
ngx_queue_t
 
	gngx_πmp_öô_queue
;

38 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_πmp_öô_queue
;

42 
ngx_uöt_t
 
	gngx_πmp_max_moduÀ
;

45 
ngx_comm™d_t
 
	gngx_πmp_comm™ds
[] = {

47 { 
ngx_°rög
("rtmp"),

48 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

49 
ngx_πmp_block
,

52 
NULL
 },

54 
ngx_nuŒ_comm™d


58 
ngx_c‹e_moduÀ_t
 
	gngx_πmp_moduÀ_˘x
 = {

59 
ngx_°rög
("rtmp"),

60 
NULL
,

61 
NULL


65 
ngx_moduÀ_t
 
	gngx_πmp_moduÀ
 = {

66 
NGX_MODULE_V1
,

67 &
ngx_πmp_moduÀ_˘x
,

68 
ngx_πmp_comm™ds
,

69 
NGX_CORE_MODULE
,

70 
NULL
,

71 
NULL
,

72 
ngx_πmp_öô_¥o˚ss
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NGX_MODULE_V1_PADDING


82 
	$ngx_πmp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

84 *
rv
;

85 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

86 
ngx_c⁄f_t
 
pcf
;

87 
ngx_¨øy_t
 
p‹ts
;

88 
ngx_πmp_li°í_t
 *
li°í
;

89 
ngx_πmp_moduÀ_t
 *
moduÀ
;

90 
ngx_πmp_c⁄f_˘x_t
 *
˘x
;

91 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

92 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

94 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c⁄f_˘x_t
));

95 i‡(
˘x
 =
NULL
) {

96  
NGX_CONF_ERROR
;

99 *(
ngx_πmp_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

103 
ngx_πmp_max_moduÀ
 = 0;

104 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

105 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_RTMP_MODULE
) {

109 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_πmp_max_moduÀ
++;

115 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

116 (*Ë* 
ngx_πmp_max_moduÀ
);

117 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

118  
NGX_CONF_ERROR
;

127 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_πmp_max_moduÀ
);

128 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

129  
NGX_CONF_ERROR
;

138 
˘x
->
≠p_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_πmp_max_moduÀ
);

139 i‡(
˘x
->
≠p_c⁄f
 =
NULL
) {

140  
NGX_CONF_ERROR
;

149 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

150 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_RTMP_MODULE
) {

154 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

155 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

157 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

158 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

159 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

160  
NGX_CONF_ERROR
;

164 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

165 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

166 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

167  
NGX_CONF_ERROR
;

171 i‡(
moduÀ
->
¸óã_≠p_c⁄f
) {

172 
˘x
->
≠p_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_≠p_c⁄f
(
cf
);

173 i‡(
˘x
->
≠p_c⁄f
[
mi
] =
NULL
) {

174  
NGX_CONF_ERROR
;

179 
pcf
 = *
cf
;

180 
cf
->
˘x
 = ctx;

182 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

183 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_RTMP_MODULE
) {

187 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

189 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

190 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

191  
NGX_CONF_ERROR
;

198 
cf
->
moduÀ_ty≥
 = 
NGX_RTMP_MODULE
;

199 
cf
->
cmd_ty≥
 = 
NGX_RTMP_MAIN_CONF
;

200 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

202 i‡(
rv
 !
NGX_CONF_OK
) {

203 *
cf
 = 
pcf
;

204  
rv
;

210 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

211 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

213 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

214 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_RTMP_MODULE
) {

218 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

219 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

223 
cf
->
˘x
 = ctx;

225 i‡(
moduÀ
->
öô_maö_c⁄f
) {

226 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

227 i‡(
rv
 !
NGX_CONF_OK
) {

228 *
cf
 = 
pcf
;

229  
rv
;

233 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

237 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

239 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

240 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

241 
˘x
->
§v_c⁄f
[
mi
],

242 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

243 i‡(
rv
 !
NGX_CONF_OK
) {

244 *
cf
 = 
pcf
;

245  
rv
;

249 i‡(
moduÀ
->
mîge_≠p_c⁄f
) {

255 
rv
 = 
moduÀ
->
	`mîge_≠p_c⁄f
(
cf
,

256 
˘x
->
≠p_c⁄f
[
mi
],

257 
cscÂ
[
s
]->
˘x
->
≠p_c⁄f
[
mi
]);

258 i‡(
rv
 !
NGX_CONF_OK
) {

259 *
cf
 = 
pcf
;

260  
rv
;

265 
cscf
 = 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

267 
rv
 = 
	`ngx_πmp_mîge_≠∂iˇti⁄s
(
cf
, &
cscf
->
≠∂iˇti⁄s
,

268 
cscÂ
[
s
]->
˘x
->
≠p_c⁄f
,

269 
moduÀ
, 
mi
);

270 i‡(
rv
 !
NGX_CONF_OK
) {

271 *
cf
 = 
pcf
;

272  
rv
;

280 i‡(
	`ngx_πmp_öô_evíts
(
cf
, 
cmcf
Ë!
NGX_OK
) {

281  
NGX_CONF_ERROR
;

284 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

285 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_RTMP_MODULE
) {

289 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

291 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

292 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

293  
NGX_CONF_ERROR
;

298 *
cf
 = 
pcf
;

300 i‡(
	`ngx_πmp_öô_evít_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

301  
NGX_CONF_ERROR
;

304 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_πmp_c⁄f_p‹t_t
))

305 !
NGX_OK
)

307  
NGX_CONF_ERROR
;

310 
li°í
 = 
cmcf
->li°í.
ñts
;

312 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

313 i‡(
	`ngx_πmp_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

314  
NGX_CONF_ERROR
;

318  
	`ngx_πmp_›timize_£rvîs
(
cf
, &
p‹ts
);

319 
	}
}

323 
	$ngx_πmp_mîge_≠∂iˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
≠∂iˇti⁄s
,

324 **
≠p_c⁄f
, 
ngx_πmp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

326 *
rv
;

327 
ngx_πmp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

328 
ngx_πmp_c‹e_≠p_c⁄f_t
 **
ˇcÂ
;

329 
ngx_uöt_t
 
n
;

330 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
;

332 i‡(
≠∂iˇti⁄s
 =
NULL
) {

333  
NGX_CONF_OK
;

336 
˘x
 = (
ngx_πmp_c⁄f_˘x_t
 *Ë
cf
->ctx;

337 
ßved
 = *
˘x
;

339 
ˇcÂ
 = 
≠∂iˇti⁄s
->
ñts
;

340 
n
 = 0;Ç < 
≠∂iˇti⁄s
->
√…s
; ++n, ++
ˇcÂ
) {

342 
˘x
->
≠p_c⁄f
 = (*
ˇcÂ
)->app_conf;

344 
rv
 = 
moduÀ
->
	`mîge_≠p_c⁄f
(
cf
, 
≠p_c⁄f
[
˘x_ödex
],

345 (*
ˇcÂ
)->
≠p_c⁄f
[
˘x_ödex
]);

346 i‡(
rv
 !
NGX_CONF_OK
) {

347  
rv
;

350 
ˇcf
 = (*
ˇcÂ
)->
≠p_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

351 
rv
 = 
	`ngx_πmp_mîge_≠∂iˇti⁄s
(
cf
, &
ˇcf
->
≠∂iˇti⁄s
,

352 (*
ˇcÂ
)->
≠p_c⁄f
,

353 
moduÀ
, 
˘x_ödex
);

354 i‡(
rv
 !
NGX_CONF_OK
) {

355  
rv
;

359 *
˘x
 = 
ßved
;

361  
NGX_CONF_OK
;

362 
	}
}

365 
ngx_öt_t


366 
	$ngx_πmp_öô_evíts
(
ngx_c⁄f_t
 *
cf
, 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
)

368 
size_t
 
n
;

370 
n
 = 0;Ç < 
NGX_RTMP_MAX_EVENT
; ++n) {

371 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
evíts
[
n
], 
cf
->
poﬁ
, 1,

372 (
ngx_πmp_h™dÀr_±
)Ë!
NGX_OK
)

374  
NGX_ERROR
;

378 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
amf
, 
cf
->
poﬁ
, 1,

379 (
ngx_πmp_amf_h™dÀr_t
)Ë!
NGX_OK
)

381  
NGX_ERROR
;

384  
NGX_OK
;

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_πmp_öô_evít_h™dÀrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
)

391 
ngx_hash_öô_t
 
ˇŒs_hash
;

392 
ngx_πmp_h™dÀr_±
 *
eh
;

393 
ngx_πmp_amf_h™dÀr_t
 *
h
;

394 
ngx_hash_key_t
 *
ha
;

395 
size_t
 
n
, 
m
;

397 
size_t
 
pm_evíts
[] = {

398 
NGX_RTMP_MSG_CHUNK_SIZE
,

399 
NGX_RTMP_MSG_ABORT
,

400 
NGX_RTMP_MSG_ACK
,

401 
NGX_RTMP_MSG_ACK_SIZE
,

402 
NGX_RTMP_MSG_BANDWIDTH


405 
size_t
 
amf_evíts
[] = {

406 
NGX_RTMP_MSG_AMF_CMD
,

407 
NGX_RTMP_MSG_AMF_META
,

408 
NGX_RTMP_MSG_AMF_SHARED
,

409 
NGX_RTMP_MSG_AMF3_CMD
,

410 
NGX_RTMP_MSG_AMF3_META
,

411 
NGX_RTMP_MSG_AMF3_SHARED


415 
n
 = 0;Ç < (
pm_evíts
) / (pm_events[0]); ++n) {

416 
eh
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
pm_evíts
[
n
]]);

417 *
eh
 = 
ngx_πmp_¥Ÿocﬁ_mesßge_h™dÀr
;

421 
n
 = 0;Ç < (
amf_evíts
) / (amf_events[0]); ++n) {

422 
eh
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
amf_evíts
[
n
]]);

423 *
eh
 = 
ngx_πmp_amf_mesßge_h™dÀr
;

427 
eh
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_USER
]);

428 *
eh
 = 
ngx_πmp_u£r_mesßge_h™dÀr
;

431 
eh
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_AGGREGATE
]);

432 *
eh
 = 
ngx_πmp_aggªg©e_mesßge_h™dÀr
;

435 
	`ngx_¨øy_öô
(&
cmcf
->
amf_¨øys
, 
cf
->
poﬁ
, 1, (
ngx_hash_key_t
));

437 
h
 = 
cmcf
->
amf
.
ñts
;

438 
n
 = 0;Ç < 
cmcf
->
amf
.
√…s
; ++n, ++
h
) {

439 
ha
 = 
cmcf
->
amf_¨øys
.
ñts
;

440 
m
 = 0; m < 
cmcf
->
amf_¨øys
.
√…s
; ++m, ++
ha
) {

441 i‡(
h
->
«me
.
Àn
 =
ha
->
key
.len

442 && !
	`ngx_°∫cmp
(
h
->
«me
.
d©a
, 
ha
->
key
.d©a, ha->key.
Àn
))

447 i‡(
m
 =
cmcf
->
amf_¨øys
.
√…s
) {

448 
ha
 = 
	`ngx_¨øy_push
(&
cmcf
->
amf_¨øys
);

449 
ha
->
key
 = 
h
->
«me
;

450 
ha
->
key_hash
 = 
	`ngx_hash_key_lc
(ha->
key
.
d©a
, ha->key.
Àn
);

451 
ha
->
vÆue
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

452 (
ngx_πmp_h™dÀr_±
));

453 i‡(
ha
->
vÆue
 =
NULL
) {

454  
NGX_ERROR
;

458 
eh
 = 
	`ngx_¨øy_push
((
ngx_¨øy_t
*)
ha
->
vÆue
);

459 *
eh
 = 
h
->
h™dÀr
;

462 
ˇŒs_hash
.
hash
 = &
cmcf
->
amf_hash
;

463 
ˇŒs_hash
.
key
 = 
ngx_hash_key_lc
;

464 
ˇŒs_hash
.
max_size
 = 512;

465 
ˇŒs_hash
.
buckë_size
 = 
ngx_ˇchñöe_size
;

466 
ˇŒs_hash
.
«me
 = "amf_hash";

467 
ˇŒs_hash
.
poﬁ
 = 
cf
->pool;

468 
ˇŒs_hash
.
ãmp_poﬁ
 = 
NULL
;

470 i‡(
	`ngx_hash_öô
(&
ˇŒs_hash
, 
cmcf
->
amf_¨øys
.
ñts
, cmcf->amf_¨øys.
√…s
)

471 !
NGX_OK
)

473  
NGX_ERROR
;

476  
NGX_OK
;

477 
	}
}

480 
ngx_öt_t


481 
	$ngx_πmp_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

482 
ngx_πmp_li°í_t
 *
li°í
)

484 
ö_p‹t_t
 
p
;

485 
ngx_uöt_t
 
i
;

486 
sockaddr
 *
ß
;

487 
sockaddr_ö
 *
sö
;

488 
ngx_πmp_c⁄f_p‹t_t
 *
p‹t
;

489 
ngx_πmp_c⁄f_addr_t
 *
addr
;

490 #i‡(
NGX_HAVE_INET6
)

491 
sockaddr_ö6
 *
sö6
;

494 
ß
 = (
sockaddr
 *Ë&
li°í
->sockaddr;

496 
ß
->
ß_Ámûy
) {

498 #i‡(
NGX_HAVE_INET6
)

499 
AF_INET6
:

500 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

501 
p
 = 
sö6
->
sö6_p‹t
;

506 
sö
 = (
sockaddr_ö
 *Ë
ß
;

507 
p
 = 
sö
->
sö_p‹t
;

511 
p‹t
 = 
p‹ts
->
ñts
;

512 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

513 i‡(
p
 =
p‹t
[
i
].p‹à&& 
ß
->
ß_Ámûy
 =p‹t[i].
Ámûy
) {

517 
p‹t
 = &p‹t[
i
];

518 
found
;

524 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

525 i‡(
p‹t
 =
NULL
) {

526  
NGX_ERROR
;

529 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

530 
p‹t
->p‹à
p
;

532 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

533 (
ngx_πmp_c⁄f_addr_t
))

534 !
NGX_OK
)

536  
NGX_ERROR
;

539 
found
:

541 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

542 i‡(
addr
 =
NULL
) {

543  
NGX_ERROR
;

546 
addr
->
sockaddr
 = (sockadd∏*Ë&
li°í
->sockaddr;

547 
addr
->
sockÀn
 = 
li°í
->socklen;

548 
addr
->
˘x
 = 
li°í
->ctx;

549 
addr
->
böd
 = 
li°í
->bind;

550 
addr
->
wûdˇrd
 = 
li°í
->wildcard;

551 
addr
->
so_kì∑live
 = 
li°í
->so_keepalive;

552 
addr
->
¥oxy_¥Ÿocﬁ
 = 
li°í
->proxy_protocol;

553 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

554 
addr
->
t˝_kìpidÀ
 = 
li°í
->tcp_keepidle;

555 
addr
->
t˝_kìpötvl
 = 
li°í
->tcp_keepintvl;

556 
addr
->
t˝_kìp˙t
 = 
li°í
->tcp_keepcnt;

558 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

559 
addr
->
ùv6⁄ly
 = 
li°í
->ipv6only;

562  
NGX_OK
;

563 
	}
}

567 
	$ngx_πmp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

569 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

570 
ngx_li°íög_t
 *
ls
;

571 
ngx_πmp_p‹t_t
 *
mp‹t
;

572 
ngx_πmp_c⁄f_p‹t_t
 *
p‹t
;

573 
ngx_πmp_c⁄f_addr_t
 *
addr
;

575 
p‹t
 = 
p‹ts
->
ñts
;

576 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

578 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

579 (
ngx_πmp_c⁄f_addr_t
), 
ngx_πmp_cmp_c⁄f_addrs
);

581 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

582 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

589 i‡(
addr
[
œ°
 - 1].
wûdˇrd
) {

590 
addr
[
œ°
 - 1].
böd
 = 1;

591 
böd_wûdˇrd
 = 1;

594 
böd_wûdˇrd
 = 0;

597 
i
 = 0;

599 
i
 < 
œ°
) {

601 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
böd
) {

602 
i
++;

606 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, 
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
);

607 i‡(
ls
 =
NULL
) {

608  
NGX_CONF_ERROR
;

611 
ls
->
addr_¡›
 = 1;

612 
ls
->
h™dÀr
 = 
ngx_πmp_öô_c⁄√˘i⁄
;

613 
ls
->
poﬁ_size
 = 4096;

616 
ls
->
logp
 = &
cf
->
cy˛e
->
√w_log
;

617 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

618 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

620 
ls
->
kì∑live
 = 
addr
[
i
].
so_kì∑live
;

621 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

622 
ls
->
kìpidÀ
 = 
addr
[
i
].
t˝_kìpidÀ
;

623 
ls
->
kìpötvl
 = 
addr
[
i
].
t˝_kìpötvl
;

624 
ls
->
kìp˙t
 = 
addr
[
i
].
t˝_kìp˙t
;

627 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

628 
ls
->
ùv6⁄ly
 = 
addr
[
i
].ipv6only;

631 
mp‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_πmp_p‹t_t
));

632 i‡(
mp‹t
 =
NULL
) {

633  
NGX_CONF_ERROR
;

636 
ls
->
£rvîs
 = 
mp‹t
;

638 i‡(
i
 =
œ°
 - 1) {

639 
mp‹t
->
«ddrs
 = 
œ°
;

642 
mp‹t
->
«ddrs
 = 1;

643 
i
 = 0;

646 
ls
->
sockaddr
->
ß_Ámûy
) {

647 #i‡(
NGX_HAVE_INET6
)

648 
AF_INET6
:

649 i‡(
	`ngx_πmp_add_addrs6
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

650  
NGX_CONF_ERROR
;

655 i‡(
	`ngx_πmp_add_addrs
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

656  
NGX_CONF_ERROR
;

661 
addr
++;

662 
œ°
--;

666  
NGX_CONF_OK
;

667 
	}
}

670 
ngx_öt_t


671 
	$ngx_πmp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_πmp_p‹t_t
 *
mp‹t
,

672 
ngx_πmp_c⁄f_addr_t
 *
addr
)

674 
u_ch¨
 *
p
;

675 
size_t
 
Àn
;

676 
ngx_uöt_t
 
i
;

677 
ngx_πmp_ö_addr_t
 *
addrs
;

678 
sockaddr_ö
 *
sö
;

679 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

681 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

682 
mp‹t
->
«ddrs
 * (
ngx_πmp_ö_addr_t
));

683 i‡(
mp‹t
->
addrs
 =
NULL
) {

684  
NGX_ERROR
;

687 
addrs
 = 
mp‹t
->addrs;

689 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

691 
sö
 = (
sockaddr_ö
 *Ë
addr
[
i
].
sockaddr
;

692 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

694 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

696 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
,

697 #i‡(
ngöx_vîsi⁄
 >= 1005003)

698 
addr
[
i
].
sockÀn
,

700 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

702 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

703 i‡(
p
 =
NULL
) {

704  
NGX_ERROR
;

707 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

709 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

710 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

711 
addrs
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
->proxy_protocol;

714  
NGX_OK
;

715 
	}
}

718 #i‡(
NGX_HAVE_INET6
)

720 
ngx_öt_t


721 
	$ngx_πmp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_πmp_p‹t_t
 *
mp‹t
,

722 
ngx_πmp_c⁄f_addr_t
 *
addr
)

724 
u_ch¨
 *
p
;

725 
size_t
 
Àn
;

726 
ngx_uöt_t
 
i
;

727 
ngx_πmp_ö6_addr_t
 *
addrs6
;

728 
sockaddr_ö6
 *
sö6
;

729 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

731 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

732 
mp‹t
->
«ddrs
 * (
ngx_πmp_ö6_addr_t
));

733 i‡(
mp‹t
->
addrs
 =
NULL
) {

734  
NGX_ERROR
;

737 
addrs6
 = 
mp‹t
->
addrs
;

739 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

741 
sö6
 = (
sockaddr_ö6
 *Ë
addr
[
i
].
sockaddr
;

742 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

744 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

746 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
,

747 #i‡(
ngöx_vîsi⁄
 >= 1005003)

748 
addr
[
i
].
sockÀn
,

750 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

752 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

753 i‡(
p
 =
NULL
) {

754  
NGX_ERROR
;

757 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

759 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

760 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

761 
addrs6
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
->proxy_protocol;

764  
NGX_OK
;

765 
	}
}

770 
ngx_öt_t


771 
	$ngx_πmp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

773 
ngx_πmp_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

775 
fú°
 = (
ngx_πmp_c⁄f_addr_t
 *Ë
⁄e
;

776 
£c⁄d
 = (
ngx_πmp_c⁄f_addr_t
 *Ë
two
;

778 i‡(
fú°
->
wûdˇrd
) {

783 i‡(
fú°
->
böd
 && !
£c⁄d
->bind) {

788 i‡(!
fú°
->
böd
 && 
£c⁄d
->bind) {

796 
	}
}

799 
ngx_öt_t


800 
	$ngx_πmp_fúe_evít
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
evt
,

801 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
)

803 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

804 
ngx_¨øy_t
 *
ch
;

805 
ngx_πmp_h™dÀr_±
 *
hh
;

806 
size_t
 
n
;

808 
cmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

810 
ch
 = &
cmcf
->
evíts
[
evt
];

811 
hh
 = 
ch
->
ñts
;

812 
n
 = 0;Ç < 
ch
->
√…s
; ++n, ++
hh
) {

813 i‡(*
hh
 && (*hh)(
s
, 
h
, 
ö
Ë!
NGX_OK
) {

814  
NGX_ERROR
;

817  
NGX_OK
;

818 
	}
}

822 
	$ngx_πmp_rmem˝y
(*
d°
, c⁄° * 
§c
, 
size_t
 
n
)

824 
u_ch¨
 *
d
, *
s
;

826 
d
 = 
d°
;

827 
s
 = (
u_ch¨
*)
§c
 + 
n
 - 1;

829 
s
 >(
u_ch¨
*)
§c
) {

830 *
d
++ = *
s
--;

833  
d°
;

834 
	}
}

837 
ngx_öt_t


838 
	$ngx_πmp_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
)

840 #i‡(
ngöx_vîsi⁄
 >= 1007005)

841 
	`ngx_queue_öô
(&
ngx_πmp_öô_queue
);

843  
NGX_OK
;

844 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp.h

7 #i‚de‡
_NGX_RTMP_H_INCLUDED_


8 
	#_NGX_RTMP_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_evít.h
>

14 
	~<ngx_evít_c⁄√˘.h
>

15 
	~<ngöx.h
>

17 
	~"ngx_πmp_amf.h
"

18 
	~"ngx_πmp_b™dwidth.h
"

21 #i‡(
NGX_WIN32
)

22 
__öt8
 
	töt8_t
;

23 
	t__öt8
 
	tuöt8_t
;

28 **
	mmaö_c⁄f
;

29 **
	m§v_c⁄f
;

30 **
	m≠p_c⁄f
;

31 } 
	tngx_πmp_c⁄f_˘x_t
;

35 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

36 
sockÀn_t
 
	msockÀn
;

39 
ngx_πmp_c⁄f_˘x_t
 *
	m˘x
;

41 
	mböd
:1;

42 
	mwûdˇrd
:1;

43 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

44 
	mùv6⁄ly
:2;

46 
	mso_kì∑live
:2;

47 
	m¥oxy_¥Ÿocﬁ
:1;

48 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

49 
	mt˝_kìpidÀ
;

50 
	mt˝_kìpötvl
;

51 
	mt˝_kìp˙t
;

53 } 
	tngx_πmp_li°í_t
;

57 
ngx_πmp_c⁄f_˘x_t
 *
	m˘x
;

58 
ngx_°r_t
 
	maddr_ãxt
;

59 
	m¥oxy_¥Ÿocﬁ
:1;

60 } 
	tngx_πmp_addr_c⁄f_t
;

63 
ö_addr_t
 
	maddr
;

64 
ngx_πmp_addr_c⁄f_t
 
	mc⁄f
;

65 } 
	tngx_πmp_ö_addr_t
;

68 #i‡(
NGX_HAVE_INET6
)

71 
ö6_addr
 
	maddr6
;

72 
ngx_πmp_addr_c⁄f_t
 
	mc⁄f
;

73 } 
	tngx_πmp_ö6_addr_t
;

79 *
	maddrs
;

80 
ngx_uöt_t
 
	m«ddrs
;

81 } 
	tngx_πmp_p‹t_t
;

85 
	mÁmûy
;

86 
ö_p‹t_t
 
	mp‹t
;

87 
ngx_¨øy_t
 
	maddrs
;

88 } 
	tngx_πmp_c⁄f_p‹t_t
;

92 
sockaddr
 *
	msockaddr
;

93 
sockÀn_t
 
	msockÀn
;

95 
ngx_πmp_c⁄f_˘x_t
 *
	m˘x
;

97 
	mböd
:1;

98 
	mwûdˇrd
:1;

99 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

100 
	mùv6⁄ly
:2;

102 
	mso_kì∑live
:2;

103 
	m¥oxy_¥Ÿocﬁ
:1;

104 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

105 
	mt˝_kìpidÀ
;

106 
	mt˝_kìpötvl
;

107 
	mt˝_kìp˙t
;

109 } 
	tngx_πmp_c⁄f_addr_t
;

112 
	#NGX_RTMP_VERSION
 3

	)

114 
	#NGX_LOG_DEBUG_RTMP
 
NGX_LOG_DEBUG_CORE


	)

116 
	#NGX_RTMP_DEFAULT_CHUNK_SIZE
 128

	)

120 
	#NGX_RTMP_MSG_CHUNK_SIZE
 1

	)

121 
	#NGX_RTMP_MSG_ABORT
 2

	)

122 
	#NGX_RTMP_MSG_ACK
 3

	)

123 
	#NGX_RTMP_MSG_USER
 4

	)

124 
	#NGX_RTMP_MSG_ACK_SIZE
 5

	)

125 
	#NGX_RTMP_MSG_BANDWIDTH
 6

	)

126 
	#NGX_RTMP_MSG_EDGE
 7

	)

127 
	#NGX_RTMP_MSG_AUDIO
 8

	)

128 
	#NGX_RTMP_MSG_VIDEO
 9

	)

129 
	#NGX_RTMP_MSG_AMF3_META
 15

	)

130 
	#NGX_RTMP_MSG_AMF3_SHARED
 16

	)

131 
	#NGX_RTMP_MSG_AMF3_CMD
 17

	)

132 
	#NGX_RTMP_MSG_AMF_META
 18

	)

133 
	#NGX_RTMP_MSG_AMF_SHARED
 19

	)

134 
	#NGX_RTMP_MSG_AMF_CMD
 20

	)

135 
	#NGX_RTMP_MSG_AGGREGATE
 22

	)

136 
	#NGX_RTMP_MSG_MAX
 22

	)

138 
	#NGX_RTMP_CONNECT
 
NGX_RTMP_MSG_MAX
 + 1

	)

139 
	#NGX_RTMP_DISCONNECT
 
NGX_RTMP_MSG_MAX
 + 2

	)

140 
	#NGX_RTMP_HANDSHAKE_DONE
 
NGX_RTMP_MSG_MAX
 + 3

	)

141 
	#NGX_RTMP_MAX_EVENT
 
NGX_RTMP_MSG_MAX
 + 4

	)

145 
	#NGX_RTMP_USER_STREAM_BEGIN
 0

	)

146 
	#NGX_RTMP_USER_STREAM_EOF
 1

	)

147 
	#NGX_RTMP_USER_STREAM_DRY
 2

	)

148 
	#NGX_RTMP_USER_SET_BUFLEN
 3

	)

149 
	#NGX_RTMP_USER_RECORDED
 4

	)

150 
	#NGX_RTMP_USER_PING_REQUEST
 6

	)

151 
	#NGX_RTMP_USER_PING_RESPONSE
 7

	)

152 
	#NGX_RTMP_USER_UNKNOWN
 8

	)

153 
	#NGX_RTMP_USER_BUFFER_END
 31

	)

160 
	#NGX_RTMP_MAX_CHUNK_HEADER
 18

	)

164 
uöt32_t
 
	mcsid
;

165 
uöt32_t
 
	mtime°amp
;

166 
uöt32_t
 
	mmÀn
;

167 
uöt8_t
 
	mty≥
;

168 
uöt32_t
 
	mmsid
;

169 } 
	tngx_πmp_hódî_t
;

173 
ngx_πmp_hódî_t
 
	mhdr
;

174 
uöt32_t
 
	mdtime
;

175 
uöt32_t
 
	mÀn
;

176 
uöt8_t
 
	mext
;

177 
ngx_chaö_t
 *
	mö
;

178 } 
	tngx_πmp_°ªam_t
;

183 #i‡(
NGX_WIN32
)

184 #¥agm®
w¨nög
(
push
)

185 #¥agm®
w¨nög
(
dißbÀ
:4200)

190 
uöt32_t
 
	msig«tuª
;

192 
ngx_evít_t
 
	m˛o£
;

194 **
	m˘x
;

195 **
	mmaö_c⁄f
;

196 **
	m§v_c⁄f
;

197 **
	m≠p_c⁄f
;

199 
ngx_°r_t
 *
	maddr_ãxt
;

200 
	mc⁄√˘ed
;

202 #i‡(
ngöx_vîsi⁄
 >= 1007005)

203 
ngx_queue_t
 
	mpo°ed_dry_evíts
;

205 
ngx_evít_t
 *
	mpo°ed_dry_evíts
;

209 
uöt32_t
 
	mbuÊí
;

210 
uöt32_t
 
	mack_size
;

213 
ngx_°r_t
 
	m≠p
;

214 
ngx_°r_t
 
	m¨gs
;

215 
ngx_°r_t
 
	mÊashvî
;

216 
ngx_°r_t
 
	mswf_uæ
;

217 
ngx_°r_t
 
	mtc_uæ
;

218 
uöt32_t
 
	macodecs
;

219 
uöt32_t
 
	mvcodecs
;

220 
ngx_°r_t
 
	m∑ge_uæ
;

223 
ngx_buf_t
 *
	mhs_buf
;

224 
u_ch¨
 *
	mhs_dige°
;

225 
	mhs_ﬁd
:1;

226 
ngx_uöt_t
 
	mhs_°age
;

229 
ngx_m£c_t
 
	mïoch
;

230 
ngx_m£c_t
 
	m≥î_ïoch
;

231 
ngx_m£c_t
 
	mba£_time
;

232 
uöt32_t
 
	mcuºít_time
;

235 
ngx_evít_t
 
	mpög_evt
;

236 
	mpög_a˘ive
:1;

237 
	mpög_ª£t
:1;

240 
	mauto_pushed
:1;

241 
	mªœy
:1;

242 
	m°©ic_ªœy
:1;

243 
	mcc_m⁄ô‹_push
:1;

248 
ngx_πmp_°ªam_t
 *
	mö_°ªams
;

249 
uöt32_t
 
	mö_csid
;

250 
ngx_uöt_t
 
	mö_chunk_size
;

251 
ngx_poﬁ_t
 *
	mö_poﬁ
;

252 
uöt32_t
 
	mö_byãs
;

253 
uöt32_t
 
	mö_œ°_ack
;

255 
ngx_poﬁ_t
 *
	mö_ﬁd_poﬁ
;

256 
ngx_öt_t
 
	mö_chunk_size_ch™gög
;

258 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

261 
ngx_m£c_t
 
	mtimeout
;

262 
uöt32_t
 
	mout_byãs
;

263 
size_t
 
	mout_pos
, 
	mout_œ°
;

264 
ngx_chaö_t
 *
	mout_chaö
;

265 
u_ch¨
 *
	mout_bpos
;

266 
	mout_buf„r
:1;

267 
size_t
 
	mout_queue
;

268 
size_t
 
	mout_c‹k
;

269 
ngx_chaö_t
 *
	mout
[0];

270 } 
	tngx_πmp_£ssi⁄_t
;

273 #i‡(
NGX_WIN32
)

274 #¥agm®
w¨nög
(
p›
)

283 
	$ngx_öt_t
 (*
	tngx_πmp_h™dÀr_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

284 
	tngx_πmp_hódî_t
 *
	th
, 
	tngx_chaö_t
 *
	tö
);

288 
ngx_°r_t
 
«me
;

289 
ngx_πmp_h™dÀr_±
 
h™dÀr
;

290 } 
	tngx_πmp_amf_h™dÀr_t
;

294 
ngx_¨øy_t
 
£rvîs
;

295 
ngx_¨øy_t
 
li°í
;

297 
ngx_¨øy_t
 
evíts
[
NGX_RTMP_MAX_EVENT
];

299 
ngx_hash_t
 
amf_hash
;

300 
ngx_¨øy_t
 
amf_¨øys
;

301 
ngx_¨øy_t
 
amf
;

302 } 
	tngx_πmp_c‹e_maö_c⁄f_t
;

306 
ngx_πmp_c‹e_maö_c⁄f_t
 *
ngx_πmp_c‹e_maö_c⁄f
;

309 
	sngx_πmp_c‹e_§v_c⁄f_s
 {

310 
ngx_¨øy_t
 
≠∂iˇti⁄s
;

312 
ngx_m£c_t
 
timeout
;

313 
ngx_m£c_t
 
pög
;

314 
ngx_m£c_t
 
pög_timeout
;

315 
ngx_Êag_t
 
so_kì∑live
;

316 
ngx_öt_t
 
max_°ªams
;

318 
ngx_uöt_t
 
ack_wödow
;

320 
ngx_öt_t
 
chunk_size
;

321 
ngx_poﬁ_t
 *
poﬁ
;

322 
ngx_chaö_t
 *
‰ì
;

323 
ngx_chaö_t
 *
‰ì_hs
;

324 
size_t
 
max_mesßge
;

325 
ngx_Êag_t
 
∂ay_time_fix
;

326 
ngx_Êag_t
 
publish_time_fix
;

327 
ngx_Êag_t
 
busy
;

328 
size_t
 
out_queue
;

329 
size_t
 
out_c‹k
;

330 
ngx_m£c_t
 
buÊí
;

332 
ngx_πmp_c⁄f_˘x_t
 *
˘x
;

333 } 
	tngx_πmp_c‹e_§v_c⁄f_t
;

337 
ngx_¨øy_t
 
≠∂iˇti⁄s
;

338 
ngx_°r_t
 
«me
;

339 **
≠p_c⁄f
;

340 } 
	tngx_πmp_c‹e_≠p_c⁄f_t
;

344 
ngx_°r_t
 *
˛õ¡
;

345 
ngx_πmp_£ssi⁄_t
 *
£ssi⁄
;

346 } 
	tngx_πmp_îr‹_log_˘x_t
;

350 
	`ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
cf
);

351 
	`ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
cf
);

353 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

354 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

356 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

357 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

358 *
c⁄f
);

360 *(*
¸óã_≠p_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

361 *(*
mîge_≠p_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

362 *
c⁄f
);

363 } 
	tngx_πmp_moduÀ_t
;

365 
	#NGX_RTMP_MODULE
 0x504D5452

	)

367 
	#NGX_RTMP_MAIN_CONF
 0x02000000

	)

368 
	#NGX_RTMP_SRV_CONF
 0x04000000

	)

369 
	#NGX_RTMP_APP_CONF
 0x08000000

	)

370 
	#NGX_RTMP_REC_CONF
 0x10000000

	)

373 
	#NGX_RTMP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_πmp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

374 
	#NGX_RTMP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_πmp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

375 
	#NGX_RTMP_APP_CONF_OFFSET
 
	`off£tof
(
ngx_πmp_c⁄f_˘x_t
, 
≠p_c⁄f
)

	)

378 
	#ngx_πmp_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

379 
	#ngx_πmp_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

380 
	#ngx_πmp_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

383 
	#ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

384 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

385 
	#ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

386 
	#ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
moduÀ
Ë((s)->
≠p_c⁄f
 ? \

387 (
s
)->
≠p_c⁄f
[
moduÀ
.
˘x_ödex
] : 
NULL
)

	)

389 
	#ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

390 ((
ngx_πmp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

391 
	#ngx_πmp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

392 ((
ngx_πmp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

393 
	#ngx_πmp_c⁄f_gë_moduÀ_≠p_c⁄f
(
cf
, 
moduÀ
) \

394 ((
ngx_πmp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
≠p_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

397 #ifde‡
NGX_DEBUG


398 * 
	`ngx_πmp_mesßge_ty≥
(
uöt8_t
 
ty≥
);

399 * 
	`ngx_πmp_u£r_mesßge_ty≥
(
uöt16_t
 
evt
);

402 
	`ngx_πmp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

403 
ngx_πmp_£ssi⁄_t
 * 
	`ngx_πmp_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

404 
ngx_πmp_addr_c⁄f_t
 *
addr_c⁄f
);

405 
	`ngx_πmp_föÆize_£ssi⁄
(
ngx_πmp_£ssi⁄_t
 *
s
);

406 
	`ngx_πmp_h™dshake
(
ngx_πmp_£ssi⁄_t
 *
s
);

407 
	`ngx_πmp_˛õ¡_h™dshake
(
ngx_πmp_£ssi⁄_t
 *
s
, 
async
);

408 
	`ngx_πmp_‰ì_h™dshake_buf„rs
(
ngx_πmp_£ssi⁄_t
 *
s
);

409 
	`ngx_πmp_cy˛e
(
ngx_πmp_£ssi⁄_t
 *
s
);

410 
	`ngx_πmp_ª£t_pög
(
ngx_πmp_£ssi⁄_t
 *
s
);

411 
ngx_öt_t
 
	`ngx_πmp_fúe_evít
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
evt
,

412 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

415 
ngx_öt_t
 
	`ngx_πmp_£t_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
size
);

419 * 
	`ngx_πmp_rmem˝y
(*
d°
, c⁄° * 
§c
, 
size_t
 
n
);

421 
	#ngx_πmp_r˝ymem
(
d°
, 
§c
, 
n
) \

422 (((
u_ch¨
*)
	`ngx_πmp_rmem˝y
(
d°
, 
§c
, 
n
)Ë+ (n))

	)

425 
ngx_ölöe
 
uöt16_t


426 
	$ngx_πmp_r16
(
uöt16_t
 
n
)

428  (
n
 << 8) | (n >> 8);

429 
	}
}

432 
ngx_ölöe
 
uöt32_t


433 
	$ngx_πmp_r32
(
uöt32_t
 
n
)

435  (
n
 << 24) | ((n << 8) & 0xff0000) | ((n >> 8) & 0xff00) | (n >> 24);

436 
	}
}

439 
ngx_ölöe
 
uöt64_t


440 
	$ngx_πmp_r64
(
uöt64_t
 
n
)

442  (
uöt64_t
Ë
	`ngx_πmp_r32
((
uöt32_t
Ë
n
) << 32 |

443 
	`ngx_πmp_r32
((
uöt32_t
Ë(
n
 >> 32));

444 
	}
}

448 
ngx_öt_t
 
ngx_πmp_ª˚ive_mesßge
(
ngx_πmp_£ssi⁄_t
 *
s
,

449 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

450 
ngx_öt_t
 
ngx_πmp_¥Ÿocﬁ_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
,

451 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

452 
ngx_öt_t
 
ngx_πmp_u£r_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
,

453 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

454 
ngx_öt_t
 
ngx_πmp_aggªg©e_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
,

455 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

456 
ngx_öt_t
 
ngx_πmp_amf_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
,

457 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

458 
ngx_öt_t
 
ngx_πmp_amf_sh¨ed_obje˘_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
,

459 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

466 
	#NGX_RTMP_REFCOUNT_TYPE
 
uöt32_t


	)

467 
	#NGX_RTMP_REFCOUNT_BYTES
 (
NGX_RTMP_REFCOUNT_TYPE
)

	)

469 
	#ngx_πmp_ªf
(
b
) \

470 *((
NGX_RTMP_REFCOUNT_TYPE
*)(
b
Ë- 1)

	)

472 
	#ngx_πmp_ªf_£t
(
b
, 
v
) \

473 
	`ngx_πmp_ªf
(
b
Ë
v


	)

475 
	#ngx_πmp_ªf_gë
(
b
) \

476 ++
	`ngx_πmp_ªf
(
b
)

	)

478 
	#ngx_πmp_ªf_put
(
b
) \

479 --
	`ngx_πmp_ªf
(
b
)

	)

481 
ngx_chaö_t
 * 
ngx_πmp_Æloc_sh¨ed_buf
(
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
);

482 
ngx_πmp_‰ì_sh¨ed_chaö
(
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
,

483 
ngx_chaö_t
 *
ö
);

484 
ngx_chaö_t
 * 
ngx_πmp_≠≥nd_sh¨ed_bufs
(
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
,

485 
ngx_chaö_t
 *
hód
,Çgx_chaö_à*
ö
);

487 
	#ngx_πmp_acquúe_sh¨ed_chaö
(
ö
) \

488 
	`ngx_πmp_ªf_gë
(
ö
); \

489 

	)

492 
ngx_πmp_¥ï¨e_mesßge
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

493 
ngx_πmp_hódî_t
 *
lh
, 
ngx_chaö_t
 *
out
);

494 
ngx_öt_t
 
ngx_πmp_£nd_mesßge
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
out
,

495 
ngx_uöt_t
 
¥i‹ôy
);

502 
	#NGX_RTMP_LIMIT_SOFT
 0

	)

503 
	#NGX_RTMP_LIMIT_HARD
 1

	)

504 
	#NGX_RTMP_LIMIT_DYNAMIC
 2

	)

507 
ngx_chaö_t
 * 
ngx_πmp_¸óã_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
,

508 
uöt32_t
 
chunk_size
);

509 
ngx_chaö_t
 * 
ngx_πmp_¸óã_ab‹t
(
ngx_πmp_£ssi⁄_t
 *
s
,

510 
uöt32_t
 
csid
);

511 
ngx_chaö_t
 * 
ngx_πmp_¸óã_ack
(
ngx_πmp_£ssi⁄_t
 *
s
,

512 
uöt32_t
 
£q
);

513 
ngx_chaö_t
 * 
ngx_πmp_¸óã_ack_size
(
ngx_πmp_£ssi⁄_t
 *
s
,

514 
uöt32_t
 
ack_size
);

515 
ngx_chaö_t
 * 
ngx_πmp_¸óã_b™dwidth
(
ngx_πmp_£ssi⁄_t
 *
s
,

516 
uöt32_t
 
ack_size
, 
uöt8_t
 
limô_ty≥
);

518 
ngx_öt_t
 
ngx_πmp_£nd_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
,

519 
uöt32_t
 
chunk_size
);

520 
ngx_öt_t
 
ngx_πmp_£nd_ab‹t
(
ngx_πmp_£ssi⁄_t
 *
s
,

521 
uöt32_t
 
csid
);

522 
ngx_öt_t
 
ngx_πmp_£nd_ack
(
ngx_πmp_£ssi⁄_t
 *
s
,

523 
uöt32_t
 
£q
);

524 
ngx_öt_t
 
ngx_πmp_£nd_ack_size
(
ngx_πmp_£ssi⁄_t
 *
s
,

525 
uöt32_t
 
ack_size
);

526 
ngx_öt_t
 
ngx_πmp_£nd_b™dwidth
(
ngx_πmp_£ssi⁄_t
 *
s
,

527 
uöt32_t
 
ack_size
, 
uöt8_t
 
limô_ty≥
);

530 
ngx_chaö_t
 * 
ngx_πmp_¸óã_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
,

531 
uöt32_t
 
msid
);

532 
ngx_chaö_t
 * 
ngx_πmp_¸óã_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
,

533 
uöt32_t
 
msid
);

534 
ngx_chaö_t
 * 
ngx_πmp_¸óã_°ªam_dry
(
ngx_πmp_£ssi⁄_t
 *
s
,

535 
uöt32_t
 
msid
);

536 
ngx_chaö_t
 * 
ngx_πmp_¸óã_£t_buÊí
(
ngx_πmp_£ssi⁄_t
 *
s
,

537 
uöt32_t
 
msid
, uöt32_à
buÊí_m£c
);

538 
ngx_chaö_t
 * 
ngx_πmp_¸óã_ªc‹ded
(
ngx_πmp_£ssi⁄_t
 *
s
,

539 
uöt32_t
 
msid
);

540 
ngx_chaö_t
 * 
ngx_πmp_¸óã_pög_ªque°
(
ngx_πmp_£ssi⁄_t
 *
s
,

541 
uöt32_t
 
time°amp
);

542 
ngx_chaö_t
 * 
ngx_πmp_¸óã_pög_ª•⁄£
(
ngx_πmp_£ssi⁄_t
 *
s
,

543 
uöt32_t
 
time°amp
);

545 
ngx_öt_t
 
ngx_πmp_£nd_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
,

546 
uöt32_t
 
msid
);

547 
ngx_öt_t
 
ngx_πmp_£nd_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
,

548 
uöt32_t
 
msid
);

549 
ngx_öt_t
 
ngx_πmp_£nd_°ªam_dry
(
ngx_πmp_£ssi⁄_t
 *
s
,

550 
uöt32_t
 
msid
);

551 
ngx_öt_t
 
ngx_πmp_£nd_£t_buÊí
(
ngx_πmp_£ssi⁄_t
 *
s
,

552 
uöt32_t
 
msid
, uöt32_à
buÊí_m£c
);

553 
ngx_öt_t
 
ngx_πmp_£nd_ªc‹ded
(
ngx_πmp_£ssi⁄_t
 *
s
,

554 
uöt32_t
 
msid
);

555 
ngx_öt_t
 
ngx_πmp_£nd_pög_ªque°
(
ngx_πmp_£ssi⁄_t
 *
s
,

556 
uöt32_t
 
time°amp
);

557 
ngx_öt_t
 
ngx_πmp_£nd_pög_ª•⁄£
(
ngx_πmp_£ssi⁄_t
 *
s
,

558 
uöt32_t
 
time°amp
);

561 
ngx_öt_t
 
ngx_πmp_≠≥nd_amf
(
ngx_πmp_£ssi⁄_t
 *
s
,

562 
ngx_chaö_t
 **
fú°
,Çgx_chaö_à**
œ°
,

563 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
);

564 
ngx_öt_t
 
ngx_πmp_ª˚ive_amf
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
,

565 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
);

567 
ngx_chaö_t
 * 
ngx_πmp_¸óã_amf
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

568 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
);

569 
ngx_öt_t
 
ngx_πmp_£nd_amf
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

570 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
);

573 
ngx_chaö_t
 * 
ngx_πmp_¸óã_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
,

574 * 
Àvñ
, *
desc
);

575 
ngx_chaö_t
 * 
ngx_πmp_¸óã_∂ay_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
,

576 * 
Àvñ
, 
ngx_uöt_t
 
duøti⁄
,Çgx_uöt_à
byãs
);

577 
ngx_chaö_t
 * 
ngx_πmp_¸óã_ßm∂e_ac˚ss
(
ngx_πmp_£ssi⁄_t
 *
s
);

579 
ngx_öt_t
 
ngx_πmp_£nd_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
,

580 * 
Àvñ
, *
desc
);

581 
ngx_öt_t
 
ngx_πmp_£nd_∂ay_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
,

582 * 
Àvñ
, 
ngx_uöt_t
 
duøti⁄
,Çgx_uöt_à
byãs
);

583 
ngx_öt_t
 
ngx_πmp_£nd_ßm∂e_ac˚ss
(
ngx_πmp_£ssi⁄_t
 *
s
);

587 
	#NGX_RTMP_VIDEO_KEY_FRAME
 1

	)

588 
	#NGX_RTMP_VIDEO_INTER_FRAME
 2

	)

589 
	#NGX_RTMP_VIDEO_DISPOSABLE_FRAME
 3

	)

592 
ngx_ölöe
 
ngx_öt_t


593 
	$ngx_πmp_gë_video_‰ame_ty≥
(
ngx_chaö_t
 *
ö
)

595  (
ö
->
buf
->
pos
[0] & 0xf0) >> 4;

596 
	}
}

599 
ngx_ölöe
 
ngx_öt_t


600 
	$ngx_πmp_is_codec_hódî
(
ngx_chaö_t
 *
ö
)

602  
ö
->
buf
->
pos
 + 1 < in->buf->
œ°
 && in->buf->pos[1] == 0;

603 
	}
}

606 
ngx_πmp_b™dwidth_t
 
ngx_πmp_bw_out
;

607 
ngx_πmp_b™dwidth_t
 
ngx_πmp_bw_ö
;

610 
ngx_uöt_t
 
ngx_πmp_«c˚±ed
;

611 #i‡(
ngöx_vîsi⁄
 >= 1007005)

612 
ngx_thªad_vﬁ©ûe
 
ngx_queue_t
 
ngx_πmp_öô_queue
;

614 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_πmp_öô_queue
;

617 
ngx_uöt_t
 
ngx_πmp_max_moduÀ
;

618 
ngx_moduÀ_t
 
ngx_πmp_c‹e_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_access_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

10 
	~"ngx_πmp_cmd_moduÀ.h
"

13 
ngx_πmp_publish_±
 
	g√xt_publish
;

14 
ngx_πmp_∂ay_±
 
	g√xt_∂ay
;

17 
	#NGX_RTMP_ACCESS_PUBLISH
 0x01

	)

18 
	#NGX_RTMP_ACCESS_PLAY
 0x02

	)

21 * 
ngx_πmp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

22 *
c⁄f
);

23 
ngx_öt_t
 
ngx_πmp_ac˚ss_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

24 * 
ngx_πmp_ac˚ss_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 * 
ngx_πmp_ac˚ss_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

30 
ö_addr_t
 
	mmask
;

31 
ö_addr_t
 
	maddr
;

32 
ngx_uöt_t
 
	mdíy
;

33 
ngx_uöt_t
 
	mÊags
;

34 } 
	tngx_πmp_ac˚ss_ruÀ_t
;

37 #i‡(
NGX_HAVE_INET6
)

40 
ö6_addr
 
	maddr
;

41 
ö6_addr
 
	mmask
;

42 
ngx_uöt_t
 
	mdíy
;

43 
ngx_uöt_t
 
	mÊags
;

44 } 
	tngx_πmp_ac˚ss_ruÀ6_t
;

50 
ngx_¨øy_t
 
	mruÀs
;

51 #i‡(
NGX_HAVE_INET6
)

52 
ngx_¨øy_t
 
	mruÀs6
;

54 } 
	tngx_πmp_ac˚ss_≠p_c⁄f_t
;

57 
ngx_comm™d_t
 
	gngx_πmp_ac˚ss_comm™ds
[] = {

59 { 
ngx_°rög
("allow"),

60 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE12
,

61 
ngx_πmp_ac˚ss_ruÀ
,

62 
NGX_RTMP_APP_CONF_OFFSET
,

64 
NULL
 },

66 { 
ngx_°rög
("deny"),

67 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE12
,

68 
ngx_πmp_ac˚ss_ruÀ
,

69 
NGX_RTMP_APP_CONF_OFFSET
,

71 
NULL
 },

73 
ngx_nuŒ_comm™d


77 
ngx_πmp_moduÀ_t
 
	gngx_πmp_ac˚ss_moduÀ_˘x
 = {

78 
NULL
,

79 
ngx_πmp_ac˚ss_po°c⁄figuøti⁄
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
ngx_πmp_ac˚ss_¸óã_≠p_c⁄f
,

85 
ngx_πmp_ac˚ss_mîge_≠p_c⁄f
,

89 
ngx_moduÀ_t
 
	gngx_πmp_ac˚ss_moduÀ
 = {

90 
NGX_MODULE_V1
,

91 &
ngx_πmp_ac˚ss_moduÀ_˘x
,

92 
ngx_πmp_ac˚ss_comm™ds
,

93 
NGX_RTMP_MODULE
,

94 
NULL
,

95 
NULL
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NGX_MODULE_V1_PADDING


106 
	$ngx_πmp_ac˚ss_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

108 
ngx_πmp_ac˚ss_≠p_c⁄f_t
 *
Øcf
;

110 
Øcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_ac˚ss_≠p_c⁄f_t
));

111 i‡(
Øcf
 =
NULL
) {

112  
NULL
;

115 i‡(
	`ngx_¨øy_öô
(&
Øcf
->
ruÀs
, 
cf
->
poﬁ
, 1,

116 (
ngx_πmp_ac˚ss_ruÀ_t
))

117 !
NGX_OK
)

119  
NULL
;

122 #i‡(
NGX_HAVE_INET6
)

123 i‡(
	`ngx_¨øy_öô
(&
Øcf
->
ruÀs6
, 
cf
->
poﬁ
, 1,

124 (
ngx_πmp_ac˚ss_ruÀ6_t
))

125 !
NGX_OK
)

127  
NULL
;

131  
Øcf
;

132 
	}
}

135 
ngx_öt_t


136 
	$ngx_πmp_ac˚ss_mîge_ruÀs
(
ngx_¨øy_t
 *
¥ev
,Çgx_¨øy_à*
ruÀs
)

138 *
p
;

140 i‡(
¥ev
->
√…s
 == 0) {

141  
NGX_OK
;

144 i‡(
ruÀs
->
√…s
 == 0) {

145 *
ruÀs
 = *
¥ev
;

146  
NGX_OK
;

149 
p
 = 
	`ngx_¨øy_push_n
(
ruÀs
, 
¥ev
->
√…s
);

150 i‡(
p
 =
NULL
) {

151  
NGX_ERROR
;

154 
	`ngx_mem˝y
(
p
, 
¥ev
->
ñts
,Öªv->
size
 *Öªv->
√…s
);

156  
NGX_OK
;

157 
	}
}

161 
	$ngx_πmp_ac˚ss_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

163 
ngx_πmp_ac˚ss_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

164 
ngx_πmp_ac˚ss_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

166 i‡(
	`ngx_πmp_ac˚ss_mîge_ruÀs
(&
¥ev
->
ruÀs
, &
c⁄f
->ruÀsË!
NGX_OK
) {

167  
NGX_CONF_ERROR
;

170 #i‡(
NGX_HAVE_INET6
)

171 i‡(
	`ngx_πmp_ac˚ss_mîge_ruÀs
(&
¥ev
->
ruÀs6
, &
c⁄f
->ruÀs6Ë!
NGX_OK
) {

172  
NGX_CONF_ERROR
;

176  
NGX_CONF_OK
;

177 
	}
}

180 
ngx_öt_t


181 
	$ngx_πmp_ac˚ss_found
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
díy
)

183 i‡(
díy
) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

186  
NGX_ERROR
;

189  
NGX_OK
;

190 
	}
}

193 
ngx_öt_t


194 
	$ngx_πmp_ac˚ss_öë
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ö_addr_t
 
addr
, 
ngx_uöt_t
 
Êag
)

196 
ngx_uöt_t
 
i
;

197 
ngx_πmp_ac˚ss_ruÀ_t
 *
ruÀ
;

198 
ngx_πmp_ac˚ss_≠p_c⁄f_t
 *
ascf
;

200 
ascf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ac˚ss_moduÀ
);

202 
ruÀ
 = 
ascf
->
ruÀs
.
ñts
;

203 
i
 = 0; i < 
ascf
->
ruÀs
.
√…s
; i++) {

205 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

207 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

209 i‡((
addr
 & 
ruÀ
[
i
].
mask
Ë=ruÀ[i].add∏&& (
Êag
 &ÑuÀ[i].
Êags
)) {

210  
	`ngx_πmp_ac˚ss_found
(
s
, 
ruÀ
[
i
].
díy
);

214  
NGX_OK
;

215 
	}
}

218 #i‡(
NGX_HAVE_INET6
)

220 
ngx_öt_t


221 
	$ngx_πmp_ac˚ss_öë6
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
p
, 
ngx_uöt_t
 
Êag
)

223 
ngx_uöt_t
 
n
;

224 
ngx_uöt_t
 
i
;

225 
ngx_πmp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

226 
ngx_πmp_ac˚ss_≠p_c⁄f_t
 *
ascf
;

228 
ascf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ac˚ss_moduÀ
);

230 
ruÀ6
 = 
ascf
->
ruÀs6
.
ñts
;

231 
i
 = 0; i < 
ascf
->
ruÀs6
.
√…s
; i++) {

233 #i‡(
NGX_DEBUG
)

235 
size_t
 
˛
, 
ml
, 
Æ
;

236 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

237 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

238 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

240 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

241 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

242 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

244 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

245 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

249 
n
 = 0;Ç < 16;Ç++) {

250 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

251 
√xt
;

255 i‡(
Êag
 & 
ruÀ6
[
i
].
Êags
) {

256  
	`ngx_πmp_ac˚ss_found
(
s
, 
ruÀ6
[
i
].
díy
);

259 
√xt
:

263  
NGX_OK
;

264 
	}
}

269 
ngx_öt_t


270 
	$ngx_πmp_ac˚ss
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
Êag
)

272 
sockaddr_ö
 *
sö
;

273 
ngx_πmp_ac˚ss_≠p_c⁄f_t
 *
ascf
;

274 #i‡(
NGX_HAVE_INET6
)

275 
u_ch¨
 *
p
;

276 
ö_addr_t
 
addr
;

277 
sockaddr_ö6
 *
sö6
;

280 
ascf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ac˚ss_moduÀ
);

281 i‡(
ascf
 =
NULL
) {

282 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

284  
NGX_ERROR
;

288 i‡(
s
->
c⁄√˘i⁄
->
sockaddr
 =
NULL
) {

289  
NGX_OK
;

292 
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

294 
AF_INET
:

295 
sö
 = (
sockaddr_ö
 *Ë
s
->
c⁄√˘i⁄
->
sockaddr
;

296  
	`ngx_πmp_ac˚ss_öë
(
s
, 
sö
->
sö_addr
.
s_addr
, 
Êag
);

298 #i‡(
NGX_HAVE_INET6
)

300 
AF_INET6
:

301 
sö6
 = (
sockaddr_ö6
 *Ë
s
->
c⁄√˘i⁄
->
sockaddr
;

302 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

304 i‡(
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

305 
addr
 = 
p
[12] << 24;

306 
addr
 +
p
[13] << 16;

307 
addr
 +
p
[14] << 8;

308 
addr
 +
p
[15];

309  
	`ngx_πmp_ac˚ss_öë
(
s
, 
	`ht⁄l
(
addr
), 
Êag
);

312  
	`ngx_πmp_ac˚ss_öë6
(
s
, 
p
, 
Êag
);

317  
NGX_OK
;

318 
	}
}

322 
	$ngx_πmp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

324 
ngx_πmp_ac˚ss_≠p_c⁄f_t
 *
ascf
 = 
c⁄f
;

326 
ngx_öt_t
 
rc
;

327 
ngx_uöt_t
 
Æl
;

328 
ngx_°r_t
 *
vÆue
;

329 
ngx_cidr_t
 
cidr
;

330 
ngx_πmp_ac˚ss_ruÀ_t
 *
ruÀ
;

331 #i‡(
NGX_HAVE_INET6
)

332 
ngx_πmp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

334 
size_t
 
n
;

335 
ngx_uöt_t
 
Êags
;

337 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

339 
vÆue
 = 
cf
->
¨gs
->
ñts
;

341 
n
 = 1;

342 
Êags
 = 0;

344 i‡(
cf
->
¨gs
->
√…s
 == 2) {

346 
Êags
 = 
NGX_RTMP_ACCESS_PUBLISH
 | 
NGX_RTMP_ACCESS_PLAY
;

350 ; 
n
 < 
cf
->
¨gs
->
√…s
 - 1; ++n) {

352 i‡(
vÆue
[
n
].
Àn
 == ("publish") - 1 &&

353 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "publish") == 0)

355 
Êags
 |
NGX_RTMP_ACCESS_PUBLISH
;

360 i‡(
vÆue
[
n
].
Àn
 == ("play") - 1 &&

361 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "play") == 0)

363 
Êags
 |
NGX_RTMP_ACCESS_PLAY
;

368 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cf
->
log
, 0,

369 "u√x≥˘edác˚s†•ecifõd: '%V'", &
vÆue
[
n
]);

370  
NGX_CONF_ERROR
;

374 
Æl
 = (
vÆue
[
n
].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[n].
d©a
, "all") == 0);

376 i‡(!
Æl
) {

378 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[
n
], &
cidr
);

380 i‡(
rc
 =
NGX_ERROR
) {

381 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

382 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

383  
NGX_CONF_ERROR
;

386 i‡(
rc
 =
NGX_DONE
) {

387 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

389 &
vÆue
[1]);

393 
cidr
.
Ámûy
) {

395 #i‡(
NGX_HAVE_INET6
)

396 
AF_INET6
:

399 
ruÀ6
 = 
	`ngx_¨øy_push
(&
ascf
->
ruÀs6
);

400 i‡(
ruÀ6
 =
NULL
) {

401  
NGX_CONF_ERROR
;

404 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

405 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

406 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

407 
ruÀ6
->
Êags
 = flags;

409 i‡(!
Æl
) {

418 
ruÀ
 = 
	`ngx_¨øy_push
(&
ascf
->
ruÀs
);

419 i‡(
ruÀ
 =
NULL
) {

420  
NGX_CONF_ERROR
;

423 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

424 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

425 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

426 
ruÀ
->
Êags
 = flags;

429  
NGX_CONF_OK
;

430 
	}
}

433 
ngx_öt_t


434 
	$ngx_πmp_ac˚ss_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

436 i‡(
s
->
auto_pushed
) {

437 
√xt
;

440 i‡(
	`ngx_πmp_ac˚ss
(
s
, 
NGX_RTMP_ACCESS_PUBLISH
Ë!
NGX_OK
) {

441  
NGX_ERROR
;

444 
√xt
:

445  
	`√xt_publish
(
s
, 
v
);

446 
	}
}

449 
ngx_öt_t


450 
	$ngx_πmp_ac˚ss_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

452 i‡(
	`ngx_πmp_ac˚ss
(
s
, 
NGX_RTMP_ACCESS_PLAY
Ë!
NGX_OK
) {

453  
NGX_ERROR
;

456  
	`√xt_∂ay
(
s
, 
v
);

457 
	}
}

460 
ngx_öt_t


461 
	$ngx_πmp_ac˚ss_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

464 
√xt_publish
 = 
ngx_πmp_publish
;

465 
ngx_πmp_publish
 = 
ngx_πmp_ac˚ss_publish
;

467 
√xt_∂ay
 = 
ngx_πmp_∂ay
;

468 
ngx_πmp_∂ay
 = 
ngx_πmp_ac˚ss_∂ay
;

470  
NGX_OK
;

471 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_amf.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_amf.h
"

10 
	~"ngx_πmp.h
"

11 
	~<°rög.h
>

14 
ngx_ölöe
 *

15 
	$ngx_πmp_amf_ªvî£_c›y
(*
d°
, * 
§c
, 
size_t
 
Àn
)

17 
size_t
 
k
;

19 i‡(
d°
 =
NULL
 || 
§c
 == NULL) {

20  
NULL
;

23 
k
 = 0; k < 
Àn
; ++k) {

24 ((
u_ch¨
*)
d°
)[
k
] = ((u_ch¨*)
§c
)[
Àn
 - 1 - k];

27  
d°
;

28 
	}
}

30 
	#NGX_RTMP_AMF_DEBUG_SIZE
 16

	)

32 #ifde‡
NGX_DEBUG


34 
	$ngx_πmp_amf_debug
(c⁄° * 
›
, 
ngx_log_t
 *
log
, 
u_ch¨
 *
p
, 
size_t
 
n
)

36 
u_ch¨
 
h°r
[3 * 
NGX_RTMP_AMF_DEBUG_SIZE
 + 1];

37 
u_ch¨
 
°r
[
NGX_RTMP_AMF_DEBUG_SIZE
 + 1];

38 
u_ch¨
 *
hp
, *
•
;

39 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

40 
size_t
 
i
;

42 
hp
 = 
h°r
;

43 
•
 = 
°r
;

45 
i
 = 0; i < 
n
 && i < 
NGX_RTMP_AMF_DEBUG_SIZE
; ++i) {

46 *
hp
++ = ' ';

47 i‡(
p
) {

48 *
hp
++ = 
hex
[(*
p
 & 0xf0) >> 4];

49 *
hp
++ = 
hex
[*
p
 & 0x0f];

50 *
•
++ = (*
p
 >= 0x20 && *p <= 0x7e) ?

51 *
p
 : (
u_ch¨
)'?';

52 ++
p
;

54 *
hp
++ = 'X';

55 *
hp
++ = 'X';

56 *
•
++ = '?';

59 *
hp
 = *
•
 = '\0';

61 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
log
, 0,

62 "AMF %†(%d)%†'%s'", 
›
, 
n
, 
h°r
, 
°r
);

63 
	}
}

66 
ngx_öt_t


67 
	$ngx_πmp_amf_gë
(
ngx_πmp_amf_˘x_t
 *
˘x
, *
p
, 
size_t
 
n
)

69 
size_t
 
size
;

70 
ngx_chaö_t
 *
l
;

71 
size_t
 
off£t
;

72 
u_ch¨
 *
pos
, *
œ°
;

73 #ifde‡
NGX_DEBUG


74 *
›
 = 
p
;

75 
size_t
 
⁄
 = 
n
;

78 i‡(!
n
)

79  
NGX_OK
;

81 
l
 = 
˘x
->
lök
, 
off£t
 = ctx->off£t;Ü;Ü =Ü->
√xt
, offset = 0) {

83 
pos
 = 
l
->
buf
->po†+ 
off£t
;

84 
œ°
 = 
l
->
buf
->last;

86 i‡(
œ°
 >
pos
 + 
n
) {

87 i‡(
p
) {

88 
p
 = 
	`ngx_˝ymem
’, 
pos
, 
n
);

90 
˘x
->
off£t
 = off£à+ 
n
;

91 
˘x
->
lök
 = 
l
;

93 #ifde‡
NGX_DEBUG


94 
	`ngx_πmp_amf_debug
("ªad", 
˘x
->
log
, (
u_ch¨
*)
›
, 
⁄
);

97  
NGX_OK
;

100 
size
 = 
œ°
 - 
pos
;

102 i‡(
p
) {

103 
p
 = 
	`ngx_˝ymem
’, 
pos
, 
size
);

106 
n
 -
size
;

109 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
˘x
->
log
, 0,

110 "AMFÑódÉo‡(%d)", 
n
);

112  
NGX_DONE
;

113 
	}
}

116 
ngx_öt_t


117 
	$ngx_πmp_amf_put
(
ngx_πmp_amf_˘x_t
 *
˘x
, *
p
, 
size_t
 
n
)

119 
ngx_buf_t
 *
b
;

120 
size_t
 
size
;

121 
ngx_chaö_t
 *
l
, *
 
;

123 #ifde‡
NGX_DEBUG


124 
	`ngx_πmp_amf_debug
("wrôe", 
˘x
->
log
, (
u_ch¨
*)
p
, 
n
);

127 
l
 = 
˘x
->
lök
;

129 i‡(
˘x
->
lök
 && ctx->
fú°
 =
NULL
) {

130 
˘x
->
fú°
 = ctx->
lök
;

133 
n
) {

134 
b
 = 
l
 ?Ü->
buf
 : 
NULL
;

136 i‡(
b
 =
NULL
 || b->
œ°
 =b->
íd
) {

138 
 
 = 
˘x
->
	`Æloc
(˘x->
¨g
);

139 i‡(
 
 =
NULL
) {

140  
NGX_ERROR
;

143 i‡(
˘x
->
fú°
 =
NULL
) {

144 
˘x
->
fú°
 = 
 
;

147 i‡(
l
) {

148 
l
->
√xt
 = 
 
;

151 
l
 = 
 
;

152 
˘x
->
lök
 = 
l
;

153 
b
 = 
l
->
buf
;

156 
size
 = 
b
->
íd
 - b->
œ°
;

158 i‡(
size
 >
n
) {

159 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
n
);

160  
NGX_OK
;

163 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
size
);

164 
p
 = (
u_ch¨
*Ì + 
size
;

165 
n
 -
size
;

168  
NGX_OK
;

169 
	}
}

172 
ngx_öt_t


173 
	$ngx_πmp_amf_ªad_obje˘
(
ngx_πmp_amf_˘x_t
 *
˘x
, 
ngx_πmp_amf_ñt_t
 *
ñts
,

174 
size_t
 
√…s
)

176 
uöt8_t
 
ty≥
;

177 
uöt16_t
 
Àn
;

178 
size_t
 
n
, 
«mñí
, 
maxÀn
;

179 
ngx_öt_t
 
rc
;

180 
u_ch¨
 
buf
[2];

182 
maxÀn
 = 0;

183 
n
 = 0;Ç < 
√…s
; ++n) {

184 
«mñí
 = 
ñts
[
n
].
«me
.
Àn
;

185 i‡(
«mñí
 > 
maxÀn
)

186 
maxÀn
 = 
«mñí
;

191 #i‡!(
NGX_WIN32
)

192 
«me
[
maxÀn
];

194 
«me
[1024];

195 i‡(
maxÀn
 > (
«me
)) {

196  
NGX_ERROR
;

200 
	`ngx_πmp_amf_gë
(
˘x
, 
buf
, 2)) {

201 
NGX_DONE
:

203  
NGX_OK
;

204 
NGX_OK
:

207  
NGX_ERROR
;

210 
	`ngx_πmp_amf_ªvî£_c›y
(&
Àn
, 
buf
, 2);

212 i‡(!
Àn
)

215 i‡(
Àn
 <
maxÀn
) {

216 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, 
«me
, 
Àn
);

219 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, 
«me
, 
maxÀn
);

220 i‡(
rc
 !
NGX_OK
)

221  
NGX_ERROR
;

222 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, 0, 
Àn
 - 
maxÀn
);

225 i‡(
rc
 !
NGX_OK
)

226  
NGX_ERROR
;

230 
n
 = 0;Ç < 
√…s


231 && (
Àn
 !
ñts
[
n
].
«me
.len

232 || 
	`ngx_°∫cmp
(
«me
, 
ñts
[
n
].«me.
d©a
, 
Àn
));

233 ++
n
);

235 i‡(
	`ngx_πmp_amf_ªad
(
˘x
, 
n
 < 
√…s
 ? &
ñts
[n] : 
NULL
, 1Ë!
NGX_OK
)

236  
NGX_ERROR
;

239 i‡(
	`ngx_πmp_amf_gë
(
˘x
, &
ty≥
, 1Ë!
NGX_OK


240 || 
ty≥
 !
NGX_RTMP_AMF_END
)

242  
NGX_ERROR
;

245  
NGX_OK
;

246 
	}
}

249 
ngx_öt_t


250 
	$ngx_πmp_amf_ªad_¨øy
(
ngx_πmp_amf_˘x_t
 *
˘x
, 
ngx_πmp_amf_ñt_t
 *
ñts
,

251 
size_t
 
√…s
)

253 
uöt32_t
 
Àn
;

254 
size_t
 
n
;

255 
u_ch¨
 
buf
[4];

258 i‡(
	`ngx_πmp_amf_gë
(
˘x
, 
buf
, 4Ë!
NGX_OK
)

259  
NGX_ERROR
;

261 
	`ngx_πmp_amf_ªvî£_c›y
(&
Àn
, 
buf
, 4);

263 
n
 = 0;Ç < 
Àn
; ++n) {

264 i‡(
	`ngx_πmp_amf_ªad
(
˘x
, 
n
 < 
√…s
 ? &
ñts
[n] : 
NULL
, 1Ë!
NGX_OK
)

265  
NGX_ERROR
;

268  
NGX_OK
;

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_πmp_amf_ªad_v¨ü¡
(
ngx_πmp_amf_˘x_t
 *
˘x
, 
ngx_πmp_amf_ñt_t
 *
ñts
,

274 
size_t
 
√…s
)

276 
uöt8_t
 
ty≥
;

277 
ngx_öt_t
 
rc
;

278 
size_t
 
n
;

279 
ngx_πmp_amf_ñt_t
 
ñt
;

281 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, &
ty≥
, 1);

282 i‡(
rc
 !
NGX_OK
) {

283  
rc
;

286 
	`ngx_memzîo
(&
ñt
, (elt));

287 
n
 = 0;Ç < 
√…s
; ++n, ++
ñts
) {

288 i‡(
ty≥
 =
ñts
->type) {

289 
ñt
.
d©a
 = 
ñts
->data;

290 
ñt
.
Àn
 = 
ñts
->len;

294 
ñt
.
ty≥
 =Åy≥ | 
NGX_RTMP_AMF_TYPELESS
;

296  
	`ngx_πmp_amf_ªad
(
˘x
, &
ñt
, 1);

297 
	}
}

300 
ngx_öt_t


301 
	$ngx_πmp_amf_is_com∑tibÀ_ty≥
(
uöt8_t
 
t1
, uöt8_à
t2
)

303  
t1
 =
t2


304 || (
t1
 =
NGX_RTMP_AMF_OBJECT
 && 
t2
 =
NGX_RTMP_AMF_MIXED_ARRAY
)

305 || (
t2
 =
NGX_RTMP_AMF_OBJECT
 && 
t1
 =
NGX_RTMP_AMF_MIXED_ARRAY
);

306 
	}
}

309 
ngx_öt_t


310 
	$ngx_πmp_amf_ªad
(
ngx_πmp_amf_˘x_t
 *
˘x
, 
ngx_πmp_amf_ñt_t
 *
ñts
,

311 
size_t
 
√…s
)

313 *
d©a
;

314 
ngx_öt_t
 
ty≥
;

315 
uöt8_t
 
ty≥8
;

316 
size_t
 
n
;

317 
uöt16_t
 
Àn
;

318 
ngx_öt_t
 
rc
;

319 
u_ch¨
 
buf
[8];

320 
uöt32_t
 
max_ödex
;

322 
n
 = 0;Ç < 
√…s
; ++n) {

324 i‡(
ñts
 &&É…s->
ty≥
 & 
NGX_RTMP_AMF_TYPELESS
) {

325 
ty≥
 = 
ñts
->ty≥ & ~
NGX_RTMP_AMF_TYPELESS
;

326 
d©a
 = 
ñts
->data;

329 
	`ngx_πmp_amf_gë
(
˘x
, &
ty≥8
, 1)) {

330 
NGX_DONE
:

331 i‡(
ñts
->
ty≥
 & 
NGX_RTMP_AMF_OPTIONAL
) {

332  
NGX_OK
;

334 
NGX_ERROR
:

335  
NGX_ERROR
;

337 
ty≥
 = 
ty≥8
;

338 
d©a
 = (
ñts
 &&

339 
	`ngx_πmp_amf_is_com∑tibÀ_ty≥
(

340 (
uöt8_t
Ë(
ñts
->
ty≥
 & 0xff), (uint8_t)Åype))

341 ? 
ñts
->
d©a


342 : 
NULL
;

344 i‡(
ñts
 && (ñts->
ty≥
 & 
NGX_RTMP_AMF_CONTEXT
)) {

345 i‡(
d©a
) {

346 *(
ngx_πmp_amf_˘x_t
 *Ë
d©a
 = *
˘x
;

348 
d©a
 = 
NULL
;

352 
ty≥
) {

353 
NGX_RTMP_AMF_NUMBER
:

354 i‡(
	`ngx_πmp_amf_gë
(
˘x
, 
buf
, 8Ë!
NGX_OK
) {

355  
NGX_ERROR
;

357 
	`ngx_πmp_amf_ªvî£_c›y
(
d©a
, 
buf
, 8);

360 
NGX_RTMP_AMF_BOOLEAN
:

361 i‡(
	`ngx_πmp_amf_gë
(
˘x
, 
d©a
, 1Ë!
NGX_OK
) {

362  
NGX_ERROR
;

366 
NGX_RTMP_AMF_STRING
:

367 i‡(
	`ngx_πmp_amf_gë
(
˘x
, 
buf
, 2Ë!
NGX_OK
) {

368  
NGX_ERROR
;

370 
	`ngx_πmp_amf_ªvî£_c›y
(&
Àn
, 
buf
, 2);

372 i‡(
d©a
 =
NULL
) {

373 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, 
d©a
, 
Àn
);

375 } i‡(
ñts
->
Àn
 <=Üen) {

376 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, 
d©a
, 
ñts
->
Àn
 - 1);

377 i‡(
rc
 !
NGX_OK
)

378  
NGX_ERROR
;

379 ((*)
d©a
)[
ñts
->
Àn
 - 1] = 0;

380 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, 
NULL
, 
Àn
 - 
ñts
->len + 1);

383 
rc
 = 
	`ngx_πmp_amf_gë
(
˘x
, 
d©a
, 
Àn
);

384 ((*)
d©a
)[
Àn
] = 0;

387 i‡(
rc
 !
NGX_OK
) {

388  
NGX_ERROR
;

393 
NGX_RTMP_AMF_NULL
:

394 
NGX_RTMP_AMF_ARRAY_NULL
:

397 
NGX_RTMP_AMF_MIXED_ARRAY
:

398 i‡(
	`ngx_πmp_amf_gë
(
˘x
, &
max_ödex
, 4Ë!
NGX_OK
) {

399  
NGX_ERROR
;

402 
NGX_RTMP_AMF_OBJECT
:

403 i‡(
	`ngx_πmp_amf_ªad_obje˘
(
˘x
, 
d©a
,

404 
d©a
 && 
ñts
 ?É…s->
Àn
 / (
ngx_πmp_amf_ñt_t
) : 0

405 Ë!
NGX_OK
)

407  
NGX_ERROR
;

411 
NGX_RTMP_AMF_ARRAY
:

412 i‡(
	`ngx_πmp_amf_ªad_¨øy
(
˘x
, 
d©a
,

413 
d©a
 && 
ñts
 ?É…s->
Àn
 / (
ngx_πmp_amf_ñt_t
) : 0

414 Ë!
NGX_OK
)

416  
NGX_ERROR
;

420 
NGX_RTMP_AMF_VARIANT_
:

421 i‡(
	`ngx_πmp_amf_ªad_v¨ü¡
(
˘x
, 
d©a
,

422 
d©a
 && 
ñts
 ?É…s->
Àn
 / (
ngx_πmp_amf_ñt_t
) : 0

423 Ë!
NGX_OK
)

425  
NGX_ERROR
;

429 
NGX_RTMP_AMF_INT8
:

430 i‡(
	`ngx_πmp_amf_gë
(
˘x
, 
d©a
, 1Ë!
NGX_OK
) {

431  
NGX_ERROR
;

435 
NGX_RTMP_AMF_INT16
:

436 i‡(
	`ngx_πmp_amf_gë
(
˘x
, 
buf
, 2Ë!
NGX_OK
) {

437  
NGX_ERROR
;

439 
	`ngx_πmp_amf_ªvî£_c›y
(
d©a
, 
buf
, 2);

442 
NGX_RTMP_AMF_INT32
:

443 i‡(
	`ngx_πmp_amf_gë
(
˘x
, 
buf
, 4Ë!
NGX_OK
) {

444  
NGX_ERROR
;

446 
	`ngx_πmp_amf_ªvî£_c›y
(
d©a
, 
buf
, 4);

449 
NGX_RTMP_AMF_END
:

450  
NGX_OK
;

453  
NGX_ERROR
;

456 i‡(
ñts
) {

457 ++
ñts
;

461  
NGX_OK
;

462 
	}
}

465 
ngx_öt_t


466 
	$ngx_πmp_amf_wrôe_obje˘
(
ngx_πmp_amf_˘x_t
 *
˘x
,

467 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
)

469 
uöt16_t
 
Àn
;

470 
size_t
 
n
;

471 
u_ch¨
 
buf
[2];

473 
n
 = 0;Ç < 
√…s
; ++n) {

475 
Àn
 = (
uöt16_t
Ë
ñts
[
n
].
«me
.len;

477 i‡(
	`ngx_πmp_amf_put
(
˘x
,

478 
	`ngx_πmp_amf_ªvî£_c›y
(
buf
,

479 &
Àn
, 2), 2Ë!
NGX_OK
)

481  
NGX_ERROR
;

484 i‡(
	`ngx_πmp_amf_put
(
˘x
, 
ñts
[
n
].
«me
.
d©a
, 
Àn
Ë!
NGX_OK
) {

485  
NGX_ERROR
;

488 i‡(
	`ngx_πmp_amf_wrôe
(
˘x
, &
ñts
[
n
], 1Ë!
NGX_OK
) {

489  
NGX_ERROR
;

493 i‡(
	`ngx_πmp_amf_put
(
˘x
, "\0\0", 2Ë!
NGX_OK
) {

494  
NGX_ERROR
;

497  
NGX_OK
;

498 
	}
}

501 
ngx_öt_t


502 
	$ngx_πmp_amf_wrôe_¨øy
(
ngx_πmp_amf_˘x_t
 *
˘x
,

503 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
)

505 
uöt32_t
 
Àn
;

506 
size_t
 
n
;

507 
u_ch¨
 
buf
[4];

509 
Àn
 = 
√…s
;

510 i‡(
	`ngx_πmp_amf_put
(
˘x
,

511 
	`ngx_πmp_amf_ªvî£_c›y
(
buf
,

512 &
Àn
, 4), 4Ë!
NGX_OK
)

514  
NGX_ERROR
;

517 
n
 = 0;Ç < 
√…s
; ++n) {

518 i‡(
	`ngx_πmp_amf_wrôe
(
˘x
, &
ñts
[
n
], 1Ë!
NGX_OK
) {

519  
NGX_ERROR
;

523  
NGX_OK
;

524 
	}
}

527 
ngx_öt_t


528 
	$ngx_πmp_amf_wrôe
(
ngx_πmp_amf_˘x_t
 *
˘x
,

529 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
)

531 
size_t
 
n
;

532 
ngx_öt_t
 
ty≥
;

533 
uöt8_t
 
ty≥8
;

534 *
d©a
;

535 
uöt16_t
 
Àn
;

536 
uöt32_t
 
max_ödex
;

537 
u_ch¨
 
buf
[8];

539 
n
 = 0;Ç < 
√…s
; ++n) {

541 
ty≥
 = 
ñts
[
n
].type;

542 
d©a
 = 
ñts
[
n
].data;

543 
Àn
 = (
uöt16_t
Ë
ñts
[
n
].len;

545 i‡(
ty≥
 & 
NGX_RTMP_AMF_TYPELESS
) {

546 
ty≥
 &~
NGX_RTMP_AMF_TYPELESS
;

548 
ty≥8
 = (
uöt8_t
)
ty≥
;

549 i‡(
	`ngx_πmp_amf_put
(
˘x
, &
ty≥8
, 1Ë!
NGX_OK
)

550  
NGX_ERROR
;

553 
ty≥
) {

554 
NGX_RTMP_AMF_NUMBER
:

555 i‡(
	`ngx_πmp_amf_put
(
˘x
,

556 
	`ngx_πmp_amf_ªvî£_c›y
(
buf
,

557 
d©a
, 8), 8Ë!
NGX_OK
)

559  
NGX_ERROR
;

563 
NGX_RTMP_AMF_BOOLEAN
:

564 i‡(
	`ngx_πmp_amf_put
(
˘x
, 
d©a
, 1Ë!
NGX_OK
) {

565  
NGX_ERROR
;

569 
NGX_RTMP_AMF_STRING
:

570 i‡(
Àn
 =0 && 
d©a
) {

571 
Àn
 = (
uöt16_t
Ë
	`ngx_°æí
((
u_ch¨
*Ë
d©a
);

574 i‡(
	`ngx_πmp_amf_put
(
˘x
,

575 
	`ngx_πmp_amf_ªvî£_c›y
(
buf
,

576 &
Àn
, 2), 2Ë!
NGX_OK
)

578  
NGX_ERROR
;

581 i‡(
	`ngx_πmp_amf_put
(
˘x
, 
d©a
, 
Àn
Ë!
NGX_OK
) {

582  
NGX_ERROR
;

586 
NGX_RTMP_AMF_NULL
:

587 
NGX_RTMP_AMF_ARRAY_NULL
:

590 
NGX_RTMP_AMF_MIXED_ARRAY
:

591 
max_ödex
 = 0;

592 i‡(
	`ngx_πmp_amf_put
(
˘x
, &
max_ödex
, 4Ë!
NGX_OK
) {

593  
NGX_ERROR
;

596 
NGX_RTMP_AMF_OBJECT
:

597 
ty≥8
 = 
NGX_RTMP_AMF_END
;

598 i‡(
	`ngx_πmp_amf_wrôe_obje˘
(
˘x
, 
d©a
,

599 
ñts
[
n
].
Àn
 / (
ngx_πmp_amf_ñt_t
)Ë!
NGX_OK


600 || 
	`ngx_πmp_amf_put
(
˘x
, &
ty≥8
, 1Ë!
NGX_OK
)

602  
NGX_ERROR
;

606 
NGX_RTMP_AMF_ARRAY
:

607 i‡(
	`ngx_πmp_amf_wrôe_¨øy
(
˘x
, 
d©a
,

608 
ñts
[
n
].
Àn
 / (
ngx_πmp_amf_ñt_t
)Ë!
NGX_OK
)

610  
NGX_ERROR
;

614 
NGX_RTMP_AMF_INT8
:

615 i‡(
	`ngx_πmp_amf_put
(
˘x
, 
d©a
, 1Ë!
NGX_OK
) {

616  
NGX_ERROR
;

620 
NGX_RTMP_AMF_INT16
:

621 i‡(
	`ngx_πmp_amf_put
(
˘x
,

622 
	`ngx_πmp_amf_ªvî£_c›y
(
buf
,

623 
d©a
, 2), 2Ë!
NGX_OK
)

625  
NGX_ERROR
;

629 
NGX_RTMP_AMF_INT32
:

630 i‡(
	`ngx_πmp_amf_put
(
˘x
,

631 
	`ngx_πmp_amf_ªvî£_c›y
(
buf
,

632 
d©a
, 4), 4Ë!
NGX_OK
)

634  
NGX_ERROR
;

639  
NGX_ERROR
;

643  
NGX_OK
;

644 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_amf.h

7 #i‚de‡
_NGX_RTMP_AMF_H_INCLUDED_


8 
	#_NGX_RTMP_AMF_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

16 
	#NGX_RTMP_AMF_NUMBER
 0x00

	)

17 
	#NGX_RTMP_AMF_BOOLEAN
 0x01

	)

18 
	#NGX_RTMP_AMF_STRING
 0x02

	)

19 
	#NGX_RTMP_AMF_OBJECT
 0x03

	)

20 
	#NGX_RTMP_AMF_NULL
 0x05

	)

21 
	#NGX_RTMP_AMF_ARRAY_NULL
 0x06

	)

22 
	#NGX_RTMP_AMF_MIXED_ARRAY
 0x08

	)

23 
	#NGX_RTMP_AMF_END
 0x09

	)

24 
	#NGX_RTMP_AMF_ARRAY
 0x0a

	)

27 
	#NGX_RTMP_AMF_INT8
 0x0100

	)

28 
	#NGX_RTMP_AMF_INT16
 0x0101

	)

29 
	#NGX_RTMP_AMF_INT32
 0x0102

	)

30 
	#NGX_RTMP_AMF_VARIANT_
 0x0103

	)

33 
	#NGX_RTMP_AMF_OPTIONAL
 0x1000

	)

34 
	#NGX_RTMP_AMF_TYPELESS
 0x2000

	)

35 
	#NGX_RTMP_AMF_CONTEXT
 0x4000

	)

37 
	#NGX_RTMP_AMF_VARIANT
 (
NGX_RTMP_AMF_VARIANT_
\

38 |
NGX_RTMP_AMF_TYPELESS
)

	)

42 
ngx_öt_t
 
	mty≥
;

43 
ngx_°r_t
 
	m«me
;

44 *
	md©a
;

45 
size_t
 
	mÀn
;

46 } 
	tngx_πmp_amf_ñt_t
;

49 
	gngx_chaö_t
 * (*
	tngx_πmp_amf_Æloc_±
)(*
	t¨g
);

53 
ngx_chaö_t
 *
	mlök
, *
	mfú°
;

54 
size_t
 
	moff£t
;

55 
ngx_πmp_amf_Æloc_±
 
	mÆloc
;

56 *
	m¨g
;

57 
ngx_log_t
 *
	mlog
;

58 } 
	tngx_πmp_amf_˘x_t
;

62 
ngx_öt_t
 
ngx_πmp_amf_ªad
(
ngx_πmp_amf_˘x_t
 *
˘x
,

63 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
);

66 
ngx_öt_t
 
ngx_πmp_amf_wrôe
(
ngx_πmp_amf_˘x_t
 *
˘x
,

67 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_auto_push_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_cmd_moduÀ.h
"

10 
	~"ngx_πmp_ªœy_moduÀ.h
"

13 
ngx_πmp_publish_±
 
	g√xt_publish
;

14 
ngx_πmp_dñëe_°ªam_±
 
	g√xt_dñëe_°ªam
;

17 
ngx_öt_t
 
ngx_πmp_auto_push_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_πmp_auto_push_exô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
);

19 * 
ngx_πmp_auto_push_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cf
);

20 * 
ngx_πmp_auto_push_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

21 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

22 
ngx_öt_t
 
ngx_πmp_auto_push_publish
(
ngx_πmp_£ssi⁄_t
 *
s
,

23 
ngx_πmp_publish_t
 *
v
);

24 
ngx_öt_t
 
ngx_πmp_auto_push_dñëe_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
,

25 
ngx_πmp_dñëe_°ªam_t
 *
v
);

29 
ngx_πmp_auto_push_˘x_s
 
	tngx_πmp_auto_push_˘x_t
;

31 
	sngx_πmp_auto_push_˘x_s
 {

32 
ngx_öt_t
 *
	m¶Ÿs
;

33 
u_ch¨
 
	m«me
[
NGX_RTMP_MAX_NAME
];

34 
u_ch¨
 
	m¨gs
[
NGX_RTMP_MAX_ARGS
];

35 
ngx_evít_t
 
	mpush_evt
;

40 
ngx_Êag_t
 
	mauto_push
;

41 
ngx_°r_t
 
	msockë_dú
;

42 
ngx_m£c_t
 
	mpush_ªc⁄√˘
;

43 } 
	tngx_πmp_auto_push_c⁄f_t
;

46 
ngx_comm™d_t
 
	gngx_πmp_auto_push_comm™ds
[] = {

48 { 
ngx_°rög
("rtmp_auto_push"),

49 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_Êag_¶Ÿ
,

52 
off£tof
(
ngx_πmp_auto_push_c⁄f_t
, 
auto_push
),

53 
NULL
 },

55 { 
ngx_°rög
("rtmp_auto_push_reconnect"),

56 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

57 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
off£tof
(
ngx_πmp_auto_push_c⁄f_t
, 
push_ªc⁄√˘
),

60 
NULL
 },

62 { 
ngx_°rög
("rtmp_socket_dir"),

63 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_c⁄f_£t_°r_¶Ÿ
,

66 
off£tof
(
ngx_πmp_auto_push_c⁄f_t
, 
sockë_dú
),

67 
NULL
 },

69 
ngx_nuŒ_comm™d


73 
ngx_c‹e_moduÀ_t
 
	gngx_πmp_auto_push_moduÀ_˘x
 = {

74 
ngx_°rög
("rtmp_auto_push"),

75 
ngx_πmp_auto_push_¸óã_c⁄f
,

76 
ngx_πmp_auto_push_öô_c⁄f


80 
ngx_moduÀ_t
 
	gngx_πmp_auto_push_moduÀ
 = {

81 
NGX_MODULE_V1
,

82 &
ngx_πmp_auto_push_moduÀ_˘x
,

83 
ngx_πmp_auto_push_comm™ds
,

84 
NGX_CORE_MODULE
,

85 
NULL
,

86 
NULL
,

87 
ngx_πmp_auto_push_öô_¥o˚ss
,

88 
NULL
,

89 
NULL
,

90 
ngx_πmp_auto_push_exô_¥o˚ss
,

91 
NULL
,

92 
NGX_MODULE_V1_PADDING


96 
	#NGX_RTMP_AUTO_PUSH_SOCKNAME
 "ngöx-πmp"

	)

99 
ngx_öt_t


100 
	$ngx_πmp_auto_push_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
)

102 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

103 
ngx_πmp_auto_push_c⁄f_t
 *
≠cf
;

104 
ngx_li°íög_t
 *
ls
, *
lss
;

105 
sockaddr_un
 *
ßun
;

106 
ªu£addr
;

107 
ngx_sockë_t
 
s
;

108 
size_t
 
n
;

109 
ngx_fûe_öfo_t
 
fi
;

111 i‡(
ngx_¥o˚ss
 !
NGX_PROCESS_WORKER
) {

112  
NGX_OK
;

115 
≠cf
 = (
ngx_πmp_auto_push_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

116 
ngx_πmp_auto_push_moduÀ
);

117 i‡(
≠cf
->
auto_push
 == 0) {

118  
NGX_OK
;

121 
√xt_publish
 = 
ngx_πmp_publish
;

122 
ngx_πmp_publish
 = 
ngx_πmp_auto_push_publish
;

124 
√xt_dñëe_°ªam
 = 
ngx_πmp_dñëe_°ªam
;

125 
ngx_πmp_dñëe_°ªam
 = 
ngx_πmp_auto_push_dñëe_°ªam
;

127 
ªu£addr
 = 1;

128 
s
 = (
ngx_sockë_t
) -1;

130 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
cy˛e
->
log
, 0,

134 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

135 
lss
 = 
NULL
;

136 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
; ++n, ++
ls
) {

137 i‡(
ls
->
h™dÀr
 =
ngx_πmp_öô_c⁄√˘i⁄
) {

138 
lss
 = 
ls
;

143 i‡(
lss
 =
NULL
) {

144  
NGX_OK
;

147 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

148 i‡(
ls
 =
NULL
) {

149  
NGX_ERROR
;

152 *
ls
 = *
lss
;

157 
ls
->
addr_¡›
 = 0;

159 
ls
->
sockÀn
 = (
sockaddr_un
);

160 
ßun
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, 
ls
->
sockÀn
);

161 
ls
->
sockaddr
 = (sockadd∏*Ë
ßun
;

162 i‡(
ls
->
sockaddr
 =
NULL
) {

163  
NGX_ERROR
;

165 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

166 *
	`ngx_¢¥ötf
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, (saun->sun_path),

167 "%V/" 
NGX_RTMP_AUTO_PUSH_SOCKNAME
 ".%i",

168 &
≠cf
->
sockë_dú
, 
ngx_¥o˚ss_¶Ÿ
)

171 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
cy˛e
->
log
, 0,

173 
ßun
->
sun_∑th
);

175 i‡(
	`ngx_fûe_öfo
(
ßun
->
sun_∑th
, &
fi
Ë!
ENOENT
) {

176 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
cy˛e
->
log
, 0,

178 
ßun
->
sun_∑th
);

179 
	`ngx_dñëe_fûe
(
ßun
->
sun_∑th
);

182 
	`ngx_°r_£t
(&
ls
->
addr_ãxt
, "worker_socket");

184 
s
 = 
	`ngx_sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

185 i‡(
s
 == -1) {

186 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

187 
ngx_sockë_n
 " worker_socket failed");

188  
NGX_ERROR
;

191 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

192 (c⁄° *Ë&
ªu£addr
, ())

195 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

197 
sock_îr‹
;

200 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
)) {

201 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

202 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

203 
ngx_n⁄blockög_n
 " worker_socket failed");

204  
NGX_ERROR
;

208 i‡(
	`böd
(
s
, (
sockaddr
 *Ë
ßun
, (*saun)) == -1) {

209 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

210 
ngx_n⁄blockög_n
 " worker_socket bind failed");

211 
sock_îr‹
;

214 i‡(
	`li°í
(
s
, 
NGX_LISTEN_BACKLOG
) == -1) {

215 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

217 
NGX_LISTEN_BACKLOG
);

218 
sock_îr‹
;

221 
ls
->
fd
 = 
s
;

222 
ls
->
li°í
 = 1;

224  
NGX_OK
;

226 
sock_îr‹
:

227 i‡(
s
 !(
ngx_sockë_t
Ë-1 && 
	`ngx_˛o£_sockë
(s) == -1) {

228 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

229 
ngx_˛o£_sockë_n
 " worker_socket failed");

231 
	`ngx_dñëe_fûe
(
ßun
->
sun_∑th
);

233  
NGX_ERROR
;

237  
NGX_OK
;

240 
	}
}

244 
	$ngx_πmp_auto_push_exô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
)

246 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

247 
ngx_πmp_auto_push_c⁄f_t
 *
≠cf
;

248 
u_ch¨
 
∑th
[
NGX_MAX_PATH
];

250 
≠cf
 = (
ngx_πmp_auto_push_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

251 
ngx_πmp_auto_push_moduÀ
);

252 i‡(
≠cf
->
auto_push
 == 0) {

255 *
	`ngx_¢¥ötf
(
∑th
, (path),

256 "%V/" 
NGX_RTMP_AUTO_PUSH_SOCKNAME
 ".%i",

257 &
≠cf
->
sockë_dú
, 
ngx_¥o˚ss_¶Ÿ
)

260 
	`ngx_dñëe_fûe
(
∑th
);

263 
	}
}

267 
	$ngx_πmp_auto_push_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

269 
ngx_πmp_auto_push_c⁄f_t
 *
≠cf
;

271 
≠cf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_πmp_auto_push_c⁄f_t
));

272 i‡(
≠cf
 =
NULL
) {

273  
NULL
;

276 
≠cf
->
auto_push
 = 
NGX_CONF_UNSET
;

277 
≠cf
->
push_ªc⁄√˘
 = 
NGX_CONF_UNSET_MSEC
;

279  
≠cf
;

280 
	}
}

284 
	$ngx_πmp_auto_push_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

286 
ngx_πmp_auto_push_c⁄f_t
 *
≠cf
 = 
c⁄f
;

288 
	`ngx_c⁄f_öô_vÆue
(
≠cf
->
auto_push
, 0);

289 
	`ngx_c⁄f_öô_m£c_vÆue
(
≠cf
->
push_ªc⁄√˘
, 100);

291 i‡(
≠cf
->
sockë_dú
.
Àn
 == 0) {

292 
	`ngx_°r_£t
(&
≠cf
->
sockë_dú
, "/tmp");

295  
NGX_CONF_OK
;

296 
	}
}

299 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

301 
	$ngx_πmp_auto_push_ªc⁄√˘
(
ngx_evít_t
 *
ev
)

303 
ngx_πmp_£ssi⁄_t
 *
s
 = 
ev
->
d©a
;

305 
ngx_πmp_auto_push_c⁄f_t
 *
≠cf
;

306 
ngx_πmp_auto_push_˘x_t
 *
˘x
;

307 
ngx_öt_t
 *
¶Ÿ
;

308 
ngx_öt_t
 
n
;

309 
ngx_πmp_ªœy_èrgë_t
 
©
;

310 
u_ch¨
 
∑th
[("unix:"Ë+ 
NGX_MAX_PATH
];

311 
u_ch¨
 
Êash_vî
[("APSH ,") +

312 
NGX_INT_T_LEN
 * 2];

313 
u_ch¨
 
∂ay_∑th
[
NGX_RTMP_MAX_NAME
];

314 
ngx_°r_t
 
«me
;

315 
u_ch¨
 *
p
;

316 
ngx_°r_t
 *
u
;

317 
ngx_pid_t
 
pid
;

318 
ngx_öt_t
 
≈ushed
;

319 
ngx_c‹e_c⁄f_t
 *
ccf
;

320 
ngx_fûe_öfo_t
 
fi
;

322 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

325 
≠cf
 = (
ngx_πmp_auto_push_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

326 
ngx_πmp_auto_push_moduÀ
);

327 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_auto_push_moduÀ
);

328 i‡(
˘x
 =
NULL
) {

332 
«me
.
d©a
 = 
˘x
->name;

333 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

335 
	`ngx_memzîo
(&
©
, (at));

336 
	`ngx_°r_£t
(&
©
.
∑ge_uæ
, "nginx-auto-push");

337 
©
.
èg
 = &
ngx_πmp_auto_push_moduÀ
;

339 i‡(
˘x
->
¨gs
[0]) {

340 
©
.
∂ay_∑th
.
d©a
 =Ölay_path;

341 
©
.
∂ay_∑th
.
Àn
 = 
	`ngx_¢¥ötf
(play_path, (play_path),

342 "%s?%s", 
˘x
->
«me
, ctx->
¨gs
) -

343 
∂ay_∑th
;

346 
¶Ÿ
 = 
˘x
->
¶Ÿs
;

347 
≈ushed
 = 0;

349 
n
 = 0;Ç < 
NGX_MAX_PROCESSES
; ++n, ++
¶Ÿ
) {

350 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
) {

354 
pid
 = 
ngx_¥o˚s£s
[
n
].pid;

355 i‡(
pid
 =0 ||Öid =
NGX_INVALID_PID
) {

359 i‡(*
¶Ÿ
) {

360 
≈ushed
++;

364 
©
.
d©a
 = &
ngx_¥o˚s£s
[
n
];

366 
	`ngx_memzîo
(&
©
.
uæ
, (at.url));

367 
u
 = &
©
.
uæ
.url;

368 
p
 = 
	`ngx_¢¥ötf
(
∑th
, (path) - 1,

369 "unix:%V/" 
NGX_RTMP_AUTO_PUSH_SOCKNAME
 ".%i",

370 &
≠cf
->
sockë_dú
, 
n
);

371 *
p
 = 0;

373 i‡(
	`ngx_fûe_öfo
(
∑th
 + ("unix:"Ë- 1, &
fi
Ë!
NGX_OK
) {

374 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

375 "auto_push: " 
ngx_fûe_öfo_n
 " failed: "

377 
n
, 
pid
, 
∑th
, 
u
, 
˘x
->
«me
);

381 
u
->
d©a
 = 
∑th
;

382 
u
->
Àn
 = 
p
 - 
∑th
;

383 i‡(
	`ngx_∑r£_uæ
(
s
->
c⁄√˘i⁄
->
poﬁ
, &
©
.
uæ
Ë!
NGX_OK
) {

384 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

387 
u
, 
˘x
->
«me
);

391 
p
 = 
	`ngx_¢¥ötf
(
Êash_vî
, (flash_ver) - 1, "APSH %i,%i",

392 (
ngx_öt_t
Ë
ngx_¥o˚ss_¶Ÿ
, (ngx_öt_tË
ngx_pid
);

393 
©
.
Êash_vî
.
d©a
 = flash_ver;

394 
©
.
Êash_vî
.
Àn
 = 
p
 - flash_ver;

396 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

398 
n
, 
pid
, 
∑th
, 
˘x
->
«me
);

400 i‡(
	`ngx_πmp_ªœy_push
(
s
, &
«me
, &
©
Ë=
NGX_OK
) {

401 *
¶Ÿ
 = 1;

402 
≈ushed
++;

406 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

409 
n
, 
pid
, 
∑th
, 
u
, 
˘x
->
«me
);

412 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

413 
ngx_c‹e_moduÀ
);

415 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

417 
≈ushed
, 
ccf
->
w‹kî_¥o˚s£s
,

418 
ccf
->
w‹kî_¥o˚s£s
 - 1 - 
≈ushed
);

420 i‡(
ccf
->
w‹kî_¥o˚s£s
 =
≈ushed
 + 1) {

426 
¶Ÿ
 = 
˘x
->
¶Ÿs
;

428 
n
 = 0;Ç < 
NGX_MAX_PROCESSES
; ++n, ++
¶Ÿ
) {

429 
pid
 = 
ngx_¥o˚s£s
[
n
].pid;

431 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
 || *
¶Ÿ
 == 1 ||

432 
pid
 =0 ||Öid =
NGX_INVALID_PID
)

437 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

439 
n
, 
pid
, 
˘x
->
«me
);

442 i‡(!
˘x
->
push_evt
.
timî_£t
) {

443 
	`ngx_add_timî
(&
˘x
->
push_evt
, 
≠cf
->
push_ªc⁄√˘
);

445 
	}
}

448 
ngx_öt_t


449 
	$ngx_πmp_auto_push_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

451 
ngx_πmp_auto_push_c⁄f_t
 *
≠cf
;

452 
ngx_πmp_auto_push_˘x_t
 *
˘x
;

454 i‡(
s
->
auto_pushed
 || (s->
ªœy
 && !s->
°©ic_ªœy
)) {

455 
√xt
;

458 
≠cf
 = (
ngx_πmp_auto_push_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

459 
ngx_πmp_auto_push_moduÀ
);

460 i‡(
≠cf
->
auto_push
 == 0) {

461 
√xt
;

464 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_auto_push_moduÀ
);

465 i‡(
˘x
 =
NULL
) {

466 
˘x
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

467 (
ngx_πmp_auto_push_˘x_t
));

468 i‡(
˘x
 =
NULL
) {

469 
√xt
;

471 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_auto_push_moduÀ
);

474 
	`ngx_memzîo
(
˘x
, (*ctx));

476 
˘x
->
push_evt
.
d©a
 = 
s
;

477 
˘x
->
push_evt
.
log
 = 
s
->
c⁄√˘i⁄
->log;

478 
˘x
->
push_evt
.
h™dÀr
 = 
ngx_πmp_auto_push_ªc⁄√˘
;

480 
˘x
->
¶Ÿs
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

481 (
ngx_öt_t
Ë* 
NGX_MAX_PROCESSES
);

482 i‡(
˘x
->
¶Ÿs
 =
NULL
) {

483 
√xt
;

486 
	`ngx_mem˝y
(
˘x
->
«me
, 
v
->name, (ctx->name));

487 
	`ngx_mem˝y
(
˘x
->
¨gs
, 
v
->args, (ctx->args));

489 
	`ngx_πmp_auto_push_ªc⁄√˘
(&
˘x
->
push_evt
);

491 
√xt
:

492  
	`√xt_publish
(
s
, 
v
);

493 
	}
}

496 
ngx_öt_t


497 
	$ngx_πmp_auto_push_dñëe_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
,

498 
ngx_πmp_dñëe_°ªam_t
 *
v
)

500 
ngx_πmp_auto_push_c⁄f_t
 *
≠cf
;

501 
ngx_πmp_auto_push_˘x_t
 *
˘x
, *
p˘x
;

502 
ngx_πmp_ªœy_˘x_t
 *
r˘x
;

503 
ngx_öt_t
 
¶Ÿ
;

505 
≠cf
 = (
ngx_πmp_auto_push_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

506 
ngx_πmp_auto_push_moduÀ
);

507 i‡(
≠cf
->
auto_push
 == 0) {

508 
√xt
;

511 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_auto_push_moduÀ
);

512 i‡(
˘x
) {

513 i‡(
˘x
->
push_evt
.
timî_£t
) {

514 
	`ngx_dñ_timî
(&
˘x
->
push_evt
);

516 
√xt
;

520 
r˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

521 i‡(
r˘x
 =
NULL
 ||

522 
r˘x
->
èg
 !&
ngx_πmp_auto_push_moduÀ
 ||

523 
r˘x
->
publish
 =
NULL
)

525 
√xt
;

528 
¶Ÿ
 = (
ngx_¥o˚ss_t
 *Ë
r˘x
->
d©a
 - &
ngx_¥o˚s£s
[0];

530 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

532 
¶Ÿ
, &
r˘x
->
≠p
, &r˘x->
«me
);

534 
p˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
r˘x
->
publish
->
£ssi⁄
,

535 
ngx_πmp_auto_push_moduÀ
);

536 i‡(
p˘x
 =
NULL
) {

537 
√xt
;

540 
p˘x
->
¶Ÿs
[
¶Ÿ
] = 0;

543 i‡(!
p˘x
->
push_evt
.
timî_£t
) {

544 
	`ngx_add_timî
(&
p˘x
->
push_evt
, 
≠cf
->
push_ªc⁄√˘
);

547 
√xt
:

548  
	`√xt_dñëe_°ªam
(
s
, 
v
);

549 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bandwidth.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_b™dwidth.h
"

13 
	$ngx_πmp_upd©e_b™dwidth
(
ngx_πmp_b™dwidth_t
 *
bw
, 
uöt32_t
 
byãs
)

15 i‡(
ngx_ˇched_time
->
£c
 > 
bw
->
öé_íd
) {

16 
bw
->
b™dwidth
 = 
ngx_ˇched_time
->
£c
 >

17 
bw
->
öé_íd
 + 
NGX_RTMP_BANDWIDTH_INTERVAL


19 : 
bw
->
öé_byãs
 / 
NGX_RTMP_BANDWIDTH_INTERVAL
;

20 
bw
->
öé_byãs
 = 0;

21 
bw
->
öé_íd
 = 
ngx_ˇched_time
->
£c
 + 
NGX_RTMP_BANDWIDTH_INTERVAL
;

24 
bw
->
byãs
 += bytes;

25 
bw
->
öé_byãs
 +
byãs
;

26 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bandwidth.h

7 #i‚de‡
_NGX_RTMP_BANDWIDTH_H_INCLUDED_


8 
	#_NGX_RTMP_BANDWIDTH_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

16 
	#NGX_RTMP_BANDWIDTH_INTERVAL
 10

	)

20 
uöt64_t
 
	mbyãs
;

21 
uöt64_t
 
	mb™dwidth
;

23 
time_t
 
	möé_íd
;

24 
uöt64_t
 
	möé_byãs
;

25 } 
	tngx_πmp_b™dwidth_t
;

28 
ngx_πmp_upd©e_b™dwidth
(
ngx_πmp_b™dwidth_t
 *
bw
, 
uöt32_t
 
byãs
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bitop.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_bô›.h
"

13 
	$ngx_πmp_bô_öô_ªadî
(
ngx_πmp_bô_ªadî_t
 *
br
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

15 
	`ngx_memzîo
(
br
, (
ngx_πmp_bô_ªadî_t
));

17 
br
->
pos
 =Öos;

18 
br
->
œ°
 =Üast;

19 
	}
}

22 
uöt64_t


23 
	$ngx_πmp_bô_ªad
(
ngx_πmp_bô_ªadî_t
 *
br
, 
ngx_uöt_t
 
n
)

25 
uöt64_t
 
v
;

26 
ngx_uöt_t
 
d
;

28 
v
 = 0;

30 
n
) {

32 i‡(
br
->
pos
 >br->
œ°
) {

33 
br
->
îr
 = 1;

37 
d
 = (
br
->
offs
 + 
n
 > 8 ? (
ngx_uöt_t
) (8 - br->offs) :Ç);

39 
v
 <<
d
;

40 
v
 +(*
br
->
pos
 >> (8 - br->
offs
 - 
d
)Ë& ((
u_ch¨
) 0xff >> (8 - d));

42 
br
->
offs
 +
d
;

43 
n
 -
d
;

45 i‡(
br
->
offs
 == 8) {

46 
br
->
pos
++;

47 
br
->
offs
 = 0;

51  
v
;

52 
	}
}

55 
uöt64_t


56 
	$ngx_πmp_bô_ªad_gﬁomb
(
ngx_πmp_bô_ªadî_t
 *
br
)

58 
ngx_uöt_t
 
n
;

60 
n
 = 0; 
	`ngx_πmp_bô_ªad
(
br
, 1Ë=0 && !br->
îr
;Ç++);

62  ((
uöt64_t
Ë1 << 
n
Ë+ 
	`ngx_πmp_bô_ªad
(
br
,Ç) - 1;

63 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bitop.h

7 #i‚de‡
_NGX_RTMP_BITOP_H_INCLUDED_


8 
	#_NGX_RTMP_BITOP_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

16 
u_ch¨
 *
	mpos
;

17 
u_ch¨
 *
	mœ°
;

18 
ngx_uöt_t
 
	moffs
;

19 
ngx_uöt_t
 
	mîr
;

20 } 
	tngx_πmp_bô_ªadî_t
;

23 
ngx_πmp_bô_öô_ªadî
(
ngx_πmp_bô_ªadî_t
 *
br
, 
u_ch¨
 *
pos
,

24 
u_ch¨
 *
œ°
);

25 
uöt64_t
 
ngx_πmp_bô_ªad
(
ngx_πmp_bô_ªadî_t
 *
br
, 
ngx_uöt_t
 
n
);

26 
uöt64_t
 
ngx_πmp_bô_ªad_gﬁomb
(
ngx_πmp_bô_ªadî_t
 *
br
);

29 
	#ngx_πmp_bô_ªad_îr
(
br
Ë((br)->
îr
)

	)

31 
	#ngx_πmp_bô_ªad_eof
(
br
Ë((br)->
pos
 =(br)->
œ°
)

	)

33 
	#ngx_πmp_bô_ªad_8
(
br
) \

34 ((
uöt8_t
Ë
	`ngx_πmp_bô_ªad
(
br
, 8))

	)

36 
	#ngx_πmp_bô_ªad_16
(
br
) \

37 ((
uöt16_t
Ë
	`ngx_πmp_bô_ªad
(
br
, 16))

	)

39 
	#ngx_πmp_bô_ªad_32
(
br
) \

40 ((
uöt32_t
Ë
	`ngx_πmp_bô_ªad
(
br
, 32))

	)

42 
	#ngx_πmp_bô_ªad_64
(
br
) \

43 ((
uöt64_t
Ë
	`ngx_πmp_ªad
(
br
, 64))

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_cmd_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_cmd_moduÀ.h
"

10 
	~"ngx_πmp_°ªams.h
"

13 
	#NGX_RTMP_FMS_VERSION
 "FMS/3,0,1,123"

	)

14 
	#NGX_RTMP_CAPABILITIES
 31

	)

17 
ngx_öt_t
 
ngx_πmp_cmd_c⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
,

18 
ngx_πmp_c⁄√˘_t
 *
v
);

19 
ngx_öt_t
 
ngx_πmp_cmd_disc⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
);

20 
ngx_öt_t
 
ngx_πmp_cmd_¸óã_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
,

21 
ngx_πmp_¸óã_°ªam_t
 *
v
);

22 
ngx_öt_t
 
ngx_πmp_cmd_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
,

23 
ngx_πmp_˛o£_°ªam_t
 *
v
);

24 
ngx_öt_t
 
ngx_πmp_cmd_dñëe_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
,

25 
ngx_πmp_dñëe_°ªam_t
 *
v
);

26 
ngx_öt_t
 
ngx_πmp_cmd_publish
(
ngx_πmp_£ssi⁄_t
 *
s
,

27 
ngx_πmp_publish_t
 *
v
);

28 
ngx_öt_t
 
ngx_πmp_cmd_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
,

29 
ngx_πmp_∂ay_t
 *
v
);

30 
ngx_öt_t
 
ngx_πmp_cmd_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
,

31 
ngx_πmp_£ek_t
 *
v
);

32 
ngx_öt_t
 
ngx_πmp_cmd_∑u£
(
ngx_πmp_£ssi⁄_t
 *
s
,

33 
ngx_πmp_∑u£_t
 *
v
);

36 
ngx_öt_t
 
ngx_πmp_cmd_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
,

37 
ngx_πmp_°ªam_begö_t
 *
v
);

38 
ngx_öt_t
 
ngx_πmp_cmd_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
,

39 
ngx_πmp_°ªam_eof_t
 *
v
);

40 
ngx_öt_t
 
ngx_πmp_cmd_°ªam_dry
(
ngx_πmp_£ssi⁄_t
 *
s
,

41 
ngx_πmp_°ªam_dry_t
 *
v
);

42 
ngx_öt_t
 
ngx_πmp_cmd_ªc‹ded
(
ngx_πmp_£ssi⁄_t
 *
s
,

43 
ngx_πmp_ªc‹ded_t
 *
v
);

44 
ngx_öt_t
 
ngx_πmp_cmd_£t_buÊí
(
ngx_πmp_£ssi⁄_t
 *
s
,

45 
ngx_πmp_£t_buÊí_t
 *
v
);

48 
ngx_πmp_c⁄√˘_±
 
	gngx_πmp_c⁄√˘
;

49 
ngx_πmp_disc⁄√˘_±
 
	gngx_πmp_disc⁄√˘
;

50 
ngx_πmp_¸óã_°ªam_±
 
	gngx_πmp_¸óã_°ªam
;

51 
ngx_πmp_˛o£_°ªam_±
 
	gngx_πmp_˛o£_°ªam
;

52 
ngx_πmp_dñëe_°ªam_±
 
	gngx_πmp_dñëe_°ªam
;

53 
ngx_πmp_publish_±
 
	gngx_πmp_publish
;

54 
ngx_πmp_∂ay_±
 
	gngx_πmp_∂ay
;

55 
ngx_πmp_£ek_±
 
	gngx_πmp_£ek
;

56 
ngx_πmp_∑u£_±
 
	gngx_πmp_∑u£
;

59 
ngx_πmp_°ªam_begö_±
 
	gngx_πmp_°ªam_begö
;

60 
ngx_πmp_°ªam_eof_±
 
	gngx_πmp_°ªam_eof
;

61 
ngx_πmp_°ªam_dry_±
 
	gngx_πmp_°ªam_dry
;

62 
ngx_πmp_ªc‹ded_±
 
	gngx_πmp_ªc‹ded
;

63 
ngx_πmp_£t_buÊí_±
 
	gngx_πmp_£t_buÊí
;

66 
ngx_öt_t
 
ngx_πmp_cmd_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

69 
ngx_πmp_moduÀ_t
 
	gngx_πmp_cmd_moduÀ_˘x
 = {

70 
NULL
,

71 
ngx_πmp_cmd_po°c⁄figuøti⁄
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL


81 
ngx_moduÀ_t
 
	gngx_πmp_cmd_moduÀ
 = {

82 
NGX_MODULE_V1
,

83 &
ngx_πmp_cmd_moduÀ_˘x
,

84 
NULL
,

85 
NGX_RTMP_MODULE
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
NULL
,

93 
NGX_MODULE_V1_PADDING


98 
	$ngx_πmp_cmd_fûl_¨gs
(
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
],

99 
u_ch¨
 
¨gs
[
NGX_RTMP_MAX_ARGS
])

101 
u_ch¨
 *
p
;

103 
p
 = (
u_ch¨
 *)
	`ngx_°rchr
(
«me
, '?');

104 i‡(
p
 =
NULL
) {

108 *
p
++ = 0;

109 
	`ngx_˝y°∫
(
¨gs
, 
p
, 
NGX_RTMP_MAX_ARGS
);

110 
	}
}

113 
ngx_öt_t


114 
	$ngx_πmp_cmd_c⁄√˘_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

115 
ngx_chaö_t
 *
ö
)

117 
size_t
 
Àn
;

119 
ngx_πmp_c⁄√˘_t
 
v
;

121 
ngx_πmp_amf_ñt_t
 
ö_cmd
[] = {

123 { 
NGX_RTMP_AMF_STRING
,

124 
	`ngx_°rög
("app"),

125 
v
.
≠p
, (v.app) },

127 { 
NGX_RTMP_AMF_STRING
,

128 
	`ngx_°rög
("flashVer"),

129 
v
.
Êashvî
, (v.flashver) },

131 { 
NGX_RTMP_AMF_STRING
,

132 
	`ngx_°rög
("swfUrl"),

133 
v
.
swf_uæ
, (v.swf_url) },

135 { 
NGX_RTMP_AMF_STRING
,

136 
	`ngx_°rög
("tcUrl"),

137 
v
.
tc_uæ
, (v.tc_url) },

139 { 
NGX_RTMP_AMF_NUMBER
,

140 
	`ngx_°rög
("audioCodecs"),

141 &
v
.
acodecs
, (v.acodecs) },

143 { 
NGX_RTMP_AMF_NUMBER
,

144 
	`ngx_°rög
("videoCodecs"),

145 &
v
.
vcodecs
, (v.vcodecs) },

147 { 
NGX_RTMP_AMF_STRING
,

148 
	`ngx_°rög
("pageUrl"),

149 
v
.
∑ge_uæ
, (v.page_url) },

151 { 
NGX_RTMP_AMF_NUMBER
,

152 
	`ngx_°rög
("objectEncoding"),

153 &
v
.
obje˘_ícodög
, 0},

156 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

158 { 
NGX_RTMP_AMF_NUMBER
,

159 
ngx_nuŒ_°rög
,

160 &
v
.
å™s
, 0 },

162 { 
NGX_RTMP_AMF_OBJECT
,

163 
ngx_nuŒ_°rög
,

164 
ö_cmd
, (in_cmd) },

167 
	`ngx_memzîo
(&
v
, (v));

168 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

169 (
ö_ñts
) / (in_elts[0])))

171  
NGX_ERROR
;

174 
Àn
 = 
	`ngx_°æí
(
v
.
≠p
);

175 i‡(
Àn
 > 10 && !
	`ngx_memcmp
(
v
.
≠p
 +Üen - 10, "/_definst_", 10)) {

176 
v
.
≠p
[
Àn
 - 10] = 0;

177 } i‡(
Àn
 && 
v
.
≠p
[len - 1] == '/') {

178 
v
.
≠p
[
Àn
 - 1] = 0;

181 
	`ngx_πmp_cmd_fûl_¨gs
(
v
.
≠p
, v.
¨gs
);

184 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

188 
v
.
≠p
, v.
¨gs
, v.
Êashvî
, v.
swf_uæ
, v.
tc_uæ
, v.
∑ge_uæ
,

189 (
uöt32_t
)
v
.
acodecs
, (uöt32_t)v.
vcodecs
,

190 (
ngx_öt_t
)
v
.
obje˘_ícodög
);

194  
	`ngx_πmp_c⁄√˘
(
s
, &
v
);

195 
	}
}

198 
ngx_öt_t


199 
	$ngx_πmp_cmd_c⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_c⁄√˘_t
 *
v
)

201 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

202 
ngx_πmp_c‹e_≠p_c⁄f_t
 **
ˇcÂ
;

203 
ngx_uöt_t
 
n
;

204 
ngx_πmp_hódî_t
 
h
;

205 
u_ch¨
 *
p
;

207 
å™s
;

208 
ˇ∑bûôõs
 = 
NGX_RTMP_CAPABILITIES
;

209 
obje˘_ícodög
 = 0;

211 
ngx_πmp_amf_ñt_t
 
out_obj
[] = {

213 { 
NGX_RTMP_AMF_STRING
,

214 
	`ngx_°rög
("fmsVer"),

215 
NGX_RTMP_FMS_VERSION
, 0 },

217 { 
NGX_RTMP_AMF_NUMBER
,

218 
	`ngx_°rög
("capabilities"),

219 &
ˇ∑bûôõs
, 0 },

222 
ngx_πmp_amf_ñt_t
 
out_öf
[] = {

224 { 
NGX_RTMP_AMF_STRING
,

225 
	`ngx_°rög
("level"),

228 { 
NGX_RTMP_AMF_STRING
,

229 
	`ngx_°rög
("code"),

232 { 
NGX_RTMP_AMF_STRING
,

233 
	`ngx_°rög
("description"),

236 { 
NGX_RTMP_AMF_NUMBER
,

237 
	`ngx_°rög
("objectEncoding"),

238 &
obje˘_ícodög
, 0 }

241 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

243 { 
NGX_RTMP_AMF_STRING
,

244 
ngx_nuŒ_°rög
,

247 { 
NGX_RTMP_AMF_NUMBER
,

248 
ngx_nuŒ_°rög
,

249 &
å™s
, 0 },

251 { 
NGX_RTMP_AMF_OBJECT
,

252 
ngx_nuŒ_°rög
,

253 
out_obj
, (out_obj) },

255 { 
NGX_RTMP_AMF_OBJECT
,

256 
ngx_nuŒ_°rög
,

257 
out_öf
, (out_inf) },

260 i‡(
s
->
c⁄√˘ed
) {

261 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

263  
NGX_ERROR
;

266 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

268 
å™s
 = 
v
->trans;

271 
s
->
c⁄√˘ed
 = 1;

273 
	`ngx_memzîo
(&
h
, (h));

274 
h
.
csid
 = 
NGX_RTMP_CSID_AMF_INI
;

275 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_CMD
;

278 
	#NGX_RTMP_SET_STRPAR
(
«me
) \

279 
s
->
«me
.
Àn
 = 
	`ngx_°æí
(
v
->name); \

280 
s
->
«me
.
d©a
 = 
	`ngx_∑Œoc
(s->
c⁄√˘i⁄
->
poﬁ
, s->«me.
Àn
); \

281 
	`ngx_mem˝y
(
s
->
«me
.
d©a
, 
v
->«me, s->«me.
Àn
)

	)

283 
	`NGX_RTMP_SET_STRPAR
(
≠p
);

284 
	`NGX_RTMP_SET_STRPAR
(
¨gs
);

285 
	`NGX_RTMP_SET_STRPAR
(
Êashvî
);

286 
	`NGX_RTMP_SET_STRPAR
(
swf_uæ
);

287 
	`NGX_RTMP_SET_STRPAR
(
tc_uæ
);

288 
	`NGX_RTMP_SET_STRPAR
(
∑ge_uæ
);

290 #unde‡
NGX_RTMP_SET_STRPAR


292 
p
 = 
	`ngx_°æchr
(
s
->
≠p
.
d©a
, s->≠p.d©®+ s->≠p.
Àn
, '?');

293 i‡(
p
) {

294 
s
->
≠p
.
Àn
 = (
p
 - s->≠p.
d©a
);

297 
s
->
acodecs
 = (
uöt32_t
Ë
v
->acodecs;

298 
s
->
vcodecs
 = (
uöt32_t
Ë
v
->vcodecs;

301 
ˇcÂ
 = 
cscf
->
≠∂iˇti⁄s
.
ñts
;

302 
n
 = 0;Ç < 
cscf
->
≠∂iˇti⁄s
.
√…s
; ++n, ++
ˇcÂ
) {

303 i‡((*
ˇcÂ
)->
«me
.
Àn
 =
s
->
≠p
.len &&

304 
	`ngx_°∫cmp
((*
ˇcÂ
)->
«me
.
d©a
, 
s
->
≠p
.d©a, s->≠p.
Àn
) == 0)

307 
s
->
≠p_c⁄f
 = (*
ˇcÂ
)->app_conf;

312 i‡(
s
->
≠p_c⁄f
 =
NULL
) {

313 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

314 "c⁄√˘:áµliˇti⁄ÇŸ found: '%V'", &
s
->
≠p
);

315  
NGX_ERROR
;

318 
obje˘_ícodög
 = 
v
->object_encoding;

320  
	`ngx_πmp_£nd_ack_size
(
s
, 
cscf
->
ack_wödow
Ë!
NGX_OK
 ||

321 
	`ngx_πmp_£nd_b™dwidth
(
s
, 
cscf
->
ack_wödow
,

322 
NGX_RTMP_LIMIT_DYNAMIC
Ë!
NGX_OK
 ||

323 
	`ngx_πmp_£nd_chunk_size
(
s
, 
cscf
->
chunk_size
Ë!
NGX_OK
 ||

324 
	`ngx_πmp_£nd_amf
(
s
, &
h
, 
out_ñts
,

325 (
out_ñts
) / (out_elts[0]))

326 !
NGX_OK
 ? 
NGX_ERROR
 : NGX_OK;

327 
	}
}

330 
ngx_öt_t


331 
	$ngx_πmp_cmd_¸óã_°ªam_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

332 
ngx_chaö_t
 *
ö
)

334 
ngx_πmp_¸óã_°ªam_t
 
v
;

336 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

338 { 
NGX_RTMP_AMF_NUMBER
,

339 
ngx_nuŒ_°rög
,

340 &
v
.
å™s
, (v.trans) },

343 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

344 (
ö_ñts
) / (in_elts[0])))

346  
NGX_ERROR
;

349 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0, "createStream");

351  
	`ngx_πmp_¸óã_°ªam
(
s
, &
v
);

352 
	}
}

355 
ngx_öt_t


356 
	$ngx_πmp_cmd_¸óã_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_¸óã_°ªam_t
 *
v
)

359 
°ªam
;

360 
å™s
;

361 
ngx_πmp_hódî_t
 
h
;

363 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

365 { 
NGX_RTMP_AMF_STRING
,

366 
ngx_nuŒ_°rög
,

369 { 
NGX_RTMP_AMF_NUMBER
,

370 
ngx_nuŒ_°rög
,

371 &
å™s
, 0 },

373 { 
NGX_RTMP_AMF_NULL
,

374 
ngx_nuŒ_°rög
,

375 
NULL
, 0 },

377 { 
NGX_RTMP_AMF_NUMBER
,

378 
ngx_nuŒ_°rög
,

379 &
°ªam
, (stream) },

382 
å™s
 = 
v
->trans;

383 
°ªam
 = 
NGX_RTMP_MSID
;

385 
	`ngx_memzîo
(&
h
, (h));

387 
h
.
csid
 = 
NGX_RTMP_CSID_AMF_INI
;

388 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_CMD
;

390  
	`ngx_πmp_£nd_amf
(
s
, &
h
, 
out_ñts
,

391 (
out_ñts
Ë/ (out_ñts[0])Ë=
NGX_OK
 ?

392 
NGX_DONE
 : 
NGX_ERROR
;

393 
	}
}

396 
ngx_öt_t


397 
	$ngx_πmp_cmd_˛o£_°ªam_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

398 
ngx_chaö_t
 *
ö
)

400 
ngx_πmp_˛o£_°ªam_t
 
v
;

402 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

404 { 
NGX_RTMP_AMF_NUMBER
,

405 
ngx_nuŒ_°rög
,

406 &
v
.
°ªam
, 0 },

409 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

410 (
ö_ñts
) / (in_elts[0])))

412  
NGX_ERROR
;

415 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0, "closeStream");

417  
	`ngx_πmp_˛o£_°ªam
(
s
, &
v
);

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_πmp_cmd_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_˛o£_°ªam_t
 *
v
)

424  
NGX_OK
;

425 
	}
}

428 
ngx_öt_t


429 
	$ngx_πmp_cmd_dñëe_°ªam_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

430 
ngx_chaö_t
 *
ö
)

432 
ngx_πmp_dñëe_°ªam_t
 
v
;

434 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

436 { 
NGX_RTMP_AMF_NUMBER
,

437 
ngx_nuŒ_°rög
,

438 
NULL
, 0 },

440 { 
NGX_RTMP_AMF_NULL
,

441 
ngx_nuŒ_°rög
,

442 
NULL
, 0 },

444 { 
NGX_RTMP_AMF_NUMBER
,

445 
ngx_nuŒ_°rög
,

446 &
v
.
°ªam
, 0 },

449 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

450 (
ö_ñts
) / (in_elts[0])))

452  
NGX_ERROR
;

455  
	`ngx_πmp_dñëe_°ªam
(
s
, &
v
);

456 
	}
}

459 
ngx_öt_t


460 
	$ngx_πmp_cmd_dñëe_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_dñëe_°ªam_t
 *
v
)

462 
ngx_πmp_˛o£_°ªam_t
 
cv
;

464 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0, "deleteStream");

466 
cv
.
°ªam
 = 0;

468  
	`ngx_πmp_˛o£_°ªam
(
s
, &
cv
);

469 
	}
}

472 
ngx_öt_t


473 
	$ngx_πmp_cmd_publish_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

474 
ngx_chaö_t
 *
ö
)

476 
ngx_πmp_publish_t
 
v
;

478 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

481 { 
NGX_RTMP_AMF_NUMBER
,

482 
ngx_nuŒ_°rög
,

483 
NULL
, 0 },

485 { 
NGX_RTMP_AMF_NULL
,

486 
ngx_nuŒ_°rög
,

487 
NULL
, 0 },

489 { 
NGX_RTMP_AMF_STRING
,

490 
ngx_nuŒ_°rög
,

491 &
v
.
«me
, (v.name) },

493 { 
NGX_RTMP_AMF_OPTIONAL
 | 
NGX_RTMP_AMF_STRING
,

494 
ngx_nuŒ_°rög
,

495 &
v
.
ty≥
, (v.type) },

498 
	`ngx_memzîo
(&
v
, (v));

500 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

501 (
ö_ñts
) / (in_elts[0])))

503  
NGX_ERROR
;

506 
	`ngx_πmp_cmd_fûl_¨gs
(
v
.
«me
, v.
¨gs
);

508 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

510 
v
.
«me
, v.
¨gs
, v.
ty≥
, v.
sûít
);

512  
	`ngx_πmp_publish
(
s
, &
v
);

513 
	}
}

516 
ngx_öt_t


517 
	$ngx_πmp_cmd_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

519  
NGX_OK
;

520 
	}
}

522 
ngx_öt_t


523 
	$ngx_πmp_cmd_∂ay_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

524 
ngx_chaö_t
 *
ö
)

526 
ngx_πmp_∂ay_t
 
v
;

528 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

531 { 
NGX_RTMP_AMF_NUMBER
,

532 
ngx_nuŒ_°rög
,

533 
NULL
, 0 },

535 { 
NGX_RTMP_AMF_NULL
,

536 
ngx_nuŒ_°rög
,

537 
NULL
, 0 },

539 { 
NGX_RTMP_AMF_STRING
,

540 
ngx_nuŒ_°rög
,

541 &
v
.
«me
, (v.name) },

543 { 
NGX_RTMP_AMF_OPTIONAL
 | 
NGX_RTMP_AMF_NUMBER
,

544 
ngx_nuŒ_°rög
,

545 &
v
.
°¨t
, 0 },

547 { 
NGX_RTMP_AMF_OPTIONAL
 | 
NGX_RTMP_AMF_NUMBER
,

548 
ngx_nuŒ_°rög
,

549 &
v
.
duøti⁄
, 0 },

551 { 
NGX_RTMP_AMF_OPTIONAL
 | 
NGX_RTMP_AMF_BOOLEAN
,

552 
ngx_nuŒ_°rög
,

553 &
v
.
ª£t
, 0 }

556 
	`ngx_memzîo
(&
v
, (v));

558 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

559 (
ö_ñts
) / (in_elts[0])))

561  
NGX_ERROR
;

564 
	`ngx_πmp_cmd_fûl_¨gs
(
v
.
«me
, v.
¨gs
);

566 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

569 
v
.
«me
, v.
¨gs
, (
ngx_öt_t
Ëv.
°¨t
,

570 (
ngx_öt_t
Ë
v
.
duøti⁄
, (ngx_öt_tËv.
ª£t
,

571 (
ngx_öt_t
Ë
v
.
sûít
);

573  
	`ngx_πmp_∂ay
(
s
, &
v
);

574 
	}
}

577 
ngx_öt_t


578 
	$ngx_πmp_cmd_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

580  
NGX_OK
;

581 
	}
}

584 
ngx_öt_t


585 
	$ngx_πmp_cmd_∂ay2_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

586 
ngx_chaö_t
 *
ö
)

588 
ngx_πmp_∂ay_t
 
v
;

589 
ngx_πmp_˛o£_°ªam_t
 
vc
;

591 
ngx_πmp_amf_ñt_t
 
ö_obj
[] = {

593 { 
NGX_RTMP_AMF_NUMBER
,

594 
	`ngx_°rög
("start"),

595 &
v
.
°¨t
, 0 },

597 { 
NGX_RTMP_AMF_STRING
,

598 
	`ngx_°rög
("streamName"),

599 &
v
.
«me
, (v.name) },

602 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

605 { 
NGX_RTMP_AMF_NUMBER
,

606 
ngx_nuŒ_°rög
,

607 
NULL
, 0 },

609 { 
NGX_RTMP_AMF_NULL
,

610 
ngx_nuŒ_°rög
,

611 
NULL
, 0 },

613 { 
NGX_RTMP_AMF_OBJECT
,

614 
ngx_nuŒ_°rög
,

615 &
ö_obj
, (in_obj) }

618 
	`ngx_memzîo
(&
v
, (v));

620 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

621 (
ö_ñts
) / (in_elts[0])))

623  
NGX_ERROR
;

626 
	`ngx_πmp_cmd_fûl_¨gs
(
v
.
«me
, v.
¨gs
);

628 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

630 
v
.
«me
, v.
¨gs
, (
ngx_öt_t
Ëv.
°¨t
);

634 i‡(
v
.
°¨t
 < 0) {

635 
v
.
°¨t
 = 
s
->
cuºít_time
;

638 
	`ngx_memzîo
(&
vc
, (vc));

641 
	`ngx_πmp_˛o£_°ªam
(
s
, &
vc
);

643  
	`ngx_πmp_∂ay
(
s
, &
v
);

644 
	}
}

647 
ngx_öt_t


648 
	$ngx_πmp_cmd_∑u£_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

649 
ngx_chaö_t
 *
ö
)

651 
ngx_πmp_∑u£_t
 
v
;

653 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

655 { 
NGX_RTMP_AMF_NUMBER
,

656 
ngx_nuŒ_°rög
,

657 
NULL
, 0 },

659 { 
NGX_RTMP_AMF_NULL
,

660 
ngx_nuŒ_°rög
,

661 
NULL
, 0 },

663 { 
NGX_RTMP_AMF_BOOLEAN
,

664 
ngx_nuŒ_°rög
,

665 &
v
.
∑u£
, 0 },

667 { 
NGX_RTMP_AMF_NUMBER
,

668 
ngx_nuŒ_°rög
,

669 &
v
.
posôi⁄
, 0 },

672 
	`ngx_memzîo
(&
v
, (v));

674 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

675 (
ö_ñts
) / (in_elts[0])))

677  
NGX_ERROR
;

680 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

682 (
ngx_öt_t
Ë
v
.
∑u£
, (ngx_öt_tËv.
posôi⁄
);

684  
	`ngx_πmp_∑u£
(
s
, &
v
);

685 
	}
}

688 
ngx_öt_t


689 
	$ngx_πmp_cmd_∑u£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∑u£_t
 *
v
)

691  
NGX_OK
;

692 
	}
}

695 
ngx_öt_t


696 
	$ngx_πmp_cmd_disc⁄√˘_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

697 
ngx_chaö_t
 *
ö
)

699 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0, "disconnect");

701  
	`ngx_πmp_disc⁄√˘
(
s
);

702 
	}
}

705 
ngx_öt_t


706 
	$ngx_πmp_cmd_disc⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
)

708  
	`ngx_πmp_dñëe_°ªam
(
s
, 
NULL
);

709 
	}
}

712 
ngx_öt_t


713 
	$ngx_πmp_cmd_£ek_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

714 
ngx_chaö_t
 *
ö
)

716 
ngx_πmp_£ek_t
 
v
;

718 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

721 { 
NGX_RTMP_AMF_NUMBER
,

722 
ngx_nuŒ_°rög
,

723 
NULL
, 0 },

725 { 
NGX_RTMP_AMF_NULL
,

726 
ngx_nuŒ_°rög
,

727 
NULL
, 0 },

729 { 
NGX_RTMP_AMF_NUMBER
,

730 
ngx_nuŒ_°rög
,

731 &
v
.
off£t
, (v.offset) },

734 
	`ngx_memzîo
(&
v
, (v));

736 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

737 (
ö_ñts
) / (in_elts[0])))

739  
NGX_ERROR
;

742 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

743 "£ek: off£t=%i", (
ngx_öt_t
Ë
v
.
off£t
);

745  
	`ngx_πmp_£ek
(
s
, &
v
);

746 
	}
}

749 
ngx_öt_t


750 
	$ngx_πmp_cmd_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_£ek_t
 *
v
)

752  
NGX_OK
;

753 
	}
}

756 
ngx_öt_t


757 
	$ngx_πmp_cmd_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_begö_t
 *
v
)

759  
NGX_OK
;

760 
	}
}

763 
ngx_öt_t


764 
	$ngx_πmp_cmd_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_eof_t
 *
v
)

766  
NGX_OK
;

767 
	}
}

770 
ngx_öt_t


771 
	$ngx_πmp_cmd_°ªam_dry
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_dry_t
 *
v
)

773  
NGX_OK
;

774 
	}
}

777 
ngx_öt_t


778 
	$ngx_πmp_cmd_ªc‹ded
(
ngx_πmp_£ssi⁄_t
 *
s
,

779 
ngx_πmp_ªc‹ded_t
 *
v
)

781  
NGX_OK
;

782 
	}
}

785 
ngx_öt_t


786 
	$ngx_πmp_cmd_£t_buÊí
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_£t_buÊí_t
 *
v
)

788  
NGX_OK
;

789 
	}
}

792 
ngx_πmp_amf_h™dÀr_t
 
	gngx_πmp_cmd_m≠
[] = {

793 { 
ngx_°rög
("c⁄√˘"), 
ngx_πmp_cmd_c⁄√˘_öô
 },

794 { 
ngx_°rög
("¸óãSåóm"), 
ngx_πmp_cmd_¸óã_°ªam_öô
 },

795 { 
ngx_°rög
("˛o£Såóm"), 
ngx_πmp_cmd_˛o£_°ªam_öô
 },

796 { 
ngx_°rög
("dñëeSåóm"), 
ngx_πmp_cmd_dñëe_°ªam_öô
 },

797 { 
ngx_°rög
("publish"), 
ngx_πmp_cmd_publish_öô
 },

798 { 
ngx_°rög
("∂ay"), 
ngx_πmp_cmd_∂ay_öô
 },

799 { 
ngx_°rög
("∂ay2"), 
ngx_πmp_cmd_∂ay2_öô
 },

800 { 
ngx_°rög
("£ek"), 
ngx_πmp_cmd_£ek_öô
 },

801 { 
ngx_°rög
("∑u£"), 
ngx_πmp_cmd_∑u£_öô
 },

802 { 
ngx_°rög
("∑u£øw"), 
ngx_πmp_cmd_∑u£_öô
 },

806 
ngx_öt_t


807 
	$ngx_πmp_cmd_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

809 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

810 
ngx_πmp_h™dÀr_±
 *
h
;

811 
ngx_πmp_amf_h™dÀr_t
 *
ch
, *
bh
;

812 
size_t
 
n
, 
nˇŒs
;

814 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

820 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_DISCONNECT
]);

821 i‡(
h
 =
NULL
) {

822  
NGX_ERROR
;

825 *
h
 = 
ngx_πmp_cmd_disc⁄√˘_öô
;

829 
nˇŒs
 = (
ngx_πmp_cmd_m≠
) / (ngx_rtmp_cmd_map[0]);

831 
ch
 = 
	`ngx_¨øy_push_n
(&
cmcf
->
amf
, 
nˇŒs
);

832 i‡(
ch
 =
NULL
) {

833  
NGX_ERROR
;

836 
bh
 = 
ngx_πmp_cmd_m≠
;

838 
n
 = 0;Ç < 
nˇŒs
; ++n, ++
ch
, ++
bh
) {

839 *
ch
 = *
bh
;

842 
ngx_πmp_c⁄√˘
 = 
ngx_πmp_cmd_c⁄√˘
;

843 
ngx_πmp_disc⁄√˘
 = 
ngx_πmp_cmd_disc⁄√˘
;

844 
ngx_πmp_¸óã_°ªam
 = 
ngx_πmp_cmd_¸óã_°ªam
;

845 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_cmd_˛o£_°ªam
;

846 
ngx_πmp_dñëe_°ªam
 = 
ngx_πmp_cmd_dñëe_°ªam
;

847 
ngx_πmp_publish
 = 
ngx_πmp_cmd_publish
;

848 
ngx_πmp_∂ay
 = 
ngx_πmp_cmd_∂ay
;

849 
ngx_πmp_£ek
 = 
ngx_πmp_cmd_£ek
;

850 
ngx_πmp_∑u£
 = 
ngx_πmp_cmd_∑u£
;

852 
ngx_πmp_°ªam_begö
 = 
ngx_πmp_cmd_°ªam_begö
;

853 
ngx_πmp_°ªam_eof
 = 
ngx_πmp_cmd_°ªam_eof
;

854 
ngx_πmp_°ªam_dry
 = 
ngx_πmp_cmd_°ªam_dry
;

855 
ngx_πmp_ªc‹ded
 = 
ngx_πmp_cmd_ªc‹ded
;

856 
ngx_πmp_£t_buÊí
 = 
ngx_πmp_cmd_£t_buÊí
;

858  
NGX_OK
;

859 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_cmd_module.h

7 #i‚de‡
_NGX_RTMP_CMD_H_INCLUDED_


8 
	#_NGX_RTMP_CMD_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_evít.h
>

14 
	~"ngx_πmp.h
"

17 
	#NGX_RTMP_MAX_NAME
 256

	)

18 
	#NGX_RTMP_MAX_URL
 256

	)

19 
	#NGX_RTMP_MAX_STREAM_STR
 32*30

	)

20 
	#NGX_RTMP_MAX_ARGS
 
NGX_RTMP_MAX_NAME


	)

26 
	må™s
;

27 
u_ch¨
 
	m≠p
[
NGX_RTMP_MAX_NAME
];

28 
u_ch¨
 
	m¨gs
[
NGX_RTMP_MAX_ARGS
];

29 
u_ch¨
 
	mÊashvî
[32];

30 
u_ch¨
 
	mswf_uæ
[
NGX_RTMP_MAX_URL
];

31 
u_ch¨
 
	mtc_uæ
[
NGX_RTMP_MAX_URL
];

32 
	macodecs
;

33 
	mvcodecs
;

34 
u_ch¨
 
	m∑ge_uæ
[
NGX_RTMP_MAX_URL
];

35 
	mobje˘_ícodög
;

36 } 
	tngx_πmp_c⁄√˘_t
;

40 
	må™s
;

41 
	m°ªam
;

42 } 
	tngx_πmp_¸óã_°ªam_t
;

46 
	m°ªam
;

47 } 
	tngx_πmp_dñëe_°ªam_t
;

51 
	m°ªam
;

52 } 
	tngx_πmp_˛o£_°ªam_t
;

56 
u_ch¨
 
	m«me
[
NGX_RTMP_MAX_NAME
];

57 
u_ch¨
 
	m¨gs
[
NGX_RTMP_MAX_ARGS
];

58 
u_ch¨
 
	mty≥
[16];

59 
	msûít
;

60 } 
	tngx_πmp_publish_t
;

64 
u_ch¨
 
	m«me
[
NGX_RTMP_MAX_NAME
];

65 
u_ch¨
 
	m¨gs
[
NGX_RTMP_MAX_ARGS
];

66 
	m°¨t
;

67 
	mduøti⁄
;

68 
	mª£t
;

69 
	msûít
;

70 } 
	tngx_πmp_∂ay_t
;

74 
	moff£t
;

75 } 
	tngx_πmp_£ek_t
;

79 
uöt8_t
 
	m∑u£
;

80 
	mposôi⁄
;

81 } 
	tngx_πmp_∑u£_t
;

85 
uöt32_t
 
	mmsid
;

86 } 
	tngx_πmp_msid_t
;

89 
ngx_πmp_msid_t
 
	tngx_πmp_°ªam_begö_t
;

90 
ngx_πmp_msid_t
 
	tngx_πmp_°ªam_eof_t
;

91 
ngx_πmp_msid_t
 
	tngx_πmp_°ªam_dry_t
;

92 
ngx_πmp_msid_t
 
	tngx_πmp_ªc‹ded_t
;

96 
uöt32_t
 
	mmsid
;

97 
uöt32_t
 
	mbuÊí
;

98 } 
	tngx_πmp_£t_buÊí_t
;

101 
ngx_πmp_cmd_fûl_¨gs
(
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
],

102 
u_ch¨
 
¨gs
[
NGX_RTMP_MAX_ARGS
]);

105 
	$ngx_öt_t
 (*
	tngx_πmp_c⁄√˘_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

106 
	tngx_πmp_c⁄√˘_t
 *
	tv
);

107 
	$ngx_öt_t
 (*
	tngx_πmp_disc⁄√˘_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
);

108 
	$ngx_öt_t
 (*
	tngx_πmp_¸óã_°ªam_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

109 
	tngx_πmp_¸óã_°ªam_t
 *
	tv
);

110 
	$ngx_öt_t
 (*
	tngx_πmp_˛o£_°ªam_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

111 
	tngx_πmp_˛o£_°ªam_t
 *
	tv
);

112 
	$ngx_öt_t
 (*
	tngx_πmp_dñëe_°ªam_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

113 
	tngx_πmp_dñëe_°ªam_t
 *
	tv
);

114 
	$ngx_öt_t
 (*
	tngx_πmp_publish_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

115 
	tngx_πmp_publish_t
 *
	tv
);

116 
	$ngx_öt_t
 (*
	tngx_πmp_∂ay_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

117 
	tngx_πmp_∂ay_t
 *
	tv
);

118 
	$ngx_öt_t
 (*
	tngx_πmp_£ek_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

119 
	tngx_πmp_£ek_t
 *
	tv
);

120 
	$ngx_öt_t
 (*
	tngx_πmp_∑u£_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

121 
	tngx_πmp_∑u£_t
 *
	tv
);

123 
	$ngx_öt_t
 (*
	tngx_πmp_°ªam_begö_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

124 
	tngx_πmp_°ªam_begö_t
 *
	tv
);

125 
	$ngx_öt_t
 (*
	tngx_πmp_°ªam_eof_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

126 
	tngx_πmp_°ªam_eof_t
 *
	tv
);

127 
	$ngx_öt_t
 (*
	tngx_πmp_°ªam_dry_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

128 
	tngx_πmp_°ªam_dry_t
 *
	tv
);

129 
	$ngx_öt_t
 (*
	tngx_πmp_ªc‹ded_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

130 
	tngx_πmp_ªc‹ded_t
 *
	tv
);

131 
	$ngx_öt_t
 (*
	tngx_πmp_£t_buÊí_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

132 
	tngx_πmp_£t_buÊí_t
 *
	tv
);

135 
ngx_πmp_c⁄√˘_±
 
ngx_πmp_c⁄√˘
;

136 
ngx_πmp_disc⁄√˘_±
 
ngx_πmp_disc⁄√˘
;

137 
ngx_πmp_¸óã_°ªam_±
 
ngx_πmp_¸óã_°ªam
;

138 
ngx_πmp_˛o£_°ªam_±
 
ngx_πmp_˛o£_°ªam
;

139 
ngx_πmp_dñëe_°ªam_±
 
ngx_πmp_dñëe_°ªam
;

140 
ngx_πmp_publish_±
 
ngx_πmp_publish
;

141 
ngx_πmp_∂ay_±
 
ngx_πmp_∂ay
;

142 
ngx_πmp_£ek_±
 
ngx_πmp_£ek
;

143 
ngx_πmp_∑u£_±
 
ngx_πmp_∑u£
;

145 
ngx_πmp_°ªam_begö_±
 
ngx_πmp_°ªam_begö
;

146 
ngx_πmp_°ªam_eof_±
 
ngx_πmp_°ªam_eof
;

147 
ngx_πmp_°ªam_dry_±
 
ngx_πmp_°ªam_dry
;

148 
ngx_πmp_£t_buÊí_±
 
ngx_πmp_£t_buÊí
;

149 
ngx_πmp_ªc‹ded_±
 
ngx_πmp_ªc‹ded
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_codec_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_codec_moduÀ.h
"

10 
	~"ngx_πmp_live_moduÀ.h
"

11 
	~"ngx_πmp_cmd_moduÀ.h
"

12 
	~"ngx_πmp_bô›.h
"

15 
	#NGX_RTMP_CODEC_META_OFF
 0

	)

16 
	#NGX_RTMP_CODEC_META_ON
 1

	)

17 
	#NGX_RTMP_CODEC_META_COPY
 2

	)

20 * 
ngx_πmp_codec_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

21 * 
ngx_πmp_codec_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

22 *
∑ª¡
, *
chûd
);

23 
ngx_öt_t
 
ngx_πmp_codec_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

24 
ngx_öt_t
 
ngx_πmp_codec_ªc⁄°ru˘_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
);

25 
ngx_öt_t
 
ngx_πmp_codec_c›y_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
,

26 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

27 
ngx_öt_t
 
ngx_πmp_codec_¥ï¨e_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
,

28 
uöt32_t
 
time°amp
);

29 
ngx_πmp_codec_∑r£_Øc_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
,

30 
ngx_chaö_t
 *
ö
);

31 
ngx_πmp_codec_∑r£_avc_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
,

32 
ngx_chaö_t
 *
ö
);

33 #i‡(
NGX_DEBUG
)

34 
ngx_πmp_codec_dump_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
, c⁄° *
ty≥
,

35 
ngx_chaö_t
 *
ö
);

40 
ngx_uöt_t
 
	mmëa
;

41 } 
	tngx_πmp_codec_≠p_c⁄f_t
;

44 
ngx_c⁄f_íum_t
 
	gngx_πmp_codec_mëa_¶Ÿs
[] = {

45 { 
ngx_°rög
("off"), 
NGX_RTMP_CODEC_META_OFF
 },

46 { 
ngx_°rög
("⁄"), 
NGX_RTMP_CODEC_META_ON
 },

47 { 
ngx_°rög
("c›y"), 
NGX_RTMP_CODEC_META_COPY
 },

48 { 
ngx_nuŒ_°rög
, 0 }

52 
ngx_comm™d_t
 
	gngx_πmp_codec_comm™ds
[] = {

54 { 
ngx_°rög
("meta"),

55 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

56 
ngx_c⁄f_£t_íum_¶Ÿ
,

57 
NGX_RTMP_APP_CONF_OFFSET
,

58 
off£tof
(
ngx_πmp_codec_≠p_c⁄f_t
, 
mëa
),

59 &
ngx_πmp_codec_mëa_¶Ÿs
 },

61 
ngx_nuŒ_comm™d


65 
ngx_πmp_moduÀ_t
 
	gngx_πmp_codec_moduÀ_˘x
 = {

66 
NULL
,

67 
ngx_πmp_codec_po°c⁄figuøti⁄
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
ngx_πmp_codec_¸óã_≠p_c⁄f
,

73 
ngx_πmp_codec_mîge_≠p_c⁄f


77 
ngx_moduÀ_t
 
	gngx_πmp_codec_moduÀ
 = {

78 
NGX_MODULE_V1
,

79 &
ngx_πmp_codec_moduÀ_˘x
,

80 
ngx_πmp_codec_comm™ds
,

81 
NGX_RTMP_MODULE
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NGX_MODULE_V1_PADDING


94 
	gaudio_codecs
[] = {

116 
	gvideo_codecs
[] = {

128 
u_ch¨
 *

129 
	$ngx_πmp_gë_audio_codec_«me
(
ngx_uöt_t
 
id
)

131  (
u_ch¨
 *)(
id
 < (
audio_codecs
) / (audio_codecs[0])

132 ? 
audio_codecs
[
id
]

134 
	}
}

137 
u_ch¨
 *

138 
	$ngx_πmp_gë_video_codec_«me
(
ngx_uöt_t
 
id
)

140  (
u_ch¨
 *)(
id
 < (
video_codecs
) / (video_codecs[0])

141 ? 
video_codecs
[
id
]

143 
	}
}

146 
ngx_uöt_t


147 
	$ngx_πmp_codec_gë_√xt_vîsi⁄
()

149 
ngx_uöt_t
 
v
;

150 
ngx_uöt_t
 
vîsi⁄
;

153 
v
 = ++
vîsi⁄
;

154 } 
v
 == 0);

156  
v
;

157 
	}
}

160 
ngx_öt_t


161 
	$ngx_πmp_codec_disc⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

162 
ngx_chaö_t
 *
ö
)

164 
ngx_πmp_codec_˘x_t
 *
˘x
;

165 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

167 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

168 i‡(
˘x
 =
NULL
) {

169  
NGX_OK
;

172 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

174 i‡(
˘x
->
avc_hódî
) {

175 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
˘x
->
avc_hódî
);

176 
˘x
->
avc_hódî
 = 
NULL
;

179 i‡(
˘x
->
Øc_hódî
) {

180 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
˘x
->
Øc_hódî
);

181 
˘x
->
Øc_hódî
 = 
NULL
;

184 i‡(
˘x
->
mëa
) {

185 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
˘x
->
mëa
);

186 
˘x
->
mëa
 = 
NULL
;

189  
NGX_OK
;

190 
	}
}

193 
ngx_öt_t


194 
	$ngx_πmp_codec_av
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

195 
ngx_chaö_t
 *
ö
)

197 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

198 
ngx_πmp_codec_˘x_t
 *
˘x
;

199 
ngx_chaö_t
 **
hódî
;

200 
uöt8_t
 
fmt
;

201 
ngx_uöt_t
 
ßm∂e_øãs
[] =

204 i‡(
h
->
ty≥
 !
NGX_RTMP_MSG_AUDIO
 && h->ty≥ !
NGX_RTMP_MSG_VIDEO
) {

205  
NGX_OK
;

208 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

209 i‡(
˘x
 =
NULL
) {

210 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_codec_˘x_t
));

211 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_codec_moduÀ
);

215 i‡(
ö
->
buf
->
œ°
 - in->buf->
pos
 < 1) {

216  
NGX_OK
;

219 
fmt
 = 
ö
->
buf
->
pos
[0];

220 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_AUDIO
) {

221 
˘x
->
audio_codec_id
 = (
fmt
 & 0xf0) >> 4;

222 
˘x
->
audio_ch™√ls
 = (
fmt
 & 0x01) + 1;

223 
˘x
->
ßm∂e_size
 = (
fmt
 & 0x02) ? 2 : 1;

225 i‡(
˘x
->
ßm∂e_øã
 == 0) {

226 
˘x
->
ßm∂e_øã
 = 
ßm∂e_øãs
[(
fmt
 & 0x0c) >> 2];

229 
˘x
->
video_codec_id
 = (
fmt
 & 0x0f);

233 i‡(
ö
->
buf
->
œ°
 - in->buf->
pos
 < 3) {

234  
NGX_OK
;

238 i‡(!
	`ngx_πmp_is_codec_hódî
(
ö
)) {

239  
NGX_OK
;

242 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

243 
hódî
 = 
NULL
;

245 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_AUDIO
) {

246 i‡(
˘x
->
audio_codec_id
 =
NGX_RTMP_AUDIO_AAC
) {

247 
hódî
 = &
˘x
->
Øc_hódî
;

248 
	`ngx_πmp_codec_∑r£_Øc_hódî
(
s
, 
ö
);

251 i‡(
˘x
->
video_codec_id
 =
NGX_RTMP_VIDEO_H264
) {

252 
hódî
 = &
˘x
->
avc_hódî
;

253 
	`ngx_πmp_codec_∑r£_avc_hódî
(
s
, 
ö
);

257 i‡(
hódî
 =
NULL
) {

258  
NGX_OK
;

261 i‡(*
hódî
) {

262 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, *
hódî
);

265 *
hódî
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, 
ö
);

267  
NGX_OK
;

268 
	}
}

272 
	$ngx_πmp_codec_∑r£_Øc_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
)

274 
ngx_uöt_t
 
idx
;

275 
ngx_πmp_codec_˘x_t
 *
˘x
;

276 
ngx_πmp_bô_ªadî_t
 
br
;

278 
ngx_uöt_t
 
Øc_ßm∂e_øãs
[] =

284 #i‡(
NGX_DEBUG
)

285 
	`ngx_πmp_codec_dump_hódî
(
s
, "Øc", 
ö
);

288 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

290 
	`ngx_πmp_bô_öô_ªadî
(&
br
, 
ö
->
buf
->
pos
, in->buf->
œ°
);

292 
	`ngx_πmp_bô_ªad
(&
br
, 16);

294 
˘x
->
Øc_¥ofûe
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 5);

295 i‡(
˘x
->
Øc_¥ofûe
 == 31) {

296 
˘x
->
Øc_¥ofûe
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 6) + 32;

299 
idx
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 4);

300 i‡(
idx
 == 15) {

301 
˘x
->
ßm∂e_øã
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 24);

303 
˘x
->
ßm∂e_øã
 = 
Øc_ßm∂e_øãs
[
idx
];

306 
˘x
->
Øc_ch™_c⁄f
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 4);

308 i‡(
˘x
->
Øc_¥ofûe
 == 5 || ctx->aac_profile == 29) {

310 i‡(
˘x
->
Øc_¥ofûe
 == 29) {

311 
˘x
->
Øc_ps
 = 1;

314 
˘x
->
Øc_sbr
 = 1;

316 
idx
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 4);

317 i‡(
idx
 == 15) {

318 
˘x
->
ßm∂e_øã
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 24);

320 
˘x
->
ßm∂e_øã
 = 
Øc_ßm∂e_øãs
[
idx
];

323 
˘x
->
Øc_¥ofûe
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 5);

324 i‡(
˘x
->
Øc_¥ofûe
 == 31) {

325 
˘x
->
Øc_¥ofûe
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 6) + 32;

350 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

353 
˘x
->
Øc_¥ofûe
, ctx->
ßm∂e_øã
, ctx->
Øc_ch™_c⁄f
);

354 
	}
}

358 
	$ngx_πmp_codec_∑r£_avc_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
)

360 
ngx_uöt_t
 
¥ofûe_idc
, 
width
, 
height
, 
¸›_À·
, 
¸›_right
,

361 
¸›_t›
, 
¸›_bŸtom
, 
‰ame_mbs_⁄ly
, 
n
, 
cf_idc
,

362 
num_ªf_‰ames
;

363 
ngx_πmp_codec_˘x_t
 *
˘x
;

364 
ngx_πmp_bô_ªadî_t
 
br
;

366 #i‡(
NGX_DEBUG
)

367 
	`ngx_πmp_codec_dump_hódî
(
s
, "avc", 
ö
);

370 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

372 
	`ngx_πmp_bô_öô_ªadî
(&
br
, 
ö
->
buf
->
pos
, in->buf->
œ°
);

374 
	`ngx_πmp_bô_ªad
(&
br
, 48);

376 
˘x
->
avc_¥ofûe
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_8
(&
br
);

377 
˘x
->
avc_com∑t
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_8
(&
br
);

378 
˘x
->
avc_Àvñ
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_8
(&
br
);

381 
˘x
->
avc_«l_byãs
 = (
ngx_uöt_t
Ë((
	`ngx_πmp_bô_ªad_8
(&
br
) & 0x03) + 1);

384 i‡((
	`ngx_πmp_bô_ªad_8
(&
br
) & 0x1f) == 0) {

389 
	`ngx_πmp_bô_ªad
(&
br
, 16);

392 i‡(
	`ngx_πmp_bô_ªad_8
(&
br
) != 0x67) {

399 
¥ofûe_idc
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 8);

402 
	`ngx_πmp_bô_ªad
(&
br
, 8);

405 
	`ngx_πmp_bô_ªad
(&
br
, 8);

408 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

410 i‡(
¥ofûe_idc
 == 100 ||Örofile_idc == 110 ||

411 
¥ofûe_idc
 == 122 ||Örofile_idc == 244 ||Örofile_idc == 44 ||

412 
¥ofûe_idc
 == 83 ||Örofile_idc == 86 ||Örofile_idc == 118)

415 
cf_idc
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

417 i‡(
cf_idc
 == 3) {

420 
	`ngx_πmp_bô_ªad
(&
br
, 1);

424 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

427 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

430 
	`ngx_πmp_bô_ªad
(&
br
, 1);

433 i‡(
	`ngx_πmp_bô_ªad
(&
br
, 1)) {

435 
n
 = 0;Ç < (
cf_idc
 != 3 ? 8u : 12u);Ç++) {

438 i‡(
	`ngx_πmp_bô_ªad
(&
br
, 1)) {

451 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

454 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
)) {

458 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

464 
	`ngx_πmp_bô_ªad
(&
br
, 1);

467 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

470 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

473 
num_ªf_‰ames
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

475 
n
 = 0;Ç < 
num_ªf_‰ames
;Ç++) {

478 
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

483 
˘x
->
avc_ªf_‰ames
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

486 
	`ngx_πmp_bô_ªad
(&
br
, 1);

489 
width
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

492 
height
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

495 
‰ame_mbs_⁄ly
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad
(&
br
, 1);

497 i‡(!
‰ame_mbs_⁄ly
) {

500 
	`ngx_πmp_bô_ªad
(&
br
, 1);

504 
	`ngx_πmp_bô_ªad
(&
br
, 1);

507 i‡(
	`ngx_πmp_bô_ªad
(&
br
, 1)) {

509 
¸›_À·
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

510 
¸›_right
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

511 
¸›_t›
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

512 
¸›_bŸtom
 = (
ngx_uöt_t
Ë
	`ngx_πmp_bô_ªad_gﬁomb
(&
br
);

516 
¸›_À·
 = 0;

517 
¸›_right
 = 0;

518 
¸›_t›
 = 0;

519 
¸›_bŸtom
 = 0;

522 
˘x
->
width
 = (width + 1Ë* 16 - (
¸›_À·
 + 
¸›_right
) * 2;

523 
˘x
->
height
 = (2 - 
‰ame_mbs_⁄ly
) * (height + 1) * 16 -

524 (
¸›_t›
 + 
¸›_bŸtom
) * 2;

526 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

530 
˘x
->
avc_¥ofûe
, ctx->
avc_com∑t
, ctx->
avc_Àvñ
,

531 
˘x
->
avc_«l_byãs
, ctx->
avc_ªf_‰ames
,

532 
˘x
->
width
, ctx->
height
);

533 
	}
}

536 #i‡(
NGX_DEBUG
)

538 
	$ngx_πmp_codec_dump_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
, c⁄° *
ty≥
,

539 
ngx_chaö_t
 *
ö
)

541 
u_ch¨
 
buf
[256], *
p
, *
µ
;

542 
u_ch¨
 
hex
[] = "0123456789abcdef";

544 
µ
 = 
buf
, 
p
 = 
ö
->buf->
pos
;

545 
p
 < 
ö
->
buf
->
œ°
 && 
µ
 < buf + (buf) - 1;

546 ++
p
)

548 *
µ
++ = 
hex
[*
p
 >> 4];

549 *
µ
++ = 
hex
[*
p
 & 0x0f];

552 *
µ
 = 0;

554 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

555 "codec: %†hódî %s", 
ty≥
, 
buf
);

556 
	}
}

560 
ngx_öt_t


561 
	$ngx_πmp_codec_ªc⁄°ru˘_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
)

563 
ngx_πmp_codec_˘x_t
 *
˘x
;

564 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

565 
ngx_öt_t
 
rc
;

568 
width
;

569 
height
;

570 
duøti⁄
;

571 
‰ame_øã
;

572 
video_d©a_øã
;

573 
video_codec_id
;

574 
audio_d©a_øã
;

575 
audio_codec_id
;

576 
u_ch¨
 
¥ofûe
[32];

577 
u_ch¨
 
Àvñ
[32];

578 } 
v
;

580 
ngx_πmp_amf_ñt_t
 
out_öf
[] = {

582 { 
NGX_RTMP_AMF_STRING
,

583 
	`ngx_°rög
("Server"),

586 { 
NGX_RTMP_AMF_NUMBER
,

587 
	`ngx_°rög
("width"),

588 &
v
.
width
, 0 },

590 { 
NGX_RTMP_AMF_NUMBER
,

591 
	`ngx_°rög
("height"),

592 &
v
.
height
, 0 },

594 { 
NGX_RTMP_AMF_NUMBER
,

595 
	`ngx_°rög
("displayWidth"),

596 &
v
.
width
, 0 },

598 { 
NGX_RTMP_AMF_NUMBER
,

599 
	`ngx_°rög
("displayHeight"),

600 &
v
.
height
, 0 },

602 { 
NGX_RTMP_AMF_NUMBER
,

603 
	`ngx_°rög
("duration"),

604 &
v
.
duøti⁄
, 0 },

606 { 
NGX_RTMP_AMF_NUMBER
,

607 
	`ngx_°rög
("framerate"),

608 &
v
.
‰ame_øã
, 0 },

610 { 
NGX_RTMP_AMF_NUMBER
,

611 
	`ngx_°rög
("fps"),

612 &
v
.
‰ame_øã
, 0 },

614 { 
NGX_RTMP_AMF_NUMBER
,

615 
	`ngx_°rög
("videodatarate"),

616 &
v
.
video_d©a_øã
, 0 },

618 { 
NGX_RTMP_AMF_NUMBER
,

619 
	`ngx_°rög
("videocodecid"),

620 &
v
.
video_codec_id
, 0 },

622 { 
NGX_RTMP_AMF_NUMBER
,

623 
	`ngx_°rög
("audiodatarate"),

624 &
v
.
audio_d©a_øã
, 0 },

626 { 
NGX_RTMP_AMF_NUMBER
,

627 
	`ngx_°rög
("audiocodecid"),

628 &
v
.
audio_codec_id
, 0 },

630 { 
NGX_RTMP_AMF_STRING
,

631 
	`ngx_°rög
("profile"),

632 &
v
.
¥ofûe
, (v.profile) },

634 { 
NGX_RTMP_AMF_STRING
,

635 
	`ngx_°rög
("level"),

636 &
v
.
Àvñ
, (v.level) },

639 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

641 { 
NGX_RTMP_AMF_STRING
,

642 
ngx_nuŒ_°rög
,

645 { 
NGX_RTMP_AMF_OBJECT
,

646 
ngx_nuŒ_°rög
,

647 
out_öf
, (out_inf) },

650 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

651 i‡(
˘x
 =
NULL
) {

652  
NGX_OK
;

655 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

657 i‡(
˘x
->
mëa
) {

658 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
˘x
->
mëa
);

659 
˘x
->
mëa
 = 
NULL
;

662 
v
.
width
 = 
˘x
->width;

663 
v
.
height
 = 
˘x
->height;

664 
v
.
duøti⁄
 = 
˘x
->duration;

665 
v
.
‰ame_øã
 = 
˘x
->frame_rate;

666 
v
.
video_d©a_øã
 = 
˘x
->video_data_rate;

667 
v
.
video_codec_id
 = 
˘x
->video_codec_id;

668 
v
.
audio_d©a_øã
 = 
˘x
->audio_data_rate;

669 
v
.
audio_codec_id
 = 
˘x
->audio_codec_id;

670 
	`ngx_mem˝y
(
v
.
¥ofûe
, 
˘x
->profile, (ctx->profile));

671 
	`ngx_mem˝y
(
v
.
Àvñ
, 
˘x
->level, (ctx->level));

673 
rc
 = 
	`ngx_πmp_≠≥nd_amf
(
s
, &
˘x
->
mëa
, 
NULL
, 
out_ñts
,

674 (
out_ñts
) / (out_elts[0]));

675 i‡(
rc
 !
NGX_OK
 || 
˘x
->
mëa
 =
NULL
) {

676  
NGX_ERROR
;

679  
	`ngx_πmp_codec_¥ï¨e_mëa
(
s
, 0);

680 
	}
}

683 
ngx_öt_t


684 
	$ngx_πmp_codec_c›y_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

685 
ngx_chaö_t
 *
ö
)

687 
ngx_πmp_codec_˘x_t
 *
˘x
;

688 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

690 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

692 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

694 i‡(
˘x
->
mëa
) {

695 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
˘x
->
mëa
);

698 
˘x
->
mëa
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, 
ö
);

700 i‡(
˘x
->
mëa
 =
NULL
) {

701  
NGX_ERROR
;

704  
	`ngx_πmp_codec_¥ï¨e_mëa
(
s
, 
h
->
time°amp
);

705 
	}
}

708 
ngx_öt_t


709 
	$ngx_πmp_codec_¥ï¨e_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
time°amp
)

711 
ngx_πmp_hódî_t
 
h
;

712 
ngx_πmp_codec_˘x_t
 *
˘x
;

714 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

716 
	`ngx_memzîo
(&
h
, (h));

717 
h
.
csid
 = 
NGX_RTMP_CSID_AMF
;

718 
h
.
msid
 = 
NGX_RTMP_MSID
;

719 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_META
;

720 
h
.
time°amp
 =Åimestamp;

721 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
h
, 
NULL
, 
˘x
->
mëa
);

723 
˘x
->
mëa_vîsi⁄
 = 
	`ngx_πmp_codec_gë_√xt_vîsi⁄
();

725  
NGX_OK
;

726 
	}
}

729 
ngx_öt_t


730 
	$ngx_πmp_codec_mëa_d©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

731 
ngx_chaö_t
 *
ö
)

733 
ngx_πmp_codec_≠p_c⁄f_t
 *
ˇcf
;

734 
ngx_πmp_codec_˘x_t
 *
˘x
;

735 
ngx_uöt_t
 
skù
;

738 
width
;

739 
height
;

740 
duøti⁄
;

741 
‰ame_øã
;

742 
video_d©a_øã
;

743 
video_codec_id_n
;

744 
u_ch¨
 
video_codec_id_s
[32];

745 
audio_d©a_øã
;

746 
audio_codec_id_n
;

747 
u_ch¨
 
audio_codec_id_s
[32];

748 
u_ch¨
 
¥ofûe
[32];

749 
u_ch¨
 
Àvñ
[32];

750 } 
v
;

752 
ngx_πmp_amf_ñt_t
 
ö_video_codec_id
[] = {

754 { 
NGX_RTMP_AMF_NUMBER
,

755 
ngx_nuŒ_°rög
,

756 &
v
.
video_codec_id_n
, 0 },

758 { 
NGX_RTMP_AMF_STRING
,

759 
ngx_nuŒ_°rög
,

760 &
v
.
video_codec_id_s
, (v.video_codec_id_s) },

763 
ngx_πmp_amf_ñt_t
 
ö_audio_codec_id
[] = {

765 { 
NGX_RTMP_AMF_NUMBER
,

766 
ngx_nuŒ_°rög
,

767 &
v
.
audio_codec_id_n
, 0 },

769 { 
NGX_RTMP_AMF_STRING
,

770 
ngx_nuŒ_°rög
,

771 &
v
.
audio_codec_id_s
, (v.audio_codec_id_s) },

774 
ngx_πmp_amf_ñt_t
 
ö_öf
[] = {

776 { 
NGX_RTMP_AMF_NUMBER
,

777 
	`ngx_°rög
("width"),

778 &
v
.
width
, 0 },

780 { 
NGX_RTMP_AMF_NUMBER
,

781 
	`ngx_°rög
("height"),

782 &
v
.
height
, 0 },

784 { 
NGX_RTMP_AMF_NUMBER
,

785 
	`ngx_°rög
("duration"),

786 &
v
.
duøti⁄
, 0 },

788 { 
NGX_RTMP_AMF_NUMBER
,

789 
	`ngx_°rög
("framerate"),

790 &
v
.
‰ame_øã
, 0 },

792 { 
NGX_RTMP_AMF_NUMBER
,

793 
	`ngx_°rög
("fps"),

794 &
v
.
‰ame_øã
, 0 },

796 { 
NGX_RTMP_AMF_NUMBER
,

797 
	`ngx_°rög
("videodatarate"),

798 &
v
.
video_d©a_øã
, 0 },

800 { 
NGX_RTMP_AMF_VARIANT
,

801 
	`ngx_°rög
("videocodecid"),

802 
ö_video_codec_id
, (in_video_codec_id) },

804 { 
NGX_RTMP_AMF_NUMBER
,

805 
	`ngx_°rög
("audiodatarate"),

806 &
v
.
audio_d©a_øã
, 0 },

808 { 
NGX_RTMP_AMF_VARIANT
,

809 
	`ngx_°rög
("audiocodecid"),

810 
ö_audio_codec_id
, (in_audio_codec_id) },

812 { 
NGX_RTMP_AMF_STRING
,

813 
	`ngx_°rög
("profile"),

814 &
v
.
¥ofûe
, (v.profile) },

816 { 
NGX_RTMP_AMF_STRING
,

817 
	`ngx_°rög
("level"),

818 &
v
.
Àvñ
, (v.level) },

821 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

823 { 
NGX_RTMP_AMF_STRING
,

824 
ngx_nuŒ_°rög
,

825 
NULL
, 0 },

827 { 
NGX_RTMP_AMF_OBJECT
,

828 
ngx_nuŒ_°rög
,

829 
ö_öf
, (in_inf) },

832 
ˇcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_codec_moduÀ
);

834 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

835 i‡(
˘x
 =
NULL
) {

836 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_codec_˘x_t
));

837 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_codec_moduÀ
);

840 
	`ngx_memzîo
(&
v
, (v));

844 
v
.
audio_codec_id_n
 = -1;

847 
skù
 = !(
ö
->
buf
->
œ°
 > in->buf->
pos


848 && *
ö
->
buf
->
pos
 =
NGX_RTMP_AMF_STRING
);

849 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
 + 
skù
,

850 (
ö_ñts
Ë/ (ö_ñts[0]Ë- 
skù
))

852 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

854  
NGX_OK
;

857 
˘x
->
width
 = (
ngx_uöt_t
Ë
v
.width;

858 
˘x
->
height
 = (
ngx_uöt_t
Ë
v
.height;

859 
˘x
->
duøti⁄
 = (
ngx_uöt_t
Ë
v
.duration;

860 
˘x
->
‰ame_øã
 = (
ngx_uöt_t
Ë
v
.frame_rate;

861 
˘x
->
video_d©a_øã
 = (
ngx_uöt_t
Ë
v
.video_data_rate;

862 
˘x
->
video_codec_id
 = (
ngx_uöt_t
Ë
v
.
video_codec_id_n
;

863 
˘x
->
audio_d©a_øã
 = (
ngx_uöt_t
Ë
v
.audio_data_rate;

864 
˘x
->
audio_codec_id
 = (
v
.
audio_codec_id_n
 == -1

865 ? 0 : 
v
.
audio_codec_id_n
 == 0

866 ? 
NGX_RTMP_AUDIO_UNCOMPRESSED
 : (
ngx_uöt_t
Ë
v
.
audio_codec_id_n
);

867 
	`ngx_mem˝y
(
˘x
->
¥ofûe
, 
v
.profile, (v.profile));

868 
	`ngx_mem˝y
(
˘x
->
Àvñ
, 
v
.level, (v.level));

870 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

874 
˘x
->
width
, ctx->
height
, ctx->
duøti⁄
, ctx->
‰ame_øã
,

875 
	`ngx_πmp_gë_video_codec_«me
(
˘x
->
video_codec_id
),

876 
˘x
->
video_codec_id
,

877 
	`ngx_πmp_gë_audio_codec_«me
(
˘x
->
audio_codec_id
),

878 
˘x
->
audio_codec_id
);

880 
ˇcf
->
mëa
) {

881 
NGX_RTMP_CODEC_META_ON
:

882  
	`ngx_πmp_codec_ªc⁄°ru˘_mëa
(
s
);

883 
NGX_RTMP_CODEC_META_COPY
:

884  
	`ngx_πmp_codec_c›y_mëa
(
s
, 
h
, 
ö
);

889  
NGX_OK
;

890 
	}
}

894 
	$ngx_πmp_codec_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

896 
ngx_πmp_codec_≠p_c⁄f_t
 *
ˇcf
;

898 
ˇcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_codec_≠p_c⁄f_t
));

899 i‡(
ˇcf
 =
NULL
) {

900  
NULL
;

903 
ˇcf
->
mëa
 = 
NGX_CONF_UNSET_UINT
;

905  
ˇcf
;

906 
	}
}

910 
	$ngx_πmp_codec_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

912 
ngx_πmp_codec_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

913 
ngx_πmp_codec_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

915 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mëa
, 
¥ev
->mëa, 
NGX_RTMP_CODEC_META_ON
);

917  
NGX_CONF_OK
;

918 
	}
}

921 
ngx_öt_t


922 
	$ngx_πmp_codec_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

924 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

925 
ngx_πmp_h™dÀr_±
 *
h
;

926 
ngx_πmp_amf_h™dÀr_t
 *
ch
;

928 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

930 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_AUDIO
]);

931 *
h
 = 
ngx_πmp_codec_av
;

933 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_VIDEO
]);

934 *
h
 = 
ngx_πmp_codec_av
;

936 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_DISCONNECT
]);

937 *
h
 = 
ngx_πmp_codec_disc⁄√˘
;

940 
ch
 = 
	`ngx_¨øy_push
(&
cmcf
->
amf
);

941 i‡(
ch
 =
NULL
) {

942  
NGX_ERROR
;

944 
	`ngx_°r_£t
(&
ch
->
«me
, "@setDataFrame");

945 
ch
->
h™dÀr
 = 
ngx_πmp_codec_mëa_d©a
;

947 
ch
 = 
	`ngx_¨øy_push
(&
cmcf
->
amf
);

948 i‡(
ch
 =
NULL
) {

949  
NGX_ERROR
;

951 
	`ngx_°r_£t
(&
ch
->
«me
, "onMetaData");

952 
ch
->
h™dÀr
 = 
ngx_πmp_codec_mëa_d©a
;

955  
NGX_OK
;

956 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_codec_module.h

7 #i‚de‡
_NGX_RTMP_CODEC_H_INCLUDED_


8 
	#_NGX_RTMP_CODEC_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~"ngx_πmp.h
"

20 
	mNGX_RTMP_AUDIO_UNCOMPRESSED
 = 16,

21 
	mNGX_RTMP_AUDIO_ADPCM
 = 1,

22 
	mNGX_RTMP_AUDIO_MP3
 = 2,

23 
	mNGX_RTMP_AUDIO_LINEAR_LE
 = 3,

24 
	mNGX_RTMP_AUDIO_NELLY16
 = 4,

25 
	mNGX_RTMP_AUDIO_NELLY8
 = 5,

26 
	mNGX_RTMP_AUDIO_NELLY
 = 6,

27 
	mNGX_RTMP_AUDIO_G711A
 = 7,

28 
	mNGX_RTMP_AUDIO_G711U
 = 8,

29 
	mNGX_RTMP_AUDIO_AAC
 = 10,

30 
	mNGX_RTMP_AUDIO_SPEEX
 = 11,

31 
	mNGX_RTMP_AUDIO_MP3_8
 = 14,

32 
	mNGX_RTMP_AUDIO_DEVSPEC
 = 15,

38 
	mNGX_RTMP_VIDEO_JPEG
 = 1,

39 
	mNGX_RTMP_VIDEO_SORENSON_H263
 = 2,

40 
	mNGX_RTMP_VIDEO_SCREEN
 = 3,

41 
	mNGX_RTMP_VIDEO_ON2_VP6
 = 4,

42 
	mNGX_RTMP_VIDEO_ON2_VP6_ALPHA
 = 5,

43 
	mNGX_RTMP_VIDEO_SCREEN2
 = 6,

44 
	mNGX_RTMP_VIDEO_H264
 = 7

48 
u_ch¨
 * 
ngx_πmp_gë_audio_codec_«me
(
ngx_uöt_t
 
id
);

49 
u_ch¨
 * 
ngx_πmp_gë_video_codec_«me
(
ngx_uöt_t
 
id
);

53 
ngx_uöt_t
 
	mwidth
;

54 
ngx_uöt_t
 
	mheight
;

55 
ngx_uöt_t
 
	mduøti⁄
;

56 
ngx_uöt_t
 
	m‰ame_øã
;

57 
ngx_uöt_t
 
	mvideo_d©a_øã
;

58 
ngx_uöt_t
 
	mvideo_codec_id
;

59 
ngx_uöt_t
 
	maudio_d©a_øã
;

60 
ngx_uöt_t
 
	maudio_codec_id
;

61 
ngx_uöt_t
 
	mØc_¥ofûe
;

62 
ngx_uöt_t
 
	mØc_ch™_c⁄f
;

63 
ngx_uöt_t
 
	mØc_sbr
;

64 
ngx_uöt_t
 
	mØc_ps
;

65 
ngx_uöt_t
 
	mavc_¥ofûe
;

66 
ngx_uöt_t
 
	mavc_com∑t
;

67 
ngx_uöt_t
 
	mavc_Àvñ
;

68 
ngx_uöt_t
 
	mavc_«l_byãs
;

69 
ngx_uöt_t
 
	mavc_ªf_‰ames
;

70 
ngx_uöt_t
 
	mßm∂e_øã
;

71 
ngx_uöt_t
 
	mßm∂e_size
;

72 
ngx_uöt_t
 
	maudio_ch™√ls
;

73 
u_ch¨
 
	m¥ofûe
[32];

74 
u_ch¨
 
	mÀvñ
[32];

76 
ngx_chaö_t
 *
	mavc_hódî
;

77 
ngx_chaö_t
 *
	mØc_hódî
;

79 
ngx_chaö_t
 *
	mmëa
;

80 
ngx_uöt_t
 
	mmëa_vîsi⁄
;

81 } 
	tngx_πmp_codec_˘x_t
;

84 
ngx_moduÀ_t
 
ngx_πmp_codec_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_control_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

10 
	~"ngx_πmp.h
"

11 
	~"ngx_πmp_live_moduÀ.h
"

12 
	~"ngx_πmp_ªc‹d_moduÀ.h
"

13 
	~"ngx_πmp_ªœy_moduÀ.h
"

16 *
ngx_πmp_c⁄åﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

17 * 
ngx_πmp_c⁄åﬁ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 * 
ngx_πmp_c⁄åﬁ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

19 *
∑ª¡
, *
chûd
);

22 c⁄° * (*
	tngx_πmp_c⁄åﬁ_h™dÀr_t
)(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tngx_πmp_£ssi⁄_t
 *);

26 
	#NGX_RTMP_CONTROL_ALL
 0xff

	)

27 
	#NGX_RTMP_CONTROL_RECORD
 0x01

	)

28 
	#NGX_RTMP_CONTROL_DROP
 0x02

	)

29 
	#NGX_RTMP_CONTROL_REDIRECT
 0x04

	)

30 
	#NGX_RTMP_CONTROL_WALKSTREAM
 0x06

	)

31 
	#NGX_RTMP_CONTROL_MONITOR
 0x08

	)

32 
	#NGX_RTMP_CONTROL_PULL_RECORD
 0x0A

	)

36 
	mNGX_RTMP_CONTROL_FILTER_CLIENT
 = 0,

37 
	mNGX_RTMP_CONTROL_FILTER_PUBLISHER
,

38 
	mNGX_RTMP_CONTROL_FILTER_SUBSCRIBER
,

39 
	mNGX_RTMP_CONTROL_FILTER_STARTMONITOR
,

40 
	mNGX_RTMP_CONTROL_FILTER_STOPMONITOR


44 
ngx_queue_t
 
	mque
;

45 
u_ch¨
 
	m°ªam_«me
[
NGX_RTMP_MAX_NAME
];

46 } 
	tngx_wÆk°ªam_öfo
;

49 
ngx_queue_t
 
	mque
;

50 
u_ch¨
 
	m°ªam_«me
[
NGX_RTMP_MAX_NAME
];

51 
u_ch¨
 
	mliveid
[
NGX_RTMP_MAX_ARGS
];

52 } 
	tngx_puŒ_ªc‹d_°ªam_öfo
;

55 
ngx_uöt_t
 
	mcou¡
;

56 
ngx_°r_t
 
	m∑th
;

57 
ngx_uöt_t
 
	mfûãr
;

58 
ngx_°r_t
 
	mmëhod
;

59 
ngx_¨øy_t
 
	m£ssi⁄s
;

60 
ngx_queue_t
 *
	m°ªams
;

61 
ngx_queue_t
 *
	mpuŒ_°ªams
;

62 } 
	tngx_πmp_c⁄åﬁ_˘x_t
;

65 
ngx_uöt_t
 
	mc⁄åﬁ
;

66 
ngx_Êag_t
 
	mcc_ªc‹d_mode
;

67 } 
	tngx_πmp_c⁄åﬁ_loc_c⁄f_t
;

70 
ngx_c⁄f_bômask_t
 
	gngx_πmp_c⁄åﬁ_masks
[] = {

71 { 
ngx_°rög
("Æl"), 
NGX_RTMP_CONTROL_ALL
 },

72 { 
ngx_°rög
("ªc‹d"), 
NGX_RTMP_CONTROL_RECORD
 },

73 { 
ngx_°rög
("puŒ_ªc‹d"), 
NGX_RTMP_CONTROL_PULL_RECORD
 },

74 { 
ngx_°rög
("dr›"), 
NGX_RTMP_CONTROL_DROP
 },

75 { 
ngx_°rög
("ªdúe˘"), 
NGX_RTMP_CONTROL_REDIRECT
 },

76 { 
ngx_°rög
("wÆk°ªam"), 
NGX_RTMP_CONTROL_WALKSTREAM
 },

77 { 
ngx_°rög
("m⁄ô‹"), 
NGX_RTMP_CONTROL_MONITOR
 },

78 { 
ngx_nuŒ_°rög
, 0 }

82 
ngx_comm™d_t
 
	gngx_πmp_c⁄åﬁ_comm™ds
[] = {

84 { 
ngx_°rög
("rtmp_control"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

86 
ngx_πmp_c⁄åﬁ
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

88 
off£tof
(
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
, 
c⁄åﬁ
),

89 
ngx_πmp_c⁄åﬁ_masks
 },

92 { 
ngx_°rög
("cc_record_mode"),

93 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

94 
ngx_c⁄f_£t_Êag_¶Ÿ
,

95 
NGX_HTTP_LOC_CONF_OFFSET
,

96 
off£tof
(
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
, 
cc_ªc‹d_mode
),

97 
NULL
 },

100 
ngx_nuŒ_comm™d


104 
ngx_hâp_moduÀ_t
 
	gngx_πmp_c⁄åﬁ_moduÀ_˘x
 = {

105 
NULL
,

106 
NULL
,

108 
NULL
,

109 
NULL
,

111 
NULL
,

112 
NULL
,

114 
ngx_πmp_c⁄åﬁ_¸óã_loc_c⁄f
,

115 
ngx_πmp_c⁄åﬁ_mîge_loc_c⁄f
,

119 
ngx_moduÀ_t
 
	gngx_πmp_c⁄åﬁ_moduÀ
 = {

120 
NGX_MODULE_V1
,

121 &
ngx_πmp_c⁄åﬁ_moduÀ_˘x
,

122 
ngx_πmp_c⁄åﬁ_comm™ds
,

123 
NGX_HTTP_MODULE
,

124 
NULL
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_föd_queue
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
)

139 
ngx_öt_t
 
Êag
 = 0;

140 
ngx_queue_t
 *
q
;

142 
q
 = 
	`ngx_queue_hód
(
queue
);

143 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

144 
q
 = 
	`ngx_queue_√xt
(q))

146 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

148 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

149 
Êag
 = 1;

153  
Êag
;

154 
	}
};

157 
ngx_Êag_t


158 
	$ngx_queue_√ed_ªc‹d
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
)

160 
ngx_Êag_t
 
is_ªc‹d
 = 1;

161 
ngx_queue_t
 *
q
;

163 
q
 = 
	`ngx_queue_hód
(
queue
);

164 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

165 
q
 = 
	`ngx_queue_√xt
(q))

167 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

169 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

170 
is_ªc‹d
 = 
ªs
->is_record;

174  
is_ªc‹d
;

175 
	}
};

177 
ngx_Êag_t


178 
	$ngx_queue_is_f‹biddí
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, 
uöt32_t
 
Àn
)

180 
ngx_Êag_t
 
is_f‹biddí
 = 0;

181 
ngx_queue_t
 *
q
;

183 
q
 = 
	`ngx_queue_hód
(
queue
);

184 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

185 
q
 = 
	`ngx_queue_√xt
(q))

187 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

189 i‡(
	`ngx_°∫cmp
(
ªs
->
°ªam_«me
, 
«me
, 
Àn
Ë=0 &&Ñes->
is_f‹biddí
 == 1) {

190 
is_f‹biddí
 = 1;

194  
is_f‹biddí
;

195 
	}
};

198 
	$ngx_queue_ö£π
(
ngx_queue_t
 *
queue
, 
ngx_°ªam_öfo
 *
tmp_öfo
)

200 
	`ngx_queue_öô
(&
tmp_öfo
->
que
);

201 
	`ngx_queue_ö£π_hód
(
queue
, &
tmp_öfo
->
que
);

202 
	}
}

205 
	$ngx_queue_£t_ªc‹d_öfo
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, 
ngx_Êag_t
 
ªc‹d
)

207 
ngx_queue_t
 *
q
;

209 
q
 = 
	`ngx_queue_hód
(
queue
);

210 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

211 
q
 = 
	`ngx_queue_√xt
(q))

213 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

215 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

216 
ªs
->
is_ªc‹d
 = 
ªc‹d
;

219 
	}
}

222 
	$ngx_queue_£t_m⁄ô‹_öfo
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, 
ngx_Êag_t
 
f‹bôãn
)

224 
ngx_queue_t
 *
q
;

226 
q
 = 
	`ngx_queue_hód
(
queue
);

227 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

228 
q
 = 
	`ngx_queue_√xt
(q))

230 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

232 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

233 
ªs
->
is_f‹biddí
 = 
f‹bôãn
;

236 
	}
}

239 
	$ngx_queue_£t_liveid
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, u_ch¨ *
liveid
)

241 
ngx_queue_t
 *
q
;

243 
q
 = 
	`ngx_queue_hód
(
queue
);

244 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

245 
q
 = 
	`ngx_queue_√xt
(q))

247 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

249 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

250 
	`ngx_˝y°∫
(
ªs
->
liveid
,Üiveid, 
	`ngx_°æí
(liveid)+1);

253 
	}
}

255 
ngx_öt_t


256 
	$ngx_queue_gë_liveid
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, u_ch¨ *
liveid
)

258 
ngx_queue_t
 *
q
;

259 
ngx_öt_t
 
Êag
 = 0;

261 
q
 = 
	`ngx_queue_hód
(
queue
);

262 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

263 
q
 = 
	`ngx_queue_√xt
(q))

265 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

267 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

268 i‡(
	`ngx_°æí
(
ªs
->
liveid
) > 0) {

269 
	`ngx_˝y°∫
(
liveid
, 
ªs
->liveid, 
	`ngx_°æí
(res->liveid)+1);

270 
Êag
 = 1;

275  
Êag
;

276 
	}
}

280 
	$ngx_queue_ªmove_°©us
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
)

282 
ngx_queue_t
 *
q
;

284 
q
 = 
	`ngx_queue_hód
(
queue
);

285 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

286 
q
 = 
	`ngx_queue_√xt
(q))

288 
ngx_°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_°ªam_öfo, 
que
);

290 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

291 
	`ngx_queue_ªmove
(&
ªs
->
que
);

295 
	}
}

298 
ngx_öt_t


299 
	$ngx_föd_queue1
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
)

301 
ngx_öt_t
 
Êag
 = 0;

302 
ngx_queue_t
 *
q
;

304 
q
 = 
	`ngx_queue_hód
(
queue
);

305 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

306 
q
 = 
	`ngx_queue_√xt
(q))

308 
ngx_wÆk°ªam_öfo
 *
ªs
 = 
	`ngx_queue_d©a
(
q
,Çgx_wÆk°ªam_öfo, 
que
);

310 i‡(
	`ngx_°rcmp
(
ªs
->
°ªam_«me
, 
«me
) == 0) {

311 
Êag
 = 1;

315  
Êag
;

316 
	}
};

319 
	$ngx_queue_ö£π1
(
ngx_queue_t
 *
queue
, 
ngx_wÆk°ªam_öfo
 *
tmp_öfo
)

321 
	`ngx_queue_öô
(&
tmp_öfo
->
que
);

322 
	`ngx_queue_ö£π_hód
(
queue
, &
tmp_öfo
->
que
);

323 
	}
}

326 
	$ngx_queue_ö£π2
(
ngx_queue_t
 *
queue
, 
ngx_puŒ_ªc‹d_°ªam_öfo
 *
tmp_öfo
)

328 
	`ngx_queue_öô
(&
tmp_öfo
->
que
);

329 
	`ngx_queue_ö£π_hód
(
queue
, &
tmp_öfo
->
que
);

330 
	}
}

333 
	$ngx_¥öt_queue1
(
ngx_queue_t
 *
queue
)

335 
ngx_queue_t
 *
q
;

337 
q
 = 
	`ngx_queue_hód
(
queue
);

338 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

339 
q
 = 
	`ngx_queue_√xt
(q))

341 
ngx_wÆk°ªam_öfo
 *
ñeNode
 = 
	`ngx_queue_d©a
(
q
,Çgx_wÆk°ªam_öfo, 
que
);

342 
	`¥ötf
("«mê%s\n", 
ñeNode
->
°ªam_«me
);

344 
	}
}

347 
	$ngx_¥öt_queue2
(
ngx_queue_t
 *
queue
)

349 
ngx_queue_t
 *
q
;

351 
q
 = 
	`ngx_queue_hód
(
queue
);

352 
q
 !
	`ngx_queue_£¡öñ
(
queue
);

353 
q
 = 
	`ngx_queue_√xt
(q))

355 
ngx_puŒ_ªc‹d_°ªam_öfo
 *
ñeNode
 = 
	`ngx_queue_d©a
(
q
,Çgx_puŒ_ªc‹d_°ªam_öfo, 
que
);

356 
	`¥ötf
("«mê%s\n", 
ñeNode
->
°ªam_«me
);

357 
	`¥ötf
("liveid = %s\n", 
ñeNode
->
liveid
);

359 
	}
}

384 
	$ngx_πmp_c⁄åﬁ_puŒ_ªc‹d_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_£ssi⁄_t
 *
s
)

386 
ngx_öt_t
 
rc
;

387 
ngx_°r_t
 
ªc
;

388 
ngx_°r_t
 
liveid
;

389 
ngx_uöt_t
 
∫
;

390 
ngx_πmp_ªc‹d_˘x_t
 *
r˘
;

391 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

392 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
;

393 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
;

394 
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
 *
Œcf
;

396 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

398 
ˇcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

399 
øcf
 = 
ˇcf
->
≠p_c⁄f
[
ngx_πmp_ªc‹d_moduÀ
.
˘x_ödex
];

401 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"ªc", ("ªc"Ë- 1, &
ªc
Ë!
NGX_OK
) {

402 
ªc
.
Àn
 = 0;

405 
∫
 = 
	`ngx_πmp_ªc‹d_föd
(
øcf
, &
ªc
);

406 i‡(
∫
 =
NGX_CONF_UNSET_UINT
) {

410 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

411 
r˘
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

414 i‡(
˘x
->
mëhod
.
Àn
 == ("start") - 1 &&

415 
	`ngx_°∫cmp
(
˘x
->
mëhod
.
d©a
, "°¨t", ctx->mëhod.
Àn
) == 0)

418 i‡(
Œcf
->
cc_ªc‹d_mode
 == 1)

421 
ngx_°ªam_öfo
 *
tmp_öfo
;

422 
tmp_öfo
 = (
ngx_°ªam_öfo
 *)
	`ngx_pˇŒoc
(
ngx_cy˛e
->
poﬁ
, (ngx_stream_info));

423 
	`ngx_memzîo
(
tmp_öfo
->
liveid
, (tmp_info->liveid));

424 
tmp_öfo
->
is_ªc‹d
 = 1;

425 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"liveid", ("liveid"Ë- 1, &
liveid
Ë!
NGX_OK
) {

426 
liveid
.
Àn
 = 0;

428 i‡(
liveid
.
Àn
 > 0) {

429 
	`ngx_mem˝y
(
r˘
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
);

430 
	`ngx_˝y°∫
(
tmp_öfo
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
+1);

432 
	`ngx_˝y°∫
(
tmp_öfo
->
°ªam_«me
, 
r˘
->
«me
, 
NGX_RTMP_MAX_NAME
);

433 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
) == 0)

435 
	`ngx_queue_ö£π
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
);

437 
	`ngx_queue_£t_ªc‹d_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
, 1);

438 i‡(
liveid
.
Àn
 > 0) {

439 
	`ngx_queue_£t_liveid
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
, 
tmp_öfo
->
liveid
);

443 
rc
 = 
	`ngx_πmp_ªc‹d_›í
(
s
, 
∫
, &
˘x
->
∑th
);

444 } i‡(
˘x
->
mëhod
.
Àn
 == ("stop") - 1 &&

445 
	`ngx_°∫cmp
(
˘x
->
mëhod
.
d©a
, "°›", ctx->mëhod.
Àn
) == 0)

447 i‡(
Œcf
->
cc_ªc‹d_mode
 == 1)

450 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
) == 1) {

451 
	`ngx_queue_£t_ªc‹d_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
, 0);

455 
rc
 = 
	`ngx_πmp_ªc‹d_˛o£
(
s
, 
∫
, &
˘x
->
∑th
);

461 i‡(
rc
 =
NGX_ERROR
) {

465  
NGX_CONF_OK
;

466 
	}
}

471 
	$ngx_πmp_c⁄åﬁ_ªc‹d_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_£ssi⁄_t
 *
s
)

473 
ngx_öt_t
 
rc
;

474 
ngx_°r_t
 
ªc
;

475 
ngx_°r_t
 
liveid
;

476 
ngx_uöt_t
 
∫
;

477 
ngx_πmp_ªc‹d_˘x_t
 *
r˘
;

478 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

479 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
;

480 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
;

481 
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
 *
Œcf
;

483 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

485 
ˇcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

486 
øcf
 = 
ˇcf
->
≠p_c⁄f
[
ngx_πmp_ªc‹d_moduÀ
.
˘x_ödex
];

488 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"ªc", ("ªc"Ë- 1, &
ªc
Ë!
NGX_OK
) {

489 
ªc
.
Àn
 = 0;

492 
∫
 = 
	`ngx_πmp_ªc‹d_föd
(
øcf
, &
ªc
);

493 i‡(
∫
 =
NGX_CONF_UNSET_UINT
) {

497 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

498 
r˘
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

501 i‡(
˘x
->
mëhod
.
Àn
 == ("start") - 1 &&

502 
	`ngx_°∫cmp
(
˘x
->
mëhod
.
d©a
, "°¨t", ctx->mëhod.
Àn
) == 0)

505 i‡(
Œcf
->
cc_ªc‹d_mode
 == 1)

508 
ngx_°ªam_öfo
 *
tmp_öfo
;

509 
tmp_öfo
 = (
ngx_°ªam_öfo
 *)
	`ngx_pˇŒoc
(
ngx_cy˛e
->
poﬁ
, (ngx_stream_info));

510 
	`ngx_memzîo
(
tmp_öfo
->
liveid
, (tmp_info->liveid));

511 
tmp_öfo
->
is_ªc‹d
 = 1;

512 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"liveid", ("liveid"Ë- 1, &
liveid
Ë!
NGX_OK
) {

513 
liveid
.
Àn
 = 0;

515 i‡(
liveid
.
Àn
 > 0) {

516 
	`ngx_mem˝y
(
r˘
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
);

517 
	`ngx_˝y°∫
(
tmp_öfo
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
+1);

519 
	`ngx_˝y°∫
(
tmp_öfo
->
°ªam_«me
, 
r˘
->
«me
, 
NGX_RTMP_MAX_NAME
);

520 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
) == 0)

522 
	`ngx_queue_ö£π
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
);

524 
	`ngx_queue_£t_ªc‹d_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
, 1);

525 i‡(
liveid
.
Àn
 > 0) {

526 
	`ngx_queue_£t_liveid
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
, 
tmp_öfo
->
liveid
);

530 
rc
 = 
	`ngx_πmp_ªc‹d_›í
(
s
, 
∫
, &
˘x
->
∑th
);

531 } i‡(
˘x
->
mëhod
.
Àn
 == ("stop") - 1 &&

532 
	`ngx_°∫cmp
(
˘x
->
mëhod
.
d©a
, "°›", ctx->mëhod.
Àn
) == 0)

534 i‡(
Œcf
->
cc_ªc‹d_mode
 == 1)

537 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
) == 1) {

538 
	`ngx_queue_£t_ªc‹d_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
r˘
->
«me
, 0);

542 
rc
 = 
	`ngx_πmp_ªc‹d_˛o£
(
s
, 
∫
, &
˘x
->
∑th
);

548 i‡(
rc
 =
NGX_ERROR
) {

552  
NGX_CONF_OK
;

553 
	}
}

557 
	$ngx_πmp_c⁄töue_ªœy
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_£ssi⁄_t
 *
s
)

559 
ngx_uöt_t
 
n
;

560 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

561 
ngx_πmp_ªœy_˘x_t
 *
r˘x
, *
p˘x
;

562 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

563 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
, **
t
;

565 
r˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

566 i‡(
r˘x
 =
NULL
) {

569 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

571 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

572 
t
 = 
øcf
->
pushes
.
ñts
;

573 
n
 = 0;Ç < 
øcf
->
pushes
.
√…s
; ++n, ++
t
) {

574 
èrgë
 = *
t
;

576 i‡(
èrgë
->
«me
.
Àn
 && (
r˘x
->name.len !=Åarget->name.len ||

577 
	`ngx_memcmp
(
r˘x
->
«me
.
d©a
, 
èrgë
->«me.d©a,Ñ˘x->«me.
Àn
)))

582 
p˘x
 = 
r˘x
->
∂ay
;Ö˘x;Ö˘x =Ö˘x->
√xt
) {

583 i‡(
p˘x
->
èg
 =&
ngx_πmp_ªœy_moduÀ
 &&

584 
p˘x
->
d©a
 =
èrgë
)

590 i‡(
p˘x
) {

594 i‡(
	`ngx_πmp_ªœy_push
(
s
, &
r˘x
->
«me
, 
èrgë
Ë=
NGX_OK
) {

595 ++
˘x
->
cou¡
;

599  
NGX_CONF_OK
;

600 
	}
}

604 
	$ngx_πmp_c⁄åﬁ_m⁄ô‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_£ssi⁄_t
 *
s
)

606 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

608 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

609 i‡(
˘x
->
fûãr
 =
NGX_RTMP_CONTROL_FILTER_STARTMONITOR
) {

610 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

612 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

613 ++
˘x
->
cou¡
;

615 } if(
˘x
->
fûãr
 =
NGX_RTMP_CONTROL_FILTER_STOPMONITOR
) {

616 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

618 
	`ngx_πmp_c⁄töue_ªœy
(
r
, 
s
);

622  
NGX_CONF_OK
;

623 
	}
}

627 
	$ngx_πmp_c⁄åﬁ_dr›_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_£ssi⁄_t
 *
s
)

629 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

631 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

633 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

635 ++
˘x
->
cou¡
;

637  
NGX_CONF_OK
;

638 
	}
}

642 
	$ngx_πmp_c⁄åﬁ_wÆk°ªam_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_£ssi⁄_t
 *
s
)

644  
NGX_CONF_OK
;

645 
	}
}

649 
	$ngx_πmp_c⁄åﬁ_ªdúe˘_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_£ssi⁄_t
 *
s
)

651 
ngx_°r_t
 
«me
;

652 
ngx_πmp_∂ay_t
 
v∂ay
;

653 
ngx_πmp_publish_t
 
vpublish
;

654 
ngx_πmp_live_˘x_t
 *
l˘x
;

655 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

656 
ngx_πmp_˛o£_°ªam_t
 
vc
;

658 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"√w«me", ("√w«me"Ë- 1, &
«me
)

659 !
NGX_OK
)

664 i‡(
«me
.
Àn
 >
NGX_RTMP_MAX_NAME
) {

665 
«me
.
Àn
 = 
NGX_RTMP_MAX_NAME
 - 1;

668 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

669 
˘x
->
cou¡
++;

671 
	`ngx_memzîo
(&
vc
, (
ngx_πmp_˛o£_°ªam_t
));

674 
	`ngx_πmp_˛o£_°ªam
(
s
, &
vc
);

676 
l˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

678 i‡(
l˘x
 &&Ü˘x->
publishög
) {

681 
	`ngx_memzîo
(&
vpublish
, (
ngx_πmp_publish_t
));

683 
	`ngx_mem˝y
(
vpublish
.
«me
,Çame.
d©a
,Çame.
Àn
);

685 
	`ngx_πmp_cmd_fûl_¨gs
(
vpublish
.
«me
, vpublish.
¨gs
);

687 i‡(
	`ngx_πmp_publish
(
s
, &
vpublish
Ë!
NGX_OK
) {

694 
	`ngx_memzîo
(&
v∂ay
, (
ngx_πmp_∂ay_t
));

696 
	`ngx_mem˝y
(
v∂ay
.
«me
,Çame.
d©a
,Çame.
Àn
);

698 
	`ngx_πmp_cmd_fûl_¨gs
(
v∂ay
.
«me
, v∂ay.
¨gs
);

700 i‡(
	`ngx_πmp_∂ay
(
s
, &
v∂ay
Ë!
NGX_OK
) {

705  
NGX_CONF_OK
;

706 
	}
}

710 
	$ngx_πmp_c⁄åﬁ_wÆk_£ssi⁄
(
ngx_hâp_ªque°_t
 *
r
,

711 
ngx_πmp_live_˘x_t
 *
l˘x
)

713 
ngx_°r_t
 
«me
;

714 
ngx_°r_t
 
addr
, *
∑ddr
, 
˛õ¡id
;

715 
ngx_°r_t
 
≠p
;

716 
ngx_πmp_£ssi⁄_t
 *
s
, **
ss
;

717 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

718 
u_ch¨
 
°ªam_«me
[
NGX_RTMP_MAX_NAME
] = "";

720 
s
 = 
l˘x
->
£ssi⁄
;

722 i‡(
s
 =
NULL
 || s->
c⁄√˘i⁄
 == NULL) {

723  
NGX_CONF_OK
;

726 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"addr", ("addr"Ë- 1, &
addr
)

727 =
NGX_OK
)

729 
∑ddr
 = &
s
->
c⁄√˘i⁄
->
addr_ãxt
;

730 i‡(
∑ddr
->
Àn
 !
addr
.len ||

731 
	`ngx_°∫cmp
(
∑ddr
->
d©a
, 
addr
.d©a,áddr.
Àn
))

733  
NGX_CONF_OK
;

737 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *) "clientid", ("clientid") - 1,

738 &
˛õ¡id
)

739 =
NGX_OK
)

741 i‡(
s
->
c⁄√˘i⁄
->
numbî
 !=

742 (
ngx_uöt_t
Ë
	`ngx_©oi
(
˛õ¡id
.
d©a
, clõ¡id.
Àn
))

744  
NGX_CONF_OK
;

748 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

750 
˘x
->
fûãr
) {

751 
NGX_RTMP_CONTROL_FILTER_PUBLISHER
:

752 i‡(!
l˘x
->
publishög
) {

753  
NGX_CONF_OK
;

757 
NGX_RTMP_CONTROL_FILTER_SUBSCRIBER
:

758 i‡(
l˘x
->
publishög
) {

759  
NGX_CONF_OK
;

763 
NGX_RTMP_CONTROL_FILTER_CLIENT
:

766 
NGX_RTMP_CONTROL_FILTER_STOPMONITOR
:

767 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"«me", ("«me"Ë- 1, &
«me
Ë=
NGX_OK
) {

768 
	`ngx_˝y°∫
(
°ªam_«me
, 
«me
.
d©a
,Çame.
Àn
+1);

769 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
°ªam_«me
) == 1) {

770 
	`ngx_queue_£t_m⁄ô‹_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
°ªam_«me
, 0);

773 i‡(!
l˘x
->
publishög
) {

774  
NGX_CONF_OK
;

778 
NGX_RTMP_CONTROL_FILTER_STARTMONITOR
:

780 i‡(
l˘x
->
publishög
 ||Ü˘x->
£ssi⁄
->
cc_m⁄ô‹_push
 == 1) {

781  
NGX_CONF_OK
;

785 i‡(
l˘x
->
£ssi⁄
->
cc_m⁄ô‹_push
 == 0) {

786 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"«me", ("«me"Ë- 1, &
«me
Ë=
NGX_OK
) {

787 
	`ngx_˝y°∫
(
°ªam_«me
, 
«me
.
d©a
,Çame.
Àn
+1);

788 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
°ªam_«me
) == 0)

790 
ngx_°ªam_öfo
 *
tmp_öfo
;

791 
tmp_öfo
 = (
ngx_°ªam_öfo
 *)
	`ngx_pˇŒoc
(
ngx_cy˛e
->
poﬁ
, (ngx_stream_info));

792 
	`ngx_˝y°∫
(
tmp_öfo
->
°ªam_«me
, 
«me
.
d©a
,Çame.
Àn
 + 1);

793 
tmp_öfo
->
is_ªc‹d
 = 0;

794 
tmp_öfo
->
is_f‹biddí
 = 1;

796 
	`ngx_queue_ö£π
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
);

799 
	`ngx_queue_£t_m⁄ô‹_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
°ªam_«me
, 1);

806 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"«me", ("«me"Ë- 1, &
«me
Ë!
NGX_OK
 ||

807 
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"≠p", ("≠p"Ë- 1, &
≠p
Ë!
NGX_OK
) {

809  
NGX_CONF_OK
;

812 
ss
 = 
	`ngx_¨øy_push
(&
˘x
->
£ssi⁄s
);

813 i‡(
ss
 =
NULL
) {

817 *
ss
 = 
s
;

819  
NGX_CONF_OK
;

820 
	}
}

824 
	$ngx_πmp_c⁄åﬁ_wÆk_°ªam
(
ngx_hâp_ªque°_t
 *
r
,

825 
ngx_πmp_live_°ªam_t
 *
ls
)

827 c⁄° *
s
;

828 
ngx_πmp_live_˘x_t
 *
l˘x
;

830 
l˘x
 = 
ls
->
˘x
;Ü˘x;Ü˘x =Ü˘x->
√xt
) {

831 
s
 = 
	`ngx_πmp_c⁄åﬁ_wÆk_£ssi⁄
(
r
, 
l˘x
);

832 i‡(
s
 !
NGX_CONF_OK
) {

833  
s
;

837  
NGX_CONF_OK
;

838 
	}
}

842 
	$ngx_πmp_c⁄åﬁ_wÆk_≠p
(
ngx_hâp_ªque°_t
 *
r
,

843 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
)

845 
size_t
 
Àn
;

846 
ngx_°r_t
 
«me
;

847 
ngx_°r_t
 
liveid
;

848 c⁄° *
s
;

849 
ngx_uöt_t
 
n
;

850 
ngx_πmp_live_°ªam_t
 *
ls
;

851 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

852 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

854 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

855 
œcf
 = 
ˇcf
->
≠p_c⁄f
[
ngx_πmp_live_moduÀ
.
˘x_ödex
];

858 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"«me", ("«me"Ë- 1, &
«me
Ë!
NGX_OK
)

860 
n
 = 0;Ç < (
ngx_uöt_t
Ë
œcf
->
nbuckës
; ++n) {

861 
ls
 = 
œcf
->
°ªams
[
n
];Üs;Ü†ls->
√xt
) {

862 
s
 = 
	`ngx_πmp_c⁄åﬁ_wÆk_°ªam
(
r
, 
ls
);

863 i‡(
	`ngx_°æí
(
ls
->
«me
Ë!0 &&Üs->
publishög
 == 1) {

864 
ngx_wÆk°ªam_öfo
 *
wÆk°ªam_öfo
;

866 
wÆk°ªam_öfo
 = (
ngx_wÆk°ªam_öfo
 *)
	`ngx_pˇŒoc
(
r
->
c⁄√˘i⁄
->
poﬁ
, (ngx_walkstream_info));

867 
	`ngx_˝y°∫
(
wÆk°ªam_öfo
->
°ªam_«me
, 
ls
->
«me
, 
	`ngx_°æí
(ls->name) + 1);

868 i‡(
	`ngx_föd_queue1
(
˘x
->
°ªams
, 
wÆk°ªam_öfo
->
°ªam_«me
) == 0) {

869 
	`ngx_queue_ö£π1
(
˘x
->
°ªams
, 
wÆk°ªam_öfo
);

873 
ngx_puŒ_ªc‹d_°ªam_öfo
 *
puŒ°ªam_öfo
;

875 
puŒ°ªam_öfo
 = (
ngx_puŒ_ªc‹d_°ªam_öfo
 *)
	`ngx_pˇŒoc
(

876 
r
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_puŒ_ªc‹d_°ªam_öfo
));

878 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"liveid", ("liveid"Ë- 1, &
liveid
Ë=
NGX_OK
) {

879 
	`ngx_˝y°∫
(
puŒ°ªam_öfo
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
+1);

882 
	`ngx_˝y°∫
(
puŒ°ªam_öfo
->
°ªam_«me
, 
ls
->
«me
, 
	`ngx_°æí
(ls->name) + 1);

884 i‡(
	`ngx_föd_queue1
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
->
°ªam_«me
) == 0) {

885 
	`ngx_queue_ö£π2
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
);

886 
	`ngx_¥öt_queue2
(
˘x
->
puŒ_°ªams
);

890 i‡(
s
 !
NGX_CONF_OK
) {

891  
s
;

896  
NGX_CONF_OK
;

899 
n
 = 0;

900 
ls
 = 
œcf
->
°ªams
[
	`ngx_hash_key
(
«me
.
d©a
,Çame.
Àn
Ë%Üacf->
nbuckës
];

901 
ls
;Ü†ls->
√xt
)

903 
n
 = 1;

904 
Àn
 = 
	`ngx_°æí
(
ls
->
«me
);

905 i‡(
«me
.
Àn
 !À¿|| 
	`ngx_°∫cmp
“ame.
d©a
, 
ls
->name,Çame.len)) {

908 i‡(
	`ngx_°æí
(
ls
->
«me
Ë!0 &&Üs->
publishög
 == 1) {

909 
ngx_wÆk°ªam_öfo
 *
wÆk°ªam_öfo
;

912 
wÆk°ªam_öfo
 = (
ngx_wÆk°ªam_öfo
 *)
	`ngx_pˇŒoc
(
r
->
c⁄√˘i⁄
->
poﬁ
, (ngx_walkstream_info));

913 
	`ngx_˝y°∫
(
wÆk°ªam_öfo
->
°ªam_«me
, 
ls
->
«me
, 
	`ngx_°æí
(ls->name) + 1);

914 i‡(
	`ngx_föd_queue1
(
˘x
->
°ªams
, 
wÆk°ªam_öfo
->
°ªam_«me
) == 0) {

915 
	`ngx_queue_ö£π1
(
˘x
->
°ªams
, 
wÆk°ªam_öfo
);

919 
ngx_puŒ_ªc‹d_°ªam_öfo
 *
puŒ°ªam_öfo
;

921 
puŒ°ªam_öfo
 = (
ngx_puŒ_ªc‹d_°ªam_öfo
 *)
	`ngx_pˇŒoc
(

922 
r
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_puŒ_ªc‹d_°ªam_öfo
));

924 
	`ngx_˝y°∫
(
puŒ°ªam_öfo
->
°ªam_«me
, 
ls
->
«me
, 
	`ngx_°æí
(ls->name) + 1);

926 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"liveid", ("liveid"Ë- 1, &
liveid
Ë=
NGX_OK
) {

927 
	`ngx_˝y°∫
(
puŒ°ªam_öfo
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
+1);

930 i‡(
	`ngx_föd_queue1
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
->
°ªam_«me
) == 0) {

931 
	`ngx_queue_ö£π2
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
);

932 
	`ngx_¥öt_queue2
(
˘x
->
puŒ_°ªams
);

936 
s
 = 
	`ngx_πmp_c⁄åﬁ_wÆk_°ªam
(
r
, 
ls
);

937 i‡(
s
 !
NGX_CONF_OK
) {

938  
s
;

944 i‡(0 =
n
) {

945 
ngx_°r_t
 
liveid
;

946 
ngx_°ªam_öfo
 *
tmp_öfo
;

947 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

948 
ngx_puŒ_ªc‹d_°ªam_öfo
 *
puŒ°ªam_öfo
;

950 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

951 
tmp_öfo
 = (
ngx_°ªam_öfo
 *)
	`ngx_pˇŒoc
(
ngx_cy˛e
->
poﬁ
, (ngx_stream_info));

952 
tmp_öfo
->
is_ªc‹d
 = 1;

953 
	`ngx_˝y°∫
(
tmp_öfo
->
°ªam_«me
, 
«me
.
d©a
,Çame.
Àn
 + 1);

957 
puŒ°ªam_öfo
 = (
ngx_puŒ_ªc‹d_°ªam_öfo
 *)
	`ngx_pˇŒoc
(

958 
ngx_cy˛e
->
poﬁ
, (
ngx_puŒ_ªc‹d_°ªam_öfo
));

960 
	`ngx_˝y°∫
(
puŒ°ªam_öfo
->
°ªam_«me
, 
«me
.
d©a
,Çame.
Àn
 + 1);

963 i‡(
˘x
->
mëhod
.
Àn
 == ("start") - 1 &&

964 
	`ngx_°∫cmp
(
˘x
->
mëhod
.
d©a
, "°¨t", ctx->mëhod.
Àn
) == 0)

966 
	`ngx_memzîo
(
tmp_öfo
->
liveid
, (tmp_info->liveid));

967 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"liveid", ("liveid"Ë- 1, &
liveid
Ë!
NGX_OK
) {

968 
liveid
.
Àn
 = 0;

970 i‡(
liveid
.
Àn
 > 0) {

971 
	`ngx_˝y°∫
(
tmp_öfo
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
+1);

972 
	`ngx_˝y°∫
(
puŒ°ªam_öfo
->
liveid
,Üiveid.
d©a
,Üiveid.
Àn
+1);

974 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
->
°ªam_«me
) == 0) {

975 
	`ngx_queue_ö£π
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
);

977 
	`ngx_queue_£t_ªc‹d_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
->
°ªam_«me
, 1);

978 i‡(
liveid
.
Àn
 > 0) {

979 
	`ngx_queue_£t_liveid
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
->
°ªam_«me
,Åmp_öfo->
liveid
);

983 i‡(
	`ngx_föd_queue1
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
->
°ªam_«me
) == 0) {

984 
	`ngx_queue_ö£π2
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
);

985 
	`ngx_¥öt_queue2
(
˘x
->
puŒ_°ªams
);

986 
	`¥ötf
("start here\n");

989 
ngx_πmp_ªœy_°©ic_t
 *
rs
;

991 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

993 
rs
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_πmp_ªœy_°©ic_t
));

994 i‡(
rs
 =
NULL
) {

995  
NGX_CONF_ERROR
;

998 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
øcf
->
log
, 0,

1001 
	`¥ötf
("r†%p\n", 
puŒ_rs
);

1002 
˘x
 = 
	`ngx_πmp_ªœy_¸óã_c⁄√˘i⁄
(&
puŒ_rs
->
c˘x
, &
«me
,

1003 
puŒ_rs
->
èrgë
);

1004 i‡(
˘x
) {

1005 
˘x
->
£ssi⁄
->
°©ic_ªœy
 = 1;

1006 
	`ngx_πmp_ªœy_∂ay_loˇl
(
˘x
->
£ssi⁄
);

1007 
	`¥ötf
("runÖlay fun\n");

1011 i‡(
liveid
.
Àn
 > 0) {

1012 
	`ngx_queue_£t_liveid
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
->
°ªam_«me
,ÖuŒ°ªam_öfo->
liveid
);

1016 i‡(
˘x
->
mëhod
.
Àn
 == ("stop") - 1 &&

1017 
	`ngx_°∫cmp
(
˘x
->
mëhod
.
d©a
, "°›", ctx->mëhod.
Àn
) == 0)

1019 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
->
°ªam_«me
) == 1) {

1020 
	`ngx_queue_£t_ªc‹d_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
->
°ªam_«me
, 0);

1023 i‡(
	`ngx_föd_queue1
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
->
°ªam_«me
) == 1) {

1024 
	`ngx_queue_ªmove_°©us
(
˘x
->
puŒ_°ªams
, 
puŒ°ªam_öfo
->
°ªam_«me
);

1030  
NGX_CONF_OK
;

1031 
	}
}

1035 
	$ngx_πmp_c⁄åﬁ_wÆk_£rvî
(
ngx_hâp_ªque°_t
 *
r
,

1036 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
)

1038 
ngx_°r_t
 
≠p
;

1039 
ngx_uöt_t
 
n
;

1040 c⁄° *
s
;

1041 
ngx_πmp_c‹e_≠p_c⁄f_t
 **
pˇcf
;

1043 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"≠p", ("≠p"Ë- 1, &
≠p
Ë!
NGX_OK
) {

1044 
≠p
.
Àn
 = 0;

1047 
pˇcf
 = 
cscf
->
≠∂iˇti⁄s
.
ñts
;

1049 
n
 = 0;Ç < 
cscf
->
≠∂iˇti⁄s
.
√…s
; ++n, ++
pˇcf
) {

1050 i‡(
≠p
.
Àn
 && ((*
pˇcf
)->
«me
.len !=ápp.len ||

1051 
	`ngx_°∫cmp
((*
pˇcf
)->
«me
.
d©a
, 
≠p
.d©a,áµ.
Àn
)))

1056 
s
 = 
	`ngx_πmp_c⁄åﬁ_wÆk_≠p
(
r
, *
pˇcf
);

1057 i‡(
s
 !
NGX_CONF_OK
) {

1058  
s
;

1062  
NGX_CONF_OK
;

1063 
	}
}

1067 
	$ngx_πmp_c⁄åﬁ_wÆk
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_πmp_c⁄åﬁ_h™dÀr_t
 
h
)

1069 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
ngx_πmp_c‹e_maö_c⁄f
;

1071 
ngx_°r_t
 
§v
;

1072 
ngx_uöt_t
 
¢
, 
n
;

1073 c⁄° *
msg
;

1074 
ngx_πmp_£ssi⁄_t
 **
s
;

1075 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1076 
ngx_πmp_c‹e_§v_c⁄f_t
 **
pcscf
;

1078 
¢
 = 0;

1079 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"§v", ("§v"Ë- 1, &
§v
Ë=
NGX_OK
) {

1080 
¢
 = 
	`ngx_©oi
(
§v
.
d©a
, srv.
Àn
);

1083 i‡(
¢
 >
cmcf
->
£rvîs
.
√…s
) {

1087 
pcscf
 = 
cmcf
->
£rvîs
.
ñts
;

1088 
pcscf
 +
¢
;

1090 
msg
 = 
	`ngx_πmp_c⁄åﬁ_wÆk_£rvî
(
r
, *
pcscf
);

1091 i‡(
msg
 !
NGX_CONF_OK
) {

1092  
msg
;

1095 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1097 
s
 = 
˘x
->
£ssi⁄s
.
ñts
;

1098 
n
 = 0;Ç < 
˘x
->
£ssi⁄s
.
√…s
;Ç++) {

1099 
msg
 = 
	`h
(
r
, 
s
[
n
]);

1100 i‡(
msg
 !
NGX_CONF_OK
) {

1101  
msg
;

1105  
NGX_CONF_OK
;

1106 
	}
}

1109 
ngx_öt_t


1110 
	$ngx_πmp_c⁄åﬁ_wÆk°ªam
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
mëhod
)

1112 
ngx_queue_t
 *
q
;

1113 
u_ch¨
 *
p1
;

1114 
u_öt
 
i
;

1115 
ngx_buf_t
 *
b
;

1116 c⁄° *
msg
;

1117 
ngx_chaö_t
 
˛
;

1118 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1120 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1122 i‡(
˘x
->
mëhod
.
Àn
 == ("publisher") - 1 &&

1123 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "publishî", ctx->mëhod.
Àn
) == 0)

1125 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_PUBLISHER
;

1127 } i‡(
˘x
->
mëhod
.
Àn
 == ("subscriber") - 1 &&

1128 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "subs¸ibî", ctx->mëhod.
Àn
)

1131 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_SUBSCRIBER
;

1133 } i‡(
mëhod
->
Àn
 == ("client") - 1 &&

1134 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "˛õ¡", ctx->mëhod.
Àn
) == 0)

1136 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_CLIENT
;

1139 
msg
 = "Undefined filter";

1140 
îr‹
;

1144 
msg
 = 
	`ngx_πmp_c⁄åﬁ_wÆk
(
r
, 
ngx_πmp_c⁄åﬁ_wÆk°ªam_h™dÀr
);

1145 i‡(
msg
 !
NGX_CONF_OK
) {

1146 
îr‹
;

1150 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 15);

1151 i‡(
b
 =
NULL
) {

1152 
îr‹
;

1155 
	`ngx_memzîo
(&
˛
, (cl));

1156 
˛
.
buf
 = 
b
;

1158 
p1
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
NGX_RTMP_MAX_STREAM_STR
);

1159 
b
->
pos
 = 
p1
;

1161 
q
 = 
	`ngx_queue_hód
(
˘x
->
°ªams
);

1162 
q
 !
	`ngx_queue_£¡öñ
(
˘x
->
°ªams
);

1163 
q
 = 
	`ngx_queue_√xt
(q))

1165 
ngx_wÆk°ªam_öfo
 *
ñeNode
 = 
	`ngx_queue_d©a
(
q
,Çgx_wÆk°ªam_öfo, 
que
);

1166 
i
=0; i<
	`ngx_°æí
(
ñeNode
->
°ªam_«me
); i++) {

1167 *
p1
++ = 
ñeNode
->
°ªam_«me
[
i
];

1169 *
p1
++ = ',';

1171 
p1
--;

1172 i‡(*
p1
 == ',') {

1173 *
p1
 = '\n';

1176 
b
->
œ°
 = 
p1
;

1177 
b
->
œ°_buf
 = 1;

1179 i‡(
b
->
œ°
 - b->
pos
 < 0) {

1180 
b
->
pos
 = (
u_ch¨
 *)"null";

1181 
b
->
œ°
 = b->
pos
 + ("null") - 1;

1182 
b
->
mem‹y
 = 1;

1185 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = ("text/plain") - 1;

1186 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = (
u_ch¨
 *) "text/plain";

1187 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

1188 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

1191 
	`ngx_hâp_£nd_hódî
(
r
);

1193  
	`ngx_hâp_ouçut_fûãr
(
r
, &
˛
);

1195 
îr‹
:

1196  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1197 
	}
}

1200 
ngx_öt_t


1201 
	$ngx_πmp_c⁄åﬁ_puŒ_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
mëhod
)

1203 
ngx_buf_t
 *
b
;

1204 c⁄° *
msg
;

1205 
ngx_chaö_t
 
˛
;

1206 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1208 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1209 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_PUBLISHER
;

1211 
msg
 = 
	`ngx_πmp_c⁄åﬁ_wÆk
(
r
, 
ngx_πmp_c⁄åﬁ_puŒ_ªc‹d_h™dÀr
);

1212 i‡(
msg
 !
NGX_CONF_OK
) {

1213 
îr‹
;

1216 i‡(
˘x
->
∑th
.
Àn
 == 0) {

1217  
NGX_HTTP_NO_CONTENT
;

1222 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

1223 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
˘x
->
∑th
.
Àn
;

1225 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
˘x
->
∑th
.
Àn
);

1226 i‡(
b
 =
NULL
) {

1227 
îr‹
;

1230 
	`ngx_memzîo
(&
˛
, (cl));

1231 
˛
.
buf
 = 
b
;

1233 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
∑th
.
d©a
, ctx->∑th.
Àn
);

1234 
b
->
œ°_buf
 = 1;

1236 
	`ngx_hâp_£nd_hódî
(
r
);

1238  
	`ngx_hâp_ouçut_fûãr
(
r
, &
˛
);

1240 
îr‹
:

1241  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1242 
	}
}

1245 
ngx_öt_t


1246 
	$ngx_πmp_c⁄åﬁ_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
mëhod
)

1248 
ngx_buf_t
 *
b
;

1249 c⁄° *
msg
;

1250 
ngx_chaö_t
 
˛
;

1251 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1253 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1254 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_PUBLISHER
;

1256 
msg
 = 
	`ngx_πmp_c⁄åﬁ_wÆk
(
r
, 
ngx_πmp_c⁄åﬁ_ªc‹d_h™dÀr
);

1257 i‡(
msg
 !
NGX_CONF_OK
) {

1258 
îr‹
;

1261 i‡(
˘x
->
∑th
.
Àn
 == 0) {

1262  
NGX_HTTP_NO_CONTENT
;

1267 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

1268 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
˘x
->
∑th
.
Àn
;

1270 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
˘x
->
∑th
.
Àn
);

1271 i‡(
b
 =
NULL
) {

1272 
îr‹
;

1275 
	`ngx_memzîo
(&
˛
, (cl));

1276 
˛
.
buf
 = 
b
;

1278 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
∑th
.
d©a
, ctx->∑th.
Àn
);

1279 
b
->
œ°_buf
 = 1;

1281 
	`ngx_hâp_£nd_hódî
(
r
);

1283  
	`ngx_hâp_ouçut_fûãr
(
r
, &
˛
);

1285 
îr‹
:

1286  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1287 
	}
}

1290 
ngx_öt_t


1291 
	$ngx_πmp_c⁄åﬁ_m⁄ô‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
mëhod
)

1293 
size_t
 
Àn
;

1294 
u_ch¨
 *
p
;

1295 
ngx_buf_t
 *
b
;

1296 
ngx_chaö_t
 
˛
;

1297 c⁄° *
msg
;

1298 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1300 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1302 i‡(
mëhod
->
Àn
 == ("start_monitor") - 1 &&

1303 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "°¨t_m⁄ô‹", ctx->mëhod.
Àn
) == 0)

1305 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_STARTMONITOR
;

1307 } i‡(
mëhod
->
Àn
 == ("stop_monitor") - 1 &&

1308 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "°›_m⁄ô‹", ctx->mëhod.
Àn
) == 0)

1310 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_STOPMONITOR
;

1313 
msg
 = "Undefined filter";

1314 
îr‹
;

1317 
msg
 = 
	`ngx_πmp_c⁄åﬁ_wÆk
(
r
, 
ngx_πmp_c⁄åﬁ_m⁄ô‹_h™dÀr
);

1318 i‡(
msg
 !
NGX_CONF_OK
) {

1319 
îr‹
;

1324 
Àn
 = 
NGX_INT_T_LEN
;

1326 
p
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

1327 i‡(
p
 =
NULL
) {

1328  
NGX_ERROR
;

1331 
Àn
 = (
size_t
Ë(
	`ngx_¢¥ötf
(
p
,Üí, "%ui", 
˘x
->
cou¡
) -Ö);

1333 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

1334 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

1336 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1337 i‡(
b
 =
NULL
) {

1338 
îr‹
;

1341 
b
->
°¨t
 = b->
pos
 = 
p
;

1342 
b
->
íd
 = b->
œ°
 = 
p
 + 
Àn
;

1343 
b
->
ãmp‹¨y
 = 1;

1344 
b
->
œ°_buf
 = 1;

1346 
	`ngx_memzîo
(&
˛
, (cl));

1347 
˛
.
buf
 = 
b
;

1349 
	`ngx_hâp_£nd_hódî
(
r
);

1351  
	`ngx_hâp_ouçut_fûãr
(
r
, &
˛
);

1353 
îr‹
:

1354  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1355 
	}
}

1358 
ngx_öt_t


1359 
	$ngx_πmp_c⁄åﬁ_dr›
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
mëhod
)

1361 
size_t
 
Àn
;

1362 
u_ch¨
 *
p
;

1363 
ngx_buf_t
 *
b
;

1364 
ngx_chaö_t
 
˛
;

1365 c⁄° *
msg
;

1366 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1368 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1370 i‡(
˘x
->
mëhod
.
Àn
 == ("publisher") - 1 &&

1371 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "publishî", ctx->mëhod.
Àn
) == 0)

1373 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_PUBLISHER
;

1375 } i‡(
˘x
->
mëhod
.
Àn
 == ("subscriber") - 1 &&

1376 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "subs¸ibî", ctx->mëhod.
Àn
)

1379 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_SUBSCRIBER
;

1381 } i‡(
mëhod
->
Àn
 == ("client") - 1 &&

1382 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "˛õ¡", ctx->mëhod.
Àn
) == 0)

1384 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_CLIENT
;

1387 
msg
 = "Undefined filter";

1388 
îr‹
;

1391 
msg
 = 
	`ngx_πmp_c⁄åﬁ_wÆk
(
r
, 
ngx_πmp_c⁄åﬁ_dr›_h™dÀr
);

1392 i‡(
msg
 !
NGX_CONF_OK
) {

1393 
îr‹
;

1398 
Àn
 = 
NGX_INT_T_LEN
;

1400 
p
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

1401 i‡(
p
 =
NULL
) {

1402  
NGX_ERROR
;

1405 
Àn
 = (
size_t
Ë(
	`ngx_¢¥ötf
(
p
,Üí, "%ui", 
˘x
->
cou¡
) -Ö);

1407 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

1408 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

1410 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1411 i‡(
b
 =
NULL
) {

1412 
îr‹
;

1415 
b
->
°¨t
 = b->
pos
 = 
p
;

1416 
b
->
íd
 = b->
œ°
 = 
p
 + 
Àn
;

1417 
b
->
ãmp‹¨y
 = 1;

1418 
b
->
œ°_buf
 = 1;

1420 
	`ngx_memzîo
(&
˛
, (cl));

1421 
˛
.
buf
 = 
b
;

1423 
	`ngx_hâp_£nd_hódî
(
r
);

1425  
	`ngx_hâp_ouçut_fûãr
(
r
, &
˛
);

1427 
îr‹
:

1428  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1429 
	}
}

1432 
ngx_öt_t


1433 
	$ngx_πmp_c⁄åﬁ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
mëhod
)

1435 
size_t
 
Àn
;

1436 
u_ch¨
 *
p
;

1437 
ngx_buf_t
 *
b
;

1438 
ngx_chaö_t
 
˛
;

1439 c⁄° *
msg
;

1440 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1442 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1444 i‡(
˘x
->
mëhod
.
Àn
 == ("publisher") - 1 &&

1445 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "publishî", ctx->mëhod.
Àn
) == 0)

1447 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_PUBLISHER
;

1449 } i‡(
˘x
->
mëhod
.
Àn
 == ("subscriber") - 1 &&

1450 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "subs¸ibî", ctx->mëhod.
Àn
)

1453 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_SUBSCRIBER
;

1455 } i‡(
˘x
->
mëhod
.
Àn
 == ("client") - 1 &&

1456 
	`ngx_memcmp
(
˘x
->
mëhod
.
d©a
, "˛õ¡", ctx->mëhod.
Àn
) == 0)

1458 
˘x
->
fûãr
 = 
NGX_RTMP_CONTROL_FILTER_CLIENT
;

1461 
msg
 = "Undefined filter";

1462 
îr‹
;

1465 
msg
 = 
	`ngx_πmp_c⁄åﬁ_wÆk
(
r
, 
ngx_πmp_c⁄åﬁ_ªdúe˘_h™dÀr
);

1466 i‡(
msg
 !
NGX_CONF_OK
) {

1467 
îr‹
;

1472 
Àn
 = 
NGX_INT_T_LEN
;

1474 
p
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

1475 i‡(
p
 =
NULL
) {

1476 
îr‹
;

1479 
Àn
 = (
size_t
Ë(
	`ngx_¢¥ötf
(
p
,Üí, "%ui", 
˘x
->
cou¡
) -Ö);

1481 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

1482 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

1484 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1485 i‡(
b
 =
NULL
) {

1486 
îr‹
;

1489 
b
->
°¨t
 = b->
pos
 = 
p
;

1490 
b
->
íd
 = b->
œ°
 = 
p
 + 
Àn
;

1491 
b
->
ãmp‹¨y
 = 1;

1492 
b
->
œ°_buf
 = 1;

1494 
	`ngx_memzîo
(&
˛
, (cl));

1495 
˛
.
buf
 = 
b
;

1497 
	`ngx_hâp_£nd_hódî
(
r
);

1499  
	`ngx_hâp_ouçut_fûãr
(
r
, &
˛
);

1501 
îr‹
:

1502  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1503 
	}
}

1506 
ngx_öt_t


1507 
	$ngx_πmp_c⁄åﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

1509 
u_ch¨
 *
p
;

1510 
ngx_°r_t
 
£˘i⁄
, 
mëhod
;

1511 
ngx_uöt_t
 
n
;

1512 
ngx_πmp_c⁄åﬁ_˘x_t
 *
˘x
;

1513 
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
 *
Œcf
;

1515 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1516 i‡(
Œcf
->
c⁄åﬁ
 == 0) {

1517  
NGX_DECLINED
;

1523 
	`ngx_°r_nuŒ
(&
£˘i⁄
);

1524 
	`ngx_°r_nuŒ
(&
mëhod
);

1526 
n
 = 
r
->
uri
.
Àn
;Ç; --n) {

1527 
p
 = &
r
->
uri
.
d©a
[
n
 - 1];

1529 i‡(*
p
 != '/') {

1533 i‡(
mëhod
.
d©a
) {

1534 
£˘i⁄
.
d©a
 = 
p
 + 1;

1535 
£˘i⁄
.
Àn
 = 
mëhod
.
d©a
 - section.data - 1;

1539 
mëhod
.
d©a
 = 
p
 + 1;

1540 
mëhod
.
Àn
 = 
r
->
uri
.
d©a
 +Ñ->uri.len - method.data;

1543 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1545 &
£˘i⁄
, &
mëhod
);

1547 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_πmp_c⁄åﬁ_˘x_t
));

1548 i‡(
˘x
 =
NULL
) {

1549  
NGX_ERROR
;

1552 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_πmp_c⁄åﬁ_moduÀ
);

1554 i‡(
	`ngx_¨øy_öô
(&
˘x
->
£ssi⁄s
, 
r
->
poﬁ
, 1, (*)Ë!
NGX_OK
) {

1555  
NGX_ERROR
;

1558 
˘x
->
°ªams
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_queue_t
));

1559 
	`ngx_queue_öô
(
˘x
->
°ªams
);

1561 
˘x
->
puŒ_°ªams
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_queue_t
));

1562 
	`ngx_queue_öô
(
˘x
->
puŒ_°ªams
);

1564 
˘x
->
mëhod
 = method;

1566 
	#NGX_RTMP_CONTROL_SECTION
(
Êag
, 
£˙ame
) \

1567 i‡(
Œcf
->
c⁄åﬁ
 & 
NGX_RTMP_CONTROL_
##
Êag
 && \

1568 
£˘i⁄
.
Àn
 == (#secname) - 1 && \

1569 
	`ngx_°∫cmp
(
£˘i⁄
.
d©a
, #secname, (#secname) - 1) == 0) \

1571  
ngx_πmp_c⁄åﬁ_
##
	`£˙ame
(
r
, &
mëhod
); \

1572 }

	)

1575 
	`NGX_RTMP_CONTROL_SECTION
(
RECORD
, 
ªc‹d
);

1576 
	`NGX_RTMP_CONTROL_SECTION
(
PULL_RECORD
, 
puŒ_ªc‹d
);

1577 
	`NGX_RTMP_CONTROL_SECTION
(
DROP
, 
dr›
);

1578 
	`NGX_RTMP_CONTROL_SECTION
(
REDIRECT
, 
ªdúe˘
);

1579 
	`NGX_RTMP_CONTROL_SECTION
(
WALKSTREAM
, 
wÆk°ªam
);

1580 
	`NGX_RTMP_CONTROL_SECTION
(
MONITOR
, 
m⁄ô‹
);

1582 #unde‡
NGX_RTMP_CONTROL_SECTION


1584  
NGX_DECLINED
;

1585 
	}
}

1589 
	$ngx_πmp_c⁄åﬁ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1591 
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
 *
c⁄f
;

1593 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
));

1594 i‡(
c⁄f
 =
NULL
) {

1595  
NULL
;

1598 
c⁄f
->
c⁄åﬁ
 = 0;

1599 
c⁄f
->
cc_ªc‹d_mode
 = 
NGX_CONF_UNSET
;

1601  
c⁄f
;

1602 
	}
}

1606 
	$ngx_πmp_c⁄åﬁ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1608 
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1609 
ngx_πmp_c⁄åﬁ_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1611 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
c⁄åﬁ
, 
¥ev
->control, 0);

1612 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
cc_ªc‹d_mode
, 
¥ev
->cc_record_mode, 0);

1614  
NGX_CONF_OK
;

1615 
	}
}

1619 
	$ngx_πmp_c⁄åﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1621 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1623 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1624 
˛cf
->
h™dÀr
 = 
ngx_πmp_c⁄åﬁ_h™dÀr
;

1626  
	`ngx_c⁄f_£t_bômask_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

1627 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_core_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_evít.h
>

10 
	~<ngöx.h
>

11 
	~"ngx_πmp.h
"

14 *
ngx_πmp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_πmp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_πmp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

18 *
ngx_πmp_c‹e_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

19 *
ngx_πmp_c‹e_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

20 *
chûd
);

21 *
ngx_πmp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

22 *
c⁄f
);

23 *
ngx_πmp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

24 *
c⁄f
);

25 *
ngx_πmp_c‹e_≠∂iˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

29 
ngx_πmp_c‹e_maö_c⁄f_t
 *
	gngx_πmp_c‹e_maö_c⁄f
;

32 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_so_kì∑live
 = {

33 
ngx_c⁄f_dïªˇãd
, "so_keepalive",

38 
ngx_comm™d_t
 
	gngx_πmp_c‹e_comm™ds
[] = {

40 { 
ngx_°rög
("server"),

41 
NGX_RTMP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

42 
ngx_πmp_c‹e_£rvî
,

45 
NULL
 },

47 { 
ngx_°rög
("listen"),

48 
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE12
,

49 
ngx_πmp_c‹e_li°í
,

50 
NGX_RTMP_SRV_CONF_OFFSET
,

52 
NULL
 },

54 { 
ngx_°rög
("application"),

55 
NGX_RTMP_SRV_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

56 
ngx_πmp_c‹e_≠∂iˇti⁄
,

57 
NGX_RTMP_SRV_CONF_OFFSET
,

59 
NULL
 },

61 { 
ngx_°rög
("so_keepalive"),

62 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_FLAG
,

63 
ngx_c⁄f_£t_Êag_¶Ÿ
,

64 
NGX_RTMP_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
so_kì∑live
),

66 &
ngx_c⁄f_dïªˇãd_so_kì∑live
 },

68 { 
ngx_°rög
("timeout"),

69 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_m£c_¶Ÿ
,

71 
NGX_RTMP_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
timeout
),

73 
NULL
 },

75 { 
ngx_°rög
("ping"),

76 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

77 
ngx_c⁄f_£t_m£c_¶Ÿ
,

78 
NGX_RTMP_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
pög
),

80 
NULL
 },

82 { 
ngx_°rög
("ping_timeout"),

83 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_c⁄f_£t_m£c_¶Ÿ
,

85 
NGX_RTMP_SRV_CONF_OFFSET
,

86 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
pög_timeout
),

87 
NULL
 },

89 { 
ngx_°rög
("max_streams"),

90 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_c⁄f_£t_num_¶Ÿ
,

92 
NGX_RTMP_SRV_CONF_OFFSET
,

93 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
max_°ªams
),

94 
NULL
 },

96 { 
ngx_°rög
("ack_window"),

97 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_num_¶Ÿ
,

99 
NGX_RTMP_SRV_CONF_OFFSET
,

100 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
ack_wödow
),

101 
NULL
 },

103 { 
ngx_°rög
("chunk_size"),

104 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

105 
ngx_c⁄f_£t_num_¶Ÿ
,

106 
NGX_RTMP_SRV_CONF_OFFSET
,

107 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
chunk_size
),

108 
NULL
 },

110 { 
ngx_°rög
("max_message"),

111 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

112 
ngx_c⁄f_£t_size_¶Ÿ
,

113 
NGX_RTMP_SRV_CONF_OFFSET
,

114 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
max_mesßge
),

115 
NULL
 },

117 { 
ngx_°rög
("out_queue"),

118 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

119 
ngx_c⁄f_£t_size_¶Ÿ
,

120 
NGX_RTMP_SRV_CONF_OFFSET
,

121 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
out_queue
),

122 
NULL
 },

124 { 
ngx_°rög
("out_cork"),

125 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

126 
ngx_c⁄f_£t_size_¶Ÿ
,

127 
NGX_RTMP_SRV_CONF_OFFSET
,

128 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
out_c‹k
),

129 
NULL
 },

131 { 
ngx_°rög
("busy"),

132 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

133 
ngx_c⁄f_£t_Êag_¶Ÿ
,

134 
NGX_RTMP_SRV_CONF_OFFSET
,

135 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
busy
),

136 
NULL
 },

139 { 
ngx_°rög
("play_time_fix"),

140 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

141 
ngx_c⁄f_£t_Êag_¶Ÿ
,

142 
NGX_RTMP_SRV_CONF_OFFSET
,

143 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
∂ay_time_fix
),

144 
NULL
 },

146 { 
ngx_°rög
("publish_time_fix"),

147 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

148 
ngx_c⁄f_£t_Êag_¶Ÿ
,

149 
NGX_RTMP_SRV_CONF_OFFSET
,

150 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
publish_time_fix
),

151 
NULL
 },

153 { 
ngx_°rög
("buflen"),

154 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

155 
ngx_c⁄f_£t_m£c_¶Ÿ
,

156 
NGX_RTMP_SRV_CONF_OFFSET
,

157 
off£tof
(
ngx_πmp_c‹e_§v_c⁄f_t
, 
buÊí
),

158 
NULL
 },

160 
ngx_nuŒ_comm™d


164 
ngx_πmp_moduÀ_t
 
	gngx_πmp_c‹e_moduÀ_˘x
 = {

165 
NULL
,

166 
NULL
,

167 
ngx_πmp_c‹e_¸óã_maö_c⁄f
,

168 
NULL
,

169 
ngx_πmp_c‹e_¸óã_§v_c⁄f
,

170 
ngx_πmp_c‹e_mîge_§v_c⁄f
,

171 
ngx_πmp_c‹e_¸óã_≠p_c⁄f
,

172 
ngx_πmp_c‹e_mîge_≠p_c⁄f


176 
ngx_moduÀ_t
 
	gngx_πmp_c‹e_moduÀ
 = {

177 
NGX_MODULE_V1
,

178 &
ngx_πmp_c‹e_moduÀ_˘x
,

179 
ngx_πmp_c‹e_comm™ds
,

180 
NGX_RTMP_MODULE
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NGX_MODULE_V1_PADDING


193 
	$ngx_πmp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

195 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

197 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c‹e_maö_c⁄f_t
));

198 i‡(
cmcf
 =
NULL
) {

199  
NULL
;

202 
ngx_πmp_c‹e_maö_c⁄f
 = 
cmcf
;

204 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

205 (
ngx_πmp_c‹e_§v_c⁄f_t
 *))

206 !
NGX_OK
)

208  
NULL
;

211 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_πmp_li°í_t
))

212 !
NGX_OK
)

214  
NULL
;

217  
cmcf
;

218 
	}
}

222 
	$ngx_πmp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

224 
ngx_πmp_c‹e_§v_c⁄f_t
 *
c⁄f
;

226 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c‹e_§v_c⁄f_t
));

227 i‡(
c⁄f
 =
NULL
) {

228  
NULL
;

231 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
≠∂iˇti⁄s
, 
cf
->
poﬁ
, 4,

232 (
ngx_πmp_c‹e_≠p_c⁄f_t
 *))

233 !
NGX_OK
)

235  
NULL
;

238 
c⁄f
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

239 
c⁄f
->
pög
 = 
NGX_CONF_UNSET_MSEC
;

240 
c⁄f
->
pög_timeout
 = 
NGX_CONF_UNSET_MSEC
;

241 
c⁄f
->
so_kì∑live
 = 
NGX_CONF_UNSET
;

242 
c⁄f
->
max_°ªams
 = 
NGX_CONF_UNSET
;

243 
c⁄f
->
chunk_size
 = 
NGX_CONF_UNSET
;

244 
c⁄f
->
ack_wödow
 = 
NGX_CONF_UNSET_UINT
;

245 
c⁄f
->
max_mesßge
 = 
NGX_CONF_UNSET_SIZE
;

246 
c⁄f
->
out_queue
 = 
NGX_CONF_UNSET_SIZE
;

247 
c⁄f
->
out_c‹k
 = 
NGX_CONF_UNSET_SIZE
;

248 
c⁄f
->
∂ay_time_fix
 = 
NGX_CONF_UNSET
;

249 
c⁄f
->
publish_time_fix
 = 
NGX_CONF_UNSET
;

250 
c⁄f
->
buÊí
 = 
NGX_CONF_UNSET_MSEC
;

251 
c⁄f
->
busy
 = 
NGX_CONF_UNSET
;

253  
c⁄f
;

254 
	}
}

258 
	$ngx_πmp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

260 
ngx_πmp_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

261 
ngx_πmp_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

263 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

264 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
pög
, 
¥ev
->ping, 60000);

265 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
pög_timeout
, 
¥ev
->ping_timeout, 30000);

267 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
so_kì∑live
, 
¥ev
->so_keepalive, 0);

268 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
max_°ªams
, 
¥ev
->max_streams, 32);

269 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
chunk_size
, 
¥ev
->chunk_size, 4096);

270 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ack_wödow
, 
¥ev
->ack_window, 5000000);

271 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_mesßge
, 
¥ev
->max_message,

273 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
out_queue
, 
¥ev
->out_queue, 256);

274 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
out_c‹k
, 
¥ev
->out_cork,

275 
c⁄f
->
out_queue
 / 8);

276 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∂ay_time_fix
, 
¥ev
->play_time_fix, 1);

277 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
publish_time_fix
, 
¥ev
->publish_time_fix, 1);

278 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
buÊí
, 
¥ev
->buflen, 1000);

279 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
busy
, 
¥ev
->busy, 0);

281 i‡(
¥ev
->
poﬁ
 =
NULL
) {

282 
¥ev
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(4096, &
cf
->
cy˛e
->
√w_log
);

283 i‡(
¥ev
->
poﬁ
 =
NULL
) {

284  
NGX_CONF_ERROR
;

288 
c⁄f
->
poﬁ
 = 
¥ev
->pool;

290  
NGX_CONF_OK
;

291 
	}
}

295 
	$ngx_πmp_c‹e_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

297 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
c⁄f
;

299 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c‹e_≠p_c⁄f_t
));

300 i‡(
c⁄f
 =
NULL
) {

301  
NULL
;

304 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
≠∂iˇti⁄s
, 
cf
->
poﬁ
, 1,

305 (
ngx_πmp_c‹e_≠p_c⁄f_t
 *))

306 !
NGX_OK
)

308  
NULL
;

311  
c⁄f
;

312 
	}
}

316 
	$ngx_πmp_c‹e_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

318 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

319 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

321 ()
¥ev
;

322 ()
c⁄f
;

324  
NGX_CONF_OK
;

325 
	}
}

329 
	$ngx_πmp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

331 *
rv
;

332 *
mc⁄f
;

333 
ngx_uöt_t
 
m
;

334 
ngx_c⁄f_t
 
pcf
;

335 
ngx_πmp_moduÀ_t
 *
moduÀ
;

336 
ngx_πmp_c⁄f_˘x_t
 *
˘x
, *
πmp_˘x
;

337 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

338 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

340 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c⁄f_˘x_t
));

341 i‡(
˘x
 =
NULL
) {

342  
NGX_CONF_ERROR
;

345 
πmp_˘x
 = 
cf
->
˘x
;

346 
˘x
->
maö_c⁄f
 = 
πmp_˘x
->main_conf;

350 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_πmp_max_moduÀ
);

351 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

352  
NGX_CONF_ERROR
;

355 
˘x
->
≠p_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_πmp_max_moduÀ
);

356 i‡(
˘x
->
≠p_c⁄f
 =
NULL
) {

357  
NGX_CONF_ERROR
;

360 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

361 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_RTMP_MODULE
) {

365 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

367 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

368 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

369 i‡(
mc⁄f
 =
NULL
) {

370  
NGX_CONF_ERROR
;

373 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

376 i‡(
moduÀ
->
¸óã_≠p_c⁄f
) {

377 
mc⁄f
 = 
moduÀ
->
	`¸óã_≠p_c⁄f
(
cf
);

378 i‡(
mc⁄f
 =
NULL
) {

379  
NGX_CONF_ERROR
;

382 
˘x
->
≠p_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

388 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

389 
cscf
->
˘x
 = ctx;

391 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

393 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

394 i‡(
cscÂ
 =
NULL
) {

395  
NGX_CONF_ERROR
;

398 *
cscÂ
 = 
cscf
;

403 
pcf
 = *
cf
;

404 
cf
->
˘x
 = ctx;

405 
cf
->
cmd_ty≥
 = 
NGX_RTMP_SRV_CONF
;

407 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

409 *
cf
 = 
pcf
;

411  
rv
;

412 
	}
}

416 
	$ngx_πmp_c‹e_≠∂iˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

418 *
rv
;

419 
ngx_öt_t
 
i
;

420 
ngx_°r_t
 *
vÆue
;

421 
ngx_c⁄f_t
 
ßve
;

422 
ngx_πmp_moduÀ_t
 *
moduÀ
;

423 
ngx_πmp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

424 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

425 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
, **
ˇcÂ
;

427 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c⁄f_˘x_t
));

428 i‡(
˘x
 =
NULL
) {

429  
NGX_CONF_ERROR
;

432 
p˘x
 = 
cf
->
˘x
;

433 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

434 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

436 
˘x
->
≠p_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_πmp_max_moduÀ
);

437 i‡(
˘x
->
≠p_c⁄f
 =
NULL
) {

438  
NGX_CONF_ERROR
;

441 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

442 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_RTMP_MODULE
) {

446 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

448 i‡(
moduÀ
->
¸óã_≠p_c⁄f
) {

449 
˘x
->
≠p_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =

450 
moduÀ
->
	`¸óã_≠p_c⁄f
(
cf
);

451 i‡(
˘x
->
≠p_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

452  
NGX_CONF_ERROR
;

457 
ˇcf
 = 
˘x
->
≠p_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

458 
ˇcf
->
≠p_c⁄f
 = 
˘x
->app_conf;

460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

462 
ˇcf
->
«me
 = 
vÆue
[1];

463 
cscf
 = 
p˘x
->
§v_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

465 
ˇcÂ
 = 
	`ngx_¨øy_push
(&
cscf
->
≠∂iˇti⁄s
);

466 i‡(
ˇcÂ
 =
NULL
) {

467  
NGX_CONF_ERROR
;

470 *
ˇcÂ
 = 
ˇcf
;

472 
ßve
 = *
cf
;

473 
cf
->
˘x
 = ctx;

474 
cf
->
cmd_ty≥
 = 
NGX_RTMP_APP_CONF
;

476 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

478 *
cf

ßve
;

480  
rv
;

481 
	}
}

485 
	$ngx_πmp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

487 
size_t
 
Àn
, 
off
;

488 
ö_p‹t_t
 
p‹t
;

489 
ngx_°r_t
 *
vÆue
;

490 
ngx_uæ_t
 
u
;

491 
ngx_uöt_t
 
i
, 
m
;

492 
sockaddr
 *
ß
;

493 
ngx_πmp_li°í_t
 *
ls
;

494 
sockaddr_ö
 *
sö
;

495 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

496 #i‡(
NGX_HAVE_INET6
)

497 
sockaddr_ö6
 *
sö6
;

500 
vÆue
 = 
cf
->
¨gs
->
ñts
;

502 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

504 
u
.
uæ
 = 
vÆue
[1];

505 
u
.
li°í
 = 1;

507 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

508 i‡(
u
.
îr
) {

509 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

511 
u
.
îr
, &u.
uæ
);

514  
NGX_CONF_ERROR
;

517 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

519 
ls
 = 
cmcf
->
li°í
.
ñts
;

521 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

523 
ß
 = (
sockaddr
 *Ë
ls
[
i
].sockaddr;

525 i‡(
ß
->
ß_Ámûy
 !
u
.
Ámûy
) {

529 
ß
->
ß_Ámûy
) {

531 #i‡(
NGX_HAVE_INET6
)

532 
AF_INET6
:

533 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

534 
Àn
 = 16;

535 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

536 
p‹t
 = 
sö6
->
sö6_p‹t
;

541 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

542 
Àn
 = 4;

543 
sö
 = (
sockaddr_ö
 *Ë
ß
;

544 
p‹t
 = 
sö
->
sö_p‹t
;

548 i‡(
	`ngx_memcmp
(
ls
[
i
].
sockaddr
 + 
off
, 
u
.sockadd∏+ off, 
Àn
) != 0) {

552 i‡(
p‹t
 !
u
.port) {

556 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

557 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

558  
NGX_CONF_ERROR
;

561 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

562 i‡(
ls
 =
NULL
) {

563  
NGX_CONF_ERROR
;

566 
	`ngx_memzîo
(
ls
, (
ngx_πmp_li°í_t
));

568 
	`ngx_mem˝y
(
ls
->
sockaddr
, 
u
.sockaddr, u.
sockÀn
);

570 
ls
->
sockÀn
 = 
u
.socklen;

571 
ls
->
wûdˇrd
 = 
u
.wildcard;

572 
ls
->
˘x
 = 
cf
->ctx;

574 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

575 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_RTMP_MODULE
) {

580 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

582 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

583 
ls
->
böd
 = 1;

587 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

588 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

589 
sockaddr
 *
ß
;

590 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

592 
ß
 = (
sockaddr
 *Ë
ls
->sockaddr;

594 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

596 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

597 
ls
->
ùv6⁄ly
 = 1;

599 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

600 
ls
->
ùv6⁄ly
 = 0;

603 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

605 &
vÆue
[
i
].
d©a
[9]);

606  
NGX_CONF_ERROR
;

609 
ls
->
böd
 = 1;

612 
Àn
 = 
	`ngx_sock_¡›
(
ß
,

613 #i‡(
ngöx_vîsi⁄
 >= 1005003)

614 
ls
->
sockÀn
,

616 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

618 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

620 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

625 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

628  
NGX_CONF_ERROR
;

632 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "so_keepalive=", 13) == 0) {

634 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "on") == 0) {

635 
ls
->
so_kì∑live
 = 1;

637 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "off") == 0) {

638 
ls
->
so_kì∑live
 = 2;

642 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

643 
u_ch¨
 *
p
, *
íd
;

644 
ngx_°r_t
 
s
;

646 
íd
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

647 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

649 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

650 i‡(
p
 =
NULL
) {

651 
p
 = 
íd
;

654 i‡(
p
 > 
s
.
d©a
) {

655 
s
.
Àn
 = 
p
 - s.
d©a
;

657 
ls
->
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

658 i‡(
ls
->
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

659 
övÆid_so_kì∑live
;

663 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

665 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

666 i‡(
p
 =
NULL
) {

667 
p
 = 
íd
;

670 i‡(
p
 > 
s
.
d©a
) {

671 
s
.
Àn
 = 
p
 - s.
d©a
;

673 
ls
->
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

674 i‡(
ls
->
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

675 
övÆid_so_kì∑live
;

679 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

681 i‡(
s
.
d©a
 < 
íd
) {

682 
s
.
Àn
 = 
íd
 - s.
d©a
;

684 
ls
->
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

685 i‡(
ls
->
t˝_kìp˙t
 =
NGX_ERROR
) {

686 
övÆid_so_kì∑live
;

690 i‡(
ls
->
t˝_kìpidÀ
 =0 &&Üs->
t˝_kìpötvl
 == 0

691 && 
ls
->
t˝_kìp˙t
 == 0)

693 
övÆid_so_kì∑live
;

696 
ls
->
so_kì∑live
 = 1;

700 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

703  
NGX_CONF_ERROR
;

708 
ls
->
böd
 = 1;

712 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

713 
övÆid_so_kì∑live
:

715 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

717 &
vÆue
[
i
].
d©a
[13]);

718  
NGX_CONF_ERROR
;

722 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "proxy_protocol") == 0) {

723 
ls
->
¥oxy_¥Ÿocﬁ
 = 1;

727 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

728 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

729  
NGX_CONF_ERROR
;

732  
NGX_CONF_OK
;

733 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_eval.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_evÆ.h
"

12 
	#NGX_RTMP_EVAL_BUFLEN
 16

	)

16 
	$ngx_πmp_evÆ_£ssi⁄_°r
(*
˘x
, 
ngx_πmp_evÆ_t
 *
e
, 
ngx_°r_t
 *
ªt
)

18 *
ªt
 = *(
ngx_°r_t
 *Ë((
u_ch¨
 *Ë
˘x
 + 
e
->
off£t
);

19 
	}
}

23 
	$ngx_πmp_evÆ_c⁄√˘i⁄_°r
(*
˘x
, 
ngx_πmp_evÆ_t
 *
e
, 
ngx_°r_t
 *
ªt
)

25 
ngx_πmp_£ssi⁄_t
 *
s
 = 
˘x
;

27 *
ªt
 = *(
ngx_°r_t
 *Ë((
u_ch¨
 *Ë
s
->
c⁄√˘i⁄
 + 
e
->
off£t
);

28 
	}
}

31 
ngx_πmp_evÆ_t
 
	gngx_πmp_evÆ_£ssi⁄
[] = {

33 { 
ngx_°rög
("app"),

34 
ngx_πmp_evÆ_£ssi⁄_°r
,

35 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
≠p
) },

37 { 
ngx_°rög
("flashver"),

38 
ngx_πmp_evÆ_£ssi⁄_°r
,

39 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
Êashvî
) },

41 { 
ngx_°rög
("swfurl"),

42 
ngx_πmp_evÆ_£ssi⁄_°r
,

43 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
swf_uæ
) },

45 { 
ngx_°rög
("tcurl"),

46 
ngx_πmp_evÆ_£ssi⁄_°r
,

47 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
tc_uæ
) },

49 { 
ngx_°rög
("pageurl"),

50 
ngx_πmp_evÆ_£ssi⁄_°r
,

51 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
∑ge_uæ
) },

53 { 
ngx_°rög
("addr"),

54 
ngx_πmp_evÆ_c⁄√˘i⁄_°r
,

55 
off£tof
(
ngx_c⁄√˘i⁄_t
, 
addr_ãxt
) },

57 
ngx_πmp_nuŒ_evÆ


62 
	$ngx_πmp_evÆ_≠≥nd
(
ngx_buf_t
 *
b
, *
d©a
, 
size_t
 
Àn
, 
ngx_log_t
 *
log
)

64 
size_t
 
buf_Àn
;

66 i‡(
b
->
œ°
 + 
Àn
 > b->
íd
) {

67 
buf_Àn
 = 2 * (
b
->
œ°
 - b->
pos
Ë+ 
Àn
;

69 
b
->
°¨t
 = 
	`ngx_Æloc
(
buf_Àn
, 
log
);

70 i‡(
b
->
°¨t
 =
NULL
) {

74 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
°¨t
, b->
pos
, b->last - b->pos);

75 
b
->
pos
 = b->
°¨t
;

76 
b
->
íd
 = b->
°¨t
 + 
buf_Àn
;

79 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
d©a
, 
Àn
);

80 
	}
}

84 
	$ngx_πmp_evÆ_≠≥nd_v¨
(*
˘x
, 
ngx_buf_t
 *
b
, 
ngx_πmp_evÆ_t
 **
e
,

85 
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
)

87 
ngx_uöt_t
 
k
;

88 
ngx_°r_t
 
v
;

89 
ngx_πmp_evÆ_t
 *
ì
;

91 ; *
e
; ++e) {

92 
k
 = 0, 
ì
 = *
e
;Ée->
h™dÀr
; ++k, ++ee) {

93 i‡(
ì
->
«me
.
Àn
 ==Çame->len &&

94 
	`ngx_memcmp
(
ì
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0)

96 
ì
->
	`h™dÀr
(
˘x
,Ée, &
v
);

97 
	`ngx_πmp_evÆ_≠≥nd
(
b
, 
v
.
d©a
, v.
Àn
, 
log
);

101 
	}
}

104 
ngx_öt_t


105 
	$ngx_πmp_evÆ
(*
˘x
, 
ngx_°r_t
 *
ö
, 
ngx_πmp_evÆ_t
 **
e
,Çgx_°r_à*
out
,

106 
ngx_log_t
 *
log
)

108 
u_ch¨
 
c
, *
p
;

109 
ngx_°r_t
 
«me
;

110 
ngx_buf_t
 
b
;

111 
ngx_uöt_t
 
n
;

114 
NORMAL
,

115 
ESCAPE
,

116 
NAME
,

117 
SNAME


118 } 
°©e
 = 
NORMAL
;

120 
b
.
pos
 = b.
œ°
 = b.
°¨t
 = 
	`ngx_Æloc
(
NGX_RTMP_EVAL_BUFLEN
, 
log
);

121 i‡(
b
.
pos
 =
NULL
) {

122  
NGX_ERROR
;

125 
b
.
íd
 = b.
pos
 + 
NGX_RTMP_EVAL_BUFLEN
;

126 
«me
.
d©a
 = 
NULL
;

128 
n
 = 0;Ç < 
ö
->
Àn
; ++n) {

129 
p
 = &
ö
->
d©a
[
n
];

130 
c
 = *
p
;

132 
°©e
) {

133 
SNAME
:

134 i‡(
c
 != '}') {

138 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

139 
	`ngx_πmp_evÆ_≠≥nd_v¨
(
˘x
, &
b
, 
e
, &
«me
, 
log
);

141 
°©e
 = 
NORMAL
;

145 
NAME
:

146 i‡(
c
 ='{' && 
«me
.
d©a
 =
p
) {

147 ++
«me
.
d©a
;

148 
°©e
 = 
SNAME
;

151 i‡((
c
 >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {

155 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

156 
	`ngx_πmp_evÆ_≠≥nd_v¨
(
˘x
, &
b
, 
e
, &
«me
, 
log
);

158 
NORMAL
:

159 
c
) {

161 
«me
.
d©a
 = 
p
 + 1;

162 
°©e
 = 
NAME
;

165 
°©e
 = 
ESCAPE
;

169 
ESCAPE
:

170 
	`ngx_πmp_evÆ_≠≥nd
(&
b
, &
c
, 1, 
log
);

171 
°©e
 = 
NORMAL
;

177 i‡(
°©e
 =
NAME
) {

178 
p
 = &
ö
->
d©a
[
n
];

179 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

180 
	`ngx_πmp_evÆ_≠≥nd_v¨
(
˘x
, &
b
, 
e
, &
«me
, 
log
);

183 
c
 = 0;

184 
	`ngx_πmp_evÆ_≠≥nd
(&
b
, &
c
, 1, 
log
);

186 
out
->
d©a
 = 
b
.
pos
;

187 
out
->
Àn
 = 
b
.
œ°
 - b.
pos
 - 1;

189  
NGX_OK
;

190 
	}
}

193 
ngx_öt_t


194 
	$ngx_πmp_evÆ_°ªams
(
ngx_°r_t
 *
ö
)

196 #i‡!(
NGX_WIN32
)

197 
ngx_öt_t
 
mode
, 
¸óã
, 
v
, 
˛o£_§c
;

198 
ngx_fd_t
 
d°
, 
§c
;

199 
u_ch¨
 *
∑th
;

201 
∑th
 = 
ö
->
d©a
;

203 *
∑th
 >= '0' && *path <= '9') {

204 
∑th
++;

207 (Ë*
∑th
) {

211 
v
 = (
∑th
 =
ö
->
d©a
 ? 1 : 
	`ngx_©oi
(in->data,Öath - in->data));

212 i‡(
v
 =
NGX_ERROR
) {

213  
NGX_ERROR
;

216 
d°
 = (
ngx_fd_t
Ë
v
;

217 
mode
 = 
NGX_FILE_WRONLY
;

218 
¸óã
 = 
NGX_FILE_TRUNCATE
;

219 
∑th
++;

221 i‡(*
∑th
 =(
u_ch¨
) '>') {

222 
mode
 = 
NGX_FILE_APPEND
;

223 
¸óã
 = 
NGX_FILE_CREATE_OR_OPEN
;

224 
∑th
++;

231 
v
 = (
∑th
 =
ö
->
d©a
 ? 0 : 
	`ngx_©oi
(in->data,Öath - in->data));

232 i‡(
v
 =
NGX_ERROR
) {

233  
NGX_ERROR
;

236 
d°
 = (
ngx_fd_t
Ë
v
;

237 
mode
 = 
NGX_FILE_RDONLY
;

238 
¸óã
 = 
NGX_FILE_OPEN
;

239 
∑th
++;

245  
NGX_DONE
;

248 i‡(*
∑th
 =(
u_ch¨
) '&') {

250 
∑th
++;

251 
v
 = 
	`ngx_©oi
(
∑th
, 
ö
->
d©a
 + in->
Àn
 -Öath);

252 i‡(
v
 =
NGX_ERROR
) {

253  
NGX_ERROR
;

255 
§c
 = (
ngx_fd_t
Ë
v
;

256 
˛o£_§c
 = 0;

260 
§c
 = 
	`ngx_›í_fûe
(
∑th
, 
mode
, 
¸óã
, 
NGX_FILE_DEFAULT_ACCESS
);

261 i‡(
§c
 =
NGX_INVALID_FILE
) {

262  
NGX_ERROR
;

264 
˛o£_§c
 = 1;

268 i‡(
§c
 =
d°
) {

269  
NGX_OK
;

272 
	`dup2
(
§c
, 
d°
);

274 i‡(
˛o£_§c
) {

275 
	`ngx_˛o£_fûe
(
§c
);

277  
NGX_OK
;

280  
NGX_DONE
;

282 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_eval.h

7 #i‚de‡
_NGX_RTMP_EVAL_H_INCLUDED_


8 
	#_NGX_RTMP_EVAL_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~"ngx_πmp.h
"

16 
ngx_πmp_evÆ_s
 
	tngx_πmp_evÆ_t
;

19 (* 
	tngx_πmp_evÆ_±
)(*
	t˘x
, 
	tngx_πmp_evÆ_t
 *
	te
,

20 
	tngx_°r_t
 *
	tªt
);

23 
	sngx_πmp_evÆ_s
 {

24 
ngx_°r_t
 
«me
;

25 
ngx_πmp_evÆ_±
 
h™dÀr
;

26 
ngx_uöt_t
 
off£t
;

30 
	#ngx_πmp_nuŒ_evÆ
 { 
ngx_nuŒ_°rög
, 
NULL
, 0 
	}

	)
}

34 
ngx_πmp_evÆ_t
 
ngx_πmp_evÆ_£ssi⁄
[];

37 
ngx_öt_t
 
ngx_πmp_evÆ
(*
˘x
, 
ngx_°r_t
 *
ö
, 
ngx_πmp_evÆ_t
 **
e
,

38 
ngx_°r_t
 *
out
, 
ngx_log_t
 *
log
);

41 
ngx_öt_t
 
ngx_πmp_evÆ_°ªams
(
ngx_°r_t
 *
ö
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_exec_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_cmd_moduÀ.h
"

10 
	~"ngx_πmp_ªc‹d_moduÀ.h
"

11 
	~"ngx_πmp_evÆ.h
"

12 
	~<°dlib.h
>

14 #ifde‡
NGX_LINUX


15 
	~<uni°d.h
>

19 #i‡!(
NGX_WIN32
)

20 
ngx_πmp_publish_±
 
	g√xt_publish
;

21 
ngx_πmp_∂ay_±
 
	g√xt_∂ay
;

22 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

23 
ngx_πmp_ªc‹d_d⁄e_±
 
	g√xt_ªc‹d_d⁄e
;

27 
ngx_öt_t
 
ngx_πmp_exec_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
);

28 
ngx_öt_t
 
ngx_πmp_exec_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

29 * 
ngx_πmp_exec_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

30 * 
ngx_πmp_exec_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

31 * 
ngx_πmp_exec_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 * 
ngx_πmp_exec_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

33 *
∑ª¡
, *
chûd
);

36 * 
ngx_πmp_exec_c⁄f
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

37 *
c⁄f
);

38 *
ngx_πmp_exec_kûl_sig«l
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
	#NGX_RTMP_EXEC_RESPAWN
 0x01

	)

43 
	#NGX_RTMP_EXEC_KILL
 0x02

	)

46 
	#NGX_RTMP_EXEC_PUBLISHING
 0x01

	)

47 
	#NGX_RTMP_EXEC_PLAYING
 0x02

	)

51 
	mNGX_RTMP_EXEC_PUSH
,

52 
	mNGX_RTMP_EXEC_PULL
,

54 
	mNGX_RTMP_EXEC_PUBLISH
,

55 
	mNGX_RTMP_EXEC_PUBLISH_DONE
,

56 
	mNGX_RTMP_EXEC_PLAY
,

57 
	mNGX_RTMP_EXEC_PLAY_DONE
,

58 
	mNGX_RTMP_EXEC_RECORD_DONE
,

60 
	mNGX_RTMP_EXEC_MAX
,

62 
	mNGX_RTMP_EXEC_STATIC


67 
ngx_°r_t
 
	mid
;

68 
ngx_uöt_t
 
	mty≥
;

69 
ngx_°r_t
 
	mcmd
;

70 
ngx_¨øy_t
 
	m¨gs
;

71 
ngx_¨øy_t
 
	m«mes
;

72 } 
	tngx_πmp_exec_c⁄f_t
;

76 
ngx_πmp_exec_c⁄f_t
 *
	mc⁄f
;

77 
ngx_log_t
 *
	mlog
;

78 
ngx_πmp_evÆ_t
 **
	mevÆ
;

79 *
	mevÆ_˘x
;

80 
	ma˘ive
:1;

81 
	mm™aged
:1;

82 
ngx_pid_t
 
	mpid
;

83 
ngx_pid_t
 *
	mßve_pid
;

84 
	mpùefd
;

85 
ngx_c⁄√˘i⁄_t
 
	mdummy_c⁄n
;

86 
ngx_evít_t
 
	mªad_evt
, 
	mwrôe_evt
;

87 
ngx_evít_t
 
	mª•awn_evt
;

88 
ngx_m£c_t
 
	mª•awn_timeout
;

89 
ngx_öt_t
 
	mkûl_sig«l
;

90 } 
	tngx_πmp_exec_t
;

94 
ngx_¨øy_t
 
	m°©ic_c⁄f
;

95 
ngx_¨øy_t
 
	m°©ic_exec
;

96 
ngx_m£c_t
 
	mª•awn_timeout
;

97 
ngx_öt_t
 
	mkûl_sig«l
;

98 
ngx_log_t
 *
	mlog
;

99 } 
	tngx_πmp_exec_maö_c⁄f_t
;

102 
ngx_πmp_exec_puŒ_˘x_s
 
	tngx_πmp_exec_puŒ_˘x_t
;

104 
	sngx_πmp_exec_puŒ_˘x_s
 {

105 
ngx_poﬁ_t
 *
	mpoﬁ
;

106 
ngx_uöt_t
 
	mcou¡î
;

107 
ngx_°r_t
 
	m«me
;

108 
ngx_°r_t
 
	m≠p
;

109 
ngx_¨øy_t
 
	mpuŒ_exec
;

110 
ngx_πmp_exec_puŒ_˘x_t
 *
	m√xt
;

115 
ngx_öt_t
 
	ma˘ive
;

116 
ngx_¨øy_t
 
	mc⁄f
[
NGX_RTMP_EXEC_MAX
];

118 
ngx_Êag_t
 
	mª•awn
;

119 
ngx_Êag_t
 
	m›ti⁄s
;

120 
ngx_uöt_t
 
	mnbuckës
;

121 
ngx_πmp_exec_puŒ_˘x_t
 **
	mpuŒ
;

122 } 
	tngx_πmp_exec_≠p_c⁄f_t
;

126 
ngx_uöt_t
 
	mÊags
;

127 
ngx_°r_t
 
	m∑th
;

128 
ngx_°r_t
 
	mfûíame
;

129 
ngx_°r_t
 
	mba£«me
;

130 
ngx_°r_t
 
	mdú«me
;

131 
ngx_°r_t
 
	mªc‹dî
;

132 
u_ch¨
 
	m«me
[
NGX_RTMP_MAX_NAME
];

133 
u_ch¨
 
	m¨gs
[
NGX_RTMP_MAX_ARGS
];

134 
ngx_¨øy_t
 
	mpush_exec
;

135 
ngx_πmp_exec_puŒ_˘x_t
 *
	mpuŒ
;

136 } 
	tngx_πmp_exec_˘x_t
;

139 #i‡!(
NGX_WIN32
)

140 
ngx_πmp_exec_ª•awn
(
ngx_evít_t
 *
ev
);

141 
ngx_öt_t
 
ngx_πmp_exec_kûl
(
ngx_πmp_exec_t
 *
e
,Çgx_öt_à
kûl_sig«l
);

142 
ngx_öt_t
 
ngx_πmp_exec_run
(
ngx_πmp_exec_t
 *
e
);

146 
ngx_comm™d_t
 
	gngx_πmp_exec_comm™ds
[] = {

155 { 
ngx_°rög
("exec"),

156 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

157 
ngx_πmp_exec_c⁄f
,

158 
NGX_RTMP_APP_CONF_OFFSET
,

159 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

160 
NGX_RTMP_EXEC_PUSH
 * (
ngx_¨øy_t
),

161 
NULL
 },

163 { 
ngx_°rög
("exec_push"),

164 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

165 
ngx_πmp_exec_c⁄f
,

166 
NGX_RTMP_APP_CONF_OFFSET
,

167 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

168 
NGX_RTMP_EXEC_PUSH
 * (
ngx_¨øy_t
),

169 
NULL
 },

171 { 
ngx_°rög
("exec_pull"),

172 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

173 
ngx_πmp_exec_c⁄f
,

174 
NGX_RTMP_APP_CONF_OFFSET
,

175 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

176 
NGX_RTMP_EXEC_PULL
 * (
ngx_¨øy_t
),

177 
NULL
 },

179 { 
ngx_°rög
("exec_publish"),

180 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

181 
ngx_πmp_exec_c⁄f
,

182 
NGX_RTMP_APP_CONF_OFFSET
,

183 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

184 
NGX_RTMP_EXEC_PUBLISH
 * (
ngx_¨øy_t
),

185 
NULL
 },

187 { 
ngx_°rög
("exec_publish_done"),

188 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

189 
ngx_πmp_exec_c⁄f
,

190 
NGX_RTMP_APP_CONF_OFFSET
,

191 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

192 
NGX_RTMP_EXEC_PUBLISH_DONE
 * (
ngx_¨øy_t
),

193 
NULL
 },

195 { 
ngx_°rög
("exec_play"),

196 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

197 
ngx_πmp_exec_c⁄f
,

198 
NGX_RTMP_APP_CONF_OFFSET
,

199 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

200 
NGX_RTMP_EXEC_PLAY
 * (
ngx_¨øy_t
),

201 
NULL
 },

203 { 
ngx_°rög
("exec_play_done"),

204 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

205 
ngx_πmp_exec_c⁄f
,

206 
NGX_RTMP_APP_CONF_OFFSET
,

207 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

208 
NGX_RTMP_EXEC_PLAY_DONE
 * (
ngx_¨øy_t
),

209 
NULL
 },

211 { 
ngx_°rög
("exec_record_done"),

212 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_RTMP_REC_CONF
|

213 
NGX_CONF_1MORE
,

214 
ngx_πmp_exec_c⁄f
,

215 
NGX_RTMP_APP_CONF_OFFSET
,

216 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
c⁄f
) +

217 
NGX_RTMP_EXEC_RECORD_DONE
 * (
ngx_¨øy_t
),

218 
NULL
 },

220 { 
ngx_°rög
("exec_static"),

221 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

222 
ngx_πmp_exec_c⁄f
,

223 
NGX_RTMP_MAIN_CONF_OFFSET
,

224 
off£tof
(
ngx_πmp_exec_maö_c⁄f_t
, 
°©ic_c⁄f
),

225 
NULL
 },

227 { 
ngx_°rög
("respawn"),

228 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

229 
ngx_c⁄f_£t_Êag_¶Ÿ
,

230 
NGX_RTMP_APP_CONF_OFFSET
,

231 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
ª•awn
),

232 
NULL
 },

234 { 
ngx_°rög
("respawn_timeout"),

235 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

236 
ngx_c⁄f_£t_m£c_¶Ÿ
,

237 
NGX_RTMP_MAIN_CONF_OFFSET
,

238 
off£tof
(
ngx_πmp_exec_maö_c⁄f_t
, 
ª•awn_timeout
),

239 
NULL
 },

241 { 
ngx_°rög
("exec_kill_signal"),

242 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

243 
ngx_πmp_exec_kûl_sig«l
,

244 
NGX_RTMP_MAIN_CONF_OFFSET
,

246 
NULL
 },

248 { 
ngx_°rög
("exec_options"),

249 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

250 
ngx_c⁄f_£t_Êag_¶Ÿ
,

251 
NGX_RTMP_APP_CONF_OFFSET
,

252 
off£tof
(
ngx_πmp_exec_≠p_c⁄f_t
, 
›ti⁄s
),

253 
NULL
 },

255 
ngx_nuŒ_comm™d


259 
ngx_πmp_moduÀ_t
 
	gngx_πmp_exec_moduÀ_˘x
 = {

260 
NULL
,

261 
ngx_πmp_exec_po°c⁄figuøti⁄
,

262 
ngx_πmp_exec_¸óã_maö_c⁄f
,

263 
ngx_πmp_exec_öô_maö_c⁄f
,

264 
NULL
,

265 
NULL
,

266 
ngx_πmp_exec_¸óã_≠p_c⁄f
,

267 
ngx_πmp_exec_mîge_≠p_c⁄f


271 
ngx_moduÀ_t
 
	gngx_πmp_exec_moduÀ
 = {

272 
NGX_MODULE_V1
,

273 &
ngx_πmp_exec_moduÀ_˘x
,

274 
ngx_πmp_exec_comm™ds
,

275 
NGX_RTMP_MODULE
,

276 
NULL
,

277 
NULL
,

278 
ngx_πmp_exec_öô_¥o˚ss
,

279 
NULL
,

280 
NULL
,

281 
NULL
,

282 
NULL
,

283 
NGX_MODULE_V1_PADDING


288 
	$ngx_πmp_exec_evÆ_˘x_c°r
(*
s˘x
, 
ngx_πmp_evÆ_t
 *
e
, 
ngx_°r_t
 *
ªt
)

290 
ngx_πmp_£ssi⁄_t
 *
s
 = 
s˘x
;

292 
ngx_πmp_exec_˘x_t
 *
˘x
;

294 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

295 i‡(
˘x
 =
NULL
) {

296 
ªt
->
Àn
 = 0;

300 
ªt
->
d©a
 = (
u_ch¨
 *Ë
˘x
 + 
e
->
off£t
;

301 
ªt
->
Àn
 = 
	`ngx_°æí
‘ë->
d©a
);

302 
	}
}

306 
	$ngx_πmp_exec_evÆ_˘x_°r
(*
s˘x
, 
ngx_πmp_evÆ_t
 *
e
, 
ngx_°r_t
 *
ªt
)

308 
ngx_πmp_£ssi⁄_t
 *
s
 = 
s˘x
;

310 
ngx_πmp_exec_˘x_t
 *
˘x
;

312 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

313 i‡(
˘x
 =
NULL
) {

314 
ªt
->
Àn
 = 0;

318 *
ªt
 = * (
ngx_°r_t
 *Ë((
u_ch¨
 *Ë
˘x
 + 
e
->
off£t
);

319 
	}
}

323 
	$ngx_πmp_exec_evÆ_p˘x_°r
(*
˘x
, 
ngx_πmp_evÆ_t
 *
e
, 
ngx_°r_t
 *
ªt
)

325 *
ªt
 = *(
ngx_°r_t
 *Ë((
u_ch¨
 *Ë
˘x
 + 
e
->
off£t
);

326 
	}
}

329 
ngx_πmp_evÆ_t
 
	gngx_πmp_exec_push_•ecific_evÆ
[] = {

331 { 
ngx_°rög
("name"),

332 
ngx_πmp_exec_evÆ_˘x_c°r
,

333 
off£tof
(
ngx_πmp_exec_˘x_t
, 
«me
) },

335 { 
ngx_°rög
("args"),

336 
ngx_πmp_exec_evÆ_˘x_c°r
,

337 
off£tof
(
ngx_πmp_exec_˘x_t
, 
¨gs
) },

339 
ngx_πmp_nuŒ_evÆ


343 
ngx_πmp_evÆ_t
 * 
	gngx_πmp_exec_push_evÆ
[] = {

344 
ngx_πmp_evÆ_£ssi⁄
,

345 
ngx_πmp_exec_push_•ecific_evÆ
,

346 
NULL


350 
ngx_πmp_evÆ_t
 
	gngx_πmp_exec_puŒ_•ecific_evÆ
[] = {

352 { 
ngx_°rög
("name"),

353 
ngx_πmp_exec_evÆ_p˘x_°r
,

354 
off£tof
(
ngx_πmp_exec_puŒ_˘x_t
, 
«me
) },

356 { 
ngx_°rög
("app"),

357 
ngx_πmp_exec_evÆ_p˘x_°r
,

358 
off£tof
(
ngx_πmp_exec_puŒ_˘x_t
, 
≠p
) },

360 
ngx_πmp_nuŒ_evÆ


364 
ngx_πmp_evÆ_t
 * 
	gngx_πmp_exec_puŒ_evÆ
[] = {

365 
ngx_πmp_exec_puŒ_•ecific_evÆ
,

366 
NULL


370 
ngx_πmp_evÆ_t
 
	gngx_πmp_exec_evít_•ecific_evÆ
[] = {

372 { 
ngx_°rög
("name"),

373 
ngx_πmp_exec_evÆ_˘x_c°r
,

374 
off£tof
(
ngx_πmp_exec_˘x_t
, 
«me
) },

376 { 
ngx_°rög
("args"),

377 
ngx_πmp_exec_evÆ_˘x_c°r
,

378 
off£tof
(
ngx_πmp_exec_˘x_t
, 
¨gs
) },

380 { 
ngx_°rög
("path"),

381 
ngx_πmp_exec_evÆ_˘x_°r
,

382 
off£tof
(
ngx_πmp_exec_˘x_t
, 
∑th
) },

384 { 
ngx_°rög
("filename"),

385 
ngx_πmp_exec_evÆ_˘x_°r
,

386 
off£tof
(
ngx_πmp_exec_˘x_t
, 
fûíame
) },

388 { 
ngx_°rög
("basename"),

389 
ngx_πmp_exec_evÆ_˘x_°r
,

390 
off£tof
(
ngx_πmp_exec_˘x_t
, 
ba£«me
) },

392 { 
ngx_°rög
("dirname"),

393 
ngx_πmp_exec_evÆ_˘x_°r
,

394 
off£tof
(
ngx_πmp_exec_˘x_t
, 
dú«me
) },

396 { 
ngx_°rög
("recorder"),

397 
ngx_πmp_exec_evÆ_˘x_°r
,

398 
off£tof
(
ngx_πmp_exec_˘x_t
, 
ªc‹dî
) },

400 
ngx_πmp_nuŒ_evÆ


404 
ngx_πmp_evÆ_t
 * 
	gngx_πmp_exec_evít_evÆ
[] = {

405 
ngx_πmp_evÆ_£ssi⁄
,

406 
ngx_πmp_exec_evít_•ecific_evÆ
,

407 
NULL


412 
	$ngx_πmp_exec_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

414 
ngx_πmp_exec_maö_c⁄f_t
 *
emcf
;

416 
emcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_exec_maö_c⁄f_t
));

417 i‡(
emcf
 =
NULL
) {

418  
NULL
;

421 
emcf
->
ª•awn_timeout
 = 
NGX_CONF_UNSET_MSEC
;

422 
emcf
->
kûl_sig«l
 = 
NGX_CONF_UNSET
;

424 i‡(
	`ngx_¨øy_öô
(&
emcf
->
°©ic_c⁄f
, 
cf
->
poﬁ
, 1,

425 (
ngx_πmp_exec_c⁄f_t
)Ë!
NGX_OK
)

427  
NULL
;

430  
emcf
;

431 
	}
}

435 
	$ngx_πmp_exec_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

437 
ngx_πmp_exec_maö_c⁄f_t
 *
emcf
 = 
c⁄f
;

438 
ngx_πmp_exec_c⁄f_t
 *
ec
;

439 
ngx_πmp_exec_t
 *
e
;

440 
ngx_uöt_t
 
n
;

442 i‡(
emcf
->
ª•awn_timeout
 =
NGX_CONF_UNSET_MSEC
) {

443 
emcf
->
ª•awn_timeout
 = 5000;

446 #i‡!(
NGX_WIN32
)

447 i‡(
emcf
->
kûl_sig«l
 =
NGX_CONF_UNSET
) {

448 
emcf
->
kûl_sig«l
 = 
SIGKILL
;

452 i‡(
	`ngx_¨øy_öô
(&
emcf
->
°©ic_exec
, 
cf
->
poﬁ
,

453 
emcf
->
°©ic_c⁄f
.
√…s
,

454 (
ngx_πmp_exec_t
)Ë!
NGX_OK
)

456  
NGX_CONF_ERROR
;

459 
e
 = 
	`ngx_¨øy_push_n
(&
emcf
->
°©ic_exec
,Émcf->
°©ic_c⁄f
.
√…s
);

460 i‡(
e
 =
NULL
) {

461  
NGX_CONF_ERROR
;

464 
emcf
->
log
 = &
cf
->
cy˛e
->
√w_log
;

466 
ec
 = 
emcf
->
°©ic_c⁄f
.
ñts
;

468 
n
 = 0;Ç < 
emcf
->
°©ic_c⁄f
.
√…s
;Ç++, 
e
++, 
ec
++) {

469 
	`ngx_memzîo
(
e
, (*e));

470 
e
->
c⁄f
 = 
ec
;

471 
e
->
m™aged
 = 1;

472 
e
->
log
 = 
emcf
->log;

473 
e
->
ª•awn_timeout
 = 
emcf
->respawn_timeout;

474 
e
->
kûl_sig«l
 = 
emcf
->kill_signal;

477  
NGX_CONF_OK
;

478 
	}
}

482 
	$ngx_πmp_exec_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

484 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

486 
ócf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_exec_≠p_c⁄f_t
));

487 i‡(
ócf
 =
NULL
) {

488  
NULL
;

491 
ócf
->
ª•awn
 = 
NGX_CONF_UNSET
;

492 
ócf
->
›ti⁄s
 = 
NGX_CONF_UNSET
;

493 
ócf
->
nbuckës
 = 
NGX_CONF_UNSET_UINT
;

495  
ócf
;

496 
	}
}

499 
ngx_öt_t


500 
	$ngx_πmp_exec_mîge_c⁄fs
(
ngx_¨øy_t
 *
c⁄f
,Çgx_¨øy_à*
¥ev
)

502 
size_t
 
n
;

503 
ngx_πmp_exec_c⁄f_t
 *
ec
, *
≥c
;

505 i‡(
¥ev
->
√…s
 == 0) {

506  
NGX_OK
;

509 i‡(
c⁄f
->
√…s
 == 0) {

510 *
c⁄f
 = *
¥ev
;

511  
NGX_OK
;

514 
ec
 = 
	`ngx_¨øy_push_n
(
c⁄f
, 
¥ev
->
√…s
);

515 i‡(
ec
 =
NULL
) {

516  
NGX_ERROR
;

519 
≥c
 = 
¥ev
->
ñts
;

520 
n
 = 0;Ç < 
¥ev
->
√…s
;Ç++, 
ec
++, 
≥c
++) {

521 *
ec
 = *
≥c
;

524  
NGX_OK
;

525 
	}
}

529 
	$ngx_πmp_exec_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

531 
ngx_πmp_exec_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

532 
ngx_πmp_exec_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

534 
ngx_uöt_t
 
n
;

536 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ª•awn
, 
¥ev
->respawn, 1);

537 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
nbuckës
, 
¥ev
->nbuckets, 1024);

539 
n
 = 0;Ç < 
NGX_RTMP_EXEC_MAX
;Ç++) {

540 i‡(
	`ngx_πmp_exec_mîge_c⁄fs
(&
c⁄f
->c⁄f[
n
], &
¥ev
->c⁄f[n]Ë!
NGX_OK
)

542  
NGX_CONF_ERROR
;

545 i‡(
c⁄f
->c⁄f[
n
].
√…s
) {

546 
c⁄f
->
a˘ive
 = 1;

547 
¥ev
->
a˘ive
 = 1;

551 i‡(
c⁄f
->c⁄f[
NGX_RTMP_EXEC_PULL
].
√…s
 > 0) {

552 
c⁄f
->
puŒ
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* c⁄f->
nbuckës
);

553 i‡(
c⁄f
->
puŒ
 =
NULL
) {

554  
NGX_CONF_ERROR
;

558  
NGX_CONF_OK
;

559 
	}
}

562 
ngx_öt_t


563 
	$ngx_πmp_exec_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
)

565 #i‡!(
NGX_WIN32
)

566 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
ngx_πmp_c‹e_maö_c⁄f
;

567 
ngx_πmp_c‹e_§v_c⁄f_t
 **
cscf
;

568 
ngx_πmp_c⁄f_˘x_t
 *
c˘x
;

569 
ngx_πmp_exec_maö_c⁄f_t
 *
emcf
;

570 
ngx_πmp_exec_t
 *
e
;

571 
ngx_uöt_t
 
n
;

573 i‡(
cmcf
 =
NULL
 || cmcf->
£rvîs
.
√…s
 == 0) {

574  
NGX_OK
;

578 i‡(
ngx_¥o˚ss_¶Ÿ
) {

579  
NGX_OK
;

582 
cscf
 = 
cmcf
->
£rvîs
.
ñts
;

583 
c˘x
 = (*
cscf
)->
˘x
;

584 
emcf
 = 
c˘x
->
maö_c⁄f
[
ngx_πmp_exec_moduÀ
.
˘x_ödex
];

597 
e
 = 
emcf
->
°©ic_exec
.
ñts
;

598 
n
 = 0;Ç < 
emcf
->
°©ic_exec
.
√…s
; ++n, ++
e
) {

599 
e
->
ª•awn_evt
.
d©a
 =É;

600 
e
->
ª•awn_evt
.
log
 =É->log;

601 
e
->
ª•awn_evt
.
h™dÀr
 = 
ngx_πmp_exec_ª•awn
;

602 
	`ngx_po°_evít
((&
e
->
ª•awn_evt
), &
ngx_πmp_öô_queue
);

606  
NGX_OK
;

607 
	}
}

610 #i‡!(
NGX_WIN32
)

612 
	$ngx_πmp_exec_ª•awn
(
ngx_evít_t
 *
ev
)

614 
	`ngx_πmp_exec_run
((
ngx_πmp_exec_t
 *Ë
ev
->
d©a
);

615 
	}
}

619 
	$ngx_πmp_exec_chûd_dód
(
ngx_evít_t
 *
ev
)

621 
ngx_c⁄√˘i⁄_t
 *
dummy_c⁄n
 = 
ev
->
d©a
;

622 
ngx_πmp_exec_t
 *
e
;

624 
e
 = 
dummy_c⁄n
->
d©a
;

626 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 0,

627 "exec: chûd %uòexôed; %s", (
ngx_öt_t
Ë
e
->
pid
,

628 
e
->
ª•awn_timeout
 =
NGX_CONF_UNSET_MSEC
 ? "respawning" :

631 
	`ngx_πmp_exec_kûl
(
e
, 0);

633 i‡(
e
->
ª•awn_timeout
 =
NGX_CONF_UNSET_MSEC
) {

637 i‡(
e
->
ª•awn_timeout
 == 0) {

638 
	`ngx_πmp_exec_run
(
e
);

642 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
e
->
log
, 0,

643 "exec: sheduÀÑe•aw¿%Mm£c", 
e
->
ª•awn_timeout
);

645 
e
->
ª•awn_evt
.
d©a
 =É;

646 
e
->
ª•awn_evt
.
log
 =É->log;

647 
e
->
ª•awn_evt
.
h™dÀr
 = 
ngx_πmp_exec_ª•awn
;

649 
	`ngx_add_timî
(&
e
->
ª•awn_evt
,É->
ª•awn_timeout
);

650 
	}
}

653 
ngx_öt_t


654 
	$ngx_πmp_exec_kûl
(
ngx_πmp_exec_t
 *
e
, 
ngx_öt_t
 
kûl_sig«l
)

656 i‡(
e
->
ª•awn_evt
.
timî_£t
) {

657 
	`ngx_dñ_timî
(&
e
->
ª•awn_evt
);

660 i‡(
e
->
ªad_evt
.
a˘ive
) {

661 
	`ngx_dñ_evít
(&
e
->
ªad_evt
, 
NGX_READ_EVENT
, 0);

664 i‡(
e
->
a˘ive
 == 0) {

665  
NGX_OK
;

668 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 0,

669 "exec:Åîmö©ög chûd %ui", (
ngx_öt_t
Ë
e
->
pid
);

671 
e
->
a˘ive
 = 0;

672 
	`˛o£
(
e
->
pùefd
);

673 i‡(
e
->
ßve_pid
) {

674 *
e
->
ßve_pid
 = 
NGX_INVALID_PID
;

677 i‡(
kûl_sig«l
 == 0) {

678  
NGX_OK
;

681 i‡(
	`kûl
(
e
->
pid
, 
kûl_sig«l
) == -1) {

682 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 
ngx_î∫o
,

683 "exec: kû»ÁûedÖid=%i", (
ngx_öt_t
Ë
e
->
pid
);

685 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
e
->
log
, 0,

686 "exec: kûÀdÖid=%i", (
ngx_öt_t
Ë
e
->
pid
);

689  
NGX_OK
;

690 
	}
}

693 
ngx_öt_t


694 
	$ngx_πmp_exec_run
(
ngx_πmp_exec_t
 *
e
)

696 
fd
, 
ªt
, 
maxfd
, 
pùefd
[2];

697 **
¨gs
, **
¨g_out
;

698 
ngx_pid_t
 
pid
;

699 
ngx_°r_t
 *
¨g_ö
, 
a
;

700 
ngx_uöt_t
 
n
;

701 
ngx_πmp_exec_c⁄f_t
 *
ec
;

703 
ec
 = 
e
->
c⁄f
;

705 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 0,

707 
e
->
m™aged
 ? "m™aged" : "unm™aged", &
ec
->
cmd
);

709 
pùefd
[0] = -1;

710 
pùefd
[1] = -1;

712 i‡(
e
->
m™aged
) {

714 i‡(
e
->
a˘ive
) {

715 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
e
->
log
, 0,

716 "exec:áÃódyá˘ivê'%V'", &
ec
->
cmd
);

717  
NGX_OK
;

720 i‡(
	`pùe
(
pùefd
) == -1) {

721 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 
ngx_î∫o
,

723  
NGX_ERROR
;

728 
ªt
 = 
	`f˙é
(
pùefd
[1], 
F_GETFD
);

730 i‡(
ªt
 != -1) {

731 
ªt
 &~
FD_CLOEXEC
;

732 
ªt
 = 
	`f˙é
(
pùefd
[1], 
F_SETFD
,Ñet);

735 i‡(
ªt
 == -1) {

737 
	`˛o£
(
pùefd
[0]);

738 
	`˛o£
(
pùefd
[1]);

740 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 
ngx_î∫o
,

743  
NGX_ERROR
;

747 
pid
 = 
	`f‹k
();

749 
pid
) {

755 i‡(
pùefd
[0] != -1) {

756 
	`˛o£
(
pùefd
[0]);

759 i‡(
pùefd
[1] != -1) {

760 
	`˛o£
(
pùefd
[1]);

763 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 
ngx_î∫o
,

766  
NGX_ERROR
;

772 #i‡(
NGX_LINUX
)

773 i‡(
e
->
m™aged
) {

774 
	`¥˘l
(
PR_SET_PDEATHSIG
, 
e
->
kûl_sig«l
, 0, 0, 0);

780 
maxfd
 = 
	`sysc⁄f
(
_SC_OPEN_MAX
);

781 
fd
 = 0; fd < 
maxfd
; ++fd) {

782 i‡(
fd
 =
pùefd
[1]) {

786 
	`˛o£
(
fd
);

789 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

791 
	`dup2
(
fd
, 
STDIN_FILENO
);

792 
	`dup2
(
fd
, 
STDOUT_FILENO
);

793 
	`dup2
(
fd
, 
STDERR_FILENO
);

795 
¨gs
 = 
	`ngx_Æloc
((
ec
->¨gs.
√…s
 + 2Ë* (*), 
e
->
log
);

796 i‡(
¨gs
 =
NULL
) {

797 
	`exô
(1);

800 
¨g_ö
 = 
ec
->
¨gs
.
ñts
;

801 
¨g_out
 = 
¨gs
;

802 *
¨g_out
++ = (*Ë
ec
->
cmd
.
d©a
;

804 
n
 = 0;Ç < 
ec
->
¨gs
.
√…s
;Ç++, ++
¨g_ö
) {

806 i‡(
e
->
evÆ
 =
NULL
) {

807 
a
 = *
¨g_ö
;

809 
	`ngx_πmp_evÆ
(
e
->
evÆ_˘x
, 
¨g_ö
,É->
evÆ
, &
a
,É->
log
);

812 i‡(
	`ngx_πmp_evÆ_°ªams
(&
a
Ë!
NGX_DONE
) {

816 *
¨g_out
++ = (*Ë
a
.
d©a
;

819 *
¨g_out
 = 
NULL
;

821 #i‡(
NGX_DEBUG
)

823 **
p
;

825 
p
 = 
¨gs
; *p;Ö++) {

826 
	`ngx_wrôe_fd
(
STDERR_FILENO
, "'", 1);

827 
	`ngx_wrôe_fd
(
STDERR_FILENO
, *
p
, 
	`°æí
(*p));

828 
	`ngx_wrôe_fd
(
STDERR_FILENO
, "' ", 2);

831 
	`ngx_wrôe_fd
(
STDERR_FILENO
, "\n", 1);

835 i‡(
	`execvp
((*Ë
ec
->
cmd
.
d©a
, 
¨gs
) == -1) {

836 *
msg
;

838 
msg
 = 
	`°ªº‹
(
î∫o
);

840 
	`ngx_wrôe_fd
(
STDERR_FILENO
, "execvpÉrror: ", 14);

841 
	`ngx_wrôe_fd
(
STDERR_FILENO
, 
msg
, 
	`°æí
(msg));

842 
	`ngx_wrôe_fd
(
STDERR_FILENO
, "\n", 1);

844 
	`exô
(1);

853 i‡(
pùefd
[1] != -1) {

854 
	`˛o£
(
pùefd
[1]);

857 i‡(
pùefd
[0] != -1) {

859 
e
->
a˘ive
 = 1;

860 
e
->
pid
 =Öid;

861 
e
->
pùefd
 =Öipefd[0];

863 i‡(
e
->
ßve_pid
) {

864 *
e
->
ßve_pid
 = 
pid
;

867 
e
->
dummy_c⁄n
.
fd
 =É->
pùefd
;

868 
e
->
dummy_c⁄n
.
d©a
 =É;

869 
e
->
dummy_c⁄n
.
ªad
 = &e->
ªad_evt
;

870 
e
->
dummy_c⁄n
.
wrôe
 = &e->
wrôe_evt
;

871 
e
->
ªad_evt
.
d©a
 = &e->
dummy_c⁄n
;

872 
e
->
wrôe_evt
.
d©a
 = &e->
dummy_c⁄n
;

874 
e
->
ªad_evt
.
log
 =É->log;

875 
e
->
ªad_evt
.
h™dÀr
 = 
ngx_πmp_exec_chûd_dód
;

877 i‡(
	`ngx_add_evít
(&
e
->
ªad_evt
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

878 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
e
->
log
, 
ngx_î∫o
,

883 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
e
->
log
, 0,

885 &
ec
->
cmd
, (
ngx_öt_t
Ë
pid
);

889  
NGX_OK
;

890 
	}
}

893 
ngx_öt_t


894 
	$ngx_πmp_exec_öô_˘x
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
],

895 
u_ch¨
 
¨gs
[
NGX_RTMP_MAX_ARGS
], 
ngx_uöt_t
 
Êags
)

897 
ngx_uöt_t
 
n
;

898 
ngx_¨øy_t
 *
push_c⁄f
;

899 
ngx_πmp_exec_t
 *
e
;

900 
ngx_πmp_exec_˘x_t
 *
˘x
;

901 
ngx_πmp_exec_c⁄f_t
 *
ec
;

902 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

903 
ngx_πmp_exec_maö_c⁄f_t
 *
emcf
;

905 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

907 i‡(
˘x
 !
NULL
) {

908 
d⁄e
;

911 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_exec_˘x_t
));

913 i‡(
˘x
 =
NULL
) {

914  
NGX_ERROR
;

917 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_exec_moduÀ
);

919 
ócf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

921 
emcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

923 
push_c⁄f
 = &
ócf
->
c⁄f
[
NGX_RTMP_EXEC_PUSH
];

925 i‡(
push_c⁄f
->
√…s
 > 0) {

927 i‡(
	`ngx_¨øy_öô
(&
˘x
->
push_exec
, 
s
->
c⁄√˘i⁄
->
poﬁ
,

928 
push_c⁄f
->
√…s
,

929 (
ngx_πmp_exec_t
)Ë!
NGX_OK
)

931  
NGX_ERROR
;

934 
e
 = 
	`ngx_¨øy_push_n
(&
˘x
->
push_exec
, 
push_c⁄f
->
√…s
);

936 i‡(
e
 =
NULL
) {

937  
NGX_ERROR
;

940 
ec
 = 
push_c⁄f
->
ñts
;

942 
n
 = 0;Ç < 
push_c⁄f
->
√…s
;Ç++, 
e
++, 
ec
++) {

943 
	`ngx_memzîo
(
e
, (*e));

944 
e
->
c⁄f
 = 
ec
;

945 
e
->
m™aged
 = 1;

946 
e
->
log
 = 
s
->
c⁄√˘i⁄
->log;

947 
e
->
evÆ
 = 
ngx_πmp_exec_push_evÆ
;

948 
e
->
evÆ_˘x
 = 
s
;

949 
e
->
kûl_sig«l
 = 
emcf
->kill_signal;

950 
e
->
ª•awn_timeout
 = (
ócf
->
ª•awn
 ? 
emcf
->respawn_timeout :

951 
NGX_CONF_UNSET_MSEC
);

955 
d⁄e
:

957 
	`ngx_mem˝y
(
˘x
->
«me
,Çame, 
NGX_RTMP_MAX_NAME
);

958 
	`ngx_mem˝y
(
˘x
->
¨gs
,árgs, 
NGX_RTMP_MAX_ARGS
);

960 
˘x
->
Êags
 |= flags;

962  
NGX_OK
;

963 
	}
}

966 
ngx_öt_t


967 
	$ngx_πmp_exec_öô_puŒ_˘x
(
ngx_πmp_£ssi⁄_t
 *
s
,

968 
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
])

970 
size_t
 
Àn
;

971 
ngx_uöt_t
 
n
;

972 
ngx_poﬁ_t
 *
poﬁ
;

973 
ngx_¨øy_t
 *
puŒ_c⁄f
;

974 
ngx_πmp_exec_t
 *
e
;

975 
ngx_πmp_exec_˘x_t
 *
˘x
;

976 
ngx_πmp_exec_c⁄f_t
 *
ec
;

977 
ngx_πmp_exec_puŒ_˘x_t
 *
p˘x
, **
µ˘x
;

978 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

979 
ngx_πmp_exec_maö_c⁄f_t
 *
emcf
;

981 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

982 i‡(
˘x
->
puŒ
 !
NULL
) {

983  
NGX_OK
;

986 
ócf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

988 
puŒ_c⁄f
 = &
ócf
->
c⁄f
[
NGX_RTMP_EXEC_PULL
];

990 i‡(
puŒ_c⁄f
->
√…s
 == 0) {

991  
NGX_OK
;

994 
emcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

996 
Àn
 = 
	`ngx_°æí
(
«me
);

998 
µ˘x
 = &
ócf
->
puŒ
[
	`ngx_hash_key
(
«me
, 
Àn
Ë%Éacf->
nbuckës
];

1000 ; *
µ˘x
;Öp˘x = &(*µ˘x)->
√xt
) {

1001 
p˘x
 = *
µ˘x
;

1003 i‡(
p˘x
->
«me
.
Àn
 ==Üen &&

1004 
	`ngx_°∫cmp
(
«me
, 
p˘x
->«me.
d©a
, 
Àn
) == 0)

1006 
d⁄e
;

1010 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(4096, 
emcf
->
log
);

1011 i‡(
poﬁ
 =
NULL
) {

1012  
NGX_ERROR
;

1015 
p˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_πmp_exec_puŒ_˘x_t
));

1016 i‡(
p˘x
 =
NULL
) {

1017 
îr‹
;

1020 
p˘x
->
poﬁ
 =Öool;

1021 
p˘x
->
«me
.
Àn
 =Üen;

1022 
p˘x
->
«me
.
d©a
 = 
	`ngx_∑Œoc
(
poﬁ
, 
Àn
);

1024 i‡(
p˘x
->
«me
.
d©a
 =
NULL
) {

1025 
îr‹
;

1028 
	`ngx_mem˝y
(
p˘x
->
«me
.
d©a
,Çame, 
Àn
);

1030 
p˘x
->
≠p
.
Àn
 = 
s
->app.len;

1031 
p˘x
->
≠p
.
d©a
 = 
	`ngx_∑Œoc
(
poﬁ
, 
s
->≠p.
Àn
);

1033 i‡(
p˘x
->
≠p
.
d©a
 =
NULL
) {

1034 
îr‹
;

1037 
	`ngx_mem˝y
(
p˘x
->
≠p
.
d©a
, 
s
->≠p.d©a, s->≠p.
Àn
);

1039 i‡(
	`ngx_¨øy_öô
(&
p˘x
->
puŒ_exec
, 
poﬁ
, 
puŒ_c⁄f
->
√…s
,

1040 (
ngx_πmp_exec_t
)Ë!
NGX_OK
)

1042 
îr‹
;

1045 
e
 = 
	`ngx_¨øy_push_n
(&
p˘x
->
puŒ_exec
, 
puŒ_c⁄f
->
√…s
);

1046 i‡(
e
 =
NULL
) {

1047 
îr‹
;

1050 
ec
 = 
puŒ_c⁄f
->
ñts
;

1051 
n
 = 0;Ç < 
puŒ_c⁄f
->
√…s
;Ç++, 
e
++, 
ec
++) {

1052 
	`ngx_memzîo
(
e
, (*e));

1053 
e
->
c⁄f
 = 
ec
;

1054 
e
->
m™aged
 = 1;

1055 
e
->
log
 = 
emcf
->log;

1056 
e
->
evÆ
 = 
ngx_πmp_exec_puŒ_evÆ
;

1057 
e
->
evÆ_˘x
 = 
p˘x
;

1058 
e
->
kûl_sig«l
 = 
emcf
->kill_signal;

1059 
e
->
ª•awn_timeout
 = (
ócf
->
ª•awn
 ? 
emcf
->respawn_timeout :

1060 
NGX_CONF_UNSET_MSEC
);

1063 *
µ˘x
 = 
p˘x
;

1065 
d⁄e
:

1067 
˘x
->
puŒ
 = 
p˘x
;

1068 
˘x
->
puŒ
->
cou¡î
++;

1070  
NGX_OK
;

1072 
îr‹
:

1074 
	`ngx_de°roy_poﬁ
(
poﬁ
);

1076  
NGX_ERROR
;

1077 
	}
}

1080 
ngx_öt_t


1081 
	$ngx_πmp_exec_fûãr
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_exec_c⁄f_t
 *
ec
)

1083 
size_t
 
Àn
;

1084 
ngx_°r_t
 *
v
;

1085 
ngx_uöt_t
 
n
;

1086 
ngx_πmp_exec_˘x_t
 *
˘x
;

1088 i‡(
ec
->
«mes
.
√…s
 == 0) {

1089  
NGX_OK
;

1092 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

1094 
Àn
 = 
	`ngx_°æí
(
˘x
->
«me
);

1096 
v
 = 
ec
->
«mes
.
ñts
;

1097 
n
 = 0;Ç < 
ec
->
«mes
.
√…s
;Ç++, 
s
++) {

1098 i‡(
v
->
Àn
 =À¿&& 
	`ngx_°∫cmp
(v->
d©a
, 
˘x
->
«me
,Üen) == 0) {

1099  
NGX_OK
;

1103  
NGX_DECLINED
;

1104 
	}
}

1108 
	$ngx_πmp_exec_unm™aged
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_¨øy_t
 *
e
, c⁄° *
›
)

1110 
ngx_uöt_t
 
n
;

1111 
ngx_πmp_exec_t
 
í
;

1112 
ngx_πmp_exec_c⁄f_t
 *
ec
;

1114 i‡(
e
->
√…s
 == 0) {

1118 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1119 "exec: %†%uz unm™aged comm™d(s)", 
›
, 
e
->
√…s
);

1121 
ec
 = 
e
->
ñts
;

1122 
n
 = 0;Ç < 
e
->
√…s
;Ç++, 
ec
++) {

1123 i‡(
	`ngx_πmp_exec_fûãr
(
s
, 
ec
Ë!
NGX_OK
) {

1127 
	`ngx_memzîo
(&
í
, (
ngx_πmp_exec_t
));

1129 
í
.
c⁄f
 = 
ec
;

1130 
í
.
evÆ
 = 
ngx_πmp_exec_evít_evÆ
;

1131 
í
.
evÆ_˘x
 = 
s
;

1132 
í
.
log
 = 
s
->
c⁄√˘i⁄
->log;

1134 
	`ngx_πmp_exec_run
(&
í
);

1136 
	}
}

1140 
	$ngx_πmp_exec_m™aged
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_¨øy_t
 *
e
, c⁄° *
›
)

1142 
ngx_uöt_t
 
n
;

1143 
ngx_πmp_exec_t
 *
í
;

1145 i‡(
e
->
√…s
 == 0) {

1149 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1150 "exec: %†%uz m™aged comm™d(s)", 
›
, 
e
->
√…s
);

1152 
í
 = 
e
->
ñts
;

1153 
n
 = 0;Ç < 
e
->
√…s
;Ç++, 
í
++) {

1154 i‡(
	`ngx_πmp_exec_fûãr
(
s
, 
í
->
c⁄f
Ë=
NGX_OK
) {

1155 
	`ngx_πmp_exec_run
(
í
);

1158 
	}
}

1161 
ngx_öt_t


1162 
	$ngx_πmp_exec_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

1164 
ngx_πmp_exec_˘x_t
 *
˘x
;

1165 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

1167 
ócf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

1169 i‡(
ócf
 =
NULL
 || !ócf->
a˘ive
) {

1170 
√xt
;

1173 i‡(
s
->
auto_pushed
) {

1174 
√xt
;

1177 i‡(
	`ngx_πmp_exec_öô_˘x
(
s
, 
v
->
«me
, v->
¨gs
, 
NGX_RTMP_EXEC_PUBLISHING
)

1178 !
NGX_OK
)

1180 
√xt
;

1183 
	`ngx_πmp_exec_unm™aged
(
s
, &
ócf
->
c⁄f
[
NGX_RTMP_EXEC_PUBLISH
], "publish");

1185 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

1187 
	`ngx_πmp_exec_m™aged
(
s
, &
˘x
->
push_exec
, "push");

1189 
√xt
:

1190  
	`√xt_publish
(
s
, 
v
);

1191 
	}
}

1194 
ngx_öt_t


1195 
	$ngx_πmp_exec_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

1197 
ngx_πmp_exec_˘x_t
 *
˘x
;

1198 
ngx_πmp_exec_puŒ_˘x_t
 *
p˘x
;

1199 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

1201 
ócf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

1203 i‡(
ócf
 =
NULL
 || !ócf->
a˘ive
) {

1204 
√xt
;

1207 i‡(
	`ngx_πmp_exec_öô_˘x
(
s
, 
v
->
«me
, v->
¨gs
, 
NGX_RTMP_EXEC_PLAYING
)

1208 !
NGX_OK
)

1210 
√xt
;

1213 
	`ngx_πmp_exec_unm™aged
(
s
, &
ócf
->
c⁄f
[
NGX_RTMP_EXEC_PLAY
], "play");

1215 i‡(
	`ngx_πmp_exec_öô_puŒ_˘x
(
s
, 
v
->
«me
Ë!
NGX_OK
) {

1216 
√xt
;

1219 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

1220 
p˘x
 = 
˘x
->
puŒ
;

1222 i‡(
p˘x
 &&Ö˘x->
cou¡î
 == 1) {

1223 
	`ngx_πmp_exec_m™aged
(
s
, &
p˘x
->
puŒ_exec
, "pull");

1226 
√xt
:

1227  
	`√xt_∂ay
(
s
, 
v
);

1228 
	}
}

1231 
ngx_öt_t


1232 
	$ngx_πmp_exec_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_˛o£_°ªam_t
 *
v
)

1234 
size_t
 
n
;

1235 
ngx_πmp_exec_t
 *
e
;

1236 
ngx_πmp_exec_˘x_t
 *
˘x
;

1237 
ngx_πmp_exec_puŒ_˘x_t
 *
p˘x
, **
µ˘x
;

1238 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

1240 
ócf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

1241 i‡(
ócf
 =
NULL
) {

1242 
√xt
;

1245 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

1246 i‡(
˘x
 =
NULL
) {

1247 
√xt
;

1250 i‡(
˘x
->
Êags
 & 
NGX_RTMP_EXEC_PUBLISHING
) {

1251 
	`ngx_πmp_exec_unm™aged
(
s
, &
ócf
->
c⁄f
[
NGX_RTMP_EXEC_PUBLISH_DONE
],

1255 i‡(
˘x
->
Êags
 & 
NGX_RTMP_EXEC_PLAYING
) {

1256 
	`ngx_πmp_exec_unm™aged
(
s
, &
ócf
->
c⁄f
[
NGX_RTMP_EXEC_PLAY_DONE
],

1260 
˘x
->
Êags
 = 0;

1262 i‡(
˘x
->
push_exec
.
√…s
 > 0) {

1263 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1265 
˘x
->
push_exec
.
√…s
);

1267 
e
 = 
˘x
->
push_exec
.
ñts
;

1268 
n
 = 0;Ç < 
˘x
->
push_exec
.
√…s
;Ç++, 
e
++) {

1269 
	`ngx_πmp_exec_kûl
(
e
,É->
kûl_sig«l
);

1273 
p˘x
 = 
˘x
->
puŒ
;

1275 i‡(
p˘x
 && --p˘x->
cou¡î
 == 0) {

1276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1278 
p˘x
->
puŒ_exec
.
√…s
);

1280 
e
 = 
p˘x
->
puŒ_exec
.
ñts
;

1281 
n
 = 0;Ç < 
p˘x
->
puŒ_exec
.
√…s
;Ç++, 
e
++) {

1282 
	`ngx_πmp_exec_kûl
(
e
,É->
kûl_sig«l
);

1285 
µ˘x
 = &
ócf
->
puŒ
[
	`ngx_hash_key
(
p˘x
->
«me
.
d©a
,Ö˘x->«me.
Àn
) %

1286 
ócf
->
nbuckës
];

1288 ; *
µ˘x
;Öp˘x = &(*µ˘x)->
√xt
) {

1289 i‡(
p˘x
 =*
µ˘x
) {

1290 *
µ˘x
 = 
p˘x
->
√xt
;

1295 
	`ngx_de°roy_poﬁ
(
p˘x
->
poﬁ
);

1298 
˘x
->
puŒ
 = 
NULL
;

1300 
√xt
:

1301  
	`√xt_˛o£_°ªam
(
s
, 
v
);

1302 
	}
}

1305 
ngx_öt_t


1306 
	$ngx_πmp_exec_ªc‹d_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_ªc‹d_d⁄e_t
 *
v
)

1308 
u_ch¨
 
c
;

1309 
ngx_uöt_t
 
ext
, 
dú
;

1310 
ngx_πmp_exec_˘x_t
 *
˘x
;

1311 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

1313 i‡(
s
->
auto_pushed
) {

1314 
√xt
;

1317 
ócf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_exec_moduÀ
);

1318 i‡(
ócf
 =
NULL
 || !ócf->
a˘ive
) {

1319 
√xt
;

1322 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_exec_moduÀ
);

1323 i‡(
˘x
 =
NULL
) {

1324 
√xt
;

1327 
˘x
->
ªc‹dî
 = 
v
->recorder;

1328 
˘x
->
∑th
 = 
v
->path;

1330 
˘x
->
dú«me
.
d©a
 = ctx->
∑th
.data;

1331 
˘x
->
dú«me
.
Àn
 = 0;

1333 
dú
 = 
˘x
->
∑th
.
Àn
; dir > 0; dir--) {

1334 
c
 = 
˘x
->
∑th
.
d©a
[
dú
 - 1];

1335 i‡(
c
 == '/' || c == '\\') {

1336 
˘x
->
dú«me
.
Àn
 = 
dú
 - 1;

1341 
˘x
->
fûíame
.
d©a
 = ctx->
∑th
.d©®+ 
dú
;

1342 
˘x
->
fûíame
.
Àn
 = ctx->
∑th
.À¿- 
dú
;

1344 
˘x
->
ba£«me
 = ctx->
fûíame
;

1346 
ext
 = 
˘x
->
fûíame
.
Àn
;Éxt > 0;Éxt--) {

1347 i‡(
˘x
->
fûíame
.
d©a
[
ext
 - 1] == '.') {

1348 
˘x
->
ba£«me
.
Àn
 = 
ext
 - 1;

1353 
	`ngx_πmp_exec_unm™aged
(
s
, &
ócf
->
c⁄f
[
NGX_RTMP_EXEC_RECORD_DONE
],

1356 
	`ngx_°r_nuŒ
(&
v
->
ªc‹dî
);

1357 
	`ngx_°r_nuŒ
(&
v
->
∑th
);

1359 
√xt
:

1360  
	`√xt_ªc‹d_d⁄e
(
s
, 
v
);

1361 
	}
}

1366 
	$ngx_πmp_exec_c⁄f
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1368 *
p
 = 
c⁄f
;

1370 
size_t
 
n
, 
«rgs
;

1371 
ngx_°r_t
 *
s
, *
vÆue
, 
v
;

1372 
ngx_¨øy_t
 *
c⁄fs
;

1373 
ngx_πmp_exec_c⁄f_t
 *
ec
;

1374 
ngx_πmp_exec_≠p_c⁄f_t
 *
ócf
;

1376 
c⁄fs
 = (
ngx_¨øy_t
 *Ë(
p
 + 
cmd
->
off£t
);

1378 
ócf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_≠p_c⁄f
(
cf
, 
ngx_πmp_exec_moduÀ
);

1380 i‡(
c⁄fs
->
«Œoc
 =0 && 
	`ngx_¨øy_öô
(c⁄fs, 
cf
->
poﬁ
, 1,

1381 (
ngx_πmp_exec_c⁄f_t
))

1382 !
NGX_OK
)

1384  
NGX_CONF_ERROR
;

1387 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1389 
ec
 = 
	`ngx_¨øy_push
(
c⁄fs
);

1390 i‡(
ec
 =
NULL
) {

1391  
NGX_CONF_ERROR
;

1394 
	`ngx_memzîo
(
ec
, (
ngx_πmp_exec_c⁄f_t
));

1398 
ec
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

1399 
ec
->
cmd
 = 
vÆue
[1];

1401 i‡(
	`ngx_¨øy_öô
(&
ec
->
«mes
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

1402  
NGX_CONF_ERROR
;

1405 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1406  
NGX_CONF_OK
;

1409 
«rgs
 = 
cf
->
¨gs
->
√…s
 - 2;

1410 i‡(
	`ngx_¨øy_öô
(&
ec
->
¨gs
, 
cf
->
poﬁ
, 
«rgs
, (
ngx_°r_t
)Ë!
NGX_OK
)

1412  
NGX_CONF_ERROR
;

1415 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

1417 
v
 = 
vÆue
[
n
];

1419 i‡(
ócf
->
›ti⁄s
 == 1) {

1421 i‡(
v
.
Àn
 >5 && 
	`ngx_°∫cmp
(v.
d©a
, "name=", 5) == 0) {

1423 
s
 = 
	`ngx_¨øy_push
(&
ec
->
«mes
);

1424 i‡(
s
 =
NULL
) {

1425  
NGX_CONF_ERROR
;

1428 
v
.
d©a
 += 5;

1429 
v
.
Àn
 -= 5;

1431 *
s
 = 
v
;

1437 
s
 = 
	`ngx_¨øy_push
(&
ec
->
¨gs
);

1438 i‡(
s
 =
NULL
) {

1439  
NGX_CONF_ERROR
;

1442 *
s
 = 
v
;

1445  
NGX_CONF_OK
;

1446 
	}
}

1532 
	$ngx_πmp_exec_kûl_sig«l
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1534 
ngx_πmp_exec_maö_c⁄f_t
 *
emcf
 = 
c⁄f
;

1536 
ngx_°r_t
 *
vÆue
;

1538 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1539 
vÆue
++;

1541 
emcf
->
kûl_sig«l
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

1542 i‡(
emcf
->
kûl_sig«l
 !
NGX_ERROR
) {

1543  
NGX_CONF_OK
;

1546 
	#NGX_RMTP_EXEC_SIGNAL
(
«me
) \

1547 i‡(
vÆue
->
Àn
 == (#name) - 1 && \

1548 
	`ngx_°∫ˇ£cmp
(
vÆue
->
d©a
, (
u_ch¨
 *Ë#«me, vÆue->
Àn
) == 0) \

1550 
emcf
->
kûl_sig«l
 = 
SIG
##
«me
; \

1551  
NGX_CONF_OK
; \

1552 }

	)

1556 #i‡!(
NGX_WIN32
)

1557 
	`NGX_RMTP_EXEC_SIGNAL
(
HUP
);

1558 
	`NGX_RMTP_EXEC_SIGNAL
(
INT
);

1559 
	`NGX_RMTP_EXEC_SIGNAL
(
QUIT
);

1560 
	`NGX_RMTP_EXEC_SIGNAL
(
ILL
);

1561 
	`NGX_RMTP_EXEC_SIGNAL
(
ABRT
);

1562 
	`NGX_RMTP_EXEC_SIGNAL
(
FPE
);

1563 
	`NGX_RMTP_EXEC_SIGNAL
(
KILL
);

1564 
	`NGX_RMTP_EXEC_SIGNAL
(
SEGV
);

1565 
	`NGX_RMTP_EXEC_SIGNAL
(
PIPE
);

1566 
	`NGX_RMTP_EXEC_SIGNAL
(
ALRM
);

1567 
	`NGX_RMTP_EXEC_SIGNAL
(
TERM
);

1568 
	`NGX_RMTP_EXEC_SIGNAL
(
USR1
);

1569 
	`NGX_RMTP_EXEC_SIGNAL
(
USR2
);

1570 
	`NGX_RMTP_EXEC_SIGNAL
(
CHLD
);

1571 
	`NGX_RMTP_EXEC_SIGNAL
(
CONT
);

1572 
	`NGX_RMTP_EXEC_SIGNAL
(
STOP
);

1573 
	`NGX_RMTP_EXEC_SIGNAL
(
TSTP
);

1574 
	`NGX_RMTP_EXEC_SIGNAL
(
TTIN
);

1575 
	`NGX_RMTP_EXEC_SIGNAL
(
TTOU
);

1578 #unde‡
NGX_RMTP_EXEC_SIGNAL


1581 
	}
}

1584 
ngx_öt_t


1585 
	$ngx_πmp_exec_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1587 #i‡!(
NGX_WIN32
)

1589 
√xt_publish
 = 
ngx_πmp_publish
;

1590 
ngx_πmp_publish
 = 
ngx_πmp_exec_publish
;

1592 
√xt_∂ay
 = 
ngx_πmp_∂ay
;

1593 
ngx_πmp_∂ay
 = 
ngx_πmp_exec_∂ay
;

1595 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

1596 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_exec_˛o£_°ªam
;

1598 
√xt_ªc‹d_d⁄e
 = 
ngx_πmp_ªc‹d_d⁄e
;

1599 
ngx_πmp_ªc‹d_d⁄e
 = 
ngx_πmp_exec_ªc‹d_d⁄e
;

1603  
NGX_OK
;

1604 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_flv_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_∂ay_moduÀ.h
"

10 
	~"ngx_πmp_codec_moduÀ.h
"

11 
	~"ngx_πmp_°ªams.h
"

14 
ngx_öt_t
 
ngx_πmp_Êv_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_πmp_Êv_ªad_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
);

16 
ngx_öt_t
 
ngx_πmp_Êv_time°amp_to_off£t
(
ngx_πmp_£ssi⁄_t
 *
s
,

17 
ngx_fûe_t
 *
f
, 
ngx_öt_t
 
time°amp
);

18 
ngx_öt_t
 
ngx_πmp_Êv_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
,

19 
ngx_öt_t
 
aödex
,Çgx_öt_à
vödex
);

20 
ngx_öt_t
 
ngx_πmp_Êv_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
);

21 
ngx_öt_t
 
ngx_πmp_Êv_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
,

22 
ngx_uöt_t
 
off£t
);

23 
ngx_öt_t
 
ngx_πmp_Êv_°›
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
);

24 
ngx_öt_t
 
ngx_πmp_Êv_£nd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
,

25 
ngx_uöt_t
 *
ts
);

29 
ngx_uöt_t
 
	m√…s
;

30 
ngx_uöt_t
 
	moff£t
;

31 } 
	tngx_πmp_Êv_ödex_t
;

35 
ngx_öt_t
 
	moff£t
;

36 
ngx_öt_t
 
	m°¨t_time°amp
;

37 
ngx_evít_t
 
	mwrôe_evt
;

38 
uöt32_t
 
	mœ°_audio
;

39 
uöt32_t
 
	mœ°_video
;

40 
ngx_uöt_t
 
	mmsg_mask
;

41 
uöt32_t
 
	mïoch
;

43 
	mmëa_ªad
:1;

44 
ngx_πmp_Êv_ödex_t
 
	mfûïosôi⁄s
;

45 
ngx_πmp_Êv_ödex_t
 
	mtimes
;

46 } 
	tngx_πmp_Êv_˘x_t
;

49 
	#NGX_RTMP_FLV_BUFFER
 (1024*1024)

	)

50 
	#NGX_RTMP_FLV_BUFLEN_ADDON
 1000

	)

51 
	#NGX_RTMP_FLV_TAG_HEADER
 11

	)

52 
	#NGX_RTMP_FLV_DATA_OFFSET
 13

	)

55 
u_ch¨
 
	gngx_πmp_Êv_buf„r
[

56 
NGX_RTMP_FLV_BUFFER
];

57 
u_ch¨
 
	gngx_πmp_Êv_hódî
[

58 
NGX_RTMP_FLV_TAG_HEADER
];

61 
ngx_πmp_moduÀ_t
 
	gngx_πmp_Êv_moduÀ_˘x
 = {

62 
NULL
,

63 
ngx_πmp_Êv_po°c⁄figuøti⁄
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL


73 
ngx_moduÀ_t
 
	gngx_πmp_Êv_moduÀ
 = {

74 
NGX_MODULE_V1
,

75 &
ngx_πmp_Êv_moduÀ_˘x
,

76 
NULL
,

77 
NGX_RTMP_MODULE
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NGX_MODULE_V1_PADDING


89 
ngx_öt_t


90 
	$ngx_πmp_Êv_fûl_ödex
(
ngx_πmp_amf_˘x_t
 *
˘x
, 
ngx_πmp_Êv_ödex_t
 *
idx
)

92 
uöt32_t
 
√…s
;

93 
ngx_buf_t
 *
b
;

99 
b
 = 
˘x
->
lök
->
buf
;

101 i‡(
b
->
œ°
 - b->
pos
 < (
ngx_öt_t
Ë
˘x
->
off£t
 + 4) {

102  
NGX_ERROR
;

105 
	`ngx_πmp_rmem˝y
(&
√…s
, 
b
->
pos
 + 
˘x
->
off£t
, 4);

107 
idx
->
√…s
 =Çelts;

108 
idx
->
off£t
 = 
˘x
->offset + 4;

110  
NGX_OK
;

111 
	}
}

114 
ngx_öt_t


115 
	$ngx_πmp_Êv_öô_ödex
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
)

117 
ngx_πmp_Êv_˘x_t
 *
˘x
;

119 
ngx_πmp_amf_˘x_t
 
fûïosôi⁄s_˘x
;

120 
ngx_πmp_amf_˘x_t
 
times_˘x
;

122 
ngx_πmp_amf_ñt_t
 
ö_key‰ames
[] = {

124 { 
NGX_RTMP_AMF_ARRAY
 | 
NGX_RTMP_AMF_CONTEXT
,

125 
	`ngx_°rög
("filepositions"),

126 &
fûïosôi⁄s_˘x
, 0 },

128 { 
NGX_RTMP_AMF_ARRAY
 | 
NGX_RTMP_AMF_CONTEXT
,

129 
	`ngx_°rög
("times"),

130 &
times_˘x
, 0 }

133 
ngx_πmp_amf_ñt_t
 
ö_öf
[] = {

135 { 
NGX_RTMP_AMF_OBJECT
,

136 
	`ngx_°rög
("keyframes"),

137 
ö_key‰ames
, (in_keyframes) }

140 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

142 { 
NGX_RTMP_AMF_STRING
,

143 
ngx_nuŒ_°rög
,

144 
NULL
, 0 },

146 { 
NGX_RTMP_AMF_OBJECT
,

147 
ngx_nuŒ_°rög
,

148 
ö_öf
, (in_inf) },

151 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

153 i‡(
˘x
 =
NULL
 || 
ö
 == NULL) {

154  
NGX_OK
;

157 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

160 
	`ngx_memzîo
(&
fûïosôi⁄s_˘x
, (filepositions_ctx));

161 
	`ngx_memzîo
(&
times_˘x
, (times_ctx));

163 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

164 (
ö_ñts
) / (in_elts[0])))

166 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

168  
NGX_OK
;

171 i‡(
fûïosôi⁄s_˘x
.
lök
 && 
	`ngx_πmp_Êv_fûl_ödex
(&filepositions_ctx,

172 &
˘x
->
fûïosôi⁄s
)

173 !
NGX_OK
)

175 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

177  
NGX_ERROR
;

180 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

182 
˘x
->
fûïosôi⁄s
.
√…s
, ctx->fûïosôi⁄s.
off£t
);

184 i‡(
times_˘x
.
lök
 && 
	`ngx_πmp_Êv_fûl_ödex
(&times_ctx,

185 &
˘x
->
times
)

186 !
NGX_OK
)

188 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

190  
NGX_ERROR
;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

195 
˘x
->
times
.
√…s
, ctx->times.
off£t
);

197  
NGX_OK
;

198 
	}
}

202 
	$ngx_πmp_Êv_ödex_vÆue
(*
§c
)

204 
v
;

206 
	`ngx_πmp_rmem˝y
(&
v
, 
§c
, 8);

208  
v
;

209 
	}
}

212 
ngx_öt_t


213 
	$ngx_πmp_Êv_time°amp_to_off£t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
,

214 
ngx_öt_t
 
time°amp
)

216 
ngx_πmp_Êv_˘x_t
 *
˘x
;

217 
ssize_t
 
n
, 
size
;

218 
ngx_uöt_t
 
off£t
, 
ödex
, 
ªt
, 
√…s
;

219 
v
;

221 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

223 i‡(
˘x
 =
NULL
) {

224 
ªwöd
;

227 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

229 
time°amp
);

231 i‡(
˘x
->
mëa_ªad
 == 0) {

232 
	`ngx_πmp_Êv_ªad_mëa
(
s
, 
f
);

233 
˘x
->
mëa_ªad
 = 1;

236 i‡(
time°amp
 <0 || 
˘x
->
fûïosôi⁄s
.
√…s
 == 0

237 || 
˘x
->
times
.
√…s
 == 0)

239 
ªwöd
;

243 
off£t
 = 
NGX_RTMP_FLV_DATA_OFFSET
 + 
NGX_RTMP_FLV_TAG_HEADER
 +

244 
˘x
->
times
.
off£t
;

247 
√…s
 = 
	`ngx_mö
(
˘x
->
times
.√…s, (
ngx_πmp_Êv_buf„r
) / 9);

248 
size
 = 
√…s
 * 9;

250 
n
 = 
	`ngx_ªad_fûe
(
f
, 
ngx_πmp_Êv_buf„r
, 
size
, 
off£t
);

252 i‡(
n
 !
size
) {

253 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

255 
ªwöd
;

259 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

260 "Êv:Üooku∞time†√…s=%ui", 
√…s
);

262 
ödex
 = 0; index < 
√…s
 - 1; ++index) {

263 
v
 = 
	`ngx_πmp_Êv_ödex_vÆue
(
ngx_πmp_Êv_buf„r
 +

264 
ödex
 * 9 + 1) * 1000;

266 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

268 
ödex
, (
ngx_uöt_t
Ë
v
);

270 i‡(
time°amp
 < 
v
) {

275 i‡(
ödex
 >
˘x
->
fûïosôi⁄s
.
√…s
) {

276 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

278 
ödex
, 
˘x
->
fûïosôi⁄s
.
√…s
);

279 
ªwöd
;

283 
off£t
 = 
NGX_RTMP_FLV_DATA_OFFSET
 + 
NGX_RTMP_FLV_TAG_HEADER
 +

284 
˘x
->
fûïosôi⁄s
.
off£t
 + 
ödex
 * 9;

286 
n
 = 
	`ngx_ªad_fûe
(
f
, 
ngx_πmp_Êv_buf„r
, 8, 
off£t
 + 1);

288 i‡(
n
 != 8) {

289 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

291 
ªwöd
;

294 
ªt
 = (
ngx_uöt_t
Ë
	`ngx_πmp_Êv_ödex_vÆue
(
ngx_πmp_Êv_buf„r
);

296 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

298 
time°amp
, 
ªt
);

300  
ªt
;

302 
ªwöd
:

303 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

305 
time°amp
);

307  
NGX_RTMP_FLV_DATA_OFFSET
;

308 
	}
}

312 
	$ngx_πmp_Êv_ªad_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
)

314 
ngx_πmp_Êv_˘x_t
 *
˘x
;

315 
ssize_t
 
n
;

316 
ngx_πmp_hódî_t
 
h
;

317 
ngx_chaö_t
 *
out
, 
ö
;

318 
ngx_buf_t
 
ö_buf
;

319 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

320 
uöt32_t
 
size
;

322 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

324 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

326 i‡(
˘x
 =
NULL
) {

330 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

334 
n
 = 
	`ngx_ªad_fûe
(
f
, 
ngx_πmp_Êv_hódî
, (ngx_rtmp_flv_header),

335 
NGX_RTMP_FLV_DATA_OFFSET
);

337 i‡(
n
 !(
ngx_πmp_Êv_hódî
)) {

338 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

343 i‡(
ngx_πmp_Êv_hódî
[0] !
NGX_RTMP_MSG_AMF_META
) {

344 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

349 
	`ngx_memzîo
(&
h
, (h));

351 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_META
;

352 
h
.
msid
 = 
NGX_RTMP_MSID
;

353 
h
.
csid
 = 
NGX_RTMP_CSID_AMF
;

355 
size
 = 0;

356 
	`ngx_πmp_rmem˝y
(&
size
, 
ngx_πmp_Êv_hódî
 + 1, 3);

358 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

359 "Êv: mëad©®size=%D", 
size
);

361 i‡(
size
 > (
ngx_πmp_Êv_buf„r
)) {

362 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

368 
n
 = 
	`ngx_ªad_fûe
(
f
, 
ngx_πmp_Êv_buf„r
, 
size
,

369 (
ngx_πmp_Êv_hódî
) +

370 
NGX_RTMP_FLV_DATA_OFFSET
);

372 i‡(
n
 !(
ssize_t
Ë
size
) {

373 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

379 
	`ngx_memzîo
(&
ö
, (in));

380 
	`ngx_memzîo
(&
ö_buf
, (in_buf));

382 
ö
.
buf
 = &
ö_buf
;

383 
ö_buf
.
pos
 = 
ngx_πmp_Êv_buf„r
;

384 
ö_buf
.
œ°
 = 
ngx_πmp_Êv_buf„r
 + 
size
;

386 
	`ngx_πmp_Êv_öô_ödex
(
s
, &
ö
);

389 
out
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, &
ö
);

391 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
h
, 
NULL
, 
out
);

392 
	`ngx_πmp_£nd_mesßge
(
s
, 
out
, 0);

393 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
out
);

394 
	}
}

397 
ngx_öt_t


398 
	$ngx_πmp_Êv_£nd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
, 
ngx_uöt_t
 *
ts
)

400 
ngx_πmp_Êv_˘x_t
 *
˘x
;

401 
uöt32_t
 
œ°_time°amp
;

402 
ngx_πmp_hódî_t
 
h
, 
lh
;

403 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

404 
ngx_chaö_t
 *
out
, 
ö
;

405 
ngx_buf_t
 
ö_buf
;

406 
ngx_öt_t
 
rc
;

407 
ssize_t
 
n
;

408 
uöt32_t
 
buÊí
, 
íd_time°amp
, 
size
;

410 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

412 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

414 i‡(
˘x
 =
NULL
) {

415  
NGX_ERROR
;

418 i‡(
˘x
->
off£t
 == -1) {

419 
˘x
->
off£t
 = 
	`ngx_πmp_Êv_time°amp_to_off£t
(
s
, 
f
,

420 
˘x
->
°¨t_time°amp
);

421 
˘x
->
°¨t_time°amp
 = -1;

424 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

425 "Êv:ÑódÅagáàoff£t=%i", 
˘x
->
off£t
);

428 
n
 = 
	`ngx_ªad_fûe
(
f
, 
ngx_πmp_Êv_hódî
,

429 (
ngx_πmp_Êv_hódî
), 
˘x
->
off£t
);

431 i‡(
n
 !(
ngx_πmp_Êv_hódî
)) {

432 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

434  
NGX_DONE
;

438 
	`ngx_memzîo
(&
h
, (h));

440 
h
.
msid
 = 
NGX_RTMP_MSID
;

441 
h
.
ty≥
 = 
ngx_πmp_Êv_hódî
[0];

443 
size
 = 0;

445 
	`ngx_πmp_rmem˝y
(&
size
, 
ngx_πmp_Êv_hódî
 + 1, 3);

446 
	`ngx_πmp_rmem˝y
(&
h
.
time°amp
, 
ngx_πmp_Êv_hódî
 + 4, 3);

448 ((
u_ch¨
 *Ë&
h
.
time°amp
)[3] = 
ngx_πmp_Êv_hódî
[7];

450 
˘x
->
off£t
 +((
ngx_πmp_Êv_hódî
Ë+ 
size
 + 4);

452 
œ°_time°amp
 = 0;

454 
h
.
ty≥
) {

456 
NGX_RTMP_MSG_AUDIO
:

457 
h
.
csid
 = 
NGX_RTMP_CSID_AUDIO
;

458 
œ°_time°amp
 = 
˘x
->
œ°_audio
;

459 
˘x
->
œ°_audio
 = 
h
.
time°amp
;

462 
NGX_RTMP_MSG_VIDEO
:

463 
h
.
csid
 = 
NGX_RTMP_CSID_VIDEO
;

464 
œ°_time°amp
 = 
˘x
->
œ°_video
;

465 
˘x
->
œ°_video
 = 
h
.
time°amp
;

469  
NGX_OK
;

472 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

475 (
ngx_öt_t
Ë
h
.
ty≥
,
size
, h.
time°amp
, 
œ°_time°amp
);

477 
lh
 = 
h
;

478 
lh
.
time°amp
 = 
œ°_time°amp
;

480 i‡(
size
 > (
ngx_πmp_Êv_buf„r
)) {

481 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

482 "Êv:Åoÿbig mesßge: %D>%uz", 
size
,

483 (
ngx_πmp_Êv_buf„r
));

484 
√xt
;

488 
n
 = 
	`ngx_ªad_fûe
(
f
, 
ngx_πmp_Êv_buf„r
, 
size
,

489 
˘x
->
off£t
 - 
size
 - 4);

491 i‡(
n
 !(
ssize_t
Ë
size
) {

492 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

494  
NGX_ERROR
;

498 
	`ngx_memzîo
(&
ö
, (in));

499 
	`ngx_memzîo
(&
ö_buf
, (in_buf));

501 
ö
.
buf
 = &
ö_buf
;

502 
ö_buf
.
pos
 = 
ngx_πmp_Êv_buf„r
;

503 
ö_buf
.
œ°
 = 
ngx_πmp_Êv_buf„r
 + 
size
;

506 
out
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, &
ö
);

508 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
h
, 
˘x
->
msg_mask
 & (1 << h.
ty≥
) ?

509 &
lh
 : 
NULL
, 
out
);

510 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
s
, 
out
, 0);

511 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
out
);

513 i‡(
rc
 =
NGX_AGAIN
) {

514  
NGX_AGAIN
;

517 i‡(
rc
 !
NGX_OK
) {

518  
NGX_ERROR
;

521 
˘x
->
msg_mask
 |(1 << 
h
.
ty≥
);

523 
√xt
:

524 i‡(
˘x
->
°¨t_time°amp
 == -1) {

525 
˘x
->
°¨t_time°amp
 = 
h
.
time°amp
;

526 
˘x
->
ïoch
 = 
ngx_cuºít_m£c
;

528 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

529 "Êv: sèπ_time°amp=%i", 
˘x
->
°¨t_time°amp
);

530  
NGX_OK
;

533 
buÊí
 = 
s
->buÊí + 
NGX_RTMP_FLV_BUFLEN_ADDON
;

535 
íd_time°amp
 = (
ngx_cuºít_m£c
 - 
˘x
->
ïoch
) +

536 
˘x
->
°¨t_time°amp
 + 
buÊí
;

538 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

540 
h
.
time°amp
 > 
íd_time°amp
 ? "schedule" : "advance",

541 
h
.
time°amp
 > 
íd_time°amp
 ? h.timestamp -Énd_timestamp : 0,

542 
h
.
time°amp
, 
íd_time°amp
, (
ngx_öt_t
Ë
buÊí
);

544 
s
->
cuºít_time
 = 
h
.
time°amp
;

547 i‡(
h
.
time°amp
 > 
íd_time°amp
) {

548  
h
.
time°amp
 - 
íd_time°amp
;

551  
NGX_OK
;

552 
	}
}

555 
ngx_öt_t


556 
	$ngx_πmp_Êv_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
, 
ngx_öt_t
 
aödex
,

557 
ngx_öt_t
 
vödex
)

559 
ngx_πmp_Êv_˘x_t
 *
˘x
;

561 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

563 i‡(
˘x
 =
NULL
) {

564 
˘x
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_Êv_˘x_t
));

566 i‡(
˘x
 =
NULL
) {

567  
NGX_ERROR
;

570 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_Êv_moduÀ
);

573 
	`ngx_memzîo
(
˘x
, (*ctx));

575  
NGX_OK
;

576 
	}
}

579 
ngx_öt_t


580 
	$ngx_πmp_Êv_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
)

582 
ngx_πmp_Êv_˘x_t
 *
˘x
;

584 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

586 i‡(
˘x
 =
NULL
) {

587  
NGX_OK
;

590 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

593 
˘x
->
off£t
 = -1;

594 
˘x
->
msg_mask
 = 0;

596  
NGX_OK
;

597 
	}
}

600 
ngx_öt_t


601 
	$ngx_πmp_Êv_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
, 
ngx_uöt_t
 
time°amp
)

603 
ngx_πmp_Êv_˘x_t
 *
˘x
;

605 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

607 i‡(
˘x
 =
NULL
) {

608  
NGX_OK
;

611 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

612 "Êv: sìkÅime°amp=%ui", 
time°amp
);

614 
˘x
->
°¨t_time°amp
 = 
time°amp
;

615 
˘x
->
ïoch
 = 
ngx_cuºít_m£c
;

616 
˘x
->
off£t
 = -1;

617 
˘x
->
msg_mask
 = 0;

619  
NGX_OK
;

620 
	}
}

623 
ngx_öt_t


624 
	$ngx_πmp_Êv_°›
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
)

626 
ngx_πmp_Êv_˘x_t
 *
˘x
;

628 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_Êv_moduÀ
);

630 i‡(
˘x
 =
NULL
) {

631  
NGX_OK
;

634 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

637  
NGX_OK
;

638 
	}
}

641 
ngx_öt_t


642 
	$ngx_πmp_Êv_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

644 
ngx_πmp_∂ay_maö_c⁄f_t
 *
pmcf
;

645 
ngx_πmp_∂ay_fmt_t
 **
pfmt
, *
fmt
;

647 
pmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_∂ay_moduÀ
);

649 
pfmt
 = 
	`ngx_¨øy_push
(&
pmcf
->
fmts
);

651 i‡(
pfmt
 =
NULL
) {

652  
NGX_ERROR
;

655 
fmt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_∂ay_fmt_t
));

657 i‡(
fmt
 =
NULL
) {

658  
NGX_ERROR
;

661 *
pfmt
 = 
fmt
;

663 
	`ngx_°r_£t
(&
fmt
->
«me
, "flv-format");

665 
	`ngx_°r_nuŒ
(&
fmt
->
pfx
);

666 
	`ngx_°r_£t
(&
fmt
->
sfx
, ".flv");

668 
fmt
->
öô
 = 
ngx_πmp_Êv_öô
;

669 
fmt
->
°¨t
 = 
ngx_πmp_Êv_°¨t
;

670 
fmt
->
£ek
 = 
ngx_πmp_Êv_£ek
;

671 
fmt
->
°›
 = 
ngx_πmp_Êv_°›
;

672 
fmt
->
£nd
 = 
ngx_πmp_Êv_£nd
;

674  
NGX_OK
;

675 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_handler.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

10 
	~"ngx_πmp_amf.h
"

13 
ngx_πmp_ªcv
(
ngx_evít_t
 *
ªv
);

14 
ngx_πmp_£nd
(
ngx_evít_t
 *
ªv
);

15 
ngx_πmp_pög
(
ngx_evít_t
 *
ªv
);

16 
ngx_öt_t
 
ngx_πmp_föÆize_£t_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
);

19 
ngx_uöt_t
 
	gngx_πmp_«c˚±ed
;

22 
ngx_πmp_b™dwidth_t
 
	gngx_πmp_bw_out
;

23 
ngx_πmp_b™dwidth_t
 
	gngx_πmp_bw_ö
;

26 #ifde‡
NGX_DEBUG


28 
	$ngx_πmp_mesßge_ty≥
(
uöt8_t
 
ty≥
)

30 * 
ty≥s
[] = {

56  
ty≥
 < (
ty≥s
) / (types[0])

57 ? 
ty≥s
[
ty≥
]

59 
	}
}

63 
	$ngx_πmp_u£r_mesßge_ty≥
(
uöt16_t
 
evt
)

65 * 
evts
[] = {

76  
evt
 < (
evts
) / (evts[0])

77 ? 
evts
[
evt
]

79 
	}
}

84 
	$ngx_πmp_cy˛e
(
ngx_πmp_£ssi⁄_t
 *
s
)

86 
ngx_c⁄√˘i⁄_t
 *
c
;

88 
c
 = 
s
->
c⁄√˘i⁄
;

89 
c
->
ªad
->
h™dÀr
 = 
ngx_πmp_ªcv
;

90 
c
->
wrôe
->
h™dÀr
 = 
ngx_πmp_£nd
;

92 
s
->
pög_evt
.
d©a
 = 
c
;

93 
s
->
pög_evt
.
log
 = 
c
->log;

94 
s
->
pög_evt
.
h™dÀr
 = 
ngx_πmp_pög
;

95 
	`ngx_πmp_ª£t_pög
(
s
);

97 
	`ngx_πmp_ªcv
(
c
->
ªad
);

98 
	}
}

101 
ngx_chaö_t
 *

102 
	$ngx_πmp_Æloc_ö_buf
(
ngx_πmp_£ssi⁄_t
 *
s
)

104 
ngx_chaö_t
 *
˛
;

105 
ngx_buf_t
 *
b
;

106 
size_t
 
size
;

108 i‡((
˛
 = 
	`ngx_Æloc_chaö_lök
(
s
->
ö_poﬁ
)Ë=
NULL


109 || (
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
s
->
ö_poﬁ
)Ë=
NULL
)

111  
NULL
;

114 
˛
->
√xt
 = 
NULL
;

115 
b
 = 
˛
->
buf
;

116 
size
 = 
s
->
ö_chunk_size
 + 
NGX_RTMP_MAX_CHUNK_HEADER
;

118 
b
->
°¨t
 = b->
œ°
 = b->
pos
 = 
	`ngx_∑Œoc
(
s
->
ö_poﬁ
, 
size
);

119 i‡(
b
->
°¨t
 =
NULL
) {

120  
NULL
;

122 
b
->
íd
 = b->
°¨t
 + 
size
;

124  
˛
;

125 
	}
}

129 
	$ngx_πmp_ª£t_pög
(
ngx_πmp_£ssi⁄_t
 *
s
)

131 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

133 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

134 i‡(
cscf
->
pög
 == 0) {

138 
s
->
pög_a˘ive
 = 0;

139 
s
->
pög_ª£t
 = 0;

140 
	`ngx_add_timî
(&
s
->
pög_evt
, 
cscf
->
pög
);

142 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

143 "pög: waô %Mms", 
cscf
->
pög
);

144 
	}
}

148 
	$ngx_πmp_pög
(
ngx_evít_t
 *
≥v
)

150 
ngx_c⁄√˘i⁄_t
 *
c
;

151 
ngx_πmp_£ssi⁄_t
 *
s
;

152 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

154 
c
 = 
≥v
->
d©a
;

155 
s
 = 
c
->
d©a
;

157 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

159 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

160 "pög fœgs: %d, %d, %d", 
s
->
pög_ª£t
, s->
pög_a˘ive
, s->
ªœy
);

172 i‡(
s
->
pög_ª£t
) {

173 
	`ngx_πmp_ª£t_pög
(
s
);

177 i‡(
s
->
pög_a˘ive
) {

178 i‡(
s
->
ªœy
 == 0) {

179 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

183 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

187 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

191 i‡(
cscf
->
busy
) {

192 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

194 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

198 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

199 "pög: scheduÀ %Mms", 
cscf
->
pög_timeout
);

201 i‡(
	`ngx_πmp_£nd_pög_ªque°
(
s
, (
uöt32_t
)
ngx_cuºít_m£c
Ë!
NGX_OK
) {

202 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

206 
s
->
pög_a˘ive
 = 1;

207 
	`ngx_add_timî
(
≥v
, 
cscf
->
pög_timeout
);

208 
	}
}

212 
	$ngx_πmp_ªcv
(
ngx_evít_t
 *
ªv
)

214 
ngx_öt_t
 
n
;

215 
ngx_c⁄√˘i⁄_t
 *
c
;

216 
ngx_πmp_£ssi⁄_t
 *
s
;

217 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

218 
ngx_πmp_hódî_t
 *
h
;

219 
ngx_πmp_°ªam_t
 *
°
, *
°0
;

220 
ngx_chaö_t
 *
ö
, *
hód
;

221 
ngx_buf_t
 *
b
;

222 
u_ch¨
 *
p
, *
µ
, *
ﬁd_pos
;

223 
size_t
 
size
, 
fsize
, 
ﬁd_size
;

224 
uöt8_t
 
fmt
, 
ext
;

225 
uöt32_t
 
csid
, 
time°amp
;

227 
c
 = 
ªv
->
d©a
;

228 
s
 = 
c
->
d©a
;

229 
b
 = 
NULL
;

230 
ﬁd_pos
 = 
NULL
;

231 
ﬁd_size
 = 0;

232 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

234 i‡(
c
->
de°royed
) {

240 
°
 = &
s
->
ö_°ªams
[s->
ö_csid
];

243 i‡(
°
->
ö
 =
NULL
) {

244 
°
->
ö
 = 
	`ngx_πmp_Æloc_ö_buf
(
s
);

245 i‡(
°
->
ö
 =
NULL
) {

246 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

248 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

253 
h
 = &
°
->
hdr
;

254 
ö
 = 
°
->in;

255 
b
 = 
ö
->
buf
;

257 i‡(
ﬁd_size
) {

259 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0,

260 "ªusög f‹mîlyÑód d©a: %d", 
ﬁd_size
);

262 
b
->
pos
 = b->
°¨t
;

263 
b
->
œ°
 = 
	`ngx_movemem
(b->
pos
, 
ﬁd_pos
, 
ﬁd_size
);

265 i‡(
s
->
ö_chunk_size_ch™gög
) {

266 
	`ngx_πmp_föÆize_£t_chunk_size
(
s
);

271 i‡(
ﬁd_pos
) {

272 
b
->
pos
 = b->
œ°
 = b->
°¨t
;

275 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, b->
íd
 - b->last);

277 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

278 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

282 i‡(
n
 =
NGX_AGAIN
) {

283 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

284 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

289 
s
->
pög_ª£t
 = 1;

290 
	`ngx_πmp_upd©e_b™dwidth
(&
ngx_πmp_bw_ö
, 
n
);

291 
b
->
œ°
 +
n
;

292 
s
->
ö_byãs
 +
n
;

294 i‡(
s
->
ö_byãs
 >= 0xf0000000) {

295 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0,

297 
s
->
ö_byãs
 = 0;

298 
s
->
ö_œ°_ack
 = 0;

301 i‡(
s
->
ack_size
 && s->
ö_byãs
 - s->
ö_œ°_ack
 >= s->ack_size) {

303 
s
->
ö_œ°_ack
 = s->
ö_byãs
;

305 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0,

306 "£ndög RTMP ACK(%uD)", 
s
->
ö_byãs
);

308 i‡(
	`ngx_πmp_£nd_ack
(
s
, s->
ö_byãs
)) {

309 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

315 
ﬁd_pos
 = 
NULL
;

316 
ﬁd_size
 = 0;

319 i‡(
b
->
pos
 =b->
°¨t
) {

320 
p
 = 
b
->
pos
;

323 
fmt
 = (*
p
 >> 6) & 0x03;

324 
csid
 = *
p
++ & 0x3f;

326 i‡(
csid
 == 0) {

327 i‡(
b
->
œ°
 - 
p
 < 1)

329 
csid
 = 64;

330 
csid
 +*(
uöt8_t
*)
p
++;

332 } i‡(
csid
 == 1) {

333 i‡(
b
->
œ°
 - 
p
 < 2)

335 
csid
 = 64;

336 
csid
 +*(
uöt8_t
*)
p
++;

337 
csid
 +(
uöt32_t
)256 * (*(
uöt8_t
*)
p
++);

340 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0,

342 ()
fmt
, 
csid
);

344 i‡(
csid
 >(
uöt32_t
)
cscf
->
max_°ªams
) {

345 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

347 
csid
, 
cscf
->
max_°ªams
);

348 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

353 i‡(
s
->
ö_csid
 == 0) {

356 
°
->
ö
 = st->ö->
√xt
;

359 
s
->
ö_csid
 = 
csid
;

360 
°
 = &
s
->
ö_°ªams
[
csid
];

361 i‡(
°
->
ö
 =
NULL
) {

362 
ö
->
√xt
 = in;

364 
ö
->
√xt
 = 
°
->in->next;

365 
°
->
ö
->
√xt
 = in;

367 
°
->
ö
 = in;

368 
h
 = &
°
->
hdr
;

369 
h
->
csid
 = csid;

372 
ext
 = 
°
->ext;

373 
time°amp
 = 
°
->
dtime
;

374 i‡(
fmt
 <= 2 ) {

375 i‡(
b
->
œ°
 - 
p
 < 3)

379 
µ
 = (
u_ch¨
*)&
time°amp
;

380 
µ
[2] = *
p
++;

381 
µ
[1] = *
p
++;

382 
µ
[0] = *
p
++;

383 
µ
[3] = 0;

385 
ext
 = (
time°amp
 == 0x00ffffff);

387 i‡(
fmt
 <= 1) {

388 i‡(
b
->
œ°
 - 
p
 < 4)

394 
µ
 = (
u_ch¨
*)&
h
->
mÀn
;

395 
µ
[2] = *
p
++;

396 
µ
[1] = *
p
++;

397 
µ
[0] = *
p
++;

398 
µ
[3] = 0;

399 
h
->
ty≥
 = *(
uöt8_t
*)
p
++;

401 i‡(
fmt
 == 0) {

402 i‡(
b
->
œ°
 - 
p
 < 4)

406 
µ
 = (
u_ch¨
*)&
h
->
msid
;

407 
µ
[0] = *
p
++;

408 
µ
[1] = *
p
++;

409 
µ
[2] = *
p
++;

410 
µ
[3] = *
p
++;

416 i‡(
ext
) {

417 i‡(
b
->
œ°
 - 
p
 < 4)

419 
µ
 = (
u_ch¨
*)&
time°amp
;

420 
µ
[3] = *
p
++;

421 
µ
[2] = *
p
++;

422 
µ
[1] = *
p
++;

423 
µ
[0] = *
p
++;

426 i‡(
°
->
Àn
 == 0) {

432 
°
->
ext
 = (exà&& 
cscf
->
publish_time_fix
);

433 i‡(
fmt
) {

434 
°
->
dtime
 = 
time°amp
;

436 
h
->
time°amp
 =Åimestamp;

437 
°
->
dtime
 = 0;

441 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0,

444 ()
fmt
, 
	`ngx_πmp_mesßge_ty≥
(
h
->
ty≥
), ()h->type,

445 
h
->
time°amp
, 
°
->
dtime
, h->
mÀn
, st->
Àn
, h->
msid
);

448 
b
->
pos
 = 
p
;

450 i‡(
h
->
mÀn
 > 
cscf
->
max_mesßge
) {

451 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

452 "[too_big_mesßge]Åoÿbig mesßge: %uz", 
cscf
->
max_mesßge
);

453 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

458 
size
 = 
b
->
œ°
 - b->
pos
;

459 
fsize
 = 
h
->
mÀn
 - 
°
->
Àn
;

461 i‡(
size
 < 
	`ngx_mö
(
fsize
, 
s
->
ö_chunk_size
))

466 i‡(
fsize
 > 
s
->
ö_chunk_size
) {

468 
°
->
Àn
 +
s
->
ö_chunk_size
;

469 
b
->
œ°
 = b->
pos
 + 
s
->
ö_chunk_size
;

470 
ﬁd_pos
 = 
b
->
œ°
;

471 
ﬁd_size
 = 
size
 - 
s
->
ö_chunk_size
;

475 
hód
 = 
°
->
ö
->
√xt
;

476 
°
->
ö
->
√xt
 = 
NULL
;

477 
b
->
œ°
 = b->
pos
 + 
fsize
;

478 
ﬁd_pos
 = 
b
->
œ°
;

479 
ﬁd_size
 = 
size
 - 
fsize
;

480 
°
->
Àn
 = 0;

481 
h
->
time°amp
 +
°
->
dtime
;

483 i‡(
	`ngx_πmp_ª˚ive_mesßge
(
s
, 
h
, 
hód
Ë!
NGX_OK
) {

484 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

488 i‡(
s
->
ö_chunk_size_ch™gög
) {

490 i‡(!
ﬁd_size
) {

491 
	`ngx_πmp_föÆize_£t_chunk_size
(
s
);

496 
°0
 = &
s
->
ö_°ªams
[0];

497 
°
->
ö
->
√xt
 = 
°0
->in;

498 
°0
->
ö
 = 
hód
;

499 
°
->
ö
 = 
NULL
;

503 
s
->
ö_csid
 = 0;

505 
	}
}

509 
	$ngx_πmp_£nd
(
ngx_evít_t
 *
wev
)

511 
ngx_c⁄√˘i⁄_t
 *
c
;

512 
ngx_πmp_£ssi⁄_t
 *
s
;

513 
ngx_öt_t
 
n
;

514 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

516 
c
 = 
wev
->
d©a
;

517 
s
 = 
c
->
d©a
;

519 i‡(
c
->
de°royed
) {

523 i‡(
wev
->
timedout
) {

524 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

526 
c
->
timedout
 = 1;

527 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

531 i‡(
wev
->
timî_£t
) {

532 
	`ngx_dñ_timî
(
wev
);

535 i‡(
s
->
out_chaö
 =
NULL
 && s->
out_pos
 !s->
out_œ°
) {

536 
s
->
out_chaö
 = s->
out
[s->
out_pos
];

537 
s
->
out_bpos
 = s->
out_chaö
->
buf
->
pos
;

540 
s
->
out_chaö
) {

541 
n
 = 
c
->
	`£nd
(c, 
s
->
out_bpos
, s->
out_chaö
->
buf
->
œ°
 - s->out_bpos);

543 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

544 
	`ngx_add_timî
(
c
->
wrôe
, 
s
->
timeout
);

545 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

546 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

551 i‡(
n
 < 0) {

552 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

556 
s
->
out_byãs
 +
n
;

558 
	`ngx_πmp_upd©e_b™dwidth
(&
ngx_πmp_bw_out
, 
n
);

559 
s
->
out_bpos
 +
n
;

560 i‡(
s
->
out_bpos
 =s->
out_chaö
->
buf
->
œ°
) {

561 
s
->
out_chaö
 = s->out_chaö->
√xt
;

562 i‡(
s
->
out_chaö
 =
NULL
) {

563 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

564 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
s
->
out
[s->
out_pos
]);

565 ++
s
->
out_pos
;

566 
s
->
out_pos
 %s->
out_queue
;

567 i‡(
s
->
out_pos
 =s->
out_œ°
) {

570 
s
->
out_chaö
 = s->
out
[s->
out_pos
];

572 
s
->
out_bpos
 = s->
out_chaö
->
buf
->
pos
;

576 i‡(
wev
->
a˘ive
) {

577 
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0);

580 
	`ngx_evít_¥o˚ss_po°ed
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
s
->
po°ed_dry_evíts
);

581 
	}
}

585 
	$ngx_πmp_¥ï¨e_mesßge
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

586 
ngx_πmp_hódî_t
 *
lh
, 
ngx_chaö_t
 *
out
)

588 
ngx_chaö_t
 *
l
;

589 
u_ch¨
 *
p
, *
µ
;

590 
ngx_öt_t
 
hsize
, 
thsize
, 
nbufs
;

591 
uöt32_t
 
mÀn
, 
time°amp
, 
ext_time°amp
;

592 
uöt8_t
 
hdrsize
[] = { 12, 8, 4, 1 };

593 
u_ch¨
 
th
[7];

594 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

595 
uöt8_t
 
fmt
;

596 
ngx_c⁄√˘i⁄_t
 *
c
;

598 
c
 = 
s
->
c⁄√˘i⁄
;

599 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

601 i‡(
h
->
csid
 >(
uöt32_t
)
cscf
->
max_°ªams
) {

602 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

604 
h
->
csid
, 
cscf
->
max_°ªams
);

605 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

610 
mÀn
 = 0;

611 
nbufs
 = 0;

612 
l
 = 
out
;Ü;Ü =Ü->
√xt
) {

613 
mÀn
 +(
l
->
buf
->
œ°
 -Ü->buf->
pos
);

614 ++
nbufs
;

617 
fmt
 = 0;

618 i‡(
lh
 &&Üh->
csid
 && 
h
->
msid
 ==Üh->msid) {

619 ++
fmt
;

620 i‡(
h
->
ty≥
 =
lh
->ty≥ && 
mÀn
 && mlen ==Üh->mlen) {

621 ++
fmt
;

622 i‡(
h
->
time°amp
 =
lh
->timestamp) {

623 ++
fmt
;

626 
time°amp
 = 
h
->time°am∞- 
lh
->timestamp;

628 
time°amp
 = 
h
->timestamp;

636 
hsize
 = 
hdrsize
[
fmt
];

638 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

641 
	`ngx_πmp_mesßge_ty≥
(
h
->
ty≥
), ()h->ty≥, ()
fmt
,

642 
h
->
csid
, 
time°amp
, 
mÀn
, h->
msid
, 
nbufs
);

644 
ext_time°amp
 = 0;

645 i‡(
time°amp
 >= 0x00ffffff) {

646 
ext_time°amp
 = 
time°amp
;

647 
time°amp
 = 0x00ffffff;

648 
hsize
 += 4;

651 i‡(
h
->
csid
 >= 64) {

652 ++
hsize
;

653 i‡(
h
->
csid
 >= 320) {

654 ++
hsize
;

659 
out
->
buf
->
pos
 -
hsize
;

660 
p
 = 
out
->
buf
->
pos
;

663 *
p
 = (
fmt
 << 6);

664 i‡(
h
->
csid
 >= 2 && h->csid <= 63) {

665 *
p
++ |(((
uöt8_t
)
h
->
csid
) & 0x3f);

666 } i‡(
h
->
csid
 >= 64 && h->csid < 320) {

667 ++
p
;

668 *
p
++ = (
uöt8_t
)(
h
->
csid
 - 64);

670 *
p
++ |= 1;

671 *
p
++ = (
uöt8_t
)(
h
->
csid
 - 64);

672 *
p
++ = (
uöt8_t
)((
h
->
csid
 - 64) >> 8);

676 
thsize
 = 
p
 - 
out
->
buf
->
pos
;

677 
	`ngx_mem˝y
(
th
, 
out
->
buf
->
pos
, 
thsize
);

678 
th
[0] |= 0xc0;

681 i‡(
fmt
 <= 2) {

682 
µ
 = (
u_ch¨
*)&
time°amp
;

683 *
p
++ = 
µ
[2];

684 *
p
++ = 
µ
[1];

685 *
p
++ = 
µ
[0];

686 i‡(
fmt
 <= 1) {

687 
µ
 = (
u_ch¨
*)&
mÀn
;

688 *
p
++ = 
µ
[2];

689 *
p
++ = 
µ
[1];

690 *
p
++ = 
µ
[0];

691 *
p
++ = 
h
->
ty≥
;

692 i‡(
fmt
 == 0) {

693 
µ
 = (
u_ch¨
*)&
h
->
msid
;

694 *
p
++ = 
µ
[0];

695 *
p
++ = 
µ
[1];

696 *
p
++ = 
µ
[2];

697 *
p
++ = 
µ
[3];

703 i‡(
ext_time°amp
) {

704 
µ
 = (
u_ch¨
*)&
ext_time°amp
;

705 *
p
++ = 
µ
[3];

706 *
p
++ = 
µ
[2];

707 *
p
++ = 
µ
[1];

708 *
p
++ = 
µ
[0];

714 i‡(
cscf
->
∂ay_time_fix
) {

715 
	`ngx_mem˝y
(&
th
[
thsize
], 
p
 - 4, 4);

716 
thsize
 += 4;

721 
out
 = out->
√xt
; out; out = out->next) {

722 
out
->
buf
->
pos
 -
thsize
;

723 
	`ngx_mem˝y
(
out
->
buf
->
pos
, 
th
, 
thsize
);

725 
	}
}

728 
ngx_öt_t


729 
	$ngx_πmp_£nd_mesßge
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
out
,

730 
ngx_uöt_t
 
¥i‹ôy
)

732 
ngx_uöt_t
 
nmsg
;

734 
nmsg
 = (
s
->
out_œ°
 - s->
out_pos
Ë% s->
out_queue
 + 1;

736 i‡(
¥i‹ôy
 > 3) {

737 
¥i‹ôy
 = 3;

742 i‡(
nmsg
 + 
¥i‹ôy
 * 
s
->
out_queue
 / 4 >= s->out_queue) {

743 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

745 
nmsg
, 
¥i‹ôy
);

746  
NGX_AGAIN
;

749 
s
->
out
[s->
out_œ°
++] = out;

750 
s
->
out_œ°
 %s->
out_queue
;

752 
	`ngx_πmp_acquúe_sh¨ed_chaö
(
out
);

754 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

756 
nmsg
, 
¥i‹ôy
, 
s
->
out_œ°
);

758 i‡(
¥i‹ôy
 && 
s
->
out_buf„r
 && 
nmsg
 < s->
out_c‹k
) {

759  
NGX_OK
;

762 i‡(!
s
->
c⁄√˘i⁄
->
wrôe
->
a˘ive
) {

763 
	`ngx_πmp_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

767  
NGX_OK
;

768 
	}
}

771 
ngx_öt_t


772 
	$ngx_πmp_ª˚ive_mesßge
(
ngx_πmp_£ssi⁄_t
 *
s
,

773 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
)

775 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

776 
ngx_¨øy_t
 *
evhs
;

777 
size_t
 
n
;

778 
ngx_πmp_h™dÀr_±
 *
evh
;

780 
cmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

782 #ifde‡
NGX_DEBUG


784 
nbufs
;

785 
ngx_chaö_t
 *
ch
;

787 
nbufs
 = 1, 
ch
 = 
ö
;

788 
ch
->
√xt
;

789 
ch
 = ch->
√xt
, ++
nbufs
);

791 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

794 
	`ngx_πmp_mesßge_ty≥
(
h
->
ty≥
), ()h->type,

795 
h
->
csid
, h->
time°amp
, h->
mÀn
, h->
msid
, 
nbufs
);

799 i‡(
h
->
ty≥
 > 
NGX_RTMP_MSG_MAX
) {

800 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

801 "u√x≥˘ed RTMP mesßgêty≥: %d", ()
h
->
ty≥
);

802  
NGX_OK
;

805 
evhs
 = &
cmcf
->
evíts
[
h
->
ty≥
];

806 
evh
 = 
evhs
->
ñts
;

808 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

809 "nh™dÀrs: %d", 
evhs
->
√…s
);

811 
n
 = 0;Ç < 
evhs
->
√…s
; ++n, ++
evh
) {

812 i‡(!
evh
) {

815 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

816 "ˇŒög h™dÀ∏%d", 
n
);

818 (*
evh
)(
s
, 
h
, 
ö
)) {

819 
NGX_ERROR
:

820 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

821 "h™dÀ∏%d faûed", 
n
);

822  
NGX_ERROR
;

823 
NGX_DONE
:

824  
NGX_OK
;

828  
NGX_OK
;

829 
	}
}

832 
ngx_öt_t


833 
	$ngx_πmp_£t_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
size
)

835 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

836 
ngx_chaö_t
 *
li
, *
Êi
, *
lo
, *
Êo
;

837 
ngx_buf_t
 *
bi
, *
bo
;

838 
ngx_öt_t
 
n
;

840 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

841 "£âög chunk_size=%ui", 
size
);

843 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

845 
s
->
ö_ﬁd_poﬁ
 = s->
ö_poﬁ
;

846 
s
->
ö_chunk_size
 = 
size
;

847 
s
->
ö_poﬁ
 = 
	`ngx_¸óã_poﬁ
(4096, s->
c⁄√˘i⁄
->
log
);

850 i‡(
s
->
ö_ﬁd_poﬁ
) {

851 
s
->
ö_chunk_size_ch™gög
 = 1;

852 
s
->
ö_°ªams
[0].
ö
 = 
NULL
;

854 
n
 = 1;Ç < 
cscf
->
max_°ªams
; ++n) {

859 
li
 = 
s
->
ö_°ªams
[
n
].
ö
;

860 i‡(
li
 =
NULL
 ||Üi->
√xt
 == NULL) {

861 
s
->
ö_°ªams
[
n
].
ö
 = 
NULL
;

865 
li
 =Üi->
√xt
;

866 
Êi
 = 
li
;

867 
lo
 = 
	`ngx_πmp_Æloc_ö_buf
(
s
);

868 i‡(
lo
 =
NULL
) {

869  
NGX_ERROR
;

871 
Êo
 = 
lo
;

873 
bi
 = 
li
->
buf
;

874 
bo
 = 
lo
->
buf
;

876 i‡(
bo
->
íd
 - bo->
œ°
 >
bi
->œ° - bi->
pos
) {

877 
bo
->
œ°
 = 
	`ngx_˝ymem
(bo->œ°, 
bi
->
pos
,

878 
bi
->
œ°
 - bi->
pos
);

879 
li
 =Üi->
√xt
;

880 i‡(
li
 =
Êi
) {

881 
lo
->
√xt
 = 
Êo
;

882 
s
->
ö_°ªams
[
n
].
ö
 = 
lo
;

888 
bi
->
pos
 +(
	`ngx_˝ymem
(
bo
->
œ°
, bi->pos,

889 
bo
->
íd
 - bo->
œ°
) - bo->last);

890 
lo
->
√xt
 = 
	`ngx_πmp_Æloc_ö_buf
(
s
);

891 
lo
 =Üo->
√xt
;

892 i‡(
lo
 =
NULL
) {

893  
NGX_ERROR
;

899  
NGX_OK
;

900 
	}
}

903 
ngx_öt_t


904 
	$ngx_πmp_föÆize_£t_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
)

906 i‡(
s
->
ö_chunk_size_ch™gög
 && s->
ö_ﬁd_poﬁ
) {

907 
	`ngx_de°roy_poﬁ
(
s
->
ö_ﬁd_poﬁ
);

908 
s
->
ö_ﬁd_poﬁ
 = 
NULL
;

909 
s
->
ö_chunk_size_ch™gög
 = 0;

911  
NGX_OK
;

912 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_handshake.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

11 
	~<›ís¶/hmac.h
>

12 
	~<›ís¶/sha.h
>

15 
ngx_πmp_h™dshake_£nd
(
ngx_evít_t
 *
wev
);

16 
ngx_πmp_h™dshake_ªcv
(
ngx_evít_t
 *
ªv
);

17 
ngx_πmp_h™dshake_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
);

37 
u_ch¨


38 
	gngx_πmp_£rvî_key
[] = {

50 
u_ch¨


51 
	gngx_πmp_˛õ¡_key
[] = {

62 c⁄° 
u_ch¨


63 
	gngx_πmp_£rvî_vîsi⁄
[4] = {

68 c⁄° 
u_ch¨


69 
	gngx_πmp_˛õ¡_vîsi⁄
[4] = {

74 
	#NGX_RTMP_HANDSHAKE_KEYLEN
 
SHA256_DIGEST_LENGTH


	)

75 
	#NGX_RTMP_HANDSHAKE_BUFSIZE
 1537

	)

78 
	#NGX_RTMP_HANDSHAKE_SERVER_RECV_CHALLENGE
 1

	)

79 
	#NGX_RTMP_HANDSHAKE_SERVER_SEND_CHALLENGE
 2

	)

80 
	#NGX_RTMP_HANDSHAKE_SERVER_SEND_RESPONSE
 3

	)

81 
	#NGX_RTMP_HANDSHAKE_SERVER_RECV_RESPONSE
 4

	)

82 
	#NGX_RTMP_HANDSHAKE_SERVER_DONE
 5

	)

85 
	#NGX_RTMP_HANDSHAKE_CLIENT_SEND_CHALLENGE
 6

	)

86 
	#NGX_RTMP_HANDSHAKE_CLIENT_RECV_CHALLENGE
 7

	)

87 
	#NGX_RTMP_HANDSHAKE_CLIENT_RECV_RESPONSE
 8

	)

88 
	#NGX_RTMP_HANDSHAKE_CLIENT_SEND_RESPONSE
 9

	)

89 
	#NGX_RTMP_HANDSHAKE_CLIENT_DONE
 10

	)

92 
ngx_°r_t
 
	gngx_πmp_£rvî_fuŒ_key


93 { (
ngx_πmp_£rvî_key
),Çgx_rtmp_server_key };

94 
ngx_°r_t
 
	gngx_πmp_£rvî_∑πül_key


95 { 36, 
ngx_πmp_£rvî_key
 };

97 
ngx_°r_t
 
	gngx_πmp_˛õ¡_fuŒ_key


98 { (
ngx_πmp_˛õ¡_key
),Çgx_rtmp_client_key };

99 
ngx_°r_t
 
	gngx_πmp_˛õ¡_∑πül_key


100 { 30, 
ngx_πmp_˛õ¡_key
 };

103 
ngx_öt_t


104 
	$ngx_πmp_make_dige°
(
ngx_°r_t
 *
key
, 
ngx_buf_t
 *
§c
,

105 
u_ch¨
 *
skù
, u_ch¨ *
d°
, 
ngx_log_t
 *
log
)

107 
HMAC_CTX
 
hmac
;

108 
hmac_öôülized
;

109 
Àn
;

111 i‡(!
hmac_öôülized
) {

112 
	`HMAC_CTX_öô
(&
hmac
);

113 
hmac_öôülized
 = 1;

116 
	`HMAC_Inô_ex
(&
hmac
, 
key
->
d©a
, key->
Àn
, 
	`EVP_sha256
(), 
NULL
);

118 i‡(
skù
 && 
§c
->
pos
 <skù && skù <§c->
œ°
) {

119 i‡(
skù
 !
§c
->
pos
) {

120 
	`HMAC_Upd©e
(&
hmac
, 
§c
->
pos
, 
skù
 - src->pos);

122 i‡(
§c
->
œ°
 !
skù
 + 
NGX_RTMP_HANDSHAKE_KEYLEN
) {

123 
	`HMAC_Upd©e
(&
hmac
, 
skù
 + 
NGX_RTMP_HANDSHAKE_KEYLEN
,

124 
§c
->
œ°
 - 
skù
 - 
NGX_RTMP_HANDSHAKE_KEYLEN
);

127 
	`HMAC_Upd©e
(&
hmac
, 
§c
->
pos
, src->
œ°
 - src->pos);

130 
	`HMAC_FöÆ
(&
hmac
, 
d°
, &
Àn
);

132  
NGX_OK
;

133 
	}
}

136 
ngx_öt_t


137 
	$ngx_πmp_föd_dige°
(
ngx_buf_t
 *
b
, 
ngx_°r_t
 *
key
, 
size_t
 
ba£
, 
ngx_log_t
 *
log
)

139 
size_t
 
n
, 
offs
;

140 
u_ch¨
 
dige°
[
NGX_RTMP_HANDSHAKE_KEYLEN
];

141 
u_ch¨
 *
p
;

143 
offs
 = 0;

144 
n
 = 0;Ç < 4; ++n) {

145 
offs
 +
b
->
pos
[
ba£
 + 
n
];

147 
offs
 = (off†% 728Ë+ 
ba£
 + 4;

148 
p
 = 
b
->
pos
 + 
offs
;

150 i‡(
	`ngx_πmp_make_dige°
(
key
, 
b
, 
p
, 
dige°
, 
log
Ë!
NGX_OK
) {

151  
NGX_ERROR
;

154 i‡(
	`ngx_memcmp
(
dige°
, 
p
, 
NGX_RTMP_HANDSHAKE_KEYLEN
) == 0) {

155  
offs
;

158  
NGX_ERROR
;

159 
	}
}

162 
ngx_öt_t


163 
	$ngx_πmp_wrôe_dige°
(
ngx_buf_t
 *
b
, 
ngx_°r_t
 *
key
, 
size_t
 
ba£
,

164 
ngx_log_t
 *
log
)

166 
size_t
 
n
, 
offs
;

167 
u_ch¨
 *
p
;

169 
offs
 = 0;

170 
n
 = 8;Ç < 12; ++n) {

171 
offs
 +
b
->
pos
[
ba£
 + 
n
];

173 
offs
 = (off†% 728Ë+ 
ba£
 + 12;

174 
p
 = 
b
->
pos
 + 
offs
;

176 i‡(
	`ngx_πmp_make_dige°
(
key
, 
b
, 
p
,Ö, 
log
Ë!
NGX_OK
) {

177  
NGX_ERROR
;

180  
NGX_OK
;

181 
	}
}

185 
	$ngx_πmp_fûl_øndom_buf„r
(
ngx_buf_t
 *
b
)

187 ; 
b
->
œ°
 !b->
íd
; ++b->last) {

188 *
b
->
œ°
 = (
u_ch¨
Ë
	`ønd
();

190 
	}
}

193 
ngx_buf_t
 *

194 
	$ngx_πmp_Æloc_h™dshake_buf„r
(
ngx_πmp_£ssi⁄_t
 *
s
)

196 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

197 
ngx_chaö_t
 *
˛
;

198 
ngx_buf_t
 *
b
;

200 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

203 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

205 i‡(
cscf
->
‰ì_hs
) {

206 
˛
 = 
cscf
->
‰ì_hs
;

207 
b
 = 
˛
->
buf
;

208 
cscf
->
‰ì_hs
 = 
˛
->
√xt
;

209 
	`ngx_‰ì_chaö
(
cscf
->
poﬁ
, 
˛
);

212 
b
 = 
	`ngx_pˇŒoc
(
cscf
->
poﬁ
, (
ngx_buf_t
));

213 i‡(
b
 =
NULL
) {

214  
NULL
;

216 
b
->
mem‹y
 = 1;

217 
b
->
°¨t
 = 
	`ngx_pˇŒoc
(
cscf
->
poﬁ
, 
NGX_RTMP_HANDSHAKE_BUFSIZE
);

218 i‡(
b
->
°¨t
 =
NULL
) {

219  
NULL
;

221 
b
->
íd
 = b->
°¨t
 + 
NGX_RTMP_HANDSHAKE_BUFSIZE
;

224 
b
->
pos
 = b->
œ°
 = b->
°¨t
;

226  
b
;

227 
	}
}

231 
	$ngx_πmp_‰ì_h™dshake_buf„rs
(
ngx_πmp_£ssi⁄_t
 *
s
)

233 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

234 
ngx_chaö_t
 *
˛
;

236 i‡(
s
->
hs_buf
 =
NULL
) {

239 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

240 
˛
 = 
	`ngx_Æloc_chaö_lök
(
cscf
->
poﬁ
);

241 i‡(
˛
 =
NULL
) {

244 
˛
->
buf
 = 
s
->
hs_buf
;

245 
˛
->
√xt
 = 
cscf
->
‰ì_hs
;

246 
cscf
->
‰ì_hs
 = 
˛
;

247 
s
->
hs_buf
 = 
NULL
;

248 
	}
}

251 
ngx_öt_t


252 
	$ngx_πmp_h™dshake_¸óã_chÆÀnge
(
ngx_πmp_£ssi⁄_t
 *
s
,

253 c⁄° 
u_ch¨
 
vîsi⁄
[4], 
ngx_°r_t
 *
key
)

255 
ngx_buf_t
 *
b
;

257 
b
 = 
s
->
hs_buf
;

258 
b
->
œ°
 = b->
pos
 = b->
°¨t
;

259 *
b
->
œ°
++ = '\x03';

260 
b
->
œ°
 = 
	`ngx_πmp_r˝ymem
(b->œ°, &
s
->
ïoch
, 4);

261 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
vîsi⁄
, 4);

262 
	`ngx_πmp_fûl_øndom_buf„r
(
b
);

263 ++
b
->
pos
;

264 i‡(
	`ngx_πmp_wrôe_dige°
(
b
, 
key
, 0, 
s
->
c⁄√˘i⁄
->
log
Ë!
NGX_OK
) {

265  
NGX_ERROR
;

267 --
b
->
pos
;

268  
NGX_OK
;

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_πmp_h™dshake_∑r£_chÆÀnge
(
ngx_πmp_£ssi⁄_t
 *
s
,

274 
ngx_°r_t
 *
≥î_key
,Çgx_°r_à*
key
)

276 
ngx_buf_t
 *
b
;

277 
u_ch¨
 *
p
;

278 
ngx_öt_t
 
offs
;

280 
b
 = 
s
->
hs_buf
;

281 i‡(*
b
->
pos
 != '\x03') {

282 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

284 (
ngx_öt_t
)*
b
->
pos
);

285  
NGX_ERROR
;

287 ++
b
->
pos
;

288 
s
->
≥î_ïoch
 = 0;

289 
	`ngx_πmp_rmem˝y
(&
s
->
≥î_ïoch
, 
b
->
pos
, 4);

291 
p
 = 
b
->
pos
 + 4;

292 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

294 (
ngx_öt_t
)
p
[3], (ngx_int_t)p[2],

295 (
ngx_öt_t
)
p
[1], (ngx_int_t)p[0],

296 (
uöt32_t
)
s
->
≥î_ïoch
);

297 i‡(*(
uöt32_t
 *)
p
 == 0) {

298 
s
->
hs_ﬁd
 = 1;

299  
NGX_OK
;

302 
offs
 = 
	`ngx_πmp_föd_dige°
(
b
, 
≥î_key
, 772, 
s
->
c⁄√˘i⁄
->
log
);

303 i‡(
offs
 =
NGX_ERROR
) {

304 
offs
 = 
	`ngx_πmp_föd_dige°
(
b
, 
≥î_key
, 8, 
s
->
c⁄√˘i⁄
->
log
);

306 i‡(
offs
 =
NGX_ERROR
) {

307 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

309 
s
->
hs_ﬁd
 = 1;

310  
NGX_OK
;

312 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

313 "h™dshake: dige° foundáàpos=%i", 
offs
);

314 
b
->
pos
 +
offs
;

315 
b
->
œ°
 = b->
pos
 + 
NGX_RTMP_HANDSHAKE_KEYLEN
;

316 
s
->
hs_dige°
 = 
	`ngx_∑Œoc
(s->
c⁄√˘i⁄
->
poﬁ
, 
NGX_RTMP_HANDSHAKE_KEYLEN
);

317 i‡(
	`ngx_πmp_make_dige°
(
key
, 
b
, 
NULL
, 
s
->
hs_dige°
, s->
c⁄√˘i⁄
->
log
)

318 !
NGX_OK
)

320  
NGX_ERROR
;

322  
NGX_OK
;

323 
	}
}

326 
ngx_öt_t


327 
	$ngx_πmp_h™dshake_¸óã_ª•⁄£
(
ngx_πmp_£ssi⁄_t
 *
s
)

329 
ngx_buf_t
 *
b
;

330 
u_ch¨
 *
p
;

331 
ngx_°r_t
 
key
;

333 
b
 = 
s
->
hs_buf
;

334 
b
->
pos
 = b->
œ°
 = b->
°¨t
 + 1;

335 
	`ngx_πmp_fûl_øndom_buf„r
(
b
);

336 i‡(
s
->
hs_dige°
) {

337 
p
 = 
b
->
œ°
 - 
NGX_RTMP_HANDSHAKE_KEYLEN
;

338 
key
.
d©a
 = 
s
->
hs_dige°
;

339 
key
.
Àn
 = 
NGX_RTMP_HANDSHAKE_KEYLEN
;

340 i‡(
	`ngx_πmp_make_dige°
(&
key
, 
b
, 
p
,Ö, 
s
->
c⁄√˘i⁄
->
log
Ë!
NGX_OK
) {

341  
NGX_ERROR
;

345  
NGX_OK
;

346 
	}
}

350 
	$ngx_πmp_h™dshake_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
)

352 
	`ngx_πmp_‰ì_h™dshake_buf„rs
(
s
);

354 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

357 i‡(
	`ngx_πmp_fúe_evít
(
s
, 
NGX_RTMP_HANDSHAKE_DONE
,

358 
NULL
, NULLË!
NGX_OK
)

360 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

364 
	`ngx_πmp_cy˛e
(
s
);

365 
	}
}

369 
	$ngx_πmp_h™dshake_ªcv
(
ngx_evít_t
 *
ªv
)

371 
ssize_t
 
n
;

372 
ngx_c⁄√˘i⁄_t
 *
c
;

373 
ngx_πmp_£ssi⁄_t
 *
s
;

374 
ngx_buf_t
 *
b
;

376 
c
 = 
ªv
->
d©a
;

377 
s
 = 
c
->
d©a
;

379 i‡(
c
->
de°royed
) {

383 i‡(
ªv
->
timedout
) {

384 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

386 
c
->
timedout
 = 1;

387 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

391 i‡(
ªv
->
timî_£t
) {

392 
	`ngx_dñ_timî
(
ªv
);

395 
b
 = 
s
->
hs_buf
;

397 
b
->
œ°
 !b->
íd
) {

398 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, b->
íd
 - b->last);

400 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

401 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

405 i‡(
n
 =
NGX_AGAIN
) {

406 
	`ngx_add_timî
(
ªv
, 
s
->
timeout
);

407 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

408 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

413 
b
->
œ°
 +
n
;

416 i‡(
ªv
->
a˘ive
) {

417 
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0);

420 ++
s
->
hs_°age
;

421 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

422 "h™dshake: sègê%ui", 
s
->
hs_°age
);

424 
s
->
hs_°age
) {

425 
NGX_RTMP_HANDSHAKE_SERVER_SEND_CHALLENGE
:

426 i‡(
	`ngx_πmp_h™dshake_∑r£_chÆÀnge
(
s
,

427 &
ngx_πmp_˛õ¡_∑πül_key
,

428 &
ngx_πmp_£rvî_fuŒ_key
Ë!
NGX_OK
)

430 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

432 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

435 i‡(
s
->
hs_ﬁd
) {

436 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

438 
s
->
hs_buf
->
pos
 = s->hs_buf->
°¨t
;

439 
s
->
hs_buf
->
œ°
 = s->hs_buf->
íd
;

440 } i‡(
	`ngx_πmp_h™dshake_¸óã_chÆÀnge
(
s
,

441 
ngx_πmp_£rvî_vîsi⁄
,

442 &
ngx_πmp_£rvî_∑πül_key
Ë!
NGX_OK
)

444 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

446 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

449 
	`ngx_πmp_h™dshake_£nd
(
c
->
wrôe
);

452 
NGX_RTMP_HANDSHAKE_SERVER_DONE
:

453 
	`ngx_πmp_h™dshake_d⁄e
(
s
);

456 
NGX_RTMP_HANDSHAKE_CLIENT_RECV_RESPONSE
:

457 i‡(
	`ngx_πmp_h™dshake_∑r£_chÆÀnge
(
s
,

458 &
ngx_πmp_£rvî_∑πül_key
,

459 &
ngx_πmp_˛õ¡_fuŒ_key
Ë!
NGX_OK
)

461 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

463 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

466 
s
->
hs_buf
->
pos
 = s->hs_buf->
œ°
 = s->hs_buf->
°¨t
 + 1;

467 
	`ngx_πmp_h™dshake_ªcv
(
c
->
ªad
);

470 
NGX_RTMP_HANDSHAKE_CLIENT_SEND_RESPONSE
:

471 i‡(
	`ngx_πmp_h™dshake_¸óã_ª•⁄£
(
s
Ë!
NGX_OK
) {

472 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

474 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

477 
	`ngx_πmp_h™dshake_£nd
(
c
->
wrôe
);

480 
	}
}

484 
	$ngx_πmp_h™dshake_£nd
(
ngx_evít_t
 *
wev
)

486 
ngx_öt_t
 
n
;

487 
ngx_c⁄√˘i⁄_t
 *
c
;

488 
ngx_πmp_£ssi⁄_t
 *
s
;

489 
ngx_buf_t
 *
b
;

491 
c
 = 
wev
->
d©a
;

492 
s
 = 
c
->
d©a
;

494 i‡(
c
->
de°royed
) {

498 i‡(
wev
->
timedout
) {

499 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

501 i‡(
s
->
ªœy
) {

502 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

505 
c
->
timedout
 = 1;

506 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

510 i‡(
wev
->
timî_£t
) {

511 
	`ngx_dñ_timî
(
wev
);

514 
b
 = 
s
->
hs_buf
;

516 
b
->
pos
 !b->
œ°
) {

517 
n
 = 
c
->
	`£nd
(c, 
b
->
pos
, b->
œ°
 - b->pos);

519 i‡(
n
 =
NGX_ERROR
) {

520 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

524 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

525 
	`ngx_add_timî
(
c
->
wrôe
, 
s
->
timeout
);

526 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

527 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

532 
b
->
pos
 +
n
;

535 i‡(
wev
->
a˘ive
) {

536 
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0);

539 ++
s
->
hs_°age
;

540 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

541 "h™dshake: sègê%ui", 
s
->
hs_°age
);

543 
s
->
hs_°age
) {

544 
NGX_RTMP_HANDSHAKE_SERVER_SEND_RESPONSE
:

545 i‡(
s
->
hs_ﬁd
) {

546 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

548 
s
->
hs_buf
->
pos
 = s->hs_buf->
°¨t
 + 1;

549 
s
->
hs_buf
->
œ°
 = s->hs_buf->
íd
;

550 } i‡(
	`ngx_πmp_h™dshake_¸óã_ª•⁄£
(
s
Ë!
NGX_OK
) {

551 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

553 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

556 
	`ngx_πmp_h™dshake_£nd
(
wev
);

559 
NGX_RTMP_HANDSHAKE_SERVER_RECV_RESPONSE
:

560 
s
->
hs_buf
->
pos
 = s->hs_buf->
œ°
 = s->hs_buf->
°¨t
 + 1;

561 
	`ngx_πmp_h™dshake_ªcv
(
c
->
ªad
);

564 
NGX_RTMP_HANDSHAKE_CLIENT_RECV_CHALLENGE
:

565 
s
->
hs_buf
->
pos
 = s->hs_buf->
œ°
 = s->hs_buf->
°¨t
;

566 
	`ngx_πmp_h™dshake_ªcv
(
c
->
ªad
);

569 
NGX_RTMP_HANDSHAKE_CLIENT_DONE
:

570 
	`ngx_πmp_h™dshake_d⁄e
(
s
);

573 
	}
}

577 
	$ngx_πmp_h™dshake
(
ngx_πmp_£ssi⁄_t
 *
s
)

579 
ngx_c⁄√˘i⁄_t
 *
c
;

581 
c
 = 
s
->
c⁄√˘i⁄
;

582 
c
->
ªad
->
h™dÀr
 = 
ngx_πmp_h™dshake_ªcv
;

583 
c
->
wrôe
->
h™dÀr
 = 
ngx_πmp_h™dshake_£nd
;

585 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

588 
s
->
hs_buf
 = 
	`ngx_πmp_Æloc_h™dshake_buf„r
(s);

589 
s
->
hs_°age
 = 
NGX_RTMP_HANDSHAKE_SERVER_RECV_CHALLENGE
;

591 
	`ngx_πmp_h™dshake_ªcv
(
c
->
ªad
);

592 
	}
}

596 
	$ngx_πmp_˛õ¡_h™dshake
(
ngx_πmp_£ssi⁄_t
 *
s
, 
async
)

598 
ngx_c⁄√˘i⁄_t
 *
c
;

600 
c
 = 
s
->
c⁄√˘i⁄
;

601 
c
->
ªad
->
h™dÀr
 = 
ngx_πmp_h™dshake_ªcv
;

602 
c
->
wrôe
->
h™dÀr
 = 
ngx_πmp_h™dshake_£nd
;

604 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

607 
s
->
hs_buf
 = 
	`ngx_πmp_Æloc_h™dshake_buf„r
(s);

608 
s
->
hs_°age
 = 
NGX_RTMP_HANDSHAKE_CLIENT_SEND_CHALLENGE
;

610 i‡(
	`ngx_πmp_h™dshake_¸óã_chÆÀnge
(
s
,

611 
ngx_πmp_˛õ¡_vîsi⁄
,

612 &
ngx_πmp_˛õ¡_∑πül_key
Ë!
NGX_OK
)

614 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

618 i‡(
async
) {

619 
	`ngx_add_timî
(
c
->
wrôe
, 
s
->
timeout
);

620 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

621 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

626 
	`ngx_πmp_h™dshake_£nd
(
c
->
wrôe
);

627 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_init.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

10 
	~"ngx_πmp_¥oxy_¥Ÿocﬁ.h
"

13 
ngx_πmp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

14 
u_ch¨
 * 
ngx_πmp_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

18 
	$ngx_πmp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

20 
ngx_uöt_t
 
i
;

21 
ngx_πmp_p‹t_t
 *
p‹t
;

22 
sockaddr
 *
ß
;

23 
sockaddr_ö
 *
sö
;

24 
ngx_πmp_ö_addr_t
 *
addr
;

25 
ngx_πmp_£ssi⁄_t
 *
s
;

26 
ngx_πmp_addr_c⁄f_t
 *
addr_c⁄f
;

27 
ngx_öt_t
 
unix_sockë
;

28 #i‡(
NGX_HAVE_INET6
)

29 
sockaddr_ö6
 *
sö6
;

30 
ngx_πmp_ö6_addr_t
 *
addr6
;

33 ++
ngx_πmp_«c˚±ed
;

39 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

40 
unix_sockë
 = 0;

42 i‡(
p‹t
->
«ddrs
 > 1) {

52 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

53 
	`ngx_πmp_˛o£_c⁄√˘i⁄
(
c
);

57 
ß
 = 
c
->
loˇl_sockaddr
;

59 
ß
->
ß_Ámûy
) {

61 #i‡(
NGX_HAVE_INET6
)

62 
AF_INET6
:

63 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

65 
addr6
 = 
p‹t
->
addrs
;

69 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

70 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

75 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

80 
AF_UNIX
:

81 
unix_sockë
 = 1;

84 
sö
 = (
sockaddr_ö
 *Ë
ß
;

86 
addr
 = 
p‹t
->
addrs
;

90 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

91 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

96 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

102 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

104 #i‡(
NGX_HAVE_INET6
)

105 
AF_INET6
:

106 
addr6
 = 
p‹t
->
addrs
;

107 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

111 
AF_UNIX
:

112 
unix_sockë
 = 1;

115 
addr
 = 
p‹t
->
addrs
;

116 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

121 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%ui client connected '%V'",

122 
c
->
numbî
, &c->
addr_ãxt
);

124 
s
 = 
	`ngx_πmp_öô_£ssi⁄
(
c
, 
addr_c⁄f
);

125 i‡(
s
 =
NULL
) {

132 
s
->
auto_pushed
 = 
unix_sockë
;

134 i‡(
addr_c⁄f
->
¥oxy_¥Ÿocﬁ
) {

135 
	`ngx_πmp_¥oxy_¥Ÿocﬁ
(
s
);

138 
	`ngx_πmp_h™dshake
(
s
);

140 
	}
}

143 
ngx_πmp_£ssi⁄_t
 *

144 
	$ngx_πmp_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_πmp_addr_c⁄f_t
 *
addr_c⁄f
)

146 
ngx_πmp_£ssi⁄_t
 *
s
;

147 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

148 
ngx_πmp_îr‹_log_˘x_t
 *
˘x
;

150 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_πmp_£ssi⁄_t
) +

151 (
ngx_chaö_t
 *Ë* ((
ngx_πmp_c‹e_§v_c⁄f_t
 *)

152 
addr_c⁄f
->
˘x
-> 
§v_c⁄f
[
ngx_πmp_c‹e_moduÀ


153 .
˘x_ödex
])->
out_queue
);

154 i‡(
s
 =
NULL
) {

155 
	`ngx_πmp_˛o£_c⁄√˘i⁄
(
c
);

156  
NULL
;

159 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

160 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

162 
s
->
addr_ãxt
 = &
addr_c⁄f
->addr_text;

164 
c
->
d©a
 = 
s
;

165 
s
->
c⁄√˘i⁄
 = 
c
;

167 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_πmp_îr‹_log_˘x_t
));

168 i‡(
˘x
 =
NULL
) {

169 
	`ngx_πmp_˛o£_c⁄√˘i⁄
(
c
);

170  
NULL
;

173 
˘x
->
˛õ¡
 = &
c
->
addr_ãxt
;

174 
˘x
->
£ssi⁄
 = 
s
;

176 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

177 
c
->
log
->
h™dÀr
 = 
ngx_πmp_log_îr‹
;

178 
c
->
log
->
d©a
 = 
˘x
;

179 
c
->
log
->
a˘i⁄
 = 
NULL
;

181 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

183 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_πmp_max_moduÀ
);

184 i‡(
s
->
˘x
 =
NULL
) {

185 
	`ngx_πmp_˛o£_c⁄√˘i⁄
(
c
);

186  
NULL
;

189 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

191 
s
->
out_queue
 = 
cscf
->out_queue;

192 
s
->
out_c‹k
 = 
cscf
->out_cork;

193 
s
->
ö_°ªams
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_πmp_°ªam_t
)

194 * 
cscf
->
max_°ªams
);

195 i‡(
s
->
ö_°ªams
 =
NULL
) {

196 
	`ngx_πmp_˛o£_c⁄√˘i⁄
(
c
);

197  
NULL
;

200 #i‡(
ngöx_vîsi⁄
 >= 1007005)

201 
	`ngx_queue_öô
(&
s
->
po°ed_dry_evíts
);

204 
s
->
ïoch
 = 
ngx_cuºít_m£c
;

205 
s
->
timeout
 = 
cscf
->timeout;

206 
s
->
buÊí
 = 
cscf
->buflen;

207 
	`ngx_πmp_£t_chunk_size
(
s
, 
NGX_RTMP_DEFAULT_CHUNK_SIZE
);

210 i‡(
	`ngx_πmp_fúe_evít
(
s
, 
NGX_RTMP_CONNECT
, 
NULL
, NULLË!
NGX_OK
) {

211 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

212  
NULL
;

215  
s
;

216 
	}
}

219 
u_ch¨
 *

220 
	$ngx_πmp_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

222 
u_ch¨
 *
p
;

223 
ngx_πmp_£ssi⁄_t
 *
s
;

224 
ngx_πmp_îr‹_log_˘x_t
 *
˘x
;

226 i‡(
log
->
a˘i⁄
) {

227 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

228 
Àn
 -
p
 - 
buf
;

229 
buf
 = 
p
;

232 
˘x
 = 
log
->
d©a
;

234 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", 
˘x
->
˛õ¡
);

235 
Àn
 -
p
 - 
buf
;

236 
buf
 = 
p
;

238 
s
 = 
˘x
->
£ssi⁄
;

240 i‡(
s
 =
NULL
) {

241  
p
;

244 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", sîvî: %V", 
s
->
addr_ãxt
);

245 
Àn
 -
p
 - 
buf
;

246 
buf
 = 
p
;

248  
p
;

249 
	}
}

253 
	$ngx_πmp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

255 
ngx_poﬁ_t
 *
poﬁ
;

257 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0, "close connection");

259 #i‡(
NGX_STAT_STUB
)

260 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

263 
poﬁ
 = 
c
->pool;

264 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

265 
	`ngx_de°roy_poﬁ
(
poﬁ
);

266 
	}
}

270 
	$ngx_πmp_˛o£_£ssi⁄_h™dÀr
(
ngx_evít_t
 *
e
)

272 
ngx_πmp_£ssi⁄_t
 *
s
;

273 
ngx_c⁄√˘i⁄_t
 *
c
;

274 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

276 
s
 = 
e
->
d©a
;

277 
c
 = 
s
->
c⁄√˘i⁄
;

279 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

281 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0, "close session");

283 
	`ngx_πmp_fúe_evít
(
s
, 
NGX_RTMP_DISCONNECT
, 
NULL
, NULL);

285 i‡(
s
->
pög_evt
.
timî_£t
) {

286 
	`ngx_dñ_timî
(&
s
->
pög_evt
);

289 i‡(
s
->
ö_ﬁd_poﬁ
) {

290 
	`ngx_de°roy_poﬁ
(
s
->
ö_ﬁd_poﬁ
);

293 i‡(
s
->
ö_poﬁ
) {

294 
	`ngx_de°roy_poﬁ
(
s
->
ö_poﬁ
);

297 
	`ngx_πmp_‰ì_h™dshake_buf„rs
(
s
);

299 
s
->
out_pos
 !s->
out_œ°
) {

300 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
s
->
out
[s->
out_pos
++]);

301 
s
->
out_pos
 %s->
out_queue
;

304 
	`ngx_πmp_˛o£_c⁄√˘i⁄
(
c
);

305 
	}
}

309 
	$ngx_πmp_föÆize_£ssi⁄
(
ngx_πmp_£ssi⁄_t
 *
s
)

311 
ngx_evít_t
 *
e
;

312 
ngx_c⁄√˘i⁄_t
 *
c
;

314 
c
 = 
s
->
c⁄√˘i⁄
;

315 i‡(
c
->
de°royed
) {

319 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0, "finalize session");

321 
c
->
de°royed
 = 1;

322 
e
 = &
s
->
˛o£
;

323 
e
->
d©a
 = 
s
;

324 
e
->
h™dÀr
 = 
ngx_πmp_˛o£_£ssi⁄_h™dÀr
;

325 
e
->
log
 = 
c
->log;

327 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

328 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_limit_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

13 
ngx_öt_t
 
	mmax_c⁄n
;

14 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

15 } 
	tngx_πmp_limô_maö_c⁄f_t
;

18 
ngx_°r_t
 
	gshm_«me
 = 
ngx_°rög
("rtmp_limit");

21 
ngx_öt_t
 
ngx_πmp_limô_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

22 *
ngx_πmp_limô_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 
ngx_comm™d_t
 
	gngx_πmp_limô_comm™ds
[] = {

27 { 
ngx_°rög
("max_connections"),

28 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

29 
ngx_c⁄f_£t_num_¶Ÿ
,

30 
NGX_RTMP_MAIN_CONF_OFFSET
,

31 
off£tof
(
ngx_πmp_limô_maö_c⁄f_t
, 
max_c⁄n
),

32 
NULL
 },

34 
ngx_nuŒ_comm™d


38 
ngx_πmp_moduÀ_t
 
	gngx_πmp_limô_moduÀ_˘x
 = {

39 
NULL
,

40 
ngx_πmp_limô_po°c⁄figuøti⁄
,

41 
ngx_πmp_limô_¸óã_maö_c⁄f
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_πmp_limô_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_πmp_limô_moduÀ_˘x
,

53 
ngx_πmp_limô_comm™ds
,

54 
NGX_RTMP_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_πmp_limô_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

69 
ngx_πmp_limô_maö_c⁄f_t
 *
lmcf
;

71 
lmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_limô_maö_c⁄f_t
));

72 i‡(
lmcf
 =
NULL
) {

73  
NULL
;

76 
lmcf
->
max_c⁄n
 = 
NGX_CONF_UNSET
;

78  
lmcf
;

79 
	}
}

82 
ngx_öt_t


83 
	$ngx_πmp_limô_c⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

84 
ngx_chaö_t
 *
ö
)

86 
ngx_πmp_limô_maö_c⁄f_t
 *
lmcf
;

87 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

88 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

89 
uöt32_t
 *
nc⁄n
, 
n
;

90 
ngx_öt_t
 
rc
;

92 
lmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_limô_moduÀ
);

93 i‡(
lmcf
->
max_c⁄n
 =
NGX_CONF_UNSET
) {

94  
NGX_OK
;

97 
shm_z⁄e
 = 
lmcf
->shm_zone;

98 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

99 
nc⁄n
 = 
shm_z⁄e
->
d©a
;

101 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

102 
n
 = ++*
nc⁄n
;

103 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

105 
rc
 = 
n
 > (
ngx_uöt_t
Ë
lmcf
->
max_c⁄n
 ? 
NGX_ERROR
 : 
NGX_OK
;

107 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

108 "limô: in¯c⁄e˘i⁄ cou¡î: %uD", 
n
);

110 i‡(
rc
 !
NGX_OK
) {

111 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

113 
n
, 
lmcf
->
max_c⁄n
);

116  
rc
;

117 
	}
}

120 
ngx_öt_t


121 
	$ngx_πmp_limô_disc⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

122 
ngx_chaö_t
 *
ö
)

124 
ngx_πmp_limô_maö_c⁄f_t
 *
lmcf
;

125 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

126 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

127 
uöt32_t
 *
nc⁄n
, 
n
;

129 
lmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_limô_moduÀ
);

130 i‡(
lmcf
->
max_c⁄n
 =
NGX_CONF_UNSET
) {

131  
NGX_OK
;

134 
shm_z⁄e
 = 
lmcf
->shm_zone;

135 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

136 
nc⁄n
 = 
shm_z⁄e
->
d©a
;

138 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

139 
n
 = --*
nc⁄n
;

140 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

142 (Ë
n
;

143 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

144 "limô: de¯c⁄e˘i⁄ cou¡î: %uD", 
n
);

146  
NGX_OK
;

147 
	}
}

150 
ngx_öt_t


151 
	$ngx_πmp_limô_shm_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

153 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

154 
uöt32_t
 *
nc⁄n
;

156 i‡(
d©a
) {

157 
shm_z⁄e
->
d©a
 = data;

158  
NGX_OK
;

161 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

163 
nc⁄n
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, 4);

164 i‡(
nc⁄n
 =
NULL
) {

165  
NGX_ERROR
;

168 *
nc⁄n
 = 0;

170 
shm_z⁄e
->
d©a
 = 
nc⁄n
;

172  
NGX_OK
;

173 
	}
}

176 
ngx_öt_t


177 
	$ngx_πmp_limô_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

179 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

180 
ngx_πmp_limô_maö_c⁄f_t
 *
lmcf
;

181 
ngx_πmp_h™dÀr_±
 *
h
;

183 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

185 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_CONNECT
]);

186 *
h
 = 
ngx_πmp_limô_c⁄√˘
;

188 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_DISCONNECT
]);

189 *
h
 = 
ngx_πmp_limô_disc⁄√˘
;

191 
lmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_limô_moduÀ
);

192 i‡(
lmcf
->
max_c⁄n
 =
NGX_CONF_UNSET
) {

193  
NGX_OK
;

196 
lmcf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
shm_«me
, 
ngx_∑gesize
 * 2,

197 &
ngx_πmp_limô_moduÀ
);

198 i‡(
lmcf
->
shm_z⁄e
 =
NULL
) {

199  
NGX_ERROR
;

202 
lmcf
->
shm_z⁄e
->
öô
 = 
ngx_πmp_limô_shm_öô
;

204  
NGX_OK
;

205 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_live_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_live_moduÀ.h
"

10 
	~"ngx_πmp_cmd_moduÀ.h
"

11 
	~"ngx_πmp_codec_moduÀ.h
"

14 
ngx_πmp_publish_±
 
	g√xt_publish
;

15 
ngx_πmp_∂ay_±
 
	g√xt_∂ay
;

16 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

17 
ngx_πmp_∑u£_±
 
	g√xt_∑u£
;

18 
ngx_πmp_°ªam_begö_±
 
	g√xt_°ªam_begö
;

19 
ngx_πmp_°ªam_eof_±
 
	g√xt_°ªam_eof
;

22 
ngx_öt_t
 
ngx_πmp_live_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

23 * 
ngx_πmp_live_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 * 
ngx_πmp_live_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

25 *
∑ª¡
, *
chûd
);

26 *
ngx_πmp_live_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

27 *
c⁄f
);

28 
ngx_πmp_live_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
);

29 
ngx_πmp_live_°›
(
ngx_πmp_£ssi⁄_t
 *
s
);

32 
ngx_comm™d_t
 
	gngx_πmp_live_comm™ds
[] = {

34 { 
ngx_°rög
("live"),

35 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

36 
ngx_c⁄f_£t_Êag_¶Ÿ
,

37 
NGX_RTMP_APP_CONF_OFFSET
,

38 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
live
),

39 
NULL
 },

41 { 
ngx_°rög
("stream_buckets"),

42 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

43 
ngx_c⁄f_£t_°r_¶Ÿ
,

44 
NGX_RTMP_APP_CONF_OFFSET
,

45 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
nbuckës
),

46 
NULL
 },

48 { 
ngx_°rög
("buffer"),

49 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_m£c_¶Ÿ
,

51 
NGX_RTMP_APP_CONF_OFFSET
,

52 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
buÊí
),

53 
NULL
 },

55 { 
ngx_°rög
("sync"),

56 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

57 
ngx_πmp_live_£t_m£c_¶Ÿ
,

58 
NGX_RTMP_APP_CONF_OFFSET
,

59 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
sync
),

60 
NULL
 },

62 { 
ngx_°rög
("interleave"),

63 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_c⁄f_£t_Êag_¶Ÿ
,

65 
NGX_RTMP_APP_CONF_OFFSET
,

66 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
öãæóve
),

67 
NULL
 },

69 { 
ngx_°rög
("wait_key"),

70 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_Êag_¶Ÿ
,

72 
NGX_RTMP_APP_CONF_OFFSET
,

73 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
waô_key
),

74 
NULL
 },

76 { 
ngx_°rög
("wait_video"),

77 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

78 
ngx_c⁄f_£t_Êag_¶Ÿ
,

79 
NGX_RTMP_APP_CONF_OFFSET
,

80 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
waô_video
),

81 
NULL
 },

83 { 
ngx_°rög
("publish_notify"),

84 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

85 
ngx_c⁄f_£t_Êag_¶Ÿ
,

86 
NGX_RTMP_APP_CONF_OFFSET
,

87 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
publish_nŸify
),

88 
NULL
 },

90 { 
ngx_°rög
("play_restart"),

91 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

92 
ngx_c⁄f_£t_Êag_¶Ÿ
,

93 
NGX_RTMP_APP_CONF_OFFSET
,

94 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
∂ay_ª°¨t
),

95 
NULL
 },

97 { 
ngx_°rög
("idle_streams"),

98 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

99 
ngx_c⁄f_£t_Êag_¶Ÿ
,

100 
NGX_RTMP_APP_CONF_OFFSET
,

101 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
idÀ_°ªams
),

102 
NULL
 },

104 { 
ngx_°rög
("drop_idle_publisher"),

105 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

106 
ngx_πmp_live_£t_m£c_¶Ÿ
,

107 
NGX_RTMP_APP_CONF_OFFSET
,

108 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
idÀ_timeout
),

109 
NULL
 },

111 { 
ngx_°rög
("cc_avsync"),

112 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

113 
ngx_c⁄f_£t_num_¶Ÿ
,

114 
NGX_RTMP_APP_CONF_OFFSET
,

115 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
cc_avsync
),

116 
NULL
 },

118 { 
ngx_°rög
("cc_delay_warning_value"),

119 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

120 
ngx_c⁄f_£t_num_¶Ÿ
,

121 
NGX_RTMP_APP_CONF_OFFSET
,

122 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
cc_dñay_w¨nög_vÆue
),

123 
NULL
 },

125 { 
ngx_°rög
("cc_delay_interval"),

126 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

127 
ngx_πmp_live_£t_m£c_¶Ÿ
,

128 
NGX_RTMP_APP_CONF_OFFSET
,

129 
off£tof
(
ngx_πmp_live_≠p_c⁄f_t
, 
cc_dñay_öãrvÆ
),

130 
NULL
 },

132 
ngx_nuŒ_comm™d


136 
ngx_πmp_moduÀ_t
 
	gngx_πmp_live_moduÀ_˘x
 = {

137 
NULL
,

138 
ngx_πmp_live_po°c⁄figuøti⁄
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
ngx_πmp_live_¸óã_≠p_c⁄f
,

144 
ngx_πmp_live_mîge_≠p_c⁄f


148 
ngx_moduÀ_t
 
	gngx_πmp_live_moduÀ
 = {

149 
NGX_MODULE_V1
,

150 &
ngx_πmp_live_moduÀ_˘x
,

151 
ngx_πmp_live_comm™ds
,

152 
NGX_RTMP_MODULE
,

153 
NULL
,

154 
NULL
,

155 
NULL
,

156 
NULL
,

157 
NULL
,

158 
NULL
,

159 
NULL
,

160 
NGX_MODULE_V1_PADDING


165 
	$ngx_πmp_live_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

167 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

169 
œcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_live_≠p_c⁄f_t
));

170 i‡(
œcf
 =
NULL
) {

171  
NULL
;

174 
œcf
->
live
 = 
NGX_CONF_UNSET
;

175 
œcf
->
nbuckës
 = 
NGX_CONF_UNSET
;

176 
œcf
->
buÊí
 = 
NGX_CONF_UNSET_MSEC
;

177 
œcf
->
sync
 = 
NGX_CONF_UNSET_MSEC
;

178 
œcf
->
idÀ_timeout
 = 
NGX_CONF_UNSET_MSEC
;

179 
œcf
->
cc_dñay_öãrvÆ
 = 
NGX_CONF_UNSET_MSEC
;

180 
œcf
->
cc_avsync
 = 
NGX_CONF_UNSET
;

181 
œcf
->
cc_dñay_w¨nög_vÆue
 = 
NGX_CONF_UNSET
;

182 
œcf
->
öãæóve
 = 
NGX_CONF_UNSET
;

183 
œcf
->
waô_key
 = 
NGX_CONF_UNSET
;

184 
œcf
->
waô_video
 = 
NGX_CONF_UNSET
;

185 
œcf
->
publish_nŸify
 = 
NGX_CONF_UNSET
;

186 
œcf
->
∂ay_ª°¨t
 = 
NGX_CONF_UNSET
;

187 
œcf
->
idÀ_°ªams
 = 
NGX_CONF_UNSET
;

189  
œcf
;

190 
	}
}

194 
	$ngx_πmp_live_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

196 
ngx_πmp_live_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

197 
ngx_πmp_live_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

199 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
live
, 
¥ev
->live, 0);

200 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
nbuckës
, 
¥ev
->nbuckets, 1024);

201 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
buÊí
, 
¥ev
->buflen, 0);

202 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
sync
, 
¥ev
->sync, 300);

203 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
idÀ_timeout
, 
¥ev
->idle_timeout, 0);

204 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
cc_avsync
, 
¥ev
->cc_avsync, 10000);

205 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
cc_dñay_w¨nög_vÆue
, 
¥ev
->cc_delay_warning_value, 10000);

206 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
cc_dñay_öãrvÆ
, 
¥ev
->cc_delay_interval, 10000);

207 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öãæóve
, 
¥ev
->interleave, 0);

208 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
waô_key
, 
¥ev
->wait_key, 1);

209 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
waô_video
, 
¥ev
->wait_video, 0);

210 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
publish_nŸify
, 
¥ev
->publish_notify, 0);

211 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∂ay_ª°¨t
, 
¥ev
->play_restart, 0);

212 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
idÀ_°ªams
, 
¥ev
->idle_streams, 1);

214 
c⁄f
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(4096, &
cf
->
cy˛e
->
√w_log
);

215 i‡(
c⁄f
->
poﬁ
 =
NULL
) {

216  
NGX_CONF_ERROR
;

219 
c⁄f
->
°ªams
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

220 (
ngx_πmp_live_°ªam_t
 *Ë* 
c⁄f
->
nbuckës
);

222  
NGX_CONF_OK
;

223 
	}
}

227 
	$ngx_πmp_live_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

229 *
p
 = 
c⁄f
;

230 
ngx_°r_t
 *
vÆue
;

231 
ngx_m£c_t
 *
m•
;

233 
m•
 = (
ngx_m£c_t
 *Ë(
p
 + 
cmd
->
off£t
);

235 
vÆue
 = 
cf
->
¨gs
->
ñts
;

237 i‡(
vÆue
[1].
Àn
 == ("off") - 1 &&

238 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *Ë"off", vÆue[1].
Àn
) == 0)

240 *
m•
 = 0;

241  
NGX_CONF_OK
;

244  
	`ngx_c⁄f_£t_m£c_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

245 
	}
}

248 
ngx_πmp_live_°ªam_t
 **

249 
	$ngx_πmp_live_gë_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
«me
, 
¸óã
)

251 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

252 
ngx_πmp_live_°ªam_t
 **
°ªam
;

253 
size_t
 
Àn
;

255 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

256 i‡(
œcf
 =
NULL
) {

257  
NULL
;

260 
Àn
 = 
	`ngx_°æí
(
«me
);

261 
°ªam
 = &
œcf
->
°ªams
[
	`ngx_hash_key
(
«me
, 
Àn
Ë%Üacf->
nbuckës
];

263 ; *
°ªam
; såóm = &(*°ªam)->
√xt
) {

264 i‡(
	`ngx_°rcmp
(
«me
, (*
°ªam
)->name) == 0) {

265  
°ªam
;

269 i‡(!
¸óã
) {

270  
NULL
;

273 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

274 "live: cª©ê°ªam '%s'", 
«me
);

276 i‡(
œcf
->
‰ì_°ªams
) {

277 *
°ªam
 = 
œcf
->
‰ì_°ªams
;

278 
œcf
->
‰ì_°ªams
 =Üacf->‰ì_°ªams->
√xt
;

280 *
°ªam
 = 
	`ngx_∑Œoc
(
œcf
->
poﬁ
, (
ngx_πmp_live_°ªam_t
));

282 
	`ngx_memzîo
(*
°ªam
, (
ngx_πmp_live_°ªam_t
));

283 
	`ngx_mem˝y
((*
°ªam
)->
«me
,Çame,

284 
	`ngx_mö
(((*
°ªam
)->
«me
Ë- 1, 
Àn
));

285 (*
°ªam
)->
ïoch
 = 
ngx_cuºít_m£c
;

287  
°ªam
;

288 
	}
}

292 
	$ngx_πmp_live_idÀ
(
ngx_evít_t
 *
≥v
)

294 
ngx_c⁄√˘i⁄_t
 *
c
;

295 
ngx_πmp_£ssi⁄_t
 *
s
;

297 
c
 = 
≥v
->
d©a
;

298 
s
 = 
c
->
d©a
;

300 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

303 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

304 
	}
}

308 
	$ngx_πmp_compuã_dñay
(
ngx_evít_t
 *
ev
)

310 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

311 
ngx_πmp_live_˘x_t
 *
˘x
;

312 
ngx_πmp_£ssi⁄_t
 *
s
;

314 
s
 = 
ev
->
d©a
;

316 i‡(
s
 =
NULL
)

319 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

320 i‡(
˘x
 =
NULL
 || ctx->
°ªam
 == NULL) {

324 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

325 i‡(
œcf
 =
NULL
) {

329 i‡(
˘x
->
a˘ive
 && !˘x->
dñay_evt
.
timî_£t
) {

330 
	`ngx_add_timî
(
ev
, 
œcf
->
cc_dñay_öãrvÆ
);

333 
˘x
->
s_time_cou¡î
 +
œcf
->
cc_dñay_öãrvÆ
;

335 i‡(
˘x
->
a˘ive
) {

336 
ngx_öt_t
 
bw_ö_video
 = 
˘x
->
°ªam
->bw_ö_video.
b™dwidth
*8/1024;

337 
ngx_öt_t
 
bw_ö_audio
 = 
˘x
->
°ªam
->bw_ö_audio.
b™dwidth
*8/1024;

339 i‡((
ngx_öt_t
)
˘x
->
s_time_cou¡î
 - (ngx_öt_t)
s
->
cuºít_time
 >
œcf
->
cc_dñay_w¨nög_vÆue
) {

340 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
˘x
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

342 
bw_ö_video
,

343 
bw_ö_audio
,

344 
˘x
->
s_time_cou¡î
 - 
s
->
cuºít_time
,

345 
˘x
->
°ªam
->
«me
);

347 i‡(
bw_ö_video
 == 0) {

348 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
˘x
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

350 
bw_ö_video
,

351 
bw_ö_audio
,

352 
˘x
->
s_time_cou¡î
 - 
s
->
cuºít_time
,

353 
˘x
->
°ªam
->
«me
);

356 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
˘x
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

358 
˘x
->
°ªam
->
«me
,

359 
bw_ö_video
,

360 
bw_ö_audio
,

361 
˘x
->
s_time_cou¡î
 - 
s
->
cuºít_time
);

363 
	}
}

366 
	$ngx_πmp_live_£t_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
c⁄åﬁ
,

367 
ngx_chaö_t
 **
°©us
, 
size_t
 
n°©us
,

368 
a˘ive
)

370 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

371 
ngx_πmp_live_˘x_t
 *
˘x
, *
p˘x
;

372 
ngx_chaö_t
 **
˛
;

373 
ngx_evít_t
 *
e
;

374 
ngx_evít_t
 *
d_ev
;

375 
size_t
 
n
;

377 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

379 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

381 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

382 "live: sëá˘ive=%ui", 
a˘ive
);

384 i‡(
˘x
->
a˘ive
 ==áctive) {

385 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

386 "live: unch™gedá˘ive=%ui", 
a˘ive
);

390 
˘x
->
a˘ive
 =áctive;

392 i‡(
˘x
->
publishög
) {

396 i‡(
œcf
->
idÀ_timeout
) {

397 
e
 = &
˘x
->
idÀ_evt
;

399 i‡(
a˘ive
 && !
˘x
->
idÀ_evt
.
timî_£t
) {

400 
e
->
d©a
 = 
s
->
c⁄√˘i⁄
;

401 
e
->
log
 = 
s
->
c⁄√˘i⁄
->log;

402 
e
->
h™dÀr
 = 
ngx_πmp_live_idÀ
;

404 
	`ngx_add_timî
(
e
, 
œcf
->
idÀ_timeout
);

406 } i‡(!
a˘ive
 && 
˘x
->
idÀ_evt
.
timî_£t
) {

407 
	`ngx_dñ_timî
(
e
);

412 i‡(
œcf
->
cc_dñay_öãrvÆ
) {

413 
d_ev
 = &
˘x
->
dñay_evt
;

415 i‡(
a˘ive
 && !
˘x
->
dñay_evt
.
timî_£t
) {

416 
d_ev
->
d©a
 = 
s
;

417 
d_ev
->
log
 = 
s
->
c⁄√˘i⁄
->log;

418 
d_ev
->
h™dÀr
 = 
ngx_πmp_compuã_dñay
;

420 
	`ngx_add_timî
(
d_ev
, 
œcf
->
cc_dñay_öãrvÆ
);

421 
˘x
->
s_time_cou¡î
 = 0;

423 } if(!
a˘ive
 && 
˘x
->
dñay_evt
.
timî_£t
) {

424 
	`ngx_dñ_timî
(
d_ev
);

428 
˘x
->
°ªam
->
a˘ive
 =áctive;

430 
p˘x
 = 
˘x
->
°ªam
->˘x;Ö˘x;Ö˘x =Ö˘x->
√xt
) {

431 i‡(
p˘x
->
publishög
 == 0) {

432 
	`ngx_πmp_live_£t_°©us
(
p˘x
->
£ssi⁄
, 
c⁄åﬁ
, 
°©us
,

433 
n°©us
, 
a˘ive
);

442 i‡(
c⁄åﬁ
 && 
	`ngx_πmp_£nd_mesßge
(
s
, c⁄åﬁ, 0Ë!
NGX_OK
) {

443 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

447 i‡(!
˘x
->
sûít
) {

448 
˛
 = 
°©us
;

450 
n
 = 0;Ç < 
n°©us
; ++n, ++
˛
) {

451 i‡(*
˛
 && 
	`ngx_πmp_£nd_mesßge
(
s
, *˛, 0Ë!
NGX_OK
) {

452 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

458 
˘x
->
cs
[0].
a˘ive
 = 0;

459 
˘x
->
cs
[0].
dr›≥d
 = 0;

461 
˘x
->
cs
[1].
a˘ive
 = 0;

462 
˘x
->
cs
[1].
dr›≥d
 = 0;

463 
	}
}

467 
	$ngx_πmp_live_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
)

469 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

470 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

471 
ngx_chaö_t
 *
c⁄åﬁ
;

472 
ngx_chaö_t
 *
°©us
[3];

473 
size_t
 
n
, 
n°©us
;

475 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

477 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

479 
c⁄åﬁ
 = 
	`ngx_πmp_¸óã_°ªam_begö
(
s
, 
NGX_RTMP_MSID
);

481 
n°©us
 = 0;

483 i‡(
œcf
->
∂ay_ª°¨t
) {

484 
°©us
[
n°©us
++] = 
	`ngx_πmp_¸óã_°©us
(
s
, "NetStream.Play.Start",

486 
°©us
[
n°©us
++] = 
	`ngx_πmp_¸óã_ßm∂e_ac˚ss
(
s
);

489 i‡(
œcf
->
publish_nŸify
) {

490 
°©us
[
n°©us
++] = 
	`ngx_πmp_¸óã_°©us
(
s
,

495 
	`ngx_πmp_live_£t_°©us
(
s
, 
c⁄åﬁ
, 
°©us
, 
n°©us
, 1);

497 i‡(
c⁄åﬁ
) {

498 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
c⁄åﬁ
);

501 
n
 = 0;Ç < 
n°©us
; ++n) {

502 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
°©us
[
n
]);

504 
	}
}

508 
	$ngx_πmp_live_°›
(
ngx_πmp_£ssi⁄_t
 *
s
)

510 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

511 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

512 
ngx_chaö_t
 *
c⁄åﬁ
;

513 
ngx_chaö_t
 *
°©us
[3];

514 
size_t
 
n
, 
n°©us
;

516 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

518 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

520 
c⁄åﬁ
 = 
	`ngx_πmp_¸óã_°ªam_eof
(
s
, 
NGX_RTMP_MSID
);

522 
n°©us
 = 0;

524 i‡(
œcf
->
∂ay_ª°¨t
) {

525 
°©us
[
n°©us
++] = 
	`ngx_πmp_¸óã_°©us
(
s
, "NetStream.Play.Stop",

529 i‡(
œcf
->
publish_nŸify
) {

530 
°©us
[
n°©us
++] = 
	`ngx_πmp_¸óã_°©us
(
s
,

535 
	`ngx_πmp_live_£t_°©us
(
s
, 
c⁄åﬁ
, 
°©us
, 
n°©us
, 0);

537 i‡(
c⁄åﬁ
) {

538 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
c⁄åﬁ
);

541 
n
 = 0;Ç < 
n°©us
; ++n) {

542 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
°©us
[
n
]);

544 
	}
}

547 
ngx_öt_t


548 
	$ngx_πmp_live_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_begö_t
 *
v
)

550 
ngx_πmp_live_˘x_t
 *
˘x
;

552 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

554 i‡(
˘x
 =
NULL
 || ctx->
°ªam
 =NULL || !˘x->
publishög
) {

555 
√xt
;

558 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

561 
	`ngx_πmp_live_°¨t
(
s
);

563 
√xt
:

564  
	`√xt_°ªam_begö
(
s
, 
v
);

565 
	}
}

568 
ngx_öt_t


569 
	$ngx_πmp_live_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_eof_t
 *
v
)

571 
ngx_πmp_live_˘x_t
 *
˘x
;

573 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

575 i‡(
˘x
 =
NULL
 || ctx->
°ªam
 =NULL || !˘x->
publishög
) {

576 
√xt
;

579 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

582 
	`ngx_πmp_live_°›
(
s
);

584 
√xt
:

585  
	`√xt_°ªam_eof
(
s
, 
v
);

586 
	}
}

590 
	$ngx_πmp_live_joö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
«me
, 
publishî
)

592 
ngx_πmp_live_˘x_t
 *
˘x
;

593 
ngx_πmp_live_°ªam_t
 **
°ªam
;

594 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

596 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

597 i‡(
œcf
 =
NULL
) {

601 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

602 i‡(
˘x
 && ctx->
°ªam
) {

603 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

608 i‡(
˘x
 =
NULL
) {

609 
˘x
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_live_˘x_t
));

610 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_live_moduÀ
);

613 
	`ngx_memzîo
(
˘x
, (*ctx));

615 
˘x
->
£ssi⁄
 = 
s
;

617 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

618 "live: joö '%s'", 
«me
);

620 
°ªam
 = 
	`ngx_πmp_live_gë_°ªam
(
s
, 
«me
, 
publishî
 || 
œcf
->
idÀ_°ªams
);

622 i‡(
°ªam
 =
NULL
 ||

623 !(
publishî
 || (*
°ªam
)->
publishög
 || 
œcf
->
idÀ_°ªams
))

625 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

628 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Play.StreamNotFound", "error",

631 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

636 i‡(
publishî
) {

637 i‡((*
°ªam
)->
publishög
) {

638 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

641 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Publish.BadName", "error",

647 (*
°ªam
)->
publishög
 = 1;

650 
˘x
->
°ªam
 = *stream;

651 
˘x
->
publishög
 = 
publishî
;

652 
˘x
->
√xt
 = (*
°ªam
)->ctx;

654 (*
°ªam
)->
˘x
 = ctx;

656 i‡(
œcf
->
buÊí
) {

657 
s
->
out_buf„r
 = 1;

660 
˘x
->
cs
[0].
csid
 = 
NGX_RTMP_CSID_VIDEO
;

661 
˘x
->
cs
[1].
csid
 = 
NGX_RTMP_CSID_AUDIO
;

663 i‡(!
˘x
->
publishög
 && ctx->
°ªam
->
a˘ive
) {

664 
	`ngx_πmp_live_°¨t
(
s
);

666 
	}
}

669 
ngx_öt_t


670 
	$ngx_πmp_live_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_˛o£_°ªam_t
 *
v
)

672 
ngx_πmp_£ssi⁄_t
 *
ss
;

673 
ngx_πmp_live_˘x_t
 *
˘x
, **
c˘x
, *
p˘x
;

674 
ngx_πmp_live_°ªam_t
 **
°ªam
;

675 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

677 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

678 i‡(
œcf
 =
NULL
) {

679 
√xt
;

682 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

683 i‡(
˘x
 =
NULL
) {

684 
√xt
;

687 i‡(
˘x
->
°ªam
 =
NULL
) {

688 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

690 
√xt
;

693 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

694 "live:Üóvê'%s'", 
˘x
->
°ªam
->
«me
);

695 i‡(
˘x
->
°ªam
->
publishög
 == 1 && ctx->publishing == 1) {

696 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

697 "[CCBokêSåóm Info]: Såóm st›Öublishög,Çame='%s'", 
˘x
->
°ªam
->
«me
);

700 i‡(
˘x
->
°ªam
->
publishög
 && ctx->publishing) {

701 
˘x
->
°ªam
->
publishög
 = 0;

704 
c˘x
 = &
˘x
->
°ªam
->˘x; *c˘x; c˘x = &(*c˘x)->
√xt
) {

705 i‡(*
c˘x
 =
˘x
) {

706 *
c˘x
 = 
˘x
->
√xt
;

711 i‡(
˘x
->
publishög
 || ctx->
°ªam
->
a˘ive
) {

712 
	`ngx_πmp_live_°›
(
s
);

715 i‡(
˘x
->
publishög
) {

716 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Unpublish.Success",

718 i‡(!
œcf
->
idÀ_°ªams
) {

719 
p˘x
 = 
˘x
->
°ªam
->˘x;Ö˘x;Ö˘x =Ö˘x->
√xt
) {

720 i‡(
p˘x
->
publishög
 == 0) {

721 
ss
 = 
p˘x
->
£ssi⁄
;

722 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

724 
	`ngx_πmp_föÆize_£ssi⁄
(
ss
);

730 i‡(
˘x
->
°ªam
->ctx) {

731 
˘x
->
°ªam
 = 
NULL
;

732 
√xt
;

735 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

737 
˘x
->
°ªam
->
«me
);

739 
°ªam
 = 
	`ngx_πmp_live_gë_°ªam
(
s
, 
˘x
->°ªam->
«me
, 0);

740 i‡(
°ªam
 =
NULL
) {

741 
√xt
;

743 *
°ªam
 = (*°ªam)->
√xt
;

745 
˘x
->
°ªam
->
√xt
 = 
œcf
->
‰ì_°ªams
;

746 
œcf
->
‰ì_°ªams
 = 
˘x
->
°ªam
;

747 
˘x
->
°ªam
 = 
NULL
;

749 i‡(!
˘x
->
sûít
 && !˘x->
publishög
 && !
œcf
->
∂ay_ª°¨t
) {

750 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Play.Stop", "status", "StopÜive");

753 
√xt
:

754  
	`√xt_˛o£_°ªam
(
s
, 
v
);

755 
	}
}

758 
ngx_öt_t


759 
	$ngx_πmp_live_∑u£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∑u£_t
 *
v
)

761 
ngx_πmp_live_˘x_t
 *
˘x
;

763 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

765 i‡(
˘x
 =
NULL
 || ctx->
°ªam
 == NULL) {

766 
√xt
;

769 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

771 (
ngx_öt_t
Ë
v
->
∑u£
, v->
posôi⁄
);

773 i‡(
v
->
∑u£
) {

774 i‡(
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Pause.Notify", "status",

776 !
NGX_OK
)

778  
NGX_ERROR
;

781 
˘x
->
∑u£d
 = 1;

783 
	`ngx_πmp_live_°›
(
s
);

786 i‡(
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Unpause.Notify", "status",

788 !
NGX_OK
)

790  
NGX_ERROR
;

793 
˘x
->
∑u£d
 = 0;

795 
	`ngx_πmp_live_°¨t
(
s
);

798 
√xt
:

799  
	`√xt_∑u£
(
s
, 
v
);

800 
	}
}

803 
ngx_öt_t


804 
	$ngx_πmp_live_av
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

805 
ngx_chaö_t
 *
ö
)

807 
ngx_πmp_live_˘x_t
 *
˘x
, *
p˘x
;

808 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

809 
ngx_chaö_t
 *
hódî
, *
cohódî
, *
mëa
,

810 *
≠kt
, *
Øpkt
, *
ac›kt
, *
Ωkt
;

811 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

812 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

813 
ngx_πmp_£ssi⁄_t
 *
ss
;

814 
ngx_πmp_hódî_t
 
ch
, 
lh
, 
˛h
;

815 
ngx_öt_t
 
rc
, 
m™d©‹y
, 
dummy_audio
;

816 
ngx_uöt_t
 
¥io
;

817 
ngx_uöt_t
 
≥îs
;

818 
ngx_uöt_t
 
mëa_vîsi⁄
;

819 
ngx_uöt_t
 
csidx
;

820 
ngx_öt_t
 
av_sync
;

821 
uöt32_t
 
dñè
;

822 
ngx_πmp_live_chunk_°ªam_t
 *
cs
;

823 #ifde‡
NGX_DEBUG


824 c⁄° *
ty≥_s
;

826 
ty≥_s
 = (
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
 ? "video" : "audio");

829 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

830 i‡(
œcf
 =
NULL
) {

831  
NGX_ERROR
;

834 i‡(!
œcf
->
live
 || 
ö
 =
NULL
 || in->
buf
 == NULL) {

835  
NGX_OK
;

838 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

839 i‡(
˘x
 =
NULL
 || ctx->
°ªam
 == NULL) {

840  
NGX_OK
;

843 i‡(
˘x
->
publishög
 == 0) {

844 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

845 "live: %†‰omÇ⁄-publishî", 
ty≥_s
);

846  
NGX_OK
;

849 i‡(!
˘x
->
°ªam
->
a˘ive
) {

850 
	`ngx_πmp_live_°¨t
(
s
);

853 i‡(
˘x
->
idÀ_evt
.
timî_£t
) {

854 
	`ngx_add_timî
(&
˘x
->
idÀ_evt
, 
œcf
->
idÀ_timeout
);

857 
s
->
cuºít_time
 = 
h
->
time°amp
;

859 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

861 
ty≥_s
, 
h
->
time°amp
);

864 
≥îs
 = 0;

865 
≠kt
 = 
NULL
;

866 
Øpkt
 = 
NULL
;

867 
ac›kt
 = 
NULL
;

868 
hódî
 = 
NULL
;

869 
cohódî
 = 
NULL
;

870 
mëa
 = 
NULL
;

871 
mëa_vîsi⁄
 = 0;

872 
m™d©‹y
 = 0;

874 
¥io
 = (
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
 ?

875 
	`ngx_πmp_gë_video_‰ame_ty≥
(
ö
) : 0);

877 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

882 
csidx
 = !(
œcf
->
öãæóve
 || 
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
);

884 
cs
 = &
˘x
->cs[
csidx
];

886 
av_sync
 = (
ngx_öt_t
)
˘x
->
cs
[1].
time°amp
 - (ngx_int_t)ctx->cs[0].timestamp;

888 i‡(
av_sync
 >
œcf
->
cc_avsync
 ||áv_sync <= -(lacf->cc_avsync)) {

889 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

891 (
ngx_öt_t
)
˘x
->
cs
[1].
time°amp
, (ngx_öt_t)˘x->cs[0].time°amp, 
av_sync
, ctx->
°ªam
->
«me
);

894 
	`ngx_memzîo
(&
ch
, (ch));

896 
ch
.
time°amp
 = 
h
->timestamp;

897 
ch
.
msid
 = 
NGX_RTMP_MSID
;

898 
ch
.
csid
 = 
cs
->csid;

899 
ch
.
ty≥
 = 
h
->type;

901 
lh
 = 
ch
;

903 i‡(
cs
->
a˘ive
) {

904 
lh
.
time°amp
 = 
cs
->timestamp;

907 
˛h
 = 
lh
;

908 
˛h
.
ty≥
 = (
h
->ty≥ =
NGX_RTMP_MSG_AUDIO
 ? 
NGX_RTMP_MSG_VIDEO
 :

909 
NGX_RTMP_MSG_AUDIO
);

911 
cs
->
a˘ive
 = 1;

912 
cs
->
time°amp
 = 
ch
.timestamp;

914 
dñè
 = 
ch
.
time°amp
 - 
lh
.timestamp;

926 
Ωkt
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, 
ö
);

928 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
ch
, &
lh
, 
Ωkt
);

930 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

932 i‡(
codec_˘x
) {

934 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_AUDIO
) {

935 
hódî
 = 
codec_˘x
->
Øc_hódî
;

937 i‡(
œcf
->
öãæóve
) {

938 
cohódî
 = 
codec_˘x
->
avc_hódî
;

941 i‡(
codec_˘x
->
audio_codec_id
 =
NGX_RTMP_AUDIO_AAC
 &&

942 
	`ngx_πmp_is_codec_hódî
(
ö
))

944 
¥io
 = 0;

945 
m™d©‹y
 = 1;

949 
hódî
 = 
codec_˘x
->
avc_hódî
;

951 i‡(
œcf
->
öãæóve
) {

952 
cohódî
 = 
codec_˘x
->
Øc_hódî
;

955 i‡(
codec_˘x
->
video_codec_id
 =
NGX_RTMP_VIDEO_H264
 &&

956 
	`ngx_πmp_is_codec_hódî
(
ö
))

958 
¥io
 = 0;

959 
m™d©‹y
 = 1;

963 i‡(
codec_˘x
->
mëa
) {

964 
mëa
 = 
codec_˘x
->meta;

965 
mëa_vîsi⁄
 = 
codec_˘x
->meta_version;

971 
p˘x
 = 
˘x
->
°ªam
->˘x;Ö˘x;Ö˘x =Ö˘x->
√xt
) {

972 i‡(
p˘x
 =
˘x
 ||Ö˘x->
∑u£d
) {

976 
ss
 = 
p˘x
->
£ssi⁄
;

977 
cs
 = &
p˘x
->cs[
csidx
];

981 i‡(
mëa
 && 
mëa_vîsi⁄
 !
p˘x
->meta_version) {

982 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

985 i‡(
	`ngx_πmp_£nd_mesßge
(
ss
, 
mëa
, 0Ë=
NGX_OK
) {

986 
p˘x
->
mëa_vîsi⁄
 = meta_version;

992 i‡(
cs
->
a˘ive
 && (
œcf
->
sync
 && cs->
dr›≥d
 >Üacf->sync)) {

993 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

994 "live: syn¯%†dr›≥d=%uD", 
ty≥_s
, 
cs
->
dr›≥d
);

996 
cs
->
a˘ive
 = 0;

997 
cs
->
dr›≥d
 = 0;

1002 i‡(!
cs
->
a˘ive
) {

1004 i‡(
m™d©‹y
) {

1005 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

1010 i‡(
œcf
->
waô_video
 && 
h
->
ty≥
 =
NGX_RTMP_MSG_AUDIO
 &&

1011 !
p˘x
->
cs
[0].
a˘ive
)

1013 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

1018 i‡(
œcf
->
waô_key
 && 
¥io
 !
NGX_RTMP_VIDEO_KEY_FRAME
 &&

1019 (
œcf
->
öãæóve
 || 
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
))

1021 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

1026 
dummy_audio
 = 0;

1027 i‡(
œcf
->
waô_video
 && 
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
 &&

1028 !
p˘x
->
cs
[1].
a˘ive
)

1030 
dummy_audio
 = 1;

1031 i‡(
Øpkt
 =
NULL
) {

1032 
Øpkt
 = 
	`ngx_πmp_Æloc_sh¨ed_buf
(
cscf
);

1033 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
˛h
, 
NULL
, 
Øpkt
);

1037 i‡(
hódî
 || 
cohódî
) {

1041 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

1043 
ty≥_s
, 
lh
.
time°amp
);

1045 i‡(
hódî
) {

1046 i‡(
≠kt
 =
NULL
) {

1047 
≠kt
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, 
hódî
);

1048 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
lh
, 
NULL
, 
≠kt
);

1051 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
ss
, 
≠kt
, 0);

1052 i‡(
rc
 !
NGX_OK
) {

1057 i‡(
cohódî
) {

1058 i‡(
ac›kt
 =
NULL
) {

1059 
ac›kt
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, 
cohódî
);

1060 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
˛h
, 
NULL
, 
ac›kt
);

1063 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
ss
, 
ac›kt
, 0);

1064 i‡(
rc
 !
NGX_OK
) {

1068 } i‡(
dummy_audio
) {

1069 
	`ngx_πmp_£nd_mesßge
(
ss
, 
Øpkt
, 0);

1072 
cs
->
time°amp
 = 
lh
.timestamp;

1073 
cs
->
a˘ive
 = 1;

1074 
ss
->
cuºít_time
 = 
cs
->
time°amp
;

1080 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

1082 
ty≥_s
, 
ch
.
time°amp
);

1084 i‡(
≠kt
 =
NULL
) {

1085 
≠kt
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, 
ö
);

1086 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
ch
, 
NULL
, 
≠kt
);

1089 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
ss
, 
≠kt
, 
¥io
);

1090 i‡(
rc
 !
NGX_OK
) {

1094 
cs
->
time°amp
 = 
ch
.timestamp;

1095 
cs
->
a˘ive
 = 1;

1096 
ss
->
cuºít_time
 = 
cs
->
time°amp
;

1098 ++
≥îs
;

1100 i‡(
dummy_audio
) {

1101 
	`ngx_πmp_£nd_mesßge
(
ss
, 
Øpkt
, 0);

1110 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

1112 
ty≥_s
, 
dñè
);

1114 i‡(
	`ngx_πmp_£nd_mesßge
(
ss
, 
Ωkt
, 
¥io
Ë!
NGX_OK
) {

1115 ++
p˘x
->
ndr›≥d
;

1117 
cs
->
dr›≥d
 +
dñè
;

1119 i‡(
m™d©‹y
) {

1120 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
ss
->
c⁄√˘i⁄
->
log
, 0,

1122 
	`ngx_πmp_föÆize_£ssi⁄
(
ss
);

1128 
cs
->
time°amp
 +
dñè
;

1129 ++
≥îs
;

1130 
ss
->
cuºít_time
 = 
cs
->
time°amp
;

1133 i‡(
Ωkt
) {

1134 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
Ωkt
);

1137 i‡(
≠kt
) {

1138 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
≠kt
);

1141 i‡(
Øpkt
) {

1142 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
Øpkt
);

1145 i‡(
ac›kt
) {

1146 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
ac›kt
);

1149 
	`ngx_πmp_upd©e_b™dwidth
(&
˘x
->
°ªam
->
bw_ö
, 
h
->
mÀn
);

1150 
	`ngx_πmp_upd©e_b™dwidth
(&
˘x
->
°ªam
->
bw_out
, 
h
->
mÀn
 * 
≥îs
);

1152 
	`ngx_πmp_upd©e_b™dwidth
(
h
->
ty≥
 =
NGX_RTMP_MSG_AUDIO
 ?

1153 &
˘x
->
°ªam
->
bw_ö_audio
 :

1154 &
˘x
->
°ªam
->
bw_ö_video
,

1155 
h
->
mÀn
);

1157  
NGX_OK
;

1158 
	}
}

1161 
ngx_öt_t


1162 
	$ngx_πmp_live_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

1164 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

1165 
ngx_πmp_live_˘x_t
 *
˘x
;

1167 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

1169 i‡(
œcf
 =
NULL
 || !œcf->
live
) {

1170 
√xt
;

1173 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1175 
v
->
«me
, v->
ty≥
);

1178 if(
	`ngx_°rcmp
(
v
->
«me
, "") == 0)

1180 
	`ngx_log_debug
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0, "streamÇame isÉmpty, weÑefuse it!");

1181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1183 
v
->
«me
, v->
¨gs
);

1184 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Publish.BadName", "error", "Empty StreamName");

1185  
NGX_ERROR
;

1190 
	`ngx_πmp_live_joö
(
s
, 
v
->
«me
, 1);

1192 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

1193 i‡(
˘x
 =
NULL
 || !˘x->
publishög
) {

1194 
√xt
;

1197 
˘x
->
sûít
 = 
v
->silent;

1199 i‡(!
˘x
->
sûít
) {

1200 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Publish.Start",

1202 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1203 "[CCBokêSåóm Info]: Såóm sèπÖublishög,Çame='%s',árgs='%s'", 
v
->
«me
, v->
¨gs
);

1206 
√xt
:

1207  
	`√xt_publish
(
s
, 
v
);

1208 
	}
}

1211 
ngx_öt_t


1212 
	$ngx_πmp_live_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

1214 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
;

1215 
ngx_πmp_live_˘x_t
 *
˘x
;

1217 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_live_moduÀ
);

1219 i‡(
œcf
 =
NULL
 || !œcf->
live
) {

1220 
√xt
;

1223 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1225 
v
->
«me
, (
uöt32_t
Ëv->
°¨t
,

1226 (
uöt32_t
Ë
v
->
duøti⁄
, (uöt32_tËv->
ª£t
);

1230 
	`ngx_πmp_live_joö
(
s
, 
v
->
«me
, 0);

1232 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_live_moduÀ
);

1233 i‡(
˘x
 =
NULL
) {

1234 
√xt
;

1237 
˘x
->
sûít
 = 
v
->silent;

1239 i‡(!
˘x
->
sûít
 && !
œcf
->
∂ay_ª°¨t
) {

1240 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Play.Start",

1242 
	`ngx_πmp_£nd_ßm∂e_ac˚ss
(
s
);

1245 
√xt
:

1246  
	`√xt_∂ay
(
s
, 
v
);

1247 
	}
}

1250 
ngx_öt_t


1251 
	$ngx_πmp_live_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1253 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

1254 
ngx_πmp_h™dÀr_±
 *
h
;

1256 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

1260 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_AUDIO
]);

1261 *
h
 = 
ngx_πmp_live_av
;

1263 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_VIDEO
]);

1264 *
h
 = 
ngx_πmp_live_av
;

1268 
√xt_publish
 = 
ngx_πmp_publish
;

1269 
ngx_πmp_publish
 = 
ngx_πmp_live_publish
;

1271 
√xt_∂ay
 = 
ngx_πmp_∂ay
;

1272 
ngx_πmp_∂ay
 = 
ngx_πmp_live_∂ay
;

1274 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

1275 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_live_˛o£_°ªam
;

1277 
√xt_∑u£
 = 
ngx_πmp_∑u£
;

1278 
ngx_πmp_∑u£
 = 
ngx_πmp_live_∑u£
;

1280 
√xt_°ªam_begö
 = 
ngx_πmp_°ªam_begö
;

1281 
ngx_πmp_°ªam_begö
 = 
ngx_πmp_live_°ªam_begö
;

1283 
√xt_°ªam_eof
 = 
ngx_πmp_°ªam_eof
;

1284 
ngx_πmp_°ªam_eof
 = 
ngx_πmp_live_°ªam_eof
;

1286  
NGX_OK
;

1287 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_live_module.h

7 #i‚de‡
_NGX_RTMP_LIVE_H_INCLUDED_


8 
	#_NGX_RTMP_LIVE_H_INCLUDED_


	)

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~"ngx_πmp.h
"

13 
	~"ngx_πmp_cmd_moduÀ.h
"

14 
	~"ngx_πmp_b™dwidth.h
"

15 
	~"ngx_πmp_°ªams.h
"

18 
ngx_πmp_live_˘x_s
 
	tngx_πmp_live_˘x_t
;

19 
ngx_πmp_live_°ªam_s
 
	tngx_πmp_live_°ªam_t
;

23 
	ma˘ive
:1;

24 
uöt32_t
 
	mtime°amp
;

25 
uöt32_t
 
	mcsid
;

26 
uöt32_t
 
	mdr›≥d
;

27 } 
	tngx_πmp_live_chunk_°ªam_t
;

30 
	sngx_πmp_live_˘x_s
 {

31 
ngx_πmp_£ssi⁄_t
 *
	m£ssi⁄
;

32 
ngx_πmp_live_°ªam_t
 *
	m°ªam
;

33 
ngx_πmp_live_˘x_t
 *
	m√xt
;

34 
ngx_uöt_t
 
	mndr›≥d
;

35 
ngx_πmp_live_chunk_°ªam_t
 
	mcs
[2];

36 
ngx_uöt_t
 
	mmëa_vîsi⁄
;

37 
ngx_evít_t
 
	midÀ_evt
;

38 
ngx_evít_t
 
	mdñay_evt
;

39 
	ma˘ive
:1;

40 
	mpublishög
:1;

41 
	mpublish_mŸhod
:1;

42 
	msûít
:1;

43 
	m∑u£d
:1;

44 
uöt32_t
 
	ms_time_cou¡î
;

48 
	sngx_πmp_live_°ªam_s
 {

49 
u_ch¨
 
	m«me
[
NGX_RTMP_MAX_NAME
];

50 
ngx_πmp_live_°ªam_t
 *
	m√xt
;

51 
ngx_πmp_live_˘x_t
 *
	m˘x
;

52 
ngx_πmp_b™dwidth_t
 
	mbw_ö
;

53 
ngx_πmp_b™dwidth_t
 
	mbw_ö_audio
;

54 
ngx_πmp_b™dwidth_t
 
	mbw_ö_video
;

55 
ngx_πmp_b™dwidth_t
 
	mbw_out
;

56 
ngx_m£c_t
 
	mïoch
;

57 
	ma˘ive
:1;

58 
	mpublishög
:1;

63 
ngx_öt_t
 
	mnbuckës
;

64 
ngx_πmp_live_°ªam_t
 **
	m°ªams
;

65 
ngx_Êag_t
 
	mlive
;

66 
ngx_Êag_t
 
	mmëa
;

67 
ngx_m£c_t
 
	msync
;

68 
ngx_m£c_t
 
	midÀ_timeout
;

69 
ngx_Êag_t
 
	m©c
;

70 
ngx_Êag_t
 
	möãæóve
;

71 
ngx_Êag_t
 
	mwaô_key
;

72 
ngx_Êag_t
 
	mwaô_video
;

73 
ngx_Êag_t
 
	mpublish_nŸify
;

74 
ngx_Êag_t
 
	m∂ay_ª°¨t
;

75 
ngx_Êag_t
 
	midÀ_°ªams
;

76 
ngx_m£c_t
 
	mbuÊí
;

77 
ngx_öt_t
 
	mcc_avsync
;

78 
ngx_öt_t
 
	mcc_dñay_w¨nög_vÆue
;

79 
ngx_m£c_t
 
	mcc_dñay_öãrvÆ
;

80 
ngx_poﬁ_t
 *
	mpoﬁ
;

81 
ngx_πmp_live_°ªam_t
 *
	m‰ì_°ªams
;

82 } 
	tngx_πmp_live_≠p_c⁄f_t
;

85 
ngx_moduÀ_t
 
ngx_πmp_live_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_log_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_cmd_moduÀ.h
"

12 
ngx_πmp_publish_±
 
	g√xt_publish
;

13 
ngx_πmp_∂ay_±
 
	g√xt_∂ay
;

16 
ngx_öt_t
 
ngx_πmp_log_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

17 *
ngx_πmp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 * 
ngx_πmp_log_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

19 * 
ngx_πmp_log_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

20 *
∑ª¡
, *
chûd
);

21 * 
ngx_πmp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

22 *
c⁄f
);

23 * 
ngx_πmp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

24 *
c⁄f
);

25 * 
ngx_πmp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
›s
,

26 
ngx_¨øy_t
 *
¨gs
, 
ngx_uöt_t
 
s
);

29 
ngx_πmp_log_›_s
 
	tngx_πmp_log_›_t
;

32 
	$size_t
 (*
	tngx_πmp_log_›_gëÀn_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

33 
	tngx_πmp_log_›_t
 *
	t›
);

34 
u_ch¨
 * (*
	tngx_πmp_log_›_gëd©a_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

35 
	tu_ch¨
 *
	tbuf
, 
	tngx_πmp_log_›_t
 *
	tlog
);

38 
	sngx_πmp_log_›_s
 {

39 
ngx_πmp_log_›_gëÀn_±
 
gëÀn
;

40 
ngx_πmp_log_›_gëd©a_±
 
gëd©a
;

41 
ngx_°r_t
 
vÆue
;

42 
ngx_uöt_t
 
off£t
;

47 
ngx_°r_t
 
«me
;

48 
ngx_πmp_log_›_gëÀn_±
 
gëÀn
;

49 
ngx_πmp_log_›_gëd©a_±
 
gëd©a
;

50 
ngx_uöt_t
 
off£t
;

51 } 
	tngx_πmp_log_v¨_t
;

55 
ngx_°r_t
 
«me
;

56 
ngx_¨øy_t
 *
›s
;

57 } 
	tngx_πmp_log_fmt_t
;

61 
ngx_›í_fûe_t
 *
fûe
;

62 
time_t
 
disk_fuŒ_time
;

63 
time_t
 
îr‹_log_time
;

64 
ngx_πmp_log_fmt_t
 *
f‹m©
;

65 } 
	tngx_πmp_log_t
;

69 
ngx_¨øy_t
 *
logs
;

70 
ngx_uöt_t
 
off
;

71 } 
	tngx_πmp_log_≠p_c⁄f_t
;

75 
ngx_¨øy_t
 
f‹m©s
;

76 
ngx_uöt_t
 
comböed_u£d
;

77 } 
	tngx_πmp_log_maö_c⁄f_t
;

81 
∂ay
:1;

82 
publish
:1;

83 
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
];

84 
u_ch¨
 
¨gs
[
NGX_RTMP_MAX_ARGS
];

85 } 
	tngx_πmp_log_˘x_t
;

88 
ngx_°r_t
 
ngx_πmp_ac˚ss_log
 = 
	`ngx_°rög
(
NGX_HTTP_LOG_PATH
);

91 
ngx_comm™d_t
 
ngx_πmp_log_comm™ds
[] = {

93 { 
	`ngx_°rög
("access_log"),

94 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE12
,

95 
ngx_πmp_log_£t_log
,

96 
NGX_RTMP_APP_CONF_OFFSET
,

98 
NULL
 },

100 { 
	`ngx_°rög
("log_format"),

101 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_2MORE
,

102 
ngx_πmp_log_£t_f‹m©
,

103 
NGX_RTMP_MAIN_CONF_OFFSET
,

105 
NULL
 },

107 
ngx_nuŒ_comm™d


108 
	}
};

111 
ngx_πmp_moduÀ_t
 
	gngx_πmp_log_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_πmp_log_po°c⁄figuøti⁄
,

114 
ngx_πmp_log_¸óã_maö_c⁄f
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
ngx_πmp_log_¸óã_≠p_c⁄f
,

119 
ngx_πmp_log_mîge_≠p_c⁄f


123 
ngx_moduÀ_t
 
	gngx_πmp_log_moduÀ
 = {

124 
NGX_MODULE_V1
,

125 &
ngx_πmp_log_moduÀ_˘x
,

126 
ngx_πmp_log_comm™ds
,

127 
NGX_RTMP_MODULE
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NGX_MODULE_V1_PADDING


139 
ngx_°r_t
 
	gngx_πmp_comböed_fmt
 =

140 
ngx_°rög
("$remote_addr [$time_local] $command "

146 
size_t


147 
	$ngx_πmp_log_v¨_deÁu…_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_log_›_t
 *
›
)

149  
›
->
vÆue
.
Àn
;

150 
	}
}

153 
u_ch¨
 *

154 
	$ngx_πmp_log_v¨_deÁu…_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

155 
ngx_πmp_log_›_t
 *
›
)

157  
	`ngx_˝ymem
(
buf
, 
›
->
vÆue
.
d©a
, op->vÆue.
Àn
);

158 
	}
}

161 
size_t


162 
	$ngx_πmp_log_v¨_c⁄√˘i⁄_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_log_›_t
 *
›
)

164  
NGX_INT_T_LEN
;

165 
	}
}

167 
u_ch¨
 *

168 
	$ngx_πmp_log_v¨_c⁄√˘i⁄_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

169 
ngx_πmp_log_›_t
 *
›
)

171  
	`ngx_•rötf
(
buf
, "%ui", (
ngx_uöt_t
Ë
s
->
c⁄√˘i⁄
->
numbî
);

172 
	}
}

175 
size_t


176 
	$ngx_πmp_log_v¨_ªmŸe_addr_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

177 
ngx_πmp_log_›_t
 *
›
)

179  
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
;

180 
	}
}

183 
u_ch¨
 *

184 
	$ngx_πmp_log_v¨_ªmŸe_addr_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

185 
ngx_πmp_log_›_t
 *
›
)

187  
	`ngx_˝ymem
(
buf
, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

188 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

189 
	}
}

192 
size_t


193 
	$ngx_πmp_log_v¨_m£c_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

194 
ngx_πmp_log_›_t
 *
›
)

196  
NGX_TIME_T_LEN
 + 4;

197 
	}
}

200 
u_ch¨
 *

201 
	$ngx_πmp_log_v¨_m£c_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

202 
ngx_πmp_log_›_t
 *
›
)

204 
ngx_time_t
 *
ç
;

206 
ç
 = 
	`ngx_timeofday
();

208  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
);

209 
	}
}

212 
size_t


213 
	$ngx_πmp_log_v¨_£ssi⁄_°rög_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

214 
ngx_πmp_log_›_t
 *
›
)

216  ((
ngx_°r_t
 *Ë((
u_ch¨
 *Ë
s
 + 
›
->
off£t
))->
Àn
;

217 
	}
}

220 
u_ch¨
 *

221 
	$ngx_πmp_log_v¨_£ssi⁄_°rög_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

222 
ngx_πmp_log_›_t
 *
›
)

224 
ngx_°r_t
 *
°r
;

226 
°r
 = (
ngx_°r_t
 *Ë((
u_ch¨
 *Ë
s
 + 
›
->
off£t
);

228  
	`ngx_˝ymem
(
buf
, 
°r
->
d©a
, så->
Àn
);

229 
	}
}

232 
size_t


233 
	$ngx_πmp_log_v¨_comm™d_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

234 
ngx_πmp_log_›_t
 *
›
)

237 
	}
}

240 
u_ch¨
 *

241 
	$ngx_πmp_log_v¨_comm™d_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

242 
ngx_πmp_log_›_t
 *
›
)

244 
ngx_πmp_log_˘x_t
 *
˘x
;

245 
ngx_°r_t
 *
cmd
;

246 
ngx_uöt_t
 
n
;

248 
ngx_°r_t
 
comm™ds
[] = {

249 
	`ngx_°rög
("NONE"),

250 
	`ngx_°rög
("PLAY"),

251 
	`ngx_°rög
("PUBLISH"),

252 
	`ngx_°rög
("PLAY+PUBLISH")

255 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_log_moduÀ
);

257 
n
 = 
˘x
 ? (˘x->
∂ay
 + ctx->
publish
 * 2) : 0;

259 
cmd
 = &
comm™ds
[
n
];

261  
	`ngx_˝ymem
(
buf
, 
cmd
->
d©a
, cmd->
Àn
);

262 
	}
}

265 
size_t


266 
	$ngx_πmp_log_v¨_c⁄ãxt_c°rög_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

267 
ngx_πmp_log_›_t
 *
›
)

269  
	`ngx_max
(
NGX_RTMP_MAX_NAME
, 
NGX_RTMP_MAX_ARGS
);

270 
	}
}

273 
u_ch¨
 *

274 
	$ngx_πmp_log_v¨_c⁄ãxt_c°rög_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

275 
ngx_πmp_log_›_t
 *
›
)

277 
ngx_πmp_log_˘x_t
 *
˘x
;

278 
u_ch¨
 *
p
;

280 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_log_moduÀ
);

281 i‡(
˘x
 =
NULL
) {

282  
buf
;

285 
p
 = (
u_ch¨
 *Ë
˘x
 + 
›
->
off£t
;

286 *
p
) {

287 *
buf
++ = *
p
++;

290  
buf
;

291 
	}
}

294 
size_t


295 
	$ngx_πmp_log_v¨_£ssi⁄_uöt32_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

296 
ngx_πmp_log_›_t
 *
›
)

298  
NGX_INT32_LEN
;

299 
	}
}

302 
u_ch¨
 *

303 
	$ngx_πmp_log_v¨_£ssi⁄_uöt32_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

304 
ngx_πmp_log_›_t
 *
›
)

306 
uöt32_t
 *
v
;

308 
v
 = (
uöt32_t
 *Ë((
uöt8_t
 *Ë
s
 + 
›
->
off£t
);

310  
	`ngx_•rötf
(
buf
, "%uD", *
v
);

311 
	}
}

314 
size_t


315 
	$ngx_πmp_log_v¨_time_loˇl_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

316 
ngx_πmp_log_›_t
 *
›
)

318  
ngx_ˇched_hâp_log_time
.
Àn
;

319 
	}
}

322 
u_ch¨
 *

323 
	$ngx_πmp_log_v¨_time_loˇl_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

324 
ngx_πmp_log_›_t
 *
›
)

326  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_time
.
d©a
,

327 
ngx_ˇched_hâp_log_time
.
Àn
);

328 
	}
}

331 
size_t


332 
	$ngx_πmp_log_v¨_£ssi⁄_time_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

333 
ngx_πmp_log_›_t
 *
›
)

335  
NGX_INT64_LEN
;

336 
	}
}

339 
u_ch¨
 *

340 
	$ngx_πmp_log_v¨_£ssi⁄_time_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

341 
ngx_πmp_log_›_t
 *
›
)

343  
	`ngx_•rötf
(
buf
, "%L",

344 (
öt64_t
Ë(
ngx_cuºít_m£c
 - 
s
->
ïoch
) / 1000);

345 
	}
}

348 
size_t


349 
	$ngx_πmp_log_v¨_£ssi⁄_ªadabÀ_time_gëÀn
(
ngx_πmp_£ssi⁄_t
 *
s
,

350 
ngx_πmp_log_›_t
 *
›
)

352  
NGX_INT_T_LEN
 + ("d 23h 59m 59s") - 1;

353 
	}
}

356 
u_ch¨
 *

357 
	$ngx_πmp_log_v¨_£ssi⁄_ªadabÀ_time_gëd©a
(
ngx_πmp_£ssi⁄_t
 *
s
,

358 
u_ch¨
 *
buf
, 
ngx_πmp_log_›_t
 *
›
)

360 
öt64_t
 
v
;

361 
ngx_uöt_t
 
days
, 
hours
, 
möuãs
, 
£c⁄ds
;

363 
v
 = (
ngx_cuºít_m£c
 - 
s
->
ïoch
) / 1000;

365 
days
 = (
ngx_uöt_t
Ë(
v
 / (60 * 60 * 24));

366 
hours
 = (
ngx_uöt_t
Ë(
v
 / (60 * 60) % 24);

367 
möuãs
 = (
ngx_uöt_t
Ë(
v
 / 60 % 60);

368 
£c⁄ds
 = (
ngx_uöt_t
Ë(
v
 % 60);

370 i‡(
days
) {

371 
buf
 = 
	`ngx_•rötf
(buf, "%uid ", 
days
);

374 i‡(
days
 || 
hours
) {

375 
buf
 = 
	`ngx_•rötf
(buf, "%uih ", 
hours
);

378 i‡(
days
 || 
hours
 || 
möuãs
) {

379 
buf
 = 
	`ngx_•rötf
(buf, "%uim ", 
möuãs
);

382 
buf
 = 
	`ngx_•rötf
(buf, "%uis", 
£c⁄ds
);

384  
buf
;

385 
	}
}

388 
ngx_πmp_log_v¨_t
 
	gngx_πmp_log_v¨s
[] = {

389 { 
ngx_°rög
("connection"),

390 
ngx_πmp_log_v¨_c⁄√˘i⁄_gëÀn
,

391 
ngx_πmp_log_v¨_c⁄√˘i⁄_gëd©a
,

394 { 
ngx_°rög
("remote_addr"),

395 
ngx_πmp_log_v¨_ªmŸe_addr_gëÀn
,

396 
ngx_πmp_log_v¨_ªmŸe_addr_gëd©a
,

399 { 
ngx_°rög
("app"),

400 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëÀn
,

401 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëd©a
,

402 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
≠p
) },

404 { 
ngx_°rög
("flashver"),

405 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëÀn
,

406 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëd©a
,

407 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
Êashvî
) },

409 { 
ngx_°rög
("swfurl"),

410 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëÀn
,

411 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëd©a
,

412 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
swf_uæ
) },

414 { 
ngx_°rög
("tcurl"),

415 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëÀn
,

416 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëd©a
,

417 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
tc_uæ
) },

419 { 
ngx_°rög
("pageurl"),

420 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëÀn
,

421 
ngx_πmp_log_v¨_£ssi⁄_°rög_gëd©a
,

422 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
∑ge_uæ
) },

424 { 
ngx_°rög
("command"),

425 
ngx_πmp_log_v¨_comm™d_gëÀn
,

426 
ngx_πmp_log_v¨_comm™d_gëd©a
,

429 { 
ngx_°rög
("name"),

430 
ngx_πmp_log_v¨_c⁄ãxt_c°rög_gëÀn
,

431 
ngx_πmp_log_v¨_c⁄ãxt_c°rög_gëd©a
,

432 
off£tof
(
ngx_πmp_log_˘x_t
, 
«me
) },

434 { 
ngx_°rög
("args"),

435 
ngx_πmp_log_v¨_c⁄ãxt_c°rög_gëÀn
,

436 
ngx_πmp_log_v¨_c⁄ãxt_c°rög_gëd©a
,

437 
off£tof
(
ngx_πmp_log_˘x_t
, 
¨gs
) },

439 { 
ngx_°rög
("bytes_sent"),

440 
ngx_πmp_log_v¨_£ssi⁄_uöt32_gëÀn
,

441 
ngx_πmp_log_v¨_£ssi⁄_uöt32_gëd©a
,

442 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
out_byãs
) },

444 { 
ngx_°rög
("bytes_received"),

445 
ngx_πmp_log_v¨_£ssi⁄_uöt32_gëÀn
,

446 
ngx_πmp_log_v¨_£ssi⁄_uöt32_gëd©a
,

447 
off£tof
(
ngx_πmp_£ssi⁄_t
, 
ö_byãs
) },

449 { 
ngx_°rög
("time_local"),

450 
ngx_πmp_log_v¨_time_loˇl_gëÀn
,

451 
ngx_πmp_log_v¨_time_loˇl_gëd©a
,

454 { 
ngx_°rög
("msec"),

455 
ngx_πmp_log_v¨_m£c_gëÀn
,

456 
ngx_πmp_log_v¨_m£c_gëd©a
,

459 { 
ngx_°rög
("session_time"),

460 
ngx_πmp_log_v¨_£ssi⁄_time_gëÀn
,

461 
ngx_πmp_log_v¨_£ssi⁄_time_gëd©a
,

464 { 
ngx_°rög
("session_readable_time"),

465 
ngx_πmp_log_v¨_£ssi⁄_ªadabÀ_time_gëÀn
,

466 
ngx_πmp_log_v¨_£ssi⁄_ªadabÀ_time_gëd©a
,

469 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0 }

474 
	$ngx_πmp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

476 
ngx_πmp_log_maö_c⁄f_t
 *
lmcf
;

477 
ngx_πmp_log_fmt_t
 *
fmt
;

479 
lmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_log_maö_c⁄f_t
));

480 i‡(
lmcf
 =
NULL
) {

481  
NULL
;

484 i‡(
	`ngx_¨øy_öô
(&
lmcf
->
f‹m©s
, 
cf
->
poﬁ
, 4, (
ngx_πmp_log_fmt_t
))

485 !
NGX_OK
)

487  
NULL
;

490 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

491 i‡(
fmt
 =
NULL
) {

492  
NULL
;

495 
	`ngx_°r_£t
(&
fmt
->
«me
, "combined");

497 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_πmp_log_›_t
));

498 i‡(
fmt
->
›s
 =
NULL
) {

499  
NULL
;

502  
lmcf
;

504 
	}
}

508 
	$ngx_πmp_log_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

510 
ngx_πmp_log_≠p_c⁄f_t
 *
œcf
;

512 
œcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_log_≠p_c⁄f_t
));

513 i‡(
œcf
 =
NULL
) {

514  
NULL
;

517  
œcf
;

518 
	}
}

522 
	$ngx_πmp_log_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

524 
ngx_πmp_log_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

525 
ngx_πmp_log_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

526 
ngx_πmp_log_maö_c⁄f_t
 *
lmcf
;

527 
ngx_πmp_log_fmt_t
 *
fmt
;

528 
ngx_πmp_log_t
 *
log
;

530 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

531  
NGX_OK
;

534 
c⁄f
->
logs
 = 
¥ev
->logs;

535 
c⁄f
->
off
 = 
¥ev
->off;

537 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

538  
NGX_OK
;

541 
c⁄f
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_πmp_log_t
));

542 i‡(
c⁄f
->
logs
 =
NULL
) {

543  
NGX_CONF_ERROR
;

546 
log
 = 
	`ngx_¨øy_push
(
c⁄f
->
logs
);

547 i‡(
log
 =
NULL
) {

548  
NGX_CONF_ERROR
;

551 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
ngx_πmp_ac˚ss_log
);

552 i‡(
log
->
fûe
 =
NULL
) {

553  
NGX_CONF_ERROR
;

556 
log
->
disk_fuŒ_time
 = 0;

557 
log
->
îr‹_log_time
 = 0;

559 
lmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_log_moduÀ
);

560 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

562 
log
->
f‹m©
 = &
fmt
[0];

563 
lmcf
->
comböed_u£d
 = 1;

565  
NGX_CONF_OK
;

566 
	}
}

570 
	$ngx_πmp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

572 
ngx_πmp_log_≠p_c⁄f_t
 *
œcf
 = 
c⁄f
;

574 
ngx_πmp_log_maö_c⁄f_t
 *
lmcf
;

575 
ngx_πmp_log_fmt_t
 *
fmt
;

576 
ngx_πmp_log_t
 *
log
;

577 
ngx_°r_t
 *
vÆue
, 
«me
;

578 
ngx_uöt_t
 
n
;

580 
vÆue
 = 
cf
->
¨gs
->
ñts
;

582 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

583 
œcf
->
off
 = 1;

584  
NGX_CONF_OK
;

587 i‡(
œcf
->
logs
 =
NULL
) {

588 
œcf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_πmp_log_t
));

589 i‡(
œcf
->
logs
 =
NULL
) {

590  
NGX_CONF_ERROR
;

594 
log
 = 
	`ngx_¨øy_push
(
œcf
->
logs
);

595 i‡(
log
 =
NULL
) {

596  
NGX_CONF_ERROR
;

599 
	`ngx_memzîo
(
log
, (*log));

601 
lmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_log_moduÀ
);

603 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

604 i‡(
log
->
fûe
 =
NULL
) {

605  
NGX_CONF_ERROR
;

608 i‡(
cf
->
¨gs
->
√…s
 == 2) {

609 
	`ngx_°r_£t
(&
«me
, "combined");

610 
lmcf
->
comböed_u£d
 = 1;

613 
«me
 = 
vÆue
[2];

614 i‡(
	`ngx_°rcmp
(
«me
.
d©a
, "combined") == 0) {

615 
lmcf
->
comböed_u£d
 = 1;

619 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

620 
n
 = 0;Ç < 
lmcf
->
f‹m©s
.
√…s
; ++n, ++
fmt
) {

621 i‡(
fmt
->
«me
.
Àn
 ==Çame.len &&

622 
	`ngx_°∫ˇ£cmp
(
fmt
->
«me
.
d©a
,Çame.d©a,Çame.
Àn
) == 0)

624 
log
->
f‹m©
 = 
fmt
;

629 i‡(
log
->
f‹m©
 =
NULL
) {

630 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0, "unknownÜog format \"%V\"",

631 &
«me
);

632  
NGX_CONF_ERROR
;

635  
NGX_CONF_OK
;

636 
	}
}

640 
	$ngx_πmp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

642 
ngx_πmp_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

643 
ngx_πmp_log_fmt_t
 *
fmt
;

644 
ngx_°r_t
 *
vÆue
;

645 
ngx_uöt_t
 
i
;

647 
vÆue
 = 
cf
->
¨gs
->
ñts
;

649 i‡(
cf
->
cmd_ty≥
 !
NGX_RTMP_MAIN_CONF
) {

650 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

655 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

656 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

657 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len &&

658 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

660 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

662 &
vÆue
[1]);

663  
NGX_CONF_ERROR
;

667 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

668 i‡(
fmt
 =
NULL
) {

669  
NGX_CONF_ERROR
;

672 
fmt
->
«me
 = 
vÆue
[1];

674 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_πmp_log_›_t
));

675 i‡(
fmt
->
›s
 =
NULL
) {

676  
NGX_CONF_ERROR
;

679  
	`ngx_πmp_log_compûe_f‹m©
(
cf
, 
fmt
->
›s
, cf->
¨gs
, 2);

680 
	}
}

684 
	$ngx_πmp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
,

685 
ngx_uöt_t
 
s
)

687 
size_t
 
i
, 
Àn
;

688 
u_ch¨
 *
d©a
, *
d
, 
c
;

689 
ngx_uöt_t
 
bøckë
;

690 
ngx_°r_t
 *
vÆue
, 
v¨
;

691 
ngx_πmp_log_›_t
 *
›
;

692 
ngx_πmp_log_v¨_t
 *
v
;

694 
vÆue
 = 
¨gs
->
ñts
;

696 ; 
s
 < 
¨gs
->
√…s
; ++s) {

697 
i
 = 0;

699 
Àn
 = 
vÆue
[
s
].len;

700 
d
 = 
vÆue
[
s
].
d©a
;

702 
i
 < 
Àn
) {

704 
›
 = 
	`ngx_¨øy_push
(
›s
);

705 i‡(
›
 =
NULL
) {

706  
NGX_CONF_ERROR
;

709 
	`ngx_memzîo
(
›
, (*op));

711 
d©a
 = &
d
[
i
];

713 i‡(
d
[
i
] == '$') {

714 i‡(++
i
 =
Àn
) {

715 
övÆid
;

718 i‡(
d
[
i
] == '{') {

719 
bøckë
 = 1;

720 i‡(++
i
 =
Àn
) {

721 
övÆid
;

724 
bøckë
 = 0;

727 
v¨
.
d©a
 = &
d
[
i
];

729 
v¨
.
Àn
 = 0; 
i
 <Üen; ++i, ++var.len) {

730 
c
 = 
d
[
i
];

732 i‡(
c
 ='}' && 
bøckë
) {

733 ++
i
;

734 
bøckë
 = 0;

738 i‡((
c
 >= 'A' && c <= 'Z') ||

739 (
c
 >= 'a' && c <= 'z') ||

740 (
c
 >= '0' && c <= '9') ||

741 (
c
 == '_'))

749 i‡(
bøckë
) {

750 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

752 &
v¨
);

753  
NGX_CONF_ERROR
;

756 i‡(
v¨
.
Àn
 == 0) {

757 
övÆid
;

760 
v
 = 
ngx_πmp_log_v¨s
; v->
«me
.
Àn
; ++v) {

761 i‡(
v
->
«me
.
Àn
 =
v¨
.len &&

762 
	`ngx_°∫cmp
(
v
->
«me
.
d©a
, 
v¨
.d©a, v¨.
Àn
) == 0)

764 
›
->
gëÀn
 = 
v
->getlen;

765 
›
->
gëd©a
 = 
v
->getdata;

766 
›
->
off£t
 = 
v
->offset;

771 i‡(
v
->
«me
.
Àn
 == 0) {

772 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

773 "unknow¿v¨übÀ \"%V\"", &
v¨
);

774  
NGX_CONF_ERROR
;

780 ++
i
;

782 
i
 < 
Àn
 && 
d
[i] != '$') {

783 ++
i
;

786 
›
->
gëÀn
 = 
ngx_πmp_log_v¨_deÁu…_gëÀn
;

787 
›
->
gëd©a
 = 
ngx_πmp_log_v¨_deÁu…_gëd©a
;

789 
›
->
vÆue
.
Àn
 = &
d
[
i
] - 
d©a
;

791 
›
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, op->vÆue.
Àn
);

792 i‡(
›
->
vÆue
.
d©a
 =
NULL
) {

793  
NGX_CONF_ERROR
;

796 
	`ngx_mem˝y
(
›
->
vÆue
.
d©a
, d©a, op->vÆue.
Àn
);

800  
NGX_CONF_OK
;

802 
övÆid
:

804 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

806  
NGX_CONF_ERROR
;

807 
	}
}

810 
ngx_πmp_log_˘x_t
 *

811 
	$ngx_πmp_log_£t_«mes
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
«me
, u_ch¨ *
¨gs
)

813 
ngx_πmp_log_˘x_t
 *
˘x
;

815 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_log_moduÀ
);

816 i‡(
˘x
 =
NULL
) {

817 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_log_˘x_t
));

818 i‡(
˘x
 =
NULL
) {

819  
NULL
;

822 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_log_moduÀ
);

825 
	`ngx_mem˝y
(
˘x
->
«me
,Çame, 
NGX_RTMP_MAX_NAME
);

826 
	`ngx_mem˝y
(
˘x
->
¨gs
,árgs, 
NGX_RTMP_MAX_ARGS
);

828  
˘x
;

829 
	}
}

832 
ngx_öt_t


833 
	$ngx_πmp_log_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

835 
ngx_πmp_log_˘x_t
 *
˘x
;

837 i‡(
s
->
auto_pushed
 || s->
ªœy
) {

838 
√xt
;

841 
˘x
 = 
	`ngx_πmp_log_£t_«mes
(
s
, 
v
->
«me
, v->
¨gs
);

842 i‡(
˘x
 =
NULL
) {

843 
√xt
;

846 
˘x
->
publish
 = 1;

848 
√xt
:

849  
	`√xt_publish
(
s
, 
v
);

850 
	}
}

853 
ngx_öt_t


854 
	$ngx_πmp_log_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

856 
ngx_πmp_log_˘x_t
 *
˘x
;

858 i‡(
s
->
auto_pushed
 || s->
ªœy
) {

859 
√xt
;

862 
˘x
 = 
	`ngx_πmp_log_£t_«mes
(
s
, 
v
->
«me
, v->
¨gs
);

863 i‡(
˘x
 =
NULL
) {

864 
√xt
;

867 
˘x
->
∂ay
 = 1;

869 
√xt
:

870  
	`√xt_∂ay
(
s
, 
v
);

871 
	}
}

875 
	$ngx_πmp_log_wrôe
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_log_t
 *
log
, 
u_ch¨
 *
buf
,

876 
size_t
 
Àn
)

878 
u_ch¨
 *
«me
;

879 
time_t
 
now
;

880 
ssize_t
 
n
;

881 
îr
;

883 
îr
 = 0;

884 
«me
 = 
log
->
fûe
->«me.
d©a
;

885 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

887 i‡(
n
 =(
ssize_t
Ë
Àn
) {

891 
now
 = 
	`ngx_time
();

893 i‡(
n
 == -1) {

894 
îr
 = 
ngx_î∫o
;

896 i‡(
îr
 =
NGX_ENOSPC
) {

897 
log
->
disk_fuŒ_time
 = 
now
;

900 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

901 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
îr
,

902 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

903 
log
->
îr‹_log_time
 = 
now
;

907 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

908 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
îr
,

909 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

910 
«me
, 
n
, 
Àn
);

911 
log
->
îr‹_log_time
 = 
now
;

913 
	}
}

916 
ngx_öt_t


917 
	$ngx_πmp_log_disc⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

918 
ngx_chaö_t
 *
ö
)

920 
ngx_πmp_log_≠p_c⁄f_t
 *
œcf
;

921 
ngx_πmp_log_t
 *
log
;

922 
ngx_πmp_log_›_t
 *
›
;

923 
ngx_uöt_t
 
n
, 
i
;

924 
u_ch¨
 *
löe
, *
p
;

925 
size_t
 
Àn
;

927 i‡(
s
->
auto_pushed
 || s->
ªœy
) {

928  
NGX_OK
;

931 
œcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_log_moduÀ
);

932 i‡(
œcf
 =
NULL
 ||Üacf->
off
 ||Üacf->
logs
 == NULL) {

933  
NGX_OK
;

936 
log
 = 
œcf
->
logs
->
ñts
;

937 
i
 = 0; i < 
œcf
->
logs
->
√…s
; ++i, ++
log
) {

939 i‡(
	`ngx_time
(Ë=
log
->
disk_fuŒ_time
) {

945 
Àn
 = 0;

946 
›
 = 
log
->
f‹m©
->
›s
->
ñts
;

947 
n
 = 0;Ç < 
log
->
f‹m©
->
›s
->
√…s
; ++n, ++
›
) {

948 
Àn
 +
›
->
	`gëÀn
(
s
, op);

951 
Àn
 +
NGX_LINEFEED_SIZE
;

953 
löe
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

954 i‡(
löe
 =
NULL
) {

955  
NGX_OK
;

958 
p
 = 
löe
;

959 
›
 = 
log
->
f‹m©
->
›s
->
ñts
;

960 
n
 = 0;Ç < 
log
->
f‹m©
->
›s
->
√…s
; ++n, ++
›
) {

961 
p
 = 
›
->
	`gëd©a
(
s
,Ö, op);

964 
	`ngx_löe„ed
(
p
);

966 
	`ngx_πmp_log_wrôe
(
s
, 
log
, 
löe
, 
p
 -Üine);

969  
NGX_OK
;

970 
	}
}

973 
ngx_öt_t


974 
	$ngx_πmp_log_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

976 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

977 
ngx_πmp_h™dÀr_±
 *
h
;

978 
ngx_πmp_log_maö_c⁄f_t
 *
lmcf
;

979 
ngx_¨øy_t
 
a
;

980 
ngx_πmp_log_fmt_t
 *
fmt
;

981 
ngx_°r_t
 *
vÆue
;

983 
lmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_log_moduÀ
);

984 i‡(
lmcf
->
comböed_u£d
) {

985 i‡(
	`ngx_¨øy_öô
(&
a
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

986  
NGX_ERROR
;

989 
vÆue
 = 
	`ngx_¨øy_push
(&
a
);

990 i‡(
vÆue
 =
NULL
) {

991  
NGX_ERROR
;

994 *
vÆue
 = 
ngx_πmp_comböed_fmt
;

995 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

997 i‡(
	`ngx_πmp_log_compûe_f‹m©
(
cf
, 
fmt
->
›s
, &
a
, 0)

998 !
NGX_CONF_OK
)

1000  
NGX_ERROR
;

1004 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

1006 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_DISCONNECT
]);

1007 *
h
 = 
ngx_πmp_log_disc⁄√˘
;

1009 
√xt_publish
 = 
ngx_πmp_publish
;

1010 
ngx_πmp_publish
 = 
ngx_πmp_log_publish
;

1012 
√xt_∂ay
 = 
ngx_πmp_∂ay
;

1013 
ngx_πmp_∂ay
 = 
ngx_πmp_log_∂ay
;

1015  
NGX_OK
;

1016 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_mp4_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_∂ay_moduÀ.h
"

10 
	~"ngx_πmp_codec_moduÀ.h
"

11 
	~"ngx_πmp_°ªams.h
"

14 
ngx_öt_t
 
ngx_πmp_mp4_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_πmp_mp4_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
,

16 
ngx_öt_t
 
aödex
,Çgx_öt_à
vödex
);

17 
ngx_öt_t
 
ngx_πmp_mp4_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
);

18 
ngx_öt_t
 
ngx_πmp_mp4_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
);

19 
ngx_öt_t
 
ngx_πmp_mp4_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
,

20 
ngx_uöt_t
 
off£t
);

21 
ngx_öt_t
 
ngx_πmp_mp4_°›
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
);

22 
ngx_öt_t
 
ngx_πmp_mp4_£nd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
,

23 
ngx_uöt_t
 *
ts
);

24 
ngx_öt_t
 
ngx_πmp_mp4_ª£t
(
ngx_πmp_£ssi⁄_t
 *
s
);

27 
	#NGX_RTMP_MP4_MAX_FRAMES
 8

	)

30 #¥agm®
∑ck
(
push
,4)

35 #i‡(
NGX_WIN32
)

36 #¥agm®
w¨nög
(
push
)

37 #¥agm®
w¨nög
(
dißbÀ
:4200)

42 
uöt32_t
 
	mfú°_chunk
;

43 
uöt32_t
 
	mßm∂es_≥r_chunk
;

44 
uöt32_t
 
	mßm∂e_des¸±i⁄_ödex
;

45 } 
	tngx_πmp_mp4_chunk_íåy_t
;

49 
uöt32_t
 
	mvîsi⁄_Êags
;

50 
uöt32_t
 
	míåy_cou¡
;

51 
ngx_πmp_mp4_chunk_íåy_t
 
	míåõs
[0];

52 } 
	tngx_πmp_mp4_chunks_t
;

56 
uöt32_t
 
	mßm∂e_cou¡
;

57 
uöt32_t
 
	mßm∂e_dñè
;

58 } 
	tngx_πmp_mp4_time_íåy_t
;

62 
uöt32_t
 
	mvîsi⁄_Êags
;

63 
uöt32_t
 
	míåy_cou¡
;

64 
ngx_πmp_mp4_time_íåy_t
 
	míåõs
[0];

65 } 
	tngx_πmp_mp4_times_t
;

69 
uöt32_t
 
	mßm∂e_cou¡
;

70 
uöt32_t
 
	mßm∂e_off£t
;

71 } 
	tngx_πmp_mp4_dñay_íåy_t
;

75 
uöt32_t
 
	mvîsi⁄_Êags
;

76 
uöt32_t
 
	míåy_cou¡
;

77 
ngx_πmp_mp4_dñay_íåy_t
 
	míåõs
[0];

78 } 
	tngx_πmp_mp4_dñays_t
;

82 
uöt32_t
 
	mvîsi⁄_Êags
;

83 
uöt32_t
 
	míåy_cou¡
;

84 
uöt32_t
 
	míåõs
[0];

85 } 
	tngx_πmp_mp4_keys_t
;

89 
uöt32_t
 
	mvîsi⁄_Êags
;

90 
uöt32_t
 
	mßm∂e_size
;

91 
uöt32_t
 
	mßm∂e_cou¡
;

92 
uöt32_t
 
	míåõs
[0];

93 } 
	tngx_πmp_mp4_sizes_t
;

97 
uöt32_t
 
	mvîsi⁄_Êags
;

98 
uöt32_t
 
	mfõld_size
;

99 
uöt32_t
 
	mßm∂e_cou¡
;

100 
uöt32_t
 
	míåõs
[0];

101 } 
	tngx_πmp_mp4_sizes2_t
;

105 
uöt32_t
 
	mvîsi⁄_Êags
;

106 
uöt32_t
 
	míåy_cou¡
;

107 
uöt32_t
 
	míåõs
[0];

108 } 
	tngx_πmp_mp4_off£ts_t
;

112 
uöt32_t
 
	mvîsi⁄_Êags
;

113 
uöt32_t
 
	míåy_cou¡
;

114 
uöt64_t
 
	míåõs
[0];

115 } 
	tngx_πmp_mp4_off£ts64_t
;

118 #i‡(
NGX_WIN32
)

119 #¥agm®
w¨nög
(
p›
)

123 #¥agm®
∑ck
(
p›
)

127 
uöt32_t
 
	mtime°amp
;

128 
uöt32_t
 
	mœ°_time°amp
;

129 
off_t
 
	moff£t
;

130 
size_t
 
	msize
;

131 
ngx_öt_t
 
	mkey
;

132 
uöt32_t
 
	mdñay
;

134 
	mnŸ_fú°
:1;

135 
	mvÆid
:1;

137 
ngx_uöt_t
 
	mpos
;

139 
ngx_uöt_t
 
	mkey_pos
;

141 
ngx_uöt_t
 
	mchunk
;

142 
ngx_uöt_t
 
	mchunk_pos
;

143 
ngx_uöt_t
 
	mchunk_cou¡
;

145 
ngx_uöt_t
 
	mtime_pos
;

146 
ngx_uöt_t
 
	mtime_cou¡
;

148 
ngx_uöt_t
 
	mdñay_pos
;

149 
ngx_uöt_t
 
	mdñay_cou¡
;

151 
ngx_uöt_t
 
	msize_pos
;

152 } 
	tngx_πmp_mp4_curs‹_t
;

156 
ngx_uöt_t
 
	mid
;

158 
ngx_öt_t
 
	mty≥
;

159 
ngx_öt_t
 
	mcodec
;

160 
uöt32_t
 
	mcsid
;

161 
u_ch¨
 
	mfhdr
;

162 
ngx_öt_t
 
	mtime_sˇÀ
;

163 
uöt64_t
 
	mduøti⁄
;

165 
u_ch¨
 *
	mhódî
;

166 
size_t
 
	mhódî_size
;

167 
	mhódî_£¡
:1;

169 
ngx_πmp_mp4_times_t
 *
	mtimes
;

170 
ngx_πmp_mp4_dñays_t
 *
	mdñays
;

171 
ngx_πmp_mp4_keys_t
 *
	mkeys
;

172 
ngx_πmp_mp4_chunks_t
 *
	mchunks
;

173 
ngx_πmp_mp4_sizes_t
 *
	msizes
;

174 
ngx_πmp_mp4_sizes2_t
 *
	msizes2
;

175 
ngx_πmp_mp4_off£ts_t
 *
	moff£ts
;

176 
ngx_πmp_mp4_off£ts64_t
 *
	moff£ts64
;

177 
ngx_πmp_mp4_curs‹_t
 
	mcurs‹
;

178 } 
	tngx_πmp_mp4_åack_t
;

182 *
	mmm≠ed
;

183 
size_t
 
	mmm≠ed_size
;

184 
ngx_fd_t
 
	mexåa
;

186 
	mmëa_£¡
:1;

188 
ngx_πmp_mp4_åack_t
 
	måacks
[2];

189 
ngx_πmp_mp4_åack_t
 *
	måack
;

190 
ngx_uöt_t
 
	m¡øcks
;

192 
ngx_uöt_t
 
	mwidth
;

193 
ngx_uöt_t
 
	mheight
;

194 
ngx_uöt_t
 
	mnch™√ls
;

195 
ngx_uöt_t
 
	mßm∂e_size
;

196 
ngx_uöt_t
 
	mßm∂e_øã
;

198 
ngx_öt_t
 
	m©øcks
, 
	mvåacks
;

199 
ngx_öt_t
 
	maödex
, 
	mvödex
;

201 
uöt32_t
 
	m°¨t_time°amp
, 
	mïoch
;

202 } 
	tngx_πmp_mp4_˘x_t
;

205 
	#ngx_πmp_mp4_make_èg
(
a
, 
b
, 
c
, 
d
) \

206 ((
uöt32_t
)
d
 << 24 | (uöt32_t)
c
 << 16 | (uöt32_t)
b
 << 8 | (uöt32_t)
a
)

	)

209 
ngx_ölöe
 
uöt32_t


210 
	$ngx_πmp_mp4_to_πmp_time°amp
(
ngx_πmp_mp4_åack_t
 *
t
, 
uöt64_t
 
ts
)

212  (
uöt32_t
Ë(
ts
 * 1000 / 
t
->
time_sˇÀ
);

213 
	}
}

216 
ngx_ölöe
 
uöt32_t


217 
	$ngx_πmp_mp4_‰om_πmp_time°amp
(
ngx_πmp_mp4_åack_t
 *
t
, 
uöt32_t
 
ts
)

219  (
uöt64_t
Ë
ts
 * 
t
->
time_sˇÀ
 / 1000;

220 
	}
}

223 
	#NGX_RTMP_MP4_BUFLEN_ADDON
 1000

	)

226 
u_ch¨
 
	gngx_πmp_mp4_buf„r
[1024*1024];

229 #i‡(
NGX_WIN32
)

231 
	$ngx_πmp_mp4_mm≠
(
ngx_fd_t
 
fd
, 
size_t
 
size
, 
off_t
 
off£t
,Çgx_fd_à*
exåa
)

233 *
d©a
;

235 *
exåa
 = 
	`Cª©eFûeM≠pög
(
fd
, 
NULL
, 
PAGE_READONLY
,

236 (
DWORD
Ë((
uöt64_t
Ë
size
 >> 32),

237 (
DWORD
Ë(
size
 & 0xffffffff),

238 
NULL
);

239 i‡(*
exåa
 =
NULL
) {

240  
NULL
;

243 
d©a
 = 
	`M≠VõwOfFûe
(*
exåa
, 
FILE_MAP_READ
,

244 (
DWORD
Ë((
uöt64_t
Ë
off£t
 >> 32),

245 (
DWORD
Ë(
off£t
 & 0xffffffff),

246 
size
);

248 i‡(
d©a
 =
NULL
) {

249 
	`Clo£H™dÀ
(*
exåa
);

257  
d©a
;

258 
	}
}

261 
ngx_öt_t


262 
	$ngx_πmp_mp4_munm≠
(*
d©a
, 
size_t
 
size
, 
ngx_fd_t
 *
exåa
)

264 
ngx_öt_t
 
rc
;

266 
rc
 = 
NGX_OK
;

268 i‡(
	`Unm≠VõwOfFûe
(
d©a
) == 0) {

269 
rc
 = 
NGX_ERROR
;

272 i‡(
	`Clo£H™dÀ
(*
exåa
) == 0) {

273 
rc
 = 
NGX_ERROR
;

276  
rc
;

277 
	}
}

282 
	$ngx_πmp_mp4_mm≠
(
ngx_fd_t
 
fd
, 
size_t
 
size
, 
off_t
 
off£t
,Çgx_fd_à*
exåa
)

284 *
d©a
;

286 
d©a
 = 
	`mm≠
(
NULL
, 
size
, 
PROT_READ
, 
MAP_SHARED
, 
fd
, 
off£t
);

290  
d©a
 =
MAP_FAILED
 ? 
NULL
 : data;

291 
	}
}

294 
ngx_öt_t


295 
	$ngx_πmp_mp4_munm≠
(*
d©a
, 
size_t
 
size
, 
ngx_fd_t
 *
exåa
)

297  
	`munm≠
(
d©a
, 
size
);

298 
	}
}

303 
ngx_öt_t
 
ngx_πmp_mp4_∑r£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

304 
u_ch¨
 *
œ°
);

305 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_åak
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

306 
u_ch¨
 *
œ°
);

307 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_mdhd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

308 
u_ch¨
 *
œ°
);

309 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_hdÃ
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

310 
u_ch¨
 *
œ°
);

311 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_°sd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

312 
u_ch¨
 *
œ°
);

313 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_°sc
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

314 
u_ch¨
 *
œ°
);

315 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_°ts
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

316 
u_ch¨
 *
œ°
);

317 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_˘ts
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

318 
u_ch¨
 *
œ°
);

319 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_°ss
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

320 
u_ch¨
 *
œ°
);

321 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_°sz
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

322 
u_ch¨
 *
œ°
);

323 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_°z2
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

324 
u_ch¨
 *
œ°
);

325 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_°co
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

326 
u_ch¨
 *
œ°
);

327 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_co64
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

328 
u_ch¨
 *
œ°
);

329 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_avc1
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

330 
u_ch¨
 *
œ°
);

331 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_avcC
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

332 
u_ch¨
 *
œ°
);

333 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_mp4a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

334 
u_ch¨
 *
œ°
);

335 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_mp4v
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

336 
u_ch¨
 *
œ°
);

337 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_esds
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

338 
u_ch¨
 *
œ°
);

339 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_mp3
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

340 
u_ch¨
 *
œ°
);

341 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_nmos
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

342 
u_ch¨
 *
œ°
);

343 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_•ex
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

344 
u_ch¨
 *
œ°
);

347 
	$ngx_öt_t
 (*
	tngx_πmp_mp4_box_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
, 
	tu_ch¨
 *
	tpos
,

348 
	tu_ch¨
 *
	tœ°
);

351 
uöt32_t
 
èg
;

352 
ngx_πmp_mp4_box_±
 
h™dÀr
;

353 } 
	tngx_πmp_mp4_box_t
;

356 
ngx_πmp_mp4_box_t
 
ngx_πmp_mp4_boxes
[] = {

357 { 
	`ngx_πmp_mp4_make_èg
('t','r','a','k'), 
ngx_πmp_mp4_∑r£_åak
 },

358 { 
	`ngx_πmp_mp4_make_èg
('m','d','i','a'), 
ngx_πmp_mp4_∑r£
 },

359 { 
	`ngx_πmp_mp4_make_èg
('m','d','h','d'), 
ngx_πmp_mp4_∑r£_mdhd
 },

360 { 
	`ngx_πmp_mp4_make_èg
('h','d','l','r'), 
ngx_πmp_mp4_∑r£_hdÃ
 },

361 { 
	`ngx_πmp_mp4_make_èg
('m','i','n','f'), 
ngx_πmp_mp4_∑r£
 },

362 { 
	`ngx_πmp_mp4_make_èg
('s','t','b','l'), 
ngx_πmp_mp4_∑r£
 },

363 { 
	`ngx_πmp_mp4_make_èg
('s','t','s','d'), 
ngx_πmp_mp4_∑r£_°sd
 },

364 { 
	`ngx_πmp_mp4_make_èg
('s','t','s','c'), 
ngx_πmp_mp4_∑r£_°sc
 },

365 { 
	`ngx_πmp_mp4_make_èg
('s','t','t','s'), 
ngx_πmp_mp4_∑r£_°ts
 },

366 { 
	`ngx_πmp_mp4_make_èg
('c','t','t','s'), 
ngx_πmp_mp4_∑r£_˘ts
 },

367 { 
	`ngx_πmp_mp4_make_èg
('s','t','s','s'), 
ngx_πmp_mp4_∑r£_°ss
 },

368 { 
	`ngx_πmp_mp4_make_èg
('s','t','s','z'), 
ngx_πmp_mp4_∑r£_°sz
 },

369 { 
	`ngx_πmp_mp4_make_èg
('s','t','z','2'), 
ngx_πmp_mp4_∑r£_°z2
 },

370 { 
	`ngx_πmp_mp4_make_èg
('s','t','c','o'), 
ngx_πmp_mp4_∑r£_°co
 },

371 { 
	`ngx_πmp_mp4_make_èg
('c','o','6','4'), 
ngx_πmp_mp4_∑r£_co64
 },

372 { 
	`ngx_πmp_mp4_make_èg
('a','v','c','1'), 
ngx_πmp_mp4_∑r£_avc1
 },

373 { 
	`ngx_πmp_mp4_make_èg
('a','v','c','C'), 
ngx_πmp_mp4_∑r£_avcC
 },

374 { 
	`ngx_πmp_mp4_make_èg
('m','p','4','a'), 
ngx_πmp_mp4_∑r£_mp4a
 },

375 { 
	`ngx_πmp_mp4_make_èg
('m','p','4','v'), 
ngx_πmp_mp4_∑r£_mp4v
 },

376 { 
	`ngx_πmp_mp4_make_èg
('e','s','d','s'), 
ngx_πmp_mp4_∑r£_esds
 },

377 { 
	`ngx_πmp_mp4_make_èg
('.','m','p','3'), 
ngx_πmp_mp4_∑r£_mp3
 },

378 { 
	`ngx_πmp_mp4_make_èg
('n','m','o','s'), 
ngx_πmp_mp4_∑r£_nmos
 },

379 { 
	`ngx_πmp_mp4_make_èg
('s','p','e','x'), 
ngx_πmp_mp4_∑r£_•ex
 },

380 { 
	`ngx_πmp_mp4_make_èg
('w','a','v','e'), 
ngx_πmp_mp4_∑r£
 }

381 
	}
};

384 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_des¸
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

385 
u_ch¨
 *
œ°
);

386 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_es
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

387 
u_ch¨
 *
œ°
);

388 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_dc
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

389 
u_ch¨
 *
œ°
);

390 
ngx_öt_t
 
ngx_πmp_mp4_∑r£_ds
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
,

391 
u_ch¨
 *
œ°
);

394 
	$ngx_öt_t
 (*
	tngx_πmp_mp4_des¸ùt‹_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

395 
	tu_ch¨
 *
	tpos
, u_ch¨ *
	tœ°
);

398 
uöt8_t
 
èg
;

399 
ngx_πmp_mp4_des¸ùt‹_±
 
h™dÀr
;

400 } 
	tngx_πmp_mp4_des¸ùt‹_t
;

403 
ngx_πmp_mp4_des¸ùt‹_t
 
ngx_πmp_mp4_des¸ùt‹s
[] = {

404 { 0x03, 
ngx_πmp_mp4_∑r£_es
 },

405 { 0x04, 
ngx_πmp_mp4_∑r£_dc
 },

406 { 0x05, 
ngx_πmp_mp4_∑r£_ds
 }

407 
	}
};

410 
ngx_πmp_moduÀ_t
 
	gngx_πmp_mp4_moduÀ_˘x
 = {

411 
NULL
,

412 
ngx_πmp_mp4_po°c⁄figuøti⁄
,

413 
NULL
,

414 
NULL
,

415 
NULL
,

416 
NULL
,

417 
NULL
,

418 
NULL


422 
ngx_moduÀ_t
 
	gngx_πmp_mp4_moduÀ
 = {

423 
NGX_MODULE_V1
,

424 &
ngx_πmp_mp4_moduÀ_˘x
,

425 
NULL
,

426 
NGX_RTMP_MODULE
,

427 
NULL
,

428 
NULL
,

429 
NULL
,

430 
NULL
,

431 
NULL
,

432 
NULL
,

433 
NULL
,

434 
NGX_MODULE_V1_PADDING


438 
ngx_öt_t


439 
	$ngx_πmp_mp4_∑r£_åak
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

441 
ngx_πmp_mp4_˘x_t
 *
˘x
;

443 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

445 i‡(
˘x
->
åack
) {

446  
NGX_OK
;

449 
˘x
->
åack
 = (˘x->
¡øcks
 =(˘x->
åacks
) / (ctx->tracks[0]))

450 ? 
NULL
 : &
˘x
->
åacks
[˘x->
¡øcks
];

452 i‡(
˘x
->
åack
) {

453 
	`ngx_memzîo
(
˘x
->
åack
, (*ctx->track));

454 
˘x
->
åack
->
id
 = ctx->
¡øcks
;

456 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

457 "mp4:ÅryögÅøck %ui", 
˘x
->
¡øcks
);

460 i‡(
	`ngx_πmp_mp4_∑r£
(
s
, 
pos
, 
œ°
Ë!
NGX_OK
) {

461  
NGX_ERROR
;

464 i‡(
˘x
->
åack
 && ctx->åack->
ty≥
 &&

465 (
˘x
->
¡øcks
 == 0 ||

466 
˘x
->
åacks
[0].
ty≥
 !˘x->åacks[˘x->
¡øcks
].type))

468 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

469 "mp4:áddögÅøck %ui", 
˘x
->
¡øcks
);

471 i‡(
˘x
->
åack
->
ty≥
 =
NGX_RTMP_MSG_AUDIO
) {

472 i‡(
˘x
->
©øcks
++ !˘x->
aödex
) {

473 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

475 
˘x
->
©øcks
 - 1, ctx->
aödex
);

476 
˘x
->
åack
 = 
NULL
;

477  
NGX_OK
;

481 i‡(
˘x
->
våacks
++ !˘x->
vödex
) {

482 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

484 
˘x
->
våacks
 - 1, ctx->
vödex
);

485 
˘x
->
åack
 = 
NULL
;

486  
NGX_OK
;

490 ++
˘x
->
¡øcks
;

493 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

494 "mp4: ign‹ögÅøck %ui", 
˘x
->
¡øcks
);

497 
˘x
->
åack
 = 
NULL
;

499  
NGX_OK
;

500 
	}
}

503 
ngx_öt_t


504 
	$ngx_πmp_mp4_∑r£_mdhd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

506 
ngx_πmp_mp4_˘x_t
 *
˘x
;

507 
ngx_πmp_mp4_åack_t
 *
t
;

508 
uöt8_t
 
vîsi⁄
;

510 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

512 i‡(
˘x
->
åack
 =
NULL
) {

513  
NGX_OK
;

516 
t
 = 
˘x
->
åack
;

518 i‡(
pos
 + 1 > 
œ°
) {

519  
NGX_ERROR
;

522 
vîsi⁄
 = *(
uöt8_t
 *Ë
pos
;

524 
vîsi⁄
) {

526 i‡(
pos
 + 20 > 
œ°
) {

527  
NGX_ERROR
;

530 
pos
 += 12;

531 
t
->
time_sˇÀ
 = 
	`ngx_πmp_r32
(*(
uöt32_t
 *Ë
pos
);

532 
pos
 += 4;

533 
t
->
duøti⁄
 = 
	`ngx_πmp_r32
(*(
uöt32_t
 *Ë
pos
);

537 i‡(
pos
 + 28 > 
œ°
) {

538  
NGX_ERROR
;

541 
pos
 += 20;

542 
t
->
time_sˇÀ
 = 
	`ngx_πmp_r32
(*(
uöt32_t
 *Ë
pos
);

543 
pos
 += 4;

544 
t
->
duøti⁄
 = 
	`ngx_πmp_r64
(*(
uöt64_t
 *Ë
pos
);

548  
NGX_ERROR
;

551 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

553 
t
->
time_sˇÀ
,Å->
duøti⁄
);

555  
NGX_OK
;

556 
	}
}

559 
ngx_öt_t


560 
	$ngx_πmp_mp4_∑r£_hdÃ
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

562 
ngx_πmp_mp4_˘x_t
 *
˘x
;

563 
uöt32_t
 
ty≥
;

565 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

567 i‡(
˘x
->
åack
 =
NULL
) {

568  
NGX_OK
;

571 i‡(
pos
 + 12 > 
œ°
) {

572  
NGX_ERROR
;

575 
ty≥
 = *(
uöt32_t
 *)(
pos
 + 8);

577 i‡(
ty≥
 =
	`ngx_πmp_mp4_make_èg
('v','i','d','e')) {

578 
˘x
->
åack
->
ty≥
 = 
NGX_RTMP_MSG_VIDEO
;

579 
˘x
->
åack
->
csid
 = 
NGX_RTMP_CSID_VIDEO
;

581 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

584 } i‡(
ty≥
 =
	`ngx_πmp_mp4_make_èg
('s','o','u','n')) {

585 
˘x
->
åack
->
ty≥
 = 
NGX_RTMP_MSG_AUDIO
;

586 
˘x
->
åack
->
csid
 = 
NGX_RTMP_CSID_AUDIO
;

588 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

591 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

595  
NGX_OK
;

596 
	}
}

599 
ngx_öt_t


600 
	$ngx_πmp_mp4_∑r£_video
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
,

601 
ngx_öt_t
 
codec
)

603 
ngx_πmp_mp4_˘x_t
 *
˘x
;

605 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

607 i‡(
˘x
->
åack
 =
NULL
) {

608  
NGX_OK
;

611 
˘x
->
åack
->
codec
 = codec;

613 i‡(
pos
 + 78 > 
œ°
) {

614  
NGX_ERROR
;

617 
pos
 += 24;

619 
˘x
->
width
 = 
	`ngx_πmp_r16
(*(
uöt16_t
 *Ë
pos
);

621 
pos
 += 2;

623 
˘x
->
height
 = 
	`ngx_πmp_r16
(*(
uöt16_t
 *Ë
pos
);

625 
pos
 += 52;

627 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

629 
codec
, 
˘x
->
width
, ctx->
height
);

631 i‡(
	`ngx_πmp_mp4_∑r£
(
s
, 
pos
, 
œ°
Ë!
NGX_OK
) {

632  
NGX_ERROR
;

635 
˘x
->
åack
->
fhdr
 = (
u_ch¨
Ë˘x->åack->
codec
;

637  
NGX_OK
;

638 
	}
}

641 
ngx_öt_t


642 
	$ngx_πmp_mp4_∑r£_audio
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
,

643 
ngx_öt_t
 
codec
)

645 
ngx_πmp_mp4_˘x_t
 *
˘x
;

646 
u_ch¨
 *
p
;

647 
ngx_uöt_t
 
vîsi⁄
;

649 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

651 i‡(
˘x
->
åack
 =
NULL
) {

652  
NGX_OK
;

655 
˘x
->
åack
->
codec
 = codec;

657 i‡(
pos
 + 28 > 
œ°
) {

658  
NGX_ERROR
;

661 
pos
 += 8;

663 
vîsi⁄
 = 
	`ngx_πmp_r16
(*(
uöt16_t
 *Ë
pos
);

665 
pos
 += 8;

667 
˘x
->
nch™√ls
 = 
	`ngx_πmp_r16
(*(
uöt16_t
 *Ë
pos
);

669 
pos
 += 2;

671 
˘x
->
ßm∂e_size
 = 
	`ngx_πmp_r16
(*(
uöt16_t
 *Ë
pos
);

673 
pos
 += 6;

675 
˘x
->
ßm∂e_øã
 = 
	`ngx_πmp_r16
(*(
uöt16_t
 *Ë
pos
);

677 
pos
 += 4;

679 
p
 = &
˘x
->
åack
->
fhdr
;

681 *
p
 = 0;

683 i‡(
˘x
->
nch™√ls
 == 2) {

684 *
p
 |= 0x01;

687 i‡(
˘x
->
ßm∂e_size
 == 16) {

688 *
p
 |= 0x02;

691 
˘x
->
ßm∂e_øã
) {

696 *
p
 |= 0x04;

700 *
p
 |= 0x08;

704 *
p
 |= 0x0c;

708 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

711 
vîsi⁄
, 
codec
, 
˘x
->
nch™√ls
, ctx->
ßm∂e_size
,

712 
˘x
->
ßm∂e_øã
);

714 
vîsi⁄
) {

716 
pos
 += 16;

720 
pos
 += 36;

723 i‡(
pos
 > 
œ°
) {

724  
NGX_ERROR
;

727 i‡(
	`ngx_πmp_mp4_∑r£
(
s
, 
pos
, 
œ°
Ë!
NGX_OK
) {

728  
NGX_ERROR
;

731 *
p
 |(
˘x
->
åack
->
codec
 << 4);

733  
NGX_OK
;

734 
	}
}

737 
ngx_öt_t


738 
	$ngx_πmp_mp4_∑r£_avc1
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

740  
	`ngx_πmp_mp4_∑r£_video
(
s
, 
pos
, 
œ°
, 
NGX_RTMP_VIDEO_H264
);

741 
	}
}

744 
ngx_öt_t


745 
	$ngx_πmp_mp4_∑r£_mp4v
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

747  
	`ngx_πmp_mp4_∑r£_video
(
s
, 
pos
, 
œ°
, 
NGX_RTMP_VIDEO_H264
);

748 
	}
}

751 
ngx_öt_t


752 
	$ngx_πmp_mp4_∑r£_avcC
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

754 
ngx_πmp_mp4_˘x_t
 *
˘x
;

756 i‡(
pos
 =
œ°
) {

757  
NGX_OK
;

760 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

762 i‡(
˘x
->
åack
 =
NULL
 || ctx->åack->
codec
 !
NGX_RTMP_VIDEO_H264
) {

763  
NGX_OK
;

766 
˘x
->
åack
->
hódî
 = 
pos
;

767 
˘x
->
åack
->
hódî_size
 = (
size_t
Ë(
œ°
 - 
pos
);

769 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

771 
˘x
->
åack
->
hódî_size
);

773  
NGX_OK
;

774 
	}
}

777 
ngx_öt_t


778 
	$ngx_πmp_mp4_∑r£_mp4a
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

780  
	`ngx_πmp_mp4_∑r£_audio
(
s
, 
pos
, 
œ°
, 
NGX_RTMP_AUDIO_MP3
);

781 
	}
}

784 
ngx_öt_t


785 
	$ngx_πmp_mp4_∑r£_ds
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

787 
ngx_πmp_mp4_˘x_t
 *
˘x
;

788 
ngx_πmp_mp4_åack_t
 *
t
;

790 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

792 
t
 = 
˘x
->
åack
;

794 i‡(
t
 =
NULL
) {

795  
NGX_OK
;

798 
t
->
hódî
 = 
pos
;

799 
t
->
hódî_size
 = (
size_t
Ë(
œ°
 - 
pos
);

801 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

802 "mp4: decodî hódî size=%uz", 
t
->
hódî_size
);

804  
NGX_OK
;

805 
	}
}

808 
ngx_öt_t


809 
	$ngx_πmp_mp4_∑r£_dc
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

811 
uöt8_t
 
id
;

812 
ngx_πmp_mp4_˘x_t
 *
˘x
;

813 
ngx_öt_t
 *
pc
;

815 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

817 i‡(
˘x
->
åack
 =
NULL
) {

818  
NGX_OK
;

821 i‡(
pos
 + 13 > 
œ°
) {

822  
NGX_ERROR
;

825 
id
 = * (
uöt8_t
 *Ë
pos
;

826 
pos
 += 13;

827 
pc
 = &
˘x
->
åack
->
codec
;

829 
id
) {

831 *
pc
 = 
NGX_RTMP_VIDEO_H264
;

838 *
pc
 = 
NGX_RTMP_AUDIO_AAC
;

843 *
pc
 = 
NGX_RTMP_AUDIO_MP3
;

847 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

849 (
ngx_öt_t
Ë
id
, *
pc
);

851  
	`ngx_πmp_mp4_∑r£_des¸
(
s
, 
pos
, 
œ°
);

852 
	}
}

855 
ngx_öt_t


856 
	$ngx_πmp_mp4_∑r£_es
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

858 
uöt16_t
 
id
;

859 
uöt8_t
 
Êags
;

861 i‡(
pos
 + 3 > 
œ°
) {

862  
NGX_ERROR
;

865 
id
 = 
	`ngx_πmp_r16
(*(
uöt16_t
 *Ë
pos
);

866 
pos
 += 2;

868 
Êags
 = *(
uöt8_t
 *Ë
pos
;

869 ++
pos
;

871 i‡(
Êags
 & 0x80) {

872 
pos
 += 2;

875 i‡(
Êags
 & 0x40) {

876  
NGX_OK
;

879 i‡(
Êags
 & 0x20) {

880 
pos
 += 2;

883 i‡(
pos
 > 
œ°
) {

884  
NGX_ERROR
;

887 (Ë
id
;

889 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

891 (
ngx_öt_t
Ë
id
, (ngx_öt_tË
Êags
);

893  
	`ngx_πmp_mp4_∑r£_des¸
(
s
, 
pos
, 
œ°
);

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_πmp_mp4_∑r£_des¸
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

900 
uöt8_t
 
èg
, 
v
;

901 
uöt32_t
 
size
;

902 
ngx_uöt_t
 
n
, 
ndesc
;

903 
ngx_πmp_mp4_des¸ùt‹_t
 *
ds
;

905 
ndesc
 = (
ngx_πmp_mp4_des¸ùt‹s
)

906 / (
ngx_πmp_mp4_des¸ùt‹s
[0]);

908 
pos
 < 
œ°
) {

909 
èg
 = *(
uöt8_t
 *Ë
pos
++;

911 
size
 = 0, 
n
 = 0;Ç < 4; ++n) {

912 i‡(
pos
 =
œ°
) {

913  
NGX_ERROR
;

916 
v
 = *(
uöt8_t
 *Ë
pos
++;

918 
size
 = (sizê<< 7Ë| (
v
 & 0x7f);

920 i‡(!(
v
 & 0x80)) {

925 i‡(
pos
 + 
size
 > 
œ°
) {

926  
NGX_ERROR
;

929 
ds
 = 
ngx_πmp_mp4_des¸ùt‹s
;;

931 
n
 = 0;Ç < 
ndesc
; ++n, ++
ds
) {

932 i‡(
èg
 =
ds
->tag) {

937 i‡(
n
 =
ndesc
) {

938 
ds
 = 
NULL
;

941 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

943 
ds
 ? "" : " unh™dÀd", (
ngx_öt_t
Ë
èg
, 
size
);

945 i‡(
ds
 && ds->
	`h™dÀr
(
s
, 
pos
,Öo†+ 
size
Ë!
NGX_OK
) {

946  
NGX_ERROR
;

949 
pos
 +
size
;

952  
NGX_OK
;

953 
	}
}

956 
ngx_öt_t


957 
	$ngx_πmp_mp4_∑r£_esds
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

959 i‡(
pos
 + 4 > 
œ°
) {

960  
NGX_ERROR
;

963 
pos
 += 4;

965  
	`ngx_πmp_mp4_∑r£_des¸
(
s
, 
pos
, 
œ°
);

966 
	}
}

969 
ngx_öt_t


970 
	$ngx_πmp_mp4_∑r£_mp3
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

972  
	`ngx_πmp_mp4_∑r£_audio
(
s
, 
pos
, 
œ°
, 
NGX_RTMP_AUDIO_MP3
);

973 
	}
}

976 
ngx_öt_t


977 
	$ngx_πmp_mp4_∑r£_nmos
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

979  
	`ngx_πmp_mp4_∑r£_audio
(
s
, 
pos
, 
œ°
, 
NGX_RTMP_AUDIO_NELLY
);

980 
	}
}

983 
ngx_öt_t


984 
	$ngx_πmp_mp4_∑r£_•ex
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

986  
	`ngx_πmp_mp4_∑r£_audio
(
s
, 
pos
, 
œ°
, 
NGX_RTMP_AUDIO_SPEEX
);

987 
	}
}

990 
ngx_öt_t


991 
	$ngx_πmp_mp4_∑r£_°sd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

993 i‡(
pos
 + 8 > 
œ°
) {

994  
NGX_ERROR
;

997 
pos
 += 8;

999 
	`ngx_πmp_mp4_∑r£
(
s
, 
pos
, 
œ°
);

1001  
NGX_OK
;

1002 
	}
}

1005 
ngx_öt_t


1006 
	$ngx_πmp_mp4_∑r£_°sc
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1008 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1009 
ngx_πmp_mp4_åack_t
 *
t
;

1011 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1013 
t
 = 
˘x
->
åack
;

1015 i‡(
t
 =
NULL
) {

1016  
NGX_OK
;

1019 
t
->
chunks
 = (
ngx_πmp_mp4_chunks_t
 *Ë
pos
;

1021 i‡(
pos
 + (*
t
->
chunks
Ë+ 
	`ngx_πmp_r32
—->chunks->
íåy_cou¡
) *

1022 (
t
->
chunks
->
íåõs
[0])

1023 <
œ°
)

1025 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1027 
	`ngx_πmp_r32
(
t
->
chunks
->
íåy_cou¡
));

1028  
NGX_OK
;

1031 
t
->
chunks
 = 
NULL
;

1032  
NGX_ERROR
;

1033 
	}
}

1036 
ngx_öt_t


1037 
	$ngx_πmp_mp4_∑r£_°ts
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1039 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1040 
ngx_πmp_mp4_åack_t
 *
t
;

1042 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1044 
t
 = 
˘x
->
åack
;

1046 i‡(
t
 =
NULL
) {

1047  
NGX_OK
;

1050 
t
->
times
 = (
ngx_πmp_mp4_times_t
 *Ë
pos
;

1052 i‡(
pos
 + (*
t
->
times
Ë+ 
	`ngx_πmp_r32
—->times->
íåy_cou¡
) *

1053 (
t
->
times
->
íåõs
[0])

1054 <
œ°
)

1056 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1058 
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
));

1059  
NGX_OK
;

1062 
t
->
times
 = 
NULL
;

1063  
NGX_ERROR
;

1064 
	}
}

1067 
ngx_öt_t


1068 
	$ngx_πmp_mp4_∑r£_˘ts
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1070 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1071 
ngx_πmp_mp4_åack_t
 *
t
;

1073 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1075 
t
 = 
˘x
->
åack
;

1077 i‡(
t
 =
NULL
) {

1078  
NGX_OK
;

1081 
t
->
dñays
 = (
ngx_πmp_mp4_dñays_t
 *Ë
pos
;

1083 i‡(
pos
 + (*
t
->
dñays
Ë+ 
	`ngx_πmp_r32
—->dñays->
íåy_cou¡
) *

1084 (
t
->
dñays
->
íåõs
[0])

1085 <
œ°
)

1087 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1089 
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
));

1090  
NGX_OK
;

1093 
t
->
dñays
 = 
NULL
;

1094  
NGX_ERROR
;

1095 
	}
}

1098 
ngx_öt_t


1099 
	$ngx_πmp_mp4_∑r£_°ss
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1101 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1102 
ngx_πmp_mp4_åack_t
 *
t
;

1104 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1106 
t
 = 
˘x
->
åack
;

1108 i‡(
t
 =
NULL
) {

1109  
NGX_OK
;

1112 
t
->
keys
 = (
ngx_πmp_mp4_keys_t
 *Ë
pos
;

1114 i‡(
pos
 + (*
t
->
keys
Ë+ 
	`ngx_πmp_r32
—->keys->
íåy_cou¡
) *

1115 (
t
->
keys
->
íåõs
[0])

1116 <
œ°
)

1118 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1120 
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
));

1121  
NGX_OK
;

1124 
t
->
keys
 = 
NULL
;

1125  
NGX_ERROR
;

1126 
	}
}

1129 
ngx_öt_t


1130 
	$ngx_πmp_mp4_∑r£_°sz
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1132 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1133 
ngx_πmp_mp4_åack_t
 *
t
;

1135 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1137 
t
 = 
˘x
->
åack
;

1139 i‡(
t
 =
NULL
) {

1140  
NGX_OK
;

1143 
t
->
sizes
 = (
ngx_πmp_mp4_sizes_t
 *Ë
pos
;

1145 i‡(
pos
 + (*
t
->
sizes
Ë<
œ°
 &&Å->sizes->
ßm∂e_size
) {

1146 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1148 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_size
));

1149  
NGX_OK
;

1152 i‡(
pos
 + (*
t
->
sizes
Ë+ 
	`ngx_πmp_r32
—->sizes->
ßm∂e_cou¡
) *

1153 (
t
->
sizes
->
íåõs
[0])

1154 <
œ°
)

1157 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1159 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
));

1160  
NGX_OK
;

1163 
t
->
sizes
 = 
NULL
;

1164  
NGX_ERROR
;

1165 
	}
}

1168 
ngx_öt_t


1169 
	$ngx_πmp_mp4_∑r£_°z2
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1171 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1172 
ngx_πmp_mp4_åack_t
 *
t
;

1174 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1176 
t
 = 
˘x
->
åack
;

1178 i‡(
t
 =
NULL
) {

1179  
NGX_OK
;

1182 
t
->
sizes2
 = (
ngx_πmp_mp4_sizes2_t
 *Ë
pos
;

1184 i‡(
pos
 + (*
t
->
sizes
Ë+ 
	`ngx_πmp_r32
—->
sizes2
->
ßm∂e_cou¡
) *

1185 
	`ngx_πmp_r32
(
t
->
sizes2
->
fõld_size
) / 8

1186 <
œ°
)

1188 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1190 
	`ngx_πmp_r32
(
t
->
sizes2
->
fõld_size
),

1191 
	`ngx_πmp_r32
(
t
->
sizes2
->
ßm∂e_cou¡
));

1192  
NGX_OK
;

1195 
t
->
sizes2
 = 
NULL
;

1196  
NGX_ERROR
;

1197 
	}
}

1200 
ngx_öt_t


1201 
	$ngx_πmp_mp4_∑r£_°co
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1203 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1204 
ngx_πmp_mp4_åack_t
 *
t
;

1206 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1208 
t
 = 
˘x
->
åack
;

1210 i‡(
t
 =
NULL
) {

1211  
NGX_OK
;

1214 
t
->
off£ts
 = (
ngx_πmp_mp4_off£ts_t
 *Ë
pos
;

1216 i‡(
pos
 + (*
t
->
off£ts
Ë+ 
	`ngx_πmp_r32
—->off£ts->
íåy_cou¡
) *

1217 (
t
->
off£ts
->
íåõs
[0])

1218 <
œ°
)

1220 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1222 
	`ngx_πmp_r32
(
t
->
off£ts
->
íåy_cou¡
));

1223  
NGX_OK
;

1226 
t
->
off£ts
 = 
NULL
;

1227  
NGX_ERROR
;

1228 
	}
}

1231 
ngx_öt_t


1232 
	$ngx_πmp_mp4_∑r£_co64
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1234 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1235 
ngx_πmp_mp4_åack_t
 *
t
;

1237 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

1239 
t
 = 
˘x
->
åack
;

1241 i‡(
t
 =
NULL
) {

1242  
NGX_OK
;

1245 
t
->
off£ts64
 = (
ngx_πmp_mp4_off£ts64_t
 *Ë
pos
;

1247 i‡(
pos
 + (*
t
->
off£ts64
Ë+ 
	`ngx_πmp_r32
—->off£ts64->
íåy_cou¡
) *

1248 (
t
->
off£ts64
->
íåõs
[0])

1249 <
œ°
)

1251 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1253 
	`ngx_πmp_r32
(
t
->
off£ts64
->
íåy_cou¡
));

1254  
NGX_OK
;

1257 
t
->
off£ts64
 = 
NULL
;

1258  
NGX_ERROR
;

1259 
	}
}

1262 
ngx_öt_t


1263 
	$ngx_πmp_mp4_∑r£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

1265 
uöt32_t
 *
hdr
, 
èg
;

1266 
size_t
 
size
, 
nboxes
;

1267 
ngx_uöt_t
 
n
;

1268 
ngx_πmp_mp4_box_t
 *
b
;

1270 
pos
 !
œ°
) {

1271 i‡(
pos
 + 8 > 
œ°
) {

1272 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1273 "mp4:ÅoÿsmÆ»box: size=%i", 
œ°
 - 
pos
);

1274  
NGX_ERROR
;

1277 
hdr
 = (
uöt32_t
 *Ë
pos
;

1278 
size
 = 
	`ngx_πmp_r32
(
hdr
[0]);

1279 
èg
 = 
hdr
[1];

1281 i‡(
pos
 + 
size
 > 
œ°
) {

1282 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1284 4, &
èg
, 
size
);

1285  
NGX_ERROR
;

1288 
b
 = 
ngx_πmp_mp4_boxes
;

1289 
nboxes
 = (
ngx_πmp_mp4_boxes
) / (ngx_rtmp_mp4_boxes[0]);

1291 
n
 = 0;Ç < 
nboxes
 && 
b
->
èg
 !=Åag; ++n, ++b);

1293 i‡(
n
 =
nboxes
) {

1294 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1295 "mp4: box unh™dÀd '%*s'", 4, &
èg
);

1297 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1298 "mp4: box '%*s'", 4, &
èg
);

1299 
b
->
	`h™dÀr
(
s
, 
pos
 + 8,Öo†+ 
size
);

1302 
pos
 +
size
;

1305  
NGX_OK
;

1306 
	}
}

1309 
ngx_öt_t


1310 
	$ngx_πmp_mp4_√xt_time
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1312 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1313 
ngx_πmp_mp4_time_íåy_t
 *
ã
;

1315 i‡(
t
->
times
 =
NULL
) {

1316  
NGX_ERROR
;

1319 
¸
 = &
t
->
curs‹
;

1321 i‡(
¸
->
time_pos
 >
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
)) {

1322 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1324 
t
->
id
, 
¸
->
time_pos
,

1325 
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
));

1327  
NGX_ERROR
;

1330 
ã
 = &
t
->
times
->
íåõs
[
¸
->
time_pos
];

1332 
¸
->
œ°_time°amp
 = cr->
time°amp
;

1333 
¸
->
time°amp
 +
	`ngx_πmp_r32
(
ã
->
ßm∂e_dñè
);

1335 
¸
->
nŸ_fú°
 = 1;

1337 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1339 
t
->
id
, 
¸
->
pos
, cr->
time_pos
,

1340 
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
),

1341 
¸
->
time_cou¡
, 
	`ngx_πmp_r32
(
ã
->
ßm∂e_cou¡
),

1342 
	`ngx_πmp_r32
(
ã
->
ßm∂e_dñè
),

1343 
¸
->
time°amp
);

1345 
¸
->
time_cou¡
++;

1346 
¸
->
pos
++;

1348 i‡(
¸
->
time_cou¡
 >
	`ngx_πmp_r32
(
ã
->
ßm∂e_cou¡
)) {

1349 
¸
->
time_pos
++;

1350 
¸
->
time_cou¡
 = 0;

1353  
NGX_OK
;

1354 
	}
}

1357 
ngx_öt_t


1358 
	$ngx_πmp_mp4_£ek_time
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
,

1359 
uöt32_t
 
time°amp
)

1361 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1362 
ngx_πmp_mp4_time_íåy_t
 *
ã
;

1363 
uöt32_t
 
dt
;

1365 i‡(
t
->
times
 =
NULL
) {

1366  
NGX_ERROR
;

1369 
¸
 = &
t
->
curs‹
;

1371 
ã
 = 
t
->
times
->
íåõs
;

1373 
¸
->
time_pos
 < 
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
)) {

1374 
dt
 = 
	`ngx_πmp_r32
(
ã
->
ßm∂e_dñè
Ë*Çgx_πmp_r32—e->
ßm∂e_cou¡
);

1376 i‡(
¸
->
time°amp
 + 
dt
 >=Åimestamp) {

1377 i‡(
ã
->
ßm∂e_dñè
 == 0) {

1378  
NGX_ERROR
;

1381 
¸
->
time_cou¡
 = (
time°amp
 - cr->timestamp) /

1382 
	`ngx_πmp_r32
(
ã
->
ßm∂e_dñè
);

1383 
¸
->
time°amp
 +
	`ngx_πmp_r32
(
ã
->
ßm∂e_dñè
Ë* cr->
time_cou¡
;

1384 
¸
->
pos
 +¸->
time_cou¡
;

1389 
¸
->
time°amp
 +
dt
;

1390 
¸
->
pos
 +
	`ngx_πmp_r32
(
ã
->
ßm∂e_cou¡
);

1391 
¸
->
time_pos
++;

1392 
ã
++;

1395 i‡(
¸
->
time_pos
 >
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
)) {

1396 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1398 
t
->
id
, 
¸
->
time_pos
,

1399 
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
));

1401  
NGX_ERROR
;

1404 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1407 
t
->
id
, 
¸
->
pos
, cr->
time_pos
,

1408 
	`ngx_πmp_r32
(
t
->
times
->
íåy_cou¡
),

1409 
¸
->
time_cou¡
,

1410 
	`ngx_πmp_r32
(
ã
->
ßm∂e_cou¡
),

1411 
	`ngx_πmp_r32
(
ã
->
ßm∂e_dñè
),

1412 
¸
->
time°amp
);

1414  
NGX_OK
;

1415 
	}
}

1418 
ngx_öt_t


1419 
	$ngx_πmp_mp4_upd©e_off£t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1421 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1422 
ngx_uöt_t
 
chunk
;

1424 
¸
 = &
t
->
curs‹
;

1426 i‡(
¸
->
chunk
 < 1) {

1427 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1429 
t
->
id
, 
¸
->
chunk
);

1430  
NGX_ERROR
;

1433 
chunk
 = 
¸
->chunk - 1;

1435 i‡(
t
->
off£ts
) {

1436 i‡(
chunk
 >
	`ngx_πmp_r32
(
t
->
off£ts
->
íåy_cou¡
)) {

1437 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1439 
t
->
id
, 
¸
->
chunk
,

1440 
	`ngx_πmp_r32
(
t
->
off£ts
->
íåy_cou¡
));

1442  
NGX_ERROR
;

1445 
¸
->
off£t
 = (
off_t
Ë
	`ngx_πmp_r32
(
t
->
off£ts
->
íåõs
[
chunk
]);

1446 
¸
->
size
 = 0;

1448 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1450 
t
->
id
, 
¸
->
chunk
,

1451 
	`ngx_πmp_r32
(
t
->
off£ts
->
íåy_cou¡
),

1452 
¸
->
off£t
);

1454  
NGX_OK
;

1457 i‡(
t
->
off£ts64
) {

1458 i‡(
chunk
 >
	`ngx_πmp_r32
(
t
->
off£ts64
->
íåy_cou¡
)) {

1459 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1461 
t
->
id
, 
¸
->
chunk
,

1462 
	`ngx_πmp_r32
(
t
->
off£ts
->
íåy_cou¡
));

1464  
NGX_ERROR
;

1467 
¸
->
off£t
 = (
off_t
Ë
	`ngx_πmp_r64
(
t
->
off£ts64
->
íåõs
[
chunk
]);

1468 
¸
->
size
 = 0;

1470 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1472 
t
->
id
, 
¸
->
chunk
,

1473 
	`ngx_πmp_r32
(
t
->
off£ts
->
íåy_cou¡
),

1474 
¸
->
off£t
);

1476  
NGX_OK
;

1479  
NGX_ERROR
;

1480 
	}
}

1483 
ngx_öt_t


1484 
	$ngx_πmp_mp4_√xt_chunk
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1486 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1487 
ngx_πmp_mp4_chunk_íåy_t
 *
˚
, *
n˚
;

1488 
ngx_öt_t
 
√w_chunk
;

1490 i‡(
t
->
chunks
 =
NULL
) {

1491  
NGX_OK
;

1494 
¸
 = &
t
->
curs‹
;

1496 i‡(
¸
->
chunk_pos
 >
	`ngx_πmp_r32
(
t
->
chunks
->
íåy_cou¡
)) {

1497 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1499 
t
->
id
, 
¸
->
chunk_pos
,

1500 
	`ngx_πmp_r32
(
t
->
chunks
->
íåy_cou¡
));

1502  
NGX_ERROR
;

1505 
˚
 = &
t
->
chunks
->
íåõs
[
¸
->
chunk_pos
];

1507 
¸
->
chunk_cou¡
++;

1509 i‡(
¸
->
chunk_cou¡
 >
	`ngx_πmp_r32
(
˚
->
ßm∂es_≥r_chunk
)) {

1510 
¸
->
chunk_cou¡
 = 0;

1511 
¸
->
chunk
++;

1513 i‡(
¸
->
chunk_pos
 + 1 < 
	`ngx_πmp_r32
(
t
->
chunks
->
íåy_cou¡
)) {

1514 
n˚
 = 
˚
 + 1;

1515 i‡(
¸
->
chunk
 >
	`ngx_πmp_r32
(
n˚
->
fú°_chunk
)) {

1516 
¸
->
chunk_pos
++;

1517 
˚
 = 
n˚
;

1521 
√w_chunk
 = 1;

1524 
√w_chunk
 = 0;

1527 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1529 
t
->
id
, 
¸
->
chunk_pos
,

1530 
	`ngx_πmp_r32
(
t
->
chunks
->
íåy_cou¡
),

1531 
	`ngx_πmp_r32
(
˚
->
fú°_chunk
),

1532 
¸
->
chunk
, cr->
chunk_cou¡
,

1533 
	`ngx_πmp_r32
(
˚
->
ßm∂es_≥r_chunk
));

1536 i‡(
√w_chunk
) {

1537  
	`ngx_πmp_mp4_upd©e_off£t
(
s
, 
t
);

1540  
NGX_OK
;

1541 
	}
}

1544 
ngx_öt_t


1545 
	$ngx_πmp_mp4_£ek_chunk
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1547 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1548 
ngx_πmp_mp4_chunk_íåy_t
 *
˚
, *
n˚
;

1549 
ngx_uöt_t
 
pos
, 
dpos
, 
dchunk
;

1551 
¸
 = &
t
->
curs‹
;

1553 i‡(
t
->
chunks
 =
NULL
 ||Å->chunks->
íåy_cou¡
 == 0) {

1554 
¸
->
chunk
 = 1;

1555  
NGX_OK
;

1558 
˚
 = 
t
->
chunks
->
íåõs
;

1559 
pos
 = 0;

1561 
¸
->
chunk_pos
 + 1 < 
	`ngx_πmp_r32
(
t
->
chunks
->
íåy_cou¡
)) {

1562 
n˚
 = 
˚
 + 1;

1564 
dpos
 = (
	`ngx_πmp_r32
(
n˚
->
fú°_chunk
) -

1565 
	`ngx_πmp_r32
(
˚
->
fú°_chunk
)) *

1566 
	`ngx_πmp_r32
(
˚
->
ßm∂es_≥r_chunk
);

1568 i‡(
pos
 + 
dpos
 > 
¸
->pos) {

1572 
pos
 +
dpos
;

1573 
˚
++;

1574 
¸
->
chunk_pos
++;

1577 i‡(
˚
->
ßm∂es_≥r_chunk
 == 0) {

1578  
NGX_ERROR
;

1581 
dchunk
 = (
¸
->
pos
 -ÖosË/ 
	`ngx_πmp_r32
(
˚
->
ßm∂es_≥r_chunk
);

1583 
¸
->
chunk
 = 
	`ngx_πmp_r32
(
˚
->
fú°_chunk
Ë+ 
dchunk
;

1584 
¸
->
chunk_pos
 = (
ngx_uöt_t
Ë(
˚
 - 
t
->
chunks
->
íåõs
);

1585 
¸
->
chunk_cou¡
 = (
ngx_uöt_t
Ë(¸->
pos
 -Öo†- 
dchunk
 *

1586 
	`ngx_πmp_r32
(
˚
->
ßm∂es_≥r_chunk
));

1588 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1590 
t
->
id
, 
¸
->
chunk_pos
,

1591 
	`ngx_πmp_r32
(
t
->
chunks
->
íåy_cou¡
),

1592 
	`ngx_πmp_r32
(
˚
->
fú°_chunk
),

1593 
¸
->
chunk
, cr->
chunk_cou¡
,

1594 
	`ngx_πmp_r32
(
˚
->
ßm∂es_≥r_chunk
));

1596  
	`ngx_πmp_mp4_upd©e_off£t
(
s
, 
t
);

1597 
	}
}

1600 
ngx_öt_t


1601 
	$ngx_πmp_mp4_√xt_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1603 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1605 
¸
 = &
t
->
curs‹
;

1607 
¸
->
off£t
 +¸->
size
;

1609 i‡(
t
->
sizes
) {

1610 i‡(
t
->
sizes
->
ßm∂e_size
) {

1611 
¸
->
size
 = 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_size
);

1613 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1615 
t
->
id
, 
¸
->
size
);

1617  
NGX_OK
;

1620 
¸
->
size_pos
++;

1622 i‡(
¸
->
size_pos
 >
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
)) {

1623 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1625 
t
->
id
, 
¸
->
size_pos
,

1626 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
));

1628  
NGX_ERROR
;

1631 
¸
->
size
 = 
	`ngx_πmp_r32
(
t
->
sizes
->
íåõs
[¸->
size_pos
]);

1633 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1635 
t
->
id
, 
¸
->
size_pos
,

1636 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
),

1637 
¸
->
size
);

1639  
NGX_OK
;

1642 i‡(
t
->
sizes2
) {

1643 i‡(
¸
->
size_pos
 >
	`ngx_πmp_r32
(
t
->
sizes2
->
ßm∂e_cou¡
)) {

1644 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1646 
t
->
id
, 
¸
->
size_pos
,

1647 
	`ngx_πmp_r32
(
t
->
sizes2
->
ßm∂e_cou¡
));

1649  
NGX_ERROR
;

1654  
NGX_OK
;

1657  
NGX_ERROR
;

1658 
	}
}

1661 
ngx_öt_t


1662 
	$ngx_πmp_mp4_£ek_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1664 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1665 
ngx_uöt_t
 
pos
;

1667 
¸
 = &
t
->
curs‹
;

1669 i‡(
¸
->
chunk_cou¡
 > cr->
pos
) {

1670  
NGX_ERROR
;

1673 i‡(
t
->
sizes
) {

1674 i‡(
t
->
sizes
->
ßm∂e_size
) {

1675 
¸
->
size
 = 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_size
);

1677 
¸
->
off£t
 +¸->
size
 * cr->
chunk_cou¡
;

1679 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1681 
t
->
id
, 
¸
->
size
);

1683  
NGX_OK
;

1686 i‡(
¸
->
pos
 >
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
)) {

1687 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1689 
t
->
id
, 
¸
->
pos
,

1690 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
));

1692  
NGX_ERROR
;

1695 
pos
 = 1;Öo†<
¸
->
chunk_cou¡
; ++pos) {

1696 
¸
->
off£t
 +
	`ngx_πmp_r32
(
t
->
sizes
->
íåõs
[¸->
pos
 -Öos]);

1699 
¸
->
size_pos
 = cr->
pos
;

1700 
¸
->
size
 = 
	`ngx_πmp_r32
(
t
->
sizes
->
íåõs
[¸->
size_pos
]);

1702 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1704 
t
->
id
, 
¸
->
size_pos
,

1705 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
),

1706 
¸
->
size
);

1708  
NGX_OK
;

1711 i‡(
t
->
sizes2
) {

1712 i‡(
¸
->
size_pos
 >
	`ngx_πmp_r32
(
t
->
sizes2
->
ßm∂e_cou¡
)) {

1713 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1715 
t
->
id
, 
¸
->
size_pos
,

1716 
	`ngx_πmp_r32
(
t
->
sizes
->
ßm∂e_cou¡
));

1718  
NGX_ERROR
;

1721 
¸
->
size_pos
 = cr->
pos
;

1724  
NGX_OK
;

1727  
NGX_ERROR
;

1728 
	}
}

1731 
ngx_öt_t


1732 
	$ngx_πmp_mp4_√xt_key
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1734 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1735 
uöt32_t
 *
ke
;

1737 
¸
 = &
t
->
curs‹
;

1739 i‡(
t
->
keys
 =
NULL
) {

1740  
NGX_OK
;

1743 i‡(
¸
->
key
) {

1744 
¸
->
key_pos
++;

1747 i‡(
¸
->
key_pos
 >
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
)) {

1748 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1750 
t
->
id
, 
¸
->
key_pos
,

1751 
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
));

1753 
¸
->
key
 = 0;

1755  
NGX_OK
;

1758 
ke
 = &
t
->
keys
->
íåõs
[
¸
->
key_pos
];

1759 
¸
->
key
 = (¸->
pos
 + 1 =
	`ngx_πmp_r32
(*
ke
));

1761 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1763 
t
->
id
, 
¸
->
key_pos
,

1764 
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
),

1765 
¸
->
pos
, 
	`ngx_πmp_r32
(*
ke
),

1766 
¸
->
key
 ? "match" : "miss");

1768  
NGX_OK
;

1769 
	}
}

1772 
ngx_öt_t


1773 
	$ngx_πmp_mp4_£ek_key
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1775 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1776 
uöt32_t
 *
ke
;

1777 
ngx_öt_t
 
dpos
;

1779 
¸
 = &
t
->
curs‹
;

1781 i‡(
t
->
keys
 =
NULL
) {

1782  
NGX_OK
;

1785 
¸
->
key_pos
 < 
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
)) {

1786 i‡(
	`ngx_πmp_r32
(
t
->
keys
->
íåõs
[
¸
->
key_pos
]Ë> cr->
pos
) {

1790 
¸
->
key_pos
++;

1793 i‡(
¸
->
key_pos
 >
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
)) {

1794 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1796 
t
->
id
, 
¸
->
key_pos
,

1797 
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
));

1798  
NGX_OK
;

1801 
ke
 = &
t
->
keys
->
íåõs
[
¸
->
key_pos
];

1805 
dpos
 = 
	`ngx_πmp_r32
(*
ke
Ë- 
¸
->
pos
 - 1;

1806 
¸
->
key
 = 1;

1809 ; 
dpos
 > 0; --dpos) {

1810 
	`ngx_πmp_mp4_√xt_time
(
s
, 
t
);

1815 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1817 
t
->
id
, 
¸
->
key_pos
,

1818 
	`ngx_πmp_r32
(
t
->
keys
->
íåy_cou¡
),

1819 
¸
->
pos
, 
	`ngx_πmp_r32
(*
ke
),

1820 
¸
->
key
 ? "match" : "miss");

1822  
NGX_OK
;

1823 
	}
}

1826 
ngx_öt_t


1827 
	$ngx_πmp_mp4_√xt_dñay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1829 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1830 
ngx_πmp_mp4_dñay_íåy_t
 *
de
;

1832 
¸
 = &
t
->
curs‹
;

1834 i‡(
t
->
dñays
 =
NULL
) {

1835  
NGX_OK
;

1838 i‡(
¸
->
dñay_pos
 >
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
)) {

1839 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1841 
t
->
id
, 
¸
->
dñay_pos
,

1842 
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
));

1844  
NGX_OK
;

1847 
¸
->
dñay_cou¡
++;

1848 
de
 = &
t
->
dñays
->
íåõs
[
¸
->
dñay_pos
];

1850 i‡(
¸
->
dñay_cou¡
 >
	`ngx_πmp_r32
(
de
->
ßm∂e_cou¡
)) {

1851 
¸
->
dñay_pos
++;

1852 
de
++;

1853 
¸
->
dñay_cou¡
 = 0;

1856 i‡(
¸
->
dñay_pos
 >
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
)) {

1857 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1859 
t
->
id
, 
¸
->
dñay_pos
,

1860 
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
));

1862  
NGX_OK
;

1865 
¸
->
dñay
 = 
	`ngx_πmp_r32
(
de
->
ßm∂e_off£t
);

1867 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1869 
t
->
id
, 
¸
->
dñay_pos
,

1870 
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
),

1871 
¸
->
dñay_cou¡
,

1872 
	`ngx_πmp_r32
(
de
->
ßm∂e_cou¡
), 
¸
->
dñay
);

1874  
NGX_OK
;

1875 
	}
}

1878 
ngx_öt_t


1879 
	$ngx_πmp_mp4_£ek_dñay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1881 
ngx_πmp_mp4_curs‹_t
 *
¸
;

1882 
ngx_πmp_mp4_dñay_íåy_t
 *
de
;

1883 
uöt32_t
 
pos
, 
dpos
;

1885 
¸
 = &
t
->
curs‹
;

1887 i‡(
t
->
dñays
 =
NULL
) {

1888  
NGX_OK
;

1891 
pos
 = 0;

1892 
de
 = 
t
->
dñays
->
íåõs
;

1894 
¸
->
dñay_pos
 < 
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
)) {

1895 
dpos
 = 
	`ngx_πmp_r32
(
de
->
ßm∂e_cou¡
);

1897 i‡(
pos
 + 
dpos
 > 
¸
->pos) {

1898 
¸
->
dñay_cou¡
 = cr->
pos
 -Öos;

1899 
¸
->
dñay
 = 
	`ngx_πmp_r32
(
de
->
ßm∂e_off£t
);

1903 
¸
->
dñay_pos
++;

1904 
pos
 +
dpos
;

1905 
de
++;

1908 i‡(
¸
->
dñay_pos
 >
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
)) {

1909 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1911 
t
->
id
, 
¸
->
dñay_pos
,

1912 
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
));

1914  
NGX_OK
;

1917 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1919 
t
->
id
, 
¸
->
dñay_pos
,

1920 
	`ngx_πmp_r32
(
t
->
dñays
->
íåy_cou¡
),

1921 
¸
->
dñay_cou¡
,

1922 
	`ngx_πmp_r32
(
de
->
ßm∂e_cou¡
), 
¸
->
dñay
);

1924  
NGX_OK
;

1925 
	}
}

1928 
ngx_öt_t


1929 
	$ngx_πmp_mp4_√xt
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
)

1931 i‡(
	`ngx_πmp_mp4_√xt_time
(
s
, 
t
Ë!
NGX_OK
 ||

1932 
	`ngx_πmp_mp4_√xt_key
(
s
, 
t
Ë!
NGX_OK
 ||

1933 
	`ngx_πmp_mp4_√xt_chunk
(
s
, 
t
Ë!
NGX_OK
 ||

1934 
	`ngx_πmp_mp4_√xt_size
(
s
, 
t
Ë!
NGX_OK
 ||

1935 
	`ngx_πmp_mp4_√xt_dñay
(
s
, 
t
Ë!
NGX_OK
)

1937 
t
->
curs‹
.
vÆid
 = 0;

1938  
NGX_ERROR
;

1941 
t
->
curs‹
.
vÆid
 = 1;

1942  
NGX_OK
;

1943 
	}
}

1946 
ngx_öt_t


1947 
	$ngx_πmp_mp4_£nd_mëa
(
ngx_πmp_£ssi⁄_t
 *
s
)

1949 
ngx_πmp_mp4_˘x_t
 *
˘x
;

1950 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

1951 
ngx_öt_t
 
rc
;

1952 
ngx_uöt_t
 
n
;

1953 
ngx_πmp_hódî_t
 
h
;

1954 
ngx_chaö_t
 *
out
;

1955 
ngx_πmp_mp4_åack_t
 *
t
;

1956 
d
;

1959 
width
;

1960 
height
;

1961 
duøti⁄
;

1962 
video_codec_id
;

1963 
audio_codec_id
;

1964 
audio_ßm∂e_øã
;

1965 } 
v
;

1967 
ngx_πmp_amf_ñt_t
 
out_öf
[] = {

1969 { 
NGX_RTMP_AMF_NUMBER
,

1970 
	`ngx_°rög
("width"),

1971 &
v
.
width
, 0 },

1973 { 
NGX_RTMP_AMF_NUMBER
,

1974 
	`ngx_°rög
("height"),

1975 &
v
.
height
, 0 },

1977 { 
NGX_RTMP_AMF_NUMBER
,

1978 
	`ngx_°rög
("displayWidth"),

1979 &
v
.
width
, 0 },

1981 { 
NGX_RTMP_AMF_NUMBER
,

1982 
	`ngx_°rög
("displayHeight"),

1983 &
v
.
height
, 0 },

1985 { 
NGX_RTMP_AMF_NUMBER
,

1986 
	`ngx_°rög
("duration"),

1987 &
v
.
duøti⁄
, 0 },

1989 { 
NGX_RTMP_AMF_NUMBER
,

1990 
	`ngx_°rög
("videocodecid"),

1991 &
v
.
video_codec_id
, 0 },

1993 { 
NGX_RTMP_AMF_NUMBER
,

1994 
	`ngx_°rög
("audiocodecid"),

1995 &
v
.
audio_codec_id
, 0 },

1997 { 
NGX_RTMP_AMF_NUMBER
,

1998 
	`ngx_°rög
("audiosamplerate"),

1999 &
v
.
audio_ßm∂e_øã
, 0 },

2002 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

2004 { 
NGX_RTMP_AMF_STRING
,

2005 
ngx_nuŒ_°rög
,

2008 { 
NGX_RTMP_AMF_OBJECT
,

2009 
ngx_nuŒ_°rög
,

2010 
out_öf
, (out_inf) },

2013 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2014 i‡(
˘x
 =
NULL
) {

2015  
NGX_OK
;

2018 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

2020 
	`ngx_memzîo
(&
v
, (v));

2022 
v
.
width
 = 
˘x
->width;

2023 
v
.
height
 = 
˘x
->height;

2024 
v
.
audio_ßm∂e_øã
 = 
˘x
->
ßm∂e_øã
;

2026 
t
 = &
˘x
->
åacks
[0];

2027 
n
 = 0;Ç < 
˘x
->
¡øcks
; ++n, ++
t
) {

2028 
d
 = 
	`ngx_πmp_mp4_to_πmp_time°amp
(
t
,Å->
duøti⁄
) / 1000.;

2030 i‡(
v
.
duøti⁄
 < 
d
) {

2031 
v
.
duøti⁄
 = 
d
;

2034 
t
->
ty≥
) {

2035 
NGX_RTMP_MSG_AUDIO
:

2036 
v
.
audio_codec_id
 = 
t
->
codec
;

2038 
NGX_RTMP_MSG_VIDEO
:

2039 
v
.
video_codec_id
 = 
t
->
codec
;

2044 
out
 = 
NULL
;

2045 
rc
 = 
	`ngx_πmp_≠≥nd_amf
(
s
, &
out
, 
NULL
, 
out_ñts
,

2046 (
out_ñts
) / (out_elts[0]));

2047 i‡(
rc
 !
NGX_OK
 || 
out
 =
NULL
) {

2048  
NGX_ERROR
;

2051 
	`ngx_memzîo
(&
h
, (h));

2053 
h
.
csid
 = 
NGX_RTMP_CSID_AMF
;

2054 
h
.
msid
 = 
NGX_RTMP_MSID
;

2055 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_META
;

2057 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
h
, 
NULL
, 
out
);

2058 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
s
, 
out
, 0);

2059 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
out
);

2061  
rc
;

2062 
	}
}

2065 
ngx_öt_t


2066 
	$ngx_πmp_mp4_£ek_åack
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_mp4_åack_t
 *
t
,

2067 
ngx_öt_t
 
time°amp
)

2069 
ngx_πmp_mp4_curs‹_t
 *
¸
;

2071 
¸
 = &
t
->
curs‹
;

2072 
	`ngx_memzîo
(
¸
, (*cr));

2074 i‡(
	`ngx_πmp_mp4_£ek_time
(
s
, 
t
, 
	`ngx_πmp_mp4_‰om_πmp_time°amp
(

2075 
t
, 
time°amp
)Ë!
NGX_OK
 ||

2076 
	`ngx_πmp_mp4_£ek_key
(
s
, 
t
Ë!
NGX_OK
 ||

2077 
	`ngx_πmp_mp4_£ek_chunk
(
s
, 
t
Ë!
NGX_OK
 ||

2078 
	`ngx_πmp_mp4_£ek_size
(
s
, 
t
Ë!
NGX_OK
 ||

2079 
	`ngx_πmp_mp4_£ek_dñay
(
s
, 
t
Ë!
NGX_OK
)

2081  
NGX_ERROR
;

2084 
¸
->
vÆid
 = 1;

2085  
NGX_OK
;

2086 
	}
}

2089 
ngx_öt_t


2090 
	$ngx_πmp_mp4_£nd
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
, 
ngx_uöt_t
 *
ts
)

2092 
ngx_πmp_mp4_˘x_t
 *
˘x
;

2093 
ngx_buf_t
 
ö_buf
;

2094 
ngx_πmp_hódî_t
 
h
, 
lh
;

2095 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

2096 
ngx_chaö_t
 *
out
, 
ö
;

2097 
ngx_πmp_mp4_åack_t
 *
t
, *
cur_t
;

2098 
ngx_πmp_mp4_curs‹_t
 *
¸
, *
cur_¸
;

2099 
uöt32_t
 
buÊí
, 
íd_time°amp
,

2100 
time°amp
, 
œ°_time°amp
, 
rdñay
,

2101 
cur_time°amp
;

2102 
ssize_t
 
ªt
;

2103 
u_ch¨
 
fhdr
[5];

2104 
size_t
 
fhdr_size
;

2105 
ngx_öt_t
 
rc
;

2106 
ngx_uöt_t
 
n
, 
cou¡î
;

2108 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

2110 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2112 i‡(
˘x
 =
NULL
) {

2113  
NGX_ERROR
;

2116 i‡(!
˘x
->
mëa_£¡
) {

2117 
rc
 = 
	`ngx_πmp_mp4_£nd_mëa
(
s
);

2119 i‡(
rc
 =
NGX_OK
) {

2120 
˘x
->
mëa_£¡
 = 1;

2123  
rc
;

2126 
buÊí
 = 
s
->buÊí + 
NGX_RTMP_MP4_BUFLEN_ADDON
;

2128 
cou¡î
 = 0;

2129 
œ°_time°amp
 = 0;

2130 
íd_time°amp
 = 
˘x
->
°¨t_time°amp
 +

2131 (
ngx_cuºít_m£c
 - 
˘x
->
ïoch
Ë+ 
buÊí
;

2134 
cou¡î
++;

2135 i‡(
cou¡î
 > 
NGX_RTMP_MP4_MAX_FRAMES
) {

2136  
NGX_OK
;

2139 
time°amp
 = 0;

2140 
t
 = 
NULL
;

2142 
n
 = 0;Ç < 
˘x
->
¡øcks
;Ç++) {

2143 
cur_t
 = &
˘x
->
åacks
[
n
];

2144 
cur_¸
 = &
cur_t
->
curs‹
;

2146 i‡(!
cur_¸
->
vÆid
) {

2150 
cur_time°amp
 = 
	`ngx_πmp_mp4_to_πmp_time°amp
(
cur_t
,

2151 
cur_¸
->
time°amp
);

2153 i‡(
t
 =
NULL
 || 
cur_time°amp
 < 
time°amp
) {

2154 
time°amp
 = 
cur_time°amp
;

2155 
t
 = 
cur_t
;

2159 i‡(
t
 =
NULL
) {

2160 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2162  
NGX_DONE
;

2165 i‡(
time°amp
 > 
íd_time°amp
) {

2166 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2168 
t
->
id
, 
time°amp
, 
íd_time°amp
);

2170 i‡(
ts
) {

2171 *
ts
 = 
œ°_time°amp
;

2174  (
uöt32_t
Ë(
time°amp
 - 
íd_time°amp
);

2177 
¸
 = &
t
->
curs‹
;

2179 
œ°_time°amp
 = 
	`ngx_πmp_mp4_to_πmp_time°amp
(
t
, 
¸
->last_timestamp);

2181 
	`ngx_memzîo
(&
h
, (h));

2183 
h
.
msid
 = 
NGX_RTMP_MSID
;

2184 
h
.
ty≥
 = (
uöt8_t
Ë
t
->type;

2185 
h
.
csid
 = 
t
->csid;

2187 
lh
 = 
h
;

2189 
h
.
time°amp
 =Åimestamp;

2190 
lh
.
time°amp
 = 
œ°_time°amp
;

2192 
	`ngx_memzîo
(&
ö
, (in));

2193 
	`ngx_memzîo
(&
ö_buf
, (in_buf));

2195 i‡(
t
->
hódî
 && !t->
hódî_£¡
) {

2196 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2198 
t
->
id
,Å->
hódî_size
);

2200 
fhdr
[0] = 
t
->fhdr;

2201 
fhdr
[1] = 0;

2203 i‡(
t
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
) {

2204 
fhdr
[0] |= 0x10;

2205 
fhdr
[2] = fhdr[3] = fhdr[4] = 0;

2206 
fhdr_size
 = 5;

2208 
fhdr_size
 = 2;

2211 
ö
.
buf
 = &
ö_buf
;

2212 
ö_buf
.
pos
 = 
fhdr
;

2213 
ö_buf
.
œ°
 = 
fhdr
 + 
fhdr_size
;

2215 
out
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, &
ö
);

2217 
ö
.
buf
 = &
ö_buf
;

2218 
ö_buf
.
pos
 = 
t
->
hódî
;

2219 
ö_buf
.
œ°
 = 
t
->
hódî
 +Å->
hódî_size
;

2221 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
out
, &
ö
);

2223 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
h
, 
NULL
, 
out
);

2224 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
s
, 
out
, 0);

2225 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
out
);

2227 i‡(
rc
 =
NGX_AGAIN
) {

2228  
NGX_AGAIN
;

2231 
t
->
hódî_£¡
 = 1;

2234 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2237 
t
->
id
, 
¸
->
off£t
, cr->
size
, 
time°amp
,

2238 
œ°_time°amp
);

2240 
ngx_πmp_mp4_buf„r
[0] = 
t
->
fhdr
;

2241 
fhdr_size
 = 1;

2243 i‡(
t
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
) {

2244 i‡(
¸
->
key
) {

2245 
ngx_πmp_mp4_buf„r
[0] |= 0x10;

2246 } i‡(
¸
->
dñay
) {

2247 
ngx_πmp_mp4_buf„r
[0] |= 0x20;

2249 
ngx_πmp_mp4_buf„r
[0] |= 0x30;

2252 i‡(
t
->
hódî
) {

2253 
fhdr_size
 = 5;

2255 
rdñay
 = 
	`ngx_πmp_mp4_to_πmp_time°amp
(
t
, 
¸
->
dñay
);

2257 
ngx_πmp_mp4_buf„r
[1] = 1;

2258 
ngx_πmp_mp4_buf„r
[2] = (
rdñay
 >> 16) & 0xff;

2259 
ngx_πmp_mp4_buf„r
[3] = (
rdñay
 >> 8) & 0xff;

2260 
ngx_πmp_mp4_buf„r
[4] = 
rdñay
 & 0xff;

2264 i‡(
t
->
hódî
) {

2265 
fhdr_size
 = 2;

2266 
ngx_πmp_mp4_buf„r
[1] = 1;

2270 i‡(
¸
->
size
 + 
fhdr_size
 > (
ngx_πmp_mp4_buf„r
)) {

2271 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2273 
t
->
id
, 
¸
->
size
, (
ngx_πmp_mp4_buf„r
));

2274 
√xt
;

2277 
ªt
 = 
	`ngx_ªad_fûe
(
f
, 
ngx_πmp_mp4_buf„r
 + 
fhdr_size
,

2278 
¸
->
size
, cr->
off£t
);

2280 i‡(
ªt
 !(
ssize_t
Ë
¸
->
size
) {

2281 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2282 "mp4:Åøck#%uòcouldÇŸÑód føme", 
t
->
id
);

2283 
√xt
;

2286 
ö
.
buf
 = &
ö_buf
;

2287 
ö_buf
.
pos
 = 
ngx_πmp_mp4_buf„r
;

2288 
ö_buf
.
œ°
 = 
ngx_πmp_mp4_buf„r
 + 
¸
->
size
 + 
fhdr_size
;

2290 
out
 = 
	`ngx_πmp_≠≥nd_sh¨ed_bufs
(
cscf
, 
NULL
, &
ö
);

2292 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
h
, 
¸
->
nŸ_fú°
 ? &
lh
 : 
NULL
, 
out
);

2293 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
s
, 
out
, 0);

2294 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
out
);

2296 i‡(
rc
 =
NGX_AGAIN
) {

2297  
NGX_AGAIN
;

2300 
s
->
cuºít_time
 = 
time°amp
;

2302 
√xt
:

2303 i‡(
	`ngx_πmp_mp4_√xt
(
s
, 
t
Ë!
NGX_OK
) {

2304  
NGX_DONE
;

2307 
	}
}

2310 
ngx_öt_t


2311 
	$ngx_πmp_mp4_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
, 
ngx_öt_t
 
aödex
,

2312 
ngx_öt_t
 
vödex
)

2314 
ngx_πmp_mp4_˘x_t
 *
˘x
;

2315 
uöt32_t
 
hdr
[2];

2316 
ssize_t
 
n
;

2317 
size_t
 
off£t
, 
∑ge_off£t
, 
size
, 
shi·
;

2318 
uöt64_t
 
exãnded_size
;

2319 
ngx_fûe_öfo_t
 
fi
;

2321 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2323 i‡(
˘x
 =
NULL
) {

2324 
˘x
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_mp4_˘x_t
));

2326 i‡(
˘x
 =
NULL
) {

2327  
NGX_ERROR
;

2330 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_mp4_moduÀ
);

2333 
	`ngx_memzîo
(
˘x
, (*ctx));

2335 
˘x
->
aödex
 =áindex;

2336 
˘x
->
vödex
 = vindex;

2338 
off£t
 = 0;

2339 
size
 = 0;

2342 
n
 = 
	`ngx_ªad_fûe
(
f
, (
u_ch¨
 *Ë&
hdr
, (hdr), 
off£t
);

2344 i‡(
n
 !(
hdr
)) {

2345 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

2347 "whûê£¨chög f‹ moov box", 
off£t
);

2348  
NGX_ERROR
;

2351 
size
 = (
size_t
Ë
	`ngx_πmp_r32
(
hdr
[0]);

2352 
shi·
 = (
hdr
);

2354 i‡(
size
 == 1) {

2355 
n
 = 
	`ngx_ªad_fûe
(
f
, (
u_ch¨
 *Ë&
exãnded_size
,

2356 (
exãnded_size
), 
off£t
 + (
hdr
));

2358 i‡(
n
 !(
exãnded_size
)) {

2359 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

2361 "whûê£¨chög f‹ moov box", 
off£t
 + 8);

2362  
NGX_ERROR
;

2365 
size
 = (
size_t
Ë
	`ngx_πmp_r64
(
exãnded_size
);

2366 
shi·
 +(
exãnded_size
);

2368 } i‡(
size
 == 0) {

2369 i‡(
	`ngx_fd_öfo
(
f
->
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

2370 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

2371 "mp4: " 
ngx_fd_öfo_n
 " failed");

2372  
NGX_ERROR
;

2374 
size
 = 
	`ngx_fûe_size
(&
fi
Ë- 
off£t
;

2377 i‡(
hdr
[1] =
	`ngx_πmp_mp4_make_èg
('m','o','o','v')) {

2378 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2383 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2384 "mp4: skùpög box '%*s'", 4, 
hdr
 + 1);

2386 
off£t
 +
size
;

2389 i‡(
size
 < 
shi·
) {

2390  
NGX_ERROR
;

2393 
size
 -
shi·
;

2394 
off£t
 +
shi·
;

2396 
∑ge_off£t
 = 
off£t
 & (
ngx_∑gesize
 - 1);

2397 
˘x
->
mm≠ed_size
 = 
∑ge_off£t
 + 
size
;

2399 
˘x
->
mm≠ed
 = 
	`ngx_πmp_mp4_mm≠
(
f
->
fd
, ctx->
mm≠ed_size
,

2400 
off£t
 - 
∑ge_off£t
, &
˘x
->
exåa
);

2401 i‡(
˘x
->
mm≠ed
 =
NULL
) {

2402 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

2404 
off£t
, 
size
);

2405  
NGX_ERROR
;

2408  
	`ngx_πmp_mp4_∑r£
(
s
, (
u_ch¨
 *Ë
˘x
->
mm≠ed
 + 
∑ge_off£t
,

2409 (
u_ch¨
 *Ë
˘x
->
mm≠ed
 + 
∑ge_off£t
 + 
size
);

2410 
	}
}

2413 
ngx_öt_t


2414 
	$ngx_πmp_mp4_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
)

2416 
ngx_πmp_mp4_˘x_t
 *
˘x
;

2418 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2420 i‡(
˘x
 =
NULL
 || ctx->
mm≠ed
 == NULL) {

2421  
NGX_OK
;

2424 i‡(
	`ngx_πmp_mp4_munm≠
(
˘x
->
mm≠ed
, ctx->
mm≠ed_size
, &˘x->
exåa
)

2425 !
NGX_OK
)

2427 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

2429  
NGX_ERROR
;

2432 
˘x
->
mm≠ed
 = 
NULL
;

2433 
˘x
->
mm≠ed_size
 = 0;

2435  
NGX_OK
;

2436 
	}
}

2439 
ngx_öt_t


2440 
	$ngx_πmp_mp4_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
, 
ngx_uöt_t
 
time°amp
)

2442 
ngx_πmp_mp4_˘x_t
 *
˘x
;

2443 
ngx_πmp_mp4_åack_t
 *
t
;

2444 
ngx_uöt_t
 
n
;

2446 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2448 i‡(
˘x
 =
NULL
) {

2449  
NGX_OK
;

2452 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2453 "mp4: sìkÅime°amp=%ui", 
time°amp
);

2455 
n
 = 0;Ç < 
˘x
->
¡øcks
; ++n) {

2456 
t
 = &
˘x
->
åacks
[
n
];

2458 i‡(
t
->
ty≥
 !
NGX_RTMP_MSG_VIDEO
) {

2462 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2463 "mp4:Åøck#%uò£ek video", 
n
);

2465 
	`ngx_πmp_mp4_£ek_åack
(
s
, 
t
, 
time°amp
);

2467 
time°amp
 = 
	`ngx_πmp_mp4_to_πmp_time°amp
(
t
,Å->
curs‹
.timestamp);

2472 
n
 = 0;Ç < 
˘x
->
¡øcks
; ++n) {

2473 
t
 = &
˘x
->
åacks
[
n
];

2475 i‡(
t
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
) {

2479 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2480 "mp4:Åøck#%uò£ek", 
n
);

2482 
	`ngx_πmp_mp4_£ek_åack
(
s
, &
˘x
->
åacks
[
n
], 
time°amp
);

2485 
˘x
->
°¨t_time°amp
 = 
time°amp
;

2486 
˘x
->
ïoch
 = 
ngx_cuºít_m£c
;

2488  
	`ngx_πmp_mp4_ª£t
(
s
);

2489 
	}
}

2492 
ngx_öt_t


2493 
	$ngx_πmp_mp4_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
)

2495 
ngx_πmp_mp4_˘x_t
 *
˘x
;

2497 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2499 i‡(
˘x
 =
NULL
) {

2500  
NGX_OK
;

2503 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2504 "mp4: sèπÅime°amp=%uD", 
˘x
->
°¨t_time°amp
);

2506 
˘x
->
ïoch
 = 
ngx_cuºít_m£c
;

2508  
NGX_OK
;

2509 
	}
}

2512 
ngx_öt_t


2513 
	$ngx_πmp_mp4_ª£t
(
ngx_πmp_£ssi⁄_t
 *
s
)

2515 
ngx_πmp_mp4_˘x_t
 *
˘x
;

2516 
ngx_πmp_mp4_curs‹_t
 *
¸
;

2517 
ngx_πmp_mp4_åack_t
 *
t
;

2518 
ngx_uöt_t
 
n
;

2520 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2522 i‡(
˘x
 =
NULL
) {

2523  
NGX_OK
;

2526 
t
 = &
˘x
->
åacks
[0];

2527 
n
 = 0;Ç < 
˘x
->
¡øcks
; ++n, ++
t
) {

2528 
¸
 = &
t
->
curs‹
;

2529 
¸
->
nŸ_fú°
 = 0;

2532  
NGX_OK
;

2533 
	}
}

2536 
ngx_öt_t


2537 
	$ngx_πmp_mp4_°›
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_fûe_t
 *
f
)

2539 
ngx_πmp_mp4_˘x_t
 *
˘x
;

2541 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_mp4_moduÀ
);

2543 i‡(
˘x
 =
NULL
) {

2544  
NGX_OK
;

2547 
˘x
->
°¨t_time°amp
 +(
ngx_cuºít_m£c
 - ctx->
ïoch
);

2549 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

2550 "mp4: st›Åime°amp=%uD", 
˘x
->
°¨t_time°amp
);

2552  
NGX_OK
;

2553 
	}
}

2556 
ngx_öt_t


2557 
	$ngx_πmp_mp4_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2559 
ngx_πmp_∂ay_maö_c⁄f_t
 *
pmcf
;

2560 
ngx_πmp_∂ay_fmt_t
 **
pfmt
, *
fmt
;

2562 
pmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_∂ay_moduÀ
);

2564 
pfmt
 = 
	`ngx_¨øy_push
(&
pmcf
->
fmts
);

2566 i‡(
pfmt
 =
NULL
) {

2567  
NGX_ERROR
;

2570 
fmt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_∂ay_fmt_t
));

2572 i‡(
fmt
 =
NULL
) {

2573  
NGX_ERROR
;

2576 *
pfmt
 = 
fmt
;

2578 
	`ngx_°r_£t
(&
fmt
->
«me
, "mp4-format");

2580 
	`ngx_°r_£t
(&
fmt
->
pfx
, "mp4:");

2581 
	`ngx_°r_£t
(&
fmt
->
sfx
, ".mp4");

2583 
fmt
->
öô
 = 
ngx_πmp_mp4_öô
;

2584 
fmt
->
d⁄e
 = 
ngx_πmp_mp4_d⁄e
;

2585 
fmt
->
£ek
 = 
ngx_πmp_mp4_£ek
;

2586 
fmt
->
°¨t
 = 
ngx_πmp_mp4_°¨t
;

2587 
fmt
->
°›
 = 
ngx_πmp_mp4_°›
;

2588 
fmt
->
£nd
 = 
ngx_πmp_mp4_£nd
;

2590  
NGX_OK
;

2591 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_netcall_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_√tˇŒ_moduÀ.h
"

12 
ngx_öt_t
 
ngx_πmp_√tˇŒ_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

13 * 
ngx_πmp_√tˇŒ_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

14 * 
ngx_πmp_√tˇŒ_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

15 *
∑ª¡
, *
chûd
);

17 
ngx_πmp_√tˇŒ_˛o£
(
ngx_c⁄√˘i⁄_t
 *
cc
);

18 
ngx_πmp_√tˇŒ_dëach
(
ngx_c⁄√˘i⁄_t
 *
cc
);

20 
ngx_πmp_√tˇŒ_ªcv
(
ngx_evít_t
 *
ªv
);

21 
ngx_πmp_√tˇŒ_£nd
(
ngx_evít_t
 *
wev
);

25 
ngx_m£c_t
 
	mtimeout
;

26 
size_t
 
	mbufsize
;

27 
ngx_log_t
 *
	mlog
;

28 } 
	tngx_πmp_√tˇŒ_§v_c⁄f_t
;

31 
	sngx_πmp_√tˇŒ_£ssi⁄_s
 {

32 
ngx_πmp_£ssi⁄_t
 *
	m£ssi⁄
;

33 
ngx_≥î_c⁄√˘i⁄_t
 *
	mpc
;

34 
ngx_uæ_t
 *
	muæ
;

35 
ngx_πmp_√tˇŒ_£ssi⁄_s
 *
	m√xt
;

36 *
	m¨g
;

37 
ngx_πmp_√tˇŒ_h™dÀ_±
 
	mh™dÀ
;

38 
ngx_πmp_√tˇŒ_fûãr_±
 
	mfûãr
;

39 
ngx_πmp_√tˇŒ_sök_±
 
	msök
;

40 
ngx_chaö_t
 *
	mö
;

41 
ngx_chaö_t
 *
	möœ°
;

42 
ngx_chaö_t
 *
	mout
;

43 
ngx_m£c_t
 
	mtimeout
;

44 
	mdëached
:1;

45 
size_t
 
	mbufsize
;

46 } 
	tngx_πmp_√tˇŒ_£ssi⁄_t
;

50 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
	mcs
;

51 } 
	tngx_πmp_√tˇŒ_˘x_t
;

54 
ngx_comm™d_t
 
	gngx_πmp_√tˇŒ_comm™ds
[] = {

56 { 
ngx_°rög
("netcall_timeout"),

57 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
NGX_RTMP_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_πmp_√tˇŒ_§v_c⁄f_t
, 
timeout
),

61 
NULL
 },

63 { 
ngx_°rög
("netcall_buffer"),

64 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_size_¶Ÿ
,

66 
NGX_RTMP_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_πmp_√tˇŒ_§v_c⁄f_t
, 
bufsize
),

68 
NULL
 },

70 
ngx_nuŒ_comm™d


74 
ngx_πmp_moduÀ_t
 
	gngx_πmp_√tˇŒ_moduÀ_˘x
 = {

75 
NULL
,

76 
ngx_πmp_√tˇŒ_po°c⁄figuøti⁄
,

77 
NULL
,

78 
NULL
,

79 
ngx_πmp_√tˇŒ_¸óã_§v_c⁄f
,

80 
ngx_πmp_√tˇŒ_mîge_§v_c⁄f
,

81 
NULL
,

82 
NULL


86 
ngx_moduÀ_t
 
	gngx_πmp_√tˇŒ_moduÀ
 = {

87 
NGX_MODULE_V1
,

88 &
ngx_πmp_√tˇŒ_moduÀ_˘x
,

89 
ngx_πmp_√tˇŒ_comm™ds
,

90 
NGX_RTMP_MODULE
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
NULL
,

95 
NULL
,

96 
NULL
,

97 
NULL
,

98 
NGX_MODULE_V1_PADDING


103 
	$ngx_πmp_√tˇŒ_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

105 
ngx_πmp_√tˇŒ_§v_c⁄f_t
 *
nscf
;

107 
nscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_√tˇŒ_§v_c⁄f_t
));

108 i‡(
nscf
 =
NULL
) {

109  
NULL
;

112 
nscf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

113 
nscf
->
bufsize
 = 
NGX_CONF_UNSET_SIZE
;

115 
nscf
->
log
 = &
cf
->
cy˛e
->
√w_log
;

117  
nscf
;

118 
	}
}

122 
	$ngx_πmp_√tˇŒ_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

124 
ngx_πmp_√tˇŒ_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

125 
ngx_πmp_√tˇŒ_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

127 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 10000);

128 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
bufsize
, 
¥ev
->bufsize, 1024);

130  
NGX_CONF_OK
;

131 
	}
}

134 
ngx_öt_t


135 
	$ngx_πmp_√tˇŒ_disc⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

136 
ngx_chaö_t
 *
ö
)

138 
ngx_πmp_√tˇŒ_˘x_t
 *
˘x
;

139 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
cs
;

141 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_√tˇŒ_moduÀ
);

143 i‡(
˘x
) {

144 
cs
 = 
˘x
->cs; cs; c†cs->
√xt
) {

145 
	`ngx_πmp_√tˇŒ_dëach
(
cs
->
pc
->
c⁄√˘i⁄
);

149  
NGX_OK
;

150 
	}
}

153 
ngx_öt_t


154 
	$ngx_πmp_√tˇŒ_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

156 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
cs
 = 
d©a
;

158 
pc
->
sockaddr
 =(sockadd∏*)&
cs
->
uæ
->sockaddr;

159 
pc
->
sockÀn
 = 
cs
->
uæ
->socklen;

160 
pc
->
«me
 = &
cs
->
uæ
->
ho°
;

162  
NGX_OK
;

163 
	}
}

167 
	$ngx_πmp_√tˇŒ_‰ì_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

168 
ngx_uöt_t
 
°©e
)

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_πmp_√tˇŒ_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_√tˇŒ_öô_t
 *
ci
)

176 
ngx_πmp_√tˇŒ_˘x_t
 *
˘x
;

177 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
;

178 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
cs
;

179 
ngx_πmp_√tˇŒ_§v_c⁄f_t
 *
nscf
;

180 
ngx_c⁄√˘i⁄_t
 *
c
, *
cc
;

181 
ngx_poﬁ_t
 *
poﬁ
;

182 
ngx_öt_t
 
rc
;

184 
poﬁ
 = 
NULL
;

185 
c
 = 
s
->
c⁄√˘i⁄
;

187 
nscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_√tˇŒ_moduÀ
);

188 i‡(
nscf
 =
NULL
) {

189 
îr‹
;

193 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_√tˇŒ_moduÀ
);

194 i‡(
˘x
 =
NULL
) {

195 
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
,

196 (
ngx_πmp_√tˇŒ_˘x_t
));

197 i‡(
˘x
 =
NULL
) {

198  
NGX_ERROR
;

200 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_√tˇŒ_moduÀ
);

207 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(4096, 
nscf
->
log
);

208 i‡(
poﬁ
 =
NULL
) {

209 
îr‹
;

212 
pc
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_≥î_c⁄√˘i⁄_t
));

213 i‡(
pc
 =
NULL
) {

214 
îr‹
;

217 
cs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_πmp_√tˇŒ_£ssi⁄_t
));

218 i‡(
cs
 =
NULL
) {

219 
îr‹
;

223 i‡(
ci
->
¨gsize
) {

224 
cs
->
¨g
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
ci
->
¨gsize
);

225 i‡(
cs
->
¨g
 =
NULL
) {

226 
îr‹
;

228 
	`ngx_mem˝y
(
cs
->
¨g
, 
ci
->¨g, ci->
¨gsize
);

231 
cs
->
timeout
 = 
nscf
->timeout;

232 
cs
->
bufsize
 = 
nscf
->bufsize;

233 
cs
->
uæ
 = 
ci
->url;

234 
cs
->
£ssi⁄
 = 
s
;

235 
cs
->
fûãr
 = 
ci
->filter;

236 
cs
->
sök
 = 
ci
->sink;

237 
cs
->
h™dÀ
 = 
ci
->handle;

238 i‡(
cs
->
h™dÀ
 =
NULL
) {

239 
cs
->
dëached
 = 1;

242 
pc
->
log
 = 
nscf
->log;

243 
pc
->
gë
 = 
ngx_πmp_√tˇŒ_gë_≥î
;

244 
pc
->
‰ì
 = 
ngx_πmp_√tˇŒ_‰ì_≥î
;

245 
pc
->
d©a
 = 
cs
;

248 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(
pc
);

249 i‡(
rc
 !
NGX_OK
 &&Ñ¯!
NGX_AGAIN
 ) {

250 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

252 
îr‹
;

255 
cc
 = 
pc
->
c⁄√˘i⁄
;

256 
cc
->
d©a
 = 
cs
;

257 
cc
->
poﬁ
 =Öool;

258 
cs
->
pc
 =Öc;

260 
cs
->
out
 = 
ci
->
	`¸óã
(
s
, ci->
¨g
, 
poﬁ
);

261 i‡(
cs
->
out
 =
NULL
) {

262 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

264 
	`ngx_˛o£_c⁄√˘i⁄
(
pc
->
c⁄√˘i⁄
);

265 
îr‹
;

268 
cc
->
wrôe
->
h™dÀr
 = 
ngx_πmp_√tˇŒ_£nd
;

269 
cc
->
ªad
->
h™dÀr
 = 
ngx_πmp_√tˇŒ_ªcv
;

271 i‡(!
cs
->
dëached
) {

272 
cs
->
√xt
 = 
˘x
->cs;

273 
˘x
->
cs
 = cs;

276 
	`ngx_πmp_√tˇŒ_£nd
(
cc
->
wrôe
);

278  
c
->
de°royed
 ? 
NGX_ERROR
 : 
NGX_OK
;

280 
îr‹
:

281 i‡(
poﬁ
) {

282 
	`ngx_de°roy_poﬁ
(
poﬁ
);

285  
NGX_ERROR
;

286 
	}
}

290 
	$ngx_πmp_√tˇŒ_˛o£
(
ngx_c⁄√˘i⁄_t
 *
cc
)

292 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
cs
, **
css
;

293 
ngx_poﬁ_t
 *
poﬁ
;

294 
ngx_πmp_£ssi⁄_t
 *
s
;

295 
ngx_πmp_√tˇŒ_˘x_t
 *
˘x
;

296 
ngx_buf_t
 *
b
;

298 
cs
 = 
cc
->
d©a
;

300 i‡(
cc
->
de°royed
) {

304 
cc
->
de°royed
 = 1;

306 i‡(!
cs
->
dëached
) {

307 
s
 = 
cs
->
£ssi⁄
;

308 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_√tˇŒ_moduÀ
);

310 i‡(
cs
->
ö
 && cs->
sök
) {

311 
cs
->
	`sök
(cs->
£ssi⁄
, cs->
ö
);

313 
b
 = 
cs
->
ö
->
buf
;

314 
b
->
pos
 = b->
œ°
 = b->
°¨t
;

318 
css
 = &
˘x
->
cs
; *css; cs†&((*css)->
√xt
)) {

319 i‡(*
css
 =
cs
) {

320 *
css
 = 
cs
->
√xt
;

325 i‡(
cs
->
h™dÀ
 && cs->
	`h™dÀ
(
s
, cs->
¨g
, cs->
ö
Ë!
NGX_OK
) {

326 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

330 
poﬁ
 = 
cc
->pool;

331 
	`ngx_˛o£_c⁄√˘i⁄
(
cc
);

332 
	`ngx_de°roy_poﬁ
(
poﬁ
);

333 
	}
}

337 
	$ngx_πmp_√tˇŒ_dëach
(
ngx_c⁄√˘i⁄_t
 *
cc
)

339 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
cs
;

341 
cs
 = 
cc
->
d©a
;

342 
cs
->
dëached
 = 1;

343 
	}
}

347 
	$ngx_πmp_√tˇŒ_ªcv
(
ngx_evít_t
 *
ªv
)

349 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
cs
;

350 
ngx_c⁄√˘i⁄_t
 *
cc
;

351 
ngx_chaö_t
 *
˛
;

352 
ngx_öt_t
 
n
;

353 
ngx_buf_t
 *
b
;

355 
cc
 = 
ªv
->
d©a
;

356 
cs
 = 
cc
->
d©a
;

358 i‡(
cc
->
de°royed
) {

362 i‡(
ªv
->
timedout
) {

363 
cc
->
timedout
 = 1;

364 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

368 i‡(
ªv
->
timî_£t
) {

369 
	`ngx_dñ_timî
(
ªv
);

374 i‡(
cs
->
öœ°
 =
NULL
 ||

375 
cs
->
öœ°
->
buf
->
œ°
 =cs->öœ°->buf->
íd
)

377 i‡(
cs
->
ö
 && cs->
sök
) {

378 i‡(!
cs
->
dëached
) {

379 i‡(
cs
->
	`sök
(cs->
£ssi⁄
, cs->
ö
Ë!
NGX_OK
) {

380 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

385 
b
 = 
cs
->
ö
->
buf
;

386 
b
->
pos
 = b->
œ°
 = b->
°¨t
;

389 
˛
 = 
	`ngx_Æloc_chaö_lök
(
cc
->
poﬁ
);

390 i‡(
˛
 =
NULL
) {

391 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

395 
˛
->
√xt
 = 
NULL
;

397 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
cc
->
poﬁ
, 
cs
->
bufsize
);

398 i‡(
˛
->
buf
 =
NULL
) {

399 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

403 i‡(
cs
->
ö
 =
NULL
) {

404 
cs
->
ö
 = 
˛
;

406 
cs
->
öœ°
->
√xt
 = 
˛
;

409 
cs
->
öœ°
 = 
˛
;

413 
b
 = 
cs
->
öœ°
->
buf
;

415 
n
 = 
cc
->
	`ªcv
(cc, 
b
->
œ°
, b->
íd
 - b->last);

417 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

418 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

422 i‡(
n
 =
NGX_AGAIN
) {

423 i‡(
cs
->
fûãr
 && cs->
ö


424 && 
cs
->
	`fûãr
(cs->
ö
Ë!
NGX_AGAIN
)

426 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

430 
	`ngx_add_timî
(
ªv
, 
cs
->
timeout
);

431 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

432 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

437 
b
->
œ°
 +
n
;

439 
	}
}

443 
	$ngx_πmp_√tˇŒ_£nd
(
ngx_evít_t
 *
wev
)

445 
ngx_πmp_√tˇŒ_£ssi⁄_t
 *
cs
;

446 
ngx_c⁄√˘i⁄_t
 *
cc
;

447 
ngx_chaö_t
 *
˛
;

449 
cc
 = 
wev
->
d©a
;

450 
cs
 = 
cc
->
d©a
;

452 i‡(
cc
->
de°royed
) {

456 i‡(
wev
->
timedout
) {

457 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
cc
->
log
, 
NGX_ETIMEDOUT
,

459 
cc
->
timedout
 = 1;

460 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

464 i‡(
wev
->
timî_£t
) {

465 
	`ngx_dñ_timî
(
wev
);

468 
˛
 = 
cc
->
	`£nd_chaö
(cc, 
cs
->
out
, 0);

470 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

471 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

475 
cs
->
out
 = 
˛
;

478 i‡(
˛
) {

479 
	`ngx_add_timî
(
wev
, 
cs
->
timeout
);

480 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

481 
	`ngx_πmp_√tˇŒ_˛o£
(
cc
);

488 
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0);

490 
	`ngx_πmp_√tˇŒ_ªcv
(
cc
->
ªad
);

491 
	}
}

494 
ngx_chaö_t
 *

495 
	$ngx_πmp_√tˇŒ_hâp_f‹m©_ªque°
(
ngx_öt_t
 
mëhod
, 
ngx_°r_t
 *
ho°
,

496 
ngx_°r_t
 *
uri
, 
ngx_chaö_t
 *
¨gs
,

497 
ngx_chaö_t
 *
body
, 
ngx_poﬁ_t
 *
poﬁ
,

498 
ngx_°r_t
 *
c⁄ã¡_ty≥
)

500 
ngx_chaö_t
 *
Æ
, *
bl
, *
ªt
;

501 
ngx_buf_t
 *
b
;

502 
size_t
 
c⁄ã¡_Àngth
;

503 c⁄° *
mëhods
[2] = { "GET", "POST" };

504 c⁄° 
rq_tm∂
[] = " HTTP/1.0\r\n"

511 
c⁄ã¡_Àngth
 = 0;

512 
Æ
 = 
body
;ál;á»Æ->
√xt
) {

513 
b
 = 
Æ
->
buf
;

514 
c⁄ã¡_Àngth
 +(
b
->
œ°
 - b->
pos
);

519 
Æ
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

520 i‡(
Æ
 =
NULL
) {

521  
NULL
;

524 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, ("POST") +

525 
uri
->
Àn
);

526 i‡(
b
 =
NULL
) {

527  
NULL
;

530 
b
->
œ°
 = 
	`ngx_¢¥ötf
(b->œ°, b->
íd
 - b->last, "%s %V",

531 
mëhods
[
mëhod
], 
uri
);

533 
Æ
->
buf
 = 
b
;

535 
ªt
 = 
Æ
;

537 i‡(
¨gs
) {

538 *
b
->
œ°
++ = '?';

539 
Æ
->
√xt
 = 
¨gs
;

540 
Æ
 = 
¨gs
;ál->
√xt
;ál =ál->next);

545 
bl
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

546 i‡(
bl
 =
NULL
) {

547  
NULL
;

550 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, (
rq_tm∂
Ë+ 
ho°
->
Àn
 +

551 
c⁄ã¡_ty≥
->
Àn
 + 
NGX_SIZE_T_LEN
);

552 i‡(
b
 =
NULL
) {

553  
NULL
;

556 
bl
->
buf
 = 
b
;

558 
b
->
œ°
 = 
	`ngx_¢¥ötf
(b->œ°, b->
íd
 - b->œ°, 
rq_tm∂
,

559 
ho°
, 
c⁄ã¡_ty≥
, 
c⁄ã¡_Àngth
);

561 
Æ
->
√xt
 = 
bl
;

562 
bl
->
√xt
 = 
body
;

564  
ªt
;

565 
	}
}

568 
ngx_chaö_t
 *

569 
	$ngx_πmp_√tˇŒ_hâp_f‹m©_£ssi⁄
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
)

571 
ngx_chaö_t
 *
˛
;

572 
ngx_buf_t
 *
b
;

573 
ngx_°r_t
 *
addr_ãxt
;

575 
addr_ãxt
 = &
s
->
c⁄√˘i⁄
->addr_text;

577 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

578 i‡(
˛
 =
NULL
) {

579  
NULL
;

582 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

583 ("≠p="Ë- 1 + 
s
->
≠p
.
Àn
 * 3 +

584 ("&Êashvî="Ë- 1 + 
s
->
Êashvî
.
Àn
 * 3 +

585 ("&swfuæ="Ë- 1 + 
s
->
swf_uæ
.
Àn
 * 3 +

586 ("&tcuæ="Ë- 1 + 
s
->
tc_uæ
.
Àn
 * 3 +

587 ("&∑geuæ="Ë- 1 + 
s
->
∑ge_uæ
.
Àn
 * 3 +

588 ("&addr="Ë- 1 + 
addr_ãxt
->
Àn
 * 3 +

589 ("&˛õ¡id="Ë- 1 + 
NGX_INT_T_LEN


592 i‡(
b
 =
NULL
) {

593  
NULL
;

596 
˛
->
buf
 = 
b
;

597 
˛
->
√xt
 = 
NULL
;

599 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "app=", ("app=") - 1);

600 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
s
->
≠p
.
d©a
, s->≠p.
Àn
,

601 
NGX_ESCAPE_ARGS
);

603 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&flashver=",

605 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
s
->
Êashvî
.
d©a
,

606 
s
->
Êashvî
.
Àn
, 
NGX_ESCAPE_ARGS
);

608 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&swfurl=",

610 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
s
->
swf_uæ
.
d©a
,

611 
s
->
swf_uæ
.
Àn
, 
NGX_ESCAPE_ARGS
);

613 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&tcurl=",

615 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
s
->
tc_uæ
.
d©a
,

616 
s
->
tc_uæ
.
Àn
, 
NGX_ESCAPE_ARGS
);

618 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&pageurl=",

620 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
s
->
∑ge_uæ
.
d©a
,

621 
s
->
∑ge_uæ
.
Àn
, 
NGX_ESCAPE_ARGS
);

623 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&addr=", ("&addr=") - 1);

624 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
addr_ãxt
->
d©a
,

625 
addr_ãxt
->
Àn
, 
NGX_ESCAPE_ARGS
);

627 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&clientid=",

629 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%ui", (
ngx_uöt_t
Ë
s
->
c⁄√˘i⁄
->
numbî
);

631  
˛
;

632 
	}
}

635 
ngx_chaö_t
 *

636 
	$ngx_πmp_√tˇŒ_hâp_skù_hódî
(
ngx_chaö_t
 *
ö
)

638 
ngx_buf_t
 *
b
;

642 
n‹mÆ
,

643 
lf
,

644 
lf¸


645 } 
°©e
 = 
n‹mÆ
;

647 i‡(
ö
 =
NULL
) {

648  
NULL
;

651 
b
 = 
ö
->
buf
;

655 
b
->
pos
 =b->
œ°
) {

656 
ö
 = in->
√xt
;

657 i‡(
ö
 =
NULL
) {

658  
NULL
;

660 
b
 = 
ö
->
buf
;

663 *
b
->
pos
++) {

665 
°©e
 = (°©ê=
lf
Ë? 
lf¸
 : 
n‹mÆ
;

669 i‡(
°©e
 !
n‹mÆ
) {

670  
ö
;

672 
°©e
 = 
lf
;

676 
°©e
 = 
n‹mÆ
;

679 
	}
}

682 
ngx_chaö_t
 *

683 
	$ngx_πmp_√tˇŒ_memˇche_£t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

684 
ngx_°r_t
 *
key
,Çgx_°r_à*
vÆue
, 
ngx_uöt_t
 
Êags
,Çgx_uöt_à
£c
)

686 
ngx_chaö_t
 *
˛
;

687 
ngx_buf_t
 *
b
;

689 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

690 i‡(
˛
 =
NULL
) {

691  
NULL
;

694 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, ("£à"Ë- 1 + 
key
->
Àn
 +

695 (1 + 
NGX_INT_T_LEN
) * 3 +

696 (("\r\n"Ë- 1Ë* 2 + 
vÆue
->
Àn
);

698 i‡(
b
 =
NULL
) {

699  
NULL
;

702 
˛
->
√xt
 = 
NULL
;

703 
˛
->
buf
 = 
b
;

705 
b
->
œ°
 = 
	`ngx_•rötf
(b->
pos
, "set %V %ui %ui %ui\r\n%V\r\n",

706 
key
, 
Êags
, 
£c
, (
ngx_uöt_t
Ë
vÆue
->
Àn
, value);

708  
˛
;

709 
	}
}

712 
ngx_öt_t


713 
	$ngx_πmp_√tˇŒ_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

715 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

716 
ngx_πmp_h™dÀr_±
 *
h
;

718 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

720 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_DISCONNECT
]);

721 *
h
 = 
ngx_πmp_√tˇŒ_disc⁄√˘
;

723  
NGX_OK
;

724 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_netcall_module.h

7 #i‚de‡
_NGX_RTMP_NETCALL_H_INCLUDED_


8 
	#_NGX_RTMP_NETCALL_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~"ngx_πmp.h
"

16 
	gngx_chaö_t
 * (*
	tngx_πmp_√tˇŒ_¸óã_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

17 *
	t¨g
, 
	tngx_poﬁ_t
 *
	tpoﬁ
);

18 
	$ngx_öt_t
 (*
	tngx_πmp_√tˇŒ_fûãr_±
)(
	tngx_chaö_t
 *
	tö
);

19 
	$ngx_öt_t
 (*
	tngx_πmp_√tˇŒ_sök_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

20 
	tngx_chaö_t
 *
	tö
);

21 
	$ngx_öt_t
 (*
	tngx_πmp_√tˇŒ_h™dÀ_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

22 *
	t¨g
, 
	tngx_chaö_t
 *
	tö
);

24 
	#NGX_RTMP_NETCALL_HTTP_GET
 0

	)

25 
	#NGX_RTMP_NETCALL_HTTP_POST
 1

	)

38 
ngx_uæ_t
 *
uæ
;

39 
ngx_πmp_√tˇŒ_¸óã_±
 
¸óã
;

40 
ngx_πmp_√tˇŒ_fûãr_±
 
fûãr
;

41 
ngx_πmp_√tˇŒ_sök_±
 
sök
;

42 
ngx_πmp_√tˇŒ_h™dÀ_±
 
h™dÀ
;

43 *
¨g
;

44 
size_t
 
¨gsize
;

45 } 
	tngx_πmp_√tˇŒ_öô_t
;

48 
ngx_öt_t
 
	`ngx_πmp_√tˇŒ_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
,

49 
ngx_πmp_√tˇŒ_öô_t
 *
ci
);

53 
ngx_chaö_t
 * 
	`ngx_πmp_√tˇŒ_hâp_f‹m©_£ssi⁄
(
ngx_πmp_£ssi⁄_t
 *
s
,

54 
ngx_poﬁ_t
 *
poﬁ
);

55 
ngx_chaö_t
 * 
	`ngx_πmp_√tˇŒ_hâp_f‹m©_ªque°
(
ngx_öt_t
 
mëhod
,

56 
ngx_°r_t
 *
ho°
,Çgx_°r_à*
uri
, 
ngx_chaö_t
 *
¨gs
,Çgx_chaö_à*
body
,

57 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
c⁄ã¡_ty≥
);

58 
ngx_chaö_t
 * 
	`ngx_πmp_√tˇŒ_hâp_skù_hódî
“gx_chaö_à*
ö
);

62 
ngx_chaö_t
 * 
	`ngx_πmp_√tˇŒ_memˇche_£t
(
ngx_πmp_£ssi⁄_t
 *
s
,

63 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
key
,Çgx_°r_à*
vÆue
,

64 
ngx_uöt_t
 
Êags
,Çgx_uöt_à
£c
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_notify_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_md5.h
>

10 
	~"ngx_πmp.h
"

11 
	~"ngx_πmp_cmd_moduÀ.h
"

12 
	~"ngx_πmp_√tˇŒ_moduÀ.h
"

13 
	~"ngx_πmp_ªc‹d_moduÀ.h
"

14 
	~"ngx_πmp_ªœy_moduÀ.h
"

17 
ngx_πmp_c⁄√˘_±
 
	g√xt_c⁄√˘
;

18 
ngx_πmp_disc⁄√˘_±
 
	g√xt_disc⁄√˘
;

19 
ngx_πmp_publish_±
 
	g√xt_publish
;

20 
ngx_πmp_∂ay_±
 
	g√xt_∂ay
;

21 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

22 
ngx_πmp_ªc‹d_d⁄e_±
 
	g√xt_ªc‹d_d⁄e
;

25 *
ngx_πmp_nŸify_⁄_§v_evít
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_πmp_nŸify_⁄_≠p_evít
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

28 *
c⁄f
);

29 *
ngx_πmp_nŸify_mëhod
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

30 *
c⁄f
);

31 
ngx_öt_t
 
ngx_πmp_nŸify_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

32 * 
ngx_πmp_nŸify_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

33 * 
ngx_πmp_nŸify_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

34 *
∑ª¡
, *
chûd
);

35 *
ngx_πmp_nŸify_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_πmp_nŸify_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

38 
ngx_öt_t
 
ngx_πmp_nŸify_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
, *
cb«me
,

39 
ngx_uöt_t
 
uæ_idx
);

42 
ngx_°r_t
 
	gngx_πmp_nŸify_uæícoded
 =

43 
ngx_°rög
("application/x-www-form-urlencoded");

46 
	#NGX_RTMP_NOTIFY_PUBLISHING
 0x01

	)

47 
	#NGX_RTMP_NOTIFY_PLAYING
 0x02

	)

51 
	mNGX_RTMP_NOTIFY_PLAY
,

52 
	mNGX_RTMP_NOTIFY_PUBLISH
,

53 
	mNGX_RTMP_NOTIFY_PLAY_DONE
,

54 
	mNGX_RTMP_NOTIFY_PUBLISH_DONE
,

55 
	mNGX_RTMP_NOTIFY_DONE
,

56 
	mNGX_RTMP_NOTIFY_RECORD_DONE
,

57 
	mNGX_RTMP_NOTIFY_UPDATE
,

58 
	mNGX_RTMP_NOTIFY_APP_MAX


63 
	mNGX_RTMP_NOTIFY_CONNECT
,

64 
	mNGX_RTMP_NOTIFY_DISCONNECT
,

65 
	mNGX_RTMP_NOTIFY_SRV_MAX


70 
ngx_uæ_t
 *
	muæ
[
NGX_RTMP_NOTIFY_APP_MAX
];

71 
ngx_Êag_t
 
	ma˘ive
;

72 
ngx_uöt_t
 
	mmëhod
;

73 
ngx_m£c_t
 
	mupd©e_timeout
;

74 
ngx_Êag_t
 
	mupd©e_°ri˘
;

75 
ngx_Êag_t
 
	mªœy_ªdúe˘
;

76 } 
	tngx_πmp_nŸify_≠p_c⁄f_t
;

80 
ngx_uæ_t
 *
	muæ
[
NGX_RTMP_NOTIFY_SRV_MAX
];

81 
ngx_uöt_t
 
	mmëhod
;

82 } 
	tngx_πmp_nŸify_§v_c⁄f_t
;

86 
ngx_uöt_t
 
	mÊags
;

87 
u_ch¨
 
	m«me
[
NGX_RTMP_MAX_NAME
];

88 
u_ch¨
 
	m¨gs
[
NGX_RTMP_MAX_ARGS
];

89 
ngx_evít_t
 
	mupd©e_evt
;

90 
time_t
 
	m°¨t
;

91 } 
	tngx_πmp_nŸify_˘x_t
;

95 
u_ch¨
 *
	mcb«me
;

96 
ngx_uöt_t
 
	muæ_idx
;

97 } 
	tngx_πmp_nŸify_d⁄e_t
;

100 
ngx_comm™d_t
 
	gngx_πmp_nŸify_comm™ds
[] = {

102 { 
ngx_°rög
("on_connect"),

103 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

104 
ngx_πmp_nŸify_⁄_§v_evít
,

105 
NGX_RTMP_SRV_CONF_OFFSET
,

107 
NULL
 },

109 { 
ngx_°rög
("on_disconnect"),

110 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

111 
ngx_πmp_nŸify_⁄_§v_evít
,

112 
NGX_RTMP_SRV_CONF_OFFSET
,

114 
NULL
 },

116 { 
ngx_°rög
("on_publish"),

117 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

118 
ngx_πmp_nŸify_⁄_≠p_evít
,

119 
NGX_RTMP_APP_CONF_OFFSET
,

121 
NULL
 },

123 { 
ngx_°rög
("on_play"),

124 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

125 
ngx_πmp_nŸify_⁄_≠p_evít
,

126 
NGX_RTMP_APP_CONF_OFFSET
,

128 
NULL
 },

130 { 
ngx_°rög
("on_publish_done"),

131 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

132 
ngx_πmp_nŸify_⁄_≠p_evít
,

133 
NGX_RTMP_APP_CONF_OFFSET
,

135 
NULL
 },

137 { 
ngx_°rög
("on_play_done"),

138 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

139 
ngx_πmp_nŸify_⁄_≠p_evít
,

140 
NGX_RTMP_APP_CONF_OFFSET
,

142 
NULL
 },

144 { 
ngx_°rög
("on_done"),

145 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_πmp_nŸify_⁄_≠p_evít
,

147 
NGX_RTMP_APP_CONF_OFFSET
,

149 
NULL
 },

151 { 
ngx_°rög
("on_record_done"),

152 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_RTMP_REC_CONF
|

153 
NGX_CONF_TAKE1
,

154 
ngx_πmp_nŸify_⁄_≠p_evít
,

155 
NGX_RTMP_APP_CONF_OFFSET
,

157 
NULL
 },

159 { 
ngx_°rög
("on_update"),

160 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

161 
ngx_πmp_nŸify_⁄_≠p_evít
,

162 
NGX_RTMP_APP_CONF_OFFSET
,

164 
NULL
 },

166 { 
ngx_°rög
("notify_method"),

167 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

168 
ngx_πmp_nŸify_mëhod
,

169 
NGX_RTMP_APP_CONF_OFFSET
,

171 
NULL
 },

173 { 
ngx_°rög
("notify_update_timeout"),

174 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

175 
ngx_c⁄f_£t_m£c_¶Ÿ
,

176 
NGX_RTMP_APP_CONF_OFFSET
,

177 
off£tof
(
ngx_πmp_nŸify_≠p_c⁄f_t
, 
upd©e_timeout
),

178 
NULL
 },

180 { 
ngx_°rög
("notify_update_strict"),

181 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

182 
ngx_c⁄f_£t_Êag_¶Ÿ
,

183 
NGX_RTMP_APP_CONF_OFFSET
,

184 
off£tof
(
ngx_πmp_nŸify_≠p_c⁄f_t
, 
upd©e_°ri˘
),

185 
NULL
 },

187 { 
ngx_°rög
("notify_relay_redirect"),

188 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

189 
ngx_c⁄f_£t_Êag_¶Ÿ
,

190 
NGX_RTMP_APP_CONF_OFFSET
,

191 
off£tof
(
ngx_πmp_nŸify_≠p_c⁄f_t
, 
ªœy_ªdúe˘
),

192 
NULL
 },

194 
ngx_nuŒ_comm™d


198 
ngx_πmp_moduÀ_t
 
	gngx_πmp_nŸify_moduÀ_˘x
 = {

199 
NULL
,

200 
ngx_πmp_nŸify_po°c⁄figuøti⁄
,

201 
NULL
,

202 
NULL
,

203 
ngx_πmp_nŸify_¸óã_§v_c⁄f
,

204 
ngx_πmp_nŸify_mîge_§v_c⁄f
,

205 
ngx_πmp_nŸify_¸óã_≠p_c⁄f
,

206 
ngx_πmp_nŸify_mîge_≠p_c⁄f


210 
ngx_moduÀ_t
 
	gngx_πmp_nŸify_moduÀ
 = {

211 
NGX_MODULE_V1
,

212 &
ngx_πmp_nŸify_moduÀ_˘x
,

213 
ngx_πmp_nŸify_comm™ds
,

214 
NGX_RTMP_MODULE
,

215 
NULL
,

216 
NULL
,

217 
NULL
,

218 
NULL
,

219 
NULL
,

220 
NULL
,

221 
NULL
,

222 
NGX_MODULE_V1_PADDING


227 
	$ngx_πmp_nŸify_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

229 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

230 
ngx_uöt_t
 
n
;

232 
«cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_nŸify_≠p_c⁄f_t
));

233 i‡(
«cf
 =
NULL
) {

234  
NULL
;

237 
n
 = 0;Ç < 
NGX_RTMP_NOTIFY_APP_MAX
; ++n) {

238 
«cf
->
uæ
[
n
] = 
NGX_CONF_UNSET_PTR
;

241 
«cf
->
mëhod
 = 
NGX_CONF_UNSET_UINT
;

242 
«cf
->
upd©e_timeout
 = 
NGX_CONF_UNSET_MSEC
;

243 
«cf
->
upd©e_°ri˘
 = 
NGX_CONF_UNSET
;

244 
«cf
->
ªœy_ªdúe˘
 = 
NGX_CONF_UNSET
;

246  
«cf
;

247 
	}
}

251 
	$ngx_πmp_nŸify_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

253 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

254 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

255 
ngx_uöt_t
 
n
;

257 
n
 = 0;Ç < 
NGX_RTMP_NOTIFY_APP_MAX
; ++n) {

258 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
uæ
[
n
], 
¥ev
->uæ[n], 
NULL
);

259 i‡(
c⁄f
->
uæ
[
n
]) {

260 
c⁄f
->
a˘ive
 = 1;

264 i‡(
c⁄f
->
a˘ive
) {

265 
¥ev
->
a˘ive
 = 1;

268 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mëhod
, 
¥ev
->method,

269 
NGX_RTMP_NETCALL_HTTP_POST
);

270 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
upd©e_timeout
, 
¥ev
->update_timeout,

272 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
upd©e_°ri˘
, 
¥ev
->update_strict, 0);

273 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªœy_ªdúe˘
, 
¥ev
->relay_redirect, 0);

275  
NGX_CONF_OK
;

276 
	}
}

280 
	$ngx_πmp_nŸify_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_πmp_nŸify_§v_c⁄f_t
 *
nscf
;

283 
ngx_uöt_t
 
n
;

285 
nscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_nŸify_§v_c⁄f_t
));

286 i‡(
nscf
 =
NULL
) {

287  
NULL
;

290 
n
 = 0;Ç < 
NGX_RTMP_NOTIFY_SRV_MAX
; ++n) {

291 
nscf
->
uæ
[
n
] = 
NGX_CONF_UNSET_PTR
;

294 
nscf
->
mëhod
 = 
NGX_CONF_UNSET_UINT
;

296  
nscf
;

297 
	}
}

301 
	$ngx_πmp_nŸify_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

303 
ngx_πmp_nŸify_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

304 
ngx_πmp_nŸify_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

305 
ngx_uöt_t
 
n
;

307 
n
 = 0;Ç < 
NGX_RTMP_NOTIFY_SRV_MAX
; ++n) {

308 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
uæ
[
n
], 
¥ev
->uæ[n], 
NULL
);

311 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mëhod
, 
¥ev
->method,

312 
NGX_RTMP_NETCALL_HTTP_POST
);

314  
NGX_CONF_OK
;

315 
	}
}

318 
ngx_chaö_t
 *

319 
	$ngx_πmp_nŸify_¸óã_ªque°
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

320 
ngx_uöt_t
 
uæ_idx
, 
ngx_chaö_t
 *
¨gs
)

322 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

323 
ngx_chaö_t
 *
Æ
, *
bl
, *
˛
;

324 
ngx_uæ_t
 *
uæ
;

326 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

328 
uæ
 = 
«cf
->uæ[
uæ_idx
];

330 
Æ
 = 
	`ngx_πmp_√tˇŒ_hâp_f‹m©_£ssi⁄
(
s
, 
poﬁ
);

331 i‡(
Æ
 =
NULL
) {

332  
NULL
;

335 
Æ
->
√xt
 = 
¨gs
;

337 
bl
 = 
NULL
;

339 i‡(
«cf
->
mëhod
 =
NGX_RTMP_NETCALL_HTTP_POST
) {

340 
˛
 = 
Æ
;

341 
Æ
 = 
bl
;

342 
bl
 = 
˛
;

345  
	`ngx_πmp_√tˇŒ_hâp_f‹m©_ªque°
(
«cf
->
mëhod
, &
uæ
->
ho°
,

346 &
uæ
->
uri
, 
Æ
, 
bl
, 
poﬁ
,

347 &
ngx_πmp_nŸify_uæícoded
);

348 
	}
}

351 
ngx_chaö_t
 *

352 
	$ngx_πmp_nŸify_c⁄√˘_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
,

353 
ngx_poﬁ_t
 *
poﬁ
)

355 
ngx_πmp_c⁄√˘_t
 *
v
 = 
¨g
;

357 
ngx_πmp_nŸify_§v_c⁄f_t
 *
nscf
;

358 
ngx_uæ_t
 *
uæ
;

359 
ngx_chaö_t
 *
Æ
, *
bl
;

360 
ngx_buf_t
 *
b
;

361 
ngx_°r_t
 *
addr_ãxt
;

362 
size_t
 
≠p_Àn
, 
¨gs_Àn
, 
Êashvî_Àn
,

363 
swf_uæ_Àn
, 
tc_uæ_Àn
, 
∑ge_uæ_Àn
;

365 
nscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

367 
Æ
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

368 i‡(
Æ
 =
NULL
) {

369  
NULL
;

376 
≠p_Àn
 = 
	`ngx_°æí
(
v
->
≠p
);

377 
¨gs_Àn
 = 
	`ngx_°æí
(
v
->
¨gs
);

378 
Êashvî_Àn
 = 
	`ngx_°æí
(
v
->
Êashvî
);

379 
swf_uæ_Àn
 = 
	`ngx_°æí
(
v
->
swf_uæ
);

380 
tc_uæ_Àn
 = 
	`ngx_°æí
(
v
->
tc_uæ
);

381 
∑ge_uæ_Àn
 = 
	`ngx_°æí
(
v
->
∑ge_uæ
);

383 
addr_ãxt
 = &
s
->
c⁄√˘i⁄
->addr_text;

385 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

387 ("&≠p="Ë- 1 + 
≠p_Àn
 * 3 +

388 ("&Êashvî="Ë- 1 + 
Êashvî_Àn
 * 3 +

389 ("&swfuæ="Ë- 1 + 
swf_uæ_Àn
 * 3 +

390 ("&tcuæ="Ë- 1 + 
tc_uæ_Àn
 * 3 +

391 ("&∑geuæ="Ë- 1 + 
∑ge_uæ_Àn
 * 3 +

392 ("&addr="Ë- 1 + 
addr_ãxt
->
Àn
 * 3 +

393 ("&ïoch="Ë- 1 + 
NGX_INT32_LEN
 +

394 1 + 
¨gs_Àn


397 i‡(
b
 =
NULL
) {

398  
NULL
;

401 
Æ
->
buf
 = 
b
;

402 
Æ
->
√xt
 = 
NULL
;

404 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "app=", ("app=") - 1);

405 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
≠p
, 
≠p_Àn
,

406 
NGX_ESCAPE_ARGS
);

408 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&flashver=",

410 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
Êashvî
, 
Êashvî_Àn
,

411 
NGX_ESCAPE_ARGS
);

413 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&swfurl=",

415 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
swf_uæ
, 
swf_uæ_Àn
,

416 
NGX_ESCAPE_ARGS
);

418 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&tcurl=",

420 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
tc_uæ
, 
tc_uæ_Àn
,

421 
NGX_ESCAPE_ARGS
);

423 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&pageurl=",

425 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
∑ge_uæ
, 
∑ge_uæ_Àn
,

426 
NGX_ESCAPE_ARGS
);

428 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&addr=", ("&addr=") -1);

429 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
addr_ãxt
->
d©a
,

430 
addr_ãxt
->
Àn
, 
NGX_ESCAPE_ARGS
);

432 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&epoch=", ("&epoch=") -1);

433 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%uD", (
uöt32_t
Ë
s
->
ïoch
);

435 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&call=connect",

438 i‡(
¨gs_Àn
) {

439 *
b
->
œ°
++ = '&';

440 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
(b->œ°, 
v
->
¨gs
, 
¨gs_Àn
);

443 
uæ
 = 
nscf
->uæ[
NGX_RTMP_NOTIFY_CONNECT
];

445 
bl
 = 
NULL
;

447 i‡(
nscf
->
mëhod
 =
NGX_RTMP_NETCALL_HTTP_POST
) {

448 
bl
 = 
Æ
;

449 
Æ
 = 
NULL
;

452  
	`ngx_πmp_√tˇŒ_hâp_f‹m©_ªque°
(
nscf
->
mëhod
, &
uæ
->
ho°
,

453 &
uæ
->
uri
, 
Æ
, 
bl
, 
poﬁ
,

454 &
ngx_πmp_nŸify_uæícoded
);

455 
	}
}

458 
ngx_chaö_t
 *

459 
	$ngx_πmp_nŸify_disc⁄√˘_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
,

460 
ngx_poﬁ_t
 *
poﬁ
)

462 
ngx_πmp_nŸify_§v_c⁄f_t
 *
nscf
;

463 
ngx_uæ_t
 *
uæ
;

464 
ngx_chaö_t
 *
Æ
, *
bl
, *
∂
;

465 
ngx_buf_t
 *
b
;

467 
nscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

469 
∂
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

470 i‡(
∂
 =
NULL
) {

471  
NULL
;

474 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

476 ("&≠p="Ë+ 
s
->
≠p
.
Àn
 * 3 +

477 1 + 
s
->
¨gs
.
Àn
);

478 i‡(
b
 =
NULL
) {

479  
NULL
;

482 
∂
->
buf
 = 
b
;

483 
∂
->
√xt
 = 
NULL
;

485 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&call=disconnect",

488 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&app=", ("&app=") - 1);

489 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
s
->
≠p
.
d©a
, s->≠p.
Àn
,

490 
NGX_ESCAPE_ARGS
);

492 i‡(
s
->
¨gs
.
Àn
) {

493 *
b
->
œ°
++ = '&';

494 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
(b->œ°, 
s
->
¨gs
.
d©a
, s->¨gs.
Àn
);

497 
uæ
 = 
nscf
->uæ[
NGX_RTMP_NOTIFY_DISCONNECT
];

499 
Æ
 = 
	`ngx_πmp_√tˇŒ_hâp_f‹m©_£ssi⁄
(
s
, 
poﬁ
);

500 i‡(
Æ
 =
NULL
) {

501  
NULL
;

504 
Æ
->
√xt
 = 
∂
;

506 
bl
 = 
NULL
;

508 i‡(
nscf
->
mëhod
 =
NGX_RTMP_NETCALL_HTTP_POST
) {

509 
bl
 = 
Æ
;

510 
Æ
 = 
NULL
;

513  
	`ngx_πmp_√tˇŒ_hâp_f‹m©_ªque°
(
nscf
->
mëhod
, &
uæ
->
ho°
,

514 &
uæ
->
uri
, 
Æ
, 
bl
, 
poﬁ
,

515 &
ngx_πmp_nŸify_uæícoded
);

516 
	}
}

519 
ngx_chaö_t
 *

520 
	$ngx_πmp_nŸify_publish_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
,

521 
ngx_poﬁ_t
 *
poﬁ
)

523 
ngx_πmp_publish_t
 *
v
 = 
¨g
;

525 
ngx_chaö_t
 *
∂
;

526 
ngx_buf_t
 *
b
;

527 
size_t
 
«me_Àn
, 
ty≥_Àn
, 
¨gs_Àn
;

529 
∂
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

530 i‡(
∂
 =
NULL
) {

531  
NULL
;

534 
«me_Àn
 = 
	`ngx_°æí
(
v
->
«me
);

535 
ty≥_Àn
 = 
	`ngx_°æí
(
v
->
ty≥
);

536 
¨gs_Àn
 = 
	`ngx_°æí
(
v
->
¨gs
);

538 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

540 ("&«me="Ë+ 
«me_Àn
 * 3 +

541 ("&ty≥="Ë+ 
ty≥_Àn
 * 3 +

542 1 + 
¨gs_Àn
);

543 i‡(
b
 =
NULL
) {

544  
NULL
;

547 
∂
->
buf
 = 
b
;

548 
∂
->
√xt
 = 
NULL
;

550 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&call=publish",

553 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&name=", ("&name=") - 1);

554 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
«me
, 
«me_Àn
,

555 
NGX_ESCAPE_ARGS
);

557 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&type=", ("&type=") - 1);

558 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
ty≥
, 
ty≥_Àn
,

559 
NGX_ESCAPE_ARGS
);

561 i‡(
¨gs_Àn
) {

562 *
b
->
œ°
++ = '&';

563 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
(b->œ°, 
v
->
¨gs
, 
¨gs_Àn
);

566  
	`ngx_πmp_nŸify_¸óã_ªque°
(
s
, 
poﬁ
, 
NGX_RTMP_NOTIFY_PUBLISH
, 
∂
);

567 
	}
}

570 
ngx_chaö_t
 *

571 
	$ngx_πmp_nŸify_∂ay_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
,

572 
ngx_poﬁ_t
 *
poﬁ
)

574 
ngx_πmp_∂ay_t
 *
v
 = 
¨g
;

576 
ngx_chaö_t
 *
∂
;

577 
ngx_buf_t
 *
b
;

578 
size_t
 
«me_Àn
, 
¨gs_Àn
;

580 
∂
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

581 i‡(
∂
 =
NULL
) {

582  
NULL
;

585 
«me_Àn
 = 
	`ngx_°æí
(
v
->
«me
);

586 
¨gs_Àn
 = 
	`ngx_°æí
(
v
->
¨gs
);

588 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

590 ("&«me="Ë+ 
«me_Àn
 * 3 +

592 
NGX_INT32_LEN
 * 3 + 1 + 
¨gs_Àn
);

593 i‡(
b
 =
NULL
) {

594  
NULL
;

597 
∂
->
buf
 = 
b
;

598 
∂
->
√xt
 = 
NULL
;

600 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&call=play",

603 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&name=", ("&name=") - 1);

604 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
«me
, 
«me_Àn
,

605 
NGX_ESCAPE_ARGS
);

607 
b
->
œ°
 = 
	`ngx_¢¥ötf
(b->œ°, b->
íd
 - b->last,

609 (
uöt32_t
Ë
v
->
°¨t
, (uöt32_tËv->
duøti⁄
,

610 
v
->
ª£t
 & 1);

612 i‡(
¨gs_Àn
) {

613 *
b
->
œ°
++ = '&';

614 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
(b->œ°, 
v
->
¨gs
, 
¨gs_Àn
);

617  
	`ngx_πmp_nŸify_¸óã_ªque°
(
s
, 
poﬁ
, 
NGX_RTMP_NOTIFY_PLAY
, 
∂
);

618 
	}
}

621 
ngx_chaö_t
 *

622 
	$ngx_πmp_nŸify_d⁄e_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
,

623 
ngx_poﬁ_t
 *
poﬁ
)

625 
ngx_πmp_nŸify_d⁄e_t
 *
ds
 = 
¨g
;

627 
ngx_chaö_t
 *
∂
;

628 
ngx_buf_t
 *
b
;

629 
size_t
 
cb«me_Àn
, 
«me_Àn
, 
¨gs_Àn
;

630 
ngx_πmp_nŸify_˘x_t
 *
˘x
;

632 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_nŸify_moduÀ
);

634 
∂
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

635 i‡(
∂
 =
NULL
) {

636  
NULL
;

639 
cb«me_Àn
 = 
	`ngx_°æí
(
ds
->
cb«me
);

640 
«me_Àn
 = 
˘x
 ? 
	`ngx_°æí
(˘x->
«me
) : 0;

641 
¨gs_Àn
 = 
˘x
 ? 
	`ngx_°æí
(˘x->
¨gs
) : 0;

643 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

644 ("&ˇŒ="Ë+ 
cb«me_Àn
 +

645 ("&«me="Ë+ 
«me_Àn
 * 3 +

646 1 + 
¨gs_Àn
);

647 i‡(
b
 =
NULL
) {

648  
NULL
;

651 
∂
->
buf
 = 
b
;

652 
∂
->
√xt
 = 
NULL
;

654 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&call=", ("&call=") - 1);

655 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ds
->
cb«me
, 
cb«me_Àn
);

657 i‡(
«me_Àn
) {

658 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&name=", ("&name=") - 1);

659 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
˘x
->
«me
, 
«me_Àn
,

660 
NGX_ESCAPE_ARGS
);

663 i‡(
¨gs_Àn
) {

664 *
b
->
œ°
++ = '&';

665 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
(b->œ°, 
˘x
->
¨gs
, 
¨gs_Àn
);

668  
	`ngx_πmp_nŸify_¸óã_ªque°
(
s
, 
poﬁ
, 
ds
->
uæ_idx
, 
∂
);

669 
	}
}

672 
ngx_chaö_t
 *

673 
	$ngx_πmp_nŸify_upd©e_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
,

674 
ngx_poﬁ_t
 *
poﬁ
)

676 
ngx_chaö_t
 *
∂
;

677 
ngx_buf_t
 *
b
;

678 
size_t
 
«me_Àn
, 
¨gs_Àn
;

679 
ngx_πmp_nŸify_˘x_t
 *
˘x
;

680 
ngx_°r_t
 
sfx
;

682 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_nŸify_moduÀ
);

684 
∂
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

685 i‡(
∂
 =
NULL
) {

686  
NULL
;

689 i‡(
˘x
->
Êags
 & 
NGX_RTMP_NOTIFY_PUBLISHING
) {

690 
	`ngx_°r_£t
(&
sfx
, "_publish");

691 } i‡(
˘x
->
Êags
 & 
NGX_RTMP_NOTIFY_PLAYING
) {

692 
	`ngx_°r_£t
(&
sfx
, "_play");

694 
	`ngx_°r_nuŒ
(&
sfx
);

697 
«me_Àn
 = 
˘x
 ? 
	`ngx_°æí
(˘x->
«me
) : 0;

698 
¨gs_Àn
 = 
˘x
 ? 
	`ngx_°æí
(˘x->
¨gs
) : 0;

700 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

701 ("&ˇŒ=upd©e"Ë+ 
sfx
.
Àn
 +

702 ("&time="Ë+ 
NGX_TIME_T_LEN
 +

703 ("&time°amp="Ë+ 
NGX_INT32_LEN
 +

704 ("&«me="Ë+ 
«me_Àn
 * 3 +

705 1 + 
¨gs_Àn
);

706 i‡(
b
 =
NULL
) {

707  
NULL
;

710 
∂
->
buf
 = 
b
;

711 
∂
->
√xt
 = 
NULL
;

713 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&call=update",

715 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
sfx
.
d©a
, sfx.
Àn
);

717 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
 *) "&time=",

719 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%T", 
ngx_ˇched_time
->
£c
 - 
˘x
->
°¨t
);

721 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
 *) "&timestamp=",

723 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%D", 
s
->
cuºít_time
);

725 i‡(
«me_Àn
) {

726 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&name=", ("&name=") - 1);

727 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
˘x
->
«me
, 
«me_Àn
,

728 
NGX_ESCAPE_ARGS
);

731 i‡(
¨gs_Àn
) {

732 *
b
->
œ°
++ = '&';

733 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
(b->œ°, 
˘x
->
¨gs
, 
¨gs_Àn
);

736  
	`ngx_πmp_nŸify_¸óã_ªque°
(
s
, 
poﬁ
, 
NGX_RTMP_NOTIFY_UPDATE
, 
∂
);

737 
	}
}

740 
ngx_chaö_t
 *

741 
	$ngx_πmp_nŸify_ªc‹d_d⁄e_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
,

742 
ngx_poﬁ_t
 *
poﬁ
)

744 
ngx_πmp_ªc‹d_d⁄e_t
 *
v
 = 
¨g
;

746 
ngx_πmp_nŸify_˘x_t
 *
˘x
;

747 
ngx_chaö_t
 *
∂
;

748 
ngx_buf_t
 *
b
;

749 
size_t
 
«me_Àn
, 
¨gs_Àn
;

751 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_nŸify_moduÀ
);

753 
∂
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

754 i‡(
∂
 =
NULL
) {

755  
NULL
;

758 
«me_Àn
 = 
	`ngx_°æí
(
˘x
->
«me
);

759 
¨gs_Àn
 = 
	`ngx_°æí
(
˘x
->
¨gs
);

761 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
,

763 ("&ªc‹dî="Ë+ 
v
->
ªc‹dî
.
Àn
 +

764 ("&«me="Ë+ 
«me_Àn
 * 3 +

765 ("&∑th="Ë+ 
v
->
∑th
.
Àn
 * 3 +

766 1 + 
¨gs_Àn
);

767 i‡(
b
 =
NULL
) {

768  
NULL
;

771 
∂
->
buf
 = 
b
;

772 
∂
->
√xt
 = 
NULL
;

774 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&call=record_done",

777 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
 *) "&recorder=",

779 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
ªc‹dî
.
d©a
,

780 
v
->
ªc‹dî
.
Àn
, 
NGX_ESCAPE_ARGS
);

782 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&name=", ("&name=") - 1);

783 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
˘x
->
«me
, 
«me_Àn
,

784 
NGX_ESCAPE_ARGS
);

786 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, (
u_ch¨
*) "&path=", ("&path=") - 1);

787 
b
->
œ°
 = (
u_ch¨
*Ë
	`ngx_esˇ≥_uri
(b->œ°, 
v
->
∑th
.
d©a
, v->∑th.
Àn
,

788 
NGX_ESCAPE_ARGS
);

790 i‡(
¨gs_Àn
) {

791 *
b
->
œ°
++ = '&';

792 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
(b->œ°, 
˘x
->
¨gs
, 
¨gs_Àn
);

795  
	`ngx_πmp_nŸify_¸óã_ªque°
(
s
, 
poﬁ
, 
NGX_RTMP_NOTIFY_RECORD_DONE
,

796 
∂
);

797 
	}
}

800 
ngx_öt_t


801 
	$ngx_πmp_nŸify_∑r£_hâp_ªtcode
(
ngx_πmp_£ssi⁄_t
 *
s
,

802 
ngx_chaö_t
 *
ö
)

804 
ngx_buf_t
 *
b
;

805 
ngx_öt_t
 
n
;

806 
u_ch¨
 
c
;

810 
n
 = 9;

811 
ö
) {

812 
b
 = 
ö
->
buf
;

813 i‡(
b
->
œ°
 - b->
pos
 > 
n
) {

814 
c
 = 
b
->
pos
[
n
];

815 i‡(
c
 >(
u_ch¨
)'0' && c <= (u_char)'9') {

816 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

817 "nŸify: HTTPÑëcode: %dxx", ()(
c
 - '0'));

818 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

819 "[CCBokêSåóm Info]:ÇŸify: HTTPÑëcode: %dxx", ()(
c
 - '0'));

820 
c
) {

821 (
u_ch¨
) '2':

822  
NGX_OK
;

823 (
u_ch¨
) '3':

824  
NGX_AGAIN
;

825 (
u_ch¨
) '5':

826  
NGX_BUSY
;

828  
NGX_ERROR
;

832 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

833 "nŸify: invÆid HTTPÑëcode: %d..", ()
c
);

835  
NGX_ERROR
;

837 
n
 -(
b
->
œ°
 - b->
pos
);

838 
ö
 = in->
√xt
;

841 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

849  
NGX_ERROR
;

850 
	}
}

853 
ngx_öt_t


854 
	$ngx_πmp_nŸify_∑r£_hâp_hódî
(
ngx_πmp_£ssi⁄_t
 *
s
,

855 
ngx_chaö_t
 *
ö
, 
ngx_°r_t
 *
«me
, 
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

857 
ngx_buf_t
 *
b
;

858 
ngx_öt_t
 
m©ched
;

859 
u_ch¨
 *
p
, 
c
;

860 
ngx_uöt_t
 
n
;

863 
∑r£_«me
,

864 
∑r£_•a˚
,

865 
∑r£_vÆue
,

866 
∑r£_vÆue_√wlöe


867 } 
°©e
 = 
∑r£_«me
;

869 
n
 = 0;

870 
m©ched
 = 0;

872 
ö
) {

873 
b
 = 
ö
->
buf
;

875 
p
 = 
b
->
pos
;Ö !b->
œ°
; ++p) {

876 
c
 = *
p
;

878 i‡(
c
 == '\r') {

882 
°©e
) {

883 
∑r£_vÆue_√wlöe
:

884 i‡(
c
 == ' ' || c == '\t') {

885 
°©e
 = 
∑r£_•a˚
;

889 i‡(
m©ched
) {

890  
n
;

893 i‡(
c
 == '\n') {

894  
NGX_OK
;

897 
n
 = 0;

898 
°©e
 = 
∑r£_«me
;

900 
∑r£_«me
:

901 
c
) {

903 
m©ched
 = (
n
 =
«me
->
Àn
);

904 
n
 = 0;

905 
°©e
 = 
∑r£_•a˚
;

908 
n
 = 0;

911 i‡(
n
 < 
«me
->
Àn
 &&

912 
	`ngx_tﬁowî
(
c
Ë=ngx_tﬁowî(
«me
->
d©a
[
n
]))

914 ++
n
;

917 
n
 = 
«me
->
Àn
 + 1;

921 
∑r£_•a˚
:

922 i‡(
c
 == ' ' || c == '\t') {

925 
°©e
 = 
∑r£_vÆue
;

927 
∑r£_vÆue
:

928 i‡(
c
 == '\n') {

929 
°©e
 = 
∑r£_vÆue_√wlöe
;

933 i‡(
m©ched
 && 
n
 + 1 < 
Àn
) {

934 
d©a
[
n
++] = 
c
;

941 
ö
 = in->
√xt
;

944  
NGX_OK
;

945 
	}
}

949 
	$ngx_πmp_nŸify_˛ór_Êag
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
Êag
)

951 
ngx_πmp_nŸify_˘x_t
 *
˘x
;

953 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_nŸify_moduÀ
);

955 
˘x
->
Êags
 &~
Êag
;

956 
	}
}

959 
ngx_öt_t


960 
	$ngx_πmp_nŸify_c⁄√˘_h™dÀ
(
ngx_πmp_£ssi⁄_t
 *
s
,

961 *
¨g
, 
ngx_chaö_t
 *
ö
)

963 
ngx_πmp_c⁄√˘_t
 *
v
 = 
¨g
;

964 
ngx_öt_t
 
rc
;

965 
u_ch¨
 
≠p
[
NGX_RTMP_MAX_NAME
];

967 
ngx_°r_t
 
loˇti⁄
 = 
	`ngx_°rög
("location");

969 
rc
 = 
	`ngx_πmp_nŸify_∑r£_hâp_ªtcode
(
s
, 
ö
);

970 i‡(
rc
 =
NGX_ERROR
) {

971  
NGX_ERROR
;

974 i‡(
rc
 =
NGX_AGAIN
) {

975 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

978 
rc
 = 
	`ngx_πmp_nŸify_∑r£_hâp_hódî
(
s
, 
ö
, &
loˇti⁄
, 
≠p
,

979 (
≠p
) - 1);

980 i‡(
rc
 > 0) {

981 *
	`ngx_˝ymem
(
v
->
≠p
,áµ, 
rc
) = 0;

982 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

983 "nŸify: c⁄√˘Ñedúe˘Åÿ'%s'", 
v
->
≠p
);

987  
	`√xt_c⁄√˘
(
s
, 
v
);

988 
	}
}

992 
	$ngx_πmp_nŸify_£t_«me
(
u_ch¨
 *
d°
, 
size_t
 
d°_Àn
, u_ch¨ *
§c
,

993 
size_t
 
§c_Àn
)

995 
u_ch¨
 
ªsu…
[16], *
p
;

996 
ngx_md5_t
 
md5
;

998 
	`ngx_md5_öô
(&
md5
);

999 
	`ngx_md5_upd©e
(&
md5
, 
§c
, 
§c_Àn
);

1000 
	`ngx_md5_föÆ
(
ªsu…
, &
md5
);

1002 
p
 = 
	`ngx_hex_dump
(
d°
, 
ªsu…
, 
	`ngx_mö
((
d°_Àn
 - 1) / 2, 16));

1003 *
p
 = '\0';

1004 
	}
}

1007 
ngx_öt_t


1008 
	$ngx_πmp_nŸify_publish_h™dÀ
(
ngx_πmp_£ssi⁄_t
 *
s
,

1009 *
¨g
, 
ngx_chaö_t
 *
ö
)

1011 
ngx_πmp_publish_t
 *
v
 = 
¨g
;

1012 
ngx_öt_t
 
rc
;

1013 
ngx_°r_t
 
loˇl_«me
;

1014 
ngx_πmp_ªœy_èrgë_t
 
èrgë
;

1015 
ngx_uæ_t
 *
u
;

1016 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1017 
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
];

1019 
ngx_°r_t
 
loˇti⁄
 = 
	`ngx_°rög
("location");

1021 
rc
 = 
	`ngx_πmp_nŸify_∑r£_hâp_ªtcode
(
s
, 
ö
);

1022 i‡(
rc
 =
NGX_ERROR
) {

1023 
	`ngx_πmp_nŸify_˛ór_Êag
(
s
, 
NGX_RTMP_NOTIFY_PUBLISHING
);

1024  
NGX_ERROR
;

1026 } i‡(
rc
 =
NGX_BUSY
) {

1027 i‡(
s
->
cc_m⁄ô‹_push
 == 0) {

1028 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1029 "[CCBokêSåóm Info]: såóm %†i†f‹biddí f‹ m⁄ô‹", 
v
->
«me
);

1030 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
v
->
«me
) == 0)

1032 
ngx_°ªam_öfo
 *
tmp_öfo
;

1033 
tmp_öfo
 = (
ngx_°ªam_öfo
 *)
	`ngx_pˇŒoc
(
ngx_cy˛e
->
poﬁ
, (ngx_stream_info));

1034 
	`ngx_˝y°∫
(
tmp_öfo
->
°ªam_«me
, 
v
->
«me
, 
	`ngx_°æí
(v->name) + 1);

1035 
tmp_öfo
->
is_ªc‹d
 = 0;

1036 
tmp_öfo
->
is_f‹biddí
 = 1;

1038 
	`ngx_queue_ö£π
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
);

1040 
	`ngx_queue_£t_m⁄ô‹_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
v
->
«me
, 1);

1044 
√xt
;

1047 i‡(
rc
 =
NGX_OK
 && 
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
v
->
«me
)) {

1048 
	`ngx_queue_£t_m⁄ô‹_öfo
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
v
->
«me
, 0);

1052 i‡(
rc
 !
NGX_AGAIN
) {

1053 
√xt
;

1058 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1061 
rc
 = 
	`ngx_πmp_nŸify_∑r£_hâp_hódî
(
s
, 
ö
, &
loˇti⁄
, 
«me
,

1062 (
«me
) - 1);

1063 i‡(
rc
 <= 0) {

1064 
√xt
;

1067 i‡(
	`ngx_°∫ˇ£cmp
(
«me
, (
u_ch¨
 *) "rtmp://", 7)) {

1068 *
	`ngx_˝ymem
(
v
->
«me
,Çame, 
rc
) = 0;

1069 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1070 "nŸify:ÖublishÑedúe˘Åÿ'%s'", 
v
->
«me
);

1071 
√xt
;

1076 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1077 i‡(
«cf
->
ªœy_ªdúe˘
) {

1078 
	`ngx_πmp_nŸify_£t_«me
(
v
->
«me
, 
NGX_RTMP_MAX_NAME
,Çame, (
size_t
Ë
rc
);

1081 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1082 "nŸify:Öush '%s'Åÿ'%*s'", 
v
->
«me
, 
rc
,Çame);

1084 
loˇl_«me
.
d©a
 = 
v
->
«me
;

1085 
loˇl_«me
.
Àn
 = 
	`ngx_°æí
(
v
->
«me
);

1087 
	`ngx_memzîo
(&
èrgë
, (target));

1089 
u
 = &
èrgë
.
uæ
;

1090 
u
->
uæ
 = 
loˇl_«me
;

1091 
u
->
uæ
.
d©a
 = 
«me
 + 7;

1092 
u
->
uæ
.
Àn
 = 
rc
 - 7;

1093 
u
->
deÁu…_p‹t
 = 1935;

1094 
u
->
uri_∑π
 = 1;

1095 
u
->
no_ªsﬁve
 = 1;

1097 i‡(
	`ngx_∑r£_uæ
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
u
Ë!
NGX_OK
) {

1098 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1099 "nŸify:Öush faûed '%V'", &
loˇl_«me
);

1100  
NGX_ERROR
;

1103 
	`ngx_πmp_ªœy_push
(
s
, &
loˇl_«me
, &
èrgë
);

1105 
√xt
:

1107  
	`√xt_publish
(
s
, 
v
);

1108 
	}
}

1111 
ngx_öt_t


1112 
	$ngx_πmp_nŸify_∂ay_h™dÀ
(
ngx_πmp_£ssi⁄_t
 *
s
,

1113 *
¨g
, 
ngx_chaö_t
 *
ö
)

1115 
ngx_πmp_∂ay_t
 *
v
 = 
¨g
;

1116 
ngx_öt_t
 
rc
;

1117 
ngx_°r_t
 
loˇl_«me
;

1118 
ngx_πmp_ªœy_èrgë_t
 
èrgë
;

1119 
ngx_uæ_t
 *
u
;

1120 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1121 
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
];

1123 
ngx_°r_t
 
loˇti⁄
 = 
	`ngx_°rög
("location");

1125 
rc
 = 
	`ngx_πmp_nŸify_∑r£_hâp_ªtcode
(
s
, 
ö
);

1126 i‡(
rc
 =
NGX_ERROR
) {

1127 
	`ngx_πmp_nŸify_˛ór_Êag
(
s
, 
NGX_RTMP_NOTIFY_PLAYING
);

1128  
NGX_ERROR
;

1131 i‡(
rc
 !
NGX_AGAIN
) {

1132 
√xt
;

1137 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1140 
rc
 = 
	`ngx_πmp_nŸify_∑r£_hâp_hódî
(
s
, 
ö
, &
loˇti⁄
, 
«me
,

1141 (
«me
) - 1);

1142 i‡(
rc
 <= 0) {

1143 
√xt
;

1146 i‡(
	`ngx_°∫ˇ£cmp
(
«me
, (
u_ch¨
 *) "rtmp://", 7)) {

1147 *
	`ngx_˝ymem
(
v
->
«me
,Çame, 
rc
) = 0;

1148 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1149 "nŸify:ÖœyÑedúe˘Åÿ'%s'", 
v
->
«me
);

1150 
√xt
;

1155 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1156 i‡(
«cf
->
ªœy_ªdúe˘
) {

1157 
	`ngx_πmp_nŸify_£t_«me
(
v
->
«me
, 
NGX_RTMP_MAX_NAME
,Çame, (
size_t
Ë
rc
);

1160 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1161 "nŸify:ÖuŒ '%s' from '%*s'", 
v
->
«me
, 
rc
,Çame);

1163 
loˇl_«me
.
d©a
 = 
v
->
«me
;

1164 
loˇl_«me
.
Àn
 = 
	`ngx_°æí
(
v
->
«me
);

1166 
	`ngx_memzîo
(&
èrgë
, (target));

1168 
u
 = &
èrgë
.
uæ
;

1169 
u
->
uæ
 = 
loˇl_«me
;

1170 
u
->
uæ
.
d©a
 = 
«me
 + 7;

1171 
u
->
uæ
.
Àn
 = 
rc
 - 7;

1172 
u
->
deÁu…_p‹t
 = 1935;

1173 
u
->
uri_∑π
 = 1;

1174 
u
->
no_ªsﬁve
 = 1;

1176 i‡(
	`ngx_∑r£_uæ
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
u
Ë!
NGX_OK
) {

1177 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1178 "nŸify:ÖuŒ faûed '%V'", &
loˇl_«me
);

1179  
NGX_ERROR
;

1182 
	`ngx_πmp_ªœy_puŒ
(
s
, &
loˇl_«me
, &
èrgë
);

1184 
√xt
:

1186  
	`√xt_∂ay
(
s
, 
v
);

1187 
	}
}

1190 
ngx_öt_t


1191 
	$ngx_πmp_nŸify_upd©e_h™dÀ
(
ngx_πmp_£ssi⁄_t
 *
s
,

1192 *
¨g
, 
ngx_chaö_t
 *
ö
)

1194 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1195 
ngx_πmp_nŸify_˘x_t
 *
˘x
;

1196 
ngx_öt_t
 
rc
;

1198 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1200 
rc
 = 
	`ngx_πmp_nŸify_∑r£_hâp_ªtcode
(
s
, 
ö
);

1202 i‡((!
«cf
->
upd©e_°ri˘
 && 
rc
 =
NGX_ERROR
) ||

1203 (
«cf
->
upd©e_°ri˘
 && 
rc
 !
NGX_OK
))

1205 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1208  
NGX_ERROR
;

1211 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1213 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1215 
«cf
->
upd©e_timeout
);

1217 
	`ngx_add_timî
(&
˘x
->
upd©e_evt
, 
«cf
->
upd©e_timeout
);

1219  
NGX_OK
;

1220 
	}
}

1224 
	$ngx_πmp_nŸify_upd©e
(
ngx_evít_t
 *
e
)

1226 
ngx_c⁄√˘i⁄_t
 *
c
;

1227 
ngx_πmp_£ssi⁄_t
 *
s
;

1228 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1229 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1230 
ngx_uæ_t
 *
uæ
;

1232 
c
 = 
e
->
d©a
;

1233 
s
 = 
c
->
d©a
;

1235 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1237 
uæ
 = 
«cf
->uæ[
NGX_RTMP_NOTIFY_UPDATE
];

1239 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1240 "nŸify: upd©ê'%V'", &
uæ
->url);

1242 
	`ngx_memzîo
(&
ci
, (ci));

1244 
ci
.
uæ
 = url;

1245 
ci
.
¸óã
 = 
ngx_πmp_nŸify_upd©e_¸óã
;

1246 
ci
.
h™dÀ
 = 
ngx_πmp_nŸify_upd©e_h™dÀ
;

1248 i‡(
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
Ë=
NGX_OK
) {

1254 
	`ngx_πmp_nŸify_upd©e_h™dÀ
(
s
, 
NULL
, NULL);

1255 
	}
}

1259 
	$ngx_πmp_nŸify_öô
(
ngx_πmp_£ssi⁄_t
 *
s
,

1260 
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
], u_ch¨ 
¨gs
[
NGX_RTMP_MAX_ARGS
],

1261 
ngx_uöt_t
 
Êags
)

1263 
ngx_πmp_nŸify_˘x_t
 *
˘x
;

1264 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1265 
ngx_evít_t
 *
e
;

1267 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1268 i‡(!
«cf
->
a˘ive
) {

1272 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1274 i‡(
˘x
 =
NULL
) {

1275 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_nŸify_˘x_t
));

1276 i‡(
˘x
 =
NULL
) {

1280 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_nŸify_moduÀ
);

1283 
	`ngx_mem˝y
(
˘x
->
«me
,Çame, 
NGX_RTMP_MAX_NAME
);

1284 
	`ngx_mem˝y
(
˘x
->
¨gs
,árgs, 
NGX_RTMP_MAX_ARGS
);

1286 
˘x
->
Êags
 |= flags;

1288 i‡(
«cf
->
uæ
[
NGX_RTMP_NOTIFY_UPDATE
] =
NULL
 ||

1289 
«cf
->
upd©e_timeout
 == 0)

1294 i‡(
˘x
->
upd©e_evt
.
timî_£t
) {

1298 
˘x
->
°¨t
 = 
ngx_ˇched_time
->
£c
;

1300 
e
 = &
˘x
->
upd©e_evt
;

1302 
e
->
d©a
 = 
s
->
c⁄√˘i⁄
;

1303 
e
->
log
 = 
s
->
c⁄√˘i⁄
->log;

1304 
e
->
h™dÀr
 = 
ngx_πmp_nŸify_upd©e
;

1306 
	`ngx_add_timî
(
e
, 
«cf
->
upd©e_timeout
);

1308 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1310 
«cf
->
upd©e_timeout
);

1311 
	}
}

1314 
ngx_öt_t


1315 
	$ngx_πmp_nŸify_c⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_c⁄√˘_t
 *
v
)

1317 
ngx_πmp_nŸify_§v_c⁄f_t
 *
nscf
;

1318 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1319 
ngx_uæ_t
 *
uæ
;

1321 i‡(
s
->
auto_pushed
 || s->
ªœy
) {

1322 
√xt
;

1325 
nscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1327 
uæ
 = 
nscf
->uæ[
NGX_RTMP_NOTIFY_CONNECT
];

1328 i‡(
uæ
 =
NULL
) {

1329 
√xt
;

1332 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1333 "nŸify: c⁄√˘ '%V'", &
uæ
->url);

1335 
	`ngx_memzîo
(&
ci
, (ci));

1337 
ci
.
uæ
 = url;

1338 
ci
.
¸óã
 = 
ngx_πmp_nŸify_c⁄√˘_¸óã
;

1339 
ci
.
h™dÀ
 = 
ngx_πmp_nŸify_c⁄√˘_h™dÀ
;

1340 
ci
.
¨g
 = 
v
;

1341 
ci
.
¨gsize
 = (*
v
);

1343  
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
);

1345 
√xt
:

1346  
	`√xt_c⁄√˘
(
s
, 
v
);

1347 
	}
}

1350 
ngx_öt_t


1351 
	$ngx_πmp_nŸify_disc⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
)

1353 
ngx_πmp_nŸify_§v_c⁄f_t
 *
nscf
;

1354 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1355 
ngx_uæ_t
 *
uæ
;

1357 i‡(
s
->
auto_pushed
 || s->
ªœy
) {

1358 
√xt
;

1361 
nscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1363 
uæ
 = 
nscf
->uæ[
NGX_RTMP_NOTIFY_DISCONNECT
];

1364 i‡(
uæ
 =
NULL
) {

1365 
√xt
;

1368 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1369 "nŸify: disc⁄√˘ '%V'", &
uæ
->url);

1371 
	`ngx_memzîo
(&
ci
, (ci));

1373 
ci
.
uæ
 = url;

1374 
ci
.
¸óã
 = 
ngx_πmp_nŸify_disc⁄√˘_¸óã
;

1376 
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
);

1378 
√xt
:

1379  
	`√xt_disc⁄√˘
(
s
);

1380 
	}
}

1383 
ngx_öt_t


1384 
	$ngx_πmp_nŸify_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

1386 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1387 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1388 
ngx_uæ_t
 *
uæ
;

1390 i‡(
s
->
auto_pushed
) {

1391 
√xt
;

1394 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1395 i‡(
«cf
 =
NULL
) {

1396 
√xt
;

1399 
uæ
 = 
«cf
->uæ[
NGX_RTMP_NOTIFY_PUBLISH
];

1401 
	`ngx_πmp_nŸify_öô
(
s
, 
v
->
«me
, v->
¨gs
, 
NGX_RTMP_NOTIFY_PUBLISHING
);

1403 i‡(
uæ
 =
NULL
) {

1404 
√xt
;

1407 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1408 "nŸify:Öublish '%V'", &
uæ
->url);

1410 
	`ngx_memzîo
(&
ci
, (ci));

1412 
ci
.
uæ
 = url;

1413 
ci
.
¸óã
 = 
ngx_πmp_nŸify_publish_¸óã
;

1414 
ci
.
h™dÀ
 = 
ngx_πmp_nŸify_publish_h™dÀ
;

1415 
ci
.
¨g
 = 
v
;

1416 
ci
.
¨gsize
 = (*
v
);

1418  
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
);

1420 
√xt
:

1421  
	`√xt_publish
(
s
, 
v
);

1422 
	}
}

1425 
ngx_öt_t


1426 
	$ngx_πmp_nŸify_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

1428 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1429 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1430 
ngx_uæ_t
 *
uæ
;

1432 i‡(
s
->
auto_pushed
) {

1433 
√xt
;

1436 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1437 i‡(
«cf
 =
NULL
) {

1438 
√xt
;

1441 
uæ
 = 
«cf
->uæ[
NGX_RTMP_NOTIFY_PLAY
];

1443 
	`ngx_πmp_nŸify_öô
(
s
, 
v
->
«me
, v->
¨gs
, 
NGX_RTMP_NOTIFY_PLAYING
);

1445 i‡(
uæ
 =
NULL
) {

1446 
√xt
;

1449 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1450 "nŸify:Öœy '%V'", &
uæ
->url);

1452 
	`ngx_memzîo
(&
ci
, (ci));

1454 
ci
.
uæ
 = url;

1455 
ci
.
¸óã
 = 
ngx_πmp_nŸify_∂ay_¸óã
;

1456 
ci
.
h™dÀ
 = 
ngx_πmp_nŸify_∂ay_h™dÀ
;

1457 
ci
.
¨g
 = 
v
;

1458 
ci
.
¨gsize
 = (*
v
);

1460  
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
);

1462 
√xt
:

1463  
	`√xt_∂ay
(
s
, 
v
);

1464 
	}
}

1467 
ngx_öt_t


1468 
	$ngx_πmp_nŸify_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
,

1469 
ngx_πmp_˛o£_°ªam_t
 *
v
)

1471 
ngx_πmp_nŸify_˘x_t
 *
˘x
;

1472 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1474 i‡(
s
->
auto_pushed
) {

1475 
√xt
;

1478 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1480 i‡(
˘x
 =
NULL
) {

1481 
√xt
;

1484 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1486 i‡(
«cf
 =
NULL
) {

1487 
√xt
;

1490 i‡(
˘x
->
Êags
 & 
NGX_RTMP_NOTIFY_PUBLISHING
) {

1491 
	`ngx_πmp_nŸify_d⁄e
(
s
, "publish_d⁄e", 
NGX_RTMP_NOTIFY_PUBLISH_DONE
);

1494 i‡(
˘x
->
Êags
 & 
NGX_RTMP_NOTIFY_PLAYING
) {

1495 
	`ngx_πmp_nŸify_d⁄e
(
s
, "∂ay_d⁄e", 
NGX_RTMP_NOTIFY_PLAY_DONE
);

1498 i‡(
˘x
->
Êags
) {

1499 
	`ngx_πmp_nŸify_d⁄e
(
s
, "d⁄e", 
NGX_RTMP_NOTIFY_DONE
);

1502 i‡(
˘x
->
upd©e_evt
.
timî_£t
) {

1503 
	`ngx_dñ_timî
(&
˘x
->
upd©e_evt
);

1506 
˘x
->
Êags
 = 0;

1508 
√xt
:

1509  
	`√xt_˛o£_°ªam
(
s
, 
v
);

1510 
	}
}

1513 
ngx_öt_t


1514 
	$ngx_πmp_nŸify_ªc‹d_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_ªc‹d_d⁄e_t
 *
v
)

1516 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1517 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1519 i‡(
s
->
auto_pushed
) {

1520 
√xt
;

1523 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1524 i‡(
«cf
 =
NULL
 ||Çacf->
uæ
[
NGX_RTMP_NOTIFY_RECORD_DONE
] == NULL) {

1525 
√xt
;

1528 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1530 &
v
->
ªc‹dî
, &v->
∑th
,

1531 &
«cf
->
uæ
[
NGX_RTMP_NOTIFY_RECORD_DONE
]->url);

1533 
	`ngx_memzîo
(&
ci
, (ci));

1535 
ci
.
uæ
 = 
«cf
->uæ[
NGX_RTMP_NOTIFY_RECORD_DONE
];

1536 
ci
.
¸óã
 = 
ngx_πmp_nŸify_ªc‹d_d⁄e_¸óã
;

1537 
ci
.
¨g
 = 
v
;

1539 
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
);

1541 
√xt
:

1542  
	`√xt_ªc‹d_d⁄e
(
s
, 
v
);

1543 
	}
}

1546 
ngx_öt_t


1547 
	$ngx_πmp_nŸify_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
, *
cb«me
, 
ngx_uöt_t
 
uæ_idx
)

1549 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1550 
ngx_πmp_nŸify_d⁄e_t
 
ds
;

1551 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
;

1552 
ngx_uæ_t
 *
uæ
;

1554 
«cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_nŸify_moduÀ
);

1556 
uæ
 = 
«cf
->uæ[
uæ_idx
];

1557 i‡(
uæ
 =
NULL
) {

1558  
NGX_OK
;

1561 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1562 "nŸify: %†'%V'", 
cb«me
, &
uæ
->url);

1564 
ds
.
cb«me
 = (
u_ch¨
 *) cbname;

1565 
ds
.
uæ_idx
 = url_idx;

1567 
	`ngx_memzîo
(&
ci
, (ci));

1569 
ci
.
uæ
 = url;

1570 
ci
.
¨g
 = &
ds
;

1571 
ci
.
¸óã
 = 
ngx_πmp_nŸify_d⁄e_¸óã
;

1573  
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
);

1574 
	}
}

1577 
ngx_uæ_t
 *

1578 
	$ngx_πmp_nŸify_∑r£_uæ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
uæ
)

1580 
ngx_uæ_t
 *
u
;

1581 
size_t
 
add
;

1583 
add
 = 0;

1585 
u
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_uæ_t
));

1586 i‡(
u
 =
NULL
) {

1587  
NULL
;

1590 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "http://", 7) == 0) {

1591 
add
 = 7;

1594 
u
->
uæ
.
Àn
 = uæ->À¿- 
add
;

1595 
u
->
uæ
.
d©a
 = uæ->d©®+ 
add
;

1596 
u
->
deÁu…_p‹t
 = 80;

1597 
u
->
uri_∑π
 = 1;

1599 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

1600 i‡(
u
->
îr
) {

1601 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1602 "%†ö uæ \"%V\"", 
u
->
îr
, &u->
uæ
);

1604  
NULL
;

1607  
u
;

1608 
	}
}

1612 
	$ngx_πmp_nŸify_⁄_§v_evít
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1614 
ngx_πmp_nŸify_§v_c⁄f_t
 *
nscf
 = 
c⁄f
;

1616 
ngx_°r_t
 *
«me
, *
vÆue
;

1617 
ngx_uæ_t
 *
u
;

1618 
ngx_uöt_t
 
n
;

1620 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1622 
u
 = 
	`ngx_πmp_nŸify_∑r£_uæ
(
cf
, &
vÆue
[1]);

1623 i‡(
u
 =
NULL
) {

1624  
NGX_CONF_ERROR
;

1627 
«me
 = &
vÆue
[0];

1629 
n
 = 0;

1631 
«me
->
Àn
) {

1633 
n
 = 
NGX_RTMP_NOTIFY_CONNECT
;

1637 
n
 = 
NGX_RTMP_NOTIFY_DISCONNECT
;

1641 
nscf
->
uæ
[
n
] = 
u
;

1643  
NGX_CONF_OK
;

1644 
	}
}

1648 
	$ngx_πmp_nŸify_⁄_≠p_evít
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1650 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
 = 
c⁄f
;

1652 
ngx_°r_t
 *
«me
, *
vÆue
;

1653 
ngx_uæ_t
 *
u
;

1654 
ngx_uöt_t
 
n
;

1656 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1658 
u
 = 
	`ngx_πmp_nŸify_∑r£_uæ
(
cf
, &
vÆue
[1]);

1659 i‡(
u
 =
NULL
) {

1660  
NGX_CONF_ERROR
;

1663 
«me
 = &
vÆue
[0];

1665 
n
 = 0;

1667 
«me
->
Àn
) {

1669 i‡(
«me
->
d©a
[3] == 'd') {

1670 
n
 = 
NGX_RTMP_NOTIFY_DONE
;

1672 
n
 = 
NGX_RTMP_NOTIFY_PLAY
;

1677 
n
 = 
NGX_RTMP_NOTIFY_UPDATE
;

1681 
n
 = 
NGX_RTMP_NOTIFY_PUBLISH
;

1685 
n
 = 
NGX_RTMP_NOTIFY_PLAY_DONE
;

1689 
n
 = 
NGX_RTMP_NOTIFY_RECORD_DONE
;

1693 
n
 = 
NGX_RTMP_NOTIFY_PUBLISH_DONE
;

1697 
«cf
->
uæ
[
n
] = 
u
;

1699  
NGX_CONF_OK
;

1700 
	}
}

1704 
	$ngx_πmp_nŸify_mëhod
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1706 
ngx_πmp_nŸify_≠p_c⁄f_t
 *
«cf
 = 
c⁄f
;

1708 
ngx_πmp_nŸify_§v_c⁄f_t
 *
nscf
;

1709 
ngx_°r_t
 *
vÆue
;

1711 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1712 
vÆue
++;

1714 i‡(
vÆue
->
Àn
 == ("get") - 1 &&

1715 
	`ngx_°∫ˇ£cmp
(
vÆue
->
d©a
, (
u_ch¨
 *Ë"gë", vÆue->
Àn
) == 0)

1717 
«cf
->
mëhod
 = 
NGX_RTMP_NETCALL_HTTP_GET
;

1719 } i‡(
vÆue
->
Àn
 == ("post") - 1 &&

1720 
	`ngx_°∫ˇ£cmp
(
vÆue
->
d©a
, (
u_ch¨
 *Ë"po°", vÆue->
Àn
) == 0)

1722 
«cf
->
mëhod
 = 
NGX_RTMP_NETCALL_HTTP_POST
;

1728 
nscf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_πmp_nŸify_moduÀ
);

1729 
nscf
->
mëhod
 = 
«cf
->method;

1731  
NGX_CONF_OK
;

1732 
	}
}

1735 
ngx_öt_t


1736 
	$ngx_πmp_nŸify_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1738 
√xt_c⁄√˘
 = 
ngx_πmp_c⁄√˘
;

1739 
ngx_πmp_c⁄√˘
 = 
ngx_πmp_nŸify_c⁄√˘
;

1741 
√xt_disc⁄√˘
 = 
ngx_πmp_disc⁄√˘
;

1742 
ngx_πmp_disc⁄√˘
 = 
ngx_πmp_nŸify_disc⁄√˘
;

1744 
√xt_publish
 = 
ngx_πmp_publish
;

1745 
ngx_πmp_publish
 = 
ngx_πmp_nŸify_publish
;

1747 
√xt_∂ay
 = 
ngx_πmp_∂ay
;

1748 
ngx_πmp_∂ay
 = 
ngx_πmp_nŸify_∂ay
;

1750 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

1751 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_nŸify_˛o£_°ªam
;

1753 
√xt_ªc‹d_d⁄e
 = 
ngx_πmp_ªc‹d_d⁄e
;

1754 
ngx_πmp_ªc‹d_d⁄e
 = 
ngx_πmp_nŸify_ªc‹d_d⁄e
;

1756  
NGX_OK
;

1757 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_play_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngöx.h
>

10 
	~"ngx_πmp_∂ay_moduÀ.h
"

11 
	~"ngx_πmp_cmd_moduÀ.h
"

12 
	~"ngx_πmp_√tˇŒ_moduÀ.h
"

13 
	~"ngx_πmp_°ªams.h
"

16 
ngx_πmp_∂ay_±
 
	g√xt_∂ay
;

17 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

18 
ngx_πmp_£ek_±
 
	g√xt_£ek
;

19 
ngx_πmp_∑u£_±
 
	g√xt_∑u£
;

22 *
ngx_πmp_∂ay_uæ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_πmp_∂ay_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 
ngx_öt_t
 
ngx_πmp_∂ay_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

26 * 
ngx_πmp_∂ay_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

27 * 
ngx_πmp_∂ay_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

28 *
∑ª¡
, *
chûd
);

30 
ngx_öt_t
 
ngx_πmp_∂ay_do_öô
(
ngx_πmp_£ssi⁄_t
 *
s
);

31 
ngx_öt_t
 
ngx_πmp_∂ay_do_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
);

32 
ngx_öt_t
 
ngx_πmp_∂ay_do_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
);

33 
ngx_öt_t
 
ngx_πmp_∂ay_do_°›
(
ngx_πmp_£ssi⁄_t
 *
s
);

34 
ngx_öt_t
 
ngx_πmp_∂ay_do_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
,

35 
ngx_uöt_t
 
time°amp
);

37 
ngx_öt_t
 
ngx_πmp_∂ay_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
);

38 
ngx_öt_t
 
ngx_πmp_∂ay_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_£ek_t
 *
v
);

39 
ngx_öt_t
 
ngx_πmp_∂ay_∑u£
(
ngx_πmp_£ssi⁄_t
 *
s
,

40 
ngx_πmp_∑u£_t
 *
v
);

41 
ngx_πmp_∂ay_£nd
(
ngx_evít_t
 *
e
);

42 
ngx_öt_t
 
ngx_πmp_∂ay_›í
(
ngx_πmp_£ssi⁄_t
 *
s
, 
°¨t
);

43 
ngx_öt_t
 
ngx_πmp_∂ay_ªmŸe_h™dÀ
(
ngx_πmp_£ssi⁄_t
 *
s
,

44 *
¨g
, 
ngx_chaö_t
 *
ö
);

45 
ngx_chaö_t
 * 
ngx_πmp_∂ay_ªmŸe_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
,

46 *
¨g
, 
ngx_poﬁ_t
 *
poﬁ
);

47 
ngx_öt_t
 
ngx_πmp_∂ay_›í_ªmŸe
(
ngx_πmp_£ssi⁄_t
 *
s
,

48 
ngx_πmp_∂ay_t
 *
v
);

49 
ngx_öt_t
 
ngx_πmp_∂ay_√xt_íåy
(
ngx_πmp_£ssi⁄_t
 *
s
,

50 
ngx_πmp_∂ay_t
 *
v
);

51 
ngx_πmp_∂ay_íåy_t
 * 
ngx_πmp_∂ay_gë_cuºít_íåy
(

52 
ngx_πmp_£ssi⁄_t
 *
s
);

53 
ngx_πmp_∂ay_˛ónup_loˇl_fûe
(
ngx_πmp_£ssi⁄_t
 *
s
);

54 
ngx_πmp_∂ay_c›y_loˇl_fûe
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
«me
);

55 
u_ch¨
 * 
ngx_πmp_∂ay_gë_loˇl_fûe_∑th
(
ngx_πmp_£ssi⁄_t
 *
s
);

58 
ngx_comm™d_t
 
	gngx_πmp_∂ay_comm™ds
[] = {

60 { 
ngx_°rög
("play"),

61 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

62 
ngx_πmp_∂ay_uæ
,

63 
NGX_RTMP_APP_CONF_OFFSET
,

65 
NULL
 },

67 { 
ngx_°rög
("play_temp_path"),

68 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

69 
ngx_c⁄f_£t_°r_¶Ÿ
,

70 
NGX_RTMP_APP_CONF_OFFSET
,

71 
off£tof
(
ngx_πmp_∂ay_≠p_c⁄f_t
, 
ãmp_∑th
),

72 
NULL
 },

74 { 
ngx_°rög
("play_local_path"),

75 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

76 
ngx_c⁄f_£t_°r_¶Ÿ
,

77 
NGX_RTMP_APP_CONF_OFFSET
,

78 
off£tof
(
ngx_πmp_∂ay_≠p_c⁄f_t
, 
loˇl_∑th
),

79 
NULL
 },

81 
ngx_nuŒ_comm™d


85 
ngx_πmp_moduÀ_t
 
	gngx_πmp_∂ay_moduÀ_˘x
 = {

86 
NULL
,

87 
ngx_πmp_∂ay_po°c⁄figuøti⁄
,

88 
ngx_πmp_∂ay_¸óã_maö_c⁄f
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
ngx_πmp_∂ay_¸óã_≠p_c⁄f
,

93 
ngx_πmp_∂ay_mîge_≠p_c⁄f


97 
ngx_moduÀ_t
 
	gngx_πmp_∂ay_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_πmp_∂ay_moduÀ_˘x
,

100 
ngx_πmp_∂ay_comm™ds
,

101 
NGX_RTMP_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


113 
	#NGX_RTMP_PLAY_TMP_FILE
 "ngöx-πmp-vod."

	)

117 
	$ngx_πmp_∂ay_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

119 
ngx_πmp_∂ay_maö_c⁄f_t
 *
pmcf
;

121 
pmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_∂ay_maö_c⁄f_t
));

122 i‡(
pmcf
 =
NULL
) {

123  
NULL
;

126 i‡(
	`ngx_¨øy_öô
(&
pmcf
->
fmts
, 
cf
->
poﬁ
, 1,

127 (
ngx_πmp_∂ay_fmt_t
 *))

128 !
NGX_OK
)

130  
NULL
;

133  
pmcf
;

134 
	}
}

138 
	$ngx_πmp_∂ay_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

140 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

142 
∑cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_∂ay_≠p_c⁄f_t
));

143 i‡(
∑cf
 =
NULL
) {

144  
NULL
;

147 
∑cf
->
nbuckës
 = 1024;

149  
∑cf
;

150 
	}
}

154 
	$ngx_πmp_∂ay_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

156 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

157 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

158 
ngx_πmp_∂ay_íåy_t
 **
µe
;

160 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ãmp_∑th
, 
¥ev
->temp_path, "/tmp");

161 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
loˇl_∑th
, 
¥ev
->local_path, "");

163 i‡(
¥ev
->
íåõs
.
√…s
 == 0) {

164 
d⁄e
;

167 i‡(
c⁄f
->
íåõs
.
√…s
 == 0) {

168 
c⁄f
->
íåõs
 = 
¥ev
->entries;

169 
d⁄e
;

172 
µe
 = 
	`ngx_¨øy_push_n
(&
c⁄f
->
íåõs
, 
¥ev
->íåõs.
√…s
);

173 i‡(
µe
 =
NULL
) {

174  
NGX_CONF_ERROR
;

177 
	`ngx_mem˝y
(
µe
, 
¥ev
->
íåõs
.
ñts
,Öªv->íåõs.
√…s
 * (*));

179 
d⁄e
:

181 i‡(
c⁄f
->
íåõs
.
√…s
 == 0) {

182  
NGX_CONF_OK
;

185 
c⁄f
->
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* c⁄f->
nbuckës
);

186 i‡(
c⁄f
->
˘x
 =
NULL
) {

187  
NGX_CONF_ERROR
;

190  
NGX_CONF_OK
;

191 
	}
}

194 
ngx_öt_t


195 
	$ngx_πmp_∂ay_joö
(
ngx_πmp_£ssi⁄_t
 *
s
)

197 
ngx_πmp_∂ay_˘x_t
 *
˘x
, **
p˘x
;

198 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

199 
ngx_uöt_t
 
h
;

201 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

204 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

206 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

207 i‡(
˘x
 =
NULL
 || ctx->
joöed
) {

208  
NGX_ERROR
;

211 
h
 = 
	`ngx_hash_key
(
˘x
->
«me
, 
	`ngx_°æí
(ctx->name));

212 
p˘x
 = &
∑cf
->
˘x
[
h
 %Öacf->
nbuckës
];

214 *
p˘x
) {

215 i‡(!
	`ngx_°∫cmp
((*
p˘x
)->
«me
, 
˘x
->«me, 
NGX_RTMP_MAX_NAME
)) {

218 
p˘x
 = &(*p˘x)->
√xt
;

221 
˘x
->
√xt
 = *
p˘x
;

222 *
p˘x
 = 
˘x
;

223 
˘x
->
joöed
 = 1;

225  
NGX_OK
;

226 
	}
}

229 
ngx_öt_t


230 
	$ngx_πmp_∂ay_Àave
(
ngx_πmp_£ssi⁄_t
 *
s
)

232 
ngx_πmp_∂ay_˘x_t
 *
˘x
, **
p˘x
;

233 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

234 
ngx_uöt_t
 
h
;

236 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

239 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

241 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

242 i‡(
˘x
 =
NULL
 || !˘x->
joöed
) {

243  
NGX_ERROR
;

246 
h
 = 
	`ngx_hash_key
(
˘x
->
«me
, 
	`ngx_°æí
(ctx->name));

247 
p˘x
 = &
∑cf
->
˘x
[
h
 %Öacf->
nbuckës
];

249 *
p˘x
 && *p˘x !
˘x
) {

250 
p˘x
 = &(*p˘x)->
√xt
;

253 i‡(*
p˘x
 =
NULL
) {

254  
NGX_ERROR
;

257 *
p˘x
 = (*p˘x)->
√xt
;

258 
˘x
->
joöed
 = 0;

260  
NGX_OK
;

261 
	}
}

265 
	$ngx_πmp_∂ay_£nd
(
ngx_evít_t
 *
e
)

267 
ngx_πmp_£ssi⁄_t
 *
s
 = 
e
->
d©a
;

268 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

269 
ngx_öt_t
 
rc
;

270 
ngx_uöt_t
 
ts
;

272 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

274 i‡(
˘x
 =
NULL
 || ctx->
fmt
 =NULL || ctx->fmt->
£nd
 == NULL) {

278 
ts
 = 0;

280 
rc
 = 
˘x
->
fmt
->
	`£nd
(
s
, &˘x->
fûe
, &
ts
);

282 i‡(
rc
 > 0) {

283 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

284 "∂ay: síd scheduÀ %i", 
rc
);

286 
	`ngx_add_timî
(
e
, 
rc
);

290 i‡(
rc
 =
NGX_AGAIN
) {

291 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

294 
	`ngx_po°_evít
(
e
, &
s
->
po°ed_dry_evíts
);

298 i‡(
rc
 =
NGX_OK
) {

299 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

302 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

307 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

310 
	`ngx_πmp_£nd_°ªam_eof
(
s
, 
NGX_RTMP_MSID
);

312 
	`ngx_πmp_£nd_∂ay_°©us
(
s
, "NëSåóm.Pœy.Com∂ëe", "°©us", 
ts
, 0);

314 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Play.Stop", "status", "Stopped");

315 
	}
}

318 
ngx_öt_t


319 
	$ngx_πmp_∂ay_do_öô
(
ngx_πmp_£ssi⁄_t
 *
s
)

321 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

323 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

325 i‡(
˘x
 =
NULL
) {

326  
NGX_ERROR
;

329 i‡(
˘x
->
fmt
 && ctx->fmt->
öô
 &&

330 
˘x
->
fmt
->
	`öô
(
s
, &˘x->
fûe
, ctx->
aödex
, ctx->
vödex
Ë!
NGX_OK
)

332  
NGX_ERROR
;

335  
NGX_OK
;

336 
	}
}

339 
ngx_öt_t


340 
	$ngx_πmp_∂ay_do_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
)

342 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

344 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

346 i‡(
˘x
 =
NULL
) {

347  
NGX_ERROR
;

350 i‡(
˘x
->
fmt
 && ctx->fmt->
d⁄e
 &&

351 
˘x
->
fmt
->
	`d⁄e
(
s
, &˘x->
fûe
Ë!
NGX_OK
)

353  
NGX_ERROR
;

356  
NGX_OK
;

357 
	}
}

360 
ngx_öt_t


361 
	$ngx_πmp_∂ay_do_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
)

363 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

365 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

367 i‡(
˘x
 =
NULL
) {

368  
NGX_ERROR
;

371 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

374 i‡(
˘x
->
fmt
 && ctx->fmt->
°¨t
 &&

375 
˘x
->
fmt
->
	`°¨t
(
s
, &˘x->
fûe
Ë!
NGX_OK
)

377  
NGX_ERROR
;

380 
	`ngx_po°_evít
((&
˘x
->
£nd_evt
), &
ngx_po°ed_evíts
);

382 
˘x
->
∂ayög
 = 1;

384  
NGX_OK
;

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_πmp_∂ay_do_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
time°amp
)

391 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

393 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

395 i‡(
˘x
 =
NULL
) {

396  
NGX_ERROR
;

399 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

400 "∂ay: sìkÅime°amp=%ui", 
time°amp
);

402 i‡(
˘x
->
fmt
 && ctx->fmt->
£ek
 &&

403 
˘x
->
fmt
->
	`£ek
(
s
, &˘x->
fûe
, 
time°amp
Ë!
NGX_OK
)

405  
NGX_ERROR
;

408 i‡(
˘x
->
∂ayög
) {

409 
	`ngx_po°_evít
((&
˘x
->
£nd_evt
), &
ngx_po°ed_evíts
);

412  
NGX_OK
;

413 
	}
}

416 
ngx_öt_t


417 
	$ngx_πmp_∂ay_do_°›
(
ngx_πmp_£ssi⁄_t
 *
s
)

419 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

421 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

423 i‡(
˘x
 =
NULL
) {

424  
NGX_ERROR
;

427 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

430 i‡(
˘x
->
£nd_evt
.
timî_£t
) {

431 
	`ngx_dñ_timî
(&
˘x
->
£nd_evt
);

434 #i‡(
ngöx_vîsi⁄
 >= 1007005)

435 i‡(
˘x
->
£nd_evt
.
po°ed
)

437 i‡(
˘x
->
£nd_evt
.
¥ev
)

440 
	`ngx_dñëe_po°ed_evít
((&
˘x
->
£nd_evt
));

443 i‡(
˘x
->
fmt
 && ctx->fmt->
°›
 &&

444 
˘x
->
fmt
->
	`°›
(
s
, &˘x->
fûe
Ë!
NGX_OK
)

446  
NGX_ERROR
;

449 
˘x
->
∂ayög
 = 0;

451  
NGX_OK
;

452 
	}
}

457 
u_ch¨
 *

458 
	$ngx_πmp_∂ay_gë_loˇl_fûe_∑th
(
ngx_πmp_£ssi⁄_t
 *
s
)

460 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

461 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

462 
u_ch¨
 *
p
;

463 
u_ch¨
 
∑th
[
NGX_MAX_PATH
 + 1];

465 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

467 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

469 
p
 = 
	`ngx_¢¥ötf
(
∑th
, 
NGX_MAX_PATH
, "%V/" 
NGX_RTMP_PLAY_TMP_FILE
 "%ui",

470 &
∑cf
->
ãmp_∑th
, 
˘x
->
fûe_id
);

471 *
p
 = 0;

473  
∑th
;

474 
	}
}

478 
	$ngx_πmp_∂ay_c›y_loˇl_fûe
(
ngx_πmp_£ssi⁄_t
 *
s
, 
u_ch¨
 *
«me
)

480 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

481 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

482 
u_ch¨
 *
∑th
, *
p
;

483 
u_ch¨
 
d∑th
[
NGX_MAX_PATH
 + 1];

485 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

486 i‡(
∑cf
 =
NULL
) {

490 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

491 i‡(
˘x
 =
NULL
 || ctx->
fûe_id
 == 0) {

495 
∑th
 = 
	`ngx_πmp_∂ay_gë_loˇl_fûe_∑th
(
s
);

497 
p
 = 
	`ngx_¢¥ötf
(
d∑th
, 
NGX_MAX_PATH
, "%V/%s%V", &
∑cf
->
loˇl_∑th
,

498 
«me
 + 
˘x
->
pfx_size
, &˘x->
sfx
);

499 *
p
 = 0;

501 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

502 "∂ay: c›yÜoˇ»fûê'%s'Åÿ'%s'", 
∑th
, 
d∑th
);

504 i‡(
	`ngx_ª«me_fûe
(
∑th
, 
d∑th
) == 0) {

505 
˘x
->
fûe_id
 = 0;

509 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

511 
∑th
, 
d∑th
);

513 
	`ngx_πmp_∂ay_˛ónup_loˇl_fûe
(
s
);

514 
	}
}

518 
	$ngx_πmp_∂ay_˛ónup_loˇl_fûe
(
ngx_πmp_£ssi⁄_t
 *
s
)

520 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

521 
u_ch¨
 *
∑th
;

523 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

524 i‡(
˘x
 =
NULL
 || ctx->
fûe_id
 == 0) {

528 
∑th
 = 
	`ngx_πmp_∂ay_gë_loˇl_fûe_∑th
(
s
);

530 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

531 "∂ay: dñëögÜoˇ»fûê'%s'", 
∑th
);

533 
˘x
->
fûe_id
 = 0;

535 
	`ngx_dñëe_fûe
(
∑th
);

536 
	}
}

539 
ngx_öt_t


540 
	$ngx_πmp_∂ay_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_˛o£_°ªam_t
 *
v
)

542 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

544 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

545 i‡(
˘x
 =
NULL
) {

546 
√xt
;

549 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

552 
	`ngx_πmp_∂ay_do_°›
(
s
);

554 
	`ngx_πmp_∂ay_do_d⁄e
(
s
);

556 i‡(
˘x
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

557 
	`ngx_˛o£_fûe
(
˘x
->
fûe
.
fd
);

558 
˘x
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

560 
	`ngx_πmp_£nd_°ªam_eof
(
s
, 
NGX_RTMP_MSID
);

562 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Play.Stop", "status",

566 i‡(
˘x
->
fûe_id
) {

567 
	`ngx_πmp_∂ay_˛ónup_loˇl_fûe
(
s
);

570 
	`ngx_πmp_∂ay_Àave
(
s
);

572 
√xt
:

573  
	`√xt_˛o£_°ªam
(
s
, 
v
);

574 
	}
}

577 
ngx_öt_t


578 
	$ngx_πmp_∂ay_£ek
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_£ek_t
 *
v
)

580 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

582 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

583 i‡(
˘x
 =
NULL
 || ctx->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

584 
√xt
;

587 i‡(!
˘x
->
›íed
) {

588 
˘x
->
po°_£ek
 = (
ngx_uöt_t
Ë
v
->
off£t
;

589 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

590 "∂ay:Öo° sìk=%ui", 
˘x
->
po°_£ek
);

591 
√xt
;

594 i‡(
	`ngx_πmp_£nd_°ªam_eof
(
s
, 
NGX_RTMP_MSID
Ë!
NGX_OK
) {

595  
NGX_ERROR
;

598 
	`ngx_πmp_∂ay_do_£ek
(
s
, (
ngx_uöt_t
Ë
v
->
off£t
);

600 i‡(
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Seek.Notify", "status", "Seeking")

601 !
NGX_OK
)

603  
NGX_ERROR
;

606 i‡(
	`ngx_πmp_£nd_°ªam_begö
(
s
, 
NGX_RTMP_MSID
Ë!
NGX_OK
) {

607  
NGX_ERROR
;

610 
√xt
:

611  
	`√xt_£ek
(
s
, 
v
);

612 
	}
}

615 
ngx_öt_t


616 
	$ngx_πmp_∂ay_∑u£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∑u£_t
 *
v
)

618 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

620 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

622 i‡(
˘x
 =
NULL
 || ctx->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

623 
√xt
;

626 i‡(!
˘x
->
›íed
) {

627 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

629 
√xt
;

632 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

634 (
ngx_öt_t
Ë
v
->
∑u£
, v->
posôi⁄
);

636 i‡(
v
->
∑u£
) {

637 i‡(
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Pause.Notify", "status",

639 !
NGX_OK
)

641  
NGX_ERROR
;

644 
	`ngx_πmp_∂ay_do_°›
(
s
);

647 i‡(
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Unpause.Notify", "status",

649 !
NGX_OK
)

651  
NGX_ERROR
;

654 
	`ngx_πmp_∂ay_do_°¨t
(
s
);

657 
√xt
:

658  
	`√xt_∑u£
(
s
, 
v
);

659 
	}
}

662 
ngx_öt_t


663 
	$ngx_πmp_∂ay_∑r£_ödex
(
ty≥
, 
u_ch¨
 *
¨gs
)

665 
u_ch¨
 *
p
, 
c
;

666 
u_ch¨
 
«me
[] = "xindex=";

668 
«me
[0] = (
u_ch¨
Ë
ty≥
;

671 
p
 = (
u_ch¨
 *Ë
	`ngx_°r°r
(
¨gs
, 
«me
);

672 i‡(
p
 =
NULL
) {

676 i‡(
p
 !
¨gs
) {

677 
c
 = *(
p
 - 1);

678 i‡(
c
 != '?' && c != '&') {

679 
¨gs
 = 
p
 + 1;

684  
	`©oi
((*Ë
p
 + ((
«me
) - 1));

686 
	}
}

689 
ngx_öt_t


690 
	$ngx_πmp_∂ay_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

692 
ngx_πmp_∂ay_maö_c⁄f_t
 *
pmcf
;

693 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

694 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

695 
u_ch¨
 *
p
;

696 
ngx_πmp_∂ay_fmt_t
 *
fmt
, **
pfmt
;

697 
ngx_°r_t
 *
pfx
, *
sfx
;

698 
ngx_°r_t
 
«me
;

699 
ngx_uöt_t
 
n
;

701 
pmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

703 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

705 i‡(
∑cf
 =
NULL
 ||Öacf->
íåõs
.
√…s
 == 0) {

706 
√xt
;

709 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

711 
v
->
«me
, (
ngx_öt_t
Ëv->
°¨t
);

713 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

715 i‡(
˘x
 && ctx->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

718 
√xt
;

723 
p
 = 
v
->
«me
; *p; ++p) {

724 i‡(
	`ngx_∑th_£∑øt‹
(
p
[0]) &&

725 
p
[1] == '.' &&Ö[2] == '.' &&

726 
	`ngx_∑th_£∑øt‹
(
p
[3]))

728 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

729 "∂ay: badÇamê'%s'", 
v
->
«me
);

730  
NGX_ERROR
;

734 i‡(
˘x
 =
NULL
) {

735 
˘x
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_∂ay_˘x_t
));

736 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_∂ay_moduÀ
);

739 
	`ngx_memzîo
(
˘x
, (*ctx));

741 
˘x
->
£ssi⁄
 = 
s
;

742 
˘x
->
aödex
 = 
	`ngx_πmp_∂ay_∑r£_ödex
('a', 
v
->
¨gs
);

743 
˘x
->
vödex
 = 
	`ngx_πmp_∂ay_∑r£_ödex
('v', 
v
->
¨gs
);

745 
˘x
->
fûe
.
log
 = 
s
->
c⁄√˘i⁄
->log;

747 
	`ngx_mem˝y
(
˘x
->
«me
, 
v
->«me, 
NGX_RTMP_MAX_NAME
);

749 
«me
.
Àn
 = 
	`ngx_°æí
(
v
->name);

750 
«me
.
d©a
 = 
v
->name;

752 
pfmt
 = 
pmcf
->
fmts
.
ñts
;

754 
n
 = 0;Ç < 
pmcf
->
fmts
.
√…s
; ++n, ++
pfmt
) {

755 
fmt
 = *
pfmt
;

757 
pfx
 = &
fmt
->pfx;

758 
sfx
 = &
fmt
->sfx;

760 i‡(
pfx
->
Àn
 =0 && 
˘x
->
fmt
 =
NULL
) {

761 
˘x
->
fmt
 = fmt;

764 i‡(
pfx
->
Àn
 && 
«me
.len >=Öfx->len &&

765 
	`ngx_°∫ˇ£cmp
(
pfx
->
d©a
, 
«me
.d©a,Öfx->
Àn
) == 0)

767 
˘x
->
pfx_size
 = 
pfx
->
Àn
;

768 
˘x
->
fmt
 = fmt;

773 i‡(
«me
.
Àn
 >
sfx
->len &&

774 
	`ngx_°∫ˇ£cmp
(
sfx
->
d©a
, 
«me
.d©®+Çame.
Àn
 - sfx->len,

775 
sfx
->
Àn
) == 0)

777 
˘x
->
fmt
 = fmt;

781 i‡(
˘x
->
fmt
 =
NULL
) {

782 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

784 
√xt
;

787 
˘x
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

788 
˘x
->
√¡ry
 = 
NGX_CONF_UNSET_UINT
;

789 
˘x
->
po°_£ek
 = 
NGX_CONF_UNSET_UINT
;

791 
sfx
 = &
˘x
->
fmt
->sfx;

793 i‡(
«me
.
Àn
 < 
sfx
->len ||

794 
	`ngx_°∫ˇ£cmp
(
sfx
->
d©a
, 
«me
.d©®+Çame.
Àn
 - sfx->len,

795 
sfx
->
Àn
))

797 
˘x
->
sfx
 = *sfx;

800 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

801 "∂ay: fmt=%V", &
˘x
->
fmt
->
«me
);

803  
	`ngx_πmp_∂ay_√xt_íåy
(
s
, 
v
);

805 
√xt
:

806  
	`√xt_∂ay
(
s
, 
v
);

807 
	}
}

810 
ngx_öt_t


811 
	$ngx_πmp_∂ay_√xt_íåy
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

813 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

814 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

815 
ngx_πmp_∂ay_íåy_t
 *
≥
;

816 
u_ch¨
 *
p
;

817 
u_ch¨
 
∑th
[
NGX_MAX_PATH
 + 1];

819 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

821 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

825 i‡(
˘x
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

826 
	`ngx_˛o£_fûe
(
˘x
->
fûe
.
fd
);

827 
˘x
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

830 i‡(
˘x
->
fûe_id
) {

831 
	`ngx_πmp_∂ay_˛ónup_loˇl_fûe
(
s
);

834 
˘x
->
√¡ry
 = (˘x->√¡ry =
NGX_CONF_UNSET_UINT
 ?

835 0 : 
˘x
->
√¡ry
 + 1);

837 i‡(
˘x
->
√¡ry
 >
∑cf
->
íåõs
.
√…s
) {

838 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

841 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Play.StreamNotFound", "error",

846 
≥
 = 
	`ngx_πmp_∂ay_gë_cuºít_íåy
(
s
);

848 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

850 
≥
->
uæ
 ? "remote" : "local",

851 
˘x
->
√¡ry
 + 1, 
∑cf
->
íåõs
.
√…s
,

852 
≥
->
uæ
 ? &≥->uæ->uæ :Öe->
roŸ
);

856 i‡(
≥
->
uæ
) {

857  
	`ngx_πmp_∂ay_›í_ªmŸe
(
s
, 
v
);

862 
p
 = 
	`ngx_¢¥ötf
(
∑th
, 
NGX_MAX_PATH
, "%V/%s%V",

863 
≥
->
roŸ
, 
v
->
«me
 + 
˘x
->
pfx_size
, &˘x->
sfx
);

864 *
p
 = 0;

866 
˘x
->
fûe
.
fd
 = 
	`ngx_›í_fûe
(
∑th
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
,

867 
NGX_FILE_DEFAULT_ACCESS
);

869 i‡(
˘x
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

870 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

871 "∂ay:Éº‹ o≥nög fûê'%s'", 
∑th
);

875 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

876 "∂ay: o≥¿loˇ»fûê'%s'", 
∑th
);

878 i‡(
	`ngx_πmp_∂ay_›í
(
s
, 
v
->
°¨t
Ë!
NGX_OK
) {

879  
NGX_ERROR
;

885  
	`√xt_∂ay
(
s
, 
v
);

886 
	}
}

889 
ngx_öt_t


890 
	$ngx_πmp_∂ay_›í
(
ngx_πmp_£ssi⁄_t
 *
s
, 
°¨t
)

892 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

893 
ngx_evít_t
 *
e
;

894 
ngx_uöt_t
 
time°amp
;

896 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

898 i‡(
˘x
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

899  
NGX_ERROR
;

902 i‡(
	`ngx_πmp_£nd_°ªam_begö
(
s
, 
NGX_RTMP_MSID
Ë!
NGX_OK
) {

903  
NGX_ERROR
;

906 i‡(
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Play.Start", "status",

908 !
NGX_OK
)

910  
NGX_ERROR
;

913 i‡(
	`ngx_πmp_∂ay_joö
(
s
Ë!
NGX_OK
) {

914  
NGX_ERROR
;

917 
e
 = &
˘x
->
£nd_evt
;

918 
e
->
d©a
 = 
s
;

919 
e
->
h™dÀr
 = 
ngx_πmp_∂ay_£nd
;

920 
e
->
log
 = 
s
->
c⁄√˘i⁄
->log;

922 
	`ngx_πmp_£nd_ªc‹ded
(
s
, 1);

924 i‡(
	`ngx_πmp_£nd_ßm∂e_ac˚ss
(
s
Ë!
NGX_OK
) {

925  
NGX_ERROR
;

928 i‡(
	`ngx_πmp_∂ay_do_öô
(
s
Ë!
NGX_OK
) {

929  
NGX_ERROR
;

932 
time°amp
 = 
˘x
->
po°_£ek
 !
NGX_CONF_UNSET_UINT
 ? ctx->post_seek :

933 (
°¨t
 < 0 ? 0 : (
ngx_uöt_t
) start);

935 i‡(
	`ngx_πmp_∂ay_do_£ek
(
s
, 
time°amp
Ë!
NGX_OK
) {

936  
NGX_ERROR
;

939 i‡(
	`ngx_πmp_∂ay_do_°¨t
(
s
Ë!
NGX_OK
) {

940  
NGX_ERROR
;

943 
˘x
->
›íed
 = 1;

945  
NGX_OK
;

946 
	}
}

949 
ngx_chaö_t
 *

950 
	$ngx_πmp_∂ay_ªmŸe_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
, 
ngx_poﬁ_t
 *
poﬁ
)

952 
ngx_πmp_∂ay_t
 *
v
 = 
¨g
;

954 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

955 
ngx_πmp_∂ay_íåy_t
 *
≥
;

956 
ngx_°r_t
 *
addr_ãxt
, 
uri
;

957 
u_ch¨
 *
p
, *
«me
;

958 
size_t
 
¨gs_Àn
, 
«me_Àn
, 
Àn
;

959 
ngx_°r_t
 
ãxt_∂aö
 = 
	`ngx_°rög
("text/plain");

961 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

963 
≥
 = 
	`ngx_πmp_∂ay_gë_cuºít_íåy
(
s
);

965 
«me
 = 
v
->«mê+ 
˘x
->
pfx_size
;

967 
«me_Àn
 = 
	`ngx_°æí
(
«me
);

968 
¨gs_Àn
 = 
	`ngx_°æí
(
v
->
¨gs
);

969 
addr_ãxt
 = &
s
->
c⁄√˘i⁄
->addr_text;

971 
Àn
 = 
≥
->
uæ
->
uri
.len + 1 +

972 
«me_Àn
 + 
˘x
->
sfx
.
Àn
 +

973 ("?addr="Ë+ 
addr_ãxt
->
Àn
 * 3 +

974 1 + 
¨gs_Àn
;

976 
uri
.
d©a
 = 
	`ngx_∑Œoc
(
poﬁ
, 
Àn
);

977 i‡(
uri
.
d©a
 =
NULL
) {

978  
NULL
;

981 
p
 = 
uri
.
d©a
;

983 
p
 = 
	`ngx_˝ymem
’, 
≥
->
uæ
->
uri
.
d©a
,Öe->uæ->uri.
Àn
);

985 i‡(
p
 =
uri
.
d©a
 ||Ö[-1] != '/') {

986 *
p
++ = '/';

989 
p
 = 
	`ngx_˝ymem
’, 
«me
, 
«me_Àn
);

990 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
sfx
.
d©a
, ctx->sfx.
Àn
);

991 
p
 = 
	`ngx_˝ymem
’, (
u_ch¨
*)"?addr=", ("&addr=") -1);

992 
p
 = (
u_ch¨
*)
	`ngx_esˇ≥_uri
’, 
addr_ãxt
->
d©a
,áddr_ãxt->
Àn
,

993 
NGX_ESCAPE_ARGS
);

994 i‡(
¨gs_Àn
) {

995 *
p
++ = '&';

996 
p
 = (
u_ch¨
 *Ë
	`ngx_˝ymem
’, 
v
->
¨gs
, 
¨gs_Àn
);

999 
uri
.
Àn
 = 
p
 - uri.
d©a
;

1001  
	`ngx_πmp_√tˇŒ_hâp_f‹m©_ªque°
(
NGX_RTMP_NETCALL_HTTP_GET
,

1002 &
≥
->
uæ
->
ho°
, &
uri
,

1003 
NULL
, NULL, 
poﬁ
, &
ãxt_∂aö
);

1004 
	}
}

1007 
ngx_öt_t


1008 
	$ngx_πmp_∂ay_ªmŸe_h™dÀ
(
ngx_πmp_£ssi⁄_t
 *
s
, *
¨g
, 
ngx_chaö_t
 *
ö
)

1010 
ngx_πmp_∂ay_t
 *
v
 = 
¨g
;

1012 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

1014 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

1016 i‡(
˘x
->
nbody
 == 0) {

1017  
	`ngx_πmp_∂ay_√xt_íåy
(
s
, 
v
);

1020 i‡(
˘x
->
fûe_id
) {

1021 
	`ngx_πmp_∂ay_c›y_loˇl_fûe
(
s
, 
v
->
«me
);

1024 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1027 i‡(
	`ngx_πmp_∂ay_›í
(
s
, 
v
->
°¨t
Ë!
NGX_OK
) {

1028  
NGX_ERROR
;

1031  
	`√xt_∂ay
(
s
, (
ngx_πmp_∂ay_t
 *)
¨g
);

1032 
	}
}

1035 
ngx_öt_t


1036 
	$ngx_πmp_∂ay_ªmŸe_sök
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
)

1038 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

1039 
ngx_buf_t
 *
b
;

1040 
ngx_öt_t
 
rc
;

1042 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

1045 
ö
 && 
˘x
->
n¸s
 != 2) {

1046 
b
 = 
ö
->
buf
;

1048 ; 
b
->
pos
 !b->
œ°
 && 
˘x
->
n¸s
 != 2; ++b->pos) {

1049 *
b
->
pos
) {

1051 ++
˘x
->
n¸s
;

1055 
˘x
->
n¸s
 = 0;

1058 i‡(++
˘x
->
nhódî
 =10 && *
b
->
pos
 !(
u_ch¨
) '2') {

1059 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1061 *
b
->
pos
);

1062  
NGX_ERROR
;

1066 i‡(
b
->
pos
 =b->
œ°
) {

1067 
ö
 = in->
√xt
;

1072 ; 
ö
; i¿ö->
√xt
) {

1073 
b
 = 
ö
->
buf
;

1075 i‡(
b
->
pos
 =b->
œ°
) {

1079 
rc
 = 
	`ngx_wrôe_fd
(
˘x
->
fûe
.
fd
, 
b
->
pos
, b->
œ°
 - b->pos);

1081 i‡(
rc
 =
NGX_ERROR
) {

1082 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1084  
NGX_ERROR
;

1087 
˘x
->
nbody
 +
rc
;

1090  
NGX_OK
;

1091 
	}
}

1094 
ngx_πmp_∂ay_íåy_t
 *

1095 
	$ngx_πmp_∂ay_gë_cuºít_íåy
(
ngx_πmp_£ssi⁄_t
 *
s
)

1097 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

1098 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

1099 
ngx_πmp_∂ay_íåy_t
 **
µe
;

1101 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

1103 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

1105 
µe
 = 
∑cf
->
íåõs
.
ñts
;

1107  
µe
[
˘x
->
√¡ry
];

1108 
	}
}

1111 
ngx_öt_t


1112 
	$ngx_πmp_∂ay_›í_ªmŸe
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

1114 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
;

1115 
ngx_πmp_∂ay_˘x_t
 *
˘x
;

1116 
ngx_πmp_∂ay_íåy_t
 *
≥
;

1117 
ngx_πmp_√tˇŒ_öô_t
 
ci
;

1118 
u_ch¨
 *
∑th
;

1119 
ngx_îr_t
 
îr
;

1120 
ngx_uöt_t
 
fûe_id
;

1122 
∑cf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_∂ay_moduÀ
);

1124 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_∂ay_moduÀ
);

1126 
˘x
->
n¸s
 = 0;

1127 
˘x
->
nhódî
 = 0;

1128 
˘x
->
nbody
 = 0;

1131 
˘x
->
fûe_id
 = ++file_id;

1134 i‡(
˘x
->
fûe_id
 == 0) {

1138 
∑th
 = 
	`ngx_πmp_∂ay_gë_loˇl_fûe_∑th
(
s
);

1140 
˘x
->
fûe
.
fd
 = 
	`ngx_›í_ãmpfûe
(
∑th
, 
∑cf
->
loˇl_∑th
.
Àn
, 0);

1142 i‡(
∑cf
->
loˇl_∑th
.
Àn
 == 0) {

1143 
˘x
->
fûe_id
 = 0;

1146 i‡(
˘x
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

1150 
îr
 = 
ngx_î∫o
;

1152 i‡(
îr
 !
NGX_EEXIST
) {

1153 
˘x
->
fûe_id
 = 0;

1155 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 
îr
,

1158  
NGX_ERROR
;

1162 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1164 
∑th
, 
˘x
->
fûe_id
);

1166 
≥
 = 
	`ngx_πmp_∂ay_gë_cuºít_íåy
(
s
);

1168 
	`ngx_memzîo
(&
ci
, (ci));

1170 
ci
.
uæ
 = 
≥
->url;

1171 
ci
.
¸óã
 = 
ngx_πmp_∂ay_ªmŸe_¸óã
;

1172 
ci
.
sök
 = 
ngx_πmp_∂ay_ªmŸe_sök
;

1173 
ci
.
h™dÀ
 = 
ngx_πmp_∂ay_ªmŸe_h™dÀ
;

1174 
ci
.
¨g
 = 
v
;

1175 
ci
.
¨gsize
 = (*
v
);

1177  
	`ngx_πmp_√tˇŒ_¸óã
(
s
, &
ci
);

1178 
	}
}

1182 
	$ngx_πmp_∂ay_uæ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1184 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
 = 
c⁄f
;

1186 
ngx_πmp_∂ay_íåy_t
 *
≥
, **
µe
;

1187 
ngx_°r_t
 
uæ
;

1188 
ngx_uæ_t
 *
u
;

1189 
size_t
 
add
, 
n
;

1190 
ngx_°r_t
 *
vÆue
;

1192 i‡(
∑cf
->
íåõs
.
«Œoc
 == 0 &&

1193 
	`ngx_¨øy_öô
(&
∑cf
->
íåõs
, 
cf
->
poﬁ
, 1, (*)Ë!
NGX_OK
)

1195  
NGX_CONF_ERROR
;

1198 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1200 
n
 = 1;Ç < 
cf
->
¨gs
->
√…s
; ++n) {

1202 
µe
 = 
	`ngx_¨øy_push
(&
∑cf
->
íåõs
);

1203 i‡(
µe
 =
NULL
) {

1204  
NGX_CONF_ERROR
;

1207 
≥
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_∂ay_íåy_t
));

1208 i‡(
≥
 =
NULL
) {

1209  
NGX_CONF_ERROR
;

1212 *
µe
 = 
≥
;

1214 i‡(
	`ngx_°∫ˇ£cmp
(
vÆue
[
n
].
d©a
, (
u_ch¨
 *) "http://", 7)) {

1218 
≥
->
roŸ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

1219 i‡(
≥
->
roŸ
 =
NULL
) {

1220  
NGX_CONF_ERROR
;

1223 *
≥
->
roŸ
 = 
vÆue
[
n
];

1230 
uæ
 = 
vÆue
[
n
];

1232 
add
 = ("http://") - 1;

1234 
uæ
.
d©a
 +
add
;

1235 
uæ
.
Àn
 -
add
;

1237 
u
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_uæ_t
));

1238 i‡(
u
 =
NULL
) {

1239  
NGX_CONF_ERROR
;

1242 
u
->
uæ
.
Àn
 = url.len;

1243 
u
->
uæ
.
d©a
 = url.data;

1244 
u
->
deÁu…_p‹t
 = 80;

1245 
u
->
uri_∑π
 = 1;

1247 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

1248 i‡(
u
->
îr
) {

1249 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1250 "%†ö uæ \"%V\"", 
u
->
îr
, &u->
uæ
);

1252  
NGX_CONF_ERROR
;

1255 
≥
->
uæ
 = 
u
;

1258  
NGX_CONF_OK
;

1259 
	}
}

1262 
ngx_öt_t


1263 
	$ngx_πmp_∂ay_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1265 
√xt_∂ay
 = 
ngx_πmp_∂ay
;

1266 
ngx_πmp_∂ay
 = 
ngx_πmp_∂ay_∂ay
;

1268 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

1269 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_∂ay_˛o£_°ªam
;

1271 
√xt_£ek
 = 
ngx_πmp_£ek
;

1272 
ngx_πmp_£ek
 = 
ngx_πmp_∂ay_£ek
;

1274 
√xt_∑u£
 = 
ngx_πmp_∑u£
;

1275 
ngx_πmp_∑u£
 = 
ngx_πmp_∂ay_∑u£
;

1277  
NGX_OK
;

1278 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_play_module.h

7 #i‚de‡
_NGX_RTMP_PLAY_H_INCLUDED_


8 
	#_NGX_RTMP_PLAY_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~"ngx_πmp.h
"

14 
	~"ngx_πmp_cmd_moduÀ.h
"

17 
	$ngx_öt_t
 (*
	tngx_πmp_∂ay_öô_±
Ë(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

18 
	tngx_fûe_t
 *
	tf
, 
	tngx_öt_t
 
	taödex
,Çgx_öt_à
	tvödex
);

19 
	$ngx_öt_t
 (*
	tngx_πmp_∂ay_d⁄e_±
Ë(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

20 
	tngx_fûe_t
 *
	tf
);

21 
	$ngx_öt_t
 (*
	tngx_πmp_∂ay_°¨t_±
Ë(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

22 
	tngx_fûe_t
 *
	tf
);

23 
	$ngx_öt_t
 (*
	tngx_πmp_∂ay_£ek_±
Ë(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

24 
	tngx_fûe_t
 *
	tf
, 
	tngx_uöt_t
 
	toffs
);

25 
	$ngx_öt_t
 (*
	tngx_πmp_∂ay_°›_±
Ë(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

26 
	tngx_fûe_t
 *
	tf
);

27 
	$ngx_öt_t
 (*
	tngx_πmp_∂ay_£nd_±
Ë(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

28 
	tngx_fûe_t
 *
	tf
, 
	tngx_uöt_t
 *
	tts
);

32 
ngx_°r_t
 
«me
;

33 
ngx_°r_t
 
pfx
;

34 
ngx_°r_t
 
sfx
;

36 
ngx_πmp_∂ay_öô_±
 
öô
;

37 
ngx_πmp_∂ay_d⁄e_±
 
d⁄e
;

38 
ngx_πmp_∂ay_°¨t_±
 
°¨t
;

39 
ngx_πmp_∂ay_£ek_±
 
£ek
;

40 
ngx_πmp_∂ay_°›_±
 
°›
;

41 
ngx_πmp_∂ay_£nd_±
 
£nd
;

42 } 
	tngx_πmp_∂ay_fmt_t
;

45 
ngx_πmp_∂ay_˘x_s
 
	tngx_πmp_∂ay_˘x_t
;

48 
	sngx_πmp_∂ay_˘x_s
 {

49 
ngx_πmp_£ssi⁄_t
 *
£ssi⁄
;

50 
ngx_fûe_t
 
fûe
;

51 
ngx_πmp_∂ay_fmt_t
 *
fmt
;

52 
ngx_evít_t
 
£nd_evt
;

53 
∂ayög
:1;

54 
›íed
:1;

55 
joöed
:1;

56 
ngx_uöt_t
 
n¸s
;

57 
ngx_uöt_t
 
nhódî
;

58 
ngx_uöt_t
 
nbody
;

59 
size_t
 
pfx_size
;

60 
ngx_°r_t
 
sfx
;

61 
ngx_uöt_t
 
fûe_id
;

62 
ngx_öt_t
 
aödex
, 
vödex
;

63 
ngx_uöt_t
 
√¡ry
;

64 
ngx_uöt_t
 
po°_£ek
;

65 
u_ch¨
 
«me
[
NGX_RTMP_MAX_NAME
];

66 
ngx_πmp_∂ay_˘x_t
 *
√xt
;

71 
ngx_°r_t
 *
roŸ
;

72 
ngx_uæ_t
 *
uæ
;

73 } 
	tngx_πmp_∂ay_íåy_t
;

77 
ngx_°r_t
 
ãmp_∑th
;

78 
ngx_°r_t
 
loˇl_∑th
;

79 
ngx_¨øy_t
 
íåõs
;

80 
ngx_uöt_t
 
nbuckës
;

81 
ngx_πmp_∂ay_˘x_t
 **
˘x
;

82 } 
	tngx_πmp_∂ay_≠p_c⁄f_t
;

86 
ngx_¨øy_t
 
fmts
;

87 } 
	tngx_πmp_∂ay_maö_c⁄f_t
;

90 
ngx_moduÀ_t
 
ngx_πmp_∂ay_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_proxy_protocol.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngöx.h
>

10 
	~"ngx_πmp_¥oxy_¥Ÿocﬁ.h
"

13 
ngx_πmp_¥oxy_¥Ÿocﬁ_ªcv
(
ngx_evít_t
 *
ªv
);

17 
	$ngx_πmp_¥oxy_¥Ÿocﬁ
(
ngx_πmp_£ssi⁄_t
 *
s
)

19 
ngx_evít_t
 *
ªv
;

20 
ngx_c⁄√˘i⁄_t
 *
c
;

22 
c
 = 
s
->
c⁄√˘i⁄
;

23 
ªv
 = 
c
->
ªad
;

24 
ªv
->
h™dÀr
 = 
ngx_πmp_¥oxy_¥Ÿocﬁ_ªcv
;

26 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

29 i‡(
ªv
->
ªady
) {

32 i‡(
ngx_u£_ac˚±_muãx
) {

33 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

37 
ªv
->
	`h™dÀr
(rev);

41 
	`ngx_add_timî
(
ªv
, 
s
->
timeout
);

43 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

44 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

47 
	}
}

51 
	$ngx_πmp_¥oxy_¥Ÿocﬁ_ªcv
(
ngx_evít_t
 *
ªv
)

53 
u_ch¨
 
buf
[107], *
p
, *
µ
, *
ãxt
;

54 
size_t
 
Àn
;

55 
ssize_t
 
n
;

56 
ngx_îr_t
 
îr
;

57 
ngx_öt_t
 
i
;

58 
ngx_addr_t
 
addr
;

59 
ngx_c⁄√˘i⁄_t
 *
c
;

60 
ngx_πmp_£ssi⁄_t
 *
s
;

62 
c
 = 
ªv
->
d©a
;

63 
s
 = 
c
->
d©a
;

65 i‡(
c
->
de°royed
) {

69 i‡(
ªv
->
timedout
) {

70 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

72 
c
->
timedout
 = 1;

73 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

77 i‡(
ªv
->
timî_£t
) {

78 
	`ngx_dñ_timî
(
ªv
);

81 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, (buf), 
MSG_PEEK
);

83 
îr
 = 
ngx_sockë_î∫o
;

85 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0, "ªcv(): %d", 
n
);

87 i‡(
n
 == -1) {

89 i‡(
îr
 =
NGX_EAGAIN
) {

90 
	`ngx_add_timî
(
ªv
, 
s
->
timeout
);

92 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

93 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

99 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

104 
p
 = 
buf
;

106 i‡(
n
 <8 && 
	`ngx_°∫cmp
(
p
, "PROXY ", 6) != 0) {

107 
bad_hódî
;

110 
n
 -= 6;

111 
p
 += 6;

113 
	`ngx_memzîo
(&
addr
, (
ngx_addr_t
));

115 i‡(
n
 >7 && 
	`ngx_°∫cmp
(
p
, "UNKNOWN", 7) == 0) {

116 
n
 -= 7;

117 
p
 += 7;

118 
skù
;

121 i‡(
n
 < 5 || 
	`ngx_°∫cmp
(
p
, "TCP", 3) != 0

122 || (
p
[3] != '4' &&Ö[3] != '6') ||Ö[4] != ' ')

124 
bad_hódî
;

127 
n
 -= 5;

128 
p
 += 5;

130 
µ
 = 
	`ngx_°æchr
(
p
,Ö + 
n
, ' ');

132 i‡(
µ
 =
NULL
) {

133 
bad_hódî
;

136 i‡(
	`ngx_∑r£_addr
(
s
->
c⁄√˘i⁄
->
poﬁ
, &
addr
, 
p
, 
µ
 -ÖË!
NGX_OK
) {

137 
bad_hódî
;

140 
n
 -
µ
 - 
p
;

141 
p
 = 
µ
;

143 
skù
:

145 
i
 = 0; i + 1 < 
n
; i++) {

146 i‡(
p
[
i
] =
CR
 &&Ö[ò+ 1] =
LF
) {

151 i‡(
i
 + 1 >
n
) {

152 
bad_hódî
;

155 
n
 = 
p
 - 
buf
 + 
i
 + 2;

157 i‡(
c
->
	`ªcv
(c, 
buf
, 
n
) !=Ç) {

158 
Áûed
;

161 i‡(
addr
.
sockÀn
) {

162 
ãxt
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

164 i‡(
ãxt
 =
NULL
) {

165 
Áûed
;

168 
Àn
 = 
	`ngx_sock_¡›
(
addr
.
sockaddr
,

169 #i‡(
ngöx_vîsi⁄
 >= 1005003)

170 
addr
.
sockÀn
,

172 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

173 i‡(
Àn
 == 0) {

174 
Áûed
;

177 
c
->
sockaddr
 = 
addr
.sockaddr;

178 
c
->
sockÀn
 = 
addr
.socklen;

179 
c
->
addr_ãxt
.
d©a
 = 
ãxt
;

180 
c
->
addr_ãxt
.
Àn
 =Üen;

182 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
c
->
log
, 0,

183 "¥oxy_¥Ÿocﬁ:ÑemŸe_addr:'%V'", &
c
->
addr_ãxt
);

186 
	`ngx_πmp_h™dshake
(
s
);

190 
bad_hódî
:

192 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "proxy_protocol: bad header");

194 
Áûed
:

196 
	`ngx_πmp_föÆize_£ssi⁄
(
s
);

197 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_proxy_protocol.h

7 #i‚de‡
_NGX_RTMP_PROXY_PROTOCOL_H_INCLUDED_


8 
	#_NGX_RTMP_PROXY_PROTOCOL_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~"ngx_πmp.h
"

16 
ngx_πmp_¥oxy_¥Ÿocﬁ
(
ngx_πmp_£ssi⁄_t
 *
c
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_receive.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

10 
	~"ngx_πmp_amf.h
"

11 
	~"ngx_πmp_cmd_moduÀ.h
"

12 
	~<°rög.h
>

15 
ngx_öt_t


16 
	$ngx_πmp_¥Ÿocﬁ_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
,

17 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
)

19 
ngx_buf_t
 *
b
;

20 
u_ch¨
 *
p
;

21 
uöt32_t
 
vÆ
;

22 
uöt8_t
 
limô
;

24 
b
 = 
ö
->
buf
;

26 i‡(
b
->
œ°
 - b->
pos
 < 4) {

27 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

29 ()
h
->
ty≥
, 
b
->
œ°
 - b->
pos
);

30  
NGX_OK
;

33 
p
 = (
u_ch¨
*)&
vÆ
;

34 
p
[0] = 
b
->
pos
[3];

35 
p
[1] = 
b
->
pos
[2];

36 
p
[2] = 
b
->
pos
[1];

37 
p
[3] = 
b
->
pos
[0];

39 
h
->
ty≥
) {

40 
NGX_RTMP_MSG_CHUNK_SIZE
:

42 
	`ngx_πmp_£t_chunk_size
(
s
, 
vÆ
);

45 
NGX_RTMP_MSG_ABORT
:

49 
NGX_RTMP_MSG_ACK
:

51 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

52 "ª˚ivêack seq=%uD", 
vÆ
);

55 
NGX_RTMP_MSG_ACK_SIZE
:

57 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

58 "ª˚ivêack_size=%uD", 
vÆ
);

59 
s
->
ack_size
 = 
vÆ
;

62 
NGX_RTMP_MSG_BANDWIDTH
:

63 i‡(
b
->
œ°
 - b->
pos
 >= 5) {

64 
limô
 = *(
uöt8_t
*)&
b
->
pos
[4];

66 ()
vÆ
;

67 ()
limô
;

69 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

71 
vÆ
, ()
limô
);

79  
NGX_ERROR
;

82  
NGX_OK
;

83 
	}
}

86 
ngx_öt_t


87 
	$ngx_πmp_u£r_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

88 
ngx_chaö_t
 *
ö
)

90 
ngx_buf_t
 *
b
;

91 
u_ch¨
 *
p
;

92 
uöt16_t
 
evt
;

93 
uöt32_t
 
vÆ
;

95 
b
 = 
ö
->
buf
;

97 i‡(
b
->
œ°
 - b->
pos
 < 6) {

98 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

100 
b
->
œ°
 - b->
pos
);

101  
NGX_OK
;

104 
p
 = (
u_ch¨
*)&
evt
;

106 
p
[0] = 
b
->
pos
[1];

107 
p
[1] = 
b
->
pos
[0];

109 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

111 
	`ngx_πmp_u£r_mesßge_ty≥
(
evt
), (
ngx_öt_t
)Évt);

113 
p
 = (
u_ch¨
 *Ë&
vÆ
;

115 
p
[0] = 
b
->
pos
[5];

116 
p
[1] = 
b
->
pos
[4];

117 
p
[2] = 
b
->
pos
[3];

118 
p
[3] = 
b
->
pos
[2];

120 
evt
) {

121 
NGX_RTMP_USER_STREAM_BEGIN
:

123 
ngx_πmp_°ªam_begö_t
 
v
;

125 
v
.
msid
 = 
vÆ
;

127 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

128 "ª˚ive: såóm_begö msid=%uD", 
v
.
msid
);

130  
	`ngx_πmp_°ªam_begö
(
s
, &
v
);

133 
NGX_RTMP_USER_STREAM_EOF
:

135 
ngx_πmp_°ªam_eof_t
 
v
;

137 
v
.
msid
 = 
vÆ
;

139 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

140 "ª˚ive: såóm_eo‡msid=%uD", 
v
.
msid
);

142  
	`ngx_πmp_°ªam_eof
(
s
, &
v
);

145 
NGX_RTMP_USER_STREAM_DRY
:

147 
ngx_πmp_°ªam_dry_t
 
v
;

149 
v
.
msid
 = 
vÆ
;

151 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

152 "ª˚ive: såóm_dry msid=%uD", 
v
.
msid
);

154  
	`ngx_πmp_°ªam_dry
(
s
, &
v
);

157 
NGX_RTMP_USER_SET_BUFLEN
:

159 
ngx_πmp_£t_buÊí_t
 
v
;

161 
v
.
msid
 = 
vÆ
;

163 i‡(
b
->
œ°
 - b->
pos
 < 10) {

164  
NGX_OK
;

167 
p
 = (
u_ch¨
 *Ë&
v
.
buÊí
;

169 
p
[0] = 
b
->
pos
[9];

170 
p
[1] = 
b
->
pos
[8];

171 
p
[2] = 
b
->
pos
[7];

172 
p
[3] = 
b
->
pos
[6];

174 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

176 
v
.
msid
, v.
buÊí
);

179 
s
->
buÊí
 = 
v
.buflen;

181  
	`ngx_πmp_£t_buÊí
(
s
, &
v
);

184 
NGX_RTMP_USER_RECORDED
:

186 
ngx_πmp_ªc‹ded_t
 
v
;

188 
v
.
msid
 = 
vÆ
;

190 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

191 "ª˚ive:Ñec‹ded msid=%uD", 
v
.
msid
);

193  
	`ngx_πmp_ªc‹ded
(
s
, &
v
);

196 
NGX_RTMP_USER_PING_REQUEST
:

197  
	`ngx_πmp_£nd_pög_ª•⁄£
(
s
, 
vÆ
);

199 
NGX_RTMP_USER_PING_RESPONSE
:

203 
	`ngx_πmp_ª£t_pög
(
s
);

205  
NGX_OK
;

208 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

209 "u√x≥˘ed u£∏evít: %i", (
ngx_öt_t
Ë
evt
);

211  
NGX_OK
;

213 
	}
}

216 
ngx_öt_t


217 
	$ngx_πmp_„tch
(
ngx_chaö_t
 **
ö
, 
u_ch¨
 *
ªt
)

219 *
ö
 && (*ö)->
buf
->
pos
 >(*ö)->buf->
œ°
) {

220 *
ö
 = (*ö)->
√xt
;

223 i‡(*
ö
 =
NULL
) {

224  
NGX_DONE
;

227 *
ªt
 = *(*
ö
)->
buf
->
pos
++;

229  
NGX_OK
;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_πmp_„tch_uöt8
(
ngx_chaö_t
 **
ö
, 
uöt8_t
 *
ªt
)

236  
	`ngx_πmp_„tch
(
ö
, (
u_ch¨
 *Ë
ªt
);

237 
	}
}

240 
ngx_öt_t


241 
	$ngx_πmp_„tch_uöt32
(
ngx_chaö_t
 **
ö
, 
uöt32_t
 *
ªt
, 
ngx_öt_t
 
n
)

243 
u_ch¨
 *
r
 = (u_ch¨ *Ë
ªt
;

244 
ngx_öt_t
 
rc
;

246 *
ªt
 = 0;

248 --
n
 >= 0) {

249 
rc
 = 
	`ngx_πmp_„tch
(
ö
, &
r
[
n
]);

250 i‡(
rc
 !
NGX_OK
) {

251  
rc
;

255  
NGX_OK
;

256 
	}
}

259 
ngx_öt_t


260 
	$ngx_πmp_aggªg©e_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

261 
ngx_chaö_t
 *
ö
)

263 
uöt32_t
 
ba£_time
, 
time°amp
, 
¥ev_size
;

264 
size_t
 
Àn
;

265 
ngx_öt_t
 
fú°
;

266 
u_ch¨
 *
œ°
;

267 
ngx_öt_t
 
rc
;

268 
ngx_buf_t
 *
b
;

269 
ngx_chaö_t
 *
˛
, *
√xt
;

270 
ngx_πmp_hódî_t
 
ch
;

272 
ch
 = *
h
;

274 
fú°
 = 1;

275 
ba£_time
 = 0;

277 
ö
) {

278 i‡(
	`ngx_πmp_„tch_uöt8
(&
ö
, &
ch
.
ty≥
Ë!
NGX_OK
) {

279  
NGX_OK
;

282 i‡(
	`ngx_πmp_„tch_uöt32
(&
ö
, &
ch
.
mÀn
, 3Ë!
NGX_OK
) {

283  
NGX_ERROR
;

286 i‡(
	`ngx_πmp_„tch_uöt32
(&
ö
, &
time°amp
, 3Ë!
NGX_OK
) {

287  
NGX_ERROR
;

290 i‡(
	`ngx_πmp_„tch_uöt8
(&
ö
, (
uöt8_t
 *Ë&
time°amp
 + 3Ë!
NGX_OK
)

292  
NGX_ERROR
;

295 i‡(
	`ngx_πmp_„tch_uöt32
(&
ö
, &
ch
.
msid
, 3Ë!
NGX_OK
)

297  
NGX_ERROR
;

300 i‡(
fú°
) {

301 
ba£_time
 = 
time°amp
;

302 
fú°
 = 0;

305 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

307 
	`ngx_πmp_mesßge_ty≥
(
ch
.
ty≥
),

308 (
ngx_öt_t
Ë
ch
.
ty≥
, ch.
mÀn
, ch.
time°amp
,

309 
time°amp
 - 
ba£_time
, 
ch
.
msid
);

313 
Àn
 = 0;

314 
˛
 = 
ö
;

315 
˛
) {

316 
b
 = 
˛
->
buf
;

317 
Àn
 +(
b
->
œ°
 - b->
pos
);

318 i‡(
Àn
 > 
ch
.
mÀn
) {

321 
˛
 = cl->
√xt
;

324 i‡(
˛
 =
NULL
) {

325 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

327  
NGX_ERROR
;

330 
√xt
 = 
˛
->next;

331 
˛
->
√xt
 = 
NULL
;

332 
b
 = 
˛
->
buf
;

333 
œ°
 = 
b
->last;

334 
b
->
œ°
 -(
Àn
 - 
ch
.
mÀn
);

338 
ch
.
time°amp
 = 
h
->time°am∞+Åime°am∞- 
ba£_time
;

340 
rc
 = 
	`ngx_πmp_ª˚ive_mesßge
(
s
, &
ch
, 
ö
);

344 
ö
 = 
˛
;

345 
ö
->
√xt
 =Çext;

346 
b
->
pos
 = b->
œ°
;

347 
b
->
œ°
 =Üast;

349 i‡(
rc
 !
NGX_OK
) {

350  
rc
;

355 i‡(
	`ngx_πmp_„tch_uöt32
(&
ö
, &
¥ev_size
, 4Ë!
NGX_OK
) {

356  
NGX_OK
;

359 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

360 "RTMPággªg©ê¥ev_size=%uD", 
¥ev_size
);

363  
NGX_OK
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_πmp_amf_mesßge_h™dÀr
(
ngx_πmp_£ssi⁄_t
 *
s
,

369 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
)

371 
ngx_πmp_amf_˘x_t
 
a˘
;

372 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

373 
ngx_¨øy_t
 *
ch
;

374 
ngx_πmp_h™dÀr_±
 *
ph
;

375 
size_t
 
Àn
, 
n
;

377 
u_ch¨
 
func
[128];

379 
ngx_πmp_amf_ñt_t
 
ñts
[] = {

381 { 
NGX_RTMP_AMF_STRING
,

382 
ngx_nuŒ_°rög
,

383 
func
, (func) },

388 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_AMF_SHARED
 ||

389 
h
->
ty≥
 =
NGX_RTMP_MSG_AMF3_SHARED
)

391 
ñts
[0].
ty≥
 |
NGX_RTMP_AMF_TYPELESS
;

393 
ñts
[0].
ty≥
 &~
NGX_RTMP_AMF_TYPELESS
;

396 i‡((
h
->
ty≥
 =
NGX_RTMP_MSG_AMF3_SHARED
 ||

397 
h
->
ty≥
 =
NGX_RTMP_MSG_AMF3_META
 ||

398 
h
->
ty≥
 =
NGX_RTMP_MSG_AMF3_CMD
)

399 && 
ö
->
buf
->
œ°
 > in->buf->
pos
)

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

402 "AMF3Öªfix: %ui", (
ngx_öt_t
)*
ö
->
buf
->
pos
);

403 ++
ö
->
buf
->
pos
;

406 
cmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

409 
	`ngx_memzîo
(&
a˘
, (act));

410 
a˘
.
lök
 = 
ö
;

411 
a˘
.
log
 = 
s
->
c⁄√˘i⁄
->log;

412 
	`mem£t
(
func
, 0, (func));

414 i‡(
	`ngx_πmp_amf_ªad
(&
a˘
, 
ñts
,

415 (
ñts
Ë/ ”…s[0])Ë!
NGX_OK
)

417 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

419  
NGX_ERROR
;

423 
ö
 = 
a˘
.
lök
;

424 
ö
->
buf
->
pos
 +
a˘
.
off£t
;

426 
Àn
 = 
	`ngx_°æí
(
func
);

428 
ch
 = 
	`ngx_hash_föd
(&
cmcf
->
amf_hash
,

429 
	`ngx_hash_°æow
(
func
, func, 
Àn
), func,Üen);

431 i‡(
ch
 && ch->
√…s
) {

432 
ph
 = 
ch
->
ñts
;

433 
n
 = 0;Ç < 
ch
->
√…s
; ++n, ++
ph
) {

434 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

436 
func
, 
n
, 
ch
->
√…s
);

437 (*
ph
)(
s
, 
h
, 
ö
)) {

438 
NGX_ERROR
:

439  
NGX_ERROR
;

440 
NGX_DONE
:

441  
NGX_OK
;

445 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

446 "AMF cmd '%s'Çÿh™dÀr", 
func
);

449  
NGX_OK
;

450 
	}
}

453 
ngx_öt_t


454 
	$ngx_πmp_ª˚ive_amf
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
,

455 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
)

457 
ngx_πmp_amf_˘x_t
 
a˘
;

459 
	`ngx_memzîo
(&
a˘
, (act));

460 
a˘
.
lök
 = 
ö
;

461 
a˘
.
log
 = 
s
->
c⁄√˘i⁄
->log;

463  
	`ngx_πmp_amf_ªad
(&
a˘
, 
ñts
, 
√…s
);

464 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_record_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

10 
	~"ngx_πmp_cmd_moduÀ.h
"

11 
	~"ngx_πmp_√tˇŒ_moduÀ.h
"

12 
	~"ngx_πmp_codec_moduÀ.h
"

13 
	~"ngx_πmp_ªc‹d_moduÀ.h
"

16 
ngx_πmp_ªc‹d_d⁄e_±
 
	gngx_πmp_ªc‹d_d⁄e
;

19 
ngx_πmp_publish_±
 
	g√xt_publish
;

20 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

21 
ngx_πmp_°ªam_begö_±
 
	g√xt_°ªam_begö
;

22 
ngx_πmp_°ªam_eof_±
 
	g√xt_°ªam_eof
;

25 *
ngx_πmp_ªc‹d_ªc‹dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 
ngx_öt_t
 
ngx_πmp_ªc‹d_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

28 * 
ngx_πmp_ªc‹d_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

29 * 
ngx_πmp_ªc‹d_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

30 *
∑ª¡
, *
chûd
);

31 
ngx_öt_t
 
ngx_πmp_ªc‹d_wrôe_‰ame
(
ngx_πmp_£ssi⁄_t
 *
s
,

32 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
,

33 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
, 
ngx_öt_t
 
öc_n‰ames
);

34 
ngx_öt_t
 
ngx_πmp_ªc‹d_av
(
ngx_πmp_£ssi⁄_t
 *
s
,

35 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

36 
ngx_öt_t
 
ngx_πmp_ªc‹d_node_av
(
ngx_πmp_£ssi⁄_t
 *
s
,

37 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
, 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
);

38 
ngx_öt_t
 
ngx_πmp_ªc‹d_node_›í
(
ngx_πmp_£ssi⁄_t
 *
s
,

39 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
);

40 
ngx_öt_t
 
ngx_πmp_ªc‹d_node_˛o£
(
ngx_πmp_£ssi⁄_t
 *
s
,

41 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
);

42 
ngx_πmp_ªc‹d_make_∑th
(
ngx_πmp_£ssi⁄_t
 *
s
,

43 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
, 
ngx_°r_t
 *
∑th
);

44 
ngx_öt_t
 
ngx_πmp_ªc‹d_öô
(
ngx_πmp_£ssi⁄_t
 *
s
);

47 
ngx_πmp_ªc‹d_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

49 
ngx_c⁄f_bômask_t
 
	gngx_πmp_ªc‹d_mask
[] = {

50 { 
ngx_°rög
("off"), 
NGX_RTMP_RECORD_OFF
 },

51 { 
ngx_°rög
("Æl"), 
NGX_RTMP_RECORD_AUDIO
 |

52 
NGX_RTMP_RECORD_VIDEO
 },

53 { 
ngx_°rög
("audio"), 
NGX_RTMP_RECORD_AUDIO
 },

54 { 
ngx_°rög
("video"), 
NGX_RTMP_RECORD_VIDEO
 },

55 { 
ngx_°rög
("key‰ames"), 
NGX_RTMP_RECORD_KEYFRAMES
 },

56 { 
ngx_°rög
("m™uÆ"), 
NGX_RTMP_RECORD_MANUAL
 },

57 { 
ngx_nuŒ_°rög
, 0 }

61 
ngx_comm™d_t
 
	gngx_πmp_ªc‹d_comm™ds
[] = {

63 { 
ngx_°rög
("record"),

64 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

65 
NGX_RTMP_REC_CONF
|
NGX_CONF_1MORE
,

66 
ngx_c⁄f_£t_bômask_¶Ÿ
,

67 
NGX_RTMP_APP_CONF_OFFSET
,

68 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
Êags
),

69 
ngx_πmp_ªc‹d_mask
 },

71 { 
ngx_°rög
("record_path"),

72 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

73 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_c⁄f_£t_°r_¶Ÿ
,

75 
NGX_RTMP_APP_CONF_OFFSET
,

76 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
∑th
),

77 
NULL
 },

79 { 
ngx_°rög
("record_suffix"),

80 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

81 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_c⁄f_£t_°r_¶Ÿ
,

83 
NGX_RTMP_APP_CONF_OFFSET
,

84 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
suffix
),

85 
NULL
 },

87 { 
ngx_°rög
("record_unique"),

88 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

89 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_c⁄f_£t_Êag_¶Ÿ
,

91 
NGX_RTMP_APP_CONF_OFFSET
,

92 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
unique
),

93 
NULL
 },

95 { 
ngx_°rög
("record_append"),

96 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

97 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_Êag_¶Ÿ
,

99 
NGX_RTMP_APP_CONF_OFFSET
,

100 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
≠≥nd
),

101 
NULL
 },

103 { 
ngx_°rög
("record_lock"),

104 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

105 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

106 
ngx_c⁄f_£t_Êag_¶Ÿ
,

107 
NGX_RTMP_APP_CONF_OFFSET
,

108 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
lock_fûe
),

109 
NULL
 },

111 { 
ngx_°rög
("record_max_size"),

112 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

113 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

114 
ngx_c⁄f_£t_size_¶Ÿ
,

115 
NGX_RTMP_APP_CONF_OFFSET
,

116 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
max_size
),

117 
NULL
 },

119 { 
ngx_°rög
("record_max_frames"),

120 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

121 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_size_¶Ÿ
,

123 
NGX_RTMP_APP_CONF_OFFSET
,

124 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
max_‰ames
),

125 
NULL
 },

127 { 
ngx_°rög
("record_interval"),

128 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

129 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

130 
ngx_c⁄f_£t_m£c_¶Ÿ
,

131 
NGX_RTMP_APP_CONF_OFFSET
,

132 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
öãrvÆ
),

133 
NULL
 },

135 { 
ngx_°rög
("record_notify"),

136 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|

137 
NGX_RTMP_REC_CONF
|
NGX_CONF_TAKE1
,

138 
ngx_c⁄f_£t_Êag_¶Ÿ
,

139 
NGX_RTMP_APP_CONF_OFFSET
,

140 
off£tof
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
, 
nŸify
),

141 
NULL
 },

143 { 
ngx_°rög
("recorder"),

144 
NGX_RTMP_APP_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

145 
ngx_πmp_ªc‹d_ªc‹dî
,

146 
NGX_RTMP_APP_CONF_OFFSET
,

148 
NULL
 },

150 { 
ngx_°rög
("queue"),

151 
NGX_RTMP_MAIN_CONF
|
NGX_CONF_TAKE1
,

152 
NULL
,

153 
NGX_RTMP_MAIN_CONF_OFFSET
,

154 
off£tof
(
ngx_πmp_ªc‹d_maö_c⁄f_t
, 
queue
),

155 
NULL
 },

158 
ngx_nuŒ_comm™d


162 
ngx_πmp_moduÀ_t
 
	gngx_πmp_ªc‹d_moduÀ_˘x
 = {

163 
NULL
,

164 
ngx_πmp_ªc‹d_po°c⁄figuøti⁄
,

165 
ngx_πmp_ªc‹d_¸óã_maö_c⁄f
,

166 
NULL
,

167 
NULL
,

168 
NULL
,

169 
ngx_πmp_ªc‹d_¸óã_≠p_c⁄f
,

170 
ngx_πmp_ªc‹d_mîge_≠p_c⁄f


174 
ngx_moduÀ_t
 
	gngx_πmp_ªc‹d_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_πmp_ªc‹d_moduÀ_˘x
,

177 
ngx_πmp_ªc‹d_comm™ds
,

178 
NGX_RTMP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


191 
	$ngx_πmp_ªc‹d_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

193 
ngx_πmp_ªc‹d_maö_c⁄f_t
 *
rmcf
;

195 
rmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_ªc‹d_maö_c⁄f_t
));

196 i‡(
rmcf
 =
NULL
) {

197  
NULL
;

200 
rmcf
->
queue
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_queue_t
));

201 
	`ngx_queue_öô
(
rmcf
->
queue
);

203 
ngx_πmp_ªc‹d_maö_c⁄f
 = 
rmcf
;

205  
rmcf
;

206 
	}
}

209 
	$ngx_πmp_ªc‹d_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

211 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
;

213 
øcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_ªc‹d_≠p_c⁄f_t
));

215 i‡(
øcf
 =
NULL
) {

216  
NULL
;

219 
øcf
->
max_size
 = 
NGX_CONF_UNSET_SIZE
;

220 
øcf
->
max_‰ames
 = 
NGX_CONF_UNSET_SIZE
;

221 
øcf
->
öãrvÆ
 = 
NGX_CONF_UNSET_MSEC
;

222 
øcf
->
unique
 = 
NGX_CONF_UNSET
;

223 
øcf
->
≠≥nd
 = 
NGX_CONF_UNSET
;

224 
øcf
->
lock_fûe
 = 
NGX_CONF_UNSET
;

225 
øcf
->
nŸify
 = 
NGX_CONF_UNSET
;

226 
øcf
->
uæ
 = 
NGX_CONF_UNSET_PTR
;

228 i‡(
	`ngx_¨øy_öô
(&
øcf
->
ªc
, 
cf
->
poﬁ
, 1, (*)Ë!
NGX_OK
) {

229  
NULL
;

232  
øcf
;

233 
	}
}

237 
	$ngx_πmp_ªc‹d_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

239 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

240 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

241 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 **
ºacf
;

243 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, "");

244 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
suffix
, 
¥ev
->suffix, ".flv");

245 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_size
, 
¥ev
->max_size, 0);

246 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_‰ames
, 
¥ev
->max_frames, 0);

247 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
unique
, 
¥ev
->unique, 0);

248 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
≠≥nd
, 
¥ev
->append, 0);

249 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
lock_fûe
, 
¥ev
->lock_file, 0);

250 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
nŸify
, 
¥ev
->notify, 0);

251 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
öãrvÆ
, 
¥ev
->interval,

252 (
ngx_m£c_t
Ë
NGX_CONF_UNSET
);

253 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
Êags
, 
¥ev
->flags, 0);

254 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
uæ
, 
¥ev
->uæ, 
NULL
);

256 i‡(
c⁄f
->
Êags
) {

257 
ºacf
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ªc
);

258 i‡(
ºacf
 =
NULL
) {

259  
NGX_CONF_ERROR
;

262 *
ºacf
 = 
c⁄f
;

265  
NGX_CONF_OK
;

266 
	}
}

269 
ngx_öt_t


270 
	$ngx_πmp_ªc‹d_wrôe_hódî
(
ngx_fûe_t
 *
fûe
)

272 
u_ch¨
 
Êv_hódî
[] = {

288  
	`ngx_wrôe_fûe
(
fûe
, 
Êv_hódî
, (Êv_hódî), 0Ë=
NGX_ERROR


289 ? 
NGX_ERROR


290 : 
NGX_OK
;

291 
	}
}

294 
ngx_πmp_ªc‹d_ªc_˘x_t
 *

295 
	$ngx_πmp_ªc‹d_gë_node_˘x
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
n
)

297 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

298 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
;

300 i‡(
	`ngx_πmp_ªc‹d_öô
(
s
Ë!
NGX_OK
) {

301  
NULL
;

304 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

306 i‡(
n
 >
˘x
->
ªc
.
√…s
) {

307  
NULL
;

310 
r˘x
 = 
˘x
->
ªc
.
ñts
;

312  &
r˘x
[
n
];

313 
	}
}

316 
ngx_öt_t


317 
	$ngx_πmp_ªc‹d_›í
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
n
, 
ngx_°r_t
 *
∑th
)

319 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
;

320 
ngx_öt_t
 
rc
;

322 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

323 "ªc‹d: #%uòm™uÆ o≥n", 
n
);

325 
r˘x
 = 
	`ngx_πmp_ªc‹d_gë_node_˘x
(
s
, 
n
);

327 i‡(
r˘x
 =
NULL
) {

328  
NGX_ERROR
;

331 
rc
 = 
	`ngx_πmp_ªc‹d_node_›í
(
s
, 
r˘x
);

332 i‡(
rc
 !
NGX_OK
) {

333  
rc
;

336 i‡(
∑th
) {

337 
	`ngx_πmp_ªc‹d_make_∑th
(
s
, 
r˘x
, 
∑th
);

340  
NGX_OK
;

341 
	}
}

344 
ngx_öt_t


345 
	$ngx_πmp_ªc‹d_˛o£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
n
, 
ngx_°r_t
 *
∑th
)

347 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
;

348 
ngx_öt_t
 
rc
;

350 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

351 "ªc‹d: #%uòm™uÆ clo£", 
n
);

353 
r˘x
 = 
	`ngx_πmp_ªc‹d_gë_node_˘x
(
s
, 
n
);

355 i‡(
r˘x
 =
NULL
) {

356  
NGX_ERROR
;

359 
rc
 = 
	`ngx_πmp_ªc‹d_node_˛o£
(
s
, 
r˘x
);

360 i‡(
rc
 !
NGX_OK
) {

361  
rc
;

364 i‡(
∑th
) {

365 
	`ngx_πmp_ªc‹d_make_∑th
(
s
, 
r˘x
, 
∑th
);

368  
NGX_OK
;

369 
	}
}

372 
ngx_uöt_t


373 
	$ngx_πmp_ªc‹d_föd
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
, 
ngx_°r_t
 *
id
)

375 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 **
¥acf
, *
ºacf
;

376 
ngx_uöt_t
 
n
;

378 
¥acf
 = 
øcf
->
ªc
.
ñts
;

380 
n
 = 0;Ç < 
øcf
->
ªc
.
√…s
; ++n, ++
¥acf
) {

381 
ºacf
 = *
¥acf
;

383 i‡(
ºacf
->
id
.
Àn
 == id->len &&

384 
	`ngx_°∫cmp
(
ºacf
->
id
.
d©a
, id->d©a, id->
Àn
) == 0)

386  
n
;

390  
NGX_CONF_UNSET_UINT
;

391 
	}
}

394 
ngx_öt_t


395 
	$ngx_πmp_¨g
(
ngx_°r_t
 
§c
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,Çgx_°r_à*
vÆue
)

397 
u_ch¨
 *
p
, *
œ°
;

399 i‡(
§c
.
Àn
 == 0) {

400  
NGX_DECLINED
;

403 
p
 = 
§c
.
d©a
;

404 
œ°
 = 
p
 + 
§c
.
Àn
;

406  ; 
p
 < 
œ°
;Ö++) {

410 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
 - 1, 
«me
, 
Àn
 - 1);

412 i‡(
p
 =
NULL
) {

413  
NGX_DECLINED
;

416 i‡((
p
 =
§c
.
d©a
 || *’ - 1Ë='&'Ë&& *’ + 
Àn
) == '=') {

418 
vÆue
->
d©a
 = 
p
 + 
Àn
 + 1;

420 
p
 = 
	`ngx_°æchr
’, 
œ°
, '&');

422 i‡(
p
 =
NULL
) {

423 
p
 = 
§c
.
d©a
 + src.
Àn
;

426 
vÆue
->
Àn
 = 
p
 - vÆue->
d©a
;

428  
NGX_OK
;

432  
NGX_DECLINED
;

433 
	}
}

438 
	$ngx_πmp_ªc‹d_make_∑th
(
ngx_πmp_£ssi⁄_t
 *
s
,

439 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
, 
ngx_°r_t
 *
∑th
)

441 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

442 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
ºacf
;

443 
ngx_πmp_ªc‹d_maö_c⁄f_t
 *
rmcf
;

444 
u_ch¨
 *
p
, *
l
;

445 
u_ch¨
 
liveid
[
NGX_RTMP_MAX_ARGS
];

446 
tm
Åm;

448 
u_ch¨
 
buf
[
NGX_TIME_T_LEN
 + 1];

449 
u_ch¨
 
pbuf
[
NGX_MAX_PATH
 + 1];

451 
has_liveid_Êag
 = 0;

453 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

454 
rmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

456 
ºacf
 = 
r˘x
->
c⁄f
;

459 
p
 = 
pbuf
;

460 
l
 = 
pbuf
 + (pbuf) - 1;

462 
p
 = 
	`ngx_˝ymem
’, 
ºacf
->
∑th
.
d©a
,

463 
	`ngx_mö
(
ºacf
->
∑th
.
Àn
, (
size_t
)(
l
 - 
p
 - 1)));

464 *
p
++ = '/';

465 
p
 = (
u_ch¨
 *)
	`ngx_esˇ≥_uri
’, 
˘x
->
«me
, 
	`ngx_mö
(
	`ngx_°æí
(ctx->name),

466 (
size_t
)(
l
 - 
p
)), 
NGX_ESCAPE_URI_COMPONENT
);

471 i‡(
	`ngx_°æí
(
˘x
->
liveid
Ë!0 || 
	`ngx_queue_gë_liveid
(
rmcf
->
queue
, ctx->
«me
,Üiveid) == 1) {

472 
has_liveid_Êag
 = 1;

474 i‡(
ºacf
->
unique
) {

475 i‡(
has_liveid_Êag
 == 1) {

476 
p
 = 
	`ngx_˝ymem
’, "-", 
	`ngx_mö
(1, 
l
 -Ö));

477 i‡(
	`ngx_°æí
(
˘x
->
liveid
) != 0) {

478 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
liveid
, 
	`ngx_mö
((sig√d)(
	`ngx_°æí
(˘x->liveid)), 
l
 -Ö));

480 
p
 = 
	`ngx_˝ymem
’, 
liveid
, 
	`ngx_mö
((sig√d)(
	`ngx_°æí
÷iveid)), 
l
 -Ö));

483 
p
 = 
	`ngx_˝ymem
’, 
buf
, 
	`ngx_mö
(
	`ngx_•rötf
(buf, "-%T",

484 
r˘x
->
time°amp
Ë- 
buf
, 
l
 - 
p
));

489 i‡(
	`ngx_°rchr
(
ºacf
->
suffix
.
d©a
, '%')) {

490 
	`ngx_libc_loˇ…ime
(
r˘x
->
time°amp
, &
tm
);

491 
p
 +
	`°r·ime
((*Ëp, 
l
 -Ö, (*Ë
ºacf
->
suffix
.
d©a
, &
tm
);

493 
p
 = 
	`ngx_˝ymem
’, 
ºacf
->
suffix
.
d©a
,

494 
	`ngx_mö
(
ºacf
->
suffix
.
Àn
, (
size_t
)(
l
 - 
p
)));

497 *
p
 = 0;

498 
∑th
->
d©a
 = 
pbuf
;

499 
∑th
->
Àn
 = 
p
 - 
pbuf
;

501 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

502 "ªc‹d: %VÖ©h: '%V'", &
ºacf
->
id
, 
∑th
);

503 
	}
}

507 
	$ngx_πmp_ªc‹d_nŸify_îr‹
(
ngx_πmp_£ssi⁄_t
 *
s
,

508 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
)

510 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
ºacf
 = 
r˘x
->
c⁄f
;

512 
r˘x
->
Áûed
 = 1;

514 i‡(!
ºacf
->
nŸify
) {

518 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Record.Failed", "error",

519 
ºacf
->
id
.
d©a
 ? (*)Ñracf->id.data : "");

520 
	}
}

523 
ngx_öt_t


524 
	$ngx_πmp_ªc‹d_node_›í
(
ngx_πmp_£ssi⁄_t
 *
s
,

525 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
)

527 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
ºacf
;

528 
ngx_îr_t
 
îr
;

529 
ngx_°r_t
 
∑th
;

530 
ngx_öt_t
 
mode
, 
¸óã_mode
;

531 
u_ch¨
 
buf
[8], *
p
;

532 
off_t
 
fûe_size
;

533 
uöt32_t
 
èg_size
, 
mÀn
, 
time°amp
;

535 
ºacf
 = 
r˘x
->
c⁄f
;

536 
èg_size
 = 0;

538 i‡(
r˘x
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

539  
NGX_AGAIN
;

542 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

543 "ªc‹d: %V o≥nög", &
ºacf
->
id
);

545 
	`ngx_memzîo
(
r˘x
, (*rctx));

546 
r˘x
->
c⁄f
 = 
ºacf
;

547 
r˘x
->
œ°
 = *
ngx_ˇched_time
;

548 
r˘x
->
time°amp
 = 
ngx_ˇched_time
->
£c
;

550 
	`ngx_πmp_ªc‹d_make_∑th
(
s
, 
r˘x
, &
∑th
);

552 
mode
 = 
ºacf
->
≠≥nd
 ? 
NGX_FILE_RDWR
 : 
NGX_FILE_WRONLY
;

553 
¸óã_mode
 = 
ºacf
->
≠≥nd
 ? 
NGX_FILE_CREATE_OR_OPEN
 : 
NGX_FILE_TRUNCATE
;

555 
	`ngx_memzîo
(&
r˘x
->
fûe
, (rctx->file));

556 
r˘x
->
fûe
.
off£t
 = 0;

557 
r˘x
->
fûe
.
log
 = 
s
->
c⁄√˘i⁄
->log;

558 
r˘x
->
fûe
.
fd
 = 
	`ngx_›í_fûe
(
∑th
.
d©a
, 
mode
, 
¸óã_mode
,

559 
NGX_FILE_DEFAULT_ACCESS
);

560 
	`ngx_°r_£t
(&
r˘x
->
fûe
.
«me
, "recorded");

562 i‡(
r˘x
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

563 
îr
 = 
ngx_î∫o
;

565 i‡(
îr
 !
NGX_ENOENT
) {

566 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
îr
,

568 &
ºacf
->
id
, &
∑th
);

571 
	`ngx_πmp_ªc‹d_nŸify_îr‹
(
s
, 
r˘x
);

573  
NGX_OK
;

576 #i‡!(
NGX_WIN32
)

577 i‡(
ºacf
->
lock_fûe
) {

578 
îr
 = 
	`ngx_lock_fd
(
r˘x
->
fûe
.
fd
);

579 i‡(
îr
) {

580 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
îr
,

581 "ªc‹d: %VÜock faûed", &
ºacf
->
id
);

586 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

587 "ªc‹d: %V o≥√d '%V'", &
ºacf
->
id
, &
∑th
);

589 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

590 "ªc‹d: %V o≥√d '%V'", &
ºacf
->
id
, &
∑th
);

592 i‡(
ºacf
->
nŸify
) {

593 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Record.Start", "status",

594 
ºacf
->
id
.
d©a
 ? (*)Ñracf->id.data : "");

597 i‡(
ºacf
->
≠≥nd
) {

599 
fûe_size
 = 0;

600 
time°amp
 = 0;

602 #i‡(
NGX_WIN32
)

604 
LONG
 
lo
, 
hi
;

606 
lo
 = 0;

607 
hi
 = 0;

608 
lo
 = 
	`SëFûePoöãr
(
r˘x
->
fûe
.
fd
,Üo, &
hi
, 
FILE_END
);

609 
fûe_size
 = (
lo
 =
INVALID_SET_FILE_POINTER
 ?

610 (
off_t
Ë-1 : (off_tË
hi
 << 32 | (off_tË
lo
);

613 
fûe_size
 = 
	`l£ek
(
r˘x
->
fûe
.
fd
, 0, 
SEEK_END
);

615 i‡(
fûe_size
 =(
off_t
) -1) {

616 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

617 "ªc‹d: %V sìk faûed", &
ºacf
->
id
);

618 
d⁄e
;

621 i‡(
fûe_size
 < 4) {

622 
d⁄e
;

625 i‡(
	`ngx_ªad_fûe
(&
r˘x
->
fûe
, 
buf
, 4, 
fûe_size
 - 4) != 4) {

626 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

627 "ªc‹d: %VÅag sizêªad faûed", &
ºacf
->
id
);

628 
d⁄e
;

631 
p
 = (
u_ch¨
 *Ë&
èg_size
;

632 
p
[0] = 
buf
[3];

633 
p
[1] = 
buf
[2];

634 
p
[2] = 
buf
[1];

635 
p
[3] = 
buf
[0];

637 i‡(
èg_size
 =0 ||Åag_sizê+ 4 > 
fûe_size
) {

638 
fûe_size
 = 0;

639 
d⁄e
;

642 i‡(
	`ngx_ªad_fûe
(&
r˘x
->
fûe
, 
buf
, 8, 
fûe_size
 - 
èg_size
 - 4) != 8)

644 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

645 "ªc‹d: %VÅagÑód faûed", &
ºacf
->
id
);

646 
d⁄e
;

649 
p
 = (
u_ch¨
 *Ë&
mÀn
;

650 
p
[0] = 
buf
[3];

651 
p
[1] = 
buf
[2];

652 
p
[2] = 
buf
[1];

653 
p
[3] = 0;

655 i‡(
èg_size
 !
mÀn
 + 11) {

656 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

658 "èg_size=%uD, mÀn=%uD", &
ºacf
->
id
, 
èg_size
, 
mÀn
);

659 
d⁄e
;

662 
p
 = (
u_ch¨
 *Ë&
time°amp
;

663 
p
[3] = 
buf
[7];

664 
p
[0] = 
buf
[6];

665 
p
[1] = 
buf
[5];

666 
p
[2] = 
buf
[4];

668 
d⁄e
:

669 
r˘x
->
fûe
.
off£t
 = 
fûe_size
;

670 
r˘x
->
time_shi·
 = 
time°amp
;

672 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

674 
fûe_size
, 
time°amp
, 
èg_size
);

677  
NGX_OK
;

678 
	}
}

681 
ngx_öt_t


682 
	$ngx_πmp_ªc‹d_öô
(
ngx_πmp_£ssi⁄_t
 *
s
)

684 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
, **
ºacf
;

685 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
;

686 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

687 
ngx_uöt_t
 
n
;

689 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

691 i‡(
˘x
) {

692  
NGX_OK
;

695 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

697 i‡(
øcf
 =
NULL
 ||Ñacf->
ªc
.
√…s
 == 0) {

698  
NGX_OK
;

701 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_ªc‹d_˘x_t
));

703 i‡(
˘x
 =
NULL
) {

704  
NGX_ERROR
;

707 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_ªc‹d_moduÀ
);

709 i‡(
	`ngx_¨øy_öô
(&
˘x
->
ªc
, 
s
->
c⁄√˘i⁄
->
poﬁ
, 
øcf
->ªc.
√…s
,

710 (
ngx_πmp_ªc‹d_ªc_˘x_t
))

711 !
NGX_OK
)

713  
NGX_ERROR
;

716 
ºacf
 = 
øcf
->
ªc
.
ñts
;

718 
r˘x
 = 
	`ngx_¨øy_push_n
(&
˘x
->
ªc
, 
øcf
->ªc.
√…s
);

720 i‡(
r˘x
 =
NULL
) {

721  
NGX_ERROR
;

724 
n
 = 0;Ç < 
øcf
->
ªc
.
√…s
; ++n, ++
ºacf
, ++
r˘x
) {

725 
	`ngx_memzîo
(
r˘x
, (*rctx));

727 
r˘x
->
c⁄f
 = *
ºacf
;

728 
r˘x
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

731  
NGX_OK
;

732 
	}
}

736 
	$ngx_πmp_ªc‹d_°¨t
(
ngx_πmp_£ssi⁄_t
 *
s
)

738 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
;

739 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
;

740 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

741 
ngx_uöt_t
 
n
;

743 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

744 i‡(
øcf
 =
NULL
 ||Ñacf->
ªc
.
√…s
 == 0) {

748 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

749 i‡(
˘x
 =
NULL
) {

753 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

756 
r˘x
 = 
˘x
->
ªc
.
ñts
;

757 
n
 = 0;Ç < 
˘x
->
ªc
.
√…s
; ++n, ++
r˘x
) {

758 i‡(
r˘x
->
c⁄f
->
Êags
 & (
NGX_RTMP_RECORD_OFF
|
NGX_RTMP_RECORD_MANUAL
)) {

761 
	`ngx_πmp_ªc‹d_node_›í
(
s
, 
r˘x
);

763 
	}
}

767 
	$ngx_πmp_ªc‹d_°›
(
ngx_πmp_£ssi⁄_t
 *
s
)

769 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
;

770 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
;

771 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

772 
ngx_uöt_t
 
n
;

774 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

775 i‡(
øcf
 =
NULL
 ||Ñacf->
ªc
.
√…s
 == 0) {

779 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

780 i‡(
˘x
 =
NULL
) {

784 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

787 
r˘x
 = 
˘x
->
ªc
.
ñts
;

788 
n
 = 0;Ç < 
˘x
->
ªc
.
√…s
; ++n, ++
r˘x
) {

789 
	`ngx_πmp_ªc‹d_node_˛o£
(
s
, 
r˘x
);

791 
	}
}

794 
ngx_öt_t


795 
	$ngx_πmp_ªc‹d_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

797 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
;

798 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

799 
ngx_°r_t
 
tmp_¨gs
;

800 
u_ch¨
 *
p
;

801 
ngx_°r_t
 
liveid
 = 
ngx_nuŒ_°rög
;

803 i‡(
s
->
auto_pushed
) {

804 
√xt
;

807 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

809 i‡(
øcf
 =
NULL
 ||Ñacf->
ªc
.
√…s
 == 0) {

810 
√xt
;

813 i‡(
	`ngx_πmp_ªc‹d_öô
(
s
Ë!
NGX_OK
) {

814  
NGX_ERROR
;

817 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

819 
øcf
->
ªc
.
√…s
);

821 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

823 
	`ngx_mem˝y
(
˘x
->
«me
, 
v
->name, (ctx->name));

824 
	`ngx_mem˝y
(
˘x
->
¨gs
, 
v
->args, (ctx->args));

828 
	`ngx_°r_£t
(&
tmp_¨gs
, 
v
->
¨gs
);

829 
tmp_¨gs
.
Àn
 = 
	`ngx_°æí
(
v
->
¨gs
);

830 i‡(
	`ngx_πmp_¨g
(
tmp_¨gs
, (
u_ch¨
 *Ë"liveid", ("liveid"Ë- 1, &
liveid
Ë!
NGX_OK
) {

831 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

833 
˘x
->
¨gs
);

835 i‡(
	`ngx_föd_queue
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
˘x
->
«me
) == 0) {

836 
ngx_°ªam_öfo
 *
tmp_öfo
;

837 
tmp_öfo
 = (
ngx_°ªam_öfo
 *)
	`ngx_pˇŒoc
(
ngx_cy˛e
->
poﬁ
, (ngx_stream_info));

838 
	`ngx_memzîo
(
tmp_öfo
->
liveid
, (tmp_info->liveid));

839 
tmp_öfo
->
is_ªc‹d
 = 0;

840 
	`ngx_˝y°∫
(
tmp_öfo
->
°ªam_«me
, 
˘x
->
«me
, 
NGX_RTMP_MAX_NAME
);

841 
	`ngx_queue_ö£π
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
tmp_öfo
);

846 i‡(
liveid
.
Àn
 > 0) {

847 
	`ngx_mem˝y
(
˘x
->
liveid
,Üiveid.
d©a
, (ctx->liveid));

852 
p
 = 
˘x
->
«me
; *p; ++p) {

853 i‡(
	`ngx_∑th_£∑øt‹
(
p
[0]) &&

854 
p
[1] == '.' &&Ö[2] == '.' &&

855 
	`ngx_∑th_£∑øt‹
(
p
[3]))

857 *
p
 = 0;

862 
	`ngx_πmp_ªc‹d_°¨t
(
s
);

864 
√xt
:

865  
	`√xt_publish
(
s
, 
v
);

866 
	}
}

869 
ngx_öt_t


870 
	$ngx_πmp_ªc‹d_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_begö_t
 *
v
)

872 i‡(
s
->
auto_pushed
) {

873 
√xt
;

876 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

879 
	`ngx_πmp_ªc‹d_°¨t
(
s
);

881 
√xt
:

882  
	`√xt_°ªam_begö
(
s
, 
v
);

883 
	}
}

886 
ngx_öt_t


887 
	$ngx_πmp_ªc‹d_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_°ªam_begö_t
 *
v
)

889 i‡(
s
->
auto_pushed
) {

890 
√xt
;

893 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

896 
	`ngx_πmp_ªc‹d_°›
(
s
);

898 
√xt
:

899  
	`√xt_°ªam_eof
(
s
, 
v
);

900 
	}
}

903 
ngx_öt_t


904 
	$ngx_πmp_ªc‹d_node_˛o£
(
ngx_πmp_£ssi⁄_t
 *
s
,

905 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
)

907 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
ºacf
;

908 
ngx_îr_t
 
îr
;

909 **
≠p_c⁄f
;

910 
ngx_öt_t
 
rc
;

911 
ngx_πmp_ªc‹d_d⁄e_t
 
v
;

912 
u_ch¨
 
av
;

914 
ºacf
 = 
r˘x
->
c⁄f
;

916 i‡(
r˘x
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

917  
NGX_AGAIN
;

920 i‡(
r˘x
->
öôülized
) {

921 
av
 = 0;

923 i‡(
r˘x
->
video
) {

924 
av
 |= 0x01;

927 i‡(
r˘x
->
audio
) {

928 
av
 |= 0x04;

931 i‡(
	`ngx_wrôe_fûe
(&
r˘x
->
fûe
, &
av
, 1, 4Ë=
NGX_ERROR
) {

932 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

933 "ªc‹d: %VÉº‹ wrôögáv mask", &
ºacf
->
id
);

937 i‡(
	`ngx_˛o£_fûe
(
r˘x
->
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

938 
îr
 = 
ngx_î∫o
;

939 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
îr
,

940 "ªc‹d: %VÉº‹ closög fûe", &
ºacf
->
id
);

942 
	`ngx_πmp_ªc‹d_nŸify_îr‹
(
s
, 
r˘x
);

945 
r˘x
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

947 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

948 "ªc‹d: %V clo£d", &
ºacf
->
id
);

950 i‡(
ºacf
->
nŸify
) {

951 
	`ngx_πmp_£nd_°©us
(
s
, "NetStream.Record.Stop", "status",

952 
ºacf
->
id
.
d©a
 ? (*)Ñracf->id.data : "");

955 
≠p_c⁄f
 = 
s
->app_conf;

957 i‡(
ºacf
->
ªc_c⁄f
) {

958 
s
->
≠p_c⁄f
 = 
ºacf
->
ªc_c⁄f
;

961 
v
.
ªc‹dî
 = 
ºacf
->
id
;

962 
	`ngx_πmp_ªc‹d_make_∑th
(
s
, 
r˘x
, &
v
.
∑th
);

964 
rc
 = 
	`ngx_πmp_ªc‹d_d⁄e
(
s
, &
v
);

966 
s
->
≠p_c⁄f
 =ápp_conf;

968  
rc
;

969 
	}
}

972 
ngx_öt_t


973 
	$ngx_πmp_ªc‹d_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
,

974 
ngx_πmp_˛o£_°ªam_t
 *
v
)

976 i‡(
s
->
auto_pushed
) {

977 
√xt
;

980 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

983 
	`ngx_πmp_ªc‹d_°›
(
s
);

985 
√xt
:

986  
	`√xt_˛o£_°ªam
(
s
, 
v
);

987 
	}
}

990 
ngx_öt_t


991 
	$ngx_πmp_ªc‹d_wrôe_‰ame
(
ngx_πmp_£ssi⁄_t
 *
s
,

992 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
,

993 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
,

994 
ngx_öt_t
 
öc_n‰ames
)

996 
u_ch¨
 
hdr
[11], *
p
, *
ph
;

997 
uöt32_t
 
time°amp
, 
èg_size
;

998 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
ºacf
;

1000 
ºacf
 = 
r˘x
->
c⁄f
;

1002 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1004 &
ºacf
->
id
, 
h
->
mÀn
);

1006 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
) {

1007 
r˘x
->
video
 = 1;

1009 
r˘x
->
audio
 = 1;

1012 
time°amp
 = 
h
->time°am∞- 
r˘x
->
ïoch
;

1014 i‡((
öt32_t
Ë
time°amp
 < 0) {

1015 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1016 "ªc‹d: %V cuàtime°amp=%D", &
ºacf
->
id
, 
time°amp
);

1018 
time°amp
 = 0;

1022 
ph
 = 
hdr
;

1024 *
ph
++ = (
u_ch¨
)
h
->
ty≥
;

1026 
p
 = (
u_ch¨
*)&
h
->
mÀn
;

1027 *
ph
++ = 
p
[2];

1028 *
ph
++ = 
p
[1];

1029 *
ph
++ = 
p
[0];

1031 
p
 = (
u_ch¨
*)&
time°amp
;

1032 *
ph
++ = 
p
[2];

1033 *
ph
++ = 
p
[1];

1034 *
ph
++ = 
p
[0];

1035 *
ph
++ = 
p
[3];

1037 *
ph
++ = 0;

1038 *
ph
++ = 0;

1039 *
ph
++ = 0;

1041 
èg_size
 = (
ph
 - 
hdr
Ë+ 
h
->
mÀn
;

1043 i‡(
	`ngx_wrôe_fûe
(&
r˘x
->
fûe
, 
hdr
, 
ph
 - hdr,Ñ˘x->fûe.
off£t
)

1044 =
NGX_ERROR
)

1046 
	`ngx_πmp_ªc‹d_nŸify_îr‹
(
s
, 
r˘x
);

1048 
	`ngx_˛o£_fûe
(
r˘x
->
fûe
.
fd
);

1050  
NGX_ERROR
;

1059 ; 
ö
; i¿ö->
√xt
) {

1060 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1064 i‡(
	`ngx_wrôe_fûe
(&
r˘x
->
fûe
, 
ö
->
buf
->
pos
, in->buf->
œ°


1065 - 
ö
->
buf
->
pos
, 
r˘x
->
fûe
.
off£t
)

1066 =
NGX_ERROR
)

1068  
NGX_ERROR
;

1073 
ph
 = 
hdr
;

1074 
p
 = (
u_ch¨
*)&
èg_size
;

1076 *
ph
++ = 
p
[3];

1077 *
ph
++ = 
p
[2];

1078 *
ph
++ = 
p
[1];

1079 *
ph
++ = 
p
[0];

1081 i‡(
	`ngx_wrôe_fûe
(&
r˘x
->
fûe
, 
hdr
, 
ph
 - hdr,

1082 
r˘x
->
fûe
.
off£t
)

1083 =
NGX_ERROR
)

1085  
NGX_ERROR
;

1088 
r˘x
->
n‰ames
 +
öc_n‰ames
;

1091 i‡((
ºacf
->
max_size
 && 
r˘x
->
fûe
.
off£t
 >(
ngx_öt_t
)Ñracf->max_size) ||

1092 (
ºacf
->
max_‰ames
 && 
r˘x
->
n‰ames
 >=Ñracf->max_frames))

1094 
	`ngx_πmp_ªc‹d_node_˛o£
(
s
, 
r˘x
);

1097  
NGX_OK
;

1098 
	}
}

1101 
size_t


1102 
	$ngx_πmp_ªc‹d_gë_chaö_mÀn
(
ngx_chaö_t
 *
ö
)

1104 
size_t
 
ªt
;

1106 
ªt
 = 0; 
ö
; i¿ö->
√xt
) {

1107 
ªt
 +(
ö
->
buf
->
œ°
 - in->buf->
pos
);

1110  
ªt
;

1111 
	}
}

1114 
ngx_öt_t


1115 
	$ngx_πmp_ªc‹d_av
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1116 
ngx_chaö_t
 *
ö
)

1118 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

1119 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
;

1120 
ngx_uöt_t
 
n
;

1122 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

1124 i‡(
˘x
 =
NULL
) {

1125  
NGX_OK
;

1128 
r˘x
 = 
˘x
->
ªc
.
ñts
;

1130 
n
 = 0;Ç < 
˘x
->
ªc
.
√…s
; ++n, ++
r˘x
) {

1131 
	`ngx_πmp_ªc‹d_node_av
(
s
, 
r˘x
, 
h
, 
ö
);

1134  
NGX_OK
;

1135 
	}
}

1138 
ngx_öt_t


1139 
	$ngx_πmp_ªc‹d_node_av
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_ªc‹d_ªc_˘x_t
 *
r˘x
, 
ngx_πmp_hódî_t
 *
h
, 
ngx_chaö_t
 *
ö
)

1141 
ngx_time_t
 
√xt
;

1142 
ngx_πmp_hódî_t
 
ch
;

1143 
ngx_πmp_codec_˘x_t
 *
codec_˘x
;

1144 
ngx_öt_t
 
key‰ame
, 
brk‰ame
;

1145 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
ºacf
;

1146 
ngx_πmp_ªc‹d_˘x_t
 *
˘x
;

1147 
ngx_πmp_ªc‹d_maö_c⁄f_t
 *
rmcf
;

1149 
ºacf
 = 
r˘x
->
c⁄f
;

1151 i‡(
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_OFF
) {

1152 
	`ngx_πmp_ªc‹d_node_˛o£
(
s
, 
r˘x
);

1153  
NGX_OK
;

1156 
key‰ame
 = (
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
)

1157 ? (
	`ngx_πmp_gë_video_‰ame_ty≥
(
ö
Ë=
NGX_RTMP_VIDEO_KEY_FRAME
)

1160 
brk‰ame
 = (
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
)

1161 ? 
key‰ame


1162 : (
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_VIDEO
) == 0;

1165 
rmcf
 = 
	`ngx_πmp_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

1166 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªc‹d_moduÀ
);

1168 i‡(
brk‰ame
 && (
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_MANUAL
) == 0) {

1171 i‡(
ºacf
->
öãrvÆ
 !(
ngx_m£c_t
Ë
NGX_CONF_UNSET
) {

1173 
√xt
 = 
r˘x
->
œ°
;

1174 
√xt
.
m£c
 +
ºacf
->
öãrvÆ
;

1175 
√xt
.
£c
 +“ext.
m£c
 / 1000);

1176 
√xt
.
m£c
 %= 1000;

1178 i‡(
ngx_ˇched_time
->
£c
 > 
√xt
.sec ||

1179 (
ngx_ˇched_time
->
£c
 =
√xt
.sec &&

1180 
ngx_ˇched_time
->
m£c
 > 
√xt
.msec))

1182 
	`ngx_πmp_ªc‹d_node_˛o£
(
s
, 
r˘x
);

1183 
	`ngx_πmp_ªc‹d_node_›í
(
s
, 
r˘x
);

1186 } i‡(!
r˘x
->
Áûed
) {

1187 
	`ngx_πmp_ªc‹d_node_›í
(
s
, 
r˘x
);

1192 i‡((
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_MANUAL
) &&

1193 (
	`ngx_queue_√ed_ªc‹d
(
rmcf
->
queue
, 
˘x
->
«me
) == 1))

1195 
	`ngx_πmp_ªc‹d_node_›í
(
s
, 
r˘x
);

1200 i‡((
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_MANUAL
) &&

1201 !
brk‰ame
 && 
r˘x
->
n‰ames
 == 0)

1203  
NGX_OK
;

1206 i‡(
r˘x
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1207  
NGX_OK
;

1210 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_AUDIO
 &&

1211 (
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_AUDIO
) == 0)

1213  
NGX_OK
;

1216 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
 &&

1217 (
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_VIDEO
) == 0 &&

1218 ((
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_KEYFRAMES
Ë=0 || !
key‰ame
))

1220  
NGX_OK
;

1223 i‡(!
r˘x
->
öôülized
) {

1225 
r˘x
->
öôülized
 = 1;

1226 
r˘x
->
ïoch
 = 
h
->
time°amp
 -Ñ˘x->
time_shi·
;

1228 i‡(
r˘x
->
fûe
.
off£t
 == 0 &&

1229 
	`ngx_πmp_ªc‹d_wrôe_hódî
(&
r˘x
->
fûe
Ë!
NGX_OK
)

1231 
	`ngx_πmp_ªc‹d_node_˛o£
(
s
, 
r˘x
);

1232  
NGX_OK
;

1236 
codec_˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

1237 i‡(
codec_˘x
) {

1238 
ch
 = *
h
;

1241 i‡(!
r˘x
->
Øc_hódî_£¡
 && 
codec_˘x
->
Øc_hódî
 &&

1242 (
ºacf
->
Êags
 & 
NGX_RTMP_RECORD_AUDIO
))

1244 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1245 "ªc‹d: %V wrôög AAC hódî", &
ºacf
->
id
);

1247 
ch
.
ty≥
 = 
NGX_RTMP_MSG_AUDIO
;

1248 
ch
.
mÀn
 = 
	`ngx_πmp_ªc‹d_gë_chaö_mÀn
(
codec_˘x
->
Øc_hódî
);

1250 i‡(
	`ngx_πmp_ªc‹d_wrôe_‰ame
(
s
, 
r˘x
, &
ch
,

1251 
codec_˘x
->
Øc_hódî
, 0)

1252 !
NGX_OK
)

1254  
NGX_OK
;

1257 
r˘x
->
Øc_hódî_£¡
 = 1;

1261 i‡(!
r˘x
->
avc_hódî_£¡
 && 
codec_˘x
->
avc_hódî
 &&

1262 (
ºacf
->
Êags
 & (
NGX_RTMP_RECORD_VIDEO
|

1263 
NGX_RTMP_RECORD_KEYFRAMES
)))

1265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1266 "ªc‹d: %V wrôög AVC hódî", &
ºacf
->
id
);

1268 
ch
.
ty≥
 = 
NGX_RTMP_MSG_VIDEO
;

1269 
ch
.
mÀn
 = 
	`ngx_πmp_ªc‹d_gë_chaö_mÀn
(
codec_˘x
->
avc_hódî
);

1271 i‡(
	`ngx_πmp_ªc‹d_wrôe_‰ame
(
s
, 
r˘x
, &
ch
,

1272 
codec_˘x
->
avc_hódî
, 0)

1273 !
NGX_OK
)

1275  
NGX_OK
;

1278 
r˘x
->
avc_hódî_£¡
 = 1;

1282 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_VIDEO
) {

1283 i‡(
codec_˘x
 && codec_˘x->
video_codec_id
 =
NGX_RTMP_VIDEO_H264
 &&

1284 !
r˘x
->
avc_hódî_£¡
)

1286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1287 "ªc‹d: %V skùpög u¡û H264 hódî", &
ºacf
->
id
);

1288  
NGX_OK
;

1291 i‡(
	`ngx_πmp_gë_video_‰ame_ty≥
(
ö
Ë=
NGX_RTMP_VIDEO_KEY_FRAME
 &&

1292 ((
codec_˘x
 && codec_˘x->
video_codec_id
 !
NGX_RTMP_VIDEO_H264
) ||

1293 !
	`ngx_πmp_is_codec_hódî
(
ö
)))

1295 
r˘x
->
video_key_£¡
 = 1;

1298 i‡(!
r˘x
->
video_key_£¡
) {

1299 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1300 "ªc‹d: %V skùpög u¡û key‰ame", &
ºacf
->
id
);

1301  
NGX_OK
;

1305 i‡(
codec_˘x
 && codec_˘x->
audio_codec_id
 =
NGX_RTMP_AUDIO_AAC
 &&

1306 !
r˘x
->
Øc_hódî_£¡
)

1308 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1309 "ªc‹d: %V skùpög u¡û AAC hódî", &
ºacf
->
id
);

1310  
NGX_OK
;

1314  
	`ngx_πmp_ªc‹d_wrôe_‰ame
(
s
, 
r˘x
, 
h
, 
ö
, 1);

1315 
	}
}

1318 
ngx_öt_t


1319 
	$ngx_πmp_ªc‹d_d⁄e_öô
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_ªc‹d_d⁄e_t
 *
v
)

1321  
NGX_OK
;

1322 
	}
}

1326 
	$ngx_πmp_ªc‹d_ªc‹dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1328 *
rv
;

1329 
ngx_öt_t
 
i
;

1330 
ngx_°r_t
 *
vÆue
;

1331 
ngx_c⁄f_t
 
ßve
;

1332 
ngx_πmp_moduÀ_t
 *
moduÀ
;

1333 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
, **
pˇcf
, *
rˇcf
;

1334 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
, **
¥acf
, *
ºacf
;

1335 
ngx_πmp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

1337 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1339 
ˇcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_≠p_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

1341 
øcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_≠p_c⁄f
(
cf
, 
ngx_πmp_ªc‹d_moduÀ
);

1343 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_c⁄f_˘x_t
));

1344 i‡(
˘x
 =
NULL
) {

1345  
NGX_CONF_ERROR
;

1348 
p˘x
 = 
cf
->
˘x
;

1350 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

1351 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

1353 
˘x
->
≠p_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_πmp_max_moduÀ
);

1354 i‡(
˘x
->
≠p_c⁄f
 =
NULL
) {

1355  
NGX_CONF_ERROR
;

1358 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1359 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_RTMP_MODULE
) {

1363 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

1365 i‡(
moduÀ
->
¸óã_≠p_c⁄f
) {

1366 
˘x
->
≠p_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =

1367 
moduÀ
->
	`¸óã_≠p_c⁄f
(
cf
);

1368 i‡(
˘x
->
≠p_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

1369  
NGX_CONF_ERROR
;

1375 
rˇcf
 = 
˘x
->
≠p_c⁄f
[
ngx_πmp_c‹e_moduÀ
.
˘x_ödex
];

1376 
rˇcf
->
≠p_c⁄f
 = 
˘x
->app_conf;

1377 
pˇcf
 = 
	`ngx_¨øy_push
(&
ˇcf
->
≠∂iˇti⁄s
);

1378 i‡(
pˇcf
 =
NULL
) {

1379  
NGX_CONF_ERROR
;

1381 *
pˇcf
 = 
rˇcf
;

1384 
ºacf
 = 
˘x
->
≠p_c⁄f
[
ngx_πmp_ªc‹d_moduÀ
.
˘x_ödex
];

1385 
ºacf
->
ªc_c⁄f
 = 
˘x
->
≠p_c⁄f
;

1386 
¥acf
 = 
	`ngx_¨øy_push
(&
øcf
->
ªc
);

1387 i‡(
¥acf
 =
NULL
) {

1388  
NGX_CONF_ERROR
;

1390 *
¥acf
 = 
ºacf
;

1392 
ºacf
->
id
 = 
vÆue
[1];

1395 
ßve
 = *
cf
;

1396 
cf
->
˘x
 = ctx;

1397 
cf
->
cmd_ty≥
 = 
NGX_RTMP_REC_CONF
;

1399 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

1400 *
cf

ßve
;

1402  
rv
;

1403 
	}
}

1406 
ngx_öt_t


1407 
	$ngx_πmp_ªc‹d_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1409 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

1410 
ngx_πmp_h™dÀr_±
 *
h
;

1412 
ngx_πmp_ªc‹d_d⁄e
 = 
ngx_πmp_ªc‹d_d⁄e_öô
;

1414 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

1416 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_AUDIO
]);

1417 *
h
 = 
ngx_πmp_ªc‹d_av
;

1419 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_MSG_VIDEO
]);

1420 *
h
 = 
ngx_πmp_ªc‹d_av
;

1422 
√xt_publish
 = 
ngx_πmp_publish
;

1423 
ngx_πmp_publish
 = 
ngx_πmp_ªc‹d_publish
;

1425 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

1426 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_ªc‹d_˛o£_°ªam
;

1428 
√xt_°ªam_begö
 = 
ngx_πmp_°ªam_begö
;

1429 
ngx_πmp_°ªam_begö
 = 
ngx_πmp_ªc‹d_°ªam_begö
;

1431 
√xt_°ªam_eof
 = 
ngx_πmp_°ªam_eof
;

1432 
ngx_πmp_°ªam_eof
 = 
ngx_πmp_ªc‹d_°ªam_eof
;

1434  
NGX_OK
;

1435 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_record_module.h

7 #i‚de‡
_NGX_RTMP_RECORD_H_INCLUDED_


8 
	#_NGX_RTMP_RECORD_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~"ngx_πmp.h
"

16 
	#NGX_RTMP_RECORD_OFF
 0x01

	)

17 
	#NGX_RTMP_RECORD_AUDIO
 0x02

	)

18 
	#NGX_RTMP_RECORD_VIDEO
 0x04

	)

19 
	#NGX_RTMP_RECORD_KEYFRAMES
 0x08

	)

20 
	#NGX_RTMP_RECORD_MANUAL
 0x10

	)

25 
ngx_queue_t
 
	mque
;

26 
ngx_Êag_t
 
	mis_ªc‹d
;

27 
ngx_Êag_t
 
	mis_f‹biddí
;

28 
u_ch¨
 
	m°ªam_«me
[
NGX_RTMP_MAX_NAME
];

29 
u_ch¨
 
	mliveid
[
NGX_RTMP_MAX_ARGS
];

30 } 
	tngx_°ªam_öfo
;

33 
ngx_queue_t
 *
	mqueue
;

34 } 
	tngx_πmp_ªc‹d_maö_c⁄f_t
;

36 
ngx_πmp_ªc‹d_maö_c⁄f_t
 *
	gngx_πmp_ªc‹d_maö_c⁄f
;

38 
ngx_öt_t
 
ngx_föd_queue
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
);

39 
ngx_Êag_t
 
ngx_queue_√ed_ªc‹d
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
);

40 
ngx_Êag_t
 
ngx_queue_is_f‹biddí
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, 
uöt32_t
 
Àn
);

41 
ngx_queue_ö£π
(
ngx_queue_t
 *
queue
, 
ngx_°ªam_öfo
 *
tmp_öfo
);

42 
ngx_queue_£t_m⁄ô‹_öfo
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, 
ngx_Êag_t
 
f‹bôãn
);

43 
ngx_queue_£t_ªc‹d_öfo
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, 
ngx_Êag_t
 
ªc‹d
);

44 
ngx_queue_ªmove_°©us
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
);

45 
ngx_queue_£t_liveid
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, u_ch¨ *
liveid
);

46 
ngx_¥öt_queue
(
ngx_queue_t
 *
queue
);

47 
ngx_öt_t
 
ngx_queue_gë_liveid
(
ngx_queue_t
 *
queue
, 
u_ch¨
 *
«me
, u_ch¨ *
liveid
);

51 
ngx_°r_t
 
	mid
;

52 
ngx_uöt_t
 
	mÊags
;

53 
ngx_°r_t
 
	m∑th
;

54 
size_t
 
	mmax_size
;

55 
size_t
 
	mmax_‰ames
;

56 
ngx_m£c_t
 
	möãrvÆ
;

57 
ngx_°r_t
 
	msuffix
;

58 
ngx_Êag_t
 
	munique
;

59 
ngx_Êag_t
 
	m≠≥nd
;

60 
ngx_Êag_t
 
	mlock_fûe
;

61 
ngx_Êag_t
 
	mnŸify
;

62 
ngx_uæ_t
 *
	muæ
;

64 **
	mªc_c⁄f
;

65 
ngx_¨øy_t
 
	mªc
;

66 } 
	tngx_πmp_ªc‹d_≠p_c⁄f_t
;

70 
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
	mc⁄f
;

71 
ngx_fûe_t
 
	mfûe
;

72 
ngx_uöt_t
 
	mn‰ames
;

73 
uöt32_t
 
	mïoch
, 
	mtime_shi·
;

74 
ngx_time_t
 
	mœ°
;

75 
time_t
 
	mtime°amp
;

76 
	mÁûed
:1;

77 
	möôülized
:1;

78 
	mØc_hódî_£¡
:1;

79 
	mavc_hódî_£¡
:1;

80 
	mvideo_key_£¡
:1;

81 
	maudio
:1;

82 
	mvideo
:1;

83 } 
	tngx_πmp_ªc‹d_ªc_˘x_t
;

87 
ngx_¨øy_t
 
	mªc
;

88 
u_ch¨
 
	m«me
[
NGX_RTMP_MAX_NAME
];

89 
u_ch¨
 
	m¨gs
[
NGX_RTMP_MAX_ARGS
];

90 
u_ch¨
 
	mliveid
[
NGX_RTMP_MAX_ARGS
];

91 } 
	tngx_πmp_ªc‹d_˘x_t
;

94 
ngx_uöt_t
 
ngx_πmp_ªc‹d_föd
(
ngx_πmp_ªc‹d_≠p_c⁄f_t
 *
øcf
,

95 
ngx_°r_t
 *
id
);

102 
ngx_öt_t
 
ngx_πmp_ªc‹d_›í
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
n
,

103 
ngx_°r_t
 *
∑th
);

104 
ngx_öt_t
 
ngx_πmp_ªc‹d_˛o£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
n
,

105 
ngx_°r_t
 *
∑th
);

109 
ngx_°r_t
 
	mªc‹dî
;

110 
ngx_°r_t
 
	m∑th
;

111 } 
	tngx_πmp_ªc‹d_d⁄e_t
;

114 
	$ngx_öt_t
 (*
	tngx_πmp_ªc‹d_d⁄e_±
)(
	tngx_πmp_£ssi⁄_t
 *
	ts
,

115 
	tngx_πmp_ªc‹d_d⁄e_t
 *
	tv
);

118 
ngx_πmp_ªc‹d_d⁄e_±
 
ngx_πmp_ªc‹d_d⁄e
;

121 
ngx_moduÀ_t
 
ngx_πmp_ªc‹d_moduÀ
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_relay_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp_ªœy_moduÀ.h
"

10 
	~"ngx_πmp_cmd_moduÀ.h
"

11 
	~"ngx_πmp_ªc‹d_moduÀ.h
"

14 
ngx_πmp_publish_±
 
	g√xt_publish
;

15 
ngx_πmp_∂ay_±
 
	g√xt_∂ay
;

16 
ngx_πmp_dñëe_°ªam_±
 
	g√xt_dñëe_°ªam
;

17 
ngx_πmp_˛o£_°ªam_±
 
	g√xt_˛o£_°ªam
;

20 
ngx_öt_t
 
ngx_πmp_ªœy_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_öt_t
 
ngx_πmp_ªœy_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

22 * 
ngx_πmp_ªœy_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
);

23 * 
ngx_πmp_ªœy_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
,

24 *
∑ª¡
, *
chûd
);

25 * 
ngx_πmp_ªœy_push_puŒ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 
ngx_öt_t
 
ngx_πmp_ªœy_publish
(
ngx_πmp_£ssi⁄_t
 *
s
,

28 
ngx_πmp_publish_t
 *
v
);

30 
ngx_πmp_puŒ_ªc‹d_t
 *
	gpuŒ_rs
 = 
NULL
;

49 
	#NGX_RTMP_RELAY_CONNECT_TRANS
 1

	)

50 
	#NGX_RTMP_RELAY_CREATE_STREAM_TRANS
 2

	)

53 
	#NGX_RTMP_RELAY_CSID_AMF_INI
 3

	)

54 
	#NGX_RTMP_RELAY_CSID_AMF
 5

	)

55 
	#NGX_RTMP_RELAY_MSID
 1

	)

59 
	#NGX_RTMP_RELAY_FLASHVER
 "LNX.11,1,102,55"

	)

62 
ngx_comm™d_t
 
	gngx_πmp_ªœy_comm™ds
[] = {

64 { 
ngx_°rög
("push"),

65 
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

66 
ngx_πmp_ªœy_push_puŒ
,

67 
NGX_RTMP_APP_CONF_OFFSET
,

69 
NULL
 },

71 { 
ngx_°rög
("pull"),

72 
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

73 
ngx_πmp_ªœy_push_puŒ
,

74 
NGX_RTMP_APP_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("cc_monitor_push"),

79 
NGX_RTMP_APP_CONF
|
NGX_CONF_1MORE
,

80 
ngx_πmp_ªœy_push_puŒ
,

81 
NGX_RTMP_APP_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("relay_buffer"),

86 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_m£c_¶Ÿ
,

88 
NGX_RTMP_APP_CONF_OFFSET
,

89 
off£tof
(
ngx_πmp_ªœy_≠p_c⁄f_t
, 
buÊí
),

90 
NULL
 },

92 { 
ngx_°rög
("push_reconnect"),

93 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

94 
ngx_c⁄f_£t_m£c_¶Ÿ
,

95 
NGX_RTMP_APP_CONF_OFFSET
,

96 
off£tof
(
ngx_πmp_ªœy_≠p_c⁄f_t
, 
push_ªc⁄√˘
),

97 
NULL
 },

99 { 
ngx_°rög
("pull_reconnect"),

100 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_m£c_¶Ÿ
,

102 
NGX_RTMP_APP_CONF_OFFSET
,

103 
off£tof
(
ngx_πmp_ªœy_≠p_c⁄f_t
, 
puŒ_ªc⁄√˘
),

104 
NULL
 },

106 { 
ngx_°rög
("session_relay"),

107 
NGX_RTMP_MAIN_CONF
|
NGX_RTMP_SRV_CONF
|
NGX_RTMP_APP_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_Êag_¶Ÿ
,

109 
NGX_RTMP_APP_CONF_OFFSET
,

110 
off£tof
(
ngx_πmp_ªœy_≠p_c⁄f_t
, 
£ssi⁄_ªœy
),

111 
NULL
 },

114 
ngx_nuŒ_comm™d


118 
ngx_πmp_moduÀ_t
 
	gngx_πmp_ªœy_moduÀ_˘x
 = {

119 
NULL
,

120 
ngx_πmp_ªœy_po°c⁄figuøti⁄
,

121 
NULL
,

122 
NULL
,

123 
NULL
,

124 
NULL
,

125 
ngx_πmp_ªœy_¸óã_≠p_c⁄f
,

126 
ngx_πmp_ªœy_mîge_≠p_c⁄f


130 
ngx_moduÀ_t
 
	gngx_πmp_ªœy_moduÀ
 = {

131 
NGX_MODULE_V1
,

132 &
ngx_πmp_ªœy_moduÀ_˘x
,

133 
ngx_πmp_ªœy_comm™ds
,

134 
NGX_RTMP_MODULE
,

135 
NULL
,

136 
NULL
,

137 
ngx_πmp_ªœy_öô_¥o˚ss
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NGX_MODULE_V1_PADDING


147 
	$ngx_πmp_ªœy_¸óã_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
)

149 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

151 
øcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_ªœy_≠p_c⁄f_t
));

152 i‡(
øcf
 =
NULL
) {

153  
NULL
;

156 i‡(
	`ngx_¨øy_öô
(&
øcf
->
pushes
, 
cf
->
poﬁ
, 1, (*)Ë!
NGX_OK
) {

157  
NULL
;

160 i‡(
	`ngx_¨øy_öô
(&
øcf
->
puŒs
, 
cf
->
poﬁ
, 1, (*)Ë!
NGX_OK
) {

161  
NULL
;

164 i‡(
	`ngx_¨øy_öô
(&
øcf
->
°©ic_puŒs
, 
cf
->
poﬁ
, 1, (*))

165 !
NGX_OK
)

167  
NULL
;

170 i‡(
	`ngx_¨øy_öô
(&
øcf
->
°©ic_evíts
, 
cf
->
poﬁ
, 1, (*))

171 !
NGX_OK
)

173  
NULL
;

176 
øcf
->
nbuckës
 = 1024;

177 
øcf
->
log
 = &
cf
->
cy˛e
->
√w_log
;

178 
øcf
->
buÊí
 = 
NGX_CONF_UNSET_MSEC
;

179 
øcf
->
£ssi⁄_ªœy
 = 
NGX_CONF_UNSET
;

180 
øcf
->
push_ªc⁄√˘
 = 
NGX_CONF_UNSET_MSEC
;

181 
øcf
->
puŒ_ªc⁄√˘
 = 
NGX_CONF_UNSET_MSEC
;

183  
øcf
;

184 
	}
}

188 
	$ngx_πmp_ªœy_mîge_≠p_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

190 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

191 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
c⁄f
 = 
chûd
;

193 
c⁄f
->
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_ªœy_˘x_t
 *)

194 * 
c⁄f
->
nbuckës
);

196 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_ªœy
, 
¥ev
->session_relay, 0);

197 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
buÊí
, 
¥ev
->buflen, 5000);

198 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
push_ªc⁄√˘
, 
¥ev
->push_reconnect,

200 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
puŒ_ªc⁄√˘
, 
¥ev
->pull_reconnect,

203  
NGX_CONF_OK
;

204 
	}
}

208 
	$ngx_πmp_ªœy_°©ic_puŒ_ªc⁄√˘
(
ngx_evít_t
 *
ev
)

210 
ngx_πmp_ªœy_°©ic_t
 *
rs
 = 
ev
->
d©a
;

212 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

213 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

215 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(&
rs
->
c˘x
, 
ngx_πmp_ªœy_moduÀ
);

217 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
øcf
->
log
, 0,

220 
˘x
 = 
	`ngx_πmp_ªœy_¸óã_c⁄√˘i⁄
(&
rs
->
c˘x
, &rs->
èrgë
->
«me
,

221 
rs
->
èrgë
);

222 i‡(
˘x
) {

223 
˘x
->
£ssi⁄
->
°©ic_ªœy
 = 1;

224 
˘x
->
°©ic_evt
 = 
ev
;

228 
	`ngx_add_timî
(
ev
, 
øcf
->
puŒ_ªc⁄√˘
);

229 
	}
}

233 
	$ngx_πmp_ªœy_push_ªc⁄√˘
(
ngx_evít_t
 *
ev
)

235 
ngx_πmp_£ssi⁄_t
 *
s
 = 
ev
->
d©a
;

237 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

238 
ngx_πmp_ªœy_˘x_t
 *
˘x
, *
p˘x
;

239 
ngx_uöt_t
 
n
;

240 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
, **
t
;

242 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

245 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

247 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

248 i‡(
˘x
 =
NULL
) {

252 
t
 = 
øcf
->
pushes
.
ñts
;

253 
n
 = 0;Ç < 
øcf
->
pushes
.
√…s
; ++n, ++
t
) {

254 
èrgë
 = *
t
;

256 i‡(
èrgë
->
«me
.
Àn
 && (
˘x
->name.len !=Åarget->name.len ||

257 
	`ngx_memcmp
(
˘x
->
«me
.
d©a
, 
èrgë
->«me.d©a, ctx->«me.
Àn
)))

262 
p˘x
 = 
˘x
->
∂ay
;Ö˘x;Ö˘x =Ö˘x->
√xt
) {

263 i‡(
p˘x
->
èg
 =&
ngx_πmp_ªœy_moduÀ
 &&

264 
p˘x
->
d©a
 =
èrgë
)

270 i‡(
p˘x
) {

274 i‡(
	`ngx_queue_is_f‹biddí
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
˘x
->
«me
.
d©a
, ctx->«me.
Àn
) == 1 &&

275 
	`ngx_°∫cmp
(
èrgë
->
push_mëhod
.
d©a
, "push", 4) == 0) {

276 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

277 "[CCBokêSåóm Info]: såóm %V i†f‹biddíÅÿcd¿f‹ m⁄ô‹ whíÑec⁄√˘", &
˘x
->
«me
);

280 i‡(
	`ngx_πmp_ªœy_push
(
s
, &
˘x
->
«me
, 
èrgë
Ë=
NGX_OK
) {

284 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

287 &
˘x
->
«me
, &
èrgë
->
≠p
, &èrgë->
∂ay_∑th
,

288 &
èrgë
->
uæ
.url);

290 i‡(!
˘x
->
push_evt
.
timî_£t
) {

291 
	`ngx_add_timî
(&
˘x
->
push_evt
, 
øcf
->
push_ªc⁄√˘
);

294 
	}
}

297 
ngx_öt_t


298 
	$ngx_πmp_ªœy_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

300  
NGX_OK
;

301 
	}
}

305 
	$ngx_πmp_ªœy_‰ì_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

306 
ngx_uöt_t
 
°©e
)

308 
	}
}

311 
	gngx_πmp_ªœy_˘x_t
 * (* 
	tngx_πmp_ªœy_¸óã_˘x_±
)

312 (
	tngx_πmp_£ssi⁄_t
 *
	ts
, 
	tngx_°r_t
 *
	t«me
, 
	tngx_πmp_ªœy_èrgë_t
 *
	tèrgë
);

315 
ngx_öt_t


316 
	$ngx_πmp_ªœy_c›y_°r
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

318 i‡(
§c
->
Àn
 == 0) {

319  
NGX_OK
;

321 
d°
->
Àn
 = 
§c
->len;

322 
d°
->
d©a
 = 
	`ngx_∑Œoc
(
poﬁ
, 
§c
->
Àn
);

323 i‡(
d°
->
d©a
 =
NULL
) {

324  
NGX_ERROR
;

326 
	`ngx_mem˝y
(
d°
->
d©a
, 
§c
->d©a, src->
Àn
);

327  
NGX_OK
;

328 
	}
}

331 
ngx_πmp_ªœy_˘x_t
 *

332 
	$ngx_πmp_ªœy_¸óã_c⁄√˘i⁄
(
ngx_πmp_c⁄f_˘x_t
 *
c˘x
, 
ngx_°r_t
* 
«me
,

333 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
)

335 
	`¥ötf
("ngx_rtmp_relay_create_connection\n");

336 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

337 
ngx_πmp_ªœy_˘x_t
 *
r˘x
;

338 
ngx_πmp_addr_c⁄f_t
 *
addr_c⁄f
;

339 
ngx_πmp_c⁄f_˘x_t
 *
addr_˘x
;

340 
ngx_πmp_£ssi⁄_t
 *
rs
;

341 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
;

342 
ngx_c⁄√˘i⁄_t
 *
c
;

343 
ngx_addr_t
 *
addr
;

344 
ngx_poﬁ_t
 *
poﬁ
;

345 
ngx_öt_t
 
rc
;

346 
ngx_°r_t
 
v
, *
uri
;

347 
u_ch¨
 *
fú°
, *
œ°
, *
p
;

349 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
c˘x
, 
ngx_πmp_ªœy_moduÀ
);

351 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
øcf
->
log
, 0,

354 
poﬁ
 = 
NULL
;

355 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(4096, 
øcf
->
log
);

356 i‡(
poﬁ
 =
NULL
) {

357  
NULL
;

360 
r˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_πmp_ªœy_˘x_t
));

361 i‡(
r˘x
 =
NULL
) {

362 
˛ór
;

365 i‡(
«me
 && 
	`ngx_πmp_ªœy_c›y_°r
(
poﬁ
, &
r˘x
->«me,ÇameË!
NGX_OK
) {

366 
˛ór
;

369 i‡(
	`ngx_πmp_ªœy_c›y_°r
(
poﬁ
, &
r˘x
->
uæ
, &
èrgë
->uæ.uæË!
NGX_OK
) {

370 
˛ór
;

373 
r˘x
->
èg
 = 
èrgë
->tag;

374 
r˘x
->
d©a
 = 
èrgë
->data;

376 
	#NGX_RTMP_RELAY_STR_COPY
(
to
, 
‰om
) \

377 i‡(
	`ngx_πmp_ªœy_c›y_°r
(
poﬁ
, &
r˘x
->
to
, &
èrgë
->
‰om
Ë!
NGX_OK
) { \

378 
˛ór
; \

379 }

	)

381 
	`NGX_RTMP_RELAY_STR_COPY
(
≠p
,ápp);

382 
	`NGX_RTMP_RELAY_STR_COPY
(
tc_uæ
,Åc_url);

383 
	`NGX_RTMP_RELAY_STR_COPY
(
∑ge_uæ
,Öage_url);

384 
	`NGX_RTMP_RELAY_STR_COPY
(
swf_uæ
, swf_url);

385 
	`NGX_RTMP_RELAY_STR_COPY
(
Êash_vî
, flash_ver);

386 
	`NGX_RTMP_RELAY_STR_COPY
(
∂ay_∑th
,Ölay_path);

388 
r˘x
->
live
 = 
èrgë
->live;

389 
r˘x
->
°¨t
 = 
èrgë
->start;

390 
r˘x
->
°›
 = 
èrgë
->stop;

392 #unde‡
NGX_RTMP_RELAY_STR_COPY


394 i‡(
r˘x
->
≠p
.
Àn
 =0 ||Ñ˘x->
∂ay_∑th
.len == 0) {

396 
uri
 = &
èrgë
->
uæ
.uri;

397 
fú°
 = 
uri
->
d©a
;

398 
œ°
 = 
uri
->
d©a
 + uri->
Àn
;

399 i‡(
fú°
 !
œ°
 && *first == '/') {

400 ++
fú°
;

403 i‡(
fú°
 !
œ°
) {

406 
p
 = 
	`ngx_°æchr
(
fú°
, 
œ°
, '/');

407 i‡(
p
 =
NULL
) {

408 
p
 = 
œ°
;

411 i‡(
r˘x
->
≠p
.
Àn
 =0 && 
fú°
 !
p
) {

412 
v
.
d©a
 = 
fú°
;

413 
v
.
Àn
 = 
p
 - 
fú°
;

414 i‡(
	`ngx_πmp_ªœy_c›y_°r
(
poﬁ
, &
r˘x
->
≠p
, &
v
Ë!
NGX_OK
) {

415 
˛ór
;

420 i‡(
p
 !
œ°
) {

421 ++
p
;

424 i‡(
r˘x
->
∂ay_∑th
.
Àn
 =0 && 
p
 !
œ°
) {

425 
v
.
d©a
 = 
p
;

426 
v
.
Àn
 = 
œ°
 - 
p
;

427 i‡(
	`ngx_πmp_ªœy_c›y_°r
(
poﬁ
, &
r˘x
->
∂ay_∑th
, &
v
)

428 !
NGX_OK
)

430 
˛ór
;

436 
pc
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_≥î_c⁄√˘i⁄_t
));

437 i‡(
pc
 =
NULL
) {

438 
˛ór
;

441 i‡(
èrgë
->
uæ
.
«ddrs
 == 0) {

442 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
øcf
->
log
, 0,

444 
˛ór
;

448 
addr
 = &
èrgë
->
uæ
.
addrs
[èrgë->
cou¡î
 %Å¨gë->uæ.
«ddrs
];

449 
èrgë
->
cou¡î
++;

452 
r˘x
->
log
 = *
øcf
->log;

453 
pc
->
log
 = &
r˘x
->log;

454 
pc
->
gë
 = 
ngx_πmp_ªœy_gë_≥î
;

455 
pc
->
‰ì
 = 
ngx_πmp_ªœy_‰ì_≥î
;

456 
pc
->
«me
 = &
addr
->name;

457 
pc
->
sockÀn
 = 
addr
->socklen;

458 
pc
->
sockaddr
 = (sockadd∏*)
	`ngx_∑Œoc
(
poﬁ
,Öc->
sockÀn
);

459 i‡(
pc
->
sockaddr
 =
NULL
) {

460 
˛ór
;

462 
	`ngx_mem˝y
(
pc
->
sockaddr
, 
addr
->sockaddr,Öc->
sockÀn
);

464 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(
pc
);

465 i‡(
rc
 !
NGX_OK
 &&Ñ¯!
NGX_AGAIN
 ) {

466 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
øcf
->
log
, 0,

468 
˛ór
;

470 
c
 = 
pc
->
c⁄√˘i⁄
;

471 
c
->
poﬁ
 =Öool;

472 
c
->
addr_ãxt
 = 
r˘x
->
uæ
;

474 
addr_c⁄f
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_πmp_addr_c⁄f_t
));

475 i‡(
addr_c⁄f
 =
NULL
) {

476 
˛ór
;

478 
addr_˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_πmp_c⁄f_˘x_t
));

479 i‡(
addr_˘x
 =
NULL
) {

480 
˛ór
;

482 
addr_c⁄f
->
˘x
 = 
addr_˘x
;

483 
addr_˘x
->
maö_c⁄f
 = 
c˘x
->main_conf;

484 
addr_˘x
->
§v_c⁄f
 = 
c˘x
->srv_conf;

485 
	`ngx_°r_£t
(&
addr_c⁄f
->
addr_ãxt
, "ngx-relay");

487 
rs
 = 
	`ngx_πmp_öô_£ssi⁄
(
c
, 
addr_c⁄f
);

488 i‡(
rs
 =
NULL
) {

490  
NULL
;

492 
rs
->
≠p_c⁄f
 = 
c˘x
->app_conf;

493 
rs
->
ªœy
 = 1;

494 
r˘x
->
£ssi⁄
 = 
rs
;

495 
	`ngx_πmp_£t_˘x
(
rs
, 
r˘x
, 
ngx_πmp_ªœy_moduÀ
);

496 
	`ngx_°r_£t
(&
rs
->
Êashvî
, "ngx-local-relay");

498 i‡(
	`ngx_°∫cmp
("cc_m⁄ô‹_push", 
èrgë
->
push_mëhod
.
d©a
,Å¨gë->push_mëhod.
Àn
) == 0) {

499 
rs
->
cc_m⁄ô‹_push
 = 1;

502 
rs
->
cc_m⁄ô‹_push
 = 0;

505 #i‡(
NGX_STAT_STUB
)

506 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

509 
	`ngx_πmp_˛õ¡_h™dshake
(
rs
, 1);

510  
r˘x
;

512 
˛ór
:

513 i‡(
poﬁ
) {

514 
	`ngx_de°roy_poﬁ
(
poﬁ
);

516  
NULL
;

517 
	}
}

520 
ngx_πmp_ªœy_˘x_t
 *

521 
	$ngx_πmp_ªœy_¸óã_ªmŸe_˘x
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
* 
«me
,

522 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
)

524 
ngx_πmp_c⁄f_˘x_t
 
c˘x
;

526 
c˘x
.
≠p_c⁄f
 = 
s
->app_conf;

527 
c˘x
.
§v_c⁄f
 = 
s
->srv_conf;

528 
c˘x
.
maö_c⁄f
 = 
s
->main_conf;

530  
	`ngx_πmp_ªœy_¸óã_c⁄√˘i⁄
(&
c˘x
, 
«me
, 
èrgë
);

531 
	}
}

534 
ngx_πmp_ªœy_˘x_t
 *

535 
	$ngx_πmp_ªœy_¸óã_loˇl_˘x
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
«me
,

536 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
)

538 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

540 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

543 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

544 i‡(
˘x
 =
NULL
) {

545 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_πmp_ªœy_˘x_t
));

546 i‡(
˘x
 =
NULL
) {

547  
NULL
;

549 
	`ngx_πmp_£t_˘x
(
s
, 
˘x
, 
ngx_πmp_ªœy_moduÀ
);

551 
˘x
->
£ssi⁄
 = 
s
;

553 
˘x
->
push_evt
.
d©a
 = 
s
;

554 
˘x
->
push_evt
.
log
 = 
s
->
c⁄√˘i⁄
->log;

555 
˘x
->
push_evt
.
h™dÀr
 = 
ngx_πmp_ªœy_push_ªc⁄√˘
;

557 i‡(
˘x
->
publish
) {

558  
NULL
;

561 i‡(
	`ngx_πmp_ªœy_c›y_°r
(
s
->
c⁄√˘i⁄
->
poﬁ
, &
˘x
->
«me
,Çame)

562 !
NGX_OK
)

564  
NULL
;

567  
˘x
;

568 
	}
}

571 
ngx_öt_t


572 
	$ngx_πmp_ªœy_¸óã
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
«me
,

573 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
,

574 
ngx_πmp_ªœy_¸óã_˘x_±
 
¸óã_publish_˘x
,

575 
ngx_πmp_ªœy_¸óã_˘x_±
 
¸óã_∂ay_˘x
)

577 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

578 
ngx_πmp_ªœy_˘x_t
 *
publish_˘x
, *
∂ay_˘x
, **
c˘x
;

579 
ngx_uöt_t
 
hash
;

582 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

583 i‡(
øcf
 =
NULL
) {

584  
NGX_ERROR
;

587 
∂ay_˘x
 = 
	`¸óã_∂ay_˘x
(
s
, 
«me
, 
èrgë
);

588 i‡(
∂ay_˘x
 =
NULL
) {

589  
NGX_ERROR
;

592 
hash
 = 
	`ngx_hash_key
(
«me
->
d©a
,Çame->
Àn
);

593 
c˘x
 = &
øcf
->
˘x
[
hash
 %Ñacf->
nbuckës
];

594 ; *
c˘x
; c˘x = &(*c˘x)->
√xt
) {

595 i‡((*
c˘x
)->
«me
.
Àn
 ==Çame->len

596 && !
	`ngx_memcmp
(
«me
->
d©a
, (*
c˘x
)->name.data,

597 
«me
->
Àn
))

603 i‡(*
c˘x
) {

604 
∂ay_˘x
->
publish
 = (*
c˘x
)->publish;

605 
∂ay_˘x
->
√xt
 = (*
c˘x
)->
∂ay
;

606 (*
c˘x
)->
∂ay
 = 
∂ay_˘x
;

607  
NGX_OK
;

610 
publish_˘x
 = 
	`¸óã_publish_˘x
(
s
, 
«me
, 
èrgë
);

611 i‡(
publish_˘x
 =
NULL
) {

612 
	`ngx_πmp_föÆize_£ssi⁄
(
∂ay_˘x
->
£ssi⁄
);

613  
NGX_ERROR
;

616 
publish_˘x
->
publish
 =Öublish_ctx;

617 
publish_˘x
->
∂ay
 = 
∂ay_˘x
;

618 
∂ay_˘x
->
publish
 = 
publish_˘x
;

619 *
c˘x
 = 
publish_˘x
;

621  
NGX_OK
;

622 
	}
}

625 
ngx_öt_t


626 
	$ngx_πmp_ªœy_puŒ
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
«me
,

627 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
)

629 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

631 
«me
, &
èrgë
->
≠p
, &èrgë->
∂ay_∑th
, &èrgë->
uæ
.url);

633  
	`ngx_πmp_ªœy_¸óã
(
s
, 
«me
, 
èrgë
,

634 
ngx_πmp_ªœy_¸óã_ªmŸe_˘x
,

635 
ngx_πmp_ªœy_¸óã_loˇl_˘x
);

636 
	}
}

639 
ngx_öt_t


640 
	$ngx_πmp_ªœy_push
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
«me
,

641 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
)

643 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

645 
«me
, &
èrgë
->
≠p
, &èrgë->
∂ay_∑th
, &èrgë->
uæ
.url);

647  
	`ngx_πmp_ªœy_¸óã
(
s
, 
«me
, 
èrgë
,

648 
ngx_πmp_ªœy_¸óã_loˇl_˘x
,

649 
ngx_πmp_ªœy_¸óã_ªmŸe_˘x
);

650 
	}
}

653 
ngx_öt_t


654 
	$ngx_πmp_ªœy_publish
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_publish_t
 *
v
)

656 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

657 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
, **
t
;

658 
ngx_°r_t
 
«me
;

659 
size_t
 
n
;

660 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

662 i‡(
s
->
auto_pushed
) {

663 
√xt
;

666 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

667 i‡(
˘x
 && 
s
->
ªœy
) {

668 
√xt
;

671 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

672 i‡(
øcf
 =
NULL
 ||Ñacf->
pushes
.
√…s
 == 0) {

673 
√xt
;

676 
«me
.
Àn
 = 
	`ngx_°æí
(
v
->name);

677 
«me
.
d©a
 = 
v
->name;

679 
t
 = 
øcf
->
pushes
.
ñts
;

680 
n
 = 0;Ç < 
øcf
->
pushes
.
√…s
; ++n, ++
t
) {

681 
èrgë
 = *
t
;

683 i‡(
èrgë
->
«me
.
Àn
 && (name.len !=Åarget->name.len ||

684 
	`ngx_memcmp
(
«me
.
d©a
, 
èrgë
->«me.d©a,Çame.
Àn
)))

689 i‡(
	`ngx_queue_is_f‹biddí
(
ngx_πmp_ªc‹d_maö_c⁄f
->
queue
, 
«me
.
d©a
,Çame.
Àn
) == 1 &&

690 
	`ngx_°∫cmp
(
èrgë
->
push_mëhod
.
d©a
, "push", 4) == 0)

692 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

693 "[CCBokêSåóm Info]: såóm %†i†f‹biddíÅÿcd¿f‹ m⁄ô‹ whí c⁄√˘", 
«me
.
d©a
);

696 i‡(
	`ngx_πmp_ªœy_push
(
s
, &
«me
, 
èrgë
Ë=
NGX_OK
) {

700 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

703 &
«me
, &
èrgë
->
≠p
, &èrgë->
∂ay_∑th
,

704 &
èrgë
->
uæ
.url);

706 i‡(!
˘x
->
push_evt
.
timî_£t
) {

707 
	`ngx_add_timî
(&
˘x
->
push_evt
, 
øcf
->
push_ªc⁄√˘
);

711 
√xt
:

712  
	`√xt_publish
(
s
, 
v
);

713 
	}
}

716 
ngx_öt_t


717 
	$ngx_πmp_ªœy_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_∂ay_t
 *
v
)

719 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

720 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
, **
t
;

721 
ngx_°r_t
 
«me
;

722 
size_t
 
n
;

723 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

725 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

726 i‡(
˘x
 && 
s
->
ªœy
) {

727 
√xt
;

730 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

731 i‡(
øcf
 =
NULL
 ||Ñacf->
puŒs
.
√…s
 == 0) {

732 
√xt
;

735 
«me
.
Àn
 = 
	`ngx_°æí
(
v
->name);

736 
«me
.
d©a
 = 
v
->name;

738 
t
 = 
øcf
->
puŒs
.
ñts
;

739 
n
 = 0;Ç < 
øcf
->
puŒs
.
√…s
; ++n, ++
t
) {

740 
èrgë
 = *
t
;

742 i‡(
èrgë
->
«me
.
Àn
 && (name.len !=Åarget->name.len ||

743 
	`ngx_memcmp
(
«me
.
d©a
, 
èrgë
->«me.d©a,Çame.
Àn
)))

748 i‡(
	`ngx_πmp_ªœy_puŒ
(
s
, &
«me
, 
èrgë
Ë=
NGX_OK
) {

752 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

755 &
«me
, &
èrgë
->
≠p
, &èrgë->
∂ay_∑th
,

756 &
èrgë
->
uæ
.url);

759 
√xt
:

760  
	`√xt_∂ay
(
s
, 
v
);

761 
	}
}

764 
ngx_öt_t


765 
	$ngx_πmp_ªœy_∂ay_loˇl
(
ngx_πmp_£ssi⁄_t
 *
s
)

767 
ngx_πmp_∂ay_t
 
v
;

768 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

770 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

771 i‡(
˘x
 =
NULL
) {

772  
NGX_ERROR
;

775 
	`ngx_memzîo
(&
v
, (
ngx_πmp_∂ay_t
));

776 
v
.
sûít
 = 1;

777 *(
	`ngx_˝ymem
(
v
.
«me
, 
˘x
->«me.
d©a
,

778 
	`ngx_mö
((
v
.
«me
Ë- 1, 
˘x
->«me.
Àn
))) = 0;

780  
	`ngx_πmp_∂ay
(
s
, &
v
);

781 
	}
}

784 
ngx_öt_t


785 
	$ngx_πmp_ªœy_publish_loˇl
(
ngx_πmp_£ssi⁄_t
 *
s
)

787 
ngx_πmp_publish_t
 
v
;

788 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

790 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

791 i‡(
˘x
 =
NULL
) {

792  
NGX_ERROR
;

795 
	`ngx_memzîo
(&
v
, (
ngx_πmp_publish_t
));

796 
v
.
sûít
 = 1;

797 *(
	`ngx_˝ymem
(
v
.
«me
, 
˘x
->«me.
d©a
,

798 
	`ngx_mö
((
v
.
«me
Ë- 1, 
˘x
->«me.
Àn
))) = 0;

800  
	`ngx_πmp_publish
(
s
, &
v
);

801 
	}
}

804 
ngx_öt_t


805 
	$ngx_πmp_ªœy_£nd_c⁄√˘
(
ngx_πmp_£ssi⁄_t
 *
s
)

807 
å™s
 = 
NGX_RTMP_RELAY_CONNECT_TRANS
;

808 
acodecs
 = 3575;

809 
vcodecs
 = 252;

811 
ngx_πmp_amf_ñt_t
 
out_cmd
[] = {

813 { 
NGX_RTMP_AMF_STRING
,

814 
	`ngx_°rög
("app"),

815 
NULL
, 0 },

817 { 
NGX_RTMP_AMF_STRING
,

818 
	`ngx_°rög
("tcUrl"),

819 
NULL
, 0 },

821 { 
NGX_RTMP_AMF_STRING
,

822 
	`ngx_°rög
("pageUrl"),

823 
NULL
, 0 },

825 { 
NGX_RTMP_AMF_STRING
,

826 
	`ngx_°rög
("swfUrl"),

827 
NULL
, 0 },

829 { 
NGX_RTMP_AMF_STRING
,

830 
	`ngx_°rög
("flashVer"),

831 
NULL
, 0 },

833 { 
NGX_RTMP_AMF_NUMBER
,

834 
	`ngx_°rög
("audioCodecs"),

835 &
acodecs
, 0 },

837 { 
NGX_RTMP_AMF_NUMBER
,

838 
	`ngx_°rög
("videoCodecs"),

839 &
vcodecs
, 0 }

842 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

844 { 
NGX_RTMP_AMF_STRING
,

845 
ngx_nuŒ_°rög
,

848 { 
NGX_RTMP_AMF_NUMBER
,

849 
ngx_nuŒ_°rög
,

850 &
å™s
, 0 },

852 { 
NGX_RTMP_AMF_OBJECT
,

853 
ngx_nuŒ_°rög
,

854 
out_cmd
, (out_cmd) }

857 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
;

858 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

859 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

860 
ngx_πmp_hódî_t
 
h
;

861 
size_t
 
Àn
, 
uæ_Àn
;

862 
u_ch¨
 *
p
, *
uæ_íd
;

865 
ˇcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

866 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

867 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

868 i‡(
ˇcf
 =
NULL
 || 
˘x
 == NULL) {

869  
NGX_ERROR
;

873 i‡(
˘x
->
≠p
.
Àn
) {

874 
out_cmd
[0].
d©a
 = 
˘x
->
≠p
.data;

875 
out_cmd
[0].
Àn
 = 
˘x
->
≠p
.len;

877 
out_cmd
[0].
d©a
 = 
ˇcf
->
«me
.data;

878 
out_cmd
[0].
Àn
 = 
ˇcf
->
«me
.len;

882 i‡(
˘x
->
tc_uæ
.
Àn
) {

883 
out_cmd
[1].
d©a
 = 
˘x
->
tc_uæ
.data;

884 
out_cmd
[1].
Àn
 = 
˘x
->
tc_uæ
.len;

886 
Àn
 = ("πmp://"Ë- 1 + 
˘x
->
uæ
.len +

887 ("/"Ë- 1 + 
˘x
->
≠p
.
Àn
;

888 
p
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

889 i‡(
p
 =
NULL
) {

890  
NGX_ERROR
;

892 
out_cmd
[1].
d©a
 = 
p
;

893 
p
 = 
	`ngx_˝ymem
(p, "rtmp://", ("rtmp://") - 1);

895 
uæ_Àn
 = 
˘x
->
uæ
.
Àn
;

896 
uæ_íd
 = 
	`ngx_°æchr
(
˘x
->
uæ
.
d©a
, ctx->uæ.d©®+ ctx->uæ.
Àn
, '/');

897 i‡(
uæ_íd
) {

898 
uæ_Àn
 = (
size_t
Ë(
uæ_íd
 - 
˘x
->
uæ
.
d©a
);

901 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
uæ
.
d©a
, 
uæ_Àn
);

902 *
p
++ = '/';

903 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
≠p
.
d©a
, ctx->≠p.
Àn
);

904 
out_cmd
[1].
Àn
 = 
p
 - (
u_ch¨
 *)out_cmd[1].
d©a
;

908 
out_cmd
[2].
d©a
 = 
˘x
->
∑ge_uæ
.data;

909 
out_cmd
[2].
Àn
 = 
˘x
->
∑ge_uæ
.len;

912 
out_cmd
[3].
d©a
 = 
˘x
->
swf_uæ
.data;

913 
out_cmd
[3].
Àn
 = 
˘x
->
swf_uæ
.len;

916 i‡(
˘x
->
Êash_vî
.
Àn
) {

917 
out_cmd
[4].
d©a
 = 
˘x
->
Êash_vî
.data;

918 
out_cmd
[4].
Àn
 = 
˘x
->
Êash_vî
.len;

920 
out_cmd
[4].
d©a
 = 
NGX_RTMP_RELAY_FLASHVER
;

921 
out_cmd
[4].
Àn
 = (
NGX_RTMP_RELAY_FLASHVER
) - 1;

924 
	`ngx_memzîo
(&
h
, (h));

925 
h
.
csid
 = 
NGX_RTMP_RELAY_CSID_AMF_INI
;

926 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_CMD
;

928  
	`ngx_πmp_£nd_chunk_size
(
s
, 
cscf
->
chunk_size
Ë!
NGX_OK


929 || 
	`ngx_πmp_£nd_ack_size
(
s
, 
cscf
->
ack_wödow
Ë!
NGX_OK


930 || 
	`ngx_πmp_£nd_amf
(
s
, &
h
, 
out_ñts
,

931 (
out_ñts
Ë/ (out_ñts[0])Ë!
NGX_OK


932 ? 
NGX_ERROR


933 : 
NGX_OK
;

934 
	}
}

937 
ngx_öt_t


938 
	$ngx_πmp_ªœy_£nd_¸óã_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
)

940 
å™s
 = 
NGX_RTMP_RELAY_CREATE_STREAM_TRANS
;

942 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

944 { 
NGX_RTMP_AMF_STRING
,

945 
ngx_nuŒ_°rög
,

948 { 
NGX_RTMP_AMF_NUMBER
,

949 
ngx_nuŒ_°rög
,

950 &
å™s
, 0 },

952 { 
NGX_RTMP_AMF_NULL
,

953 
ngx_nuŒ_°rög
,

954 
NULL
, 0 }

957 
ngx_πmp_hódî_t
 
h
;

960 
	`ngx_memzîo
(&
h
, (h));

961 
h
.
csid
 = 
NGX_RTMP_RELAY_CSID_AMF_INI
;

962 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_CMD
;

964  
	`ngx_πmp_£nd_amf
(
s
, &
h
, 
out_ñts
,

965 (
out_ñts
) / (out_elts[0]));

966 
	}
}

969 
ngx_öt_t


970 
	$ngx_πmp_ªœy_£nd_publish
(
ngx_πmp_£ssi⁄_t
 *
s
)

972 
å™s
;

974 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

976 { 
NGX_RTMP_AMF_STRING
,

977 
ngx_nuŒ_°rög
,

980 { 
NGX_RTMP_AMF_NUMBER
,

981 
ngx_nuŒ_°rög
,

982 &
å™s
, 0 },

984 { 
NGX_RTMP_AMF_NULL
,

985 
ngx_nuŒ_°rög
,

986 
NULL
, 0 },

988 { 
NGX_RTMP_AMF_STRING
,

989 
ngx_nuŒ_°rög
,

990 
NULL
, 0 },

992 { 
NGX_RTMP_AMF_STRING
,

993 
ngx_nuŒ_°rög
,

997 
ngx_πmp_hódî_t
 
h
;

998 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

1001 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1002 i‡(
˘x
 =
NULL
) {

1003  
NGX_ERROR
;

1006 i‡(
˘x
->
∂ay_∑th
.
Àn
) {

1007 
out_ñts
[3].
d©a
 = 
˘x
->
∂ay_∑th
.data;

1008 
out_ñts
[3].
Àn
 = 
˘x
->
∂ay_∑th
.len;

1010 
out_ñts
[3].
d©a
 = 
˘x
->
«me
.data;

1011 
out_ñts
[3].
Àn
 = 
˘x
->
«me
.len;

1014 
	`ngx_memzîo
(&
h
, (h));

1015 
h
.
csid
 = 
NGX_RTMP_RELAY_CSID_AMF
;

1016 
h
.
msid
 = 
NGX_RTMP_RELAY_MSID
;

1017 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_CMD
;

1019  
	`ngx_πmp_£nd_amf
(
s
, &
h
, 
out_ñts
,

1020 (
out_ñts
) / (out_elts[0]));

1021 
	}
}

1024 
ngx_öt_t


1025 
	$ngx_πmp_ªœy_£nd_∂ay
(
ngx_πmp_£ssi⁄_t
 *
s
)

1027 
å™s
;

1028 
°¨t
, 
duøti⁄
;

1030 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

1032 { 
NGX_RTMP_AMF_STRING
,

1033 
ngx_nuŒ_°rög
,

1036 { 
NGX_RTMP_AMF_NUMBER
,

1037 
ngx_nuŒ_°rög
,

1038 &
å™s
, 0 },

1040 { 
NGX_RTMP_AMF_NULL
,

1041 
ngx_nuŒ_°rög
,

1042 
NULL
, 0 },

1044 { 
NGX_RTMP_AMF_STRING
,

1045 
ngx_nuŒ_°rög
,

1046 
NULL
, 0 },

1048 { 
NGX_RTMP_AMF_NUMBER
,

1049 
ngx_nuŒ_°rög
,

1050 &
°¨t
, 0 },

1052 { 
NGX_RTMP_AMF_NUMBER
,

1053 
ngx_nuŒ_°rög
,

1054 &
duøti⁄
, 0 },

1057 
ngx_πmp_hódî_t
 
h
;

1058 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

1059 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

1062 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1063 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1064 i‡(
øcf
 =
NULL
 || 
˘x
 == NULL) {

1065  
NGX_ERROR
;

1068 i‡(
˘x
->
∂ay_∑th
.
Àn
) {

1069 
out_ñts
[3].
d©a
 = 
˘x
->
∂ay_∑th
.data;

1070 
out_ñts
[3].
Àn
 = 
˘x
->
∂ay_∑th
.len;

1072 
out_ñts
[3].
d©a
 = 
˘x
->
«me
.data;

1073 
out_ñts
[3].
Àn
 = 
˘x
->
«me
.len;

1076 i‡(
˘x
->
live
) {

1077 
°¨t
 = -1000;

1078 
duøti⁄
 = -1000;

1080 
°¨t
 = (
˘x
->start ? ctx->start : -2000);

1081 
duøti⁄
 = (
˘x
->
°›
 ? ctx->°› - ctx->
°¨t
 : -1000);

1084 
	`ngx_memzîo
(&
h
, (h));

1085 
h
.
csid
 = 
NGX_RTMP_RELAY_CSID_AMF
;

1086 
h
.
msid
 = 
NGX_RTMP_RELAY_MSID
;

1087 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_CMD
;

1089  
	`ngx_πmp_£nd_amf
(
s
, &
h
, 
out_ñts
,

1090 (
out_ñts
Ë/ (out_ñts[0])Ë!
NGX_OK


1091 || 
	`ngx_πmp_£nd_£t_buÊí
(
s
, 
NGX_RTMP_RELAY_MSID
,

1092 
øcf
->
buÊí
Ë!
NGX_OK


1093 ? 
NGX_ERROR


1094 : 
NGX_OK
;

1095 
	}
}

1098 
ngx_öt_t


1099 
	$ngx_πmp_ªœy_⁄_ªsu…
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1100 
ngx_chaö_t
 *
ö
)

1102 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

1104 
å™s
;

1105 
u_ch¨
 
Àvñ
[32];

1106 
u_ch¨
 
code
[128];

1107 
u_ch¨
 
desc
[1024];

1108 } 
v
;

1110 
ngx_πmp_amf_ñt_t
 
ö_öf
[] = {

1112 { 
NGX_RTMP_AMF_STRING
,

1113 
	`ngx_°rög
("level"),

1114 &
v
.
Àvñ
, (v.level) },

1116 { 
NGX_RTMP_AMF_STRING
,

1117 
	`ngx_°rög
("code"),

1118 &
v
.
code
, (v.code) },

1120 { 
NGX_RTMP_AMF_STRING
,

1121 
	`ngx_°rög
("description"),

1122 &
v
.
desc
, (v.desc) },

1125 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

1127 { 
NGX_RTMP_AMF_NUMBER
,

1128 
ngx_nuŒ_°rög
,

1129 &
v
.
å™s
, 0 },

1131 { 
NGX_RTMP_AMF_NULL
,

1132 
ngx_nuŒ_°rög
,

1133 
NULL
, 0 },

1135 { 
NGX_RTMP_AMF_OBJECT
,

1136 
ngx_nuŒ_°rög
,

1137 
ö_öf
, (in_inf) },

1141 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1142 i‡(
˘x
 =
NULL
 || !
s
->
ªœy
) {

1143  
NGX_OK
;

1146 
	`ngx_memzîo
(&
v
, (v));

1147 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

1148 (
ö_ñts
) / (in_elts[0])))

1150  
NGX_ERROR
;

1153 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1155 
v
.
Àvñ
, v.
code
, v.
desc
);

1157 (
ngx_öt_t
)
v
.
å™s
) {

1158 
NGX_RTMP_RELAY_CONNECT_TRANS
:

1159  
	`ngx_πmp_ªœy_£nd_¸óã_°ªam
(
s
);

1161 
NGX_RTMP_RELAY_CREATE_STREAM_TRANS
:

1162 i‡(
˘x
->
publish
 !˘x && !
s
->
°©ic_ªœy
) {

1163 i‡(
	`ngx_πmp_ªœy_£nd_publish
(
s
Ë!
NGX_OK
) {

1164  
NGX_ERROR
;

1166  
	`ngx_πmp_ªœy_∂ay_loˇl
(
s
);

1169 i‡(
	`ngx_πmp_ªœy_£nd_∂ay
(
s
Ë!
NGX_OK
) {

1170  
NGX_ERROR
;

1172  
	`ngx_πmp_ªœy_publish_loˇl
(
s
);

1176  
NGX_OK
;

1178 
	}
}

1181 
ngx_öt_t


1182 
	$ngx_πmp_ªœy_⁄_îr‹
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1183 
ngx_chaö_t
 *
ö
)

1185 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

1187 
å™s
;

1188 
u_ch¨
 
Àvñ
[32];

1189 
u_ch¨
 
code
[128];

1190 
u_ch¨
 
desc
[1024];

1191 } 
v
;

1193 
ngx_πmp_amf_ñt_t
 
ö_öf
[] = {

1195 { 
NGX_RTMP_AMF_STRING
,

1196 
	`ngx_°rög
("level"),

1197 &
v
.
Àvñ
, (v.level) },

1199 { 
NGX_RTMP_AMF_STRING
,

1200 
	`ngx_°rög
("code"),

1201 &
v
.
code
, (v.code) },

1203 { 
NGX_RTMP_AMF_STRING
,

1204 
	`ngx_°rög
("description"),

1205 &
v
.
desc
, (v.desc) },

1208 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

1210 { 
NGX_RTMP_AMF_NUMBER
,

1211 
ngx_nuŒ_°rög
,

1212 &
v
.
å™s
, 0 },

1214 { 
NGX_RTMP_AMF_NULL
,

1215 
ngx_nuŒ_°rög
,

1216 
NULL
, 0 },

1218 { 
NGX_RTMP_AMF_OBJECT
,

1219 
ngx_nuŒ_°rög
,

1220 
ö_öf
, (in_inf) },

1224 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1225 i‡(
˘x
 =
NULL
 || !
s
->
ªœy
) {

1226  
NGX_OK
;

1229 
	`ngx_memzîo
(&
v
, (v));

1230 i‡(
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

1231 (
ö_ñts
) / (in_elts[0])))

1233  
NGX_ERROR
;

1236 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1238 
v
.
Àvñ
, v.
code
, v.
desc
);

1240  
NGX_OK
;

1241 
	}
}

1244 
ngx_öt_t


1245 
	$ngx_πmp_ªœy_⁄_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1246 
ngx_chaö_t
 *
ö
)

1248 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

1250 
å™s
;

1251 
u_ch¨
 
Àvñ
[32];

1252 
u_ch¨
 
code
[128];

1253 
u_ch¨
 
desc
[1024];

1254 } 
v
;

1256 
ngx_πmp_amf_ñt_t
 
ö_öf
[] = {

1258 { 
NGX_RTMP_AMF_STRING
,

1259 
	`ngx_°rög
("level"),

1260 &
v
.
Àvñ
, (v.level) },

1262 { 
NGX_RTMP_AMF_STRING
,

1263 
	`ngx_°rög
("code"),

1264 &
v
.
code
, (v.code) },

1266 { 
NGX_RTMP_AMF_STRING
,

1267 
	`ngx_°rög
("description"),

1268 &
v
.
desc
, (v.desc) },

1271 
ngx_πmp_amf_ñt_t
 
ö_ñts
[] = {

1273 { 
NGX_RTMP_AMF_NUMBER
,

1274 
ngx_nuŒ_°rög
,

1275 &
v
.
å™s
, 0 },

1277 { 
NGX_RTMP_AMF_NULL
,

1278 
ngx_nuŒ_°rög
,

1279 
NULL
, 0 },

1281 { 
NGX_RTMP_AMF_OBJECT
,

1282 
ngx_nuŒ_°rög
,

1283 
ö_öf
, (in_inf) },

1286 
ngx_πmp_amf_ñt_t
 
ö_ñts_mëa
[] = {

1288 { 
NGX_RTMP_AMF_OBJECT
,

1289 
ngx_nuŒ_°rög
,

1290 
ö_öf
, (in_inf) },

1294 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1295 i‡(
˘x
 =
NULL
 || !
s
->
ªœy
) {

1296  
NGX_OK
;

1299 
	`ngx_memzîo
(&
v
, (v));

1300 i‡(
h
->
ty≥
 =
NGX_RTMP_MSG_AMF_META
) {

1301 
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts_mëa
,

1302 (
ö_ñts_mëa
) / (in_elts_meta[0]));

1304 
	`ngx_πmp_ª˚ive_amf
(
s
, 
ö
, 
ö_ñts
,

1305 (
ö_ñts
) / (in_elts[0]));

1308 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1310 
v
.
Àvñ
, v.
code
, v.
desc
);

1312  
NGX_OK
;

1313 
	}
}

1316 
ngx_öt_t


1317 
	$ngx_πmp_ªœy_h™dshake_d⁄e
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

1318 
ngx_chaö_t
 *
ö
)

1320 
ngx_πmp_ªœy_˘x_t
 *
˘x
;

1322 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1323 i‡(
˘x
 =
NULL
 || !
s
->
ªœy
) {

1324  
NGX_OK
;

1327  
	`ngx_πmp_ªœy_£nd_c⁄√˘
(
s
);

1328 
	}
}

1332 
	$ngx_πmp_ªœy_˛o£
(
ngx_πmp_£ssi⁄_t
 *
s
)

1334 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

1335 
ngx_πmp_ªœy_˘x_t
 *
˘x
, **
c˘x
;

1336 
ngx_uöt_t
 
hash
;

1338 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1340 
˘x
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1341 i‡(
˘x
 =
NULL
) {

1345 i‡(
s
->
°©ic_ªœy
) {

1346 
	`ngx_add_timî
(
˘x
->
°©ic_evt
, 
øcf
->
puŒ_ªc⁄√˘
);

1349 i‡(
˘x
->
publish
 =
NULL
) {

1354 i‡(
˘x
->
publish
 != ctx) {

1355 
c˘x
 = &
˘x
->
publish
->
∂ay
; *c˘x; c˘x = &(*c˘x)->
√xt
) {

1356 i‡(*
c˘x
 =
˘x
) {

1357 *
c˘x
 = 
˘x
->
√xt
;

1362 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
˘x
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

1364 &
˘x
->
≠p
, &˘x->
«me
);

1367 i‡(
s
->
ªœy
 && 
˘x
->
èg
 =&
ngx_πmp_ªœy_moduÀ
 &&

1368 !
˘x
->
publish
->
push_evt
.
timî_£t
)

1370 
	`ngx_add_timî
(&
˘x
->
publish
->
push_evt
, 
øcf
->
push_ªc⁄√˘
);

1373 #ifde‡
NGX_DEBUG


1375 
ngx_uöt_t
 
n
 = 0;

1376 
c˘x
 = &
˘x
->
publish
->
∂ay
; *c˘x; c˘x = &(*c˘x)->
√xt
, ++
n
);

1377 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
˘x
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

1379 &
˘x
->
≠p
, &˘x->
«me
, 
n
);

1383 i‡(
˘x
->
publish
->
∂ay
 =
NULL
 && ctx->publish->
£ssi⁄
->
ªœy
) {

1384 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
,

1385 
˘x
->
publish
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

1387 &
˘x
->
≠p
, &˘x->
«me
);

1388 
	`ngx_πmp_föÆize_£ssi⁄
(
˘x
->
publish
->
£ssi⁄
);

1391 
˘x
->
publish
 = 
NULL
;

1397 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
˘x
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

1399 &
˘x
->
≠p
, &˘x->
«me
);

1401 i‡(
˘x
->
push_evt
.
timî_£t
) {

1402 
	`ngx_dñ_timî
(&
˘x
->
push_evt
);

1405 
c˘x
 = &
˘x
->
∂ay
; *c˘x; c˘x = &(*c˘x)->
√xt
) {

1406 (*
c˘x
)->
publish
 = 
NULL
;

1407 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, (*
c˘x
)->
£ssi⁄
->
c⁄√˘i⁄
->
log
,

1409 &(*
c˘x
)->
≠p
, &(*c˘x)->
«me
);

1410 
	`ngx_πmp_föÆize_£ssi⁄
((*
c˘x
)->
£ssi⁄
);

1412 
˘x
->
publish
 = 
NULL
;

1414 
hash
 = 
	`ngx_hash_key
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

1415 
c˘x
 = &
øcf
->
˘x
[
hash
 %Ñacf->
nbuckës
];

1416 ; *
c˘x
 && *c˘x !
˘x
; c˘x = &(*c˘x)->
√xt
);

1417 i‡(*
c˘x
) {

1418 *
c˘x
 = 
˘x
->
√xt
;

1420 
	}
}

1423 
ngx_öt_t


1424 
	$ngx_πmp_ªœy_˛o£_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_˛o£_°ªam_t
 *
v
)

1426 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

1428 
øcf
 = 
	`ngx_πmp_gë_moduÀ_≠p_c⁄f
(
s
, 
ngx_πmp_ªœy_moduÀ
);

1429 i‡(
øcf
 && !øcf->
£ssi⁄_ªœy
) {

1430 
	`ngx_πmp_ªœy_˛o£
(
s
);

1433  
	`√xt_˛o£_°ªam
(
s
, 
v
);

1434 
	}
}

1437 
ngx_öt_t


1438 
	$ngx_πmp_ªœy_dñëe_°ªam
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_dñëe_°ªam_t
 *
v
)

1440 
	`ngx_πmp_ªœy_˛o£
(
s
);

1442  
	`√xt_dñëe_°ªam
(
s
, 
v
);

1443 
	}
}

1445 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
puŒ_øcf
;

1448 
	$ngx_πmp_ªœy_push_puŒ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1450 
ngx_°r_t
 *
vÆue
, 
v
, 
n
;

1451 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

1452 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
, **
t
;

1453 
ngx_uæ_t
 *
u
;

1454 
ngx_uöt_t
 
i
;

1455 
ngx_öt_t
 
is_puŒ
, 
is_°©ic
;

1456 
ngx_evít_t
 **
ì
, *
e
;

1457 
ngx_πmp_ªœy_°©ic_t
 *
rs
;

1458 
u_ch¨
 *
p
;

1460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1462 
øcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_≠p_c⁄f
(
cf
, 
ngx_πmp_ªœy_moduÀ
);

1463 
puŒ_øcf
 = 
øcf
;

1465 
is_puŒ
 = (
vÆue
[0].
d©a
[3] == 'l');

1466 
is_°©ic
 = 0;

1468 
èrgë
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*target));

1469 i‡(
èrgë
 =
NULL
) {

1470  
NGX_CONF_ERROR
;

1473 
èrgë
->
èg
 = &
ngx_πmp_ªœy_moduÀ
;

1474 
èrgë
->
d©a
 =Åarget;

1476 
u
 = &
èrgë
->
uæ
;

1477 
u
->
deÁu…_p‹t
 = 1935;

1478 
u
->
uri_∑π
 = 1;

1479 
u
->
uæ
 = 
vÆue
[1];

1481 i‡(
	`ngx_°∫ˇ£cmp
(
u
->
uæ
.
d©a
, (
u_ch¨
 *) "rtmp://", 7) == 0) {

1482 
u
->
uæ
.
d©a
 += 7;

1483 
u
->
uæ
.
Àn
 -= 7;

1486 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

1487 i‡(
u
->
îr
) {

1488 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1489 "%†ö uæ \"%V\"", 
u
->
îr
, &u->
uæ
);

1491  
NGX_CONF_ERROR
;

1494 
vÆue
 += 2;

1495 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; ++i, ++
vÆue
) {

1496 
p
 = 
	`ngx_°æchr
(
vÆue
->
d©a
, vÆue->d©®+ vÆue->
Àn
, '=');

1498 i‡(
p
 =
NULL
) {

1499 
n
 = *
vÆue
;

1500 
	`ngx_°r_£t
(&
v
, "1");

1503 
n
.
d©a
 = 
vÆue
->data;

1504 
n
.
Àn
 = 
p
 - 
vÆue
->
d©a
;

1506 
v
.
d©a
 = 
p
 + 1;

1507 
v
.
Àn
 = 
vÆue
->
d©a
 + vÆue->À¿- 
p
 - 1;

1510 
	#NGX_RTMP_RELAY_STR_PAR
(
«me
, 
v¨
) \

1511 i‡(
n
.
Àn
 =(
«me
) - 1 \

1512 && 
	`ngx_°∫ˇ£cmp
(
n
.
d©a
, (
u_ch¨
 *Ë
«me
,Ç.
Àn
) == 0) \

1514 
èrgë
->
v¨
 = 
v
; \

1516 }

	)

1518 
	#NGX_RTMP_RELAY_NUM_PAR
(
«me
, 
v¨
) \

1519 i‡(
n
.
Àn
 =(
«me
) - 1 \

1520 && 
	`ngx_°∫ˇ£cmp
(
n
.
d©a
, (
u_ch¨
 *Ë
«me
,Ç.
Àn
) == 0) \

1522 
èrgë
->
v¨
 = 
	`ngx_©oi
(
v
.
d©a
, v.
Àn
); \

1524 }

	)

1526 
	`NGX_RTMP_RELAY_STR_PAR
("≠p", 
≠p
);

1527 
	`NGX_RTMP_RELAY_STR_PAR
("«me", 
«me
);

1528 
	`NGX_RTMP_RELAY_STR_PAR
("tcUæ", 
tc_uæ
);

1529 
	`NGX_RTMP_RELAY_STR_PAR
("∑geUæ", 
∑ge_uæ
);

1530 
	`NGX_RTMP_RELAY_STR_PAR
("swfUæ", 
swf_uæ
);

1531 
	`NGX_RTMP_RELAY_STR_PAR
("ÊashVî", 
Êash_vî
);

1532 
	`NGX_RTMP_RELAY_STR_PAR
("∂ayP©h", 
∂ay_∑th
);

1533 
	`NGX_RTMP_RELAY_NUM_PAR
("live", 
live
);

1534 
	`NGX_RTMP_RELAY_NUM_PAR
("°¨t", 
°¨t
);

1535 
	`NGX_RTMP_RELAY_NUM_PAR
("°›", 
°›
);

1537 #unde‡
NGX_RTMP_RELAY_STR_PAR


1538 #unde‡
NGX_RTMP_RELAY_NUM_PAR


1540 i‡(
n
.
Àn
 == ("static") - 1 &&

1541 
	`ngx_°∫ˇ£cmp
(
n
.
d©a
, (
u_ch¨
 *Ë"°©ic",Ç.
Àn
) == 0 &&

1542 
	`ngx_©oi
(
v
.
d©a
, v.
Àn
))

1544 
is_°©ic
 = 1;

1551 i‡(
is_°©ic
) {

1553 i‡(!
is_puŒ
) {

1554 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1556  
NGX_CONF_ERROR
;

1559 i‡(
èrgë
->
«me
.
Àn
 == 0) {

1560 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1563  
NGX_CONF_ERROR
;

1566 
ì
 = 
	`ngx_¨øy_push
(&
øcf
->
°©ic_evíts
);

1567 i‡(
ì
 =
NULL
) {

1568  
NGX_CONF_ERROR
;

1571 
e
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

1572 i‡(
e
 =
NULL
) {

1573  
NGX_CONF_ERROR
;

1576 *
ì
 = 
e
;

1578 
rs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_ªœy_°©ic_t
));

1579 i‡(
rs
 =
NULL
) {

1580  
NGX_CONF_ERROR
;

1583 
rs
->
èrgë
 =Åarget;

1585 
e
->
d©a
 = 
rs
;

1586 
e
->
log
 = &
cf
->
cy˛e
->
√w_log
;

1587 
e
->
h™dÀr
 = 
ngx_πmp_ªœy_°©ic_puŒ_ªc⁄√˘
;

1589 
t
 = 
	`ngx_¨øy_push
(&
øcf
->
°©ic_puŒs
);

1591 } i‡(
is_puŒ
) {

1592 
t
 = 
	`ngx_¨øy_push
(&
øcf
->
puŒs
);

1595 
t
 = 
	`ngx_¨øy_push
(&
øcf
->
pushes
);

1598 i‡(
t
 =
NULL
) {

1599  
NGX_CONF_ERROR
;

1602 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1603 i‡(
vÆue
[0].
d©a
[3] == 'l') {

1604 
	`ngx_°r_£t
(&
èrgë
->
push_mëhod
, "pull");

1606 } i‡(
vÆue
[0].
d©a
[3] == 'h') {

1607 
	`ngx_°r_£t
(&
èrgë
->
push_mëhod
, "push");

1610 
	`ngx_°r_£t
(&
èrgë
->
push_mëhod
, "cc_monitor_push");

1613 *
t
 = 
èrgë
;

1615 i‡(
puŒ_rs
 =
NULL
) {

1616 
puŒ_rs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_ªœy_°©ic_t
));

1617 i‡(
puŒ_rs
 =
NULL
) {

1618  
NGX_CONF_ERROR
;

1620 
puŒ_rs
 = 
rs
;

1621 
puŒ_rs
->
èrgë
 =Åarget;

1624  
NGX_CONF_OK
;

1625 
	}
}

1628 
ngx_öt_t


1629 
	$ngx_πmp_ªœy_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
)

1631 #i‡!(
NGX_WIN32
)

1632 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
ngx_πmp_c‹e_maö_c⁄f
;

1633 
ngx_πmp_c‹e_§v_c⁄f_t
 **
pcscf
, *
cscf
;

1634 
ngx_πmp_c‹e_≠p_c⁄f_t
 **
pˇcf
, *
ˇcf
;

1635 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
øcf
;

1636 
ngx_uöt_t
 
n
, 
m
, 
k
;

1637 
ngx_πmp_ªœy_°©ic_t
 *
rs
;

1638 
ngx_πmp_li°í_t
 *
l°
;

1639 
ngx_evít_t
 **
≥vít
, *
evít
;

1641 i‡(
cmcf
 =
NULL
 || cmcf->
li°í
.
√…s
 == 0) {

1642  
NGX_OK
;

1647 i‡(
ngx_¥o˚ss_¶Ÿ
) {

1648  
NGX_OK
;

1651 
l°
 = 
cmcf
->
li°í
.
ñts
;

1653 
pcscf
 = 
cmcf
->
£rvîs
.
ñts
;

1654 
n
 = 0;Ç < 
cmcf
->
£rvîs
.
√…s
; ++n, ++
pcscf
) {

1656 
cscf
 = *
pcscf
;

1657 
pˇcf
 = 
cscf
->
≠∂iˇti⁄s
.
ñts
;

1659 
m
 = 0; m < 
cscf
->
≠∂iˇti⁄s
.
√…s
; ++m, ++
pˇcf
) {

1661 
ˇcf
 = *
pˇcf
;

1662 
øcf
 = 
ˇcf
->
≠p_c⁄f
[
ngx_πmp_ªœy_moduÀ
.
˘x_ödex
];

1663 
≥vít
 = 
øcf
->
°©ic_evíts
.
ñts
;

1665 
k
 = 0; k < 
øcf
->
°©ic_evíts
.
√…s
; ++k, ++
≥vít
) {

1666 
evít
 = *
≥vít
;

1668 
rs
 = 
evít
->
d©a
;

1669 
rs
->
c˘x
 = *
l°
->
˘x
;

1670 
rs
->
c˘x
.
≠p_c⁄f
 = 
ˇcf
->app_conf;

1672 
	`ngx_po°_evít
(
evít
, &
ngx_πmp_öô_queue
);

1677  
NGX_OK
;

1678 
	}
}

1681 
ngx_öt_t


1682 
	$ngx_πmp_ªœy_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1684 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

1685 
ngx_πmp_h™dÀr_±
 *
h
;

1686 
ngx_πmp_amf_h™dÀr_t
 *
ch
;

1688 
cmcf
 = 
	`ngx_πmp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_πmp_c‹e_moduÀ
);

1691 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
evíts
[
NGX_RTMP_HANDSHAKE_DONE
]);

1692 *
h
 = 
ngx_πmp_ªœy_h™dshake_d⁄e
;

1695 
√xt_publish
 = 
ngx_πmp_publish
;

1696 
ngx_πmp_publish
 = 
ngx_πmp_ªœy_publish
;

1698 
√xt_∂ay
 = 
ngx_πmp_∂ay
;

1699 
ngx_πmp_∂ay
 = 
ngx_πmp_ªœy_∂ay
;

1701 
√xt_dñëe_°ªam
 = 
ngx_πmp_dñëe_°ªam
;

1702 
ngx_πmp_dñëe_°ªam
 = 
ngx_πmp_ªœy_dñëe_°ªam
;

1704 
√xt_˛o£_°ªam
 = 
ngx_πmp_˛o£_°ªam
;

1705 
ngx_πmp_˛o£_°ªam
 = 
ngx_πmp_ªœy_˛o£_°ªam
;

1708 
ch
 = 
	`ngx_¨øy_push
(&
cmcf
->
amf
);

1709 
	`ngx_°r_£t
(&
ch
->
«me
, "_result");

1710 
ch
->
h™dÀr
 = 
ngx_πmp_ªœy_⁄_ªsu…
;

1712 
ch
 = 
	`ngx_¨øy_push
(&
cmcf
->
amf
);

1713 
	`ngx_°r_£t
(&
ch
->
«me
, "_error");

1714 
ch
->
h™dÀr
 = 
ngx_πmp_ªœy_⁄_îr‹
;

1716 
ch
 = 
	`ngx_¨øy_push
(&
cmcf
->
amf
);

1717 
	`ngx_°r_£t
(&
ch
->
«me
, "onStatus");

1718 
ch
->
h™dÀr
 = 
ngx_πmp_ªœy_⁄_°©us
;

1720  
NGX_OK
;

1721 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_relay_module.h

7 #i‚de‡
_NGX_RTMP_RELAY_H_INCLUDED_


8 
	#_NGX_RTMP_RELAY_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~"ngx_πmp.h
"

17 
ngx_uæ_t
 
	muæ
;

18 
ngx_°r_t
 
	m≠p
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_°r_t
 
	mtc_uæ
;

21 
ngx_°r_t
 
	m∑ge_uæ
;

22 
ngx_°r_t
 
	mswf_uæ
;

23 
ngx_°r_t
 
	mÊash_vî
;

24 
ngx_°r_t
 
	m∂ay_∑th
;

25 
ngx_öt_t
 
	mlive
;

26 
ngx_öt_t
 
	m°¨t
;

27 
ngx_öt_t
 
	m°›
;

28 
ngx_°r_t
 
	mpush_mëhod
;

30 *
	mèg
;

31 *
	md©a
;

32 
ngx_uöt_t
 
	mcou¡î
;

33 } 
	tngx_πmp_ªœy_èrgë_t
;

36 
ngx_πmp_ªœy_˘x_s
 
	tngx_πmp_ªœy_˘x_t
;

39 
ngx_¨øy_t
 
	mpuŒs
;

40 
ngx_¨øy_t
 
	mpushes
;

41 
ngx_¨øy_t
 
	m°©ic_puŒs
;

42 
ngx_¨øy_t
 
	m°©ic_evíts
;

43 
ngx_log_t
 *
	mlog
;

44 
ngx_uöt_t
 
	mnbuckës
;

45 
ngx_m£c_t
 
	mbuÊí
;

46 
ngx_Êag_t
 
	m£ssi⁄_ªœy
;

47 
ngx_m£c_t
 
	mpush_ªc⁄√˘
;

48 
ngx_m£c_t
 
	mpuŒ_ªc⁄√˘
;

49 
ngx_πmp_ªœy_˘x_t
 **
	m˘x
;

50 } 
	tngx_πmp_ªœy_≠p_c⁄f_t
;

53 
ngx_πmp_ªœy_≠p_c⁄f_t
 
	tngx_πmp_ªœy_≠p_t
;

55 
	sngx_πmp_ªœy_˘x_s
 {

56 
ngx_°r_t
 
	m«me
;

57 
ngx_°r_t
 
	muæ
;

58 
ngx_log_t
 
	mlog
;

59 
ngx_πmp_£ssi⁄_t
 *
	m£ssi⁄
;

60 
ngx_πmp_ªœy_˘x_t
 *
	mpublish
;

61 
ngx_πmp_ªœy_˘x_t
 *
	m∂ay
;

62 
ngx_πmp_ªœy_˘x_t
 *
	m√xt
;

64 
ngx_°r_t
 
	m≠p
;

65 
ngx_°r_t
 
	mtc_uæ
;

66 
ngx_°r_t
 
	m∑ge_uæ
;

67 
ngx_°r_t
 
	mswf_uæ
;

68 
ngx_°r_t
 
	mÊash_vî
;

69 
ngx_°r_t
 
	m∂ay_∑th
;

70 
ngx_öt_t
 
	mlive
;

71 
ngx_öt_t
 
	m°¨t
;

72 
ngx_öt_t
 
	m°›
;

74 
ngx_evít_t
 
	mpush_evt
;

75 
ngx_evít_t
 *
	m°©ic_evt
;

76 *
	mèg
;

77 *
	md©a
;

81 
ngx_moduÀ_t
 
ngx_πmp_ªœy_moduÀ
;

84 
ngx_öt_t
 
ngx_πmp_ªœy_puŒ
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
«me
,

85 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
);

86 
ngx_öt_t
 
ngx_πmp_ªœy_push
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
«me
,

87 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
);

89 
ngx_πmp_ªœy_˘x_t
 * 
ngx_πmp_ªœy_¸óã_c⁄√˘i⁄
(

90 
ngx_πmp_c⁄f_˘x_t
 *
c˘x
, 
ngx_°r_t
* 
«me
,

91 
ngx_πmp_ªœy_èrgë_t
 *
èrgë
);

94 
ngx_πmp_c⁄f_˘x_t
 
	mc˘x
;

95 
ngx_πmp_ªœy_èrgë_t
 *
	mèrgë
;

96 } 
	tngx_πmp_ªœy_°©ic_t
;

98 
ngx_πmp_ªœy_°©ic_t
 
	tngx_πmp_puŒ_ªc‹d_t
;

100 
ngx_πmp_ªœy_≠p_c⁄f_t
 *
puŒ_øcf
;

101 
ngx_πmp_puŒ_ªc‹d_t
 *
puŒ_rs
;

102 
ngx_öt_t
 
ngx_πmp_ªœy_∂ay_loˇl
(
ngx_πmp_£ssi⁄_t
 *
s
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_send.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

10 
	~"ngx_πmp_amf.h
"

11 
	~"ngx_πmp_°ªams.h
"

14 
	#NGX_RTMP_USER_START
(
s
, 
ç
) \

15 
ngx_πmp_hódî_t
 
__h
; \

16 
ngx_chaö_t
 *
__l
; \

17 
ngx_buf_t
 *
__b
; \

18 
ngx_πmp_c‹e_§v_c⁄f_t
 *
__cscf
; \

20 
__cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
( \

21 
s
, 
ngx_πmp_c‹e_moduÀ
); \

22 
	`mem£t
(&
__h
, 0, (__h)); \

23 
__h
.
ty≥
 = 
ç
; \

24 
__h
.
csid
 = 2; \

25 
__l
 = 
	`ngx_πmp_Æloc_sh¨ed_buf
(
__cscf
); \

26 i‡(
__l
 =
NULL
) { \

27  
NULL
; \

29 
__b
 = 
__l
->
buf
;

	)

31 
	#NGX_RTMP_UCTL_START
(
s
, 
ty≥
, 
uty≥
) \

32 
	`NGX_RTMP_USER_START
(
s
, 
ty≥
); \

33 *(
__b
->
œ°
++Ë(
u_ch¨
)((
uty≥
) >> 8); \

34 *(
__b
->
œ°
++Ë(
u_ch¨
)(
uty≥
);

	)

36 
	#NGX_RTMP_USER_OUT1
(
v
) \

37 *(
__b
->
œ°
++Ë((
u_ch¨
*)&
v
)[0];

	)

39 
	#NGX_RTMP_USER_OUT4
(
v
) \

40 *(
__b
->
œ°
++Ë((
u_ch¨
*)&
v
)[3]; \

41 *(
__b
->
œ°
++Ë((
u_ch¨
*)&
v
)[2]; \

42 *(
__b
->
œ°
++Ë((
u_ch¨
*)&
v
)[1]; \

43 *(
__b
->
œ°
++Ë((
u_ch¨
*)&
v
)[0];

	)

45 
	#NGX_RTMP_USER_END
(
s
) \

46 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, &
__h
, 
NULL
, 
__l
); \

47  
__l
;

	)

50 
ngx_öt_t


51 
	$ngx_πmp_£nd_sh¨ed_∑ckë
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
˛
)

53 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

54 
ngx_öt_t
 
rc
;

56 i‡(
˛
 =
NULL
) {

57  
NGX_ERROR
;

60 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

62 
rc
 = 
	`ngx_πmp_£nd_mesßge
(
s
, 
˛
, 0);

64 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
˛
);

66  
rc
;

67 
	}
}

72 
ngx_chaö_t
 *

73 
	$ngx_πmp_¸óã_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
chunk_size
)

75 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

76 "chunk_size=%uD", 
chunk_size
);

79 
	`NGX_RTMP_USER_START
(
s
, 
NGX_RTMP_MSG_CHUNK_SIZE
);

81 
	`NGX_RTMP_USER_OUT4
(
chunk_size
);

83 
	`NGX_RTMP_USER_END
(
s
);

85 
	}
}

88 
ngx_öt_t


89 
	$ngx_πmp_£nd_chunk_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
chunk_size
)

91  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

92 
	`ngx_πmp_¸óã_chunk_size
(
s
, 
chunk_size
));

93 
	}
}

96 
ngx_chaö_t
 *

97 
	$ngx_πmp_¸óã_ab‹t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
csid
)

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

100 "¸óã:áb‹àcsid=%uD", 
csid
);

103 
	`NGX_RTMP_USER_START
(
s
, 
NGX_RTMP_MSG_CHUNK_SIZE
);

105 
	`NGX_RTMP_USER_OUT4
(
csid
);

107 
	`NGX_RTMP_USER_END
(
s
);

109 
	}
}

112 
ngx_öt_t


113 
	$ngx_πmp_£nd_ab‹t
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
csid
)

115  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

116 
	`ngx_πmp_¸óã_ab‹t
(
s
, 
csid
));

117 
	}
}

120 
ngx_chaö_t
 *

121 
	$ngx_πmp_¸óã_ack
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
£q
)

123 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

124 "¸óã:áck seq=%uD", 
£q
);

127 
	`NGX_RTMP_USER_START
(
s
, 
NGX_RTMP_MSG_ACK
);

129 
	`NGX_RTMP_USER_OUT4
(
£q
);

131 
	`NGX_RTMP_USER_END
(
s
);

133 
	}
}

136 
ngx_öt_t


137 
	$ngx_πmp_£nd_ack
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
£q
)

139  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

140 
	`ngx_πmp_¸óã_ack
(
s
, 
£q
));

141 
	}
}

144 
ngx_chaö_t
 *

145 
	$ngx_πmp_¸óã_ack_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
ack_size
)

147 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

148 "¸óã:áck_size=%uD", 
ack_size
);

151 
	`NGX_RTMP_USER_START
(
s
, 
NGX_RTMP_MSG_ACK_SIZE
);

153 
	`NGX_RTMP_USER_OUT4
(
ack_size
);

155 
	`NGX_RTMP_USER_END
(
s
);

157 
	}
}

160 
ngx_öt_t


161 
	$ngx_πmp_£nd_ack_size
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
ack_size
)

163  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

164 
	`ngx_πmp_¸óã_ack_size
(
s
, 
ack_size
));

165 
	}
}

168 
ngx_chaö_t
 *

169 
	$ngx_πmp_¸óã_b™dwidth
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
ack_size
,

170 
uöt8_t
 
limô_ty≥
)

172 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

174 
ack_size
, ()
limô_ty≥
);

177 
	`NGX_RTMP_USER_START
(
s
, 
NGX_RTMP_MSG_BANDWIDTH
);

179 
	`NGX_RTMP_USER_OUT4
(
ack_size
);

180 
	`NGX_RTMP_USER_OUT1
(
limô_ty≥
);

182 
	`NGX_RTMP_USER_END
(
s
);

184 
	}
}

187 
ngx_öt_t


188 
	$ngx_πmp_£nd_b™dwidth
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
ack_size
,

189 
uöt8_t
 
limô_ty≥
)

191  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

192 
	`ngx_πmp_¸óã_b™dwidth
(
s
, 
ack_size
, 
limô_ty≥
));

193 
	}
}

198 
ngx_chaö_t
 *

199 
	$ngx_πmp_¸óã_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

201 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

202 "¸óã: såóm_begö msid=%uD", 
msid
);

205 
	`NGX_RTMP_UCTL_START
(
s
, 
NGX_RTMP_MSG_USER
, 
NGX_RTMP_USER_STREAM_BEGIN
);

207 
	`NGX_RTMP_USER_OUT4
(
msid
);

209 
	`NGX_RTMP_USER_END
(
s
);

211 
	}
}

214 
ngx_öt_t


215 
	$ngx_πmp_£nd_°ªam_begö
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

217  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

218 
	`ngx_πmp_¸óã_°ªam_begö
(
s
, 
msid
));

219 
	}
}

222 
ngx_chaö_t
 *

223 
	$ngx_πmp_¸óã_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

225 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

226 "¸óã: såóm_íd msid=%uD", 
msid
);

229 
	`NGX_RTMP_UCTL_START
(
s
, 
NGX_RTMP_MSG_USER
, 
NGX_RTMP_USER_STREAM_EOF
);

231 
	`NGX_RTMP_USER_OUT4
(
msid
);

233 
	`NGX_RTMP_USER_END
(
s
);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_πmp_£nd_°ªam_eof
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

241  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

242 
	`ngx_πmp_¸óã_°ªam_eof
(
s
, 
msid
));

243 
	}
}

246 
ngx_chaö_t
 *

247 
	$ngx_πmp_¸óã_°ªam_dry
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

249 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

250 "¸óã: såóm_dry msid=%uD", 
msid
);

253 
	`NGX_RTMP_UCTL_START
(
s
, 
NGX_RTMP_MSG_USER
, 
NGX_RTMP_USER_STREAM_DRY
);

255 
	`NGX_RTMP_USER_OUT4
(
msid
);

257 
	`NGX_RTMP_USER_END
(
s
);

259 
	}
}

262 
ngx_öt_t


263 
	$ngx_πmp_£nd_°ªam_dry
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

265  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

266 
	`ngx_πmp_¸óã_°ªam_dry
(
s
, 
msid
));

267 
	}
}

270 
ngx_chaö_t
 *

271 
	$ngx_πmp_¸óã_£t_buÊí
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
,

272 
uöt32_t
 
buÊí_m£c
)

274 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

276 
msid
, 
buÊí_m£c
);

279 
	`NGX_RTMP_UCTL_START
(
s
, 
NGX_RTMP_MSG_USER
, 
NGX_RTMP_USER_SET_BUFLEN
);

281 
	`NGX_RTMP_USER_OUT4
(
msid
);

282 
	`NGX_RTMP_USER_OUT4
(
buÊí_m£c
);

284 
	`NGX_RTMP_USER_END
(
s
);

286 
	}
}

289 
ngx_öt_t


290 
	$ngx_πmp_£nd_£t_buÊí
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
,

291 
uöt32_t
 
buÊí_m£c
)

293  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

294 
	`ngx_πmp_¸óã_£t_buÊí
(
s
, 
msid
, 
buÊí_m£c
));

295 
	}
}

298 
ngx_chaö_t
 *

299 
	$ngx_πmp_¸óã_ªc‹ded
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

301 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

302 "¸óã:Ñec‹ded msid=%uD", 
msid
);

305 
	`NGX_RTMP_UCTL_START
(
s
, 
NGX_RTMP_MSG_USER
, 
NGX_RTMP_USER_RECORDED
);

307 
	`NGX_RTMP_USER_OUT4
(
msid
);

309 
	`NGX_RTMP_USER_END
(
s
);

311 
	}
}

314 
ngx_öt_t


315 
	$ngx_πmp_£nd_ªc‹ded
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
msid
)

317  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

318 
	`ngx_πmp_¸óã_ªc‹ded
(
s
, 
msid
));

319 
	}
}

322 
ngx_chaö_t
 *

323 
	$ngx_πmp_¸óã_pög_ªque°
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
time°amp
)

325 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

326 "¸óã:Öög_ªque°Åime°amp=%uD", 
time°amp
);

329 
	`NGX_RTMP_UCTL_START
(
s
, 
NGX_RTMP_MSG_USER
, 
NGX_RTMP_USER_PING_REQUEST
);

331 
	`NGX_RTMP_USER_OUT4
(
time°amp
);

333 
	`NGX_RTMP_USER_END
(
s
);

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_πmp_£nd_pög_ªque°
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
time°amp
)

341  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

342 
	`ngx_πmp_¸óã_pög_ªque°
(
s
, 
time°amp
));

343 
	}
}

346 
ngx_chaö_t
 *

347 
	$ngx_πmp_¸óã_pög_ª•⁄£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
time°amp
)

349 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

350 "¸óã:Öög_ª•⁄£Åime°amp=%uD", 
time°amp
);

353 
	`NGX_RTMP_UCTL_START
(
s
, 
NGX_RTMP_MSG_USER
, 
NGX_RTMP_USER_PING_RESPONSE
);

355 
	`NGX_RTMP_USER_OUT4
(
time°amp
);

357 
	`NGX_RTMP_USER_END
(
s
);

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_πmp_£nd_pög_ª•⁄£
(
ngx_πmp_£ssi⁄_t
 *
s
, 
uöt32_t
 
time°amp
)

365  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

366 
	`ngx_πmp_¸óã_pög_ª•⁄£
(
s
, 
time°amp
));

367 
	}
}

370 
ngx_chaö_t
 *

371 
	$ngx_πmp_Æloc_amf_buf
(*
¨g
)

373  
	`ngx_πmp_Æloc_sh¨ed_buf
((
ngx_πmp_c‹e_§v_c⁄f_t
 *)
¨g
);

374 
	}
}

380 
ngx_öt_t


381 
	$ngx_πmp_≠≥nd_amf
(
ngx_πmp_£ssi⁄_t
 *
s
,

382 
ngx_chaö_t
 **
fú°
,Çgx_chaö_à**
œ°
,

383 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
)

385 
ngx_πmp_amf_˘x_t
 
a˘
;

386 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

387 
ngx_öt_t
 
rc
;

389 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

391 
	`mem£t
(&
a˘
, 0, (act));

392 
a˘
.
¨g
 = 
cscf
;

393 
a˘
.
Æloc
 = 
ngx_πmp_Æloc_amf_buf
;

394 
a˘
.
log
 = 
s
->
c⁄√˘i⁄
->log;

396 i‡(
fú°
) {

397 
a˘
.
fú°
 = *first;

400 i‡(
œ°
) {

401 
a˘
.
lök
 = *
œ°
;

404 
rc
 = 
	`ngx_πmp_amf_wrôe
(&
a˘
, 
ñts
, 
√…s
);

406 i‡(
fú°
) {

407 *
fú°
 = 
a˘
.first;

410 i‡(
œ°
) {

411 *
œ°
 = 
a˘
.
lök
;

414  
rc
;

415 
	}
}

418 
ngx_chaö_t
 *

419 
	$ngx_πmp_¸óã_amf
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

420 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
)

422 
ngx_chaö_t
 *
fú°
;

423 
ngx_öt_t
 
rc
;

424 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
;

426 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

427 "¸óã:ám‡√…s=%ui", 
√…s
);

429 
cscf
 = 
	`ngx_πmp_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_πmp_c‹e_moduÀ
);

431 
fú°
 = 
NULL
;

433 
rc
 = 
	`ngx_πmp_≠≥nd_amf
(
s
, &
fú°
, 
NULL
, 
ñts
, 
√…s
);

435 i‡(
rc
 !
NGX_OK
 && 
fú°
) {

436 
	`ngx_πmp_‰ì_sh¨ed_chaö
(
cscf
, 
fú°
);

437 
fú°
 = 
NULL
;

440 i‡(
fú°
) {

441 
	`ngx_πmp_¥ï¨e_mesßge
(
s
, 
h
, 
NULL
, 
fú°
);

444  
fú°
;

445 
	}
}

448 
ngx_öt_t


449 
	$ngx_πmp_£nd_amf
(
ngx_πmp_£ssi⁄_t
 *
s
, 
ngx_πmp_hódî_t
 *
h
,

450 
ngx_πmp_amf_ñt_t
 *
ñts
, 
size_t
 
√…s
)

452  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

453 
	`ngx_πmp_¸óã_amf
(
s
, 
h
, 
ñts
, 
√…s
));

454 
	}
}

457 
ngx_chaö_t
 *

458 
	$ngx_πmp_¸óã_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
, * 
Àvñ
,

459 *
desc
)

461 
ngx_πmp_hódî_t
 
h
;

462 
å™s
;

464 
ngx_πmp_amf_ñt_t
 
out_öf
[] = {

466 { 
NGX_RTMP_AMF_STRING
,

467 
	`ngx_°rög
("level"),

468 
NULL
, 0 },

470 { 
NGX_RTMP_AMF_STRING
,

471 
	`ngx_°rög
("code"),

472 
NULL
, 0 },

474 { 
NGX_RTMP_AMF_STRING
,

475 
	`ngx_°rög
("description"),

476 
NULL
, 0 },

479 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

481 { 
NGX_RTMP_AMF_STRING
,

482 
ngx_nuŒ_°rög
,

485 { 
NGX_RTMP_AMF_NUMBER
,

486 
ngx_nuŒ_°rög
,

487 &
å™s
, 0 },

489 { 
NGX_RTMP_AMF_NULL
,

490 
ngx_nuŒ_°rög
,

491 
NULL
, 0 },

493 { 
NGX_RTMP_AMF_OBJECT
,

494 
ngx_nuŒ_°rög
,

495 
out_öf
,

496 (
out_öf
) },

499 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

501 
code
, 
Àvñ
, 
desc
);

503 
out_öf
[0].
d©a
 = 
Àvñ
;

504 
out_öf
[1].
d©a
 = 
code
;

505 
out_öf
[2].
d©a
 = 
desc
;

507 
	`mem£t
(&
h
, 0, (h));

509 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_CMD
;

510 
h
.
csid
 = 
NGX_RTMP_CSID_AMF
;

511 
h
.
msid
 = 
NGX_RTMP_MSID
;

513  
	`ngx_πmp_¸óã_amf
(
s
, &
h
, 
out_ñts
,

514 (
out_ñts
) / (out_elts[0]));

515 
	}
}

518 
ngx_öt_t


519 
	$ngx_πmp_£nd_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
, * 
Àvñ
, *
desc
)

521  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

522 
	`ngx_πmp_¸óã_°©us
(
s
, 
code
, 
Àvñ
, 
desc
));

523 
	}
}

526 
ngx_chaö_t
 *

527 
	$ngx_πmp_¸óã_∂ay_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
, * 
Àvñ
,

528 
ngx_uöt_t
 
duøti⁄
,Çgx_uöt_à
byãs
)

530 
ngx_πmp_hódî_t
 
h
;

531 
dduøti⁄
;

532 
dbyãs
;

534 
ngx_πmp_amf_ñt_t
 
out_öf
[] = {

536 { 
NGX_RTMP_AMF_STRING
,

537 
	`ngx_°rög
("code"),

538 
NULL
, 0 },

540 { 
NGX_RTMP_AMF_STRING
,

541 
	`ngx_°rög
("level"),

542 
NULL
, 0 },

544 { 
NGX_RTMP_AMF_NUMBER
,

545 
	`ngx_°rög
("duration"),

546 &
dduøti⁄
, 0 },

548 { 
NGX_RTMP_AMF_NUMBER
,

549 
	`ngx_°rög
("bytes"),

550 &
dbyãs
, 0 },

553 
ngx_πmp_amf_ñt_t
 
out_ñts
[] = {

555 { 
NGX_RTMP_AMF_STRING
,

556 
ngx_nuŒ_°rög
,

559 { 
NGX_RTMP_AMF_OBJECT
,

560 
ngx_nuŒ_°rög
,

561 
out_öf
,

562 (
out_öf
) },

565 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_RTMP
, 
s
->
c⁄√˘i⁄
->
log
, 0,

568 
code
, 
Àvñ
, 
duøti⁄
, 
byãs
);

570 
out_öf
[0].
d©a
 = 
code
;

571 
out_öf
[1].
d©a
 = 
Àvñ
;

573 
dduøti⁄
 = 
duøti⁄
;

574 
dbyãs
 = 
byãs
;

576 
	`mem£t
(&
h
, 0, (h));

578 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_META
;

579 
h
.
csid
 = 
NGX_RTMP_CSID_AMF
;

580 
h
.
msid
 = 
NGX_RTMP_MSID
;

581 
h
.
time°amp
 = 
duøti⁄
;

583  
	`ngx_πmp_¸óã_amf
(
s
, &
h
, 
out_ñts
,

584 (
out_ñts
) / (out_elts[0]));

585 
	}
}

588 
ngx_öt_t


589 
	$ngx_πmp_£nd_∂ay_°©us
(
ngx_πmp_£ssi⁄_t
 *
s
, *
code
, * 
Àvñ
,

590 
ngx_uöt_t
 
duøti⁄
,Çgx_uöt_à
byãs
)

592  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

593 
	`ngx_πmp_¸óã_∂ay_°©us
(
s
, 
code
, 
Àvñ
, 
duøti⁄
, 
byãs
));

594 
	}
}

597 
ngx_chaö_t
 *

598 
	$ngx_πmp_¸óã_ßm∂e_ac˚ss
(
ngx_πmp_£ssi⁄_t
 *
s
)

600 
ngx_πmp_hódî_t
 
h
;

602 
ac˚ss
 = 1;

604 
ngx_πmp_amf_ñt_t
 
ac˚ss_ñts
[] = {

606 { 
NGX_RTMP_AMF_STRING
,

607 
ngx_nuŒ_°rög
,

610 { 
NGX_RTMP_AMF_BOOLEAN
,

611 
ngx_nuŒ_°rög
,

612 &
ac˚ss
, 0 },

614 { 
NGX_RTMP_AMF_BOOLEAN
,

615 
ngx_nuŒ_°rög
,

616 &
ac˚ss
, 0 },

619 
	`mem£t
(&
h
, 0, (h));

621 
h
.
ty≥
 = 
NGX_RTMP_MSG_AMF_META
;

622 
h
.
csid
 = 
NGX_RTMP_CSID_AMF
;

623 
h
.
msid
 = 
NGX_RTMP_MSID
;

625  
	`ngx_πmp_¸óã_amf
(
s
, &
h
, 
ac˚ss_ñts
,

626 (
ac˚ss_ñts
) / (access_elts[0]));

627 
	}
}

630 
ngx_öt_t


631 
	$ngx_πmp_£nd_ßm∂e_ac˚ss
(
ngx_πmp_£ssi⁄_t
 *
s
)

633  
	`ngx_πmp_£nd_sh¨ed_∑ckë
(
s
,

634 
	`ngx_πmp_¸óã_ßm∂e_ac˚ss
(
s
));

635 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_shared.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~"ngx_πmp.h
"

12 
ngx_chaö_t
 *

13 
	$ngx_πmp_Æloc_sh¨ed_buf
(
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
)

15 
u_ch¨
 *
p
;

16 
ngx_chaö_t
 *
out
;

17 
ngx_buf_t
 *
b
;

18 
size_t
 
size
;

20 i‡(
cscf
->
‰ì
) {

21 
out
 = 
cscf
->
‰ì
;

22 
cscf
->
‰ì
 = 
out
->
√xt
;

26 
size
 = 
cscf
->
chunk_size
 + 
NGX_RTMP_MAX_CHUNK_HEADER
;

28 
p
 = 
	`ngx_pˇŒoc
(
cscf
->
poﬁ
, 
NGX_RTMP_REFCOUNT_BYTES


29 + (
ngx_chaö_t
)

30 + (
ngx_buf_t
)

31 + 
size
);

32 i‡(
p
 =
NULL
) {

33  
NULL
;

36 
p
 +
NGX_RTMP_REFCOUNT_BYTES
;

37 
out
 = (
ngx_chaö_t
 *)
p
;

39 
p
 +(
ngx_chaö_t
);

40 
out
->
buf
 = (
ngx_buf_t
 *)
p
;

42 
p
 +(
ngx_buf_t
);

43 
out
->
buf
->
°¨t
 = 
p
;

44 
out
->
buf
->
íd
 = 
p
 + 
size
;

47 
out
->
√xt
 = 
NULL
;

48 
b
 = 
out
->
buf
;

49 
b
->
pos
 = b->
œ°
 = b->
°¨t
 + 
NGX_RTMP_MAX_CHUNK_HEADER
;

50 
b
->
mem‹y
 = 1;

53 
	`ngx_πmp_ªf_£t
(
out
, 1);

55  
out
;

56 
	}
}

60 
	$ngx_πmp_‰ì_sh¨ed_chaö
(
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_chaö_t
 *
ö
)

62 
ngx_chaö_t
 *
˛
;

64 i‡(
	`ngx_πmp_ªf_put
(
ö
)) {

68 
˛
 = 
ö
; ; c»˛->
√xt
) {

69 i‡(
˛
->
√xt
 =
NULL
) {

70 
˛
->
√xt
 = 
cscf
->
‰ì
;

71 
cscf
->
‰ì
 = 
ö
;

75 
	}
}

78 
ngx_chaö_t
 *

79 
	$ngx_πmp_≠≥nd_sh¨ed_bufs
(
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
,

80 
ngx_chaö_t
 *
hód
,Çgx_chaö_à*
ö
)

82 
ngx_chaö_t
 *
l
, **
Œ
;

83 
u_ch¨
 *
p
;

84 
size_t
 
size
;

86 
Œ
 = &
hód
;

87 
p
 = 
ö
->
buf
->
pos
;

88 
l
 = 
hód
;

90 i‡(
l
) {

91 ; 
l
->
√xt
;Ü =Ü->next);

92 
Œ
 = &
l
->
√xt
;

97 i‡(
l
 =
NULL
 ||Ü->
buf
->
œ°
 =l->buf->
íd
) {

98 
l
 = 
	`ngx_πmp_Æloc_sh¨ed_buf
(
cscf
);

99 i‡(
l
 =
NULL
 ||Ü->
buf
 == NULL) {

103 *
Œ
 = 
l
;

104 
Œ
 = &
l
->
√xt
;

107 
l
->
buf
->
íd
 -Ü->buf->
œ°
 >
ö
->buf->œ° - 
p
) {

108 
l
->
buf
->
œ°
 = 
	`ngx_˝ymem
÷->buf->œ°, 
p
,

109 
ö
->
buf
->
œ°
 - 
p
);

110 
ö
 = in->
√xt
;

111 i‡(
ö
 =
NULL
) {

112 
d⁄e
;

114 
p
 = 
ö
->
buf
->
pos
;

117 
size
 = 
l
->
buf
->
íd
 -Ü->buf->
œ°
;

118 
l
->
buf
->
œ°
 = 
	`ngx_˝ymem
÷->buf->œ°, 
p
, 
size
);

119 
p
 +
size
;

122 
d⁄e
:

123 *
Œ
 = 
NULL
;

125  
hód
;

126 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_stat_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

10 
	~<ngöx.h
>

11 
	~"ngx_πmp.h
"

12 
	~"ngx_πmp_vîsi⁄.h
"

13 
	~"ngx_πmp_live_moduÀ.h
"

14 
	~"ngx_πmp_∂ay_moduÀ.h
"

15 
	~"ngx_πmp_codec_moduÀ.h
"

18 
ngx_öt_t
 
ngx_πmp_°©_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
);

19 *
ngx_πmp_°©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

20 
ngx_öt_t
 
ngx_πmp_°©_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

21 * 
ngx_πmp_°©_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

22 * 
ngx_πmp_°©_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

23 *
∑ª¡
, *
chûd
);

26 
time_t
 
	g°¨t_time
;

29 
	#NGX_RTMP_STAT_ALL
 0xff

	)

30 
	#NGX_RTMP_STAT_GLOBAL
 0x01

	)

31 
	#NGX_RTMP_STAT_LIVE
 0x02

	)

32 
	#NGX_RTMP_STAT_CLIENTS
 0x04

	)

33 
	#NGX_RTMP_STAT_PLAY
 0x08

	)

41 
ngx_uöt_t
 
	m°©
;

42 
ngx_°r_t
 
	m°yÀshìt
;

43 } 
	tngx_πmp_°©_loc_c⁄f_t
;

46 
ngx_c⁄f_bômask_t
 
	gngx_πmp_°©_masks
[] = {

47 { 
ngx_°rög
("Æl"), 
NGX_RTMP_STAT_ALL
 },

48 { 
ngx_°rög
("globÆ"), 
NGX_RTMP_STAT_GLOBAL
 },

49 { 
ngx_°rög
("live"), 
NGX_RTMP_STAT_LIVE
 },

50 { 
ngx_°rög
("˛õ¡s"), 
NGX_RTMP_STAT_CLIENTS
 },

51 { 
ngx_nuŒ_°rög
, 0 }

55 
ngx_comm™d_t
 
	gngx_πmp_°©_comm™ds
[] = {

57 { 
ngx_°rög
("rtmp_stat"),

58 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

59 
ngx_πmp_°©
,

60 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
off£tof
(
ngx_πmp_°©_loc_c⁄f_t
, 
°©
),

62 
ngx_πmp_°©_masks
 },

64 { 
ngx_°rög
("rtmp_stat_stylesheet"),

65 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_°r_¶Ÿ
,

67 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
off£tof
(
ngx_πmp_°©_loc_c⁄f_t
, 
°yÀshìt
),

69 
NULL
 },

71 
ngx_nuŒ_comm™d


75 
ngx_hâp_moduÀ_t
 
	gngx_πmp_°©_moduÀ_˘x
 = {

76 
NULL
,

77 
ngx_πmp_°©_po°c⁄figuøti⁄
,

79 
NULL
,

80 
NULL
,

82 
NULL
,

83 
NULL
,

85 
ngx_πmp_°©_¸óã_loc_c⁄f
,

86 
ngx_πmp_°©_mîge_loc_c⁄f
,

90 
ngx_moduÀ_t
 
	gngx_πmp_°©_moduÀ
 = {

91 
NGX_MODULE_V1
,

92 &
ngx_πmp_°©_moduÀ_˘x
,

93 
ngx_πmp_°©_comm™ds
,

94 
NGX_HTTP_MODULE
,

95 
NULL
,

96 
NULL
,

97 
ngx_πmp_°©_öô_¥o˚ss
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NGX_MODULE_V1_PADDING


106 
	#NGX_RTMP_STAT_BUFSIZE
 256

	)

109 
ngx_öt_t


110 
	$ngx_πmp_°©_öô_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
)

118 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_πmp_öô_queue
);

120  
NGX_OK
;

121 
	}
}

128 
	$ngx_πmp_°©_esˇ≥
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
size_t
 
Àn
)

130 
u_ch¨
 *
p
, *
≈
;

131 *
√w_d©a
;

132 
size_t
 
n
;

134 
p
 = 
d©a
;

136 
n
 = 0;Ç < 
Àn
; ++n, ++
p
) {

137 i‡(*
p
 < 0x20 || *p >= 0x7f) {

142 i‡(
n
 =
Àn
) {

143  
d©a
;

146 
√w_d©a
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
Àn
);

147 i‡(
√w_d©a
 =
NULL
) {

148  
NULL
;

151 
p
 = 
d©a
;

152 
≈
 = 
√w_d©a
;

154 
n
 = 0;Ç < 
Àn
; ++n, ++
p
, ++
≈
) {

155 *
≈
 = (*
p
 < 0x20 || *∞>0x7fË? (
u_ch¨
) ' ' : *p;

158  
√w_d©a
;

159 
	}
}

161 #i‡(
NGX_WIN32
)

166 
	$__de˛•ec
(
noölöe
)

170 
	$ngx_πmp_°©_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

171 *
d©a
, 
size_t
 
Àn
, 
ngx_uöt_t
 
esˇ≥
)

173 
ngx_chaö_t
 *
˛
;

174 
ngx_buf_t
 *
b
;

175 
size_t
 
ªÆ_Àn
;

177 i‡(
Àn
 == 0) {

181 i‡(
esˇ≥
) {

182 
d©a
 = 
	`ngx_πmp_°©_esˇ≥
(
r
, d©a, 
Àn
);

183 i‡(
d©a
 =
NULL
) {

188 
ªÆ_Àn
 = 
esˇ≥


189 ? 
Àn
 + 
	`ngx_esˇ≥_html
(
NULL
, 
d©a
,Üen)

190 : 
Àn
;

192 
˛
 = **
Œl
;

193 i‡(
˛
 && cl->
buf
->
œ°
 + 
ªÆ_Àn
 > cl->buf->
íd
) {

194 *
Œl
 = &
˛
->
√xt
;

197 i‡(**
Œl
 =
NULL
) {

198 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

199 i‡(
˛
 =
NULL
) {

202 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

203 
	`ngx_max
(
NGX_RTMP_STAT_BUFSIZE
, 
ªÆ_Àn
));

204 i‡(
b
 =
NULL
 || b->
pos
 == NULL) {

207 
˛
->
√xt
 = 
NULL
;

208 
˛
->
buf
 = 
b
;

209 **
Œl
 = 
˛
;

212 
b
 = (**
Œl
)->
buf
;

214 i‡(
esˇ≥
) {

215 
b
->
œ°
 = (
u_ch¨
 *)
	`ngx_esˇ≥_html
(b->œ°, 
d©a
, 
Àn
);

217 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
d©a
, 
Àn
);

219 
	}
}

227 
	#NGX_RTMP_STAT
(
d©a
, 
Àn
Ë
	`ngx_πmp_°©_ouçut
(
r
, 
Œl
, d©a,Üí, 0)

	)

230 
	#NGX_RTMP_STAT_E
(
d©a
, 
Àn
Ë
	`ngx_πmp_°©_ouçut
(
r
, 
Œl
, d©a,Üí, 1)

	)

233 
	#NGX_RTMP_STAT_L
(
s
Ë
	`NGX_RTMP_STAT
((s), (sË- 1)

	)

236 
	#NGX_RTMP_STAT_S
(
s
Ë
	`NGX_RTMP_STAT
((s)->
d©a
, (s)->
Àn
)

	)

239 
	#NGX_RTMP_STAT_ES
(
s
Ë
	`NGX_RTMP_STAT_E
((s)->
d©a
, (s)->
Àn
)

	)

242 
	#NGX_RTMP_STAT_CS
(
s
Ë
	`NGX_RTMP_STAT
((s), 
	`ngx_°æí
(s))

	)

245 
	#NGX_RTMP_STAT_ECS
(
s
Ë
	`NGX_RTMP_STAT_E
((s), 
	`ngx_°æí
(s))

	)

248 
	#NGX_RTMP_STAT_BW
 0x01

	)

249 
	#NGX_RTMP_STAT_BYTES
 0x02

	)

250 
	#NGX_RTMP_STAT_BW_BYTES
 0x03

	)

254 
	$ngx_πmp_°©_bw
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

255 
ngx_πmp_b™dwidth_t
 *
bw
, *
«me
,

256 
ngx_uöt_t
 
Êags
)

258 
u_ch¨
 
buf
[
NGX_INT64_LEN
 + 9];

260 
	`ngx_πmp_upd©e_b™dwidth
(
bw
, 0);

262 i‡(
Êags
 & 
NGX_RTMP_STAT_BW
) {

263 
	`NGX_RTMP_STAT_L
("<bw_");

264 
	`NGX_RTMP_STAT_CS
(
«me
);

265 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf), ">%uL</bw_",

266 
bw
->
b™dwidth
 * 8)

267 - 
buf
);

268 
	`NGX_RTMP_STAT_CS
(
«me
);

269 
	`NGX_RTMP_STAT_L
(">\r\n");

272 i‡(
Êags
 & 
NGX_RTMP_STAT_BYTES
) {

273 
	`NGX_RTMP_STAT_L
("<bytes_");

274 
	`NGX_RTMP_STAT_CS
(
«me
);

275 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf), ">%uL</bytes_",

276 
bw
->
byãs
)

277 - 
buf
);

278 
	`NGX_RTMP_STAT_CS
(
«me
);

279 
	`NGX_RTMP_STAT_L
(">\r\n");

281 
	}
}

284 #ifde‡
NGX_RTMP_POOL_DEBUG


286 
	$ngx_πmp_°©_gë_poﬁ_size
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 *
∆¨ge
,

287 
ngx_uöt_t
 *
size
)

289 
ngx_poﬁ_œrge_t
 *
l
;

290 
ngx_poﬁ_t
 *
p
, *
n
;

292 *
∆¨ge
 = 0;

293 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

294 ++*
∆¨ge
;

297 *
size
 = 0;

298 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

299 *
size
 +(
p
->
d
.
œ°
 - (
u_ch¨
 *)p);

300 i‡(
n
 =
NULL
) {

304 
	}
}

308 
	$ngx_πmp_°©_dump_poﬁ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

309 
ngx_poﬁ_t
 *
poﬁ
)

311 
ngx_uöt_t
 
∆¨ge
, 
size
;

312 
u_ch¨
 
buf
[
NGX_INT_T_LEN
];

314 
size
 = 0;

315 
∆¨ge
 = 0;

316 
	`ngx_πmp_°©_gë_poﬁ_size
(
poﬁ
, &
∆¨ge
, &
size
);

317 
	`NGX_RTMP_STAT_L
("<pool><nlarge>");

318 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf), "%ui", 
∆¨ge
) - buf);

319 
	`NGX_RTMP_STAT_L
("</nlarge><size>");

320 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf), "%ui", 
size
) - buf);

321 
	`NGX_RTMP_STAT_L
("</size></pool>\r\n");

322 
	}
}

328 
	$ngx_πmp_°©_˛õ¡
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

329 
ngx_πmp_£ssi⁄_t
 *
s
)

331 
u_ch¨
 
buf
[
NGX_INT_T_LEN
];

333 #ifde‡
NGX_RTMP_POOL_DEBUG


334 
	`ngx_πmp_°©_dump_poﬁ
(
r
, 
Œl
, 
s
->
c⁄√˘i⁄
->
poﬁ
);

336 
	`NGX_RTMP_STAT_L
("<id>");

337 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf), "%ui",

338 (
ngx_uöt_t
Ë
s
->
c⁄√˘i⁄
->
numbî
Ë- 
buf
);

339 
	`NGX_RTMP_STAT_L
("</id>");

341 
	`NGX_RTMP_STAT_L
("<address>");

342 
	`NGX_RTMP_STAT_ES
(&
s
->
c⁄√˘i⁄
->
addr_ãxt
);

343 
	`NGX_RTMP_STAT_L
("</address>");

345 
	`NGX_RTMP_STAT_L
("<time>");

346 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf), "%i",

347 (
ngx_öt_t
Ë(
ngx_cuºít_m£c
 - 
s
->
ïoch
)Ë- 
buf
);

348 
	`NGX_RTMP_STAT_L
("</time>");

350 i‡(
s
->
Êashvî
.
Àn
) {

351 
	`NGX_RTMP_STAT_L
("<flashver>");

352 
	`NGX_RTMP_STAT_ES
(&
s
->
Êashvî
);

353 
	`NGX_RTMP_STAT_L
("</flashver>");

356 i‡(
s
->
∑ge_uæ
.
Àn
) {

357 
	`NGX_RTMP_STAT_L
("<pageurl>");

358 
	`NGX_RTMP_STAT_ES
(&
s
->
∑ge_uæ
);

359 
	`NGX_RTMP_STAT_L
("</pageurl>");

362 i‡(
s
->
swf_uæ
.
Àn
) {

363 
	`NGX_RTMP_STAT_L
("<swfurl>");

364 
	`NGX_RTMP_STAT_ES
(&
s
->
swf_uæ
);

365 
	`NGX_RTMP_STAT_L
("</swfurl>");

367 
	}
}

371 
	$ngx_πmp_°©_gë_Øc_¥ofûe
(
ngx_uöt_t
 
p
,Çgx_uöt_à
sbr
,Çgx_uöt_à
ps
) {

372 
p
) {

376 i‡(
ps
) {

379 i‡(
sbr
) {

392 
	}
}

396 
	$ngx_πmp_°©_gë_avc_¥ofûe
(
ngx_uöt_t
 
p
) {

397 
p
) {

407 
	}
}

411 
	$ngx_πmp_°©_live
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

412 
ngx_πmp_live_≠p_c⁄f_t
 *
œcf
)

414 
ngx_πmp_live_°ªam_t
 *
°ªam
;

415 
ngx_πmp_codec_˘x_t
 *
codec
;

416 
ngx_πmp_live_˘x_t
 *
˘x
;

417 
ngx_πmp_£ssi⁄_t
 *
s
;

418 
ngx_öt_t
 
n
;

419 
ngx_uöt_t
 
n˛õ¡s
, 
tŸÆ_n˛õ¡s
;

420 
u_ch¨
 
buf
[
NGX_INT_T_LEN
];

421 
u_ch¨
 
bbuf
[
NGX_INT32_LEN
];

422 
ngx_πmp_°©_loc_c⁄f_t
 *
¶cf
;

423 
u_ch¨
 *
˙ame
;

425 i‡(!
œcf
->
live
) {

429 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_πmp_°©_moduÀ
);

431 
	`NGX_RTMP_STAT_L
("<live>\r\n");

433 
tŸÆ_n˛õ¡s
 = 0;

434 
n
 = 0;Ç < 
œcf
->
nbuckës
; ++n) {

435 
°ªam
 = 
œcf
->
°ªams
[
n
]; såóm; såóm = såóm->
√xt
) {

436 
	`NGX_RTMP_STAT_L
("<stream>\r\n");

438 
	`NGX_RTMP_STAT_L
("<name>");

439 
	`NGX_RTMP_STAT_ECS
(
°ªam
->
«me
);

440 
	`NGX_RTMP_STAT_L
("</name>\r\n");

442 
	`NGX_RTMP_STAT_L
("<time>");

443 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf), "%i",

444 (
ngx_öt_t
Ë(
ngx_cuºít_m£c
 - 
°ªam
->
ïoch
))

445 - 
buf
);

446 
	`NGX_RTMP_STAT_L
("</time>");

448 
	`ngx_πmp_°©_bw
(
r
, 
Œl
, &
°ªam
->
bw_ö
, "in",

449 
NGX_RTMP_STAT_BW_BYTES
);

450 
	`ngx_πmp_°©_bw
(
r
, 
Œl
, &
°ªam
->
bw_out
, "out",

451 
NGX_RTMP_STAT_BW_BYTES
);

452 
	`ngx_πmp_°©_bw
(
r
, 
Œl
, &
°ªam
->
bw_ö_audio
, "audio",

453 
NGX_RTMP_STAT_BW
);

454 
	`ngx_πmp_°©_bw
(
r
, 
Œl
, &
°ªam
->
bw_ö_video
, "video",

455 
NGX_RTMP_STAT_BW
);

457 
n˛õ¡s
 = 0;

458 
codec
 = 
NULL
;

459 
˘x
 = 
°ªam
->˘x; ctx; ctx = ctx->
√xt
, ++
n˛õ¡s
) {

460 
s
 = 
˘x
->
£ssi⁄
;

461 i‡(
¶cf
->
°©
 & 
NGX_RTMP_STAT_CLIENTS
) {

462 
	`NGX_RTMP_STAT_L
("<client>");

464 
	`ngx_πmp_°©_˛õ¡
(
r
, 
Œl
, 
s
);

466 
	`NGX_RTMP_STAT_L
("<dropped>");

467 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

468 "%ui", 
˘x
->
ndr›≥d
Ë- 
buf
);

469 
	`NGX_RTMP_STAT_L
("</dropped>");

471 
	`NGX_RTMP_STAT_L
("<avsync>");

472 i‡(!
œcf
->
öãæóve
) {

473 
	`NGX_RTMP_STAT
(
bbuf
, 
	`ngx_¢¥ötf
(bbuf, (bbuf),

474 "%D", 
˘x
->
cs
[1].
time°amp
 -

475 
˘x
->
cs
[0].
time°amp
Ë- 
bbuf
);

477 
	`NGX_RTMP_STAT_L
("</avsync>");

479 
	`NGX_RTMP_STAT_L
("<timestamp>");

480 
	`NGX_RTMP_STAT
(
bbuf
, 
	`ngx_¢¥ötf
(bbuf, (bbuf),

481 "%D", 
s
->
cuºít_time
Ë- 
bbuf
);

482 
	`NGX_RTMP_STAT_L
("</timestamp>");

484 i‡(
˘x
->
publishög
) {

485 
	`NGX_RTMP_STAT_L
("<publishing/>");

488 i‡(
˘x
->
a˘ive
) {

489 
	`NGX_RTMP_STAT_L
("<active/>");

492 
	`NGX_RTMP_STAT_L
("</client>\r\n");

494 i‡(
˘x
->
publishög
) {

495 
codec
 = 
	`ngx_πmp_gë_moduÀ_˘x
(
s
, 
ngx_πmp_codec_moduÀ
);

498 
tŸÆ_n˛õ¡s
 +
n˛õ¡s
;

500 i‡(
codec
) {

501 
	`NGX_RTMP_STAT_L
("<meta>");

503 
	`NGX_RTMP_STAT_L
("<video>");

504 
	`NGX_RTMP_STAT_L
("<width>");

505 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

506 "%ui", 
codec
->
width
Ë- 
buf
);

507 
	`NGX_RTMP_STAT_L
("</width><height>");

508 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

509 "%ui", 
codec
->
height
Ë- 
buf
);

510 
	`NGX_RTMP_STAT_L
("</height><frame_rate>");

511 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

512 "%ui", 
codec
->
‰ame_øã
Ë- 
buf
);

513 
	`NGX_RTMP_STAT_L
("</frame_rate>");

515 
˙ame
 = 
	`ngx_πmp_gë_video_codec_«me
(
codec
->
video_codec_id
);

516 i‡(*
˙ame
) {

517 
	`NGX_RTMP_STAT_L
("<codec>");

518 
	`NGX_RTMP_STAT_ECS
(
˙ame
);

519 
	`NGX_RTMP_STAT_L
("</codec>");

521 i‡(
codec
->
avc_¥ofûe
) {

522 
	`NGX_RTMP_STAT_L
("<profile>");

523 
	`NGX_RTMP_STAT_CS
(

524 
	`ngx_πmp_°©_gë_avc_¥ofûe
(
codec
->
avc_¥ofûe
));

525 
	`NGX_RTMP_STAT_L
("</profile>");

527 i‡(
codec
->
avc_Àvñ
) {

528 
	`NGX_RTMP_STAT_L
("<compat>");

529 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

530 "%ui", 
codec
->
avc_com∑t
Ë- 
buf
);

531 
	`NGX_RTMP_STAT_L
("</compat>");

533 i‡(
codec
->
avc_Àvñ
) {

534 
	`NGX_RTMP_STAT_L
("<level>");

535 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

536 "%.1f", 
codec
->
avc_Àvñ
 / 10.Ë- 
buf
);

537 
	`NGX_RTMP_STAT_L
("</level>");

539 
	`NGX_RTMP_STAT_L
("</video>");

541 
	`NGX_RTMP_STAT_L
("<audio>");

542 
˙ame
 = 
	`ngx_πmp_gë_audio_codec_«me
(
codec
->
audio_codec_id
);

543 i‡(*
˙ame
) {

544 
	`NGX_RTMP_STAT_L
("<codec>");

545 
	`NGX_RTMP_STAT_ECS
(
˙ame
);

546 
	`NGX_RTMP_STAT_L
("</codec>");

548 i‡(
codec
->
Øc_¥ofûe
) {

549 
	`NGX_RTMP_STAT_L
("<profile>");

550 
	`NGX_RTMP_STAT_CS
(

551 
	`ngx_πmp_°©_gë_Øc_¥ofûe
(
codec
->
Øc_¥ofûe
,

552 
codec
->
Øc_sbr
,

553 
codec
->
Øc_ps
));

554 
	`NGX_RTMP_STAT_L
("</profile>");

556 i‡(
codec
->
Øc_ch™_c⁄f
) {

557 
	`NGX_RTMP_STAT_L
("<channels>");

558 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

559 "%ui", 
codec
->
Øc_ch™_c⁄f
Ë- 
buf
);

560 
	`NGX_RTMP_STAT_L
("</channels>");

561 } i‡(
codec
->
audio_ch™√ls
) {

562 
	`NGX_RTMP_STAT_L
("<channels>");

563 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

564 "%ui", 
codec
->
audio_ch™√ls
Ë- 
buf
);

565 
	`NGX_RTMP_STAT_L
("</channels>");

567 i‡(
codec
->
ßm∂e_øã
) {

568 
	`NGX_RTMP_STAT_L
("<sample_rate>");

569 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

570 "%ui", 
codec
->
ßm∂e_øã
Ë- 
buf
);

571 
	`NGX_RTMP_STAT_L
("</sample_rate>");

573 
	`NGX_RTMP_STAT_L
("</audio>");

575 
	`NGX_RTMP_STAT_L
("</meta>\r\n");

578 
	`NGX_RTMP_STAT_L
("<nclients>");

579 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

580 "%ui", 
n˛õ¡s
Ë- 
buf
);

581 
	`NGX_RTMP_STAT_L
("</nclients>\r\n");

583 i‡(
°ªam
->
publishög
) {

584 
	`NGX_RTMP_STAT_L
("<publishing/>\r\n");

587 i‡(
°ªam
->
a˘ive
) {

588 
	`NGX_RTMP_STAT_L
("<active/>\r\n");

591 
	`NGX_RTMP_STAT_L
("</stream>\r\n");

595 
	`NGX_RTMP_STAT_L
("<nclients>");

596 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

597 "%ui", 
tŸÆ_n˛õ¡s
Ë- 
buf
);

598 
	`NGX_RTMP_STAT_L
("</nclients>\r\n");

600 
	`NGX_RTMP_STAT_L
("</live>\r\n");

601 
	}
}

605 
	$ngx_πmp_°©_∂ay
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

606 
ngx_πmp_∂ay_≠p_c⁄f_t
 *
∑cf
)

608 
ngx_πmp_∂ay_˘x_t
 *
˘x
, *
s˘x
;

609 
ngx_πmp_£ssi⁄_t
 *
s
;

610 
ngx_uöt_t
 
n
, 
n˛õ¡s
, 
tŸÆ_n˛õ¡s
;

611 
u_ch¨
 
buf
[
NGX_INT_T_LEN
];

612 
u_ch¨
 
bbuf
[
NGX_INT32_LEN
];

613 
ngx_πmp_°©_loc_c⁄f_t
 *
¶cf
;

615 i‡(
∑cf
->
íåõs
.
√…s
 == 0) {

619 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_πmp_°©_moduÀ
);

621 
	`NGX_RTMP_STAT_L
("<play>\r\n");

623 
tŸÆ_n˛õ¡s
 = 0;

624 
n
 = 0;Ç < 
∑cf
->
nbuckës
; ++n) {

625 
˘x
 = 
∑cf
->˘x[
n
]; ctx; ) {

626 
	`NGX_RTMP_STAT_L
("<stream>\r\n");

628 
	`NGX_RTMP_STAT_L
("<name>");

629 
	`NGX_RTMP_STAT_ECS
(
˘x
->
«me
);

630 
	`NGX_RTMP_STAT_L
("</name>\r\n");

632 
n˛õ¡s
 = 0;

633 
s˘x
 = 
˘x
;

634 ; 
˘x
; ctx = ctx->
√xt
) {

635 i‡(
	`ngx_°rcmp
(
˘x
->
«me
, 
s˘x
->name)) {

639 
n˛õ¡s
++;

641 
s
 = 
˘x
->
£ssi⁄
;

642 i‡(
¶cf
->
°©
 & 
NGX_RTMP_STAT_CLIENTS
) {

643 
	`NGX_RTMP_STAT_L
("<client>");

645 
	`ngx_πmp_°©_˛õ¡
(
r
, 
Œl
, 
s
);

647 
	`NGX_RTMP_STAT_L
("<timestamp>");

648 
	`NGX_RTMP_STAT
(
bbuf
, 
	`ngx_¢¥ötf
(bbuf, (bbuf),

649 "%D", 
s
->
cuºít_time
Ë- 
bbuf
);

650 
	`NGX_RTMP_STAT_L
("</timestamp>");

652 
	`NGX_RTMP_STAT_L
("</client>\r\n");

655 
tŸÆ_n˛õ¡s
 +
n˛õ¡s
;

657 
	`NGX_RTMP_STAT_L
("<active/>");

658 
	`NGX_RTMP_STAT_L
("<nclients>");

659 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

660 "%ui", 
n˛õ¡s
Ë- 
buf
);

661 
	`NGX_RTMP_STAT_L
("</nclients>\r\n");

663 
	`NGX_RTMP_STAT_L
("</stream>\r\n");

667 
	`NGX_RTMP_STAT_L
("<nclients>");

668 
	`NGX_RTMP_STAT
(
buf
, 
	`ngx_¢¥ötf
(buf, (buf),

669 "%ui", 
tŸÆ_n˛õ¡s
Ë- 
buf
);

670 
	`NGX_RTMP_STAT_L
("</nclients>\r\n");

672 
	`NGX_RTMP_STAT_L
("</play>\r\n");

673 
	}
}

677 
	$ngx_πmp_°©_≠∂iˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

678 
ngx_πmp_c‹e_≠p_c⁄f_t
 *
ˇcf
)

680 
ngx_πmp_°©_loc_c⁄f_t
 *
¶cf
;

682 
	`NGX_RTMP_STAT_L
("<application>\r\n");

683 
	`NGX_RTMP_STAT_L
("<name>");

684 
	`NGX_RTMP_STAT_ES
(&
ˇcf
->
«me
);

685 
	`NGX_RTMP_STAT_L
("</name>\r\n");

687 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_πmp_°©_moduÀ
);

689 i‡(
¶cf
->
°©
 & 
NGX_RTMP_STAT_LIVE
) {

690 
	`ngx_πmp_°©_live
(
r
, 
Œl
,

691 
ˇcf
->
≠p_c⁄f
[
ngx_πmp_live_moduÀ
.
˘x_ödex
]);

694 i‡(
¶cf
->
°©
 & 
NGX_RTMP_STAT_PLAY
) {

695 
	`ngx_πmp_°©_∂ay
(
r
, 
Œl
,

696 
ˇcf
->
≠p_c⁄f
[
ngx_πmp_∂ay_moduÀ
.
˘x_ödex
]);

699 
	`NGX_RTMP_STAT_L
("</application>\r\n");

700 
	}
}

704 
	$ngx_πmp_°©_£rvî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 ***
Œl
,

705 
ngx_πmp_c‹e_§v_c⁄f_t
 *
cscf
)

707 
ngx_πmp_c‹e_≠p_c⁄f_t
 **
ˇcf
;

708 
size_t
 
n
;

710 
	`NGX_RTMP_STAT_L
("<server>\r\n");

712 #ifde‡
NGX_RTMP_POOL_DEBUG


713 
	`ngx_πmp_°©_dump_poﬁ
(
r
, 
Œl
, 
cscf
->
poﬁ
);

716 
ˇcf
 = 
cscf
->
≠∂iˇti⁄s
.
ñts
;

717 
n
 = 0;Ç < 
cscf
->
≠∂iˇti⁄s
.
√…s
; ++n, ++
ˇcf
) {

718 
	`ngx_πmp_°©_≠∂iˇti⁄
(
r
, 
Œl
, *
ˇcf
);

721 
	`NGX_RTMP_STAT_L
("</server>\r\n");

722 
	}
}

725 
ngx_öt_t


726 
	$ngx_πmp_°©_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

728 
ngx_πmp_°©_loc_c⁄f_t
 *
¶cf
;

729 
ngx_πmp_c‹e_maö_c⁄f_t
 *
cmcf
;

730 
ngx_πmp_c‹e_§v_c⁄f_t
 **
cscf
;

731 
ngx_chaö_t
 *
˛
, *
l
, **
Œ
, ***
Œl
;

732 
size_t
 
n
;

733 
off_t
 
Àn
;

734 
u_ch¨
 
tbuf
[
NGX_TIME_T_LEN
];

735 
u_ch¨
 
nbuf
[
NGX_INT_T_LEN
];

737 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_πmp_°©_moduÀ
);

738 i‡(
¶cf
->
°©
 == 0) {

739  
NGX_DECLINED
;

742 
cmcf
 = 
ngx_πmp_c‹e_maö_c⁄f
;

743 i‡(
cmcf
 =
NULL
) {

744 
îr‹
;

747 
˛
 = 
NULL
;

748 
Œ
 = &
˛
;

749 
Œl
 = &
Œ
;

751 
	`NGX_RTMP_STAT_L
("<?xml version=\"1.0\"Éncoding=\"utf-8\" ?>\r\n");

752 i‡(
¶cf
->
°yÀshìt
.
Àn
) {

753 
	`NGX_RTMP_STAT_L
("<?xml-stylesheetÅype=\"text/xsl\" href=\"");

754 
	`NGX_RTMP_STAT_ES
(&
¶cf
->
°yÀshìt
);

755 
	`NGX_RTMP_STAT_L
("\" ?>\r\n");

758 
	`NGX_RTMP_STAT_L
("<rtmp>\r\n");

760 #ifde‡
NGINX_VERSION


761 
	`NGX_RTMP_STAT_L
("<ngöx_vîsi⁄>" 
NGINX_VERSION
 "</nginx_version>\r\n");

764 #ifde‡
NGINX_RTMP_VERSION


765 
	`NGX_RTMP_STAT_L
("<ngöx_πmp_vîsi⁄>" 
NGINX_RTMP_VERSION
 "</nginx_rtmp_version>\r\n");

768 #ifde‡
NGX_COMPILER


769 
	`NGX_RTMP_STAT_L
("<compûî>" 
NGX_COMPILER
 "</compiler>\r\n");

771 
	`NGX_RTMP_STAT_L
("<buût>" 
__DATE__
 " " 
__TIME__
 "</built>\r\n");

773 
	`NGX_RTMP_STAT_L
("<pid>");

774 
	`NGX_RTMP_STAT
(
nbuf
, 
	`ngx_¢¥ötf
(nbuf, (nbuf),

775 "%ui", (
ngx_uöt_t
Ë
	`ngx_gëpid
()Ë- 
nbuf
);

776 
	`NGX_RTMP_STAT_L
("</pid>\r\n");

778 
	`NGX_RTMP_STAT_L
("<uptime>");

779 
	`NGX_RTMP_STAT
(
tbuf
, 
	`ngx_¢¥ötf
(tbuf, (tbuf),

780 "%T", 
ngx_ˇched_time
->
£c
 - 
°¨t_time
Ë- 
tbuf
);

781 
	`NGX_RTMP_STAT_L
("</uptime>\r\n");

783 
	`NGX_RTMP_STAT_L
("<naccepted>");

784 
	`NGX_RTMP_STAT
(
nbuf
, 
	`ngx_¢¥ötf
(nbuf, (nbuf),

785 "%ui", 
ngx_πmp_«c˚±ed
Ë- 
nbuf
);

786 
	`NGX_RTMP_STAT_L
("</naccepted>\r\n");

788 
	`ngx_πmp_°©_bw
(
r
, 
Œl
, &
ngx_πmp_bw_ö
, "ö", 
NGX_RTMP_STAT_BW_BYTES
);

789 
	`ngx_πmp_°©_bw
(
r
, 
Œl
, &
ngx_πmp_bw_out
, "out", 
NGX_RTMP_STAT_BW_BYTES
);

791 
cscf
 = 
cmcf
->
£rvîs
.
ñts
;

792 
n
 = 0;Ç < 
cmcf
->
£rvîs
.
√…s
; ++n, ++
cscf
) {

793 
	`ngx_πmp_°©_£rvî
(
r
, 
Œl
, *
cscf
);

796 
	`NGX_RTMP_STAT_L
("</rtmp>\r\n");

798 
Àn
 = 0;

799 
l
 = 
˛
;Ü;Ü =Ü->
√xt
) {

800 
Àn
 +(
l
->
buf
->
œ°
 -Ü->buf->
pos
);

802 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/xml");

803 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

804 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

805 
	`ngx_hâp_£nd_hódî
(
r
);

806 (*
Œ
)->
buf
->
œ°_buf
 = 1;

807  
	`ngx_hâp_ouçut_fûãr
(
r
, 
˛
);

809 
îr‹
:

810 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

811 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

812  
	`ngx_hâp_£nd_hódî
(
r
);

813 
	}
}

817 
	$ngx_πmp_°©_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

819 
ngx_πmp_°©_loc_c⁄f_t
 *
c⁄f
;

821 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_πmp_°©_loc_c⁄f_t
));

822 i‡(
c⁄f
 =
NULL
) {

823  
NULL
;

826 
c⁄f
->
°©
 = 0;

828  
c⁄f
;

829 
	}
}

833 
	$ngx_πmp_°©_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

835 
ngx_πmp_°©_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

836 
ngx_πmp_°©_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

838 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
°©
, 
¥ev
->stat, 0);

839 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°yÀshìt
, 
¥ev
->stylesheet, "");

841  
NGX_CONF_OK
;

842 
	}
}

846 
	$ngx_πmp_°©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

848 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

850 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

851 
˛cf
->
h™dÀr
 = 
ngx_πmp_°©_h™dÀr
;

853  
	`ngx_c⁄f_£t_bômask_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

854 
	}
}

857 
ngx_öt_t


858 
	$ngx_πmp_°©_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

860 
°¨t_time
 = 
ngx_ˇched_time
->
£c
;

862  
NGX_OK
;

863 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_streams.h

7 #i‚de‡
_NGX_RTMP_STREAMS_H_INCLUDED_


8 
	#_NGX_RTMP_STREAMS_H_INCLUDED_


	)

11 
	#NGX_RTMP_MSID
 1

	)

13 
	#NGX_RTMP_CSID_AMF_INI
 3

	)

14 
	#NGX_RTMP_CSID_AMF
 5

	)

15 
	#NGX_RTMP_CSID_AUDIO
 6

	)

16 
	#NGX_RTMP_CSID_VIDEO
 7

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_version.h

7 #i‚de‡
_NGX_RTMP_VERSION_H_INCLUDED_


8 
	#_NGX_RTMP_VERSION_H_INCLUDED_


	)

11 
	#ngöx_πmp_vîsi⁄
 1001004

	)

12 
	#NGINX_RTMP_VERSION
 "1.1.4"

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(!
ªv
->
ªady
) {

25 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "secondáioÖost");

26  
NGX_AGAIN
;

29 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

30 "ªv->com∂ëe: %d", 
ªv
->
com∂ëe
);

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

32 "aiÿsize: %d", 
size
);

34 i‡(!
ªv
->
com∂ëe
) {

35 
	`ngx_memzîo
(&
ªv
->
aiocb
, (aiocb));

37 
ªv
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

38 
ªv
->
aiocb
.
aio_buf
 = 
buf
;

39 
ªv
->
aiocb
.
aio_nbyãs
 = 
size
;

41 #i‡(
NGX_HAVE_KQUEUE
)

42 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

43 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

44 
ªv
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 =Ñev;

47 i‡(
	`aio_ªad
(&
ªv
->
aiocb
) == -1) {

48 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ªv
->
log
, 
ngx_î∫o
,

50 
ªv
->
îr‹
 = 1;

51  
NGX_ERROR
;

54 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "aio_ªad: #%d OK", 
c
->
fd
);

57 
ªv
->
a˘ive
 = 1;

58 
ªv
->
ªady
 = 0;

61 
ªv
->
com∂ëe
 = 0;

63 
n
 = 
	`aio_îr‹
(&
ªv
->
aiocb
);

64 i‡(
n
 == -1) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
, "aio_error() failed");

66 
ªv
->
îr‹
 = 1;

67  
NGX_ERROR
;

70 i‡(
n
 != 0) {

71 i‡(
n
 =
NGX_EINPROGRESS
) {

72 i‡(
ªv
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
n
,

75 
ªv
->
ªady
 = 0;

77  
NGX_AGAIN
;

80 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
n
, "aio_read() failed");

81 
ªv
->
îr‹
 = 1;

82 
ªv
->
ªady
 = 0;

83  
NGX_ERROR
;

86 
n
 = 
	`aio_ªtu∫
(&
ªv
->
aiocb
);

87 i‡(
n
 == -1) {

88 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

91 
ªv
->
îr‹
 = 1;

92 
ªv
->
ªady
 = 0;

93  
NGX_ERROR
;

96 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

97 "aio_ªad: #%d %d", 
c
->
fd
, 
n
);

99 i‡(
n
 == 0) {

100 
ªv
->
eof
 = 1;

101 
ªv
->
ªady
 = 0;

103 
ªv
->
ªady
 = 1;

106 
ªv
->
a˘ive
 = 0;

108  
n
;

109 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_read_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

16 
n
;

17 
u_ch¨
 *
buf
, *
¥ev
;

18 
size_t
 
size
;

19 
ssize_t
 
tŸÆ
;

21 i‡(
c
->
ªad
->
≥ndög_eof
) {

22 
c
->
ªad
->
ªady
 = 0;

26 
tŸÆ
 = 0;

28 
˛
) {

32 i‡(!
c
->
ªad
->
ªady
) {

33  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

36 
buf
 = 
˛
->buf->
œ°
;

37 
¥ev
 = 
˛
->
buf
->
œ°
;

38 
size
 = 0;

42 
˛
 && 
¥ev
 =˛->
buf
->
œ°
) {

43 
size
 +
˛
->
buf
->
íd
 - cl->buf->
œ°
;

44 
¥ev
 = 
˛
->
buf
->
íd
;

45 
˛
 = cl->
√xt
;

48 
n
 = 
	`ngx_aio_ªad
(
c
, 
buf
, 
size
);

50 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ªad: %d", 
n
);

52 i‡(
n
 =
NGX_AGAIN
) {

53  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

56 i‡(
n
 =
NGX_ERROR
) {

57  
NGX_ERROR
;

60 i‡(
n
 == 0) {

61 
c
->
ªad
->
≥ndög_eof
 = 1;

62 i‡(
tŸÆ
) {

63 
c
->
ªad
->
eof
 = 0;

64 
c
->
ªad
->
ªady
 = 1;

66  
tŸÆ
;

69 i‡(
n
 > 0) {

70 
tŸÆ
 +
n
;

73 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

74 "aio_ªadÅŸÆ: %d", 
tŸÆ
);

77  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

78 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_write.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
wev
;

22 
wev
 = 
c
->
wrôe
;

24 i‡(!
wev
->
ªady
) {

25  
NGX_AGAIN
;

28 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

29 "aio: wev->com∂ëe: %d", 
wev
->
com∂ëe
);

31 i‡(!
wev
->
com∂ëe
) {

32 
	`ngx_memzîo
(&
wev
->
aiocb
, (aiocb));

34 
wev
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

35 
wev
->
aiocb
.
aio_buf
 = 
buf
;

36 
wev
->
aiocb
.
aio_nbyãs
 = 
size
;

38 #i‡(
NGX_HAVE_KQUEUE
)

39 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

40 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

41 
wev
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = wev;

44 i‡(
	`aio_wrôe
(&
wev
->
aiocb
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
,

47  
NGX_ERROR
;

50 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_write: OK");

52 
wev
->
a˘ive
 = 1;

53 
wev
->
ªady
 = 0;

56 
wev
->
com∂ëe
 = 0;

58 
n
 = 
	`aio_îr‹
(&
wev
->
aiocb
);

59 i‡(
n
 == -1) {

60 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
, "aio_error() failed");

61 
wev
->
îr‹
 = 1;

62  
NGX_ERROR
;

65 i‡(
n
 != 0) {

66 i‡(
n
 =
NGX_EINPROGRESS
) {

67 i‡(
wev
->
ªady
) {

68 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
n
,

70 
wev
->
ªady
 = 0;

72  
NGX_AGAIN
;

75 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_write() failed");

76 
wev
->
îr‹
 = 1;

77 
wev
->
ªady
 = 0;

80 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

81 i‡(
n
 == -1) {

82 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

86 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_return() %d",Ç);

89  
NGX_ERROR
;

92 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

93 i‡(
n
 == -1) {

94 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

97 
wev
->
îr‹
 = 1;

98 
wev
->
ªady
 = 0;

99  
NGX_ERROR
;

103 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_wrôe: %d", 
n
);

105 
wev
->
a˘ive
 = 0;

106 
wev
->
ªady
 = 1;

108  
n
;

109 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_write_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *

14 
	$ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

16 
u_ch¨
 *
buf
, *
¥ev
;

17 
off_t
 
£nd
, 
£¡
;

18 
size_t
 
Àn
;

19 
ssize_t
 
n
, 
size
;

20 
ngx_chaö_t
 *
˛
;

24 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

25 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

28 
£nd
 = 0;

29 
£¡
 = 0;

30 
˛
 = 
ö
;

32 
˛
) {

34 i‡(
˛
->
buf
->
pos
 =˛->buf->
œ°
) {

35 
˛
 = cl->
√xt
;

41 i‡(!
c
->
wrôe
->
ªady
) {

42  
˛
;

45 
buf
 = 
˛
->buf->
pos
;

46 
¥ev
 = 
buf
;

47 
Àn
 = 0;

51 
˛
 && 
¥ev
 =˛->
buf
->
pos
 && 
£nd
 < 
limô
) {

52 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

56 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

58 i‡(
£nd
 + 
size
 > 
limô
) {

59 
size
 = 
limô
 - 
£nd
;

62 
Àn
 +
size
;

63 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

64 
£nd
 +
size
;

65 
˛
 = cl->
√xt
;

68 
n
 = 
	`ngx_aio_wrôe
(
c
, 
buf
, 
Àn
);

70 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_wrôe: %z", 
n
);

72 i‡(
n
 =
NGX_ERROR
) {

73  
NGX_CHAIN_ERROR
;

76 i‡(
n
 > 0) {

77 
£¡
 +
n
;

78 
c
->
£¡
 +
n
;

81 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

82 "aio_wrôê£¡: %O", 
c
->
£¡
);

84 
˛
 = 
ö
; cl; c»˛->
√xt
) {

86 i‡(
£¡
 >
˛
->
buf
->
œ°
 - cl->buf->
pos
) {

87 
£¡
 -
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

93 
˛
->
buf
->
pos
 +
£¡
;

99  
˛
;

100 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_alloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gngx_∑gesize
;

13 
ngx_uöt_t
 
	gngx_∑gesize_shi·
;

14 
ngx_uöt_t
 
	gngx_ˇchñöe_size
;

18 
	$ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

20 *
p
;

22 
p
 = 
	`mÆloc
(
size
);

23 i‡(
p
 =
NULL
) {

24 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

25 "mÆloc(%uzËÁûed", 
size
);

28 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0, "mÆloc: %p:%uz", 
p
, 
size
);

30  
p
;

31 
	}
}

35 
	$ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

37 *
p
;

39 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

41 i‡(
p
) {

42 
	`ngx_memzîo
(
p
, 
size
);

45  
p
;

46 
	}
}

49 #i‡(
NGX_HAVE_POSIX_MEMALIGN
)

52 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

54 *
p
;

55 
îr
;

57 
îr
 = 
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
);

59 i‡(
îr
) {

60 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

61 "posix_memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

62 
p
 = 
NULL
;

65 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

66 "posix_memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

68  
p
;

69 
	}
}

71 #ñi‡(
NGX_HAVE_MEMALIGN
)

74 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

76 *
p
;

78 
p
 = 
	`memÆign
(
Æignmít
, 
size
);

79 i‡(
p
 =
NULL
) {

80 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

81 "memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

84 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

85 "memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

87  
p
;

88 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_alloc.h

8 #i‚de‡
_NGX_ALLOC_H_INCLUDED_


9 
	#_NGX_ALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 *
ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

17 *
ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

19 
	#ngx_‰ì
 
‰ì


	)

29 #i‡(
NGX_HAVE_POSIX_MEMALIGN
 || 
NGX_HAVE_MEMALIGN
)

31 *
ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
);

35 
	#ngx_memÆign
(
Æignmít
, 
size
, 
log
Ë
	`ngx_Æloc
(size,Üog)

	)

40 
ngx_uöt_t
 
ngx_∑gesize
;

41 
ngx_uöt_t
 
ngx_∑gesize_shi·
;

42 
ngx_uöt_t
 
ngx_ˇchñöe_size
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_atomic.h

8 #i‚de‡
_NGX_ATOMIC_H_INCLUDED_


9 
	#_NGX_ATOMIC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_LIBATOMIC
)

18 
	#AO_REQUIRE_CAS


	)

19 
	~<©omic_›s.h
>

21 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

23 
	tngx_©omic_öt_t
;

24 
AO_t
 
	tngx_©omic_uöt_t
;

25 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

27 #i‡(
NGX_PTR_SIZE
 == 8)

28 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

30 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

33 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

34 
	`AO_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
√w
)

	)

35 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

36 
	`AO_„tch_™d_add
(
vÆue
, 
add
)

	)

37 
	#ngx_mem‹y_b¨rõr
(Ë
	`AO_n›
()

	)

38 
	#ngx_˝u_∑u£
()

	)

41 #ñi‡(
NGX_DARWIN_ATOMIC
)

48 
	~<libkîn/OSAtomic.h
>

52 #unde‡
boﬁ


56 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

58 #i‡(
NGX_PTR_SIZE
 == 8)

60 
öt64_t
 
	tngx_©omic_öt_t
;

61 
uöt64_t
 
	tngx_©omic_uöt_t
;

62 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

64 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

65 
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
ﬁd
, 
√w
, (
öt64_t
 *Ë
lock
)

	)

67 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

68 (
	`OSAtomicAdd64
(
add
, (
öt64_t
 *Ë
vÆue
Ë-ádd)

	)

72 
öt32_t
 
	tngx_©omic_öt_t
;

73 
uöt32_t
 
	tngx_©omic_uöt_t
;

74 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

76 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

77 
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
ﬁd
, 
√w
, (
öt32_t
 *Ë
lock
)

	)

79 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

80 (
	`OSAtomicAdd32
(
add
, (
öt32_t
 *Ë
vÆue
Ë-ádd)

	)

84 
	#ngx_mem‹y_b¨rõr
(Ë
	`OSMem‹yB¨rõr
()

	)

86 
	#ngx_˝u_∑u£
()

	)

88 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

91 #ñi‡(
NGX_HAVE_GCC_ATOMIC
)

95 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

97 
	tngx_©omic_öt_t
;

98 
	tngx_©omic_uöt_t
;

100 #i‡(
NGX_PTR_SIZE
 == 8)

101 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

103 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

106 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

109 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
£t
) \

110 
	`__sync_boﬁ_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
£t
)

	)

112 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

113 
	`__sync_„tch_™d_add
(
vÆue
, 
add
)

	)

115 
	#ngx_mem‹y_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

117 #i‡–
__i386__
 || 
__i386
 || 
__amd64__
 || 
__amd64
 )

118 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

120 
	#ngx_˝u_∑u£
()

	)

124 #ñi‡–
__i386__
 || 
__i386
 )

126 
öt32_t
 
	tngx_©omic_öt_t
;

127 
uöt32_t
 
	tngx_©omic_uöt_t
;

128 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

129 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

132 #i‡–
__SUNPRO_C
 )

134 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

136 
ngx_©omic_uöt_t


137 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

138 
ngx_©omic_uöt_t
 
£t
);

140 
ngx_©omic_öt_t


141 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

149 
ngx_˝u_∑u£
();

153 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

158 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

160 
	~"ngx_gcc_©omic_x86.h
"

165 #ñi‡–
__amd64__
 || 
__amd64
 )

167 
öt64_t
 
	tngx_©omic_öt_t
;

168 
uöt64_t
 
	tngx_©omic_uöt_t
;

169 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

170 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

173 #i‡–
__SUNPRO_C
 )

175 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

177 
ngx_©omic_uöt_t


178 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

179 
ngx_©omic_uöt_t
 
£t
);

181 
ngx_©omic_öt_t


182 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

190 
ngx_˝u_∑u£
();

194 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

199 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

201 
	~"ngx_gcc_©omic_amd64.h
"

206 #ñi‡–
__•¨c__
 || 
__•¨c
 || 
__•¨cv9
 )

208 #i‡(
NGX_PTR_SIZE
 == 8)

210 
öt64_t
 
	tngx_©omic_öt_t
;

211 
uöt64_t
 
	tngx_©omic_uöt_t
;

212 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

216 
öt32_t
 
	tngx_©omic_öt_t
;

217 
uöt32_t
 
	tngx_©omic_uöt_t
;

218 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

222 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

225 #i‡–
__SUNPRO_C
 )

227 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

229 
	~"ngx_su≈ro_©omic_•¨c64.h
"

234 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

236 
	~"ngx_gcc_©omic_•¨c64.h
"

241 #ñi‡–
__powîpc__
 || 
__POWERPC__
 )

243 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

245 #i‡(
NGX_PTR_SIZE
 == 8)

247 
öt64_t
 
	tngx_©omic_öt_t
;

248 
uöt64_t
 
	tngx_©omic_uöt_t
;

249 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

253 
öt32_t
 
	tngx_©omic_öt_t
;

254 
uöt32_t
 
	tngx_©omic_uöt_t
;

255 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

259 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

262 
	~"ngx_gcc_©omic_µc.h
"

267 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

269 
	#NGX_HAVE_ATOMIC_OPS
 0

	)

271 
öt32_t
 
	tngx_©omic_öt_t
;

272 
uöt32_t
 
	tngx_©omic_uöt_t
;

273 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

274 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

277 
ngx_ölöe
 
ngx_©omic_uöt_t


278 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

279 
ngx_©omic_uöt_t
 
£t
)

281 i‡(*
lock
 =
ﬁd
) {

282 *
lock
 = 
£t
;

287 
	}
}

290 
ngx_ölöe
 
ngx_©omic_öt_t


291 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

293 
ngx_©omic_öt_t
 
ﬁd
;

295 
ﬁd
 = *
vÆue
;

296 *
vÆue
 +
add
;

298  
ﬁd
;

299 
	}
}

301 
	#ngx_mem‹y_b¨rõr
()

	)

302 
	#ngx_˝u_∑u£
()

	)

307 
ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
);

309 
	#ngx_åylock
(
lock
Ë(*÷ockË=0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 1))

	)

310 
	#ngx_u∆ock
(
lock
Ë*÷ockË0

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_channel.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_ch™√l.h
>

13 
ngx_öt_t


14 
	$ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

15 
ngx_log_t
 *
log
)

17 
ssize_t
 
n
;

18 
ngx_îr_t
 
îr
;

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

22 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

25 
cmsghdr
 
cm
;

26 
•a˚
[
	`CMSG_SPACE
(())];

27 } 
cmsg
;

29 i‡(
ch
->
fd
 == -1) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

34 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

35 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

37 
	`ngx_memzîo
(&
cmsg
, (cmsg));

39 
cmsg
.
cm
.
cmsg_Àn
 = 
	`CMSG_LEN
(());

40 
cmsg
.
cm
.
cmsg_Àvñ
 = 
SOL_SOCKET
;

41 
cmsg
.
cm
.
cmsg_ty≥
 = 
SCM_RIGHTS
;

53 
	`ngx_mem˝y
(
	`CMSG_DATA
(&
cmsg
.
cm
), &
ch
->
fd
, ());

56 
msg
.
msg_Êags
 = 0;

60 i‡(
ch
->
fd
 == -1) {

61 
msg
.
msg_ac¸ights
 = 
NULL
;

62 
msg
.
msg_ac¸ight¶í
 = 0;

65 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
ch
->
fd
;

66 
msg
.
msg_ac¸ight¶í
 = ();

71 
iov
[0].
iov_ba£
 = (*Ë
ch
;

72 
iov
[0].
iov_Àn
 = 
size
;

74 
msg
.
msg_«me
 = 
NULL
;

75 
msg
.
msg_«mñí
 = 0;

76 
msg
.
msg_iov
 = 
iov
;

77 
msg
.
msg_iovÀn
 = 1;

79 
n
 = 
	`£ndmsg
(
s
, &
msg
, 0);

81 i‡(
n
 == -1) {

82 
îr
 = 
ngx_î∫o
;

83 i‡(
îr
 =
NGX_EAGAIN
) {

84  
NGX_AGAIN
;

87 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "sendmsg() failed");

88  
NGX_ERROR
;

91  
NGX_OK
;

92 
	}
}

95 
ngx_öt_t


96 
	$ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
, 
ngx_log_t
 *
log
)

98 
ssize_t
 
n
;

99 
ngx_îr_t
 
îr
;

100 
iovec
 
iov
[1];

101 
msghdr
 
msg
;

103 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

105 
cmsghdr
 
cm
;

106 
•a˚
[
	`CMSG_SPACE
(())];

107 } 
cmsg
;

109 
fd
;

112 
iov
[0].
iov_ba£
 = (*Ë
ch
;

113 
iov
[0].
iov_Àn
 = 
size
;

115 
msg
.
msg_«me
 = 
NULL
;

116 
msg
.
msg_«mñí
 = 0;

117 
msg
.
msg_iov
 = 
iov
;

118 
msg
.
msg_iovÀn
 = 1;

120 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

121 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

122 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

124 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
fd
;

125 
msg
.
msg_ac¸ight¶í
 = ();

128 
n
 = 
	`ªcvmsg
(
s
, &
msg
, 0);

130 i‡(
n
 == -1) {

131 
îr
 = 
ngx_î∫o
;

132 i‡(
îr
 =
NGX_EAGAIN
) {

133  
NGX_AGAIN
;

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "recvmsg() failed");

137  
NGX_ERROR
;

140 i‡(
n
 == 0) {

141 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "recvmsg()Ñeturned zero");

142  
NGX_ERROR
;

145 i‡((
size_t
Ë
n
 < (
ngx_ch™√l_t
)) {

146 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

147 "ªcvmsg(Ëªtu∫edÇŸÉnough d©a: %z", 
n
);

148  
NGX_ERROR
;

151 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

153 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

155 i‡(
cmsg
.
cm
.
cmsg_Àn
 < (
sockÀn_t
Ë
	`CMSG_LEN
(())) {

156 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

158  
NGX_ERROR
;

161 i‡(
cmsg
.
cm
.
cmsg_Àvñ
 !
SOL_SOCKET
 || cmsg.cm.
cmsg_ty≥
 !
SCM_RIGHTS
)

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

166 
cmsg
.
cm
.
cmsg_Àvñ
, cmsg.cm.
cmsg_ty≥
);

167  
NGX_ERROR
;

172 
	`ngx_mem˝y
(&
ch
->
fd
, 
	`CMSG_DATA
(&
cmsg
.
cm
), ());

175 i‡(
msg
.
msg_Êags
 & (
MSG_TRUNC
|
MSG_CTRUNC
)) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

182 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

183 i‡(
msg
.
msg_ac¸ight¶í
 != ()) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

186  
NGX_ERROR
;

189 
ch
->
fd
 = fd;

194  
n
;

195 
	}
}

198 
ngx_öt_t


199 
	$ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
, 
ngx_öt_t
 
evít
,

200 
ngx_evít_h™dÀr_±
 
h™dÀr
)

202 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

203 
ngx_c⁄√˘i⁄_t
 *
c
;

205 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
fd
, 
cy˛e
->
log
);

207 i‡(
c
 =
NULL
) {

208  
NGX_ERROR
;

211 
c
->
poﬁ
 = 
cy˛e
->pool;

213 
ªv
 = 
c
->
ªad
;

214 
wev
 = 
c
->
wrôe
;

216 
ªv
->
log
 = 
cy˛e
->log;

217 
wev
->
log
 = 
cy˛e
->log;

219 #i‡(
NGX_THREADS
)

220 
ªv
->
lock
 = &
c
->lock;

221 
wev
->
lock
 = &
c
->lock;

222 
ªv
->
own_lock
 = &
c
->
lock
;

223 
wev
->
own_lock
 = &
c
->
lock
;

226 
ªv
->
ch™√l
 = 1;

227 
wev
->
ch™√l
 = 1;

229 
ev
 = (
evít
 =
NGX_READ_EVENT
Ë? 
ªv
 : 
wev
;

231 
ev
->
h™dÀr
 = handler;

233 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

234 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

235 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

236  
NGX_ERROR
;

240 i‡(
	`ngx_add_evít
(
ev
, 
evít
, 0Ë=
NGX_ERROR
) {

241 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

242  
NGX_ERROR
;

246  
NGX_OK
;

247 
	}
}

251 
	$ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
)

253 i‡(
	`˛o£
(
fd
[0]) == -1) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

257 i‡(
	`˛o£
(
fd
[1]) == -1) {

258 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

260 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_channel.h

8 #i‚de‡
_NGX_CHANNEL_H_INCLUDED_


9 
	#_NGX_CHANNEL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

18 
ngx_uöt_t
 
	mcomm™d
;

19 
ngx_pid_t
 
	mpid
;

20 
ngx_öt_t
 
	m¶Ÿ
;

21 
ngx_fd_t
 
	mfd
;

22 } 
	tngx_ch™√l_t
;

25 
ngx_öt_t
 
ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

26 
ngx_log_t
 *
log
);

27 
ngx_öt_t
 
ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

28 
ngx_log_t
 *
log
);

29 
ngx_öt_t
 
ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
,

30 
ngx_öt_t
 
evít
, 
ngx_evít_h™dÀr_±
 
h™dÀr
);

31 
ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_daemon.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t


13 
	$ngx_d´m⁄
(
ngx_log_t
 *
log
)

15 
fd
;

17 
	`f‹k
()) {

19 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "fork() failed");

20  
NGX_ERROR
;

26 
	`exô
(0);

29 
ngx_pid
 = 
	`ngx_gëpid
();

31 i‡(
	`£tsid
() == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "setsid() failed");

33  
NGX_ERROR
;

36 
	`umask
(0);

38 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

39 i‡(
fd
 == -1) {

40 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

42  
NGX_ERROR
;

45 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) == -1) {

46 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDIN) failed");

47  
NGX_ERROR
;

50 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) == -1) {

51 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDOUT) failed");

52  
NGX_ERROR
;

56 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) == -1) {

57 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDERR) failed");

58  
NGX_ERROR
;

62 i‡(
fd
 > 
STDERR_FILENO
) {

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "close() failed");

65  
NGX_ERROR
;

69  
NGX_OK
;

70 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin.h

8 #i‚de‡
_NGX_DARWIN_H_INCLUDED_


9 
	#_NGX_DARWIN_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_d¨wö_kîn_o§ñd©e
;

17 
ngx_d¨wö_hw_n˝u
;

18 
u_l⁄g
 
ngx_d¨wö_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin_config.h

8 #i‚de‡
_NGX_DARWIN_CONFIG_H_INCLUDED_


9 
	#_NGX_DARWIN_CONFIG_H_INCLUDED_


	)

12 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
MAC_OS_X_VERSION_10_0


	)

15 
	~<sys/ty≥s.h
>

16 
	~<sys/time.h
>

17 
	~<uni°d.h
>

18 
	~<öây≥s.h
>

19 
	~<°d¨g.h
>

20 
	~<°ddef.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<˘y≥.h
>

24 
	~<î∫o.h
>

25 
	~<°rög.h
>

26 
	~<sig«l.h
>

27 
	~<pwd.h
>

28 
	~<gΩ.h
>

29 
	~<dúít.h
>

30 
	~<glob.h
>

31 
	~<sys/mou¡.h
>

33 
	~<sys/fûio.h
>

34 
	~<sys/io˘l.h
>

35 
	~<sys/uio.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sched.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/t˝.h
>

47 
	~<¨∑/öë.h
>

48 
	~<√tdb.h
>

49 
	~<sys/un.h
>

51 
	~<sys/sys˘l.h
>

52 
	~<xloˇÀ.h
>

55 #i‚de‡
IOV_MAX


56 
	#IOV_MAX
 64

	)

60 
	~<ngx_auto_c⁄fig.h
>

63 #i‡(
NGX_HAVE_POSIX_SEM
)

64 
	~<£m≠h‹e.h
>

68 #i‡(
NGX_HAVE_POLL
)

69 
	~<pﬁl.h
>

73 #i‡(
NGX_HAVE_KQUEUE
)

74 
	~<sys/evít.h
>

78 
	#NGX_LISTEN_BACKLOG
 -1

	)

81 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


82 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

86 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


87 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

91 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

92 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

95 **
ívú⁄
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_d¨wö_kîn_o°y≥
[16];

13 
	gngx_d¨wö_kîn_o§ñó£
[128];

14 
	gngx_d¨wö_hw_n˝u
;

15 
	gngx_d¨wö_kîn_ùc_somaxc⁄n
;

16 
u_l⁄g
 
	gngx_d¨wö_√t_öë_t˝_£nd•a˚
;

18 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

21 
ngx_os_io_t
 
	gngx_d¨wö_io
 = {

22 
ngx_unix_ªcv
,

23 
ngx_ªadv_chaö
,

24 
ngx_udp_unix_ªcv
,

25 
ngx_unix_£nd
,

26 #i‡(
NGX_HAVE_SENDFILE
)

27 
ngx_d¨wö_£ndfûe_chaö
,

28 
NGX_IO_SENDFILE


30 
ngx_wrôev_chaö
,

37 *
	m«me
;

38 *
	mvÆue
;

39 
size_t
 
	msize
;

40 
ngx_uöt_t
 
	mexi°s
;

41 } 
	tsys˘l_t
;

44 
sys˘l_t
 
	gsys˘ls
[] = {

46 &
ngx_d¨wö_hw_n˝u
,

47 (
ngx_d¨wö_hw_n˝u
), 0 },

50 &
ngx_d¨wö_√t_öë_t˝_£nd•a˚
,

51 (
ngx_d¨wö_√t_öë_t˝_£nd•a˚
), 0 },

54 &
ngx_d¨wö_kîn_ùc_somaxc⁄n
,

55 (
ngx_d¨wö_kîn_ùc_somaxc⁄n
), 0 },

57 { 
NULL
, NULL, 0, 0 }

62 
	$ngx_debug_öô
()

64 #i‡(
NGX_DEBUG_MALLOC
)

75 
	`£ãnv
("MallocScribble", "1", 0);

77 
ngx_debug_mÆloc
 = 1;

81 i‡(
	`gëív
("MallocScribble")) {

82 
ngx_debug_mÆloc
 = 1;

86 
	}
}

89 
ngx_öt_t


90 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

92 
size_t
 
size
;

93 
ngx_îr_t
 
îr
;

94 
ngx_uöt_t
 
i
;

96 
size
 = (
ngx_d¨wö_kîn_o°y≥
);

97 i‡(
	`sys˘lby«me
("kîn.o°y≥", 
ngx_d¨wö_kîn_o°y≥
, &
size
, 
NULL
, 0)

100 
îr
 = 
ngx_î∫o
;

102 i‡(
îr
 !
NGX_ENOENT
) {

104 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

107 i‡(
îr
 !
NGX_ENOMEM
) {

108  
NGX_ERROR
;

111 
ngx_d¨wö_kîn_o°y≥
[
size
 - 1] = '\0';

115 
size
 = (
ngx_d¨wö_kîn_o§ñó£
);

116 i‡(
	`sys˘lby«me
("kîn.o§ñó£", 
ngx_d¨wö_kîn_o§ñó£
, &
size
,

117 
NULL
, 0)

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 !
NGX_ENOENT
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

127 i‡(
îr
 !
NGX_ENOMEM
) {

128  
NGX_ERROR
;

131 
ngx_d¨wö_kîn_o§ñó£
[
size
 - 1] = '\0';

135 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

136 
size
 = 
sys˘ls
[
i
].size;

138 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

141 
sys˘ls
[
i
].
exi°s
 = 1;

145 
îr
 = 
ngx_î∫o
;

147 i‡(
îr
 =
NGX_ENOENT
) {

151 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

152 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

153  
NGX_ERROR
;

156 
ngx_n˝u
 = 
ngx_d¨wö_hw_n˝u
;

158 i‡(
ngx_d¨wö_kîn_ùc_somaxc⁄n
 > 32767) {

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

161  
NGX_ERROR
;

164 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

166 
ngx_os_io
 = 
ngx_d¨wö_io
;

168  
NGX_OK
;

169 
	}
}

173 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

175 
u_l⁄g
 
vÆue
;

176 
ngx_uöt_t
 
i
;

178 i‡(
ngx_d¨wö_kîn_o°y≥
[0]) {

179 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

180 
ngx_d¨wö_kîn_o°y≥
, 
ngx_d¨wö_kîn_o§ñó£
);

183 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

184 i‡(
sys˘ls
[
i
].
exi°s
) {

185 i‡(
sys˘ls
[
i
].
size
 == ()) {

186 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

189 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

192 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

193 
sys˘ls
[
i
].
«me
, 
vÆue
);

196 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

32 
	#NGX_TRAILERS
 64

	)

34 
	#NGX_HEADERS
 
IOV_MAX


	)

35 
	#NGX_TRAILERS
 
IOV_MAX


	)

39 
ngx_chaö_t
 *

40 
	$ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

42 
rc
;

43 
u_ch¨
 *
¥ev
;

44 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

45 
off_t
 
hódî_size
, 
fûe_size
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_îr_t
 
îr
;

48 
ngx_buf_t
 *
fûe
;

49 
ngx_¨øy_t
 
hódî
, 
åaûî
;

50 
ngx_evít_t
 *
wev
;

51 
ngx_chaö_t
 *
˛
;

52 
sf_hdå
 
hdå
;

53 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

55 
wev
 = 
c
->
wrôe
;

57 i‡(!
wev
->
ªady
) {

58  
ö
;

61 #i‡(
NGX_HAVE_KQUEUE
)

63 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

64 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

66 
wev
->
îr‹
 = 1;

67  
NGX_CHAIN_ERROR
;

74 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

75 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

78 
£nd
 = 0;

80 
hódî
.
ñts
 = 
hódîs
;

81 
hódî
.
size
 = (
iovec
);

82 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

83 
hódî
.
poﬁ
 = 
c
->pool;

85 
åaûî
.
ñts
 = 
åaûîs
;

86 
åaûî
.
size
 = (
iovec
);

87 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

88 
åaûî
.
poﬁ
 = 
c
->pool;

91 
fûe
 = 
NULL
;

92 
fûe_size
 = 0;

93 
hódî_size
 = 0;

94 
eöå
 = 0;

95 
com∂ëe
 = 0;

96 
¥ev_£nd
 = 
£nd
;

98 
hódî
.
√…s
 = 0;

99 
åaûî
.
√…s
 = 0;

103 
¥ev
 = 
NULL
;

104 
iov
 = 
NULL
;

106 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

108 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

112 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

116 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

118 i‡(
£nd
 + 
size
 > 
limô
) {

119 
size
 = 
limô
 - 
£nd
;

122 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

123 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

126 i‡(
hódî
.
√…s
 >
IOV_MAX
) {

130 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

131 i‡(
iov
 =
NULL
) {

132  
NGX_CHAIN_ERROR
;

135 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

136 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

139 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

140 
hódî_size
 +
size
;

141 
£nd
 +
size
;

145 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

146 
fûe
 = 
˛
->
buf
;

151 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

153 i‡(
£nd
 + 
size
 > 
limô
) {

154 
size
 = 
limô
 - 
£nd
;

156 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

157 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

159 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

160 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

164 
fûe_size
 +
size
;

165 
£nd
 +
size
;

166 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

167 
˛
 = cl->
√xt
;

169 } 
˛


170 && 
˛
->
buf
->
ö_fûe


171 && 
£nd
 < 
limô


172 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

173 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

176 i‡(
fûe
 && 
hódî
.
√…s
 == 0) {

180 
¥ev
 = 
NULL
;

181 
iov
 = 
NULL
;

183 
˛
 && 
£nd
 < 
limô
) {

185 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

186 
˛
 = cl->
√xt
;

190 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

194 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

196 i‡(
£nd
 + 
size
 > 
limô
) {

197 
size
 = 
limô
 - 
£nd
;

200 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

201 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

204 i‡(
åaûî
.
√…s
 >
IOV_MAX
) {

208 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

209 i‡(
iov
 =
NULL
) {

210  
NGX_CHAIN_ERROR
;

213 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

214 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

217 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

218 
£nd
 +
size
;

219 
˛
 = cl->
√xt
;

223 i‡(
fûe
) {

230 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

231 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

232 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

233 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

235 
£¡
 = 
hódî_size
 + 
fûe_size
;

237 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

239 
fûe
->
fûe_pos
, 
£¡
, 
hódî_size
);

241 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

242 &
£¡
, &
hdå
, 0);

244 i‡(
rc
 == -1) {

245 
îr
 = 
ngx_î∫o
;

247 
îr
) {

248 
NGX_EAGAIN
:

251 
NGX_EINTR
:

252 
eöå
 = 1;

256 
wev
->
îr‹
 = 1;

257 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

258  
NGX_CHAIN_ERROR
;

261 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

262 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

265 i‡(
rc
 =0 && 
£¡
 == 0) {

273 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

275 
fûe
->fûe->
«me
.
d©a
);

277  
NGX_CHAIN_ERROR
;

280 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

282 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

285 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

287 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

288 "wrôev: %d o‡%uz", 
rc
, 
£nd
);

290 i‡(
rc
 == -1) {

291 
îr
 = 
ngx_î∫o
;

293 
îr
) {

294 
NGX_EAGAIN
:

297 
NGX_EINTR
:

298 
eöå
 = 1;

302 
wev
->
îr‹
 = 1;

303 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

304  
NGX_CHAIN_ERROR
;

307 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

311 
£¡
 = 
rc
 > 0 ?Ñc : 0;

314 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

315 
com∂ëe
 = 1;

318 
c
->
£¡
 += sent;

320  ; 
ö
; i¿ö->
√xt
) {

322 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

326 i‡(
£¡
 == 0) {

330 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

332 i‡(
£¡
 >
size
) {

333 
£¡
 -
size
;

335 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

336 
ö
->
buf
->
pos
 = in->buf->
œ°
;

339 i‡(
ö
->
buf
->
ö_fûe
) {

340 
ö
->
buf
->
fûe_pos
 = in->buf->
fûe_œ°
;

346 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

347 
ö
->
buf
->
pos
 +(
size_t
Ë
£¡
;

350 i‡(
ö
->
buf
->
ö_fûe
) {

351 
ö
->
buf
->
fûe_pos
 +
£¡
;

357 i‡(
eöå
) {

361 i‡(!
com∂ëe
) {

362 
wev
->
ªady
 = 0;

363  
ö
;

366 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

367  
ö
;

370 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_errno.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

28 
ngx_°r_t
 *
	gngx_sys_îæi°
;

29 
ngx_°r_t
 
	gngx_unknown_îr‹
 = 
ngx_°rög
("UnknownÉrror");

32 
u_ch¨
 *

33 
	$ngx_°ªº‹
(
ngx_îr_t
 
îr
, 
u_ch¨
 *
îr°r
, 
size_t
 
size
)

35 
ngx_°r_t
 *
msg
;

37 
msg
 = ((
ngx_uöt_t
Ë
îr
 < 
NGX_SYS_NERR
Ë? &
ngx_sys_îæi°
[err]:

38 &
ngx_unknown_îr‹
;

39 
size
 = 
	`ngx_mö
(size, 
msg
->
Àn
);

41  
	`ngx_˝ymem
(
îr°r
, 
msg
->
d©a
, 
size
);

42 
	}
}

45 
ngx_öt_t


46 
	$ngx_°ªº‹_öô
()

48 *
msg
;

49 
u_ch¨
 *
p
;

50 
size_t
 
Àn
;

51 
ngx_îr_t
 
îr
;

58 
Àn
 = 
NGX_SYS_NERR
 * (
ngx_°r_t
);

60 
ngx_sys_îæi°
 = 
	`mÆloc
(
Àn
);

61 i‡(
ngx_sys_îæi°
 =
NULL
) {

62 
Áûed
;

65 
îr
 = 0;Éº < 
NGX_SYS_NERR
;Érr++) {

66 
msg
 = 
	`°ªº‹
(
îr
);

67 
Àn
 = 
	`ngx_°æí
(
msg
);

69 
p
 = 
	`mÆloc
(
Àn
);

70 i‡(
p
 =
NULL
) {

71 
Áûed
;

74 
	`ngx_mem˝y
(
p
, 
msg
, 
Àn
);

75 
ngx_sys_îæi°
[
îr
].
Àn
 =Üen;

76 
ngx_sys_îæi°
[
îr
].
d©a
 = 
p
;

79  
NGX_OK
;

81 
Áûed
:

83 
îr
 = 
î∫o
;

84 
	`ngx_log_°dîr
(0, "mÆloc(%uzËÁûed (%d: %s)", 
Àn
, 
îr
, 
	`°ªº‹
(err));

86  
NGX_ERROR
;

87 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_errno.h

8 #i‚de‡
_NGX_ERRNO_H_INCLUDED_


9 
	#_NGX_ERRNO_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_îr_t
;

18 
	#NGX_EPERM
 
EPERM


	)

19 
	#NGX_ENOENT
 
ENOENT


	)

20 
	#NGX_ENOPATH
 
ENOENT


	)

21 
	#NGX_ESRCH
 
ESRCH


	)

22 
	#NGX_EINTR
 
EINTR


	)

23 
	#NGX_ECHILD
 
ECHILD


	)

24 
	#NGX_ENOMEM
 
ENOMEM


	)

25 
	#NGX_EACCES
 
EACCES


	)

26 
	#NGX_EBUSY
 
EBUSY


	)

27 
	#NGX_EEXIST
 
EEXIST


	)

28 
	#NGX_EXDEV
 
EXDEV


	)

29 
	#NGX_ENOTDIR
 
ENOTDIR


	)

30 
	#NGX_EISDIR
 
EISDIR


	)

31 
	#NGX_EINVAL
 
EINVAL


	)

32 
	#NGX_ENFILE
 
ENFILE


	)

33 
	#NGX_EMFILE
 
EMFILE


	)

34 
	#NGX_ENOSPC
 
ENOSPC


	)

35 
	#NGX_EPIPE
 
EPIPE


	)

36 
	#NGX_EINPROGRESS
 
EINPROGRESS


	)

37 
	#NGX_ENOPROTOOPT
 
ENOPROTOOPT


	)

38 
	#NGX_EOPNOTSUPP
 
EOPNOTSUPP


	)

39 
	#NGX_EADDRINUSE
 
EADDRINUSE


	)

40 
	#NGX_ECONNABORTED
 
ECONNABORTED


	)

41 
	#NGX_ECONNRESET
 
ECONNRESET


	)

42 
	#NGX_ENOTCONN
 
ENOTCONN


	)

43 
	#NGX_ETIMEDOUT
 
ETIMEDOUT


	)

44 
	#NGX_ECONNREFUSED
 
ECONNREFUSED


	)

45 
	#NGX_ENAMETOOLONG
 
ENAMETOOLONG


	)

46 
	#NGX_ENETDOWN
 
ENETDOWN


	)

47 
	#NGX_ENETUNREACH
 
ENETUNREACH


	)

48 
	#NGX_EHOSTDOWN
 
EHOSTDOWN


	)

49 
	#NGX_EHOSTUNREACH
 
EHOSTUNREACH


	)

50 
	#NGX_ENOSYS
 
ENOSYS


	)

51 
	#NGX_ECANCELED
 
ECANCELED


	)

52 
	#NGX_EILSEQ
 
EILSEQ


	)

53 
	#NGX_ENOMOREFILES
 0

	)

54 
	#NGX_ELOOP
 
ELOOP


	)

55 
	#NGX_EBADF
 
EBADF


	)

57 #i‡(
NGX_HAVE_OPENAT
)

58 
	#NGX_EMLINK
 
EMLINK


	)

61 #i‡(
__hpux__
)

62 
	#NGX_EAGAIN
 
EWOULDBLOCK


	)

64 
	#NGX_EAGAIN
 
EAGAIN


	)

68 
	#ngx_î∫o
 
î∫o


	)

69 
	#ngx_sockë_î∫o
 
î∫o


	)

70 
	#ngx_£t_î∫o
(
îr
Ë
î∫o
 = 
	)
îr

71 
	#ngx_£t_sockë_î∫o
(
îr
Ë
î∫o
 = 
	)
îr

74 
u_ch¨
 *
ngx_°ªº‹
(
ngx_îr_t
 
îr
, u_ch¨ *
îr°r
, 
size_t
 
size
);

75 
ngx_öt_t
 
ngx_°ªº‹_öô
();

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_file_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

31 
ngx_kqueue
;

34 
ssize_t
 
ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
,

35 
ngx_evít_t
 *
ev
);

36 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

39 
ssize_t


40 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

41 
ngx_poﬁ_t
 *
poﬁ
)

43 
n
;

44 
ngx_evít_t
 *
ev
;

45 
ngx_evít_aio_t
 *
aio
;

47 i‡(!
ngx_fûe_aio
) {

48  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

51 
aio
 = 
fûe
->aio;

53 i‡(
aio
 =
NULL
) {

54 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

55 i‡(
aio
 =
NULL
) {

56  
NGX_ERROR
;

59 
aio
->
fûe
 = file;

60 
aio
->
fd
 = 
fûe
->fd;

61 
aio
->
evít
.
d©a
 =áio;

62 
aio
->
evít
.
ªady
 = 1;

63 
aio
->
evít
.
log
 = 
fûe
->log;

64 #i‡(
NGX_HAVE_AIO_SENDFILE
)

65 
aio
->
œ°_off£t
 = -1;

67 
fûe
->
aio
 =áio;

70 
ev
 = &
aio
->
evít
;

72 i‡(!
ev
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

74 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

75  
NGX_AGAIN
;

78 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

80 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

82 i‡(
ev
->
com∂ëe
) {

83 
ev
->
com∂ëe
 = 0;

84 
	`ngx_£t_î∫o
(
aio
->
îr
);

86 i‡(
aio
->
îr
 == 0) {

87  
aio
->
nbyãs
;

90 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

91 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

93  
NGX_ERROR
;

96 
	`ngx_memzîo
(&
aio
->
aiocb
, (aiocb));

98 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

99 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

100 
aio
->
aiocb
.
aio_buf
 = 
buf
;

101 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

102 #i‡(
NGX_HAVE_KQUEUE
)

103 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

104 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

105 
aio
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = 
ev
;

107 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

109 
n
 = 
	`aio_ªad
(&
aio
->
aiocb
);

111 i‡(
n
 == -1) {

112 
n
 = 
ngx_î∫o
;

114 i‡(
n
 =
NGX_EAGAIN
) {

115  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

118 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
n
,

119 "aio_ªad(\"%V\"ËÁûed", &
fûe
->
«me
);

121 i‡(
n
 =
NGX_ENOSYS
) {

122 
ngx_fûe_aio
 = 0;

123  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

126  
NGX_ERROR
;

129 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

130 "aio_ªad: fd:%d %d", 
fûe
->
fd
, 
n
);

132 
ev
->
a˘ive
 = 1;

133 
ev
->
ªady
 = 0;

134 
ev
->
com∂ëe
 = 0;

136  
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
);

137 
	}
}

140 
ssize_t


141 
	$ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
, 
ngx_evít_t
 *
ev
)

143 
n
;

144 
ngx_îr_t
 
îr
;

146 
n
 = 
	`aio_îr‹
(&
aio
->
aiocb
);

148 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

149 "aio_îr‹: fd:%d %d", 
fûe
->
fd
, 
n
);

151 i‡(
n
 == -1) {

152 
îr
 = 
ngx_î∫o
;

153 
aio
->
îr
 =Érr;

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
îr
,

156 "aio_îr‹(\"%V\"ËÁûed", &
fûe
->
«me
);

157  
NGX_ERROR
;

160 i‡(
n
 =
NGX_EINPROGRESS
) {

161 i‡(
ev
->
ªady
) {

162 
ev
->
ªady
 = 0;

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
n
,

165 &
fûe
->
«me
);

168  
NGX_AGAIN
;

171 
n
 = 
	`aio_ªtu∫
(&
aio
->
aiocb
);

173 i‡(
n
 == -1) {

174 
îr
 = 
ngx_î∫o
;

175 
aio
->
îr
 =Érr;

176 
ev
->
ªady
 = 1;

178 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

179 "aio_ªtu∫(\"%V\"ËÁûed", &
fûe
->
«me
);

180  
NGX_ERROR
;

183 
aio
->
îr
 = 0;

184 
aio
->
nbyãs
 = 
n
;

185 
ev
->
ªady
 = 1;

186 
ev
->
a˘ive
 = 0;

188 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

189 "aio_ªtu∫: fd:%d %d", 
fûe
->
fd
, 
n
);

191  
n
;

192 
	}
}

196 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

198 
ngx_evít_aio_t
 *
aio
;

200 
aio
 = 
ev
->
d©a
;

202 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

203 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

205 i‡(
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
Ë!
NGX_AGAIN
) {

206 
aio
->
	`h™dÀr
(
ev
);

208 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_files.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_FILE_AIO
)

14 
ngx_uöt_t
 
	gngx_fûe_aio
 = 1;

19 
ssize_t


20 
	$ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

22 
ssize_t
 
n
;

24 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

25 "ªad: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

27 #i‡(
NGX_HAVE_PREAD
)

29 
n
 = 
	`¥ód
(
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

31 i‡(
n
 == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

33 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

34  
NGX_ERROR
;

39 i‡(
fûe
->
sys_off£t
 !
off£t
) {

40 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

41 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

42 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

43  
NGX_ERROR
;

46 
fûe
->
sys_off£t
 = 
off£t
;

49 
n
 = 
	`ªad
(
fûe
->
fd
, 
buf
, 
size
);

51 i‡(
n
 == -1) {

52 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

53 "ªad(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

54  
NGX_ERROR
;

57 
fûe
->
sys_off£t
 +
n
;

61 
fûe
->
off£t
 +
n
;

63  
n
;

64 
	}
}

67 
ssize_t


68 
	$ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

70 
ssize_t
 
n
, 
wrôãn
;

72 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

73 "wrôe: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

75 
wrôãn
 = 0;

77 #i‡(
NGX_HAVE_PWRITE
)

80 
n
 = 
	`pwrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
, 
off£t
);

82 i‡(
n
 == -1) {

83 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

84 "pwrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

85  
NGX_ERROR
;

88 
fûe
->
off£t
 +
n
;

89 
wrôãn
 +
n
;

91 i‡((
size_t
Ë
n
 =
size
) {

92  
wrôãn
;

95 
off£t
 +
n
;

96 
size
 -
n
;

101 i‡(
fûe
->
sys_off£t
 !
off£t
) {

102 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

103 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

104 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

105  
NGX_ERROR
;

108 
fûe
->
sys_off£t
 = 
off£t
;

112 
n
 = 
	`wrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
);

114 i‡(
n
 == -1) {

115 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

116 "wrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

117  
NGX_ERROR
;

120 
fûe
->
off£t
 +
n
;

121 
wrôãn
 +
n
;

123 i‡((
size_t
Ë
n
 =
size
) {

124  
wrôãn
;

127 
size
 -
n
;

130 
	}
}

133 
ngx_fd_t


134 
	$ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
ac˚ss
)

136 
ngx_fd_t
 
fd
;

138 
fd
 = 
	`›í
((c⁄° *Ë
«me
, 
O_CREAT
|
O_EXCL
|
O_RDWR
,

139 
ac˚ss
 ?áccess : 0600);

141 i‡(
fd
 !-1 && !
≥rsi°ít
) {

142 (Ë
	`u∆ök
((c⁄° *Ë
«me
);

145  
fd
;

146 
	}
}

149 
	#NGX_IOVS
 8

	)

151 
ssize_t


152 
	$ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
, 
off_t
 
off£t
,

153 
ngx_poﬁ_t
 *
poﬁ
)

155 
u_ch¨
 *
¥ev
;

156 
size_t
 
size
;

157 
ssize_t
 
tŸÆ
, 
n
;

158 
ngx_¨øy_t
 
vec
;

159 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

163 i‡(
˛
->
√xt
 =
NULL
) {

164  
	`ngx_wrôe_fûe
(
fûe
, 
˛
->
buf
->
pos
,

165 (
size_t
Ë(
˛
->
buf
->
œ°
 - cl->buf->
pos
),

166 
off£t
);

169 
tŸÆ
 = 0;

171 
vec
.
ñts
 = 
iovs
;

172 
vec
.
size
 = (
iovec
);

173 
vec
.
«Œoc
 = 
NGX_IOVS
;

174 
vec
.
poﬁ
 =Öool;

177 
¥ev
 = 
NULL
;

178 
iov
 = 
NULL
;

179 
size
 = 0;

181 
vec
.
√…s
 = 0;

185 
˛
 && 
vec
.
√…s
 < 
IOV_MAX
) {

186 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

187 
iov
->
iov_Àn
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

190 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

191 i‡(
iov
 =
NULL
) {

192  
NGX_ERROR
;

195 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

196 
iov
->
iov_Àn
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

199 
size
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

200 
¥ev
 = 
˛
->
buf
->
œ°
;

201 
˛
 = cl->
√xt
;

206 i‡(
vec
.
√…s
 == 1) {

207 
iov
 = 
vec
.
ñts
;

209 
n
 = 
	`ngx_wrôe_fûe
(
fûe
, (
u_ch¨
 *Ë
iov
[0].
iov_ba£
,

210 
iov
[0].
iov_Àn
, 
off£t
);

212 i‡(
n
 =
NGX_ERROR
) {

213  
n
;

216  
tŸÆ
 + 
n
;

219 i‡(
fûe
->
sys_off£t
 !
off£t
) {

220 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

221 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

222 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

223  
NGX_ERROR
;

226 
fûe
->
sys_off£t
 = 
off£t
;

229 
n
 = 
	`wrôev
(
fûe
->
fd
, 
vec
.
ñts
, vec.
√…s
);

231 i‡(
n
 == -1) {

232 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

233 "wrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

234  
NGX_ERROR
;

237 i‡((
size_t
Ë
n
 !
size
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 0,

240 
fûe
->
«me
.
d©a
, 
n
, 
size
);

241  
NGX_ERROR
;

244 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

245 "wrôev: %d, %z", 
fûe
->
fd
, 
n
);

247 
fûe
->
sys_off£t
 +
n
;

248 
fûe
->
off£t
 +
n
;

249 
off£t
 +
n
;

250 
tŸÆ
 +
n
;

252 } 
˛
);

254  
tŸÆ
;

255 
	}
}

258 
ngx_öt_t


259 
	$ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
)

261 
timevÆ
 
tv
[2];

263 
tv
[0].
tv_£c
 = 
	`ngx_time
();

264 
tv
[0].
tv_u£c
 = 0;

265 
tv
[1].
tv_£c
 = 
s
;

266 
tv
[1].
tv_u£c
 = 0;

268 i‡(
	`utimes
((*Ë
«me
, 
tv
) != -1) {

269  
NGX_OK
;

272  
NGX_ERROR
;

273 
	}
}

276 
ngx_öt_t


277 
	$ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

279 
fm
->
fd
 = 
	`ngx_›í_fûe
(fm->
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

280 
NGX_FILE_DEFAULT_ACCESS
);

281 i‡(
fm
->
fd
 =
NGX_INVALID_FILE
) {

282 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

283 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

284  
NGX_ERROR
;

287 i‡(
	`·runˇã
(
fm
->
fd
, fm->
size
) == -1) {

288 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

289 "·runˇã(Ë\"%s\" faûed", 
fm
->
«me
);

290 
Áûed
;

293 
fm
->
addr
 = 
	`mm≠
(
NULL
, fm->
size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

294 
fm
->
fd
, 0);

295 i‡(
fm
->
addr
 !
MAP_FAILED
) {

296  
NGX_OK
;

299 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

300 "mm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

302 
Áûed
:

304 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

306 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

309  
NGX_ERROR
;

310 
	}
}

314 
	$ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

316 i‡(
	`munm≠
(
fm
->
addr
, fm->
size
) == -1) {

317 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

318 "munm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

321 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

322 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

323 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

325 
	}
}

328 
ngx_öt_t


329 
	$ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
)

331 
dú
->dú = 
	`›ídú
((c⁄° *Ë
«me
->
d©a
);

333 i‡(
dú
->dú =
NULL
) {

334  
NGX_ERROR
;

337 
dú
->
vÆid_öfo
 = 0;

339  
NGX_OK
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_ªad_dú
(
ngx_dú_t
 *
dú
)

346 
dú
->
de
 = 
	`ªaddú
(dir->dir);

348 i‡(
dú
->
de
) {

349 #i‡(
NGX_HAVE_D_TYPE
)

350 
dú
->
ty≥
 = dú->
de
->
d_ty≥
;

352 
dú
->
ty≥
 = 0;

354  
NGX_OK
;

357  
NGX_ERROR
;

358 
	}
}

361 
ngx_öt_t


362 
	$ngx_›í_glob
(
ngx_glob_t
 *
gl
)

364 
n
;

366 
n
 = 
	`glob
((*Ë
gl
->
∑âîn
, 0, 
NULL
, &gl->
pglob
);

368 i‡(
n
 == 0) {

369  
NGX_OK
;

372 #ifde‡
GLOB_NOMATCH


374 i‡(
n
 =
GLOB_NOMATCH
 && 
gl
->
ã°
) {

375  
NGX_OK
;

380  
NGX_ERROR
;

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
)

387 
size_t
 
cou¡
;

389 #ifde‡
GLOB_NOMATCH


390 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_∑thc
;

392 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_m©chc
;

395 i‡(
gl
->
n
 < 
cou¡
) {

397 
«me
->
Àn
 = (
size_t
Ë
	`ngx_°æí
(
gl
->
pglob
.
gl_∑thv
[gl->
n
]);

398 
«me
->
d©a
 = (
u_ch¨
 *Ë
gl
->
pglob
.
gl_∑thv
[gl->
n
];

399 
gl
->
n
++;

401  
NGX_OK
;

404  
NGX_DONE
;

405 
	}
}

409 
	$ngx_˛o£_glob
(
ngx_glob_t
 *
gl
)

411 
	`glob‰ì
(&
gl
->
pglob
);

412 
	}
}

415 
ngx_îr_t


416 
	$ngx_åylock_fd
(
ngx_fd_t
 
fd
)

418 
Êock
 
Ê
;

420 
	`ngx_memzîo
(&
Ê
, (
Êock
));

421 
Ê
.
l_ty≥
 = 
F_WRLCK
;

422 
Ê
.
l_whí˚
 = 
SEEK_SET
;

424 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

425  
ngx_î∫o
;

429 
	}
}

432 
ngx_îr_t


433 
	$ngx_lock_fd
(
ngx_fd_t
 
fd
)

435 
Êock
 
Ê
;

437 
	`ngx_memzîo
(&
Ê
, (
Êock
));

438 
Ê
.
l_ty≥
 = 
F_WRLCK
;

439 
Ê
.
l_whí˚
 = 
SEEK_SET
;

441 i‡(
	`f˙é
(
fd
, 
F_SETLKW
, &
Ê
) == -1) {

442  
ngx_î∫o
;

446 
	}
}

449 
ngx_îr_t


450 
	$ngx_u∆ock_fd
(
ngx_fd_t
 
fd
)

452 
Êock
 
Ê
;

454 
	`ngx_memzîo
(&
Ê
, (
Êock
));

455 
Ê
.
l_ty≥
 = 
F_UNLCK
;

456 
Ê
.
l_whí˚
 = 
SEEK_SET
;

458 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

459  
ngx_î∫o
;

463 
	}
}

466 #i‡(
NGX_HAVE_POSIX_FADVISE
Ë&& !(
NGX_HAVE_F_READAHEAD
)

468 
ngx_öt_t


469 
	$ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
)

471 
îr
;

473 
îr
 = 
	`posix_Ádvi£
(
fd
, 0, 0, 
POSIX_FADV_SEQUENTIAL
);

475 i‡(
îr
 == 0) {

479 
	`ngx_£t_î∫o
(
îr
);

480  
NGX_FILE_ERROR
;

481 
	}
}

486 #i‡(
NGX_HAVE_O_DIRECT
)

488 
ngx_öt_t


489 
	$ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
)

491 
Êags
;

493 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

495 i‡(
Êags
 == -1) {

496  
NGX_FILE_ERROR
;

499  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_DIRECT
);

500 
	}
}

503 
ngx_öt_t


504 
	$ngx_dúe˘io_off
(
ngx_fd_t
 
fd
)

506 
Êags
;

508 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

510 i‡(
Êags
 == -1) {

511  
NGX_FILE_ERROR
;

514  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_DIRECT
);

515 
	}
}

520 #i‡(
NGX_HAVE_STATFS
)

522 
size_t


523 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

525 
°©fs
 
fs
;

527 i‡(
	`°©fs
((*Ë
«me
, &
fs
) == -1) {

531 i‡((
fs
.
f_bsize
 % 512) != 0) {

535  (
size_t
Ë
fs
.
f_bsize
;

536 
	}
}

538 #ñi‡(
NGX_HAVE_STATVFS
)

540 
size_t


541 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

543 
°©vfs
 
fs
;

545 i‡(
	`°©vfs
((*Ë
«me
, &
fs
) == -1) {

549 i‡((
fs
.
f_‰size
 % 512) != 0) {

553  (
size_t
Ë
fs
.
f_‰size
;

554 
	}
}

558 
size_t


559 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

562 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_files.h

8 #i‚de‡
_NGX_FILES_H_INCLUDED_


9 
	#_NGX_FILES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_fd_t
;

17 
°©
 
	tngx_fûe_öfo_t
;

18 
öo_t
 
	tngx_fûe_uniq_t
;

22 
u_ch¨
 *
	m«me
;

23 
size_t
 
	msize
;

24 *
	maddr
;

25 
ngx_fd_t
 
	mfd
;

26 
ngx_log_t
 *
	mlog
;

27 } 
	tngx_fûe_m≠pög_t
;

31 
DIR
 *
	mdú
;

32 
dúít
 *
	mde
;

33 
°©
 
	möfo
;

35 
	mty≥
:8;

36 
	mvÆid_öfo
:1;

37 } 
	tngx_dú_t
;

41 
size_t
 
	mn
;

42 
glob_t
 
	mpglob
;

43 
u_ch¨
 *
	m∑âîn
;

44 
ngx_log_t
 *
	mlog
;

45 
ngx_uöt_t
 
	mã°
;

46 } 
	tngx_glob_t
;

49 
	#NGX_INVALID_FILE
 -1

	)

50 
	#NGX_FILE_ERROR
 -1

	)

54 #ifde‡
__CYGWIN__


56 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


57 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

60 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

61 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
|
O_BINARY
, 
ac˚ss
)

	)

65 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

66 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

70 
	#ngx_›í_fûe_n
 "›í()"

	)

72 
	#NGX_FILE_RDONLY
 
O_RDONLY


	)

73 
	#NGX_FILE_WRONLY
 
O_WRONLY


	)

74 
	#NGX_FILE_RDWR
 
O_RDWR


	)

75 
	#NGX_FILE_CREATE_OR_OPEN
 
O_CREAT


	)

76 
	#NGX_FILE_OPEN
 0

	)

77 
	#NGX_FILE_TRUNCATE
 (
O_CREAT
|
O_TRUNC
)

	)

78 
	#NGX_FILE_APPEND
 (
O_WRONLY
|
O_APPEND
)

	)

79 
	#NGX_FILE_NONBLOCK
 
O_NONBLOCK


	)

81 #i‡(
NGX_HAVE_OPENAT
)

82 
	#NGX_FILE_NOFOLLOW
 
O_NOFOLLOW


	)

84 #i‡
deföed
(
O_DIRECTORY
)

85 
	#NGX_FILE_DIRECTORY
 
O_DIRECTORY


	)

87 
	#NGX_FILE_DIRECTORY
 0

	)

90 #i‡
deföed
(
O_SEARCH
)

91 
	#NGX_FILE_SEARCH
 (
O_SEARCH
|
NGX_FILE_DIRECTORY
)

	)

93 #ñi‡
deföed
(
O_EXEC
)

94 
	#NGX_FILE_SEARCH
 (
O_EXEC
|
NGX_FILE_DIRECTORY
)

	)

96 #ñi‡(
NGX_HAVE_O_PATH
)

97 
	#NGX_FILE_SEARCH
 (
O_PATH
|
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

100 
	#NGX_FILE_SEARCH
 (
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

105 
	#NGX_FILE_DEFAULT_ACCESS
 0644

	)

106 
	#NGX_FILE_OWNER_ACCESS
 0600

	)

109 
	#ngx_˛o£_fûe
 
˛o£


	)

110 
	#ngx_˛o£_fûe_n
 "˛o£()"

	)

113 
	#ngx_dñëe_fûe
(
«me
Ë
	`u∆ök
((c⁄° *Ë«me)

	)

114 
	#ngx_dñëe_fûe_n
 "u∆ök()"

	)

117 
ngx_fd_t
 
ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,

118 
ngx_uöt_t
 
ac˚ss
);

119 
	#ngx_›í_ãmpfûe_n
 "›í()"

	)

122 
ssize_t
 
ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
);

123 #i‡(
NGX_HAVE_PREAD
)

124 
	#ngx_ªad_fûe_n
 "¥ód()"

	)

126 
	#ngx_ªad_fûe_n
 "ªad()"

	)

129 
ssize_t
 
ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

130 
off_t
 
off£t
);

132 
ssize_t
 
ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˚
,

133 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

136 
	#ngx_ªad_fd
 
ªad


	)

137 
	#ngx_ªad_fd_n
 "ªad()"

	)

144 
ngx_ölöe
 
ssize_t


145 
	$ngx_wrôe_fd
(
ngx_fd_t
 
fd
, *
buf
, 
size_t
 
n
)

147  
	`wrôe
(
fd
, 
buf
, 
n
);

148 
	}
}

150 
	#ngx_wrôe_fd_n
 "wrôe()"

	)

153 
	#ngx_wrôe_c⁄sﬁe
 
ngx_wrôe_fd


	)

156 
	#ngx_löe„ed
(
p
Ë*p++ = 
LF
;

	)

157 
	#NGX_LINEFEED_SIZE
 1

	)

158 
	#NGX_LINEFEED
 "\x0a"

	)

161 
	#ngx_ª«me_fûe
(
o
, 
n
Ë
	`ª«me
((c⁄° *Ëo, (c⁄° *Ën)

	)

162 
	#ngx_ª«me_fûe_n
 "ª«me()"

	)

165 
	#ngx_ch™ge_fûe_ac˚ss
(
n
, 
a
Ë
	`chmod
((c⁄° *Ën,á)

	)

166 
	#ngx_ch™ge_fûe_ac˚ss_n
 "chmod()"

	)

169 
ngx_öt_t
 
ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
);

170 
	#ngx_£t_fûe_time_n
 "utimes()"

	)

173 
	#ngx_fûe_öfo
(
fûe
, 
sb
Ë
	`°©
((c⁄° *Ëfûe, sb)

	)

174 
	#ngx_fûe_öfo_n
 "°©()"

	)

176 
	#ngx_fd_öfo
(
fd
, 
sb
Ë
	`f°©
(fd, sb)

	)

177 
	#ngx_fd_öfo_n
 "f°©()"

	)

179 
	#ngx_lök_öfo
(
fûe
, 
sb
Ë
	`l°©
((c⁄° *Ëfûe, sb)

	)

180 
	#ngx_lök_öfo_n
 "l°©()"

	)

182 
	#ngx_is_dú
(
sb
Ë(
	`S_ISDIR
((sb)->
°_mode
))

	)

183 
	#ngx_is_fûe
(
sb
Ë(
	`S_ISREG
((sb)->
°_mode
))

	)

184 
	#ngx_is_lök
(
sb
Ë(
	`S_ISLNK
((sb)->
°_mode
))

	)

185 
	#ngx_is_exec
(
sb
Ë(((sb)->
°_mode
 & 
S_IXUSR
Ë=S_IXUSR)

	)

186 
	#ngx_fûe_ac˚ss
(
sb
Ë((sb)->
°_mode
 & 0777)

	)

187 
	#ngx_fûe_size
(
sb
Ë(sb)->
°_size


	)

188 
	#ngx_fûe_fs_size
(
sb
Ë
	`ngx_max
((sb)->
°_size
, (sb)->
°_blocks
 * 512)

	)

189 
	#ngx_fûe_mtime
(
sb
Ë(sb)->
°_mtime


	)

190 
	#ngx_fûe_uniq
(
sb
Ë(sb)->
°_öo


	)

193 
ngx_öt_t
 
ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

194 
ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

197 
	#ngx_ªÆ∑th
(
p
, 
r
Ë(
u_ch¨
 *Ë
	`ªÆ∑th
((*Ëp, (*Ër)

	)

198 
	#ngx_ªÆ∑th_n
 "ªÆ∑th()"

	)

199 
	#ngx_gëcwd
(
buf
, 
size
Ë(
	`gëcwd
((*Ëbuf, sizeË!
NULL
)

	)

200 
	#ngx_gëcwd_n
 "gëcwd()"

	)

201 
	#ngx_∑th_£∑øt‹
(
c
Ë((cË='/')

	)

204 #i‡
deföed
(
PATH_MAX
)

206 
	#NGX_HAVE_MAX_PATH
 1

	)

207 
	#NGX_MAX_PATH
 
PATH_MAX


	)

211 
	#NGX_MAX_PATH
 4096

	)

216 
	#NGX_DIR_MASK_LEN
 0

	)

219 
ngx_öt_t
 
ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
);

220 
	#ngx_›í_dú_n
 "›ídú()"

	)

223 
	#ngx_˛o£_dú
(
d
Ë
	`˛o£dú
((d)->
dú
)

	)

224 
	#ngx_˛o£_dú_n
 "˛o£dú()"

	)

227 
ngx_öt_t
 
ngx_ªad_dú
(
ngx_dú_t
 *
dú
);

228 
	#ngx_ªad_dú_n
 "ªaddú()"

	)

231 
	#ngx_¸óã_dú
(
«me
, 
ac˚ss
Ë
	`mkdú
((c⁄° *Ë«me,ác˚ss)

	)

232 
	#ngx_¸óã_dú_n
 "mkdú()"

	)

235 
	#ngx_dñëe_dú
(
«me
Ë
	`rmdú
((c⁄° *Ë«me)

	)

236 
	#ngx_dñëe_dú_n
 "rmdú()"

	)

239 
	#ngx_dú_ac˚ss
(
a
Ë◊ | (®& 0444Ë>> 2)

	)

242 
	#ngx_de_«me
(
dú
Ë((
u_ch¨
 *Ë(dú)->
de
->
d_«me
)

	)

243 #i‡(
NGX_HAVE_D_NAMLEN
)

244 
	#ngx_de_«mñí
(
dú
Ë(dú)->
de
->
d_«mÀn


	)

246 
	#ngx_de_«mñí
(
dú
Ë
	`ngx_°æí
((dú)->
de
->
d_«me
)

	)

249 
ngx_ölöe
 
ngx_öt_t


250 
	$ngx_de_öfo
(
u_ch¨
 *
«me
, 
ngx_dú_t
 *
dú
)

252 
dú
->
ty≥
 = 0;

253  
	`°©
((c⁄° *Ë
«me
, &
dú
->
öfo
);

254 
	}
}

256 
	#ngx_de_öfo_n
 "°©()"

	)

257 
	#ngx_de_lök_öfo
(
«me
, 
dú
Ë
	`l°©
((c⁄° *Ë«me, &(dú)->
öfo
)

	)

258 
	#ngx_de_lök_öfo_n
 "l°©()"

	)

260 #i‡(
NGX_HAVE_D_TYPE
)

267 
	#ngx_de_is_dú
(
dú
) \

268 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_DIR
Ë: (
	`S_ISDIR
((dú)->
öfo
.
°_mode
)))

	)

269 
	#ngx_de_is_fûe
(
dú
) \

270 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_REG
Ë: (
	`S_ISREG
((dú)->
öfo
.
°_mode
)))

	)

271 
	#ngx_de_is_lök
(
dú
) \

272 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_LNK
Ë: (
	`S_ISLNK
((dú)->
öfo
.
°_mode
)))

	)

276 
	#ngx_de_is_dú
(
dú
Ë(
	`S_ISDIR
((dú)->
öfo
.
°_mode
))

	)

277 
	#ngx_de_is_fûe
(
dú
Ë(
	`S_ISREG
((dú)->
öfo
.
°_mode
))

	)

278 
	#ngx_de_is_lök
(
dú
Ë(
	`S_ISLNK
((dú)->
öfo
.
°_mode
))

	)

282 
	#ngx_de_ac˚ss
(
dú
Ë(((dú)->
öfo
.
°_mode
Ë& 0777)

	)

283 
	#ngx_de_size
(
dú
Ë(dú)->
öfo
.
°_size


	)

284 
	#ngx_de_fs_size
(
dú
) \

285 
	`ngx_max
((
dú
)->
öfo
.
°_size
, (dú)->öfo.
°_blocks
 * 512)

	)

286 
	#ngx_de_mtime
(
dú
Ë(dú)->
öfo
.
°_mtime


	)

289 
ngx_öt_t
 
ngx_›í_glob
(
ngx_glob_t
 *
gl
);

290 
	#ngx_›í_glob_n
 "glob()"

	)

291 
ngx_öt_t
 
ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
);

292 
ngx_˛o£_glob
(
ngx_glob_t
 *
gl
);

295 
ngx_îr_t
 
ngx_åylock_fd
(
ngx_fd_t
 
fd
);

296 
ngx_îr_t
 
ngx_lock_fd
(
ngx_fd_t
 
fd
);

297 
ngx_îr_t
 
ngx_u∆ock_fd
(
ngx_fd_t
 
fd
);

299 
	#ngx_åylock_fd_n
 "f˙é(F_SETLK, F_WRLCK)"

	)

300 
	#ngx_lock_fd_n
 "f˙é(F_SETLKW, F_WRLCK)"

	)

301 
	#ngx_u∆ock_fd_n
 "f˙é(F_SETLK, F_UNLCK)"

	)

304 #i‡(
NGX_HAVE_F_READAHEAD
)

306 
	#NGX_HAVE_READ_AHEAD
 1

	)

308 
	#ngx_ªad_ahód
(
fd
, 
n
Ë
	`f˙é
(fd, 
F_READAHEAD
, (Ën)

	)

309 
	#ngx_ªad_ahód_n
 "f˙é(fd, F_READAHEAD)"

	)

311 #ñi‡(
NGX_HAVE_POSIX_FADVISE
)

313 
	#NGX_HAVE_READ_AHEAD
 1

	)

315 
ngx_öt_t
 
ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
);

316 
	#ngx_ªad_ahód_n
 "posix_Ádvi£(POSIX_FADV_SEQUENTIAL)"

	)

320 
	#ngx_ªad_ahód
(
fd
, 
n
Ë0

	)

321 
	#ngx_ªad_ahód_n
 "ngx_ªad_ahód_n"

	)

326 #i‡(
NGX_HAVE_O_DIRECT
)

328 
ngx_öt_t
 
ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
);

329 
	#ngx_dúe˘io_⁄_n
 "f˙é(O_DIRECT)"

	)

331 
ngx_öt_t
 
ngx_dúe˘io_off
(
ngx_fd_t
 
fd
);

332 
	#ngx_dúe˘io_off_n
 "f˙é(!O_DIRECT)"

	)

334 #ñi‡(
NGX_HAVE_F_NOCACHE
)

336 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`f˙é
(fd, 
F_NOCACHE
, 1)

	)

337 
	#ngx_dúe˘io_⁄_n
 "f˙é(F_NOCACHE, 1)"

	)

339 #ñi‡(
NGX_HAVE_DIRECTIO
)

341 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`dúe˘io
(fd, 
DIRECTIO_ON
)

	)

342 
	#ngx_dúe˘io_⁄_n
 "dúe˘io(DIRECTIO_ON)"

	)

346 
	#ngx_dúe˘io_⁄
(
fd
Ë0

	)

347 
	#ngx_dúe˘io_⁄_n
 "ngx_dúe˘io_⁄_n"

	)

351 
size_t
 
ngx_fs_bsize
(
u_ch¨
 *
«me
);

354 #i‡(
NGX_HAVE_OPENAT
)

356 
	#ngx_›í©_fûe
(
fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

357 
	`›í©
(
fd
, (c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

359 
	#ngx_›í©_fûe_n
 "›í©()"

	)

361 
	#ngx_fûe_©_öfo
(
fd
, 
«me
, 
sb
, 
Êag
) \

362 
	`f°©©
(
fd
, (c⁄° *Ë
«me
, 
sb
, 
Êag
)

	)

364 
	#ngx_fûe_©_öfo_n
 "f°©©()"

	)

366 
	#NGX_AT_FDCWD
 (
ngx_fd_t
Ë
AT_FDCWD


	)

371 
	#ngx_°dîr
 
STDERR_FILENO


	)

372 
	#ngx_£t_°dîr
(
fd
Ë
	`dup2
(fd, 
STDERR_FILENO
)

	)

373 
	#ngx_£t_°dîr_n
 "dup2(STDERR_FILENO)"

	)

376 #i‡(
NGX_HAVE_FILE_AIO
)

378 
ssize_t
 
ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

379 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

381 
ngx_uöt_t
 
ngx_fûe_aio
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd.h

8 #i‚de‡
_NGX_FREEBSD_H_INCLUDED_


9 
	#_NGX_FREEBSD_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_‰ìbsd_kîn_o§ñd©e
;

17 
ngx_‰ìbsd_hw_n˝u
;

18 
u_l⁄g
 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
;

21 
ngx_uöt_t
 
ngx_‰ìbsd_u£_t˝_n›ush
;

22 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_config.h

8 #i‚de‡
_NGX_FREEBSD_CONFIG_H_INCLUDED_


9 
	#_NGX_FREEBSD_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

16 
	~<°ddef.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<˘y≥.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<sig«l.h
>

23 
	~<pwd.h
>

24 
	~<gΩ.h
>

25 
	~<dúít.h
>

26 
	~<glob.h
>

27 
	~<time.h
>

28 
	~<sys/∑øm.h
>

29 
	~<sys/mou¡.h
>

31 
	~<sys/fûio.h
>

32 
	~<sys/uio.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

36 
	~<sys/waô.h
>

37 
	~<sys/mm™.h
>

38 
	~<sys/ªsour˚.h
>

39 
	~<sched.h
>

41 
	~<sys/sockë.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/t˝.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√tdb.h
>

46 
	~<sys/un.h
>

48 
	~<libutû.h
>

49 
	~<o§ñd©e.h
>

50 
	~<sys/sys˘l.h
>

53 #i‡
__FªeBSD_vîsi⁄
 < 400017

59 #unde‡
CMSG_SPACE


60 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

62 #unde‡
CMSG_LEN


63 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

65 #unde‡
CMSG_DATA


66 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

71 
	~<ngx_auto_c⁄fig.h
>

74 #i‡(
NGX_HAVE_POSIX_SEM
)

75 
	~<£m≠h‹e.h
>

79 #i‡(
NGX_HAVE_POLL
)

80 
	~<pﬁl.h
>

84 #i‡(
NGX_HAVE_KQUEUE
)

85 
	~<sys/evít.h
>

89 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_HAVE_AIO
)

90 
	~<aio.h
>

91 
aiocb
 
	tngx_aiocb_t
;

95 
	#NGX_LISTEN_BACKLOG
 -1

	)

98 #ifde‡
__Døg⁄Fly__


99 
	#NGX_KEEPALIVE_FACTOR
 1000

	)

103 #i‡(
__FªeBSD_vîsi⁄
 < 430000 || __FreeBSD_version < 500012)

105 
pid_t
 
rf‹k_thªad
(
Êags
, *
°ack
, (*
func
)(*
¨g
), *arg);

109 #i‚de‡
IOV_MAX


110 
	#IOV_MAX
 1024

	)

114 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


115 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

119 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

120 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

123 **
ívú⁄
;

124 *
mÆloc_›ti⁄s
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	gngx_‰ìbsd_kîn_o°y≥
[16];

14 
	gngx_‰ìbsd_kîn_o§ñó£
[128];

15 
	gngx_‰ìbsd_kîn_o§ñd©e
;

16 
	gngx_‰ìbsd_hw_n˝u
;

17 
	gngx_‰ìbsd_kîn_ùc_somaxc⁄n
;

18 
u_l⁄g
 
	gngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

21 
	gngx_‰ìbsd_machdï_h…_logiˇl_˝us
;

24 
ngx_uöt_t
 
	gngx_‰ìbsd_£ndfûe_nbyãs_bug
;

25 
ngx_uöt_t
 
	gngx_‰ìbsd_u£_t˝_n›ush
;

27 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

30 
ngx_os_io_t
 
	gngx_‰ìbsd_io
 = {

31 
ngx_unix_ªcv
,

32 
ngx_ªadv_chaö
,

33 
ngx_udp_unix_ªcv
,

34 
ngx_unix_£nd
,

35 #i‡(
NGX_HAVE_SENDFILE
)

36 
ngx_‰ìbsd_£ndfûe_chaö
,

37 
NGX_IO_SENDFILE


39 
ngx_wrôev_chaö
,

46 *
	m«me
;

47 *
	mvÆue
;

48 
size_t
 
	msize
;

49 
ngx_uöt_t
 
	mexi°s
;

50 } 
	tsys˘l_t
;

53 
sys˘l_t
 
	gsys˘ls
[] = {

55 &
ngx_‰ìbsd_hw_n˝u
,

56 (
ngx_‰ìbsd_hw_n˝u
), 0 },

59 &
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
,

60 (
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
), 0 },

63 &
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
,

64 (
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
), 0 },

67 &
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
,

68 (
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
), 0 },

70 { 
NULL
, NULL, 0, 0 }

75 
	$ngx_debug_öô
()

77 #i‡(
NGX_DEBUG_MALLOC
)

79 #i‡
__FªeBSD_vîsi⁄
 >= 500014 && __FreeBSD_version < 1000011

80 
_mÆloc_›ti⁄s
 = "J";

81 #ñi‡
__FªeBSD_vîsi⁄
 < 500014

82 
mÆloc_›ti⁄s
 = "J";

85 
ngx_debug_mÆloc
 = 1;

88 *
mo
;

90 
mo
 = 
	`gëív
("MALLOC_OPTIONS");

92 i‡(
mo
 && 
	`ngx_°rchr
(mo, 'J')) {

93 
ngx_debug_mÆloc
 = 1;

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

102 
vîsi⁄
;

103 
size_t
 
size
;

104 
ngx_îr_t
 
îr
;

105 
ngx_uöt_t
 
i
;

107 
size
 = (
ngx_‰ìbsd_kîn_o°y≥
);

108 i‡(
	`sys˘lby«me
("kern.ostype",

109 
ngx_‰ìbsd_kîn_o°y≥
, &
size
, 
NULL
, 0) == -1) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

113 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

114  
NGX_ERROR
;

117 
ngx_‰ìbsd_kîn_o°y≥
[
size
 - 1] = '\0';

120 
size
 = (
ngx_‰ìbsd_kîn_o§ñó£
);

121 i‡(
	`sys˘lby«me
("kern.osrelease",

122 
ngx_‰ìbsd_kîn_o§ñó£
, &
size
, 
NULL
, 0) == -1) {

123 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

126 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

127  
NGX_ERROR
;

130 
ngx_‰ìbsd_kîn_o§ñó£
[
size
 - 1] = '\0';

134 
size
 = ();

135 i‡(
	`sys˘lby«me
("kern.osreldate",

136 &
ngx_‰ìbsd_kîn_o§ñd©e
, &
size
, 
NULL
, 0) == -1) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
vîsi⁄
 = 
ngx_‰ìbsd_kîn_o§ñd©e
;

145 #i‡(
NGX_HAVE_SENDFILE
)

163 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 460102) \

164 || 
__FªeBSD_vîsi⁄
 == 460002 || __FreeBSD_version >= 500039

168 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 0;

174 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 1;

181 i‡((
vîsi⁄
 < 500000 && version >= 440003) || version >= 500017) {

182 
ngx_‰ìbsd_u£_t˝_n›ush
 = 1;

186 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

187 
size
 = 
sys˘ls
[
i
].size;

189 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

192 
sys˘ls
[
i
].
exi°s
 = 1;

196 
îr
 = 
ngx_î∫o
;

198 i‡(
îr
 =
NGX_ENOENT
) {

202 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

203 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

204  
NGX_ERROR
;

207 i‡(
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
) {

208 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
 / 2;

211 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
;

214 i‡(
vîsi⁄
 < 600008 && 
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
 > 32767) {

215 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

217  
NGX_ERROR
;

220 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

222 
ngx_os_io
 = 
ngx_‰ìbsd_io
;

224  
NGX_OK
;

225 
	}
}

229 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

231 
u_l⁄g
 
vÆue
;

232 
ngx_uöt_t
 
i
;

234 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

235 
ngx_‰ìbsd_kîn_o°y≥
, 
ngx_‰ìbsd_kîn_o§ñó£
);

237 #ifde‡
__Døg⁄Fly_vîsi⁄


238 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

240 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__Døg⁄Fly_vîsi⁄
);

242 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

244 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__FªeBSD_vîsi⁄
);

247 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

248 i‡(
sys˘ls
[
i
].
exi°s
) {

249 i‡(
sys˘ls
[
i
].
size
 == ()) {

250 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

253 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

256 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

257 
sys˘ls
[
i
].
«me
, 
vÆue
);

260 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_rfork_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

35 *
	gngx_‰ìbsd_kîn_u§°ack
;

36 
size_t
 
	gngx_thªad_°ack_size
;

39 
size_t
 
	grz_size
;

40 
size_t
 
	gußbÀ_°ack_size
;

41 *
	gœ°_°ack
;

43 
ngx_uöt_t
 
	g¡hªads
;

44 
ngx_uöt_t
 
	gmax_thªads
;

46 
ngx_uöt_t
 
	gnkeys
;

47 
ngx_tid_t
 *
	gtids
;

48 **
	gngx_és
;

52 
	gî∫o0
;

53 *
	gî∫os
;

56 
	$__îr‹
()

58 
tid
;

60 
tid
 = 
	`ngx_gëtid
();

62  
tid
 ? &
î∫os
[tid - 1] : &
î∫o0
;

63 
	}
}

75 
__i°hªaded
;

78 
	$_•ölock
(
ngx_©omic_t
 *
lock
)

80 
ngx_öt_t
 
åõs
;

82 
åõs
 = 0;

86 i‡(*
lock
) {

87 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

91 
	`sched_yõld
();

92 
åõs
 = 0;

95 i‡(
	`ngx_©omic_cmp_£t
(
lock
, 0, 1)) {

100 
	}
}

111 #i‚de‡
_•öu∆ock


114 
	$_•öu∆ock
(
ngx_©omic_t
 *
lock
)

116 *
lock
 = 0;

117 
	}
}

122 
ngx_îr_t


123 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

124 *
¨g
, 
ngx_log_t
 *
log
)

126 
ngx_pid_t
 
id
;

127 
ngx_îr_t
 
îr
;

128 *
°ack
, *
°ack_t›
;

130 i‡(
¡hªads
 >
max_thªads
) {

131 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

132 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

133  
NGX_ERROR
;

136 
œ°_°ack
 -
ngx_thªad_°ack_size
;

138 
°ack
 = 
	`mm≠
(
œ°_°ack
, 
ußbÀ_°ack_size
, 
PROT_READ
|
PROT_WRITE
,

139 
MAP_STACK
, -1, 0);

141 i‡(
°ack
 =
MAP_FAILED
) {

142 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

144 
œ°_°ack
, 
ußbÀ_°ack_size
);

145  
NGX_ERROR
;

148 i‡(
°ack
 !
œ°_°ack
) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

150 "°ack %∞addªs†wa†ch™gedÅÿ%p", 
œ°_°ack
, 
°ack
);

151  
NGX_ERROR
;

154 
°ack_t›
 = 
°ack
 + 
ußbÀ_°ack_size
;

156 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

157 "thªad sèck: %p-%p", 
°ack
, 
°ack_t›
);

159 
	`ngx_£t_î∫o
(0);

161 
id
 = 
	`rf‹k_thªad
(
RFPROC
|
RFTHREAD
|
RFMEM
, 
°ack_t›
,

162 (
ngx_rf‹k_thªad_func_±
Ë
func
, 
¨g
);

164 
îr
 = 
ngx_î∫o
;

166 i‡(
id
 == -1) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "rfork() failed");

170 *
tid
 = 
id
;

171 
¡hªads
 = (
ngx_‰ìbsd_kîn_u§°ack
 - 
°ack_t›
)

172 / 
ngx_thªad_°ack_size
;

173 
tids
[
¡hªads
] = 
id
;

175 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "rf‹k(ÎdÅhªad: %P", 
id
);

178  
îr
;

179 
	}
}

182 
ngx_öt_t


183 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

185 *
ªd_z⁄e
, *
z⁄e
;

186 
size_t
 
Àn
;

187 
ngx_öt_t
 
i
;

188 
siga˘i⁄
 
ß
;

190 
max_thªads
 = 
n
 + 1;

192 
i
 = 0; i < 
n
; i++) {

193 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

194 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

195 
	`sigem±y£t
(&
ß
.
ß_mask
);

196 i‡(
	`siga˘i⁄
(
NGX_CV_SIGNAL
, &
ß
, 
NULL
) == -1) {

197 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

198 "siga˘i⁄(%d, SIG_IGNËÁûed", 
NGX_CV_SIGNAL
);

199  
NGX_ERROR
;

203 
Àn
 = (
ngx_‰ìbsd_kîn_u§°ack
);

204 i‡(
	`sys˘lby«me
("kîn.u§°ack", &
ngx_‰ìbsd_kîn_u§°ack
, &
Àn
,

205 
NULL
, 0) == -1)

207 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

209  
NGX_ERROR
;

213 
rz_size
 = 
ngx_∑gesize
;

214 
ªd_z⁄e
 = 
ngx_‰ìbsd_kîn_u§°ack
 - (
size
 + 
rz_size
);

216 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

218 
ngx_‰ìbsd_kîn_u§°ack
, 
ªd_z⁄e
);

220 
z⁄e
 = 
	`mm≠
(
ªd_z⁄e
, 
rz_size
, 
PROT_NONE
, 
MAP_ANON
, -1, 0);

221 i‡(
z⁄e
 =
MAP_FAILED
) {

222 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

224 
ªd_z⁄e
, 
rz_size
);

225  
NGX_ERROR
;

228 i‡(
z⁄e
 !
ªd_z⁄e
) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

230 "ªd z⁄ê%∞addªs†wa†ch™gedÅÿ%p", 
ªd_z⁄e
, 
z⁄e
);

231  
NGX_ERROR
;

236 
î∫os
 = 
	`ngx_ˇŒoc
(
n
 * (), 
cy˛e
->
log
);

237 i‡(
î∫os
 =
NULL
) {

238  
NGX_ERROR
;

243 
tids
 = 
	`ngx_ˇŒoc
((
n
 + 1Ë* (
ngx_tid_t
), 
cy˛e
->
log
);

244 i‡(
tids
 =
NULL
) {

245  
NGX_ERROR
;

248 
tids
[0] = 
ngx_pid
;

252 
ngx_és
 = 
	`ngx_ˇŒoc
(
NGX_THREAD_KEYS_MAX
 * (
n
 + 1) * (*),

253 
cy˛e
->
log
);

254 i‡(
ngx_és
 =
NULL
) {

255  
NGX_ERROR
;

258 
¡hªads
 = 1;

260 
œ°_°ack
 = 
z⁄e
 + 
rz_size
;

261 
ußbÀ_°ack_size
 = 
size
;

262 
ngx_thªad_°ack_size
 = 
size
 + 
rz_size
;

265 
__i°hªaded
 = 1;

267 
ngx_thªaded
 = 1;

269  
NGX_OK
;

270 
	}
}

273 
ngx_tid_t


274 
	$ngx_thªad_£lf
()

276 
ngx_öt_t
 
tid
;

278 
tid
 = 
	`ngx_gëtid
();

280 i‡(
tids
 =
NULL
) {

281  
ngx_pid
;

284  
tids
[
tid
];

285 
	}
}

288 
ngx_îr_t


289 
	$ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
)

291 i‡(
nkeys
 >
NGX_THREAD_KEYS_MAX
) {

292  
NGX_ENOMEM
;

295 *
key
 = 
nkeys
++;

298 
	}
}

301 
ngx_îr_t


302 
	$ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
)

304 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

305  
NGX_EINVAL
;

308 
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()] = 
vÆue
;

310 
	}
}

313 
ngx_muãx_t
 *

314 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

316 
ngx_muãx_t
 *
m
;

317 
£mun
 
›
;

319 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

320 i‡(
m
 =
NULL
) {

321  
NULL
;

324 
m
->
lock
 = 0;

325 
m
->
log
 =Üog;

327 i‡(
Êags
 & 
NGX_MUTEX_LIGHT
) {

328 
m
->
£mid
 = -1;

329  
m
;

332 
m
->
£mid
 = 
	`£mgë
(
IPC_PRIVATE
, 1, 
SEM_R
|
SEM_A
);

333 i‡(
m
->
£mid
 == -1) {

334 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semget() failed");

335  
NULL
;

338 
›
.
vÆ
 = 0;

340 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
SETVAL
, 
›
) == -1) {

341 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semctl(SETVAL) failed");

343 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

348  
NULL
;

351  
m
;

352 
	}
}

356 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

358 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

359 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

363 
	`ngx_‰ì
((*Ë
m
);

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
, 
ngx_öt_t
 
åy
)

370 
uöt32_t
 
lock
, 
ﬁd
;

371 
ngx_uöt_t
 
åõs
;

372 
£mbuf
 
›
;

374 i‡(!
ngx_thªaded
) {

375  
NGX_OK
;

378 #i‡(
NGX_DEBUG
)

379 i‡(
åy
) {

380 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

381 "åyÜock muãx %∞lock:%XD", 
m
, m->
lock
);

383 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

384 "lock muãx %∞lock:%XD", 
m
, m->
lock
);

388 
ﬁd
 = 
m
->
lock
;

389 
åõs
 = 0;

392 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

394 i‡(
åy
) {

395  
NGX_AGAIN
;

398 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

402 
ﬁd
 = 
m
->
lock
;

406 i‡(
m
->
£mid
 == -1) {

407 
	`sched_yõld
();

409 
åõs
 = 0;

410 
ﬁd
 = 
m
->
lock
;

414 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

415 "muãx %∞lock:%XD", 
m
, m->
lock
);

422 
lock
 = 
ﬁd
 + 1;

424 i‡((
lock
 & ~
NGX_MUTEX_LOCK_BUSY
Ë> 
¡hªads
) {

425 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

428 
lock
 & ~
NGX_MUTEX_LOCK_BUSY
, 
m
, 
¡hªads
);

429 
	`ngx_ab‹t
();

432 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

434 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

435 "waô muãx %∞lock:%XD", 
m
, m->
lock
);

444 
›
.
£m_num
 = 0;

445 
›
.
£m_›
 = -1;

446 
›
.
£m_Êg
 = 0;

448 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

450 "£m›(ËÁûed whûêwaôög o¿muãx %p", 
m
);

451 
	`ngx_ab‹t
();

454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

455 "muãx waked u∞%∞lock:%XD", 
m
, m->
lock
);

457 
åõs
 = 0;

458 
ﬁd
 = 
m
->
lock
;

462 
ﬁd
 = 
m
->
lock
;

465 
lock
 = 
ﬁd
 | 
NGX_MUTEX_LOCK_BUSY
;

467 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

474 
ﬁd
 = 
m
->
lock
;

477 i‡(
åõs
++ > 1000) {

479 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

480 "muãx %∞i†c⁄ã°ed", 
m
);

484 
	`sched_yõld
();

486 
åõs
 = 0;

487 
ﬁd
 = 
m
->
lock
;

491 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

492 "muãx %∞i†locked,Üock:%XD", 
m
, m->
lock
);

494  
NGX_OK
;

495 
	}
}

499 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

501 
uöt32_t
 
lock
, 
ﬁd
;

502 
£mbuf
 
›
;

504 i‡(!
ngx_thªaded
) {

508 
ﬁd
 = 
m
->
lock
;

510 i‡(!(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
)) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 0,

512 "åyögÅÿu∆ockÅhê‰ì muãx %p", 
m
);

513 
	`ngx_ab‹t
();

519 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

520 "u∆ock muãx %∞lock:%XD", 
m
, 
ﬁd
);

524 
lock
 = 
ﬁd
 & ~
NGX_MUTEX_LOCK_BUSY
;

526 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

530 
ﬁd
 = 
m
->
lock
;

533 i‡(
m
->
£mid
 == -1) {

534 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

535 "muãx %∞i†u∆ocked", 
m
);

542 
ﬁd
 = 
m
->
lock
;

545 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

552 i‡(
ﬁd
 == 0) {

558 
lock
 = 
ﬁd
 - 1;

560 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

564 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

565 "wakêu∞muãx %p", 
m
);

567 
›
.
£m_num
 = 0;

568 
›
.
£m_›
 = 1;

569 
›
.
£m_Êg
 = 0;

571 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

572 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

573 "£m›(ËÁûed whûêwakög u∞⁄ muãx %p", 
m
);

574 
	`ngx_ab‹t
();

580 
ﬁd
 = 
m
->
lock
;

583 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

584 "muãx %∞i†u∆ocked", 
m
);

587 
	}
}

590 
ngx_c⁄d_t
 *

591 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

593 
ngx_c⁄d_t
 *
cv
;

595 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

596 i‡(
cv
 =
NULL
) {

597  
NULL
;

600 
cv
->
signo
 = 
NGX_CV_SIGNAL
;

601 
cv
->
tid
 = -1;

602 
cv
->
log
 =Üog;

603 
cv
->
kq
 = -1;

605  
cv
;

606 
	}
}

610 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

612 i‡(
	`˛o£
(
cv
->
kq
) == -1) {

613 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
,

617 
	`ngx_‰ì
(
cv
);

618 
	}
}

621 
ngx_öt_t


622 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

624 
n
;

625 
ngx_îr_t
 
îr
;

626 
kevít
 
kev
;

627 
time•ec
 
ts
;

629 i‡(
cv
->
kq
 == -1) {

639 
cv
->
kq
 = 
	`kqueue
();

640 i‡(
cv
->
kq
 == -1) {

641 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kqueue() failed");

642  
NGX_ERROR
;

645 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

646 "cv kq:%d signo:%d", 
cv
->
kq
, cv->
signo
);

648 
kev
.
idít
 = 
cv
->
signo
;

649 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

650 
kev
.
Êags
 = 
EV_ADD
;

651 
kev
.
fÊags
 = 0;

652 
kev
.
d©a
 = 0;

653 
kev
.
ud©a
 = 
NULL
;

655 
ts
.
tv_£c
 = 0;

656 
ts
.
tv_n£c
 = 0;

658 i‡(
	`kevít
(
cv
->
kq
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

659 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kevent() failed");

660  
NGX_ERROR
;

663 
cv
->
tid
 = 
	`ngx_thªad_£lf
();

666 
	`ngx_muãx_u∆ock
(
m
);

668 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

669 "cv %∞waô, kq:%d, signo:%d", 
cv
, cv->
kq
, cv->
signo
);

672 
n
 = 
	`kevít
(
cv
->
kq
, 
NULL
, 0, &
kev
, 1, NULL);

674 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

675 "cv %∞kevít: %d", 
cv
, 
n
);

677 i‡(
n
 == -1) {

678 
îr
 = 
ngx_î∫o
;

679 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

680 
cv
->
log
, 
ngx_î∫o
,

682 
cv
);

684 i‡(
îr
 =
NGX_EINTR
) {

688  
NGX_ERROR
;

691 i‡(
n
 == 0) {

692 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

695 
cv
);

699 i‡(
kev
.
fûãr
 !
EVFILT_SIGNAL
) {

700 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

703 
kev
.
fûãr
, 
cv
);

707 i‡(
kev
.
idít
 !(
uöçå_t
Ë
cv
->
signo
) {

708 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

711 
kev
.
idít
, 
cv
);

718 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

720 
	`ngx_muãx_lock
(
m
);

722  
NGX_OK
;

723 
	}
}

726 
ngx_öt_t


727 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

729 
ngx_îr_t
 
îr
;

731 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

733 
cv
, cv->
tid
, cv->
signo
);

735 i‡(
cv
->
tid
 == -1) {

736  
NGX_OK
;

739 i‡(
	`kûl
(
cv
->
tid
, cv->
signo
) == -1) {

741 
îr
 = 
ngx_î∫o
;

743 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

744 "kûl(ËÁûed whûêsig«lög c⁄dôi⁄ v¨übÀ %p", 
cv
);

746 i‡(
îr
 =
NGX_ESRCH
) {

747 
cv
->
tid
 = -1;

750  
NGX_ERROR
;

753 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

755  
NGX_OK
;

756 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_rfork_thread.h

8 #i‚de‡
_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


9 
	#_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


	)

12 
	~<sys/ùc.h
>

13 
	~<sys/£m.h
>

14 
	~<sched.h
>

16 
pid_t
 
	tngx_tid_t
;

18 
	#ngx_log_pid
 
	`ngx_thªad_£lf
()

	)

19 
	#ngx_log_tid
 0

	)

21 
	#NGX_TID_T_FMT
 "%P"

	)

24 
	#NGX_MUTEX_LIGHT
 1

	)

26 
	#NGX_MUTEX_LOCK_BUSY
 0x80000000

	)

29 
ngx_©omic_t
 
	mlock
;

30 
ngx_log_t
 *
	mlog
;

31 
	m£mid
;

32 } 
	tngx_muãx_t
;

35 
	#NGX_CV_SIGNAL
 64

	)

38 
	msigno
;

39 
	mkq
;

40 
ngx_tid_t
 
	mtid
;

41 
ngx_log_t
 *
	mlog
;

42 } 
	tngx_c⁄d_t
;

45 
	#ngx_thªad_sigmask
(
how
, 
£t
, 
o£t
) \

46 (
	`sig¥ocmask
(
how
, 
£t
, 
o£t
Ë=-1Ë? 
ngx_î∫o
 : 0

	)

48 
	#ngx_thªad_sigmask_n
 "sig¥ocmask()"

	)

50 
	#ngx_thªad_joö
(
t
, 
p
)

	)

52 
	#ngx_£âhπôÀ
(
n
Ë
	`£çro˘ôÀ
“)

	)

55 *
ngx_‰ìbsd_kîn_u§°ack
;

56 
size_t
 
ngx_thªad_°ack_size
;

59 
ngx_ölöe
 
ngx_öt_t


60 
	$ngx_gëtid
()

62 *
•
;

64 i‡(
ngx_thªad_°ack_size
 == 0) {

68 #i‡–
__i386__
 )

70 
__asm__
 vﬁ©ûê("mov %%e•, %0" : "=q" (
•
));

72 #ñi‡–
__amd64__
 )

74 
__asm__
 vﬁ©ûê("mov %%r•, %0" : "=q" (
•
));

82  (
ngx_‰ìbsd_kîn_u§°ack
 - 
•
Ë/ 
ngx_thªad_°ack_size
;

83 
	}
}

86 
ngx_tid_t
 
ngx_thªad_£lf
();

89 
ngx_uöt_t
 
	tngx_és_key_t
;

91 
	#NGX_THREAD_KEYS_MAX
 16

	)

93 **
ngx_és
;

95 
ngx_îr_t
 
ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
);

96 
	#ngx_thªad_key_¸óã_n
 "thêé†key cª©i⁄"

	)

98 
ngx_îr_t
 
ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
);

99 
	#ngx_thªad_£t_és_n
 "thêé†key sëtög"

	)

103 
	$ngx_thªad_gë_és
(
ngx_és_key_t
 
key
)

105 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

106  
NULL
;

109  
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()];

110 
	}
}

113 
	#ngx_muãx_åylock
(
m
Ë
	`ngx_muãx_dﬁock
(m, 1)

	)

114 
	#ngx_muãx_lock
(
m
Ë(Ë
	`ngx_muãx_dﬁock
(m, 0)

	)

115 
ngx_öt_t
 
ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
,Çgx_öt_à
åy
);

116 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

119 (*
	tngx_rf‹k_thªad_func_±
)(*
	t¨g
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

32 #i‡(
IOV_MAX
 > 64)

33 
	#NGX_HEADERS
 64

	)

34 
	#NGX_TRAILERS
 64

	)

36 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
	#NGX_TRAILERS
 
IOV_MAX


	)

41 
ngx_chaö_t
 *

42 
	$ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

44 
rc
, 
Êags
;

45 
u_ch¨
 *
¥ev
;

46 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

47 
size_t
 
hódî_size
, 
fûe_size
;

48 
ngx_uöt_t
 
eöå
, 
ógaö
, 
com∂ëe
;

49 
ngx_îr_t
 
îr
;

50 
ngx_buf_t
 *
fûe
;

51 
ngx_¨øy_t
 
hódî
, 
åaûî
;

52 
ngx_evít_t
 *
wev
;

53 
ngx_chaö_t
 *
˛
;

54 
sf_hdå
 
hdå
;

55 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

63 #i‡(
NGX_HAVE_KQUEUE
)

65 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

66 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

68 
wev
->
îr‹
 = 1;

69  
NGX_CHAIN_ERROR
;

76 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

77 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

80 
£nd
 = 0;

81 
ógaö
 = 0;

82 
Êags
 = 0;

84 
hódî
.
ñts
 = 
hódîs
;

85 
hódî
.
size
 = (
iovec
);

86 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

87 
hódî
.
poﬁ
 = 
c
->pool;

89 
åaûî
.
ñts
 = 
åaûîs
;

90 
åaûî
.
size
 = (
iovec
);

91 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

92 
åaûî
.
poﬁ
 = 
c
->pool;

95 
fûe
 = 
NULL
;

96 
fûe_size
 = 0;

97 
hódî_size
 = 0;

98 
eöå
 = 0;

99 
com∂ëe
 = 0;

100 
¥ev_£nd
 = 
£nd
;

102 
hódî
.
√…s
 = 0;

103 
åaûî
.
√…s
 = 0;

107 
¥ev
 = 
NULL
;

108 
iov
 = 
NULL
;

110 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

112 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

116 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

120 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

122 i‡(
£nd
 + 
size
 > 
limô
) {

123 
size
 = 
limô
 - 
£nd
;

126 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

127 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

130 i‡(
hódî
.
√…s
 >
IOV_MAX
){

134 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

135 i‡(
iov
 =
NULL
) {

136  
NGX_CHAIN_ERROR
;

139 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

140 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

143 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

144 
hódî_size
 +(
size_t
Ë
size
;

145 
£nd
 +
size
;

149 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

150 
fûe
 = 
˛
->
buf
;

155 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

157 i‡(
£nd
 + 
size
 > 
limô
) {

158 
size
 = 
limô
 - 
£nd
;

160 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

161 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

163 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

164 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

168 
fûe_size
 +(
size_t
Ë
size
;

169 
£nd
 +
size
;

170 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

171 
˛
 = cl->
√xt
;

173 } 
˛


174 && 
˛
->
buf
->
ö_fûe


175 && 
£nd
 < 
limô


176 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

177 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

181 i‡(
fûe
) {

185 
¥ev
 = 
NULL
;

186 
iov
 = 
NULL
;

188 
˛
 && 
£nd
 < 
limô
) {

190 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

191 
˛
 = cl->
√xt
;

195 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

199 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

201 i‡(
£nd
 + 
size
 > 
limô
) {

202 
size
 = 
limô
 - 
£nd
;

205 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

206 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

209 i‡(
åaûî
.
√…s
 >
IOV_MAX
){

213 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

214 i‡(
iov
 =
NULL
) {

215  
NGX_CHAIN_ERROR
;

218 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

219 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

222 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

223 
£nd
 +
size
;

224 
˛
 = cl->
√xt
;

228 i‡(
fûe
) {

230 i‡(
ngx_‰ìbsd_u£_t˝_n›ush


231 && 
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET
)

233 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

234 
îr
 = 
ngx_sockë_î∫o
;

241 i‡(
îr
 !
NGX_EINTR
) {

242 
wev
->
îr‹
 = 1;

243 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

244 
ngx_t˝_n›ush_n
 " failed");

245  
NGX_CHAIN_ERROR
;

249 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

261 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

262 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

263 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

264 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

271 i‡(!
ngx_‰ìbsd_£ndfûe_nbyãs_bug
) {

272 
hódî_size
 = 0;

275 
£¡
 = 0;

277 #i‡(
NGX_HAVE_AIO_SENDFILE
)

278 
Êags
 = 
c
->
aio_£ndfûe
 ? 
SF_NODISKIO
 : 0;

281 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

282 
fûe_size
 + 
hódî_size
, &
hdå
, &
£¡
, 
Êags
);

284 i‡(
rc
 == -1) {

285 
îr
 = 
ngx_î∫o
;

287 
îr
) {

288 
NGX_EAGAIN
:

289 
ógaö
 = 1;

292 
NGX_EINTR
:

293 
eöå
 = 1;

296 #i‡(
NGX_HAVE_AIO_SENDFILE
)

297 
NGX_EBUSY
:

298 
c
->
busy_£ndfûe
 = 
fûe
;

303 
wev
->
îr‹
 = 1;

304 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

305  
NGX_CHAIN_ERROR
;

308 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

309 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

316 } i‡(
rc
 >0 && 
£¡
 == 0) {

324 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

326 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

328  
NGX_CHAIN_ERROR
;

331 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

333 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

336 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

338 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

339 "wrôev: %d o‡%uz", 
rc
, 
hódî_size
);

341 i‡(
rc
 == -1) {

342 
îr
 = 
ngx_î∫o
;

344 
îr
) {

345 
NGX_EAGAIN
:

348 
NGX_EINTR
:

349 
eöå
 = 1;

353 
wev
->
îr‹
 = 1;

354 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

355  
NGX_CHAIN_ERROR
;

358 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

362 
£¡
 = 
rc
 > 0 ?Ñc : 0;

365 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

366 
com∂ëe
 = 1;

369 
c
->
£¡
 += sent;

371  ; 
ö
; i¿ö->
√xt
) {

373 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

377 i‡(
£¡
 == 0) {

381 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

383 i‡(
£¡
 >
size
) {

384 
£¡
 -
size
;

386 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

387 
ö
->
buf
->
pos
 = in->buf->
œ°
;

390 i‡(
ö
->
buf
->
ö_fûe
) {

391 
ö
->
buf
->
fûe_pos
 = in->buf->
fûe_œ°
;

397 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

398 
ö
->
buf
->
pos
 +(
size_t
Ë
£¡
;

401 i‡(
ö
->
buf
->
ö_fûe
) {

402 
ö
->
buf
->
fûe_pos
 +
£¡
;

408 #i‡(
NGX_HAVE_AIO_SENDFILE
)

409 i‡(
c
->
busy_£ndfûe
) {

410  
ö
;

414 i‡(
ógaö
) {

423 
wev
->
ªady
 = 0;

424  
ö
;

427 i‡(
eöå
) {

431 i‡(!
com∂ëe
) {

432 
wev
->
ªady
 = 0;

433  
ö
;

436 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

437  
ö
;

440 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_amd64.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

36 
ngx_ölöe
 
ngx_©omic_uöt_t


37 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

38 
ngx_©omic_uöt_t
 
£t
)

40 
u_ch¨
 
ªs
;

42 
__asm__
 volatile (

44 
NGX_SMP_LOCK


48 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

50  
ªs
;

51 
	}
}

66 
ngx_ölöe
 
ngx_©omic_öt_t


67 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

69 
__asm__
 volatile (

71 
NGX_SMP_LOCK


74 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

76  
add
;

77 
	}
}

80 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_ppc.h

26 #i‡(
NGX_PTR_SIZE
 == 8)

28 
ngx_ölöe
 
ngx_©omic_uöt_t


29 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

30 
ngx_©omic_uöt_t
 
£t
)

32 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

34 
__asm__
 volatile (

50 : "=&b" (
ªs
), "=&b" (
ãmp
)

51 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

54  
ªs
;

55 
	}
}

58 
ngx_ölöe
 
ngx_©omic_öt_t


59 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

61 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

63 
__asm__
 volatile (

74 : "=&b" (
ªs
), "=&b" (
ãmp
)

75 : "b" (
vÆue
), "b" (
add
)

78  
ªs
;

79 
	}
}

82 #i‡(
NGX_SMP
)

83 
	#ngx_mem‹y_b¨rõr
() \

84 
__asm__
 vﬁ©ûê("isyn¯ \¿Üwsyn¯ \n" ::: "mem‹y")

	)

86 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

91 
ngx_ölöe
 
ngx_©omic_uöt_t


92 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

93 
ngx_©omic_uöt_t
 
£t
)

95 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

97 
__asm__
 volatile (

113 : "=&b" (
ªs
), "=&b" (
ãmp
)

114 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

117  
ªs
;

118 
	}
}

121 
ngx_ölöe
 
ngx_©omic_öt_t


122 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

124 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

126 
__asm__
 volatile (

137 : "=&b" (
ªs
), "=&b" (
ãmp
)

138 : "b" (
vÆue
), "b" (
add
)

141  
ªs
;

142 
	}
}

145 #i‡(
NGX_SMP
)

146 
	#ngx_mem‹y_b¨rõr
() \

147 
__asm__
 vﬁ©ûê("isyn¯ \¿Éõiÿ \n" ::: "mem‹y")

	)

149 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

155 
	#ngx_˝u_∑u£
()

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_sparc64.h

26 #i‡(
NGX_PTR_SIZE
 == 4)

27 
	#NGX_CASA
 "ˇß"

	)

29 
	#NGX_CASA
 "ˇsxa"

	)

33 
ngx_ölöe
 
ngx_©omic_uöt_t


34 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

35 
ngx_©omic_uöt_t
 
£t
)

37 
__asm__
 volatile (

39 
NGX_CASA
 " [%1] 0x80, %2, %0"

41 : "+r" (
£t
Ë: "r" (
lock
), "r" (
ﬁd
) : "memory");

43  (
£t
 =
ﬁd
);

44 
	}
}

47 
ngx_ölöe
 
ngx_©omic_öt_t


48 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

50 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

52 
ﬁd
 = *
vÆue
;

56 
ªs
 = 
ﬁd
 + 
add
;

58 
__asm__
 volatile (

60 
NGX_CASA
 " [%1] 0x80, %2, %0"

62 : "+r" (
ªs
Ë: "r" (
vÆue
), "r" (
ﬁd
) : "memory");

64 i‡(
ªs
 =
ﬁd
) {

65  
ªs
;

68 
ﬁd
 = 
ªs
;

70 
	}
}

73 #i‡(
NGX_SMP
)

74 
	#ngx_mem‹y_b¨rõr
() \

75 
__asm__
 volatile ( \

77 ::: "mem‹y")

	)

79 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
()

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_x86.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

37 
ngx_ölöe
 
ngx_©omic_uöt_t


38 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

39 
ngx_©omic_uöt_t
 
£t
)

41 
u_ch¨
 
ªs
;

43 
__asm__
 volatile (

45 
NGX_SMP_LOCK


49 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

51  
ªs
;

52 
	}
}

68 #i‡!(–
__GNUC__
 =2 && 
__GNUC_MINOR__
 <7 ) || ( 
__INTEL_COMPILER
 >= 800 ))

79 
ngx_ölöe
 
ngx_©omic_öt_t


80 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

82 
__asm__
 volatile (

84 
NGX_SMP_LOCK


87 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

89  
add
;

90 
	}
}

101 
ngx_ölöe
 
ngx_©omic_öt_t


102 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

104 
ngx_©omic_uöt_t
 
ﬁd
;

106 
__asm__
 volatile (

108 
NGX_SMP_LOCK


111 : "˜" (
ﬁd
Ë: "m" (*
vÆue
), "a" (
add
) : "cc", "memory");

113  
ﬁd
;

114 
	}
}

124 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

127 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 (".byã 0xf3, 0x90")

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux.h

8 #i‚de‡
_NGX_LINUX_H_INCLUDED_


9 
	#_NGX_LINUX_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_löux_πsig_max
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evítfd
;

14 
aio_c⁄ãxt_t
 
ngx_aio_˘x
;

17 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

21 
	$io_submô
(
aio_c⁄ãxt_t
 
˘x
, 
n
, 
iocb
 **
∑iocb
)

23  
	`sysˇŒ
(
SYS_io_submô
, 
˘x
, 
n
, 
∑iocb
);

24 
	}
}

27 
ssize_t


28 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

29 
ngx_poﬁ_t
 *
poﬁ
)

31 
ngx_îr_t
 
îr
;

32 
iocb
 *
piocb
[1];

33 
ngx_evít_t
 *
ev
;

34 
ngx_evít_aio_t
 *
aio
;

36 i‡(!
ngx_fûe_aio
) {

37  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

40 
aio
 = 
fûe
->aio;

42 i‡(
aio
 =
NULL
) {

43 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

44 i‡(
aio
 =
NULL
) {

45  
NGX_ERROR
;

48 
aio
->
fûe
 = file;

49 
aio
->
fd
 = 
fûe
->fd;

50 
aio
->
evít
.
d©a
 =áio;

51 
aio
->
evít
.
ªady
 = 1;

52 
aio
->
evít
.
log
 = 
fûe
->log;

53 
fûe
->
aio
 =áio;

56 
ev
 = &
aio
->
evít
;

58 i‡(!
ev
->
ªady
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

60 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

61  
NGX_AGAIN
;

64 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

66 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

68 i‡(
ev
->
com∂ëe
) {

69 
ev
->
a˘ive
 = 0;

70 
ev
->
com∂ëe
 = 0;

72 i‡(
aio
->
ªs
 >= 0) {

73 
	`ngx_£t_î∫o
(0);

74  
aio
->
ªs
;

77 
	`ngx_£t_î∫o
(-
aio
->
ªs
);

79 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

80 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

82  
NGX_ERROR
;

85 
	`ngx_memzîo
(&
aio
->
aiocb
, (
iocb
));

87 
aio
->
aiocb
.
aio_d©a
 = (
uöt64_t
Ë(
uöçå_t
Ë
ev
;

88 
aio
->
aiocb
.
aio_lio_›code
 = 
IOCB_CMD_PREAD
;

89 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

90 
aio
->
aiocb
.
aio_buf
 = (
uöt64_t
Ë(
uöçå_t
Ë
buf
;

91 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

92 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

93 
aio
->
aiocb
.
aio_Êags
 = 
IOCB_FLAG_RESFD
;

94 
aio
->
aiocb
.
aio_ªsfd
 = 
ngx_evítfd
;

96 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

98 
piocb
[0] = &
aio
->
aiocb
;

100 i‡(
	`io_submô
(
ngx_aio_˘x
, 1, 
piocb
) == 1) {

101 
ev
->
a˘ive
 = 1;

102 
ev
->
ªady
 = 0;

103 
ev
->
com∂ëe
 = 0;

105  
NGX_AGAIN
;

108 
îr
 = 
ngx_î∫o
;

110 i‡(
îr
 =
NGX_EAGAIN
) {

111  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

114 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

115 "io_submô(\"%V\"ËÁûed", &
fûe
->
«me
);

117 i‡(
îr
 =
NGX_ENOSYS
) {

118 
ngx_fûe_aio
 = 0;

119  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

122  
NGX_ERROR
;

123 
	}
}

127 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

129 
ngx_evít_aio_t
 *
aio
;

131 
aio
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

134 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

136 
aio
->
	`h™dÀr
(
ev
);

137 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_config.h

8 #i‚de‡
_NGX_LINUX_CONFIG_H_INCLUDED_


9 
	#_NGX_LINUX_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_GNU_SOURCE


13 
	#_GNU_SOURCE


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<sys/vfs.h
>

35 
	~<sys/uio.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sched.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/t˝.h
>

47 
	~<¨∑/öë.h
>

48 
	~<√tdb.h
>

49 
	~<sys/un.h
>

51 
	~<time.h
>

52 
	~<mÆloc.h
>

53 
	~<limôs.h
>

54 
	~<sys/io˘l.h
>

55 
	~<¸y±.h
>

56 
	~<sys/ut¢ame.h
>

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_SYS_PRCTL_H
)

68 
	~<sys/¥˘l.h
>

72 #i‡(
NGX_HAVE_SENDFILE64
)

73 
	~<sys/£ndfûe.h
>

75 
ssize_t
 
£ndfûe
(
s
, 
fd
, 
öt32_t
 *
off£t
, 
size_t
 
size
);

76 
	#NGX_SENDFILE_LIMIT
 0x80000000

	)

80 #i‡(
NGX_HAVE_POLL
)

81 
	~<pﬁl.h
>

85 #i‡(
NGX_HAVE_RTSIG
)

86 
	~<pﬁl.h
>

87 
	~<sys/sys˘l.h
>

91 #i‡(
NGX_HAVE_EPOLL
)

92 
	~<sys/ïﬁl.h
>

96 #i‡(
NGX_HAVE_FILE_AIO
)

97 
	~<sys/sysˇŒ.h
>

98 
	~<löux/aio_abi.h
>

99 
iocb
 
	tngx_aiocb_t
;

103 
	#NGX_LISTEN_BACKLOG
 511

	)

106 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


108 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

112 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


113 
	#NGX_HAVE_INHERITED_NONBLOCK
 0

	)

117 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

118 
	#ngx_debug_öô
()

	)

121 **
ívú⁄
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 
	gngx_löux_kîn_o°y≥
[50];

13 
u_ch¨
 
	gngx_löux_kîn_o§ñó£
[50];

15 
	gngx_löux_πsig_max
;

18 
ngx_os_io_t
 
	gngx_löux_io
 = {

19 
ngx_unix_ªcv
,

20 
ngx_ªadv_chaö
,

21 
ngx_udp_unix_ªcv
,

22 
ngx_unix_£nd
,

23 #i‡(
NGX_HAVE_SENDFILE
)

24 
ngx_löux_£ndfûe_chaö
,

25 
NGX_IO_SENDFILE


27 
ngx_wrôev_chaö
,

33 
ngx_öt_t


34 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

36 
ut¢ame
 
u
;

38 i‡(
	`u«me
(&
u
) == -1) {

39 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "uname() failed");

40  
NGX_ERROR
;

43 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o°y≥
, (
u_ch¨
 *Ë
u
.
sy¢ame
,

44 (
ngx_löux_kîn_o°y≥
));

46 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o§ñó£
, (
u_ch¨
 *Ë
u
.
ªÀa£
,

47 (
ngx_löux_kîn_o§ñó£
));

49 #i‡(
NGX_HAVE_RTSIG
)

51 
«me
[2];

52 
size_t
 
Àn
;

53 
ngx_îr_t
 
îr
;

55 
«me
[0] = 
CTL_KERN
;

56 
«me
[1] = 
KERN_RTSIGMAX
;

57 
Àn
 = (
ngx_löux_πsig_max
);

59 i‡(
	`sys˘l
(
«me
, 2, &
ngx_löux_πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

60 
îr
 = 
ngx_î∫o
;

62 i‡(
îr
 !
NGX_ENOTDIR
 &&Éº !
NGX_ENOSYS
) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

66  
NGX_ERROR
;

69 
ngx_löux_πsig_max
 = 0;

75 
ngx_os_io
 = 
ngx_löux_io
;

77  
NGX_OK
;

78 
	}
}

82 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

84 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

85 
ngx_löux_kîn_o°y≥
, 
ngx_löux_kîn_o§ñó£
);

87 #i‡(
NGX_HAVE_RTSIG
)

88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "sysctl(KERN_RTSIGMAX): %d",

89 
ngx_löux_πsig_max
);

91 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

27 
	#NGX_SENDFILE_MAXSIZE
 2147483647L

	)

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

33 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
ngx_chaö_t
 *

38 
	$ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

40 
rc
, 
t˝_nodñay
;

41 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

42 
u_ch¨
 *
¥ev
;

43 
size_t
 
fûe_size
;

44 
ngx_îr_t
 
îr
;

45 
ngx_buf_t
 *
fûe
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_¨øy_t
 
hódî
;

48 
ngx_evít_t
 *
wev
;

49 
ngx_chaö_t
 *
˛
;

50 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
];

51 #i‡(
NGX_HAVE_SENDFILE64
)

52 
off_t
 
off£t
;

54 
öt32_t
 
off£t
;

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

66 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_SENDFILE_MAXSIZE
 - 
ngx_∑gesize
)) {

67 
limô
 = 
NGX_SENDFILE_MAXSIZE
 - 
ngx_∑gesize
;

71 
£nd
 = 0;

73 
hódî
.
ñts
 = 
hódîs
;

74 
hódî
.
size
 = (
iovec
);

75 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

76 
hódî
.
poﬁ
 = 
c
->pool;

79 
fûe
 = 
NULL
;

80 
fûe_size
 = 0;

81 
eöå
 = 0;

82 
com∂ëe
 = 0;

83 
¥ev_£nd
 = 
£nd
;

85 
hódî
.
√…s
 = 0;

87 
¥ev
 = 
NULL
;

88 
iov
 = 
NULL
;

92 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

94 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

99 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
Ë&& !˛->buf->
ö_fûe
) {

100 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

103 
˛
->
buf
->
ãmp‹¨y
,

104 
˛
->
buf
->
ªcy˛ed
,

105 
˛
->
buf
->
ö_fûe
,

106 
˛
->
buf
->
°¨t
,

107 
˛
->
buf
->
pos
,

108 
˛
->
buf
->
œ°
,

109 
˛
->
buf
->
fûe
,

110 
˛
->
buf
->
fûe_pos
,

111 
˛
->
buf
->
fûe_œ°
);

113 
	`ngx_debug_poöt
();

115  
NGX_CHAIN_ERROR
;

119 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

123 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

125 i‡(
£nd
 + 
size
 > 
limô
) {

126 
size
 = 
limô
 - 
£nd
;

129 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

130 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

133 i‡(
hódî
.
√…s
 >
IOV_MAX
) {

137 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

138 i‡(
iov
 =
NULL
) {

139  
NGX_CHAIN_ERROR
;

142 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

143 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

146 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

147 
£nd
 +
size
;

152 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET


153 && 
hódî
.
√…s
 != 0

154 && 
˛


155 && 
˛
->
buf
->
ö_fûe
)

159 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_SET
) {

161 
t˝_nodñay
 = 0;

163 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

164 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

166 
îr
 = 
ngx_sockë_î∫o
;

174 i‡(
îr
 !
NGX_EINTR
) {

175 
wev
->
îr‹
 = 1;

176 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

178  
NGX_CHAIN_ERROR
;

182 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_UNSET
;

184 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

189 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

191 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

192 
îr
 = 
ngx_sockë_î∫o
;

199 i‡(
îr
 !
NGX_EINTR
) {

200 
wev
->
îr‹
 = 1;

201 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

202 
ngx_t˝_n›ush_n
 " failed");

203  
NGX_CHAIN_ERROR
;

207 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

209 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

217 i‡(
hódî
.
√…s
 =0 && 
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

218 
fûe
 = 
˛
->
buf
;

223 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

225 i‡(
£nd
 + 
size
 > 
limô
) {

226 
size
 = 
limô
 - 
£nd
;

228 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

229 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

231 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

232 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

236 
fûe_size
 +(
size_t
Ë
size
;

237 
£nd
 +
size
;

238 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

239 
˛
 = cl->
√xt
;

241 } 
˛


242 && 
˛
->
buf
->
ö_fûe


243 && 
£nd
 < 
limô


244 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

245 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

248 i‡(
fûe
) {

250 i‡(
fûe_size
 == 0) {

251 
	`ngx_debug_poöt
();

252  
NGX_CHAIN_ERROR
;

255 #i‡(
NGX_HAVE_SENDFILE64
)

256 
off£t
 = 
fûe
->
fûe_pos
;

258 
off£t
 = (
öt32_t
Ë
fûe
->
fûe_pos
;

261 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

262 "£ndfûe: @%O %uz", 
fûe
->
fûe_pos
, 
fûe_size
);

264 
rc
 = 
	`£ndfûe
(
c
->
fd
, 
fûe
->fûe->fd, &
off£t
, 
fûe_size
);

266 i‡(
rc
 == -1) {

267 
îr
 = 
ngx_î∫o
;

269 
îr
) {

270 
NGX_EAGAIN
:

273 
NGX_EINTR
:

274 
eöå
 = 1;

278 
wev
->
îr‹
 = 1;

279 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

280  
NGX_CHAIN_ERROR
;

283 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

287 
£¡
 = 
rc
 > 0 ?Ñc : 0;

289 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

291 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
);

294 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

296 i‡(
rc
 == -1) {

297 
îr
 = 
ngx_î∫o
;

299 
îr
) {

300 
NGX_EAGAIN
:

303 
NGX_EINTR
:

304 
eöå
 = 1;

308 
wev
->
îr‹
 = 1;

309 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

310  
NGX_CHAIN_ERROR
;

313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

317 
£¡
 = 
rc
 > 0 ?Ñc : 0;

319 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %O", 
£¡
);

322 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

323 
com∂ëe
 = 1;

326 
c
->
£¡
 += sent;

328  ; 
ö
; i¿ö->
√xt
) {

330 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

334 i‡(
£¡
 == 0) {

338 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

340 i‡(
£¡
 >
size
) {

341 
£¡
 -
size
;

343 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

344 
ö
->
buf
->
pos
 = in->buf->
œ°
;

347 i‡(
ö
->
buf
->
ö_fûe
) {

348 
ö
->
buf
->
fûe_pos
 = in->buf->
fûe_œ°
;

354 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

355 
ö
->
buf
->
pos
 +(
size_t
Ë
£¡
;

358 i‡(
ö
->
buf
->
ö_fûe
) {

359 
ö
->
buf
->
fûe_pos
 +
£¡
;

365 i‡(
eöå
) {

369 i‡(!
com∂ëe
) {

370 
wev
->
ªady
 = 0;

371  
ö
;

374 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

375  
ö
;

378 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_os.h

8 #i‚de‡
_NGX_OS_H_INCLUDED_


9 
	#_NGX_OS_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_IO_SENDFILE
 1

	)

19 
	$ssize_t
 (*
	tngx_ªcv_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

20 
	$ssize_t
 (*
	tngx_ªcv_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
);

21 
	$ssize_t
 (*
	tngx_£nd_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

22 
ngx_chaö_t
 *(*
	tngx_£nd_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

23 
	toff_t
 
	tlimô
);

26 
ngx_ªcv_±
 
ªcv
;

27 
ngx_ªcv_chaö_±
 
ªcv_chaö
;

28 
ngx_ªcv_±
 
udp_ªcv
;

29 
ngx_£nd_±
 
£nd
;

30 
ngx_£nd_chaö_±
 
£nd_chaö
;

31 
ngx_uöt_t
 
Êags
;

32 } 
	tngx_os_io_t
;

35 
ngx_öt_t
 
	`ngx_os_öô
(
ngx_log_t
 *
log
);

36 
	`ngx_os_°©us
(
ngx_log_t
 *
log
);

37 
ngx_öt_t
 
	`ngx_os_•ecific_öô
(
ngx_log_t
 *
log
);

38 
	`ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
);

39 
ngx_öt_t
 
	`ngx_d´m⁄
(
ngx_log_t
 *
log
);

40 
ngx_öt_t
 
	`ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
,Çgx_öt_à
pid
);

43 
ssize_t
 
	`ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

44 
ssize_t
 
	`ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
íåy
);

45 
ssize_t
 
	`ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

46 
ssize_t
 
	`ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

47 
ngx_chaö_t
 *
	`ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

48 
off_t
 
limô
);

50 #i‡(
NGX_HAVE_AIO
)

51 
ssize_t
 
	`ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

52 
ssize_t
 
	`ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

53 
ssize_t
 
	`ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

54 
ngx_chaö_t
 *
	`ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

55 
off_t
 
limô
);

59 
ngx_os_io_t
 
ngx_os_io
;

60 
ngx_öt_t
 
ngx_n˝u
;

61 
ngx_öt_t
 
ngx_max_sockës
;

62 
ngx_uöt_t
 
ngx_öhîôed_n⁄blockög
;

63 
ngx_uöt_t
 
ngx_t˝_nodñay_™d_t˝_n›ush
;

66 #i‡(
NGX_FREEBSD
)

67 
	~<ngx_‰ìbsd.h
>

70 #ñi‡(
NGX_LINUX
)

71 
	~<ngx_löux.h
>

74 #ñi‡(
NGX_SOLARIS
)

75 
	~<ngx_sﬁ¨is.h
>

78 #ñi‡(
NGX_DARWIN
)

79 
	~<ngx_d¨wö.h
>

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_posix_config.h

8 #i‚de‡
_NGX_POSIX_CONFIG_H_INCLUDED_


9 
	#_NGX_POSIX_CONFIG_H_INCLUDED_


	)

12 #i‡(
NGX_HPUX
)

13 
	#_XOPEN_SOURCE


	)

14 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

15 
	#_HPUX_ALT_XOPEN_SOCKET_API


	)

19 #i‡(
NGX_TRU64
)

20 
	#_REENTRANT


	)

24 #ifde‡
__CYGWIN__


25 
	#timez⁄ev¨


	)

26 
	#NGX_BROKEN_SCM_RIGHTS
 1

	)

30 
	~<sys/ty≥s.h
>

31 
	~<sys/time.h
>

32 #i‡(
NGX_HAVE_UNISTD_H
)

33 
	~<uni°d.h
>

35 #i‡(
NGX_HAVE_INTTYPES_H
)

36 
	~<öây≥s.h
>

38 
	~<°d¨g.h
>

39 
	~<°ddef.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<˘y≥.h
>

43 
	~<î∫o.h
>

44 
	~<°rög.h
>

45 
	~<sig«l.h
>

46 
	~<pwd.h
>

47 
	~<gΩ.h
>

48 
	~<dúít.h
>

49 
	~<glob.h
>

50 
	~<time.h
>

51 #i‡(
NGX_HAVE_SYS_PARAM_H
)

52 
	~<sys/∑øm.h
>

54 #i‡(
NGX_HAVE_SYS_MOUNT_H
)

55 
	~<sys/mou¡.h
>

57 #i‡(
NGX_HAVE_SYS_STATVFS_H
)

58 
	~<sys/°©vfs.h
>

61 #i‡(
NGX_HAVE_SYS_FILIO_H
)

62 
	~<sys/fûio.h
>

64 
	~<sys/io˘l.h
>

66 
	~<sys/uio.h
>

67 
	~<sys/°©.h
>

68 
	~<f˙é.h
>

70 
	~<sys/waô.h
>

71 
	~<sys/mm™.h
>

72 
	~<sys/ªsour˚.h
>

73 
	~<sched.h
>

75 
	~<sys/sockë.h
>

76 
	~<√töë/ö.h
>

77 
	~<√töë/t˝.h
>

78 
	~<¨∑/öë.h
>

79 
	~<√tdb.h
>

80 
	~<sys/un.h
>

82 #i‡(
NGX_HAVE_LIMITS_H
)

83 
	~<limôs.h
>

86 #ifde‡
__CYGWIN__


87 
	~<mÆloc.h
>

90 #i‡(
NGX_HAVE_CRYPT_H
)

91 
	~<¸y±.h
>

95 #i‚de‡
IOV_MAX


96 
	#IOV_MAX
 16

	)

100 
	~<ngx_auto_c⁄fig.h
>

103 #i‡(
NGX_HAVE_POSIX_SEM
)

104 
	~<£m≠h‹e.h
>

108 #i‡(
NGX_HAVE_POLL
)

109 
	~<pﬁl.h
>

113 #i‡(
NGX_HAVE_KQUEUE
)

114 
	~<sys/evít.h
>

118 #i‡(
NGX_HAVE_DEVPOLL
)

119 
	~<sys/io˘l.h
>

120 
	~<sys/devpﬁl.h
>

124 #i‡(
NGX_HAVE_FILE_AIO
)

125 
	~<aio.h
>

126 
aiocb
 
	tngx_aiocb_t
;

130 
	#NGX_LISTEN_BACKLOG
 511

	)

132 
	#ngx_debug_öô
()

	)

135 #i‡(
__FªeBSD__
Ë&& (
__FªeBSD_vîsi⁄
 < 400017)

137 
	~<sys/∑øm.h
>

143 #unde‡
CMSG_SPACE


144 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

146 #unde‡
CMSG_LEN


147 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

149 #unde‡
CMSG_DATA


150 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

155 **
ívú⁄
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_posix_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
	gngx_n˝u
;

14 
ngx_öt_t
 
	gngx_max_sockës
;

15 
ngx_uöt_t
 
	gngx_öhîôed_n⁄blockög
;

16 
ngx_uöt_t
 
	gngx_t˝_nodñay_™d_t˝_n›ush
;

19 
æimô
 
	gæmt
;

22 
ngx_os_io_t
 
	gngx_os_io
 = {

23 
ngx_unix_ªcv
,

24 
ngx_ªadv_chaö
,

25 
ngx_udp_unix_ªcv
,

26 
ngx_unix_£nd
,

27 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_öô
(
ngx_log_t
 *
log
)

35 
ngx_uöt_t
 
n
;

37 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

38 i‡(
	`ngx_os_•ecific_öô
(
log
Ë!
NGX_OK
) {

39  
NGX_ERROR
;

43 
	`ngx_öô_£çro˘ôÀ
(
log
);

45 
ngx_∑gesize
 = 
	`gë∑gesize
();

46 
ngx_ˇchñöe_size
 = 
NGX_CPU_CACHE_LINE
;

48 
n
 = 
ngx_∑gesize
;Ç >>1; 
ngx_∑gesize_shi·
++) { }

50 #i‡(
NGX_HAVE_SC_NPROCESSORS_ONLN
)

51 i‡(
ngx_n˝u
 == 0) {

52 
ngx_n˝u
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

56 i‡(
ngx_n˝u
 < 1) {

57 
ngx_n˝u
 = 1;

60 
	`ngx_˝uöfo
();

62 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
î∫o
,

65  
NGX_ERROR
;

68 
ngx_max_sockës
 = (
ngx_öt_t
Ë
æmt
.
æim_cur
;

70 #i‡(
NGX_HAVE_INHERITED_NONBLOCK
 || 
NGX_HAVE_ACCEPT4
)

71 
ngx_öhîôed_n⁄blockög
 = 1;

73 
ngx_öhîôed_n⁄blockög
 = 0;

76 
	`§™dom
(
	`ngx_time
());

78  
NGX_OK
;

79 
	}
}

83 
	$ngx_os_°©us
(
ngx_log_t
 *
log
)

85 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, 
NGINX_VER
);

87 #ifde‡
NGX_COMPILER


88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "buûàby " 
NGX_COMPILER
);

91 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

92 
	`ngx_os_•ecific_°©us
(
log
);

95 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

97 
æmt
.
æim_cur
,Ñlmt.
æim_max
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_posix_po°_c⁄f_öô
(
ngx_log_t
 *
log
)

106 
ngx_fd_t
 
µ
[2];

108 i‡(
	`pùe
(
µ
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "pipe() failed");

110  
NGX_ERROR
;

113 i‡(
	`dup2
(
µ
[1], 
STDERR_FILENO
) == -1) {

114 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "dup2(STDERR) failed");

115  
NGX_ERROR
;

118 i‡(
µ
[1] > 
STDERR_FILENO
) {

119 i‡(
	`˛o£
(
µ
[1]) == -1) {

120 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "close() failed");

121  
NGX_ERROR
;

125  
NGX_OK
;

126 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

15 
	msigno
;

16 *
	msig«me
;

17 *
	m«me
;

18 (*
	mh™dÀr
)(
	msigno
);

19 } 
	tngx_sig«l_t
;

23 
ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

24 
ngx_sig«l_h™dÀr
(
signo
);

25 
ngx_¥o˚ss_gë_°©us
();

26 
ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
);

29 
	gngx_¨gc
;

30 **
	gngx_¨gv
;

31 **
	gngx_os_¨gv
;

33 
ngx_öt_t
 
	gngx_¥o˚ss_¶Ÿ
;

34 
ngx_sockë_t
 
	gngx_ch™√l
;

35 
ngx_öt_t
 
	gngx_œ°_¥o˚ss
;

36 
ngx_¥o˚ss_t
 
	gngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

39 
ngx_sig«l_t
 
	gsig«ls
[] = {

40 { 
ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

41 "SIG" 
ngx_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

43 
ngx_sig«l_h™dÀr
 },

45 { 
ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
),

46 "SIG" 
ngx_vÆue
(
NGX_REOPEN_SIGNAL
),

48 
ngx_sig«l_h™dÀr
 },

50 { 
ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
),

51 "SIG" 
ngx_vÆue
(
NGX_NOACCEPT_SIGNAL
),

53 
ngx_sig«l_h™dÀr
 },

55 { 
ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
),

56 "SIG" 
ngx_vÆue
(
NGX_TERMINATE_SIGNAL
),

58 
ngx_sig«l_h™dÀr
 },

60 { 
ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

61 "SIG" 
ngx_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

63 
ngx_sig«l_h™dÀr
 },

65 { 
ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

66 "SIG" 
ngx_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

68 
ngx_sig«l_h™dÀr
 },

70 { 
SIGALRM
, "SIGALRM", "", 
ngx_sig«l_h™dÀr
 },

72 { 
SIGINT
, "SIGINT", "", 
ngx_sig«l_h™dÀr
 },

74 { 
SIGIO
, "SIGIO", "", 
ngx_sig«l_h™dÀr
 },

76 { 
SIGCHLD
, "SIGCHLD", "", 
ngx_sig«l_h™dÀr
 },

78 { 
SIGSYS
, "SIGSYS, SIG_IGN", "", 
SIG_IGN
 },

80 { 
SIGPIPE
, "SIGPIPE, SIG_IGN", "", 
SIG_IGN
 },

82 { 0, 
NULL
, "", NULL }

86 
ngx_pid_t


87 
	$ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
,

88 *
«me
, 
ngx_öt_t
 
ª•awn
)

90 
u_l⁄g
 
⁄
;

91 
ngx_pid_t
 
pid
;

92 
ngx_öt_t
 
s
;

94 i‡(
ª•awn
 >= 0) {

95 
s
 = 
ª•awn
;

98 
s
 = 0; s < 
ngx_œ°_¥o˚ss
; s++) {

99 i‡(
ngx_¥o˚s£s
[
s
].
pid
 == -1) {

104 i‡(
s
 =
NGX_MAX_PROCESSES
) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

107 
NGX_MAX_PROCESSES
);

108  
NGX_INVALID_PID
;

113 i‡(
ª•awn
 !
NGX_PROCESS_DETACHED
) {

117 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ngx_¥o˚s£s
[
s
].
ch™√l
) == -1)

119 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

120 "sockë∑ú(ËÁûed whûê•awnög \"%s\"", 
«me
);

121  
NGX_INVALID_PID
;

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

126 
ngx_¥o˚s£s
[
s
].
ch™√l
[0],

127 
ngx_¥o˚s£s
[
s
].
ch™√l
[1]);

129 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0]) == -1) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

131 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

132 
«me
);

133 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

134  
NGX_INVALID_PID
;

137 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1]) == -1) {

138 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

140 
«me
);

141 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

142  
NGX_INVALID_PID
;

145 
⁄
 = 1;

146 i‡(
	`io˘l
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
FIOASYNC
, &
⁄
) == -1) {

147 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

148 "io˘l(FIOASYNCËÁûed whûê•awnög \"%s\"", 
«me
);

149 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

150  
NGX_INVALID_PID
;

153 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETOWN
, 
ngx_pid
) == -1) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

155 "f˙é(F_SETOWNËÁûed whûê•awnög \"%s\"", 
«me
);

156 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

157  
NGX_INVALID_PID
;

160 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

163 
«me
);

164 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

165  
NGX_INVALID_PID
;

168 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

169 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

171 
«me
);

172 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

173  
NGX_INVALID_PID
;

176 
ngx_ch™√l
 = 
ngx_¥o˚s£s
[
s
].
ch™√l
[1];

179 
ngx_¥o˚s£s
[
s
].
ch™√l
[0] = -1;

180 
ngx_¥o˚s£s
[
s
].
ch™√l
[1] = -1;

183 
ngx_¥o˚ss_¶Ÿ
 = 
s
;

186 
pid
 = 
	`f‹k
();

188 
pid
) {

191 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

192 "f‹k(ËÁûed whûê•awnög \"%s\"", 
«me
);

193 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

194  
NGX_INVALID_PID
;

197 
ngx_pid
 = 
	`ngx_gëpid
();

198 
	`¥oc
(
cy˛e
, 
d©a
);

205 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "°¨à%†%P", 
«me
, 
pid
);

207 
ngx_¥o˚s£s
[
s
].
pid
 =Öid;

208 
ngx_¥o˚s£s
[
s
].
exôed
 = 0;

210 i‡(
ª•awn
 >= 0) {

211  
pid
;

214 
ngx_¥o˚s£s
[
s
].
¥oc
 =Öroc;

215 
ngx_¥o˚s£s
[
s
].
d©a
 = data;

216 
ngx_¥o˚s£s
[
s
].
«me
 =Çame;

217 
ngx_¥o˚s£s
[
s
].
exôög
 = 0;

219 
ª•awn
) {

221 
NGX_PROCESS_NORESPAWN
:

222 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

223 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

224 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

227 
NGX_PROCESS_JUST_SPAWN
:

228 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

229 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

230 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

233 
NGX_PROCESS_RESPAWN
:

234 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

235 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

236 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

239 
NGX_PROCESS_JUST_RESPAWN
:

240 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

241 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

242 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

245 
NGX_PROCESS_DETACHED
:

246 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

247 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

248 
ngx_¥o˚s£s
[
s
].
dëached
 = 1;

252 i‡(
s
 =
ngx_œ°_¥o˚ss
) {

253 
ngx_œ°_¥o˚ss
++;

256  
pid
;

257 
	}
}

260 
ngx_pid_t


261 
	$ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
)

263  
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_execuã_¥oc
, 
˘x
, ctx->
«me
,

264 
NGX_PROCESS_DETACHED
);

265 
	}
}

269 
	$ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

271 
ngx_exec_˘x_t
 *
˘x
 = 
d©a
;

273 i‡(
	`execve
(
˘x
->
∑th
, ctx->
¨gv
, ctx->
ívp
) == -1) {

274 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

276 
˘x
->
«me
, ctx->
∑th
);

279 
	`exô
(1);

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_öô_sig«ls
(
ngx_log_t
 *
log
)

286 
ngx_sig«l_t
 *
sig
;

287 
siga˘i⁄
 
ß
;

289 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

290 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

291 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

292 
	`sigem±y£t
(&
ß
.
ß_mask
);

293 i‡(
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
) == -1) {

294 #i‡(
NGX_VALGRIND
)

295 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

296 "siga˘i⁄(%sËÁûed, ign‹ed", 
sig
->
sig«me
);

298 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

299 "siga˘i⁄(%sËÁûed", 
sig
->
sig«me
);

300  
NGX_ERROR
;

305  
NGX_OK
;

306 
	}
}

310 
	$ngx_sig«l_h™dÀr
(
signo
)

312 *
a˘i⁄
;

313 
ngx_öt_t
 
ign‹e
;

314 
ngx_îr_t
 
îr
;

315 
ngx_sig«l_t
 *
sig
;

317 
ign‹e
 = 0;

319 
îr
 = 
ngx_î∫o
;

321 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

322 i‡(
sig
->
signo
 == signo) {

327 
	`ngx_time_sigß„_upd©e
();

329 
a˘i⁄
 = "";

331 
ngx_¥o˚ss
) {

333 
NGX_PROCESS_MASTER
:

334 
NGX_PROCESS_SINGLE
:

335 
signo
) {

337 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

338 
ngx_quô
 = 1;

339 
a˘i⁄
 = ", shutting down";

342 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

343 
SIGINT
:

344 
ngx_ãrmö©e
 = 1;

345 
a˘i⁄
 = ",Éxiting";

348 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

349 i‡(
ngx_d´m⁄ized
) {

350 
ngx_nﬂc˚±
 = 1;

351 
a˘i⁄
 = ", stopáccepting connections";

355 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

356 
ngx_ªc⁄figuª
 = 1;

357 
a˘i⁄
 = ",Ñeconfiguring";

360 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

361 
ngx_ª›í
 = 1;

362 
a˘i⁄
 = ",ÑeopeningÜogs";

365 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

366 i‡(
	`gëµid
(Ë> 1 || 
ngx_√w_bö¨y
 > 0) {

375 
a˘i⁄
 = ", ignoring";

376 
ign‹e
 = 1;

380 
ngx_ch™ge_bö¨y
 = 1;

381 
a˘i⁄
 = ", changing binary";

384 
SIGALRM
:

385 
ngx_sigÆrm
 = 1;

388 
SIGIO
:

389 
ngx_sigio
 = 1;

392 
SIGCHLD
:

393 
ngx_ª≠
 = 1;

399 
NGX_PROCESS_WORKER
:

400 
NGX_PROCESS_HELPER
:

401 
signo
) {

403 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

404 i‡(!
ngx_d´m⁄ized
) {

407 
ngx_debug_quô
 = 1;

408 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

409 
ngx_quô
 = 1;

410 
a˘i⁄
 = ", shutting down";

413 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

414 
SIGINT
:

415 
ngx_ãrmö©e
 = 1;

416 
a˘i⁄
 = ",Éxiting";

419 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

420 
ngx_ª›í
 = 1;

421 
a˘i⁄
 = ",ÑeopeningÜogs";

424 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

425 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

426 
SIGIO
:

427 
a˘i⁄
 = ", ignoring";

434 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

435 "sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄
);

437 i‡(
ign‹e
) {

438 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 0,

444 i‡(
signo
 =
SIGCHLD
) {

445 
	`ngx_¥o˚ss_gë_°©us
();

448 
	`ngx_£t_î∫o
(
îr
);

449 
	}
}

453 
	$ngx_¥o˚ss_gë_°©us
()

455 
°©us
;

456 *
¥o˚ss
;

457 
ngx_pid_t
 
pid
;

458 
ngx_îr_t
 
îr
;

459 
ngx_öt_t
 
i
;

460 
ngx_uöt_t
 
⁄e
;

462 
⁄e
 = 0;

465 
pid
 = 
	`waôpid
(-1, &
°©us
, 
WNOHANG
);

467 i‡(
pid
 == 0) {

471 i‡(
pid
 == -1) {

472 
îr
 = 
ngx_î∫o
;

474 i‡(
îr
 =
NGX_EINTR
) {

478 i‡(
îr
 =
NGX_ECHILD
 && 
⁄e
) {

491 i‡(
îr
 =
NGX_ECHILD
) {

492 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ngx_cy˛e
->
log
, 
îr
,

497 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

503 
⁄e
 = 1;

504 
¥o˚ss
 = "unknownÖrocess";

506 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

507 i‡(
ngx_¥o˚s£s
[
i
].
pid
 ==Öid) {

508 
ngx_¥o˚s£s
[
i
].
°©us
 = status;

509 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

510 
¥o˚ss
 = 
ngx_¥o˚s£s
[
i
].
«me
;

515 i‡(
	`WTERMSIG
(
°©us
)) {

516 #ifde‡
WCOREDUMP


517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

519 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
),

520 
	`WCOREDUMP
(
°©us
) ? " (core dumped)" : "");

522 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

524 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
));

528 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

530 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

533 i‡(
	`WEXITSTATUS
(
°©us
Ë=2 && 
ngx_¥o˚s£s
[
i
].
ª•awn
) {

534 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

537 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

538 
ngx_¥o˚s£s
[
i
].
ª•awn
 = 0;

541 
	`ngx_u∆ock_muãxes
(
pid
);

543 
	}
}

547 
	$ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
)

549 
ngx_uöt_t
 
i
;

550 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

551 
ngx_li°_∑π_t
 *
∑π
;

552 
ngx_¶ab_poﬁ_t
 *
•
;

559 i‡(
ngx_ac˚±_muãx_±r
) {

560 (Ë
	`ngx_shmtx_f‹˚_u∆ock
(&
ngx_ac˚±_muãx
, 
pid
);

568 
∑π
 = (
ngx_li°_∑π_t
 *Ë&
ngx_cy˛e
->
sh¨ed_mem‹y
.part;

569 
shm_z⁄e
 = 
∑π
->
ñts
;

571 
i
 = 0; ; i++) {

573 i‡(
i
 >
∑π
->
√…s
) {

574 i‡(
∑π
->
√xt
 =
NULL
) {

577 
∑π
 =Ö¨t->
√xt
;

578 
shm_z⁄e
 = 
∑π
->
ñts
;

579 
i
 = 0;

582 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
[
i
].
shm
.
addr
;

584 i‡(
	`ngx_shmtx_f‹˚_u∆ock
(&
•
->
muãx
, 
pid
)) {

585 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

587 &
shm_z⁄e
[
i
].
shm
.
«me
, 
pid
);

590 
	}
}

594 
	$ngx_debug_poöt
()

596 
ngx_c‹e_c⁄f_t
 *
ccf
;

598 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

599 
ngx_c‹e_moduÀ
);

601 
ccf
->
debug_poöts
) {

603 
NGX_DEBUG_POINTS_STOP
:

604 
	`øi£
(
SIGSTOP
);

607 
NGX_DEBUG_POINTS_ABORT
:

608 
	`ngx_ab‹t
();

610 
	}
}

613 
ngx_öt_t


614 
	$ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
«me
, 
ngx_öt_t
 
pid
)

616 
ngx_sig«l_t
 *
sig
;

618 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

619 i‡(
	`ngx_°rcmp
(
«me
, 
sig
->name) == 0) {

620 i‡(
	`kûl
(
pid
, 
sig
->
signo
) != -1) {

624 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

625 "kûl(%P, %dËÁûed", 
pid
, 
sig
->
signo
);

630 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process.h

8 #i‚de‡
_NGX_PROCESS_H_INCLUDED_


9 
	#_NGX_PROCESS_H_INCLUDED_


	)

12 
	~<ngx_£èfföôy.h
>

13 
	~<ngx_£çro˘ôÀ.h
>

16 
pid_t
 
	tngx_pid_t
;

18 
	#NGX_INVALID_PID
 -1

	)

20 (*
	tngx_•awn_¥oc_±
Ë(
	tngx_cy˛e_t
 *
	tcy˛e
, *
	td©a
);

23 
ngx_pid_t
 
pid
;

24 
°©us
;

25 
ngx_sockë_t
 
ch™√l
[2];

27 
ngx_•awn_¥oc_±
 
¥oc
;

28 *
d©a
;

29 *
«me
;

31 
ª•awn
:1;

32 
ju°_•awn
:1;

33 
dëached
:1;

34 
exôög
:1;

35 
exôed
:1;

36 } 
	tngx_¥o˚ss_t
;

40 *
∑th
;

41 *
«me
;

42 *c⁄° *
¨gv
;

43 *c⁄° *
ívp
;

44 } 
	tngx_exec_˘x_t
;

47 
	#NGX_MAX_PROCESSES
 1024

	)

49 
	#NGX_PROCESS_NORESPAWN
 -1

	)

50 
	#NGX_PROCESS_JUST_SPAWN
 -2

	)

51 
	#NGX_PROCESS_RESPAWN
 -3

	)

52 
	#NGX_PROCESS_JUST_RESPAWN
 -4

	)

53 
	#NGX_PROCESS_DETACHED
 -5

	)

56 
	#ngx_gëpid
 
gëpid


	)

58 #i‚de‡
ngx_log_pid


59 
	#ngx_log_pid
 
ngx_pid


	)

63 
ngx_pid_t
 
	`ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
,

64 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
, *
«me
, 
ngx_öt_t
 
ª•awn
);

65 
ngx_pid_t
 
	`ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
	`ngx_öô_sig«ls
(
ngx_log_t
 *
log
);

67 
	`ngx_debug_poöt
();

70 #i‡(
NGX_HAVE_SCHED_YIELD
)

71 
	#ngx_sched_yõld
(Ë
	`sched_yõld
()

	)

73 
	#ngx_sched_yõld
(Ë
	`u¶ìp
(1)

	)

77 
ngx_¨gc
;

78 **
ngx_¨gv
;

79 **
ngx_os_¨gv
;

81 
ngx_pid_t
 
ngx_pid
;

82 
ngx_sockë_t
 
ngx_ch™√l
;

83 
ngx_öt_t
 
ngx_¥o˚ss_¶Ÿ
;

84 
ngx_öt_t
 
ngx_œ°_¥o˚ss
;

85 
ngx_¥o˚ss_t
 
ngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

14 
ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,

15 
ngx_öt_t
 
ty≥
);

16 
ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
,

17 
ngx_uöt_t
 
ª•awn
);

18 
ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
);

19 
ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
);

20 
ngx_uöt_t
 
ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

23 
ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
);

24 
ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
);

26 #i‡(
NGX_THREADS
)

27 
ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
);

28 
ngx_thªad_vÆue_t
 
ngx_w‹kî_thªad_cy˛e
(*
d©a
);

30 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

31 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

35 
ngx_uöt_t
 
	gngx_¥o˚ss
;

36 
ngx_pid_t
 
	gngx_pid
;

37 
ngx_uöt_t
 
	gngx_thªaded
;

39 
sig_©omic_t
 
	gngx_ª≠
;

40 
sig_©omic_t
 
	gngx_sigio
;

41 
sig_©omic_t
 
	gngx_sigÆrm
;

42 
sig_©omic_t
 
	gngx_ãrmö©e
;

43 
sig_©omic_t
 
	gngx_quô
;

44 
sig_©omic_t
 
	gngx_debug_quô
;

45 
ngx_uöt_t
 
	gngx_exôög
;

46 
sig_©omic_t
 
	gngx_ªc⁄figuª
;

47 
sig_©omic_t
 
	gngx_ª›í
;

49 
sig_©omic_t
 
	gngx_ch™ge_bö¨y
;

50 
ngx_pid_t
 
	gngx_√w_bö¨y
;

51 
ngx_uöt_t
 
	gngx_öhîôed
;

52 
ngx_uöt_t
 
	gngx_d´m⁄ized
;

54 
sig_©omic_t
 
	gngx_nﬂc˚±
;

55 
ngx_uöt_t
 
	gngx_nﬂc˚±ög
;

56 
ngx_uöt_t
 
	gngx_ª°¨t
;

59 #i‡(
NGX_THREADS
)

60 vﬁ©ûê
ngx_thªad_t
 
	gngx_thªads
[
NGX_MAX_THREADS
];

61 
ngx_öt_t
 
	gngx_thªads_n
;

65 
u_ch¨
 
	gma°î_¥o˚ss
[] = "masterÖrocess";

68 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_m™agî_˘x
 = {

69 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
, "cache managerÖrocess", 0

72 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_lﬂdî_˘x
 = {

73 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
, "cacheÜoaderÖrocess", 60000

77 
ngx_cy˛e_t
 
	gngx_exô_cy˛e
;

78 
ngx_log_t
 
	gngx_exô_log
;

79 
ngx_›í_fûe_t
 
	gngx_exô_log_fûe
;

83 
	$ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

85 *
tôÀ
;

86 
u_ch¨
 *
p
;

87 
size_t
 
size
;

88 
ngx_öt_t
 
i
;

89 
ngx_uöt_t
 
n
, 
sigio
;

90 
sig£t_t
 
£t
;

91 
ôimîvÆ
 
ôv
;

92 
ngx_uöt_t
 
live
;

93 
ngx_m£c_t
 
dñay
;

94 
ngx_li°íög_t
 *
ls
;

95 
ngx_c‹e_c⁄f_t
 *
ccf
;

97 
	`sigem±y£t
(&
£t
);

98 
	`sigadd£t
(&
£t
, 
SIGCHLD
);

99 
	`sigadd£t
(&
£t
, 
SIGALRM
);

100 
	`sigadd£t
(&
£t
, 
SIGIO
);

101 
	`sigadd£t
(&
£t
, 
SIGINT
);

102 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

103 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

104 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
));

105 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

106 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

107 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

109 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

114 
	`sigem±y£t
(&
£t
);

117 
size
 = (
ma°î_¥o˚ss
);

119 
i
 = 0; i < 
ngx_¨gc
; i++) {

120 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

123 
tôÀ
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
size
);

125 
p
 = 
	`ngx_˝ymem
(
tôÀ
, 
ma°î_¥o˚ss
, (master_process) - 1);

126 
i
 = 0; i < 
ngx_¨gc
; i++) {

127 *
p
++ = ' ';

128 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
], 
size
);

131 
	`ngx_£çro˘ôÀ
(
tôÀ
);

134 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

136 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

137 
NGX_PROCESS_RESPAWN
);

138 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

140 
ngx_√w_bö¨y
 = 0;

141 
dñay
 = 0;

142 
sigio
 = 0;

143 
live
 = 1;

146 i‡(
dñay
) {

147 i‡(
ngx_sigÆrm
) {

148 
sigio
 = 0;

149 
dñay
 *= 2;

150 
ngx_sigÆrm
 = 0;

153 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

154 "ãrmö©i⁄ cy˛e: %d", 
dñay
);

156 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 0;

157 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = 0;

158 
ôv
.
ô_vÆue
.
tv_£c
 = 
dñay
 / 1000;

159 
ôv
.
ô_vÆue
.
tv_u£c
 = (
dñay
 % 1000 ) * 1000;

161 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

162 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

167 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "sigsuspend");

169 
	`sigsu•íd
(&
£t
);

171 
	`ngx_time_upd©e
();

173 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

174 "wakêup, sigiÿ%i", 
sigio
);

176 i‡(
ngx_ª≠
) {

177 
ngx_ª≠
 = 0;

178 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "reap children");

180 
live
 = 
	`ngx_ª≠_chûdªn
(
cy˛e
);

183 i‡(!
live
 && (
ngx_ãrmö©e
 || 
ngx_quô
)) {

184 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

187 i‡(
ngx_ãrmö©e
) {

188 i‡(
dñay
 == 0) {

189 
dñay
 = 50;

192 i‡(
sigio
) {

193 
sigio
--;

197 
sigio
 = 
ccf
->
w‹kî_¥o˚s£s
 + 2 ;

199 i‡(
dñay
 > 1000) {

200 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
, 
SIGKILL
);

202 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

203 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

209 i‡(
ngx_quô
) {

210 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

211 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

213 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

214 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

215 i‡(
	`ngx_˛o£_sockë
(
ls
[
n
].
fd
) == -1) {

216 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

217 
ngx_˛o£_sockë_n
 " %V failed",

218 &
ls
[
n
].
addr_ãxt
);

221 
cy˛e
->
li°íög
.
√…s
 = 0;

226 i‡(
ngx_ªc⁄figuª
) {

227 
ngx_ªc⁄figuª
 = 0;

229 i‡(
ngx_√w_bö¨y
) {

230 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

231 
NGX_PROCESS_RESPAWN
);

232 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

233 
ngx_nﬂc˚±ög
 = 0;

238 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

240 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

241 i‡(
cy˛e
 =
NULL
) {

242 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

246 
ngx_cy˛e
 = 
cy˛e
;

247 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

248 
ngx_c‹e_moduÀ
);

249 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

250 
NGX_PROCESS_JUST_RESPAWN
);

251 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 1);

254 
	`ngx_m¶ìp
(100);

256 
live
 = 1;

257 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

258 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

261 i‡(
ngx_ª°¨t
) {

262 
ngx_ª°¨t
 = 0;

263 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

264 
NGX_PROCESS_RESPAWN
);

265 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

266 
live
 = 1;

269 i‡(
ngx_ª›í
) {

270 
ngx_ª›í
 = 0;

271 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

272 
	`ngx_ª›í_fûes
(
cy˛e
, 
ccf
->
u£r
);

273 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

274 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

277 i‡(
ngx_ch™ge_bö¨y
) {

278 
ngx_ch™ge_bö¨y
 = 0;

279 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "changing binary");

280 
ngx_√w_bö¨y
 = 
	`ngx_exec_√w_bö¨y
(
cy˛e
, 
ngx_¨gv
);

283 i‡(
ngx_nﬂc˚±
) {

284 
ngx_nﬂc˚±
 = 0;

285 
ngx_nﬂc˚±ög
 = 1;

286 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

287 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

290 
	}
}

294 
	$ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

296 
ngx_uöt_t
 
i
;

298 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

300 
	`exô
(2);

303 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

304 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

305 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

307 
	`exô
(2);

313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

315 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

317 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

319 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

320 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

321 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

325 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

328 i‡(
ngx_ªc⁄figuª
) {

329 
ngx_ªc⁄figuª
 = 0;

330 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

332 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

333 i‡(
cy˛e
 =
NULL
) {

334 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

338 
ngx_cy˛e
 = 
cy˛e
;

341 i‡(
ngx_ª›í
) {

342 
ngx_ª›í
 = 0;

343 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

344 
	`ngx_ª›í_fûes
(
cy˛e
, (
ngx_uid_t
) -1);

347 
	}
}

351 
	$ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,Çgx_öt_à
ty≥
)

353 
ngx_öt_t
 
i
;

354 
ngx_ch™√l_t
 
ch
;

356 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "start workerÖrocesses");

358 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

360 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

362 
i
 = 0; i < 
n
; i++) {

364 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_w‹kî_¥o˚ss_cy˛e
,

365 (*Ë(
öçå_t
Ë
i
, "w‹kîÖro˚ss", 
ty≥
);

367 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

368 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

369 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

371 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

373 
	}
}

377 
	$ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ª•awn
)

379 
ngx_uöt_t
 
i
, 
m™agî
, 
lﬂdî
;

380 
ngx_∑th_t
 **
∑th
;

381 
ngx_ch™√l_t
 
ch
;

383 
m™agî
 = 0;

384 
lﬂdî
 = 0;

386 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

387 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

389 i‡(
∑th
[
i
]->
m™agî
) {

390 
m™agî
 = 1;

393 i‡(
∑th
[
i
]->
lﬂdî
) {

394 
lﬂdî
 = 1;

398 i‡(
m™agî
 == 0) {

402 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

403 &
ngx_ˇche_m™agî_˘x
, "cache managerÖrocess",

404 
ª•awn
 ? 
NGX_PROCESS_JUST_RESPAWN
 : 
NGX_PROCESS_RESPAWN
);

406 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

408 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

409 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

410 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

411 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

413 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

415 i‡(
lﬂdî
 == 0) {

419 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

420 &
ngx_ˇche_lﬂdî_˘x
, "cacheÜoaderÖrocess",

421 
ª•awn
 ? 
NGX_PROCESS_JUST_SPAWN
 : 
NGX_PROCESS_NORESPAWN
);

423 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

424 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

425 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

426 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

428 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

429 
	}
}

433 
	$ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
)

435 
ngx_öt_t
 
i
;

437 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

439 i‡(
i
 =
ngx_¥o˚ss_¶Ÿ


440 || 
ngx_¥o˚s£s
[
i
].
pid
 == -1

441 || 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] == -1)

446 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

448 
ch
->
¶Ÿ
, ch->
pid
, ch->
fd
,

449 
i
, 
ngx_¥o˚s£s
[i].
pid
,

450 
ngx_¥o˚s£s
[
i
].
ch™√l
[0]);

454 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

455 
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

457 
	}
}

461 
	$ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
)

463 
ngx_öt_t
 
i
;

464 
ngx_îr_t
 
îr
;

465 
ngx_ch™√l_t
 
ch
;

467 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

469 #i‡(
NGX_BROKEN_SCM_RIGHTS
)

471 
ch
.
comm™d
 = 0;

475 
signo
) {

477 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

478 
ch
.
comm™d
 = 
NGX_CMD_QUIT
;

481 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

482 
ch
.
comm™d
 = 
NGX_CMD_TERMINATE
;

485 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

486 
ch
.
comm™d
 = 
NGX_CMD_REOPEN
;

490 
ch
.
comm™d
 = 0;

495 
ch
.
fd
 = -1;

498 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

500 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

502 
i
,

503 
ngx_¥o˚s£s
[
i
].
pid
,

504 
ngx_¥o˚s£s
[
i
].
exôög
,

505 
ngx_¥o˚s£s
[
i
].
exôed
,

506 
ngx_¥o˚s£s
[
i
].
dëached
,

507 
ngx_¥o˚s£s
[
i
].
ª•awn
,

508 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

510 i‡(
ngx_¥o˚s£s
[
i
].
dëached
 ||Çgx_¥o˚s£s[i].
pid
 == -1) {

514 i‡(
ngx_¥o˚s£s
[
i
].
ju°_•awn
) {

515 
ngx_¥o˚s£s
[
i
].
ju°_•awn
 = 0;

519 i‡(
ngx_¥o˚s£s
[
i
].
exôög


520 && 
signo
 =
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
))

525 i‡(
ch
.
comm™d
) {

526 i‡(
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

527 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
)

528 =
NGX_OK
)

530 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

531 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

538 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

539 "kû»(%P, %d)", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

541 i‡(
	`kûl
(
ngx_¥o˚s£s
[
i
].
pid
, 
signo
) == -1) {

542 
îr
 = 
ngx_î∫o
;

543 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

544 "kûl(%P, %dËÁûed", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

546 i‡(
îr
 =
NGX_ESRCH
) {

547 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

548 
ngx_¥o˚s£s
[
i
].
exôög
 = 0;

549 
ngx_ª≠
 = 1;

555 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

556 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

559 
	}
}

562 
ngx_uöt_t


563 
	$ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
)

565 
ngx_öt_t
 
i
, 
n
;

566 
ngx_uöt_t
 
live
;

567 
ngx_ch™√l_t
 
ch
;

568 
ngx_c‹e_c⁄f_t
 *
ccf
;

570 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

572 
ch
.
comm™d
 = 
NGX_CMD_CLOSE_CHANNEL
;

573 
ch
.
fd
 = -1;

575 
live
 = 0;

576 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

578 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

580 
i
,

581 
ngx_¥o˚s£s
[
i
].
pid
,

582 
ngx_¥o˚s£s
[
i
].
exôög
,

583 
ngx_¥o˚s£s
[
i
].
exôed
,

584 
ngx_¥o˚s£s
[
i
].
dëached
,

585 
ngx_¥o˚s£s
[
i
].
ª•awn
,

586 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

588 i‡(
ngx_¥o˚s£s
[
i
].
pid
 == -1) {

592 i‡(
ngx_¥o˚s£s
[
i
].
exôed
) {

594 i‡(!
ngx_¥o˚s£s
[
i
].
dëached
) {

595 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
, 
cy˛e
->
log
);

597 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] = -1;

598 
ngx_¥o˚s£s
[
i
].
ch™√l
[1] = -1;

600 
ch
.
pid
 = 
ngx_¥o˚s£s
[
i
].pid;

601 
ch
.
¶Ÿ
 = 
i
;

603 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

604 i‡(
ngx_¥o˚s£s
[
n
].
exôed


605 || 
ngx_¥o˚s£s
[
n
].
pid
 == -1

606 || 
ngx_¥o˚s£s
[
n
].
ch™√l
[0] == -1)

611 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

613 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[
n
].pid);

617 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
n
].
ch™√l
[0],

618 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

622 i‡(
ngx_¥o˚s£s
[
i
].
ª•awn


623 && !
ngx_¥o˚s£s
[
i
].
exôög


624 && !
ngx_ãrmö©e


625 && !
ngx_quô
)

627 i‡(
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_¥o˚s£s
[
i
].
¥oc
,

628 
ngx_¥o˚s£s
[
i
].
d©a
,

629 
ngx_¥o˚s£s
[
i
].
«me
, i)

630 =
NGX_INVALID_PID
)

632 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

634 
ngx_¥o˚s£s
[
i
].
«me
);

639 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

640 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

641 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

642 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

644 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

646 
live
 = 1;

651 i‡(
ngx_¥o˚s£s
[
i
].
pid
 =
ngx_√w_bö¨y
) {

653 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

654 
ngx_c‹e_moduÀ
);

656 i‡(
	`ngx_ª«me_fûe
((*Ë
ccf
->
ﬁdpid
.
d©a
,

657 (*Ë
ccf
->
pid
.
d©a
)

658 =
NGX_FILE_ERROR
)

660 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

661 
ngx_ª«me_fûe_n
 " %s backÅo %s failed "

663 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
ngx_¨gv
[0]);

666 
ngx_√w_bö¨y
 = 0;

667 i‡(
ngx_nﬂc˚±ög
) {

668 
ngx_ª°¨t
 = 1;

669 
ngx_nﬂc˚±ög
 = 0;

673 i‡(
i
 =
ngx_œ°_¥o˚ss
 - 1) {

674 
ngx_œ°_¥o˚ss
--;

677 
ngx_¥o˚s£s
[
i
].
pid
 = -1;

680 } i‡(
ngx_¥o˚s£s
[
i
].
exôög
 || !ngx_¥o˚s£s[i].
dëached
) {

681 
live
 = 1;

685  
live
;

686 
	}
}

690 
	$ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

692 
ngx_uöt_t
 
i
;

694 
	`ngx_dñëe_pidfûe
(
cy˛e
);

696 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exit");

698 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

699 i‡(
ngx_moduÀs
[
i
]->
exô_ma°î
) {

700 
ngx_moduÀs
[
i
]->
	`exô_ma°î
(
cy˛e
);

704 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

713 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

715 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

716 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

717 
ngx_exô_log
.
√xt
 = 
NULL
;

719 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

720 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

721 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

722 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

724 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

726 
	`exô
(0);

727 
	}
}

731 
	$ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

733 
ngx_öt_t
 
w‹kî
 = (
öçå_t
Ë
d©a
;

735 
ngx_uöt_t
 
i
;

736 
ngx_c⁄√˘i⁄_t
 *
c
;

738 
ngx_¥o˚ss
 = 
NGX_PROCESS_WORKER
;

740 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, 
w‹kî
);

742 
	`ngx_£çro˘ôÀ
("workerÖrocess");

744 #i‡(
NGX_THREADS
)

746 
ngx_öt_t
 
n
;

747 
ngx_îr_t
 
îr
;

748 
ngx_c‹e_c⁄f_t
 *
ccf
;

750 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

752 i‡(
ngx_thªads_n
) {

753 i‡(
	`ngx_öô_thªads
(
ngx_thªads_n
, 
ccf
->
thªad_°ack_size
, 
cy˛e
)

754 =
NGX_ERROR
)

757 
	`exô
(2);

760 
îr
 = 
	`ngx_thªad_key_¸óã
(&
ngx_c‹e_és_key
);

761 i‡(
îr
 != 0) {

762 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

763 
ngx_thªad_key_¸óã_n
 " failed");

765 
	`exô
(2);

768 
n
 = 0;Ç < 
ngx_thªads_n
;Ç++) {

770 
ngx_thªads
[
n
].
cv
 = 
	`ngx_c⁄d_öô
(
cy˛e
->
log
);

772 i‡(
ngx_thªads
[
n
].
cv
 =
NULL
) {

774 
	`exô
(2);

777 i‡(
	`ngx_¸óã_thªad
((
ngx_tid_t
 *Ë&
ngx_thªads
[
n
].
tid
,

778 
ngx_w‹kî_thªad_cy˛e
,

779 (*Ë&
ngx_thªads
[
n
], 
cy˛e
->
log
)

783 
	`exô
(2);

792 i‡(
ngx_exôög
) {

794 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

796 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

800 i‡(
c
[
i
].
fd
 !-1 && c[i].
idÀ
) {

801 
c
[
i
].
˛o£
 = 1;

802 
c
[
i
].
ªad
->
	`h™dÀr
(c[i].read);

806 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =ngx_evít_timî_rbåì.
£¡öñ
)

808 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

810 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

814 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

816 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

818 i‡(
ngx_ãrmö©e
) {

819 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

821 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

824 i‡(
ngx_quô
) {

825 
ngx_quô
 = 0;

826 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

828 
	`ngx_£çro˘ôÀ
("workerÖrocess is shutting down");

830 i‡(!
ngx_exôög
) {

831 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

832 
ngx_exôög
 = 1;

836 i‡(
ngx_ª›í
) {

837 
ngx_ª›í
 = 0;

838 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

839 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

842 
	}
}

846 
	$ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
)

848 
sig£t_t
 
£t
;

849 
uöt64_t
 
˝u_afföôy
;

850 
ngx_öt_t
 
n
;

851 
ngx_uöt_t
 
i
;

852 
æimô
 
æmt
;

853 
ngx_c‹e_c⁄f_t
 *
ccf
;

854 
ngx_li°íög_t
 *
ls
;

856 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

858 
	`exô
(2);

861 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

863 i‡(
w‹kî
 >0 && 
ccf
->
¥i‹ôy
 != 0) {

864 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 
ccf
->
¥i‹ôy
) == -1) {

865 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

866 "£çri‹ôy(%dËÁûed", 
ccf
->
¥i‹ôy
);

870 i‡(
ccf
->
æimô_nofûe
 !
NGX_CONF_UNSET
) {

871 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

872 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

874 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

875 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

877 
ccf
->
æimô_nofûe
);

881 i‡(
ccf
->
æimô_c‹e
 !
NGX_CONF_UNSET
) {

882 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

883 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

885 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æmt
) == -1) {

886 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

888 
ccf
->
æimô_c‹e
);

892 #ifde‡
RLIMIT_SIGPENDING


893 i‡(
ccf
->
æimô_sig≥ndög
 !
NGX_CONF_UNSET
) {

894 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

895 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

897 i‡(
	`£ålimô
(
RLIMIT_SIGPENDING
, &
æmt
) == -1) {

898 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

900 
ccf
->
æimô_sig≥ndög
);

905 i‡(
	`gëeuid
() == 0) {

906 i‡(
	`£tgid
(
ccf
->
group
) == -1) {

907 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

908 "£tgid(%dËÁûed", 
ccf
->
group
);

910 
	`exô
(2);

913 i‡(
	`öôgroups
(
ccf
->
u£∫ame
, ccf->
group
) == -1) {

914 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

916 
ccf
->
u£∫ame
, ccf->
group
);

919 i‡(
	`£tuid
(
ccf
->
u£r
) == -1) {

920 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

921 "£tuid(%dËÁûed", 
ccf
->
u£r
);

923 
	`exô
(2);

927 i‡(
w‹kî
 >= 0) {

928 
˝u_afföôy
 = 
	`ngx_gë_˝u_afföôy
(
w‹kî
);

930 i‡(
˝u_afföôy
) {

931 
	`ngx_£èfföôy
(
˝u_afföôy
, 
cy˛e
->
log
);

935 #i‡(
NGX_HAVE_PR_SET_DUMPABLE
)

939 i‡(
	`¥˘l
(
PR_SET_DUMPABLE
, 1, 0, 0, 0) == -1) {

940 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

946 i‡(
ccf
->
w‹kög_dúe˘‹y
.
Àn
) {

947 i‡(
	`chdú
((*Ë
ccf
->
w‹kög_dúe˘‹y
.
d©a
) == -1) {

948 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

949 "chdú(\"%s\"ËÁûed", 
ccf
->
w‹kög_dúe˘‹y
.
d©a
);

951 
	`exô
(2);

955 
	`sigem±y£t
(&
£t
);

957 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
£t
, 
NULL
) == -1) {

958 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

962 
	`§™dom
((
ngx_pid
 << 16Ë^ 
	`ngx_time
());

968 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

969 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

970 
ls
[
i
].
¥evious
 = 
NULL
;

973 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

974 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

975 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

977 
	`exô
(2);

982 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

984 i‡(
ngx_¥o˚s£s
[
n
].
pid
 == -1) {

988 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
) {

992 i‡(
ngx_¥o˚s£s
[
n
].
ch™√l
[1] == -1) {

996 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
n
].
ch™√l
[1]) == -1) {

997 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1002 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0]) == -1) {

1003 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1008 
ngx_œ°_¥o˚ss
 = 0;

1011 i‡(
	`ngx_add_ch™√l_evít
(
cy˛e
, 
ngx_ch™√l
, 
NGX_READ_EVENT
,

1012 
ngx_ch™√l_h™dÀr
)

1013 =
NGX_ERROR
)

1016 
	`exô
(2);

1018 
	}
}

1022 
	$ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1024 
ngx_uöt_t
 
i
;

1025 
ngx_c⁄√˘i⁄_t
 *
c
;

1027 #i‡(
NGX_THREADS
)

1028 
ngx_ãrmö©e
 = 1;

1030 
	`ngx_wakeup_w‹kî_thªads
(
cy˛e
);

1033 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1034 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

1035 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

1039 i‡(
ngx_exôög
) {

1040 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

1041 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

1042 i‡(
c
[
i
].
fd
 != -1

1043 && 
c
[
i
].
ªad


1044 && !
c
[
i
].
ªad
->
ac˚±


1045 && !
c
[
i
].
ªad
->
ch™√l


1046 && !
c
[
i
].
ªad
->
ªsﬁvî
)

1048 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

1050 
c
[
i
].
numbî
, c[i].
fd
, i);

1051 
ngx_debug_quô
 = 1;

1055 i‡(
ngx_debug_quô
) {

1056 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "aborting");

1057 
	`ngx_debug_poöt
();

1068 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

1070 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

1071 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

1072 
ngx_exô_log
.
√xt
 = 
NULL
;

1074 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

1075 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

1076 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

1077 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

1079 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

1081 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0, "exit");

1083 
	`exô
(0);

1084 
	}
}

1088 
	$ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
)

1090 
ngx_öt_t
 
n
;

1091 
ngx_ch™√l_t
 
ch
;

1092 
ngx_c⁄√˘i⁄_t
 *
c
;

1094 i‡(
ev
->
timedout
) {

1095 
ev
->
timedout
 = 0;

1099 
c
 = 
ev
->
d©a
;

1101 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "channel handler");

1105 
n
 = 
	`ngx_ªad_ch™√l
(
c
->
fd
, &
ch
, (
ngx_ch™√l_t
), 
ev
->
log
);

1107 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "ch™√l: %i", 
n
);

1109 i‡(
n
 =
NGX_ERROR
) {

1111 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

1112 
	`ngx_dñ_c⁄n
(
c
, 0);

1115 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1119 i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

1120 i‡(
	`ngx_add_evít
(
ev
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

1125 i‡(
n
 =
NGX_AGAIN
) {

1129 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1130 "ch™√»comm™d: %d", 
ch
.
comm™d
);

1132 
ch
.
comm™d
) {

1134 
NGX_CMD_QUIT
:

1135 
ngx_quô
 = 1;

1138 
NGX_CMD_TERMINATE
:

1139 
ngx_ãrmö©e
 = 1;

1142 
NGX_CMD_REOPEN
:

1143 
ngx_ª›í
 = 1;

1146 
NGX_CMD_OPEN_CHANNEL
:

1148 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1150 
ch
.
¶Ÿ
, ch.
pid
, ch.
fd
);

1152 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
pid
 = ch.pid;

1153 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = ch.
fd
;

1156 
NGX_CMD_CLOSE_CHANNEL
:

1158 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1160 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[ch.slot].pid,

1161 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]);

1163 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]) == -1) {

1164 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

1168 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = -1;

1172 
	}
}

1175 #i‡(
NGX_THREADS
)

1178 
	$ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
)

1180 
ngx_öt_t
 
i
;

1181 
ngx_uöt_t
 
live
;

1185 
live
 = 0;

1187 
i
 = 0; i < 
ngx_thªads_n
; i++) {

1188 i‡(
ngx_thªads
[
i
].
°©e
 < 
NGX_THREAD_EXIT
) {

1189 i‡(
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
Ë=
NGX_ERROR
) {

1190 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1193 
live
 = 1;

1197 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_EXIT
) {

1198 
	`ngx_thªad_joö
(
ngx_thªads
[
i
].
tid
, 
NULL
);

1199 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1203 i‡(
live
 == 0) {

1204 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1208 
	`ngx_d⁄e_evíts
(
cy˛e
);

1209 
	`ngx_muãx_de°roy
(
ngx_evít_timî_muãx
);

1210 
	`ngx_muãx_de°roy
(
ngx_po°ed_evíts_muãx
);

1215 
	`ngx_sched_yõld
();

1217 
	}
}

1220 
ngx_thªad_vÆue_t


1221 
	$ngx_w‹kî_thªad_cy˛e
(*
d©a
)

1223 
ngx_thªad_t
 *
thr
 = 
d©a
;

1225 
sig£t_t
 
£t
;

1226 
ngx_îr_t
 
îr
;

1227 
ngx_c‹e_és_t
 *
és
;

1228 
ngx_cy˛e_t
 *
cy˛e
;

1230 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1232 
	`sigem±y£t
(&
£t
);

1233 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

1234 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

1235 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

1237 
îr
 = 
	`ngx_thªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
);

1238 i‡(
îr
) {

1239 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1240 
ngx_thªad_sigmask_n
 " failed");

1241  (
ngx_thªad_vÆue_t
) 1;

1244 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1245 "thªad " 
NGX_TID_T_FMT
 " sèπed", 
	`ngx_thªad_£lf
());

1247 
	`ngx_£âhπôÀ
("workerÅhread");

1249 
és
 = 
	`ngx_ˇŒoc
((
ngx_c‹e_és_t
), 
cy˛e
->
log
);

1250 i‡(
és
 =
NULL
) {

1251  (
ngx_thªad_vÆue_t
) 1;

1254 
îr
 = 
	`ngx_thªad_£t_és
(
ngx_c‹e_és_key
, 
és
);

1255 i‡(
îr
 != 0) {

1256 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1257 
ngx_thªad_£t_és_n
 " failed");

1258  (
ngx_thªad_vÆue_t
) 1;

1261 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

1264 
thr
->
°©e
 = 
NGX_THREAD_FREE
;

1266 i‡(
	`ngx_c⁄d_waô
(
thr
->
cv
, 
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

1267  (
ngx_thªad_vÆue_t
) 1;

1270 i‡(
ngx_ãrmö©e
) {

1271 
thr
->
°©e
 = 
NGX_THREAD_EXIT
;

1273 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

1275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1276 "thªad " 
NGX_TID_T_FMT
 " is done",

1277 
	`ngx_thªad_£lf
());

1279  (
ngx_thªad_vÆue_t
) 0;

1282 
thr
->
°©e
 = 
NGX_THREAD_BUSY
;

1284 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1285  (
ngx_thªad_vÆue_t
) 1;

1288 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1289  (
ngx_thªad_vÆue_t
) 1;

1292 i‡(
ngx_¥o˚ss_ch™ges
) {

1293 i‡(
	`ngx_¥o˚ss_ch™ges
(
cy˛e
, 1Ë=
NGX_ERROR
) {

1294  (
ngx_thªad_vÆue_t
) 1;

1298 
	}
}

1304 
	$ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

1306 
ngx_ˇche_m™agî_˘x_t
 *
˘x
 = 
d©a
;

1308 *
idít
[4];

1309 
ngx_evít_t
 
ev
;

1315 
ngx_¥o˚ss
 = 
NGX_PROCESS_HELPER
;

1317 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

1320 
cy˛e
->
c⁄√˘i⁄_n
 = 512;

1322 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, -1);

1324 
	`ngx_memzîo
(&
ev
, (
ngx_evít_t
));

1325 
ev
.
h™dÀr
 = 
˘x
->handler;

1326 
ev
.
d©a
 = 
idít
;

1327 
ev
.
log
 = 
cy˛e
->log;

1328 
idít
[3] = (*) -1;

1330 
ngx_u£_ac˚±_muãx
 = 0;

1332 
	`ngx_£çro˘ôÀ
(
˘x
->
«me
);

1334 
	`ngx_add_timî
(&
ev
, 
˘x
->
dñay
);

1338 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1339 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

1340 
	`exô
(0);

1343 i‡(
ngx_ª›í
) {

1344 
ngx_ª›í
 = 0;

1345 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

1346 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

1349 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

1351 
	}
}

1355 
	$ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1357 
time_t
 
√xt
, 
n
;

1358 
ngx_uöt_t
 
i
;

1359 
ngx_∑th_t
 **
∑th
;

1361 
√xt
 = 60 * 60;

1363 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

1364 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

1366 i‡(
∑th
[
i
]->
m™agî
) {

1367 
n
 = 
∑th
[
i
]->
	`m™agî
’©h[i]->
d©a
);

1369 
√xt
 = (
n
 <=Çext) ?Ç :Çext;

1371 
	`ngx_time_upd©e
();

1375 i‡(
√xt
 == 0) {

1376 
√xt
 = 1;

1379 
	`ngx_add_timî
(
ev
, 
√xt
 * 1000);

1380 
	}
}

1384 
	$ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1386 
ngx_uöt_t
 
i
;

1387 
ngx_∑th_t
 **
∑th
;

1388 
ngx_cy˛e_t
 *
cy˛e
;

1390 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1392 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

1393 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

1395 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1399 i‡(
∑th
[
i
]->
lﬂdî
) {

1400 
∑th
[
i
]->
	`lﬂdî
’©h[i]->
d©a
);

1401 
	`ngx_time_upd©e
();

1405 
	`exô
(0);

1406 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process_cycle.h

8 #i‚de‡
_NGX_PROCESS_CYCLE_H_INCLUDED_


9 
	#_NGX_PROCESS_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_CMD_OPEN_CHANNEL
 1

	)

17 
	#NGX_CMD_CLOSE_CHANNEL
 2

	)

18 
	#NGX_CMD_QUIT
 3

	)

19 
	#NGX_CMD_TERMINATE
 4

	)

20 
	#NGX_CMD_REOPEN
 5

	)

23 
	#NGX_PROCESS_SINGLE
 0

	)

24 
	#NGX_PROCESS_MASTER
 1

	)

25 
	#NGX_PROCESS_SIGNALLER
 2

	)

26 
	#NGX_PROCESS_WORKER
 3

	)

27 
	#NGX_PROCESS_HELPER
 4

	)

31 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

32 *
	m«me
;

33 
ngx_m£c_t
 
	mdñay
;

34 } 
	tngx_ˇche_m™agî_˘x_t
;

37 
ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

41 
ngx_uöt_t
 
ngx_¥o˚ss
;

42 
ngx_pid_t
 
ngx_pid
;

43 
ngx_pid_t
 
ngx_√w_bö¨y
;

44 
ngx_uöt_t
 
ngx_öhîôed
;

45 
ngx_uöt_t
 
ngx_d´m⁄ized
;

46 
ngx_uöt_t
 
ngx_thªaded
;

47 
ngx_uöt_t
 
ngx_exôög
;

49 
sig_©omic_t
 
ngx_ª≠
;

50 
sig_©omic_t
 
ngx_sigio
;

51 
sig_©omic_t
 
ngx_sigÆrm
;

52 
sig_©omic_t
 
ngx_quô
;

53 
sig_©omic_t
 
ngx_debug_quô
;

54 
sig_©omic_t
 
ngx_ãrmö©e
;

55 
sig_©omic_t
 
ngx_nﬂc˚±
;

56 
sig_©omic_t
 
ngx_ªc⁄figuª
;

57 
sig_©omic_t
 
ngx_ª›í
;

58 
sig_©omic_t
 
ngx_ch™ge_bö¨y
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_pthread_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	g¡hªads
;

13 
ngx_uöt_t
 
	gmax_thªads
;

16 
±hªad_©å_t
 
	gthr_©å
;

19 
ngx_îr_t


20 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

21 *
¨g
, 
ngx_log_t
 *
log
)

23 
îr
;

25 i‡(
¡hªads
 >
max_thªads
) {

26 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

27 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

28  
NGX_ERROR
;

31 
îr
 = 
	`±hªad_¸óã
(
tid
, &
thr_©å
, 
func
, 
¨g
);

33 i‡(
îr
 != 0) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_create() failed");

35  
îr
;

38 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

39 "thªad i†¸óãd: " 
NGX_TID_T_FMT
, *
tid
);

41 
¡hªads
++;

43  
îr
;

44 
	}
}

47 
ngx_öt_t


48 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

50 
îr
;

52 
max_thªads
 = 
n
;

54 
îr
 = 
	`±hªad_©å_öô
(&
thr_©å
);

56 i‡(
îr
 != 0) {

57 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

59  
NGX_ERROR
;

62 
îr
 = 
	`±hªad_©å_£t°acksize
(&
thr_©å
, 
size
);

64 i‡(
îr
 != 0) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

67  
NGX_ERROR
;

70 
ngx_thªaded
 = 1;

72  
NGX_OK
;

73 
	}
}

76 
ngx_muãx_t
 *

77 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

79 
îr
;

80 
ngx_muãx_t
 *
m
;

82 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

83 i‡(
m
 =
NULL
) {

84  
NULL
;

87 
m
->
log
 =Üog;

89 
îr
 = 
	`±hªad_muãx_öô
(&
m
->
muãx
, 
NULL
);

91 i‡(
îr
 != 0) {

92 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

94  
NULL
;

97  
m
;

98 
	}
}

102 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

104 
îr
;

106 
îr
 = 
	`±hªad_muãx_de°roy
(&
m
->
muãx
);

108 i‡(
îr
 != 0) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

110 "±hªad_muãx_de°roy(%pËÁûed", 
m
);

113 
	`ngx_‰ì
(
m
);

114 
	}
}

118 
	$ngx_muãx_lock
(
ngx_muãx_t
 *
m
)

120 
îr
;

122 i‡(!
ngx_thªaded
) {

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "lock mutex %p", m);

128 
îr
 = 
	`±hªad_muãx_lock
(&
m
->
muãx
);

130 i‡(
îr
 != 0) {

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

132 "±hªad_muãx_lock(%pËÁûed", 
m
);

133 
	`ngx_ab‹t
();

136 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

139 
	}
}

142 
ngx_öt_t


143 
	$ngx_muãx_åylock
(
ngx_muãx_t
 *
m
)

145 
îr
;

147 i‡(!
ngx_thªaded
) {

148  
NGX_OK
;

151 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "tryÜock mutex %p", m);

153 
îr
 = 
	`±hªad_muãx_åylock
(&
m
->
muãx
);

155 i‡(
îr
 =
NGX_EBUSY
) {

156  
NGX_AGAIN
;

159 i‡(
îr
 != 0) {

160 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

161 "±hªad_muãx_åylock(%pËÁûed", 
m
);

162 
	`ngx_ab‹t
();

165 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

167  
NGX_OK
;

168 
	}
}

172 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

174 
îr
;

176 i‡(!
ngx_thªaded
) {

180 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "unlock mutex %p", m);

182 
îr
 = 
	`±hªad_muãx_u∆ock
(&
m
->
muãx
);

184 i‡(
îr
 != 0) {

185 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

186 "±hªad_muãx_u∆ock(%pËÁûed", 
m
);

187 
	`ngx_ab‹t
();

190 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p is unlocked", m);

193 
	}
}

196 
ngx_c⁄d_t
 *

197 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

199 
îr
;

200 
ngx_c⁄d_t
 *
cv
;

202 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

203 i‡(
cv
 =
NULL
) {

204  
NULL
;

207 
cv
->
log
 =Üog;

209 
îr
 = 
	`±hªad_c⁄d_öô
(&
cv
->
c⁄d
, 
NULL
);

211 i‡(
îr
 != 0) {

212 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

214  
NULL
;

217  
cv
;

218 
	}
}

222 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

224 
îr
;

226 
îr
 = 
	`±hªad_c⁄d_de°roy
(&
cv
->
c⁄d
);

228 i‡(
îr
 != 0) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

230 "±hªad_c⁄d_de°roy(%pËÁûed", 
cv
);

233 
	`ngx_‰ì
(
cv
);

234 
	}
}

237 
ngx_öt_t


238 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

240 
îr
;

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p wait", cv);

244 
îr
 = 
	`±hªad_c⁄d_waô
(&
cv
->
c⁄d
, &
m
->
muãx
);

246 i‡(
îr
 != 0) {

247 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

248 "±hªad_c⁄d_waô(%pËÁûed", 
cv
);

249  
NGX_ERROR
;

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

256  
NGX_OK
;

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

263 
îr
;

265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %pÅo signal", cv);

267 
îr
 = 
	`±hªad_c⁄d_sig«l
(&
cv
->
c⁄d
);

269 i‡(
îr
 != 0) {

270 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

271 "±hªad_c⁄d_sig«l(%pËÁûed", 
cv
);

272  
NGX_ERROR
;

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

277  
NGX_OK
;

278 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_readv_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_IOVS
 16

	)

16 #i‡(
NGX_HAVE_KQUEUE
)

18 
ssize_t


19 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

21 
u_ch¨
 *
¥ev
;

22 
ssize_t
 
n
, 
size
;

23 
ngx_îr_t
 
îr
;

24 
ngx_¨øy_t
 
vec
;

25 
ngx_evít_t
 *
ªv
;

26 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

28 
ªv
 = 
c
->
ªad
;

30 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

31 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

33 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

35 i‡(
ªv
->
avaûabÀ
 == 0) {

36 i‡(
ªv
->
≥ndög_eof
) {

37 
ªv
->
ªady
 = 0;

38 
ªv
->
eof
 = 1;

40 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

43 i‡(
ªv
->
kq_î∫o
) {

44 
ªv
->
îr‹
 = 1;

45 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

46  
NGX_ERROR
;

52  
NGX_AGAIN
;

57 
¥ev
 = 
NULL
;

58 
iov
 = 
NULL
;

59 
size
 = 0;

61 
vec
.
ñts
 = 
iovs
;

62 
vec
.
√…s
 = 0;

63 
vec
.
size
 = (
iovec
);

64 
vec
.
«Œoc
 = 
NGX_IOVS
;

65 
vec
.
poﬁ
 = 
c
->pool;

69 
chaö
) {

70 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

71 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

74 i‡(
vec
.
√…s
 >
IOV_MAX
) {

78 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

79 i‡(
iov
 =
NULL
) {

80  
NGX_ERROR
;

83 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

84 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

87 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

88 
¥ev
 = 
chaö
->
buf
->
íd
;

89 
chaö
 = chaö->
√xt
;

92 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

93 "ªadv: %d,Üa°:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

95 
ªv
 = 
c
->
ªad
;

98 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

100 i‡(
n
 >= 0) {

101 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

102 
ªv
->
avaûabÀ
 -
n
;

109 i‡(
ªv
->
avaûabÀ
 <= 0) {

110 i‡(!
ªv
->
≥ndög_eof
) {

111 
ªv
->
ªady
 = 0;

114 i‡(
ªv
->
avaûabÀ
 < 0) {

115 
ªv
->
avaûabÀ
 = 0;

119 i‡(
n
 == 0) {

127 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

129 "%dávaûabÀ byãs", 
ªv
->
avaûabÀ
);

132 
ªv
->
ªady
 = 0;

133 
ªv
->
eof
 = 1;

134 
ªv
->
avaûabÀ
 = 0;

137  
n
;

140 i‡(
n
 < 
size
 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
)) {

141 
ªv
->
ªady
 = 0;

144 i‡(
n
 == 0) {

145 
ªv
->
eof
 = 1;

148  
n
;

151 
îr
 = 
ngx_sockë_î∫o
;

153 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

154 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

156 
n
 = 
NGX_AGAIN
;

159 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

163 } 
îr
 =
NGX_EINTR
);

165 
ªv
->
ªady
 = 0;

167 i‡(
n
 =
NGX_ERROR
) {

168 
c
->
ªad
->
îr‹
 = 1;

171  
n
;

172 
	}
}

176 
ssize_t


177 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

179 
u_ch¨
 *
¥ev
;

180 
ssize_t
 
n
, 
size
;

181 
ngx_îr_t
 
îr
;

182 
ngx_¨øy_t
 
vec
;

183 
ngx_evít_t
 *
ªv
;

184 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

186 
¥ev
 = 
NULL
;

187 
iov
 = 
NULL
;

188 
size
 = 0;

190 
vec
.
ñts
 = 
iovs
;

191 
vec
.
√…s
 = 0;

192 
vec
.
size
 = (
iovec
);

193 
vec
.
«Œoc
 = 
NGX_IOVS
;

194 
vec
.
poﬁ
 = 
c
->pool;

198 
chaö
) {

199 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

200 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

203 i‡(
vec
.
√…s
 >
IOV_MAX
) {

207 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

208 i‡(
iov
 =
NULL
) {

209  
NGX_ERROR
;

212 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

213 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

216 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

217 
¥ev
 = 
chaö
->
buf
->
íd
;

218 
chaö
 = chaö->
√xt
;

221 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

222 "ªadv: %d:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

224 
ªv
 = 
c
->
ªad
;

227 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

229 i‡(
n
 == 0) {

230 
ªv
->
ªady
 = 0;

231 
ªv
->
eof
 = 1;

233  
n
;

235 } i‡(
n
 > 0) {

237 i‡(
n
 < 
size
 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
)) {

238 
ªv
->
ªady
 = 0;

241  
n
;

244 
îr
 = 
ngx_sockë_î∫o
;

246 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

247 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

249 
n
 = 
NGX_AGAIN
;

252 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

256 } 
îr
 =
NGX_EINTR
);

258 
ªv
->
ªady
 = 0;

260 i‡(
n
 =
NGX_ERROR
) {

261 
c
->
ªad
->
îr‹
 = 1;

264  
n
;

265 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

25 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

27 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

29 i‡(
ªv
->
avaûabÀ
 == 0) {

30 i‡(
ªv
->
≥ndög_eof
) {

31 
ªv
->
ªady
 = 0;

32 
ªv
->
eof
 = 1;

34 i‡(
ªv
->
kq_î∫o
) {

35 
ªv
->
îr‹
 = 1;

36 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

38  
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ªv
->
kq_î∫o
,

45 
ªv
->
ªady
 = 0;

46  
NGX_AGAIN
;

52 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

54 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

57 i‡(
n
 >= 0) {

58 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

59 
ªv
->
avaûabÀ
 -
n
;

66 i‡(
ªv
->
avaûabÀ
 <= 0) {

67 i‡(!
ªv
->
≥ndög_eof
) {

68 
ªv
->
ªady
 = 0;

71 i‡(
ªv
->
avaûabÀ
 < 0) {

72 
ªv
->
avaûabÀ
 = 0;

76 i‡(
n
 == 0) {

83 
ªv
->
ªady
 = 0;

84 
ªv
->
eof
 = 1;

85 
ªv
->
avaûabÀ
 = 0;

88  
n
;

91 i‡((
size_t
Ë
n
 < 
size


92 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

94 
ªv
->
ªady
 = 0;

97 i‡(
n
 == 0) {

98 
ªv
->
eof
 = 1;

101  
n
;

104 
îr
 = 
ngx_sockë_î∫o
;

106 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

107 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

109 
n
 = 
NGX_AGAIN
;

112 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

116 } 
îr
 =
NGX_EINTR
);

118 
ªv
->
ªady
 = 0;

120 i‡(
n
 =
NGX_ERROR
) {

121 
ªv
->
îr‹
 = 1;

124  
n
;

125 
	}
}

129 
ssize_t


130 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

132 
ssize_t
 
n
;

133 
ngx_îr_t
 
îr
;

134 
ngx_evít_t
 *
ªv
;

136 
ªv
 = 
c
->
ªad
;

139 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

141 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

142 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

144 i‡(
n
 == 0) {

145 
ªv
->
ªady
 = 0;

146 
ªv
->
eof
 = 1;

147  
n
;

149 } i‡(
n
 > 0) {

151 i‡((
size_t
Ë
n
 < 
size


152 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

154 
ªv
->
ªady
 = 0;

157  
n
;

160 
îr
 = 
ngx_sockë_î∫o
;

162 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

163 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

165 
n
 = 
NGX_AGAIN
;

168 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

172 } 
îr
 =
NGX_EINTR
);

174 
ªv
->
ªady
 = 0;

176 i‡(
n
 =
NGX_ERROR
) {

177 
ªv
->
îr‹
 = 1;

180  
n
;

181 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_send.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
wev
;

20 
wev
 = 
c
->
wrôe
;

22 #i‡(
NGX_HAVE_KQUEUE
)

24 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

25 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

27 
wev
->
îr‹
 = 1;

28  
NGX_ERROR
;

34 
n
 = 
	`£nd
(
c
->
fd
, 
buf
, 
size
, 0);

36 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

37 "£nd: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

39 i‡(
n
 > 0) {

40 i‡(
n
 < (
ssize_t
Ë
size
) {

41 
wev
->
ªady
 = 0;

44 
c
->
£¡
 +
n
;

46  
n
;

49 
îr
 = 
ngx_sockë_î∫o
;

51 i‡(
n
 == 0) {

52 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
îr
, "send()Ñeturned zero");

53 
wev
->
ªady
 = 0;

54  
n
;

57 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

58 
wev
->
ªady
 = 0;

60 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

63 i‡(
îr
 =
NGX_EAGAIN
) {

64  
NGX_AGAIN
;

68 
wev
->
îr‹
 = 1;

69 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "send() failed");

70  
NGX_ERROR
;

73 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setaffinity.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 #i‡(
NGX_HAVE_CPUSET_SETAFFINITY
)

13 
	~<sys/˝u£t.h
>

16 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

18 
˝u£t_t
 
mask
;

19 
ngx_uöt_t
 
i
;

21 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

22 "˝u£t_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

24 
	`CPU_ZERO
(&
mask
);

25 
i
 = 0;

27 i‡(
˝u_afföôy
 & 1) {

28 
	`CPU_SET
(
i
, &
mask
);

30 
i
++;

31 
˝u_afföôy
 >>= 1;

32 } 
˝u_afföôy
);

34 i‡(
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, -1,

35 (
˝u£t_t
), &
mask
) == -1)

37 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40 
	}
}

42 #ñi‡(
NGX_HAVE_SCHED_SETAFFINITY
)

45 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

47 
˝u_£t_t
 
mask
;

48 
ngx_uöt_t
 
i
;

50 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

51 "sched_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

53 
	`CPU_ZERO
(&
mask
);

54 
i
 = 0;

56 i‡(
˝u_afföôy
 & 1) {

57 
	`CPU_SET
(
i
, &
mask
);

59 
i
++;

60 
˝u_afföôy
 >>= 1;

61 } 
˝u_afföôy
);

63 i‡(
	`sched_£èfföôy
(0, (
˝u_£t_t
), &
mask
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

67 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setaffinity.h

6 #i‚de‡
_NGX_SETAFFINITY_H_INCLUDED_


7 
	#_NGX_SETAFFINITY_H_INCLUDED_


	)

10 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
 || 
NGX_HAVE_CPUSET_SETAFFINITY
)

12 
	#NGX_HAVE_CPU_AFFINITY
 1

	)

14 
ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
);

18 
	#ngx_£èfföôy
(
˝u_afföôy
, 
log
)

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setproctitle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

30 **
ívú⁄
;

32 *
	gngx_os_¨gv_œ°
;

34 
ngx_öt_t


35 
	$ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
)

37 
u_ch¨
 *
p
;

38 
size_t
 
size
;

39 
ngx_uöt_t
 
i
;

41 
size
 = 0;

43 
i
 = 0; 
ívú⁄
[i]; i++) {

44 
size
 +
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

47 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

48 i‡(
p
 =
NULL
) {

49  
NGX_ERROR
;

52 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[0];

54 
i
 = 0; 
ngx_os_¨gv
[i]; i++) {

55 i‡(
ngx_os_¨gv_œ°
 =
ngx_os_¨gv
[
i
]) {

56 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[
i
] + 
	`ngx_°æí
(ngx_os_argv[i]) + 1;

60 
i
 = 0; 
ívú⁄
[i]; i++) {

61 i‡(
ngx_os_¨gv_œ°
 =
ívú⁄
[
i
]) {

63 
size
 = 
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

64 
ngx_os_¨gv_œ°
 = 
ívú⁄
[
i
] + 
size
;

66 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
ívú⁄
[
i
], 
size
);

67 
ívú⁄
[
i
] = (*Ë
p
;

68 
p
 +
size
;

72 
ngx_os_¨gv_œ°
--;

74  
NGX_OK
;

75 
	}
}

79 
	$ngx_£çro˘ôÀ
(*
tôÀ
)

81 
u_ch¨
 *
p
;

83 #i‡(
NGX_SOLARIS
)

85 
ngx_öt_t
 
i
;

86 
size_t
 
size
;

90 
ngx_os_¨gv
[1] = 
NULL
;

92 
p
 = 
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_os_¨gv
[0], (u_char *) "nginx: ",

93 
ngx_os_¨gv_œ°
 - 
ngx_os_¨gv
[0]);

95 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
tôÀ
, 
ngx_os_¨gv_œ°
 - (*)Ö);

97 #i‡(
NGX_SOLARIS
)

99 
size
 = 0;

101 
i
 = 0; i < 
ngx_¨gc
; i++) {

102 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

105 i‡(
size
 > (
size_t
Ë((*Ë
p
 - 
ngx_os_¨gv
[0])) {

112 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (", 
ngx_os_¨gv_œ°
 - (*)Ö);

114 
i
 = 0; i < 
ngx_¨gc
; i++) {

115 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
],

116 
ngx_os_¨gv_œ°
 - (*Ë
p
);

117 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" ", 
ngx_os_¨gv_œ°
 - (*)Ö);

120 i‡(*(
p
 - 1) == ' ') {

121 *(
p
 - 1) = ')';

127 i‡(
ngx_os_¨gv_œ°
 - (*Ë
p
) {

128 
	`ngx_mem£t
(
p
, 
NGX_SETPROCTITLE_PAD
, 
ngx_os_¨gv_œ°
 - (*)Ö);

131 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

132 "£çro˘ôÀ: \"%s\"", 
ngx_os_¨gv
[0]);

133 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setproctitle.h

8 #i‚de‡
_NGX_SETPROCTITLE_H_INCLUDED_


9 
	#_NGX_SETPROCTITLE_H_INCLUDED_


	)

12 #i‡(
NGX_HAVE_SETPROCTITLE
)

16 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

17 
	#ngx_£çro˘ôÀ
(
tôÀ
Ë
	`£çro˘ôÀ
("%s",ÅôÀ)

	)

22 #i‡!
deföed
 
NGX_SETPROCTITLE_USES_ENV


24 #i‡(
NGX_SOLARIS
)

26 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

27 
	#NGX_SETPROCTITLE_PAD
 ' '

	)

29 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

30 
ngx_£çro˘ôÀ
(*
tôÀ
);

32 #ñi‡(
NGX_LINUX
Ë|| (
NGX_DARWIN
)

34 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

35 
	#NGX_SETPROCTITLE_PAD
 '\0'

	)

37 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

38 
ngx_£çro˘ôÀ
(*
tôÀ
);

42 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

43 
	#ngx_£çro˘ôÀ
(
tôÀ
)

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_shmem.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_MAP_ANON
)

14 
ngx_öt_t


15 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

17 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
,

18 
PROT_READ
|
PROT_WRITE
,

19 
MAP_ANON
|
MAP_SHARED
, -1, 0);

21 i‡(
shm
->
addr
 =
MAP_FAILED
) {

22 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

23 "mm≠(MAP_ANON|MAP_SHARED, %uzËÁûed", 
shm
->
size
);

24  
NGX_ERROR
;

27  
NGX_OK
;

28 
	}
}

32 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

34 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

36 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

38 
	}
}

40 #ñi‡(
NGX_HAVE_MAP_DEVZERO
)

42 
ngx_öt_t


43 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

45 
ngx_fd_t
 
fd
;

47 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

49 i‡(
fd
 == -1) {

50 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

52  
NGX_ERROR
;

55 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
, 
PROT_READ
|
PROT_WRITE
,

56 
MAP_SHARED
, 
fd
, 0);

58 i‡(
shm
->
addr
 =
MAP_FAILED
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

60 "mm≠(/dev/zîo, MAP_SHARED, %uzËÁûed", 
shm
->
size
);

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

68  (
shm
->
addr
 =
MAP_FAILED
Ë? 
NGX_ERROR
 : 
NGX_OK
;

69 
	}
}

73 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

75 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

76 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

77 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

79 
	}
}

81 #ñi‡(
NGX_HAVE_SYSVSHM
)

83 
	~<sys/ùc.h
>

84 
	~<sys/shm.h
>

87 
ngx_öt_t


88 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

90 
id
;

92 
id
 = 
	`shmgë
(
IPC_PRIVATE
, 
shm
->
size
, (
SHM_R
|
SHM_W
|
IPC_CREAT
));

94 i‡(
id
 == -1) {

95 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

96 "shmgë(%uzËÁûed", 
shm
->
size
);

97  
NGX_ERROR
;

100 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
shm
->
log
, 0, "shmgë id: %d", 
id
);

102 
shm
->
addr
 = 
	`shm©
(
id
, 
NULL
, 0);

104 i‡(
shm
->
addr
 == (*) -1) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
, "shmat() failed");

108 i‡(
	`shm˘l
(
id
, 
IPC_RMID
, 
NULL
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

113  (
shm
->
addr
 =(*Ë-1Ë? 
NGX_ERROR
 : 
NGX_OK
;

114 
	}
}

118 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

120 i‡(
	`shmdt
(
shm
->
addr
) == -1) {

121 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

122 "shmdt(%pËÁûed", 
shm
->
addr
);

124 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_shmem.h

8 #i‚de‡
_NGX_SHMEM_H_INCLUDED_


9 
	#_NGX_SHMEM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
u_ch¨
 *
	maddr
;

18 
size_t
 
	msize
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_log_t
 *
	mlog
;

21 
ngx_uöt_t
 
	mexi°s
;

22 } 
	tngx_shm_t
;

25 
ngx_öt_t
 
ngx_shm_Æloc
(
ngx_shm_t
 *
shm
);

26 
ngx_shm_‰ì
(
ngx_shm_t
 *
shm
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_socket.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

24 #i‡(
NGX_HAVE_FIONBIO
)

27 
	$ngx_n⁄blockög
(
ngx_sockë_t
 
s
)

29 
nb
;

31 
nb
 = 1;

33  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

34 
	}
}

38 
	$ngx_blockög
(
ngx_sockë_t
 
s
)

40 
nb
;

42 
nb
 = 0;

44  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

45 
	}
}

50 #i‡(
NGX_FREEBSD
)

53 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

55 
t˝_n›ush
;

57 
t˝_n›ush
 = 1;

59  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

60 (c⁄° *Ë&
t˝_n›ush
, ());

61 
	}
}

65 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

67 
t˝_n›ush
;

69 
t˝_n›ush
 = 0;

71  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

72 (c⁄° *Ë&
t˝_n›ush
, ());

73 
	}
}

75 #ñi‡(
NGX_LINUX
)

79 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

81 
c‹k
;

83 
c‹k
 = 1;

85  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

86 (c⁄° *Ë&
c‹k
, ());

87 
	}
}

91 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

93 
c‹k
;

95 
c‹k
 = 0;

97  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

98 (c⁄° *Ë&
c‹k
, ());

99 
	}
}

104 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

107 
	}
}

111 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

114 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_socket.h

8 #i‚de‡
_NGX_SOCKET_H_INCLUDED_


9 
	#_NGX_SOCKET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
	#NGX_WRITE_SHUTDOWN
 
SHUT_WR


	)

17 
	tngx_sockë_t
;

19 
	#ngx_sockë
 
sockë


	)

20 
	#ngx_sockë_n
 "sockë()"

	)

23 #i‡(
NGX_HAVE_FIONBIO
)

25 
ngx_n⁄blockög
(
ngx_sockë_t
 
s
);

26 
ngx_blockög
(
ngx_sockë_t
 
s
);

28 
	#ngx_n⁄blockög_n
 "io˘l(FIONBIO)"

	)

29 
	#ngx_blockög_n
 "io˘l(!FIONBIO)"

	)

33 
	#ngx_n⁄blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë| 
O_NONBLOCK
)

	)

34 
	#ngx_n⁄blockög_n
 "f˙é(O_NONBLOCK)"

	)

36 
	#ngx_blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë& ~
O_NONBLOCK
)

	)

37 
	#ngx_blockög_n
 "f˙é(!O_NONBLOCK)"

	)

41 
ngx_t˝_n›ush
(
ngx_sockë_t
 
s
);

42 
ngx_t˝_push
(
ngx_sockë_t
 
s
);

44 #i‡(
NGX_LINUX
)

46 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_CORK)"

	)

47 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_CORK)"

	)

51 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_NOPUSH)"

	)

52 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_NOPUSH)"

	)

57 
	#ngx_shutdown_sockë
 
shutdown


	)

58 
	#ngx_shutdown_sockë_n
 "shutdown()"

	)

60 
	#ngx_˛o£_sockë
 
˛o£


	)

61 
	#ngx_˛o£_sockë_n
 "˛o£(Ësockë"

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris.h

8 #i‚de‡
_NGX_SOLARIS_H_INCLUDED_


9 
	#_NGX_SOLARIS_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris_config.h

8 #i‚de‡
_NGX_SOLARIS_CONFIG_H_INCLUDED_


9 
	#_NGX_SOLARIS_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_REENTRANT


13 
	#_REENTRANT


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<time.h
>

34 
	~<sys/°©vfs.h
>

36 
	~<sys/fûio.h
>

37 
	~<sys/uio.h
>

38 
	~<sys/°©.h
>

39 
	~<f˙é.h
>

41 
	~<sys/waô.h
>

42 
	~<sys/mm™.h
>

43 
	~<sys/ªsour˚.h
>

44 
	~<sched.h
>

46 
	~<sys/sockë.h
>

47 
	~<√töë/ö.h
>

48 
	~<√töë/t˝.h
>

49 
	~<¨∑/öë.h
>

50 
	~<√tdb.h
>

51 
	~<sys/un.h
>

53 
	~<sys/sy°emöfo.h
>

54 
	~<limôs.h
>

55 
	~<öây≥s.h
>

56 
	~<¸y±.h
>

58 
	#NGX_ALIGNMENT
 
_MAX_ALIGNMENT


	)

60 
	~<ngx_auto_c⁄fig.h
>

63 #i‡(
NGX_HAVE_POSIX_SEM
)

64 
	~<£m≠h‹e.h
>

68 #i‡(
NGX_HAVE_POLL
)

69 
	~<pﬁl.h
>

73 #i‡(
NGX_HAVE_DEVPOLL
)

74 
	~<sys/io˘l.h
>

75 
	~<sys/devpﬁl.h
>

79 #i‡(
NGX_HAVE_EVENTPORT
)

80 
	~<p‹t.h
>

84 #i‡(
NGX_HAVE_SENDFILE
)

85 
	~<sys/£ndfûe.h
>

89 
	#NGX_LISTEN_BACKLOG
 511

	)

92 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


93 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

97 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


99 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

103 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

104 
	#ngx_debug_öô
()

	)

107 **
ívú⁄
;

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_sﬁ¨is_sy¢ame
[20];

13 
	gngx_sﬁ¨is_ªÀa£
[10];

14 
	gngx_sﬁ¨is_vîsi⁄
[50];

17 
ngx_os_io_t
 
	gngx_sﬁ¨is_io
 = {

18 
ngx_unix_ªcv
,

19 
ngx_ªadv_chaö
,

20 
ngx_udp_unix_ªcv
,

21 
ngx_unix_£nd
,

22 #i‡(
NGX_HAVE_SENDFILE
)

23 
ngx_sﬁ¨is_£ndfûev_chaö
,

24 
NGX_IO_SENDFILE


26 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

35 i‡(
	`sysöfo
(
SI_SYSNAME
, 
ngx_sﬁ¨is_sy¢ame
, (ngx_solaris_sysname))

38 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40  
NGX_ERROR
;

43 i‡(
	`sysöfo
(
SI_RELEASE
, 
ngx_sﬁ¨is_ªÀa£
, (ngx_solaris_release))

46 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

48  
NGX_ERROR
;

51 i‡(
	`sysöfo
(
SI_VERSION
, 
ngx_sﬁ¨is_vîsi⁄
, (ngx_solaris_version))

54 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

56  
NGX_ERROR
;

60 
ngx_os_io
 = 
ngx_sﬁ¨is_io
;

62  
NGX_OK
;

63 
	}
}

67 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

70 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

71 
ngx_sﬁ¨is_sy¢ame
, 
ngx_sﬁ¨is_ªÀa£
);

73 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "version: %s",

74 
ngx_sﬁ¨is_vîsi⁄
);

75 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris_sendfilev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_SOLARIS_SENDFILEV
)

17 
	s£ndfûevec
 {

18 
	msfv_fd
;

19 
u_öt
 
	msfv_Êag
;

20 
off_t
 
	msfv_off
;

21 
size_t
 
	msfv_Àn
;

22 } 
	t£ndfûevec_t
;

24 
	#SFV_FD_SELF
 -2

	)

26 
ssize_t
 
	$£ndfûev
(
fd
, c⁄° 
£ndfûevec
 *
vec
,

27 
sfv˙t
, 
size_t
 *
x„ºed
)

30 
	}
}

32 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

33 
off_t
 
limô
);

38 #i‡(
IOV_MAX
 > 64)

39 
	#NGX_SENDFILEVECS
 64

	)

41 
	#NGX_SENDFILEVECS
 
IOV_MAX


	)

46 
ngx_chaö_t
 *

47 
	$ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

49 
fd
;

50 
u_ch¨
 *
¥ev
;

51 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
Âªv
;

52 
size_t
 
£¡
;

53 
ssize_t
 
n
;

54 
ngx_öt_t
 
eöå
, 
com∂ëe
;

55 
ngx_îr_t
 
îr
;

56 
£ndfûevec_t
 *
sfv
, 
sfvs
[
NGX_SENDFILEVECS
];

57 
ngx_¨øy_t
 
vec
;

58 
ngx_evít_t
 *
wev
;

59 
ngx_chaö_t
 *
˛
;

61 
wev
 = 
c
->
wrôe
;

63 i‡(!
wev
->
ªady
) {

64  
ö
;

67 i‡(!
c
->
£ndfûe
) {

68  
	`ngx_wrôev_chaö
(
c
, 
ö
, 
limô
);

74 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

75 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

79 
£nd
 = 0;

81 
vec
.
ñts
 = 
sfvs
;

82 
vec
.
size
 = (
£ndfûevec_t
);

83 
vec
.
«Œoc
 = 
NGX_SENDFILEVECS
;

84 
vec
.
poﬁ
 = 
c
->pool;

87 
fd
 = 
SFV_FD_SELF
;

88 
¥ev
 = 
NULL
;

89 
Âªv
 = 0;

90 
sfv
 = 
NULL
;

91 
eöå
 = 0;

92 
com∂ëe
 = 0;

93 
£¡
 = 0;

94 
¥ev_£nd
 = 
£nd
;

96 
vec
.
√…s
 = 0;

100 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

102 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

106 i‡(
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

107 
fd
 = 
SFV_FD_SELF
;

109 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

111 i‡(
£nd
 + 
size
 > 
limô
) {

112 
size
 = 
limô
 - 
£nd
;

115 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

116 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

119 i‡(
vec
.
√…s
 >
IOV_MAX
) {

123 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

124 i‡(
sfv
 =
NULL
) {

125  
NGX_CHAIN_ERROR
;

128 
sfv
->
sfv_fd
 = 
SFV_FD_SELF
;

129 
sfv
->
sfv_Êag
 = 0;

130 
sfv
->
sfv_off
 = (
off_t
Ë(
uöçå_t
Ë
˛
->
buf
->
pos
;

131 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

134 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

135 
£nd
 +
size
;

138 
¥ev
 = 
NULL
;

140 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

142 i‡(
£nd
 + 
size
 > 
limô
) {

143 
size
 = 
limô
 - 
£nd
;

145 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

146 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

148 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

149 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

153 i‡(
fd
 =
˛
->
buf
->
fûe
->fd && 
Âªv
 =˛->buf->
fûe_pos
) {

154 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

157 i‡(
vec
.
√…s
 >
IOV_MAX
) {

161 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

162 i‡(
sfv
 =
NULL
) {

163  
NGX_CHAIN_ERROR
;

166 
fd
 = 
˛
->
buf
->
fûe
->fd;

167 
sfv
->
sfv_fd
 = 
fd
;

168 
sfv
->
sfv_Êag
 = 0;

169 
sfv
->
sfv_off
 = 
˛
->
buf
->
fûe_pos
;

170 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

173 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

174 
£nd
 +
size
;

178 
n
 = 
	`£ndfûev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
, &
£¡
);

180 i‡(
n
 == -1) {

181 
îr
 = 
ngx_î∫o
;

183 
îr
) {

184 
NGX_EAGAIN
:

187 
NGX_EINTR
:

188 
eöå
 = 1;

192 
wev
->
îr‹
 = 1;

193 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfilev() failed");

194  
NGX_CHAIN_ERROR
;

197 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

198 "£ndfûev(Ë£¡ o∆y %uz byãs", 
£¡
);

201 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

202 "£ndfûev: %z %z", 
n
, 
£¡
);

204 i‡(
£nd
 - 
¥ev_£nd
 =(
off_t
Ë
£¡
) {

205 
com∂ëe
 = 1;

208 
c
->
£¡
 += sent;

210  ; 
ö
; i¿ö->
√xt
) {

212 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

216 i‡(
£¡
 == 0) {

220 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

222 i‡((
off_t
Ë
£¡
 >
size
) {

223 
£¡
 = (
size_t
Ë((
off_t
Ë£¡ - 
size
);

225 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

226 
ö
->
buf
->
pos
 = in->buf->
œ°
;

229 i‡(
ö
->
buf
->
ö_fûe
) {

230 
ö
->
buf
->
fûe_pos
 = in->buf->
fûe_œ°
;

236 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

237 
ö
->
buf
->
pos
 +
£¡
;

240 i‡(
ö
->
buf
->
ö_fûe
) {

241 
ö
->
buf
->
fûe_pos
 +
£¡
;

247 i‡(
eöå
) {

251 i‡(!
com∂ëe
) {

252 
wev
->
ªady
 = 0;

253  
ö
;

256 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

257  
ö
;

260 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_sunpro_atomic_sparc64.h

8 #i‡(
NGX_PTR_SIZE
 == 4)

9 
	#NGX_CASA
 
ngx_ˇß


	)

11 
	#NGX_CASA
 
ngx_ˇsxa


	)

15 
ngx_©omic_uöt_t


16 
ngx_ˇß
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

18 
ngx_©omic_uöt_t


19 
ngx_ˇsxa
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

24 
ngx_ölöe
 
ngx_©omic_uöt_t


25 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

26 
ngx_©omic_uöt_t
 
£t
)

28 
£t
 = 
	`NGX_CASA
(£t, 
ﬁd
, 
lock
);

30  (
£t
 =
ﬁd
);

31 
	}
}

34 
ngx_ölöe
 
ngx_©omic_öt_t


35 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

37 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

39 
ﬁd
 = *
vÆue
;

43 
ªs
 = 
ﬁd
 + 
add
;

45 
ªs
 = 
	`NGX_CASA
‘es, 
ﬁd
, 
vÆue
);

47 i‡(
ªs
 =
ﬁd
) {

48  
ªs
;

51 
ﬁd
 = 
ªs
;

53 
	}
}

56 
	#ngx_mem‹y_b¨rõr
() \

57 
	`__asm
 (".volatile"); \

58 
	`__asm
 ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad"); \

59 
	`__asm
 (".n⁄vﬁ©ûe")

	)

61 
	#ngx_˝u_∑u£
()

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_thread.h

8 #i‚de‡
_NGX_THREAD_H_INCLUDED_


9 
	#_NGX_THREAD_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_THREADS
)

17 
	#NGX_MAX_THREADS
 128

	)

19 #i‡(
NGX_USE_RFORK
)

20 
	~<ngx_‰ìbsd_rf‹k_thªad.h
>

25 
	~<±hªad.h
>

27 
±hªad_t
 
	tngx_tid_t
;

29 
	#ngx_thªad_£lf
(Ë
	`±hªad_£lf
()

	)

30 
	#ngx_log_tid
 (Ë
	`ngx_thªad_£lf
()

	)

32 #i‡(
NGX_FREEBSD
Ë&& !(
NGX_LINUXTHREADS
)

33 
	#NGX_TID_T_FMT
 "%p"

	)

35 
	#NGX_TID_T_FMT
 "%d"

	)

39 
±hªad_key_t
 
	tngx_és_key_t
;

41 
	#ngx_thªad_key_¸óã
(
key
Ë
	`±hªad_key_¸óã
(key, 
NULL
)

	)

42 
	#ngx_thªad_key_¸óã_n
 "±hªad_key_¸óã()"

	)

43 
	#ngx_thªad_£t_és
 
±hªad_£t•ecific


	)

44 
	#ngx_thªad_£t_és_n
 "±hªad_£t•ecific()"

	)

45 
	#ngx_thªad_gë_és
 
±hªad_gë•ecific


	)

48 
	#NGX_MUTEX_LIGHT
 0

	)

51 
±hªad_muãx_t
 
	mmuãx
;

52 
ngx_log_t
 *
	mlog
;

53 } 
	tngx_muãx_t
;

56 
±hªad_c⁄d_t
 
	mc⁄d
;

57 
ngx_log_t
 *
	mlog
;

58 } 
	tngx_c⁄d_t
;

60 
	#ngx_thªad_sigmask
 
±hªad_sigmask


	)

61 
	#ngx_thªad_sigmask_n
 "±hªad_sigmask()"

	)

63 
	#ngx_thªad_joö
(
t
, 
p
Ë
	`±hªad_joö
—,Ö)

	)

65 
	#ngx_£âhπôÀ
(
n
)

	)

69 
ngx_öt_t
 
ngx_muãx_åylock
(
ngx_muãx_t
 *
m
);

70 
ngx_muãx_lock
(
ngx_muãx_t
 *
m
);

71 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

76 
	#ngx_thªad_vﬁ©ûe
 vﬁ©ûe

	)

80 
ngx_tid_t
 
	mtid
;

81 
ngx_c⁄d_t
 *
	mcv
;

82 
ngx_uöt_t
 
	m°©e
;

83 } 
	tngx_thªad_t
;

85 
	#NGX_THREAD_FREE
 1

	)

86 
	#NGX_THREAD_BUSY
 2

	)

87 
	#NGX_THREAD_EXIT
 3

	)

88 
	#NGX_THREAD_DONE
 4

	)

90 
ngx_öt_t
 
ngx_thªads_n
;

91 vﬁ©ûê
ngx_thªad_t
 
ngx_thªads
[
NGX_MAX_THREADS
];

94 * 
	tngx_thªad_vÆue_t
;

96 
ngx_öt_t
 
ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
);

97 
ngx_îr_t
 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
,

98 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
), *¨g, 
ngx_log_t
 *
log
);

100 
ngx_muãx_t
 *
	`ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
);

101 
	`ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
);

104 
ngx_c⁄d_t
 *
	`ngx_c⁄d_öô
(
ngx_log_t
 *
log
);

105 
	`ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
);

106 
ngx_öt_t
 
	`ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
);

107 
ngx_öt_t
 
	`ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
);

112 
	#ngx_thªad_vﬁ©ûe


	)

114 
	#ngx_log_tid
 0

	)

115 
	#NGX_TID_T_FMT
 "%d"

	)

117 
	#ngx_muãx_åylock
(
m
Ë
NGX_OK


	)

118 
	#ngx_muãx_lock
(
m
)

	)

119 
	#ngx_muãx_u∆ock
(
m
)

	)

121 
	#ngx_c⁄d_sig«l
(
cv
)

	)

123 
	#ngx_thªad_maö
(Ë1

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

25 
	$ngx_timez⁄e_upd©e
()

27 #i‡(
NGX_FREEBSD
)

29 i‡(
	`gëív
("TZ")) {

33 
	`puãnv
("TZ=UTC");

35 
	`tz£t
();

37 
	`un£ãnv
("TZ");

39 
	`tz£t
();

41 #ñi‡(
NGX_LINUX
)

42 
time_t
 
s
;

43 
tm
 *
t
;

44 
buf
[4];

46 
s
 = 
	`time
(0);

48 
t
 = 
	`loˇ…ime
(&
s
);

50 
	`°r·ime
(
buf
, 4, "%H", 
t
);

53 
	}
}

57 
	$ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
)

59 #i‡(
NGX_HAVE_LOCALTIME_R
)

60 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

63 
ngx_tm_t
 *
t
;

65 
t
 = 
	`loˇ…ime
(&
s
);

66 *
tm
 = *
t
;

70 
tm
->
ngx_tm_m⁄
++;

71 
tm
->
ngx_tm_yór
 += 1900;

72 
	}
}

76 
	$ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm)

78 #i‡(
NGX_HAVE_LOCALTIME_R
)

79 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

82 
tm
 *
t
;

84 
t
 = 
	`loˇ…ime
(&
s
);

85 *
tm
 = *
t
;

88 
	}
}

92 
	$ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm)

94 #i‡(
NGX_HAVE_LOCALTIME_R
)

95 (Ë
	`gmtime_r
(&
s
, 
tm
);

98 
tm
 *
t
;

100 
t
 = 
	`gmtime
(&
s
);

101 *
tm
 = *
t
;

104 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_time.h

8 #i‚de‡
_NGX_TIME_H_INCLUDED_


9 
	#_NGX_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rbåì_key_t
 
	tngx_m£c_t
;

17 
ngx_rbåì_key_öt_t
 
	tngx_m£c_öt_t
;

19 
tm
 
	tngx_tm_t
;

21 
	#ngx_tm_£c
 
tm_£c


	)

22 
	#ngx_tm_mö
 
tm_mö


	)

23 
	#ngx_tm_hour
 
tm_hour


	)

24 
	#ngx_tm_mday
 
tm_mday


	)

25 
	#ngx_tm_m⁄
 
tm_m⁄


	)

26 
	#ngx_tm_yór
 
tm_yór


	)

27 
	#ngx_tm_wday
 
tm_wday


	)

28 
	#ngx_tm_isd°
 
tm_isd°


	)

30 
	#ngx_tm_£c_t
 

	)

31 
	#ngx_tm_mö_t
 

	)

32 
	#ngx_tm_hour_t
 

	)

33 
	#ngx_tm_mday_t
 

	)

34 
	#ngx_tm_m⁄_t
 

	)

35 
	#ngx_tm_yór_t
 

	)

36 
	#ngx_tm_wday_t
 

	)

39 #i‡(
NGX_HAVE_GMTOFF
)

40 
	#ngx_tm_gmtoff
 
tm_gmtoff


	)

41 
	#ngx_tm_z⁄e
 
tm_z⁄e


	)

45 #i‡(
NGX_SOLARIS
)

47 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
Ætz⁄e
 : 
timez⁄e
Ë/ 60)

	)

51 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
timez⁄e
 + 3600 :Åimez⁄eË/ 60)

	)

56 
ngx_timez⁄e_upd©e
();

57 
ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
);

58 
ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm);

59 
ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm);

61 
	#ngx_gëtimeofday
(
ç
Ë(Ë
	`gëtimeofday
—p, 
NULL
);

	)

62 
	#ngx_m¶ìp
(
ms
Ë(Ë
	`u¶ìp
(m†* 1000)

	)

63 
	#ngx_¶ìp
(
s
Ë(Ë
	`¶ìp
(s)

	)

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_udp_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

25 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

27 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

28 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

30 i‡(
n
 >= 0) {

31 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

32 
ªv
->
avaûabÀ
 -
n
;

39 i‡(
ªv
->
avaûabÀ
 <= 0) {

40 
ªv
->
ªady
 = 0;

41 
ªv
->
avaûabÀ
 = 0;

45  
n
;

48 
îr
 = 
ngx_sockë_î∫o
;

50 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

51 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

53 
n
 = 
NGX_AGAIN
;

56 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

60 } 
îr
 =
NGX_EINTR
);

62 
ªv
->
ªady
 = 0;

64 i‡(
n
 =
NGX_ERROR
) {

65 
ªv
->
îr‹
 = 1;

68  
n
;

69 
	}
}

73 
ssize_t


74 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

76 
ssize_t
 
n
;

77 
ngx_îr_t
 
îr
;

78 
ngx_evít_t
 *
ªv
;

80 
ªv
 = 
c
->
ªad
;

83 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

85 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

86 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

88 i‡(
n
 >= 0) {

89  
n
;

92 
îr
 = 
ngx_sockë_î∫o
;

94 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

95 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

97 
n
 = 
NGX_AGAIN
;

100 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

104 } 
îr
 =
NGX_EINTR
);

106 
ªv
->
ªady
 = 0;

108 i‡(
n
 =
NGX_ERROR
) {

109 
ªv
->
îr‹
 = 1;

112  
n
;

113 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_user.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

22 #i‡(
NGX_CRYPT
)

24 #i‡(
NGX_HAVE_GNU_CRYPT_R
)

26 
ngx_öt_t


27 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

29 *
vÆue
;

30 
size_t
 
Àn
;

31 
¸y±_d©a
 
cd
;

33 
cd
.
öôülized
 = 0;

35 
cd
.
cuºít_ß…
[0] = ~
ß…
[0];

37 
vÆue
 = 
	`¸y±_r
((*Ë
key
, (*Ë
ß…
, &
cd
);

39 i‡(
vÆue
) {

40 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

42 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

43 i‡(*
í¸y±ed
 =
NULL
) {

44  
NGX_ERROR
;

47 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

48  
NGX_OK
;

51 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
ngx_î∫o
, "crypt_r() failed");

53  
NGX_ERROR
;

54 
	}
}

58 
ngx_öt_t


59 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

61 *
vÆue
;

62 
size_t
 
Àn
;

63 
ngx_îr_t
 
îr
;

65 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

69 i‡(
	`ngx_muãx_åylock
(
ngx_¸y±_muãx
Ë!
NGX_OK
) {

70  
NGX_AGAIN
;

75 
vÆue
 = 
	`¸y±
((*Ë
key
, (*Ë
ß…
);

77 i‡(
vÆue
) {

78 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

80 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

81 i‡(*
í¸y±ed
 =
NULL
) {

82 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

83 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

85  
NGX_ERROR
;

88 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

89 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

90 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

92  
NGX_OK
;

95 
îr
 = 
ngx_î∫o
;

97 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

98 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

101 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
îr
, "crypt() failed");

103  
NGX_ERROR
;

104 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_user.h

8 #i‚de‡
_NGX_USER_H_INCLUDED_


9 
	#_NGX_USER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uid_t
 
	tngx_uid_t
;

17 
gid_t
 
	tngx_gid_t
;

20 
ngx_öt_t
 
ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_writev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
IOV_MAX
 > 64)

14 
	#NGX_IOVS
 64

	)

16 
	#NGX_IOVS
 
IOV_MAX


	)

20 
ngx_chaö_t
 *

21 
	$ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

23 
u_ch¨
 *
¥ev
;

24 
ssize_t
 
n
, 
size
, 
£¡
;

25 
off_t
 
£nd
, 
¥ev_£nd
;

26 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

27 
ngx_îr_t
 
îr
;

28 
ngx_¨øy_t
 
vec
;

29 
ngx_chaö_t
 *
˛
;

30 
ngx_evít_t
 *
wev
;

31 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

33 
wev
 = 
c
->
wrôe
;

35 i‡(!
wev
->
ªady
) {

36  
ö
;

39 #i‡(
NGX_HAVE_KQUEUE
)

41 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

42 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

44 
wev
->
îr‹
 = 1;

45  
NGX_CHAIN_ERROR
;

52 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

53 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

56 
£nd
 = 0;

58 
vec
.
ñts
 = 
iovs
;

59 
vec
.
size
 = (
iovec
);

60 
vec
.
«Œoc
 = 
NGX_IOVS
;

61 
vec
.
poﬁ
 = 
c
->pool;

64 
¥ev
 = 
NULL
;

65 
iov
 = 
NULL
;

66 
eöå
 = 0;

67 
com∂ëe
 = 0;

68 
¥ev_£nd
 = 
£nd
;

70 
vec
.
√…s
 = 0;

74 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

76 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

81 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

82 
	`ngx_debug_poöt
();

86 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 i‡(
£nd
 + 
size
 > 
limô
) {

89 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

92 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

93 
iov
->
iov_Àn
 +
size
;

96 i‡(
vec
.
√…s
 >
IOV_MAX
) {

100 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

101 i‡(
iov
 =
NULL
) {

102  
NGX_CHAIN_ERROR
;

105 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

106 
iov
->
iov_Àn
 = 
size
;

109 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

110 
£nd
 +
size
;

113 
n
 = 
	`wrôev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
);

115 i‡(
n
 == -1) {

116 
îr
 = 
ngx_î∫o
;

118 
îr
) {

119 
NGX_EAGAIN
:

122 
NGX_EINTR
:

123 
eöå
 = 1;

127 
wev
->
îr‹
 = 1;

128 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

129  
NGX_CHAIN_ERROR
;

132 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

136 
£¡
 = 
n
 > 0 ?Ç : 0;

138 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %z", 
£¡
);

140 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

141 
com∂ëe
 = 1;

144 
c
->
£¡
 += sent;

146 
˛
 = 
ö
; cl; c»˛->
√xt
) {

148 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

152 i‡(
£¡
 == 0) {

156 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

158 i‡(
£¡
 >
size
) {

159 
£¡
 -
size
;

160 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

165 
˛
->
buf
->
pos
 +
£¡
;

170 i‡(
eöå
) {

174 i‡(!
com∂ëe
) {

175 
wev
->
ªady
 = 0;

176  
˛
;

179 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

180  
˛
;

183 
ö
 = 
˛
;

185 
	}
}

	@/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/rfork_thread.S

8 
	~<sys/sysˇŒ.h
>

9 
	~<machöe/asm.h
>

15 
	#KERNCALL
 
$0x80


	)

17 
	$ENTRY
(
rf‹k_thªad
)

18 
push
 %
ebp


19 
mov
 %
e•
, %
ebp


20 
push
 %
esi


22 
mov
 12(%
ebp
), %
esi
 #thê
thªad
 
°ack
 
addªss


24 
sub
 
$4
, %
esi


25 
mov
 20(%
ebp
), %
óx
 #thê
thªad
 
¨gumít


26 
mov
 %
óx
, (%
esi
)

28 
sub
 
$4
, %
esi


29 
mov
 16(%
ebp
), %
óx
 #thê
thªad
 
°¨t
 
addªss


30 
mov
 %
óx
, (%
esi
)

32 
push
 8(%
ebp
Ë#rf‹k(2Ë
Êags


33 
push
 
$0


34 
mov
 
$SYS_rf‹k
, %
óx


35 
KERNCALL


36 
jc
 
îr‹


38 
cmp
 
$0
, %
edx


39 
j√
 
chûd


41 
∑ª¡
:

42 
add
 
$8
, %
e•


43 
p›
 %
esi


44 
Àave


45 
ªt


47 
chûd
:

48 
mov
 %
esi
, %
e•


49 
p›
 %
óx


50 
ˇŒ
 *%
óx
 #ˇŒ 
a
 
thªad
 
°¨t
 
addªss
 ...

51 
add
 
$4
, %
e•


53 
push
 %
óx


54 
push
 
$0


55 
mov
 
$SYS_exô
, %
óx
 #... 
™d
 
	$exô
(2Ë
a·î
 
a
 
thªad
 
would
 

56 
KERNCALL


58 
îr‹
:

59 
add
 
$8
, %
e•


60 
p›
 %
esi


61 
Àave


62 
PIC_PROLOGUE


66 
push
 %
óx


67 
ˇŒ
 
	`PIC_PLT
(
	$CNAME
(
__îr‹
))

68 
p›
 %
ecx


69 
PIC_EPILOGUE


70 
mov
 %
ecx
, (%
óx
)

71 
mov
 
$
-1, %
óx


72 
mov
 
$
-1, %
edx


73 
ªt


	@
1
.
0
318
34083
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/Makefile
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/auto/lib/zlib/patch.zlib.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/Makefile
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/ngx_auto_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/ngx_auto_headers.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/objs/ngx_modules.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/nginx.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/nginx.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_array.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_array.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_buf.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_buf.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_conf_file.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_conf_file.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_connection.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_connection.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_core.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_cpuinfo.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crc.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crc32.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crc32.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crypt.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_crypt.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_cycle.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_cycle.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_file.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_file.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_hash.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_hash.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_inet.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_inet.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_list.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_list.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_log.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_log.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_md5.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_md5.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_murmurhash.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_murmurhash.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_open_file_cache.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_open_file_cache.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_output_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_palloc.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_palloc.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_parse.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_parse.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_proxy_protocol.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_proxy_protocol.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_queue.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_queue.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_radix_tree.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_radix_tree.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_rbtree.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_rbtree.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_regex.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_regex.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_resolver.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_resolver.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_sha1.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_shmtx.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_shmtx.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_slab.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_slab.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_spinlock.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_string.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_string.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_times.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/core/ngx_times.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_aio_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_devpoll_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_epoll_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_eventport_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_kqueue_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_poll_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_rtsig_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_select_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/modules/ngx_win32_select_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_accept.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_busy_lock.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_busy_lock.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_connect.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_connect.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_mutex.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_openssl.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_openssl.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_openssl_stapling.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_pipe.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_pipe.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_posted.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_posted.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_timer.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/event/ngx_event_timer.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_access_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_addition_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_auth_basic_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_auth_request_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_autoindex_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_browser_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_charset_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_chunked_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_dav_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_degradation_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_empty_gif_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_fastcgi_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_flv_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_geo_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_geoip_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_gunzip_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_gzip_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_gzip_static_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_headers_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_image_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_index_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_limit_conn_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_limit_req_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_log_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_map_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_memcached_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_mp4_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_not_modified_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_proxy_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_random_index_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_range_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_realip_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_referer_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_rewrite_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_scgi_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_secure_link_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_split_clients_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssi_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssi_filter_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssl_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_ssl_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_static_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_stub_status_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_sub_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_upstream_ip_hash_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_upstream_keepalive_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_upstream_least_conn_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_userid_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_uwsgi_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/ngx_http_xslt_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/.svn/text-base/Makefile.PL.svn-base
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/Makefile.PL
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/ngx_http_perl_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/modules/perl/ngx_http_perl_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_busy_lock.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_busy_lock.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_cache.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_copy_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_core_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_core_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_file_cache.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_header_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_parse.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_parse_time.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_postpone_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_request.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_request.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_request_body.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_script.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_script.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_spdy_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_special_response.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream_round_robin.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_upstream_round_robin.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_variables.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_variables.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/http/ngx_http_write_filter_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_auth_http_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_core_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_handler.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_imap_handler.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_imap_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_imap_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_parse.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_pop3_handler.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_pop3_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_pop3_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_proxy_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_smtp_handler.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_smtp_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_smtp_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_ssl_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/mail/ngx_mail_ssl_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/misc/ngx_google_perftools_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/config
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/dash/ngx_rtmp_dash_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/dash/ngx_rtmp_mp4.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/dash/ngx_rtmp_mp4.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/hls/ngx_rtmp_hls_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/hls/ngx_rtmp_mpegts.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/hls/ngx_rtmp_mpegts.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_access_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_amf.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_amf.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_auto_push_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bandwidth.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bandwidth.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bitop.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_bitop.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_cmd_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_cmd_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_codec_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_codec_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_control_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_core_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_eval.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_eval.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_exec_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_flv_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_handler.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_handshake.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_init.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_limit_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_live_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_live_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_log_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_mp4_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_netcall_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_netcall_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_notify_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_play_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_play_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_proxy_protocol.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_proxy_protocol.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_receive.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_record_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_record_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_relay_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_relay_module.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_send.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_shared.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_stat_module.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_streams.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/nginx-rtmp-module/ngx_rtmp_version.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_read.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_read_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_write.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_aio_write_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_alloc.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_alloc.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_atomic.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_channel.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_channel.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_daemon.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin_init.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_darwin_sendfile_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_errno.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_errno.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_file_aio_read.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_files.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_files.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_init.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_rfork_thread.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_rfork_thread.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_freebsd_sendfile_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_amd64.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_ppc.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_sparc64.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_gcc_atomic_x86.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_aio_read.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_init.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_linux_sendfile_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_os.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_posix_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_posix_init.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process_cycle.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_process_cycle.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_pthread_thread.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_readv_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_recv.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_send.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setaffinity.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setaffinity.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setproctitle.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_setproctitle.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_shmem.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_shmem.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_socket.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_socket.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris_config.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris_init.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_solaris_sendfilev_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_sunpro_atomic_sparc64.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_thread.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_time.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_time.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_udp_recv.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_user.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_user.h
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/ngx_writev_chain.c
/home/ligp/svn_demo/nginx_rtmp_module/branch/nginx-1.6.2_with_pull_record/src/os/unix/rfork_thread.S
